// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Formats
// System.Formats.Asn1
extension System.Formats.Asn1 {
// type: System.Formats.Asn1.Asn1Tag
// boxed value type
    /**
    This type represents an ASN.1 tag, as described in ITU-T Recommendation X.680.

    */
public final class Asn1Tag
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_Asn1Tag_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Formats.Asn1.Asn1Tag Boolean
    /**
    Represents the universal class tag for a Boolean value.

    */
    public class var Boolean : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_Boolean());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag ConstructedBitString
    /**
    Represents the universal class tag for a Bit String value under a constructed encoding.

    */
    public class var ConstructedBitString : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_ConstructedBitString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag ConstructedOctetString
    /**
    Represents the universal class tag for a Octet String value under a constructed encoding.

    */
    public class var ConstructedOctetString : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_ConstructedOctetString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag Enumerated
    /**
    Represents the universal class tag for an Enumerated value.

    */
    public class var Enumerated : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_Enumerated());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag GeneralizedTime
    /**
    Represents the universal class tag for a GeneralizedTime value.

    */
    public class var GeneralizedTime : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_GeneralizedTime());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag Integer
    /**
    Represents the universal class tag for an Integer value.

    */
    public class var Integer : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_Integer());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag Null
    /**
    Represents the universal class tag for a  value.

    */
    public class var Null : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_Null());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag ObjectIdentifier
    /**
    Represents the universal class tag for an Object Identifier value.

    */
    public class var ObjectIdentifier : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_ObjectIdentifier());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag PrimitiveBitString
    /**
    Represents the universal class tag for a Bit String value under a primitive encoding.

    */
    public class var PrimitiveBitString : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_PrimitiveBitString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag PrimitiveOctetString
    /**
    Represents the universal class tag for an Octet String value under a primitive encoding.

    */
    public class var PrimitiveOctetString : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_PrimitiveOctetString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag Sequence
    /**
    Represents the universal class tag for a Sequence value (always a constructed encoding).

    */
    public class var Sequence : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_Sequence());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag SetOf
    /**
    Represents the universal class tag for a SetOf value (always a constructed encoding).

    */
    public class var SetOf : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_SetOf());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.Asn1Tag UtcTime
    /**
    Represents the universal class tag for a UtcTime value.

    */
    public class var UtcTime : dotnet.System.Formats.Asn1.Asn1Tag {
        get {
        let __return = dotnet.System.Formats.Asn1.Asn1Tag(hndl: System_Formats_Asn1_Asn1Tag_get_UtcTime());
            return __return;
        }
    }
    /**
    Indicates if the tag represents a constructed encoding (), or a primitive encoding ().

    */
    public var IsConstructed : Bool {
        get {
            return try! get_IsConstructed();
        }
    }
    /**
    The tag class to which this tag belongs.

    */
    public var TagClass : dotnet.System.Formats.Asn1.TagClass {
        get {
            return try! get_TagClass();
        }
    }
    /**
    The numeric value for this tag.

    */
    public var TagValue : Swift.Int32 {
        get {
            return try! get_TagValue();
        }
    }
    // .ctor(System.Formats.Asn1.TagClass, System.Int32, bool)
// docid: M:System.Formats.Asn1.Asn1Tag.#ctor(System.Formats.Asn1.TagClass,System.Int32,System.Boolean)
    /**
    Create an  for a specified value within a specified tag class.

    - Parameter tagClass: The tag class for this tag.
    - Parameter tagValue: The numeric value for this tag.
    - Parameter isConstructed: 
         for a constructed tag,  for a primitive tag.
    */
    public init(tagClass : dotnet.System.Formats.Asn1.TagClass, tagValue : Swift.Int32, isConstructed : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Formats_Asn1_Asn1Tag_ctor_0__3__TagClass_i32_bool(&__thrown, tagClass.get_value(), tagValue, Swift.Int32(isConstructed ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Formats.Asn1.UniversalTagNumber, bool)
// docid: M:System.Formats.Asn1.Asn1Tag.#ctor(System.Formats.Asn1.UniversalTagNumber,System.Boolean)
    /**
    Create an  for a tag from the UNIVERSAL class.

    - Parameter universalTagNumber: One of the enumeration values that specifies the semantic type for this tag.
    - Parameter isConstructed: 
         for a constructed tag,  for a primitive tag.
    */
    public init(universalTagNumber : dotnet.System.Formats.Asn1.UniversalTagNumber, isConstructed : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Formats_Asn1_Asn1Tag_ctor_0__2__UniversalTagNumber_bool(&__thrown, universalTagNumber.get_value(), Swift.Int32(isConstructed ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Formats_Asn1_Asn1Tag_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Formats.Asn1.Asn1Tag AsConstructed()
// docid: M:System.Formats.Asn1.Asn1Tag.AsConstructed
    /**
    Produces a tag with the same  and  values, but whose  is .

    - Returns: A tag with the same  and  values, but whose  is .

    */
    public func AsConstructed() throws -> dotnet.System.Formats.Asn1.Asn1Tag {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_Asn1Tag__AsConstructed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.Asn1Tag(hndl : __return);
        }
    }
    // System.Formats.Asn1.Asn1Tag AsPrimitive()
// docid: M:System.Formats.Asn1.Asn1Tag.AsPrimitive
    /**
    Produces a tag with the same  and  values, but whose  is .

    - Returns: A tag with the same  and  values, but whose  is .

    */
    public func AsPrimitive() throws -> dotnet.System.Formats.Asn1.Asn1Tag {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_Asn1Tag__AsPrimitive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.Asn1Tag(hndl : __return);
        }
    }
    // System.Int32 CalculateEncodedSize()
// docid: M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize
    /**
    Reports the number of bytes required for the BER-encoding of this tag.

    - Returns: The number of bytes required for the BER-encoding of this tag.

    */
    public func CalculateEncodedSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_i32__CalculateEncodedSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Formats.Asn1.Asn1Tag Decode(System.ReadOnlySpan<System.Byte>, ref System.Int32)
// TODO COPE (write_all_methods) (span) System.Int32 Encode(System.Span<System.Byte>)
    // bool Equals(System.Formats.Asn1.Asn1Tag)
// docid: M:System.Formats.Asn1.Asn1Tag.Equals(System.Formats.Asn1.Asn1Tag)
    /**
    Tests if  has the same encoding as this tag.

    - Parameter other: Tag to test for equality.
    - Returns: 
         if  has the same values for , , and ;  otherwise.

    */
    public func Equals(other : dotnet.System.Formats.Asn1.Asn1Tag) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_bool__Equals_0__1__Asn1Tag(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Formats.Asn1.Asn1Tag.Equals(System.Object)
    /**
    Tests if  is an  with the same encoding as this tag.

    - Parameter obj: Object to test for value equality
    - Returns: 
         if  is not an ,  otherwise.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Formats.Asn1.Asn1Tag.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool HasSameClassAndValue(System.Formats.Asn1.Asn1Tag)
// docid: M:System.Formats.Asn1.Asn1Tag.HasSameClassAndValue(System.Formats.Asn1.Asn1Tag)
    /**
    Tests if  has the same  and  values as this tag, and does not compare .

    - Parameter other: Tag to test for concept equality.
    - Returns: 
         if  has the same  and  as this tag,  otherwise.

    */
    public func HasSameClassAndValue(other : dotnet.System.Formats.Asn1.Asn1Tag) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_bool__HasSameClassAndValue_0__1__Asn1Tag(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Formats.Asn1.Asn1Tag, System.Formats.Asn1.Asn1Tag)
// docid: M:System.Formats.Asn1.Asn1Tag.op_Equality(System.Formats.Asn1.Asn1Tag,System.Formats.Asn1.Asn1Tag)
    /**
    Tests if two  values have the same BER encoding.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  have the same BER encoding,  otherwise.

    */
    public class func op_Equality(left : dotnet.System.Formats.Asn1.Asn1Tag, right : dotnet.System.Formats.Asn1.Asn1Tag) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_bool__op_Equality_0__2__Asn1Tag_Asn1Tag(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Formats.Asn1.Asn1Tag, System.Formats.Asn1.Asn1Tag)
// docid: M:System.Formats.Asn1.Asn1Tag.op_Inequality(System.Formats.Asn1.Asn1Tag,System.Formats.Asn1.Asn1Tag)
    /**
    Tests if two  values have a different BER encoding.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  have a different BER encoding,  otherwise.

    */
    public class func op_Inequality(left : dotnet.System.Formats.Asn1.Asn1Tag, right : dotnet.System.Formats.Asn1.Asn1Tag) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_bool__op_Inequality_0__2__Asn1Tag_Asn1Tag(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Formats.Asn1.Asn1Tag.ToString
    /**
    Provides a text representation of this tag suitable for debugging.

    - Returns: A text representation of this tag suitable for debugging.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) bool TryDecode(System.ReadOnlySpan<System.Byte>, ref System.Formats.Asn1.Asn1Tag, ref System.Int32)
// TODO COPE (write_all_methods) (span) bool TryEncode(System.Span<System.Byte>, ref System.Int32)
    // [IsSpecialName] bool get_IsConstructed()
// docid: M:System.Formats.Asn1.Asn1Tag.get_IsConstructed
    public func get_IsConstructed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_bool__get_IsConstructed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Formats.Asn1.TagClass get_TagClass()
// docid: M:System.Formats.Asn1.Asn1Tag.get_TagClass
    public func get_TagClass() throws -> dotnet.System.Formats.Asn1.TagClass {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_TagClass__get_TagClass_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.TagClass(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_TagValue()
// docid: M:System.Formats.Asn1.Asn1Tag.get_TagValue
    public func get_TagValue() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_Asn1Tag_i32__get_TagValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // Asn1Tag


// type: System.Formats.Asn1.AsnContentException
    /**
    The exception that is thrown when an encoded ASN.1 value cannot be successfully decoded.

    */
open class AsnContentException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_AsnContentException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Formats.Asn1.AsnContentException.#ctor
    /**
    Initializes a new instance of the  class, using the default message.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Formats_Asn1_AsnContentException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Formats.Asn1.AsnContentException.#ctor(System.String)
    /**
    Initializes a new instance of the  class, using the provided message.

    - Parameter message: The error message that explains the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Formats_Asn1_AsnContentException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Formats.Asn1.AsnContentException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class, using the provided message and exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Formats_Asn1_AsnContentException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AsnContentException


// type: System.Formats.Asn1.AsnDecoder
public struct AsnDecoder {
// TODO COPE (write_all_methods) (span) System.Byte[] ReadBitString(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool ReadBoolean(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.String ReadCharacterString(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, System.Formats.Asn1.UniversalTagNumber, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.Formats.Asn1.Asn1Tag ReadEncodedValue(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, ref System.Int32, ref System.Int32)
// TODO COPE (write_all_methods) (span) System.Enum ReadEnumeratedValue(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, System.Type, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.DateTimeOffset ReadGeneralizedTime(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.Numerics.BigInteger ReadInteger(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.Collections.BitArray ReadNamedBitList(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.Enum ReadNamedBitListValue(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, System.Type, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) void ReadNull(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.String ReadObjectIdentifier(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.Byte[] ReadOctetString(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) void ReadSequence(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, ref System.Int32, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) void ReadSetOf(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, ref System.Int32, ref System.Int32, bool, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) System.DateTimeOffset ReadUtcTime(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadBitString(System.ReadOnlySpan<System.Byte>, System.Span<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, ref System.Int32, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadCharacterString(System.ReadOnlySpan<System.Byte>, System.Span<System.Char>, System.Formats.Asn1.AsnEncodingRules, System.Formats.Asn1.UniversalTagNumber, ref System.Int32, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadCharacterStringBytes(System.ReadOnlySpan<System.Byte>, System.Span<System.Byte>, System.Formats.Asn1.AsnEncodingRules, System.Formats.Asn1.Asn1Tag, ref System.Int32, ref System.Int32)
// TODO COPE (write_all_methods) (span) bool TryReadEncodedValue(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Formats.Asn1.Asn1Tag, ref System.Int32, ref System.Int32, ref System.Int32)
// TODO COPE (write_all_methods) (span) bool TryReadInt32(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadInt64(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int64, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadOctetString(System.ReadOnlySpan<System.Byte>, System.Span<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.Int32, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadUInt32(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.UInt32, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadUInt64(System.ReadOnlySpan<System.Byte>, System.Formats.Asn1.AsnEncodingRules, ref System.UInt64, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
} // AsnDecoder


// type: System.Formats.Asn1.AsnEncodingRules
    /**
    The encoding ruleset for an  or .

    */
public struct AsnEncodingRules : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_AsnEncodingRules_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Formats.Asn1.AsnEncodingRules BER
    /**
    ITU-T X.690 Basic Encoding Rules

    */
    public static var BER : dotnet.System.Formats.Asn1.AsnEncodingRules {
        get {
        let __return = dotnet.System.Formats.Asn1.AsnEncodingRules(val: System_Formats_Asn1_AsnEncodingRules_get_BER());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.AsnEncodingRules CER
    /**
    ITU-T X.690 Canonical Encoding Rules

    */
    public static var CER : dotnet.System.Formats.Asn1.AsnEncodingRules {
        get {
        let __return = dotnet.System.Formats.Asn1.AsnEncodingRules(val: System_Formats_Asn1_AsnEncodingRules_get_CER());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.AsnEncodingRules DER
    /**
    ITU-T X.690 Distinguished Encoding Rules

    */
    public static var DER : dotnet.System.Formats.Asn1.AsnEncodingRules {
        get {
        let __return = dotnet.System.Formats.Asn1.AsnEncodingRules(val: System_Formats_Asn1_AsnEncodingRules_get_DER());
            return __return;
        }
    }
} // AsnEncodingRules


// type: System.Formats.Asn1.AsnReader
    /**
    A stateful, forward-only reader for BER-, CER-, or DER-encoded ASN.1 data.

    */
open class AsnReader
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_AsnReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ReadOnlyMemory<System.Byte>, System.Formats.Asn1.AsnEncodingRules, System.Formats.Asn1.AsnReaderOptions)
// docid: M:System.Formats.Asn1.AsnReader.#ctor(System.ReadOnlyMemory{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.AsnReaderOptions)
    /**
    Construct an  over  with a given ruleset.

    - Parameter data: The data to read.
    - Parameter ruleSet: The encoding constraints for the reader.
    - Parameter options: Additional options for the reader.
    */
    public init(data : dotnet.System.ReadOnlyMemory_1<Swift.UInt8>, ruleSet : dotnet.System.Formats.Asn1.AsnEncodingRules, options : dotnet.System.Formats.Asn1.AsnReaderOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Formats_Asn1_AsnReader_ctor_0__3__System_ReadOnlyMemory_u8__AsnEncodingRules_AsnReaderOptions(&__thrown, data.get_handle(), ruleSet.get_value(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.ReadOnlyMemory<System.Byte> PeekContentBytes()
// docid: M:System.Formats.Asn1.AsnReader.PeekContentBytes
    /**
    Get a  view of the content octets (bytes) of the next encoded value without advancing the reader.

    - Returns: The bytes of the contents octets of the next encoded value.

    */
    open func PeekContentBytes() throws -> dotnet.System.ReadOnlyMemory_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_System_ReadOnlyMemory_u8___PeekContentBytes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // System.ReadOnlyMemory<System.Byte> PeekEncodedValue()
// docid: M:System.Formats.Asn1.AsnReader.PeekEncodedValue
    /**
    Get a  view of the next encoded value without advancing the reader. For indefinite length encodings this includes the End of Contents marker.

    - Returns: The bytes of the next encoded value.

    */
    open func PeekEncodedValue() throws -> dotnet.System.ReadOnlyMemory_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_System_ReadOnlyMemory_u8___PeekEncodedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // System.Formats.Asn1.Asn1Tag PeekTag()
// docid: M:System.Formats.Asn1.AsnReader.PeekTag
    /**
    Read the encoded tag at the next data position, without advancing the reader.

    - Returns: The decoded tag value.

    */
    open func PeekTag() throws -> dotnet.System.Formats.Asn1.Asn1Tag {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_Asn1Tag__PeekTag_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.Asn1Tag(hndl : __return);
        }
    }
    // System.Byte[] ReadBitString(ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadBitString(System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a BIT STRING with a specified tag, returning the value in a byte array.

    - Parameter unusedBitCount: On success, receives the number of bits in the last byte which were reported as "unused" by the writer.
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 1).
    - Returns: A copy of the value in a newly allocated, precisely sized, array.

    */
    open func ReadBitString(unusedBitCount : inout Swift.Int32, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
            var _tmp_out_unusedBitCount = unusedBitCount;
        let __return = System_Formats_Asn1_AsnReader_u8Array__ReadBitString_0__2__outi32_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), &_tmp_out_unusedBitCount, (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        let _tmp2_unusedBitCount = _tmp_out_unusedBitCount;
            unusedBitCount = _tmp2_unusedBitCount;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // bool ReadBoolean(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadBoolean(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a Boolean with a specified tag.

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 1).
    - Returns: The decoded value.

    */
    open func ReadBoolean(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_bool__ReadBoolean_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ReadCharacterString(System.Formats.Asn1.UniversalTagNumber, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadCharacterString(System.Formats.Asn1.UniversalTagNumber,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as character string with the specified tag and encoding type, returning the decoded value as a string.

    - Parameter encodingType: One of the enumeration values representing the value type to process.
    - Parameter expectedTag: The tag to check for before reading, or  for the universal tag that is appropriate to the requested encoding type.
    - Returns: The decoded value.

    */
    open func ReadCharacterString(encodingType : dotnet.System.Formats.Asn1.UniversalTagNumber, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_String__ReadCharacterString_0__2__UniversalTagNumber_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), encodingType.get_value(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.ReadOnlyMemory<System.Byte> ReadEncodedValue()
// docid: M:System.Formats.Asn1.AsnReader.ReadEncodedValue
    /**
    Get a  view of the next encoded value, and advance the reader past it. For an indefinite length encoding this includes the End of Contents marker.

    - Returns: A  view of the next encoded value.

    */
    open func ReadEncodedValue() throws -> dotnet.System.ReadOnlyMemory_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_System_ReadOnlyMemory_u8___ReadEncodedValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // System.ReadOnlyMemory<System.Byte> ReadEnumeratedBytes(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadEnumeratedBytes(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a Enumerated with a specified tag, returning the contents as a  over the original data.

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 10).
    - Returns: The bytes of the Enumerated value, in signed big-endian form.

    */
    open func ReadEnumeratedBytes(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.ReadOnlyMemory_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_System_ReadOnlyMemory_u8___ReadEnumeratedBytes_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // System.Enum ReadEnumeratedValue(System.Type, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadEnumeratedValue(System.Type,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as an Enumerated with a specified tag, converting it to the non-[] enum specified by .

    - Parameter enumType: Type object representing the destination type.
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 10).
    - Returns: The Enumerated value converted to a .

    */
    open func ReadEnumeratedValue(enumType : dotnet.System.Type_, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Enum {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_Enum__ReadEnumeratedValue_0__2__Type_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), enumType.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Enum(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TEnum ReadEnumeratedValue<TEnum>(System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // System.DateTimeOffset ReadGeneralizedTime(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadGeneralizedTime(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a GeneralizedTime with a specified tag.

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 24).
    - Returns: The decoded value.

    */
    open func ReadGeneralizedTime(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_DateTimeOffset__ReadGeneralizedTime_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // System.Numerics.BigInteger ReadInteger(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadInteger(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as an Integer with a specified tag.

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 2).
    - Returns: The decoded value.

    */
    open func ReadInteger(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Numerics.BigInteger {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_BigInteger__ReadInteger_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.BigInteger(hndl : __return);
        }
    }
    // System.ReadOnlyMemory<System.Byte> ReadIntegerBytes(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadIntegerBytes(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a Integer with a specified tag, returning the contents as a  over the original data.

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 2).
    - Returns: The bytes of the Integer value, in signed big-endian form.

    */
    open func ReadIntegerBytes(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.ReadOnlyMemory_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_System_ReadOnlyMemory_u8___ReadIntegerBytes_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ReadOnlyMemory_1(hndl : __return);
        }
    }
    // System.Collections.BitArray ReadNamedBitList(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadNamedBitList(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a NamedBitList with a specified tag.

    - Parameter expectedTag: The tag to check for before reading.
    - Returns: The bits from the encoded value.

    */
    open func ReadNamedBitList(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Collections.BitArray {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_BitArray__ReadNamedBitList_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.BitArray(hndl : __return);
        }
    }
    // System.Enum ReadNamedBitListValue(System.Type, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadNamedBitListValue(System.Type,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a NamedBitList with a specified tag, converting it to the [] enum specified by .

    - Parameter flagsEnumType: Type object representing the destination type.
    - Parameter expectedTag: The tag to check for before reading.
    - Returns: The NamedBitList value converted to a .

    */
    open func ReadNamedBitListValue(flagsEnumType : dotnet.System.Type_, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Enum {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_Enum__ReadNamedBitListValue_0__2__Type_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), flagsEnumType.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Enum(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TFlagsEnum ReadNamedBitListValue<TFlagsEnum>(System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // void ReadNull(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadNull(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a NULL with a specified tag.

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 5).
    */
    open func ReadNull(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnReader_void__ReadNull_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ReadObjectIdentifier(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadObjectIdentifier(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as an OBJECT IDENTIFIER with a specified tag, returning the value in a dotted decimal format string.

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 6).
    - Returns: The object identifier value in a dotted decimal format string.

    */
    open func ReadObjectIdentifier(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_String__ReadObjectIdentifier_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Byte[] ReadOctetString(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the value in a byte array.

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 4).
    - Returns: A copy of the value in a newly allocated, precisely sized, array.

    */
    open func ReadOctetString(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_u8Array__ReadOctetString_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Formats.Asn1.AsnReader ReadSequence(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a SEQUENCE or SEQUENCE-OF with the specified tag and returns the result as a new reader positioned at the first value in the sequence (or with  == ).

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 16).
    - Returns: A new reader positioned at the first value in the sequence (or with  == ).

    */
    open func ReadSequence(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Formats.Asn1.AsnReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_AsnReader__ReadSequence_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.AsnReader(hndl : __return);
        }
    }
    // System.Formats.Asn1.AsnReader ReadSetOf(bool, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadSetOf(System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a SET-OF with the specified tag and returns the result as a new reader positioned at the first value in the set-of (or with  == ).

    - Parameter skipSortOrderValidation: 
         to always accept the data in the order it is presented,  to verify that the data is sorted correctly when the encoding rules say sorting was required (CER and DER).
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 17).
    - Returns: A new reader positioned at the first value in the set-of (or with  == ).

    */
    open func ReadSetOf(skipSortOrderValidation : Bool, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Formats.Asn1.AsnReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_AsnReader__ReadSetOf_0__2__bool_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), Swift.Int32(skipSortOrderValidation ? 1 : 0), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.AsnReader(hndl : __return);
        }
    }
    // System.Formats.Asn1.AsnReader ReadSetOf(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a SET-OF with the specified tag and returns the result as a new reader positioned at the first value in the set-of (or with  == ), using the  value from the constructor (default ).

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 17).
    - Returns: A new reader positioned at the first value in the set-of (or with  == ).

    */
    open func ReadSetOf(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Formats.Asn1.AsnReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_AsnReader__ReadSetOf_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.AsnReader(hndl : __return);
        }
    }
    // System.DateTimeOffset ReadUtcTime(System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadUtcTime(System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a UTCTime with a specified tag.

    - Parameter twoDigitYearMax: The largest year to represent with this value.
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 23).
    - Returns: The decoded value.

    */
    open func ReadUtcTime(twoDigitYearMax : Swift.Int32, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_DateTimeOffset__ReadUtcTime_0__2__i32_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), twoDigitYearMax, (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // System.DateTimeOffset ReadUtcTime(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.ReadUtcTime(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a UTCTime with a specified tag using the  value from options passed to the constructor (with a default of 2049).

    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 23).
    - Returns: The decoded value.

    */
    open func ReadUtcTime(expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_DateTimeOffset__ReadUtcTime_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // void ThrowIfNotEmpty()
// docid: M:System.Formats.Asn1.AsnReader.ThrowIfNotEmpty
    /**
    Throws a standardized  if the reader has remaining data, performs no function if  returns .

    */
    open func ThrowIfNotEmpty() throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnReader_void__ThrowIfNotEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryReadBitString(System.Span<System.Byte>, ref System.Int32, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadCharacterString(System.Span<System.Char>, System.Formats.Asn1.UniversalTagNumber, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// TODO COPE (write_all_methods) (span) bool TryReadCharacterStringBytes(System.Span<System.Byte>, System.Formats.Asn1.Asn1Tag, ref System.Int32)
    // bool TryReadInt32(ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.TryReadInt32(System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Attempts to read the next value as an Integer with a specified tag, as a signed 32-bit value.

    - Parameter value: On success, receives the decoded value.
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 2).
    - Returns: 
         and does not advance the reader if the value is not between  and , inclusive; otherwise  is returned and the reader advances.

    */
    open func TryReadInt32(value : inout Swift.Int32, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Formats_Asn1_AsnReader_bool__TryReadInt32_0__2__outi32_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), &_tmp_out_value, (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryReadInt64(ref System.Int64, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.TryReadInt64(System.Int64@,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Attempts to read the next value as an Integer with a specified tag, as a signed 64-bit value.

    - Parameter value: On success, receives the decoded value.
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 2).
    - Returns: 
         and does not advance the reader if the value is not between  and , inclusive; otherwise  is returned and the reader advances.

    */
    open func TryReadInt64(value : inout Swift.Int64, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Formats_Asn1_AsnReader_bool__TryReadInt64_0__2__outi64_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), &_tmp_out_value, (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryReadOctetString(System.Span<System.Byte>, ref System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // bool TryReadPrimitiveBitString(ref System.Int32, ref System.ReadOnlyMemory<System.Byte>, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.TryReadPrimitiveBitString(System.Int32@,System.ReadOnlyMemory{System.Byte}@,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Reads the next value as a BIT STRING with a specified tag, returning the contents as a  over the original data.

    - Parameter unusedBitCount: On success, receives the number of bits in the last byte which were reported as "unused" by the writer.
    - Parameter value: On success, receives a  over the original data corresponding to the value of the BIT STRING.
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 1).
    - Returns: 
         and advances the reader if the BIT STRING value had a primitive encoding,  and does not advance the reader if it had a constructed encoding.

    */
    open func TryReadPrimitiveBitString(unusedBitCount : inout Swift.Int32, value : inout dotnet.System.ReadOnlyMemory_1<Swift.UInt8>, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_unusedBitCount = unusedBitCount;
            var _tmp_out_value = value.get_handle();
        let __return = System_Formats_Asn1_AsnReader_bool__TryReadPrimitiveBitString_0__3__outi32_outSystem_ReadOnlyMemory_u8__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), &_tmp_out_unusedBitCount, &_tmp_out_value, (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        let _tmp2_unusedBitCount = _tmp_out_unusedBitCount;
            unusedBitCount = _tmp2_unusedBitCount;
        let _tmp2_value = dotnet.System.ReadOnlyMemory_1<Swift.UInt8>(hndl : _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryReadPrimitiveCharacterStringBytes(System.Formats.Asn1.Asn1Tag, ref System.ReadOnlyMemory<System.Byte>)
// docid: M:System.Formats.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Formats.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)
    /**
    Reads the next value as a character with a specified tag, returning the contents as an unprocessed  over the original data.

    - Parameter expectedTag: The tag to check for before reading.
    - Parameter contents: On success, receives a  over the original data corresponding to the value of the character string.
    - Returns: 
         and advances the reader if the character string value had a primitive encoding,  and does not advance the reader if it had a constructed encoding.

    */
    open func TryReadPrimitiveCharacterStringBytes(expectedTag : dotnet.System.Formats.Asn1.Asn1Tag, contents : inout dotnet.System.ReadOnlyMemory_1<Swift.UInt8>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_contents = contents.get_handle();
        let __return = System_Formats_Asn1_AsnReader_bool__TryReadPrimitiveCharacterStringBytes_0__2__Asn1Tag_outSystem_ReadOnlyMemory_u8_(&__thrown, self.get_handle(), expectedTag.get_handle(), &_tmp_out_contents);
        let _tmp2_contents = dotnet.System.ReadOnlyMemory_1<Swift.UInt8>(hndl : _tmp_out_contents);
            contents = _tmp2_contents;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryReadPrimitiveOctetString(ref System.ReadOnlyMemory<System.Byte>, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.TryReadPrimitiveOctetString(System.ReadOnlyMemory{System.Byte}@,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Attempts to read the next value as an OCTET STRING with a specified tag, returning the contents as a  over the original data.

    - Parameter contents: On success, receives a  over the original data corresponding to the value of the OCTET STRING.
    - Parameter expectedTag: The tag to check for before reading.
    - Returns: 
         and advances the reader if the OCTET STRING value had a primitive encoding,  and does not advance the reader if it had a constructed encoding.

    */
    open func TryReadPrimitiveOctetString(contents : inout dotnet.System.ReadOnlyMemory_1<Swift.UInt8>, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_contents = contents.get_handle();
        let __return = System_Formats_Asn1_AsnReader_bool__TryReadPrimitiveOctetString_0__2__outSystem_ReadOnlyMemory_u8__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), &_tmp_out_contents, (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        let _tmp2_contents = dotnet.System.ReadOnlyMemory_1<Swift.UInt8>(hndl : _tmp_out_contents);
            contents = _tmp2_contents;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryReadUInt32(ref System.UInt32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.TryReadUInt32(System.UInt32@,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Attempts to read the next value as an Integer with a specified tag, as an unsigned 32-bit value.

    - Parameter value: On success, receives the decoded value.
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 2).
    - Returns: 
         and does not advance the reader if the value is not between  and , inclusive; otherwise  is returned and the reader advances.

    */
    open func TryReadUInt32(value : inout Swift.UInt32, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Formats_Asn1_AsnReader_bool__TryReadUInt32_0__2__outu32_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), &_tmp_out_value, (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryReadUInt64(ref System.UInt64, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnReader.TryReadUInt64(System.UInt64@,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Attempts to read the next value as an Integer with a specified tag, as an unsigned 64-bit value.

    - Parameter value: On success, receives the decoded value.
    - Parameter expectedTag: The tag to check for before reading, or  for the default tag (Universal 2).
    - Returns: 
         and does not advance the reader if the value is not between  and , inclusive; otherwise  is returned and the reader advances.

    */
    open func TryReadUInt64(value : inout Swift.UInt64, expectedTag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Formats_Asn1_AsnReader_bool__TryReadUInt64_0__2__outu64_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), &_tmp_out_value, (expectedTag != nil) ? expectedTag!.get_handle() : nil);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasData()
// docid: M:System.Formats.Asn1.AsnReader.get_HasData
    open func get_HasData() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_bool__get_HasData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Formats.Asn1.AsnEncodingRules get_RuleSet()
// docid: M:System.Formats.Asn1.AsnReader.get_RuleSet
    open func get_RuleSet() throws -> dotnet.System.Formats.Asn1.AsnEncodingRules {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReader_AsnEncodingRules__get_RuleSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.AsnEncodingRules(val: __return);
        }
    }
    /**
    Gets an indication of whether the reader has remaining data available to process.

    */
    open var HasData : Bool {
        get {
            return try! get_HasData();
        }
    }
    /**
    Gets the encoding rules in use by this reader.

    */
    open var RuleSet : dotnet.System.Formats.Asn1.AsnEncodingRules {
        get {
            return try! get_RuleSet();
        }
    }
} // AsnReader


// type: System.Formats.Asn1.AsnReaderOptions
// boxed value type
    /**
    Specifies options that modify the behavior of an .

    */
public final class AsnReaderOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_AsnReaderOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets or sets a value that indicates whether the reader should bypass sort ordering on a Set or Set-Of value.

    */
    public var SkipSetSortOrderVerification : Bool {
        get {
            return try! get_SkipSetSortOrderVerification();
        }
        set(v) {
            return try! set_SkipSetSortOrderVerification(value: v);
        }
    }
    /**
    Gets or sets the largest year to represent with a UtcTime value.

    */
    public var UtcTimeTwoDigitYearMax : Swift.Int32 {
        get {
            return try! get_UtcTimeTwoDigitYearMax();
        }
        set(v) {
            return try! set_UtcTimeTwoDigitYearMax(value: v);
        }
    }
    public override init() {
        let h = System_Formats_Asn1_AsnReaderOptions_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] bool get_SkipSetSortOrderVerification()
// docid: M:System.Formats.Asn1.AsnReaderOptions.get_SkipSetSortOrderVerification
    public func get_SkipSetSortOrderVerification() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReaderOptions_bool__get_SkipSetSortOrderVerification_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SkipSetSortOrderVerification(bool)
// docid: M:System.Formats.Asn1.AsnReaderOptions.set_SkipSetSortOrderVerification(System.Boolean)
    public func set_SkipSetSortOrderVerification(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnReaderOptions_void__set_SkipSetSortOrderVerification_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_UtcTimeTwoDigitYearMax()
// docid: M:System.Formats.Asn1.AsnReaderOptions.get_UtcTimeTwoDigitYearMax
    public func get_UtcTimeTwoDigitYearMax() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnReaderOptions_i32__get_UtcTimeTwoDigitYearMax_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_UtcTimeTwoDigitYearMax(System.Int32)
// docid: M:System.Formats.Asn1.AsnReaderOptions.set_UtcTimeTwoDigitYearMax(System.Int32)
    public func set_UtcTimeTwoDigitYearMax(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnReaderOptions_void__set_UtcTimeTwoDigitYearMax_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // AsnReaderOptions


// type: System.Formats.Asn1.AsnWriter
    /**
    A writer for BER-, CER-, and DER-encoded ASN.1 data.

    */
public final class AsnWriter
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_AsnWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Formats.Asn1.AsnEncodingRules)
// docid: M:System.Formats.Asn1.AsnWriter.#ctor(System.Formats.Asn1.AsnEncodingRules)
    /**
    Create a new  with a given set of encoding rules.

    - Parameter ruleSet: The encoding constraints for the writer.
    */
    public init(ruleSet : dotnet.System.Formats.Asn1.AsnEncodingRules) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Formats_Asn1_AsnWriter_ctor_0__1__AsnEncodingRules(&__thrown, ruleSet.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(System.Formats.Asn1.AsnWriter)
// docid: M:System.Formats.Asn1.AsnWriter.CopyTo(System.Formats.Asn1.AsnWriter)
    /**
    Copy the value of this writer into another.

    - Parameter destination: The writer to receive the value.
    */
    public func CopyTo(destination : dotnet.System.Formats.Asn1.AsnWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__CopyTo_0__1__AsnWriter(&__thrown, self.get_handle(), destination.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Byte[] Encode()
// docid: M:System.Formats.Asn1.AsnWriter.Encode
    /**
    Return a new array containing the encoded value.

    - Returns: A precisely-sized array containing the encoded value.

    */
    public func Encode() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnWriter_u8Array__Encode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 Encode(System.Span<System.Byte>)
    // bool EncodedValueEquals(System.Formats.Asn1.AsnWriter)
// docid: M:System.Formats.Asn1.AsnWriter.EncodedValueEquals(System.Formats.Asn1.AsnWriter)
    /**
    Determines if  would produce an output identical to .

    - Parameter other: The instance to compare encoded values against.
    - Returns: 
         if the pending encoded data is identical to ,  otherwise.

    */
    public func EncodedValueEquals(other : dotnet.System.Formats.Asn1.AsnWriter) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnWriter_bool__EncodedValueEquals_0__1__AsnWriter(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool EncodedValueEquals(System.ReadOnlySpan<System.Byte>)
    // System.Int32 GetEncodedLength()
// docid: M:System.Formats.Asn1.AsnWriter.GetEncodedLength
    /**
    Gets the number of bytes that would be written by .

    - Returns: The number of bytes that would be written by .

    */
    public func GetEncodedLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnWriter_i32__GetEncodedLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void PopOctetString(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.PopOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Indicate that the open Octet String with the tag UNIVERSAL 4 is closed, returning the writer to the parent context.

    - Parameter tag: The tag to write, or  for the default tag (Universal 4).
    */
    public func PopOctetString(tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__PopOctetString_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PopSequence(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Indicate that the open Sequence with the specified tag is closed, returning the writer to the parent context.

    - Parameter tag: The tag to write, or  for the default tag (Universal 16).
    */
    public func PopSequence(tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__PopSequence_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PopSetOf(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Indicate that the open Set-Of with the specified tag is closed, returning the writer to the parent context.

    - Parameter tag: The tag to write, or  for the default tag (Universal 17).
    */
    public func PopSetOf(tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__PopSetOf_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Formats.Asn1.AsnWriter.Scope PushOctetString(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.PushOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Begin writing an Octet String value with a specified tag.

    - Parameter tag: The tag to write, or  for the default tag (Universal 4).
    - Returns: A disposable value which will automatically call .

    */
    public func PushOctetString(tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Formats.Asn1.AsnWriter_Scope {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnWriter_AsnWriter_Scope__PushOctetString_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.AsnWriter_Scope(hndl : __return);
        }
    }
    // System.Formats.Asn1.AsnWriter.Scope PushSequence(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Begin writing a Sequence with a specified tag.

    - Parameter tag: The tag to write, or  for the default tag (Universal 16).
    - Returns: A disposable value which will automatically call .

    */
    public func PushSequence(tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Formats.Asn1.AsnWriter_Scope {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnWriter_AsnWriter_Scope__PushSequence_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.AsnWriter_Scope(hndl : __return);
        }
    }
    // System.Formats.Asn1.AsnWriter.Scope PushSetOf(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Begin writing a Set-Of with a specified tag.

    - Parameter tag: The tag to write, or  for the default tag (Universal 17).
    - Returns: A disposable value which will automatically call .

    */
    public func PushSetOf(tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws -> dotnet.System.Formats.Asn1.AsnWriter_Scope {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnWriter_AsnWriter_Scope__PushSetOf_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.AsnWriter_Scope(hndl : __return);
        }
    }
    // void Reset()
// docid: M:System.Formats.Asn1.AsnWriter.Reset
    /**
    Reset the writer to have no data, without releasing resources.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryEncode(System.Span<System.Byte>, ref System.Int32)
// TODO COPE (write_all_methods) (span) void WriteBitString(System.ReadOnlySpan<System.Byte>, System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // void WriteBoolean(bool, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteBoolean(System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write a Boolean value with a specified tag.

    - Parameter value: The value to write.
    - Parameter tag: The tag to write, or  for the default tag (Universal 1).
    */
    public func WriteBoolean(value : Bool, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteBoolean_0__2__bool_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteCharacterString(System.Formats.Asn1.UniversalTagNumber, System.ReadOnlySpan<System.Char>, System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // void WriteCharacterString(System.Formats.Asn1.UniversalTagNumber, System.String, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteCharacterString(System.Formats.Asn1.UniversalTagNumber,System.String,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write the provided string using the specified encoding type using the specified tag corresponding to the encoding type.

    - Parameter encodingType: One of the enumeration values representing the encoding to use.
    - Parameter value: The string to write.
    - Parameter tag: The tag to write, or  for the universal tag that is appropriate to the requested encoding type.
    */
    public func WriteCharacterString(encodingType : dotnet.System.Formats.Asn1.UniversalTagNumber, value : dotnet.System.String, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteCharacterString_0__3__UniversalTagNumber_String_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), encodingType.get_value(), value.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteEncodedValue(System.ReadOnlySpan<System.Byte>)
    // void WriteEnumeratedValue(System.Enum, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteEnumeratedValue(System.Enum,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write a non-[] enum value as an Enumerated with tag UNIVERSAL 10.

    - Parameter value: The boxed enumeration value to write.
    - Parameter tag: The tag to write, or  for the default tag (Universal 10).
    */
    public func WriteEnumeratedValue(value : dotnet.System.Enum, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteEnumeratedValue_0__2__Enum_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEnumeratedValue<TEnum>(TEnum, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteEnumeratedValue``1(``0,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write a non-[] enum value as an Enumerated with tag UNIVERSAL 10.

    - Parameter value: The boxed enumeration value to write.
    - Parameter tag: The tag to write, or  for the default tag (Universal 10).
    */
    public func WriteEnumeratedValue<UTEnum : SGBridgeGenericValue>(value : UTEnum, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteEnumeratedValue_1__2__UTEnum_System_Nullable_System_Formats_Asn1_Asn1Tag_(UTEnum.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteGeneralizedTime(System.DateTimeOffset, bool, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteGeneralizedTime(System.DateTimeOffset,System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write the provided  as a GeneralizedTime with a specified UNIVERSAL 24, optionally excluding the fractional seconds.

    - Parameter value: The value to write.
    - Parameter omitFractionalSeconds: 
         to treat the fractional seconds in  as 0 even if a non-zero value is present.
    - Parameter tag: The tag to write, or  for the default tag (Universal 24).
    */
    public func WriteGeneralizedTime(value : dotnet.System.DateTimeOffset, omitFractionalSeconds : Bool = false, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteGeneralizedTime_0__3__DateTimeOffset_bool_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value.get_handle(), Swift.Int32(omitFractionalSeconds ? 1 : 0), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInteger(System.Int64, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteInteger(System.Int64,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write an Integer value with a specified tag.

    - Parameter value: The value to write.
    - Parameter tag: The tag to write, or  for the default tag (Universal 2).
    */
    public func WriteInteger(value : Swift.Int64, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteInteger_0__2__i64_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value, (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInteger(System.Numerics.BigInteger, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteInteger(System.Numerics.BigInteger,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write an Integer value with a specified tag.

    - Parameter value: The value to write.
    - Parameter tag: The tag to write, or  for the default tag (Universal 2).
    */
    public func WriteInteger(value : dotnet.System.Numerics.BigInteger, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteInteger_0__2__BigInteger_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteInteger(System.ReadOnlySpan<System.Byte>, System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // void WriteInteger(System.UInt64, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteInteger(System.UInt64,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write an Integer value with a specified tag.

    - Parameter value: The value to write.
    - Parameter tag: The tag to write, or  for the default tag (Universal 2).
    */
    public func WriteInteger(value : Swift.UInt64, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteInteger_0__2__u64_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value, (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteIntegerUnsigned(System.ReadOnlySpan<System.Byte>, System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // void WriteNamedBitList(System.Collections.BitArray, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteNamedBitList(System.Collections.BitArray,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write a bit array value as a NamedBitList with a specified tag.

    - Parameter value: The bits to write
    - Parameter tag: The tag to write, or  for the default tag (Universal 3).
    */
    public func WriteNamedBitList(value : dotnet.System.Collections.BitArray, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteNamedBitList_0__2__BitArray_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNamedBitList(System.Enum, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteNamedBitList(System.Enum,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write a [] enum value as a NamedBitList with a specified tag.

    - Parameter value: The boxed enumeration value to write
    - Parameter tag: The tag to write, or  for the default tag (Universal 3).
    */
    public func WriteNamedBitList(value : dotnet.System.Enum, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteNamedBitList_0__2__Enum_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNamedBitList<TEnum>(TEnum, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteNamedBitList``1(``0,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write a [] enum value as a NamedBitList with a specified tag.

    - Parameter value: The enumeration value to write
    - Parameter tag: The tag to write, or  for the default tag (Universal 3).
    */
    public func WriteNamedBitList<UTEnum : SGBridgeGenericValue>(value : UTEnum, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteNamedBitList_1__2__UTEnum_System_Nullable_System_Formats_Asn1_Asn1Tag_(UTEnum.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNull(System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteNull(System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write NULL with a specified tag.

    - Parameter tag: The tag to write, or  for the default tag (Universal 5).
    */
    public func WriteNull(tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteNull_0__1__System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteObjectIdentifier(System.ReadOnlySpan<System.Char>, System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // void WriteObjectIdentifier(System.String, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteObjectIdentifier(System.String,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write an Object Identifier with a specified tag.

    - Parameter oidValue: The object identifier to write.
    - Parameter tag: The tag to write, or  for the default tag (Universal 6).
    */
    public func WriteObjectIdentifier(oidValue : dotnet.System.String, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteObjectIdentifier_0__2__String_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), oidValue.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteOctetString(System.ReadOnlySpan<System.Byte>, System.Nullable<System.Formats.Asn1.Asn1Tag>)
    // void WriteUtcTime(System.DateTimeOffset, System.Int32, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write the provided value as a UTCTime with a specified tag, provided the year is in the allowed range.

    - Parameter value: The value to write.
    - Parameter twoDigitYearMax: The maximum valid year for , after conversion to UTC.
              For the X.509 Time.utcTime range of 1950-2049, pass 2049.
    - Parameter tag: The tag to write, or  for the default tag (Universal 23).
    */
    public func WriteUtcTime(value : dotnet.System.DateTimeOffset, twoDigitYearMax : Swift.Int32, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteUtcTime_0__3__DateTimeOffset_i32_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value.get_handle(), twoDigitYearMax, (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteUtcTime(System.DateTimeOffset, System.Nullable<System.Formats.Asn1.Asn1Tag>)
// docid: M:System.Formats.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Nullable{System.Formats.Asn1.Asn1Tag})
    /**
    Write the provided value as a UTCTime with a specified tag, accepting the two-digit year as valid in context.

    - Parameter value: The value to write.
    - Parameter tag: The tag to write, or  for the default tag (Universal 23).
    */
    public func WriteUtcTime(value : dotnet.System.DateTimeOffset, tag : Optional<dotnet.System.Formats.Asn1.Asn1Tag> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_void__WriteUtcTime_0__2__DateTimeOffset_System_Nullable_System_Formats_Asn1_Asn1Tag_(&__thrown, self.get_handle(), value.get_handle(), (tag != nil) ? tag!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Formats.Asn1.AsnEncodingRules get_RuleSet()
// docid: M:System.Formats.Asn1.AsnWriter.get_RuleSet
    public func get_RuleSet() throws -> dotnet.System.Formats.Asn1.AsnEncodingRules {
        var __thrown : NullableHandle = nil;
        let __return = System_Formats_Asn1_AsnWriter_AsnEncodingRules__get_RuleSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Formats.Asn1.AsnEncodingRules(val: __return);
        }
    }
    /**
    Gets the encoding rules in use by this writer.

    */
    public var RuleSet : dotnet.System.Formats.Asn1.AsnEncodingRules {
        get {
            return try! get_RuleSet();
        }
    }
} // AsnWriter


// type: System.Formats.Asn1.AsnWriter+Scope
// boxed value type
    /**
    Provides an  target for safely closing an opened tag by using a lexical scope as a logical scope.

    */
public final class AsnWriter_Scope
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_AsnWriter_Scope_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Formats_Asn1_AsnWriter_Scope_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Formats.Asn1.AsnWriter.Scope.Dispose
    /**
    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Formats_Asn1_AsnWriter_Scope_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // AsnWriter_Scope


// type: System.Formats.Asn1.TagClass
    /**
    The tag class for a particular ASN.1 tag.

    */
public struct TagClass : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_TagClass_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Formats.Asn1.TagClass Universal
    /**
    The Universal tag class

    */
    public static var Universal : dotnet.System.Formats.Asn1.TagClass {
        get {
        let __return = dotnet.System.Formats.Asn1.TagClass(val: System_Formats_Asn1_TagClass_get_Universal());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.TagClass Application
    /**
    The Application tag class

    */
    public static var Application : dotnet.System.Formats.Asn1.TagClass {
        get {
        let __return = dotnet.System.Formats.Asn1.TagClass(val: System_Formats_Asn1_TagClass_get_Application());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.TagClass ContextSpecific
    /**
    The Context-Specific tag class

    */
    public static var ContextSpecific : dotnet.System.Formats.Asn1.TagClass {
        get {
        let __return = dotnet.System.Formats.Asn1.TagClass(val: System_Formats_Asn1_TagClass_get_ContextSpecific());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.TagClass Private
    /**
    The Private tag class

    */
    public static var Private : dotnet.System.Formats.Asn1.TagClass {
        get {
        let __return = dotnet.System.Formats.Asn1.TagClass(val: System_Formats_Asn1_TagClass_get_Private());
            return __return;
        }
    }
} // TagClass


// type: System.Formats.Asn1.UniversalTagNumber
    /**
    Tag assignments for the UNIVERSAL class in ITU-T X.680.

    */
public struct UniversalTagNumber : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Formats_Asn1_UniversalTagNumber_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Formats.Asn1.UniversalTagNumber EndOfContents
    /**
    The reserved identifier for the End-of-Contents marker in an indefinite length encoding.

    */
    public static var EndOfContents : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_EndOfContents());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Boolean
    /**
    The universal class tag value for Boolean.

    */
    public static var Boolean : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Boolean());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Integer
    /**
    The universal class tag value for Integer.

    */
    public static var Integer : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Integer());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber BitString
    /**
    The universal class tag value for Bit String.

    */
    public static var BitString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_BitString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber OctetString
    /**
    The universal class tag value for Octet String.

    */
    public static var OctetString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_OctetString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Null
    /**
    The universal class tag value for Null.

    */
    public static var Null : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Null());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber ObjectIdentifier
    /**
    The universal class tag value for Object Identifier.

    */
    public static var ObjectIdentifier : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_ObjectIdentifier());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber ObjectDescriptor
    /**
    The universal class tag value for Object Descriptor.

    */
    public static var ObjectDescriptor : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_ObjectDescriptor());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber External
    /**
    The universal class tag value for External.

    */
    public static var External : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_External());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber InstanceOf
    /**
    The universal class tag value for Instance-Of.

    */
    public static var InstanceOf : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_InstanceOf());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Real
    /**
    The universal class tag value for Real.

    */
    public static var Real : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Real());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Enumerated
    /**
    The universal class tag value for Enumerated.

    */
    public static var Enumerated : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Enumerated());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Embedded
    /**
    The universal class tag value for Embedded-PDV.

    */
    public static var Embedded : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Embedded());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber UTF8String
    /**
    The universal class tag value for UTF8String.

    */
    public static var UTF8String : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_UTF8String());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber RelativeObjectIdentifier
    /**
    The universal class tag value for Relative Object Identifier.

    */
    public static var RelativeObjectIdentifier : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_RelativeObjectIdentifier());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Time
    /**
    The universal class tag value for Time.

    */
    public static var Time : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Time());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Sequence
    /**
    The universal class tag value for Sequence.

    */
    public static var Sequence : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Sequence());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber SequenceOf
    /**
    The universal class tag value for Sequence-Of.

    */
    public static var SequenceOf : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_SequenceOf());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Set
    /**
    The universal class tag value for Set.

    */
    public static var Set : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Set());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber SetOf
    /**
    The universal class tag value for Set-Of.

    */
    public static var SetOf : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_SetOf());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber NumericString
    /**
    The universal class tag value for NumericString.

    */
    public static var NumericString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_NumericString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber PrintableString
    /**
    The universal class tag value for PrintableString.

    */
    public static var PrintableString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_PrintableString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber T61String
    /**
    The universal class tag value for T61String (TeletexString).

    */
    public static var T61String : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_T61String());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber TeletexString
    /**
    The universal class tag value for TeletexString (T61String).

    */
    public static var TeletexString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_TeletexString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber VideotexString
    /**
    The universal class tag value for VideotexString.

    */
    public static var VideotexString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_VideotexString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber IA5String
    /**
    The universal class tag value for IA5String.

    */
    public static var IA5String : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_IA5String());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber UtcTime
    /**
    The universal class tag value for UTCTime.

    */
    public static var UtcTime : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_UtcTime());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber GeneralizedTime
    /**
    The universal class tag value for GeneralizedTime.

    */
    public static var GeneralizedTime : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_GeneralizedTime());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber GraphicString
    /**
    The universal class tag value for GraphicString.

    */
    public static var GraphicString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_GraphicString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber ISO646String
    /**
    The universal class tag value for ISO646String (VisibleString).

    */
    public static var ISO646String : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_ISO646String());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber VisibleString
    /**
    The universal class tag value for VisibleString (ISO646String).

    */
    public static var VisibleString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_VisibleString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber GeneralString
    /**
    The universal class tag value for GeneralString.

    */
    public static var GeneralString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_GeneralString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber UniversalString
    /**
    The universal class tag value for UniversalString.

    */
    public static var UniversalString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_UniversalString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber UnrestrictedCharacterString
    /**
    The universal class tag value for an unrestricted character string.

    */
    public static var UnrestrictedCharacterString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_UnrestrictedCharacterString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber BMPString
    /**
    The universal class tag value for BMPString.

    */
    public static var BMPString : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_BMPString());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Date
    /**
    The universal class tag value for Date.

    */
    public static var Date : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Date());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber TimeOfDay
    /**
    The universal class tag value for Time-Of-Day.

    */
    public static var TimeOfDay : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_TimeOfDay());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber DateTime
    /**
    The universal class tag value for Date-Time.

    */
    public static var DateTime : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_DateTime());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber Duration
    /**
    The universal class tag value for Duration.

    */
    public static var Duration : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_Duration());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber ObjectIdentifierIRI
    /**
    The universal class tag value for Object Identifier Internationalized Resource Identifier (IRI).

    */
    public static var ObjectIdentifierIRI : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_ObjectIdentifierIRI());
            return __return;
        }
    }
    // static field: System.Formats.Asn1.UniversalTagNumber RelativeObjectIdentifierIRI
    /**
    The universal class tag value for Relative Object Identifier Internationalized Resource Identifier (IRI).

    */
    public static var RelativeObjectIdentifierIRI : dotnet.System.Formats.Asn1.UniversalTagNumber {
        get {
        let __return = dotnet.System.Formats.Asn1.UniversalTagNumber(val: System_Formats_Asn1_UniversalTagNumber_get_RelativeObjectIdentifierIRI());
            return __return;
        }
    }
} // UniversalTagNumber


}



