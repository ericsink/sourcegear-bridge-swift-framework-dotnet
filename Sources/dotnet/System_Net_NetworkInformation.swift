// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
// System.Net.NetworkInformation
extension System.Net.NetworkInformation {
// type: System.Net.NetworkInformation.DuplicateAddressDetectionState
    /**
    Specifies the current state of an IP address.

    */
public struct DuplicateAddressDetectionState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_DuplicateAddressDetectionState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.DuplicateAddressDetectionState Invalid
    /**
    The address is not valid. A nonvalid address is expired and no longer assigned to an interface; applications should not send data packets to it.

    */
    public static var Invalid : dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState(val: System_Net_NetworkInformation_DuplicateAddressDetectionState_get_Invalid());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.DuplicateAddressDetectionState Tentative
    /**
    The duplicate address detection procedure's evaluation of the address has not completed successfully. Applications should not use the address because it is not yet valid and packets sent to it are discarded.

    */
    public static var Tentative : dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState(val: System_Net_NetworkInformation_DuplicateAddressDetectionState_get_Tentative());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.DuplicateAddressDetectionState Duplicate
    /**
    The address is not unique. This address should not be assigned to the network interface.

    */
    public static var Duplicate : dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState(val: System_Net_NetworkInformation_DuplicateAddressDetectionState_get_Duplicate());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.DuplicateAddressDetectionState Deprecated
    /**
    The address is valid, but it is nearing its lease lifetime and should not be used by applications.

    */
    public static var Deprecated : dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState(val: System_Net_NetworkInformation_DuplicateAddressDetectionState_get_Deprecated());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.DuplicateAddressDetectionState Preferred
    /**
    The address is valid and its use is unrestricted.

    */
    public static var Preferred : dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState(val: System_Net_NetworkInformation_DuplicateAddressDetectionState_get_Preferred());
            return __return;
        }
    }
} // DuplicateAddressDetectionState


// type: System.Net.NetworkInformation.GatewayIPAddressInformation
    /**
    Represents the IP address of the network gateway. This class cannot be instantiated.

    */
open class GatewayIPAddressInformation
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_GatewayIPAddressInformation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.IPAddress get_Address()
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformation.get_Address
    open func get_Address() throws -> dotnet.System.Net.IPAddress {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_GatewayIPAddressInformation_IPAddress__get_Address_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPAddress(hndl : __return);
        }
    }
    /**
    Gets the IP address of the gateway.

    */
    open var Address : dotnet.System.Net.IPAddress {
        get {
            return try! get_Address();
        }
    }
} // GatewayIPAddressInformation


// type: System.Net.NetworkInformation.GatewayIPAddressInformationCollection
    /**
    Stores a set of  types.

    */
open class GatewayIPAddressInformationCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_GatewayIPAddressInformationCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Net.NetworkInformation.GatewayIPAddressInformation)
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Add(System.Net.NetworkInformation.GatewayIPAddressInformation)
    /**
    Throws a  because this operation is not supported for this collection.

    - Parameter address: The object to be added to the collection.
    */
    open func Add(address : dotnet.System.Net.NetworkInformation.GatewayIPAddressInformation) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_GatewayIPAddressInformationCollection_void__Add_0__1__GatewayIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Clear
    /**
    Throws a  because this operation is not supported for this collection.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_GatewayIPAddressInformationCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Net.NetworkInformation.GatewayIPAddressInformation)
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Contains(System.Net.NetworkInformation.GatewayIPAddressInformation)
    /**
    Checks whether the collection contains the specified  object.

    - Parameter address: The  object to be searched in the collection.
    - Returns: 
         if the  object exists in the collection; otherwise .

    */
    open func Contains(address : dotnet.System.Net.NetworkInformation.GatewayIPAddressInformation) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_GatewayIPAddressInformationCollection_bool__Contains_0__1__GatewayIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Net.NetworkInformation.GatewayIPAddressInformation[], System.Int32)
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.GatewayIPAddressInformation[],System.Int32)
    /**
    Copies the elements in this collection to a one-dimensional array of type .

    - Parameter array: A one-dimensional array that receives a copy of the collection.
    - Parameter offset: The zero-based index in  at which the copy begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Net.NetworkInformation.GatewayIPAddressInformation>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_GatewayIPAddressInformationCollection_void__CopyTo_0__2__GatewayIPAddressInformationArray_i32(&__thrown, self.get_handle(), array.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.GatewayIPAddressInformation> GetEnumerator()
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.GetEnumerator
    /**
    Returns an object that can be used to iterate through this collection.

    - Returns: An object that implements the  interface and provides access to the  types in this collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Net.NetworkInformation.GatewayIPAddressInformation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_GatewayIPAddressInformationCollection_System_Collections_Generic_IEnumerator_System_Net_NetworkInformation_GatewayIPAddressInformation___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.Net.NetworkInformation.GatewayIPAddressInformation)
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Remove(System.Net.NetworkInformation.GatewayIPAddressInformation)
    /**
    Throws a  because this operation is not supported for this collection.

    - Parameter address: The object to be removed.
    - Returns: Always throws a .

    */
    open func Remove(address : dotnet.System.Net.NetworkInformation.GatewayIPAddressInformation) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_GatewayIPAddressInformationCollection_bool__Remove_0__1__GatewayIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_GatewayIPAddressInformationCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_GatewayIPAddressInformationCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.GatewayIPAddressInformation get_Item(System.Int32)
// docid: M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Net.NetworkInformation.GatewayIPAddressInformation {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_GatewayIPAddressInformationCollection_GatewayIPAddressInformation__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.GatewayIPAddressInformation(hndl : __return);
        }
    }
    /**
    Gets the number of  types in this collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether access to this collection is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
} // GatewayIPAddressInformationCollection


// type: System.Net.NetworkInformation.IPAddressInformation
    /**
    Provides information about a network interface address.

    */
open class IPAddressInformation
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPAddressInformation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.IPAddress get_Address()
// docid: M:System.Net.NetworkInformation.IPAddressInformation.get_Address
    open func get_Address() throws -> dotnet.System.Net.IPAddress {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformation_IPAddress__get_Address_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPAddress(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsDnsEligible()
// docid: M:System.Net.NetworkInformation.IPAddressInformation.get_IsDnsEligible
    open func get_IsDnsEligible() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformation_bool__get_IsDnsEligible_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsTransient()
// docid: M:System.Net.NetworkInformation.IPAddressInformation.get_IsTransient
    open func get_IsTransient() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformation_bool__get_IsTransient_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the Internet Protocol (IP) address.

    */
    open var Address : dotnet.System.Net.IPAddress {
        get {
            return try! get_Address();
        }
    }
    /**
    Gets a  value that indicates whether the Internet Protocol (IP) address is valid to appear in a Domain Name System (DNS) server database.

    */
    open var IsDnsEligible : Bool {
        get {
            return try! get_IsDnsEligible();
        }
    }
    /**
    Gets a  value that indicates whether the Internet Protocol (IP) address is transient (a cluster address).

    */
    open var IsTransient : Bool {
        get {
            return try! get_IsTransient();
        }
    }
} // IPAddressInformation


// type: System.Net.NetworkInformation.IPAddressInformationCollection
    /**
    Stores a set of  types.

    */
open class IPAddressInformationCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPAddressInformationCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Net.NetworkInformation.IPAddressInformation)
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.Add(System.Net.NetworkInformation.IPAddressInformation)
    /**
    Throws a  because this operation is not supported for this collection.

    - Parameter address: The object to be added to the collection.
    */
    open func Add(address : dotnet.System.Net.NetworkInformation.IPAddressInformation) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_IPAddressInformationCollection_void__Add_0__1__IPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.Clear
    /**
    Throws a  because this operation is not supported for this collection.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_IPAddressInformationCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Net.NetworkInformation.IPAddressInformation)
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.Contains(System.Net.NetworkInformation.IPAddressInformation)
    /**
    Checks whether the collection contains the specified  object.

    - Parameter address: The  object to be searched in the collection.
    - Returns: 
         if the  object exists in the collection; otherwise. .

    */
    open func Contains(address : dotnet.System.Net.NetworkInformation.IPAddressInformation) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformationCollection_bool__Contains_0__1__IPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Net.NetworkInformation.IPAddressInformation[], System.Int32)
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.IPAddressInformation[],System.Int32)
    /**
    Copies the collection to the specified array.

    - Parameter array: A one-dimensional array that receives a copy of the collection.
    - Parameter offset: The zero-based index in  at which the copy begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Net.NetworkInformation.IPAddressInformation>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_IPAddressInformationCollection_void__CopyTo_0__2__IPAddressInformationArray_i32(&__thrown, self.get_handle(), array.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.IPAddressInformation> GetEnumerator()
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.GetEnumerator
    /**
    Returns an object that can be used to iterate through this collection.

    - Returns: An object that implements the  interface and provides access to the  types in this collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Net.NetworkInformation.IPAddressInformation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformationCollection_System_Collections_Generic_IEnumerator_System_Net_NetworkInformation_IPAddressInformation___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.Net.NetworkInformation.IPAddressInformation)
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.Remove(System.Net.NetworkInformation.IPAddressInformation)
    /**
    Throws a  because this operation is not supported for this collection.

    - Parameter address: The object to be removed.
    - Returns: Always throws a .

    */
    open func Remove(address : dotnet.System.Net.NetworkInformation.IPAddressInformation) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformationCollection_bool__Remove_0__1__IPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformationCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformationCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.IPAddressInformation get_Item(System.Int32)
// docid: M:System.Net.NetworkInformation.IPAddressInformationCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Net.NetworkInformation.IPAddressInformation {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPAddressInformationCollection_IPAddressInformation__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPAddressInformation(hndl : __return);
        }
    }
    /**
    Gets the number of  types in this collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether access to this collection is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
} // IPAddressInformationCollection


// type: System.Net.NetworkInformation.IPGlobalProperties
    /**
    Provides information about the network connectivity of the local computer.

    */
open class IPGlobalProperties
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPGlobalProperties_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.IAsyncResult BeginGetUnicastAddresses(System.AsyncCallback, System.Object)
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)
    /**
    Begins an asynchronous request to retrieve the stable unicast IP address table on the local computer.

    - Parameter callback: The  delegate.
    - Parameter state: An object that contains state information for this request.
    - Returns: An  that references the asynchronous request.

    */
    open func BeginGetUnicastAddresses(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_IAsyncResult__BeginGetUnicastAddresses_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    open func BeginGetUnicastAddresses(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetUnicastAddresses(callback: del_callback, state: state);
    }
    // System.Net.NetworkInformation.UnicastIPAddressInformationCollection EndGetUnicastAddresses(System.IAsyncResult)
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)
    /**
    Ends a pending asynchronous request to retrieve the stable unicast IP address table on the local computer.

    - Parameter asyncResult: An  that references the asynchronous request.
    - Returns: An  that stores state information and any user defined data for this asynchronous operation.

    */
    open func EndGetUnicastAddresses(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.NetworkInformation.UnicastIPAddressInformationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_UnicastIPAddressInformationCollection__EndGetUnicastAddresses_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.UnicastIPAddressInformationCollection(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.TcpConnectionInformation[] GetActiveTcpConnections()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections
    /**
    Returns information about the Internet Protocol version 4 (IPv4) and IPv6 Transmission Control Protocol (TCP) connections on the local computer.

    - Returns: A  array that contains objects that describe the active TCP connections, or an empty array if no active TCP connections are detected.

    */
    open func GetActiveTcpConnections() throws -> dotnet.System_Arr<dotnet.System.Net.NetworkInformation.TcpConnectionInformation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_TcpConnectionInformationArray__GetActiveTcpConnections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.NetworkInformation.TcpConnectionInformation>(hndl : __return);
        }
    }
    // System.Net.IPEndPoint[] GetActiveTcpListeners()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpListeners
    /**
    Returns endpoint information about the Internet Protocol version 4 (IPv4) and IPv6 Transmission Control Protocol (TCP) listeners on the local computer.

    - Returns: A  array that contains objects that describe the active TCP listeners, or an empty array, if no active TCP listeners are detected.

    */
    open func GetActiveTcpListeners() throws -> dotnet.System_Arr<dotnet.System.Net.IPEndPoint> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_IPEndPointArray__GetActiveTcpListeners_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.IPEndPoint>(hndl : __return);
        }
    }
    // System.Net.IPEndPoint[] GetActiveUdpListeners()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners
    /**
    Returns information about the Internet Protocol version 4 (IPv4) and IPv6 User Datagram Protocol (UDP) listeners on the local computer.

    - Returns: An  array that contains objects that describe the UDP listeners, or an empty array if no UDP listeners are detected.

    */
    open func GetActiveUdpListeners() throws -> dotnet.System_Arr<dotnet.System.Net.IPEndPoint> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_IPEndPointArray__GetActiveUdpListeners_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.IPEndPoint>(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IcmpV4Statistics GetIcmpV4Statistics()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics
    /**
    Provides Internet Control Message Protocol (ICMP) version 4 statistical data for the local computer.

    - Returns: An  object that provides ICMP version 4 traffic statistics for the local computer.

    */
    open func GetIcmpV4Statistics() throws -> dotnet.System.Net.NetworkInformation.IcmpV4Statistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_IcmpV4Statistics__GetIcmpV4Statistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IcmpV4Statistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IcmpV6Statistics GetIcmpV6Statistics()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV6Statistics
    /**
    Provides Internet Control Message Protocol (ICMP) version 6 statistical data for the local computer.

    - Returns: An  object that provides ICMP version 6 traffic statistics for the local computer.

    */
    open func GetIcmpV6Statistics() throws -> dotnet.System.Net.NetworkInformation.IcmpV6Statistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_IcmpV6Statistics__GetIcmpV6Statistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IcmpV6Statistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IPGlobalProperties GetIPGlobalProperties()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties
    /**
    Gets an object that provides information about the local computer's network connectivity and traffic statistics.

    - Returns: A  object that contains information about the local computer.

    */
    open class func GetIPGlobalProperties() throws -> dotnet.System.Net.NetworkInformation.IPGlobalProperties {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_IPGlobalProperties__GetIPGlobalProperties_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPGlobalProperties(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IPGlobalStatistics GetIPv4GlobalStatistics()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics
    /**
    Provides Internet Protocol version 4 (IPv4) statistical data for the local computer.

    - Returns: An  object that provides IPv4 traffic statistics for the local computer.

    */
    open func GetIPv4GlobalStatistics() throws -> dotnet.System.Net.NetworkInformation.IPGlobalStatistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_IPGlobalStatistics__GetIPv4GlobalStatistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPGlobalStatistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IPGlobalStatistics GetIPv6GlobalStatistics()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics
    /**
    Provides Internet Protocol version 6 (IPv6) statistical data for the local computer.

    - Returns: An  object that provides IPv6 traffic statistics for the local computer.

    */
    open func GetIPv6GlobalStatistics() throws -> dotnet.System.Net.NetworkInformation.IPGlobalStatistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_IPGlobalStatistics__GetIPv6GlobalStatistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPGlobalStatistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.TcpStatistics GetTcpIPv4Statistics()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics
    /**
    Provides Transmission Control Protocol/Internet Protocol version 4 (TCP/IPv4) statistical data for the local computer.

    - Returns: A  object that provides TCP/IPv4 traffic statistics for the local computer.

    */
    open func GetTcpIPv4Statistics() throws -> dotnet.System.Net.NetworkInformation.TcpStatistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_TcpStatistics__GetTcpIPv4Statistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.TcpStatistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.TcpStatistics GetTcpIPv6Statistics()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics
    /**
    Provides Transmission Control Protocol/Internet Protocol version 6 (TCP/IPv6) statistical data for the local computer.

    - Returns: A  object that provides TCP/IPv6 traffic statistics for the local computer.

    */
    open func GetTcpIPv6Statistics() throws -> dotnet.System.Net.NetworkInformation.TcpStatistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_TcpStatistics__GetTcpIPv6Statistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.TcpStatistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.UdpStatistics GetUdpIPv4Statistics()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics
    /**
    Provides User Datagram Protocol/Internet Protocol version 4 (UDP/IPv4) statistical data for the local computer.

    - Returns: A  object that provides UDP/IPv4 traffic statistics for the local computer.

    */
    open func GetUdpIPv4Statistics() throws -> dotnet.System.Net.NetworkInformation.UdpStatistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_UdpStatistics__GetUdpIPv4Statistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.UdpStatistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.UdpStatistics GetUdpIPv6Statistics()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics
    /**
    Provides User Datagram Protocol/Internet Protocol version 6 (UDP/IPv6) statistical data for the local computer.

    - Returns: A  object that provides UDP/IPv6 traffic statistics for the local computer.

    */
    open func GetUdpIPv6Statistics() throws -> dotnet.System.Net.NetworkInformation.UdpStatistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_UdpStatistics__GetUdpIPv6Statistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.UdpStatistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.UnicastIPAddressInformationCollection GetUnicastAddresses()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses
    /**
    Retrieves the stable unicast IP address table on the local computer.

    - Returns: A  that contains a list of stable unicast IP addresses on the local computer.

    */
    open func GetUnicastAddresses() throws -> dotnet.System.Net.NetworkInformation.UnicastIPAddressInformationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_UnicastIPAddressInformationCollection__GetUnicastAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.UnicastIPAddressInformationCollection(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.UnicastIPAddressInformationCollection> GetUnicastAddressesAsync()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddressesAsync
    /**
    Retrieves the stable unicast IP address table on the local computer as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open func GetUnicastAddressesAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.UnicastIPAddressInformationCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_System_Threading_Tasks_Task_System_Net_NetworkInformation_UnicastIPAddressInformationCollection___GetUnicastAddressesAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DhcpScopeName()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.get_DhcpScopeName
    open func get_DhcpScopeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_String__get_DhcpScopeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DomainName()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.get_DomainName
    open func get_DomainName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_String__get_DomainName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_HostName()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.get_HostName
    open func get_HostName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_String__get_HostName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsWinsProxy()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.get_IsWinsProxy
    open func get_IsWinsProxy() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_bool__get_IsWinsProxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.NetBiosNodeType get_NodeType()
// docid: M:System.Net.NetworkInformation.IPGlobalProperties.get_NodeType
    open func get_NodeType() throws -> dotnet.System.Net.NetworkInformation.NetBiosNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalProperties_NetBiosNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.NetBiosNodeType(val: __return);
        }
    }
    /**
    Gets the Dynamic Host Configuration Protocol (DHCP) scope name.

    */
    open var DhcpScopeName : dotnet.System.String {
        get {
            return try! get_DhcpScopeName();
        }
    }
    /**
    Gets the domain in which the local computer is registered.

    */
    open var DomainName : dotnet.System.String {
        get {
            return try! get_DomainName();
        }
    }
    /**
    Gets the host name for the local computer.

    */
    open var HostName : dotnet.System.String {
        get {
            return try! get_HostName();
        }
    }
    /**
    Gets a  value that specifies whether the local computer is acting as a Windows Internet Name Service (WINS) proxy.

    */
    open var IsWinsProxy : Bool {
        get {
            return try! get_IsWinsProxy();
        }
    }
    /**
    Gets the Network Basic Input/Output System (NetBIOS) node type of the local computer.

    */
    open var NodeType : dotnet.System.Net.NetworkInformation.NetBiosNodeType {
        get {
            return try! get_NodeType();
        }
    }
} // IPGlobalProperties


// type: System.Net.NetworkInformation.IPGlobalStatistics
    /**
    Provides Internet Protocol (IP) statistical data.

    */
open class IPGlobalStatistics
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPGlobalStatistics_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int32 get_DefaultTtl()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_DefaultTtl
    open func get_DefaultTtl() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i32__get_DefaultTtl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_ForwardingEnabled()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_ForwardingEnabled
    open func get_ForwardingEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_bool__get_ForwardingEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_NumberOfInterfaces()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_NumberOfInterfaces
    open func get_NumberOfInterfaces() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i32__get_NumberOfInterfaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_NumberOfIPAddresses()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_NumberOfIPAddresses
    open func get_NumberOfIPAddresses() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i32__get_NumberOfIPAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_NumberOfRoutes()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_NumberOfRoutes
    open func get_NumberOfRoutes() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i32__get_NumberOfRoutes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutputPacketRequests()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_OutputPacketRequests
    open func get_OutputPacketRequests() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_OutputPacketRequests_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutputPacketRoutingDiscards()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_OutputPacketRoutingDiscards
    open func get_OutputPacketRoutingDiscards() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_OutputPacketRoutingDiscards_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutputPacketsDiscarded()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_OutputPacketsDiscarded
    open func get_OutputPacketsDiscarded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_OutputPacketsDiscarded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutputPacketsWithNoRoute()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_OutputPacketsWithNoRoute
    open func get_OutputPacketsWithNoRoute() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_OutputPacketsWithNoRoute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PacketFragmentFailures()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_PacketFragmentFailures
    open func get_PacketFragmentFailures() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_PacketFragmentFailures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PacketReassembliesRequired()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_PacketReassembliesRequired
    open func get_PacketReassembliesRequired() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_PacketReassembliesRequired_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PacketReassemblyFailures()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_PacketReassemblyFailures
    open func get_PacketReassemblyFailures() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_PacketReassemblyFailures_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PacketReassemblyTimeout()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_PacketReassemblyTimeout
    open func get_PacketReassemblyTimeout() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_PacketReassemblyTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PacketsFragmented()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_PacketsFragmented
    open func get_PacketsFragmented() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_PacketsFragmented_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PacketsReassembled()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_PacketsReassembled
    open func get_PacketsReassembled() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_PacketsReassembled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ReceivedPackets()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_ReceivedPackets
    open func get_ReceivedPackets() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_ReceivedPackets_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ReceivedPacketsDelivered()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_ReceivedPacketsDelivered
    open func get_ReceivedPacketsDelivered() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_ReceivedPacketsDelivered_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ReceivedPacketsDiscarded()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_ReceivedPacketsDiscarded
    open func get_ReceivedPacketsDiscarded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_ReceivedPacketsDiscarded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ReceivedPacketsForwarded()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_ReceivedPacketsForwarded
    open func get_ReceivedPacketsForwarded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_ReceivedPacketsForwarded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ReceivedPacketsWithAddressErrors()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_ReceivedPacketsWithAddressErrors
    open func get_ReceivedPacketsWithAddressErrors() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_ReceivedPacketsWithAddressErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ReceivedPacketsWithHeadersErrors()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_ReceivedPacketsWithHeadersErrors
    open func get_ReceivedPacketsWithHeadersErrors() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_ReceivedPacketsWithHeadersErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ReceivedPacketsWithUnknownProtocol()
// docid: M:System.Net.NetworkInformation.IPGlobalStatistics.get_ReceivedPacketsWithUnknownProtocol
    open func get_ReceivedPacketsWithUnknownProtocol() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPGlobalStatistics_i64__get_ReceivedPacketsWithUnknownProtocol_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the default time-to-live (TTL) value for Internet Protocol (IP) packets.

    */
    open var DefaultTtl : Swift.Int32 {
        get {
            return try! get_DefaultTtl();
        }
    }
    /**
    Gets a  value that specifies whether Internet Protocol (IP) packet forwarding is enabled.

    */
    open var ForwardingEnabled : Bool {
        get {
            return try! get_ForwardingEnabled();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) addresses assigned to the local computer.

    */
    open var NumberOfIPAddresses : Swift.Int32 {
        get {
            return try! get_NumberOfIPAddresses();
        }
    }
    /**
    Gets the number of network interfaces.

    */
    open var NumberOfInterfaces : Swift.Int32 {
        get {
            return try! get_NumberOfInterfaces();
        }
    }
    /**
    Gets the number of routes in the Internet Protocol (IP) routing table.

    */
    open var NumberOfRoutes : Swift.Int32 {
        get {
            return try! get_NumberOfRoutes();
        }
    }
    /**
    Gets the number of outbound Internet Protocol (IP) packets.

    */
    open var OutputPacketRequests : Swift.Int64 {
        get {
            return try! get_OutputPacketRequests();
        }
    }
    /**
    Gets the number of routes that have been discarded from the routing table.

    */
    open var OutputPacketRoutingDiscards : Swift.Int64 {
        get {
            return try! get_OutputPacketRoutingDiscards();
        }
    }
    /**
    Gets the number of transmitted Internet Protocol (IP) packets that have been discarded.

    */
    open var OutputPacketsDiscarded : Swift.Int64 {
        get {
            return try! get_OutputPacketsDiscarded();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets for which the local computer could not determine a route to the destination address.

    */
    open var OutputPacketsWithNoRoute : Swift.Int64 {
        get {
            return try! get_OutputPacketsWithNoRoute();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets that could not be fragmented.

    */
    open var PacketFragmentFailures : Swift.Int64 {
        get {
            return try! get_PacketFragmentFailures();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets that required reassembly.

    */
    open var PacketReassembliesRequired : Swift.Int64 {
        get {
            return try! get_PacketReassembliesRequired();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets that were not successfully reassembled.

    */
    open var PacketReassemblyFailures : Swift.Int64 {
        get {
            return try! get_PacketReassemblyFailures();
        }
    }
    /**
    Gets the maximum amount of time within which all fragments of an Internet Protocol (IP) packet must arrive.

    */
    open var PacketReassemblyTimeout : Swift.Int64 {
        get {
            return try! get_PacketReassemblyTimeout();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets fragmented.

    */
    open var PacketsFragmented : Swift.Int64 {
        get {
            return try! get_PacketsFragmented();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets reassembled.

    */
    open var PacketsReassembled : Swift.Int64 {
        get {
            return try! get_PacketsReassembled();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets received.

    */
    open var ReceivedPackets : Swift.Int64 {
        get {
            return try! get_ReceivedPackets();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets delivered.

    */
    open var ReceivedPacketsDelivered : Swift.Int64 {
        get {
            return try! get_ReceivedPacketsDelivered();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets that have been received and discarded.

    */
    open var ReceivedPacketsDiscarded : Swift.Int64 {
        get {
            return try! get_ReceivedPacketsDiscarded();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets forwarded.

    */
    open var ReceivedPacketsForwarded : Swift.Int64 {
        get {
            return try! get_ReceivedPacketsForwarded();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets with address errors that were received.

    */
    open var ReceivedPacketsWithAddressErrors : Swift.Int64 {
        get {
            return try! get_ReceivedPacketsWithAddressErrors();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets with header errors that were received.

    */
    open var ReceivedPacketsWithHeadersErrors : Swift.Int64 {
        get {
            return try! get_ReceivedPacketsWithHeadersErrors();
        }
    }
    /**
    Gets the number of Internet Protocol (IP) packets received on the local machine with an unknown protocol in the header.

    */
    open var ReceivedPacketsWithUnknownProtocol : Swift.Int64 {
        get {
            return try! get_ReceivedPacketsWithUnknownProtocol();
        }
    }
} // IPGlobalStatistics


// type: System.Net.NetworkInformation.IPInterfaceProperties
    /**
    Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).

    */
open class IPInterfaceProperties
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPInterfaceProperties_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Net.NetworkInformation.IPv4InterfaceProperties GetIPv4Properties()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties
    /**
    Provides Internet Protocol version 4 (IPv4) configuration data for this network interface.

    - Returns: An  object that contains IPv4 configuration data.

    */
    open func GetIPv4Properties() throws -> dotnet.System.Net.NetworkInformation.IPv4InterfaceProperties {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_IPv4InterfaceProperties__GetIPv4Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPv4InterfaceProperties(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IPv6InterfaceProperties GetIPv6Properties()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties
    /**
    Provides Internet Protocol version 6 (IPv6) configuration data for this network interface.

    - Returns: An  object that contains IPv6 configuration data.

    */
    open func GetIPv6Properties() throws -> dotnet.System.Net.NetworkInformation.IPv6InterfaceProperties {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_IPv6InterfaceProperties__GetIPv6Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPv6InterfaceProperties(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.IPAddressInformationCollection get_AnycastAddresses()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_AnycastAddresses
    open func get_AnycastAddresses() throws -> dotnet.System.Net.NetworkInformation.IPAddressInformationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_IPAddressInformationCollection__get_AnycastAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPAddressInformationCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.IPAddressCollection get_DhcpServerAddresses()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_DhcpServerAddresses
    open func get_DhcpServerAddresses() throws -> dotnet.System.Net.NetworkInformation.IPAddressCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_IPAddressCollection__get_DhcpServerAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPAddressCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.IPAddressCollection get_DnsAddresses()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_DnsAddresses
    open func get_DnsAddresses() throws -> dotnet.System.Net.NetworkInformation.IPAddressCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_IPAddressCollection__get_DnsAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPAddressCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DnsSuffix()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_DnsSuffix
    open func get_DnsSuffix() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_String__get_DnsSuffix_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.GatewayIPAddressInformationCollection get_GatewayAddresses()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_GatewayAddresses
    open func get_GatewayAddresses() throws -> dotnet.System.Net.NetworkInformation.GatewayIPAddressInformationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_GatewayIPAddressInformationCollection__get_GatewayAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.GatewayIPAddressInformationCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsDnsEnabled()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_IsDnsEnabled
    open func get_IsDnsEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_bool__get_IsDnsEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDynamicDnsEnabled()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_IsDynamicDnsEnabled
    open func get_IsDynamicDnsEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_bool__get_IsDynamicDnsEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.MulticastIPAddressInformationCollection get_MulticastAddresses()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_MulticastAddresses
    open func get_MulticastAddresses() throws -> dotnet.System.Net.NetworkInformation.MulticastIPAddressInformationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_MulticastIPAddressInformationCollection__get_MulticastAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.MulticastIPAddressInformationCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.UnicastIPAddressInformationCollection get_UnicastAddresses()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_UnicastAddresses
    open func get_UnicastAddresses() throws -> dotnet.System.Net.NetworkInformation.UnicastIPAddressInformationCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_UnicastIPAddressInformationCollection__get_UnicastAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.UnicastIPAddressInformationCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.IPAddressCollection get_WinsServersAddresses()
// docid: M:System.Net.NetworkInformation.IPInterfaceProperties.get_WinsServersAddresses
    open func get_WinsServersAddresses() throws -> dotnet.System.Net.NetworkInformation.IPAddressCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceProperties_IPAddressCollection__get_WinsServersAddresses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPAddressCollection(hndl : __return);
        }
    }
    /**
    Gets the anycast IP addresses assigned to this interface.

    */
    open var AnycastAddresses : dotnet.System.Net.NetworkInformation.IPAddressInformationCollection {
        get {
            return try! get_AnycastAddresses();
        }
    }
    /**
    Gets the addresses of Dynamic Host Configuration Protocol (DHCP) servers for this interface.

    */
    open var DhcpServerAddresses : dotnet.System.Net.NetworkInformation.IPAddressCollection {
        get {
            return try! get_DhcpServerAddresses();
        }
    }
    /**
    Gets the addresses of Domain Name System (DNS) servers for this interface.

    */
    open var DnsAddresses : dotnet.System.Net.NetworkInformation.IPAddressCollection {
        get {
            return try! get_DnsAddresses();
        }
    }
    /**
    Gets the Domain Name System (DNS) suffix associated with this interface.

    */
    open var DnsSuffix : dotnet.System.String {
        get {
            return try! get_DnsSuffix();
        }
    }
    /**
    Gets the IPv4 network gateway addresses for this interface.

    */
    open var GatewayAddresses : dotnet.System.Net.NetworkInformation.GatewayIPAddressInformationCollection {
        get {
            return try! get_GatewayAddresses();
        }
    }
    /**
    Gets a  value that indicates whether NetBt is configured to use DNS name resolution on this interface.

    */
    open var IsDnsEnabled : Bool {
        get {
            return try! get_IsDnsEnabled();
        }
    }
    /**
    Gets a  value that indicates whether this interface is configured to automatically register its IP address information with the Domain Name System (DNS).

    */
    open var IsDynamicDnsEnabled : Bool {
        get {
            return try! get_IsDynamicDnsEnabled();
        }
    }
    /**
    Gets the multicast addresses assigned to this interface.

    */
    open var MulticastAddresses : dotnet.System.Net.NetworkInformation.MulticastIPAddressInformationCollection {
        get {
            return try! get_MulticastAddresses();
        }
    }
    /**
    Gets the unicast addresses assigned to this interface.

    */
    open var UnicastAddresses : dotnet.System.Net.NetworkInformation.UnicastIPAddressInformationCollection {
        get {
            return try! get_UnicastAddresses();
        }
    }
    /**
    Gets the addresses of Windows Internet Name Service (WINS) servers.

    */
    open var WinsServersAddresses : dotnet.System.Net.NetworkInformation.IPAddressCollection {
        get {
            return try! get_WinsServersAddresses();
        }
    }
} // IPInterfaceProperties


// type: System.Net.NetworkInformation.IPInterfaceStatistics
    /**
    Provides Internet Protocol (IP) statistical data for an network interface on the local computer.

    */
open class IPInterfaceStatistics
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPInterfaceStatistics_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_BytesReceived()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_BytesReceived
    open func get_BytesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_BytesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_BytesSent()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_BytesSent
    open func get_BytesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_BytesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_IncomingPacketsDiscarded()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_IncomingPacketsDiscarded
    open func get_IncomingPacketsDiscarded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_IncomingPacketsDiscarded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_IncomingPacketsWithErrors()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_IncomingPacketsWithErrors
    open func get_IncomingPacketsWithErrors() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_IncomingPacketsWithErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_IncomingUnknownProtocolPackets()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_IncomingUnknownProtocolPackets
    open func get_IncomingUnknownProtocolPackets() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_IncomingUnknownProtocolPackets_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NonUnicastPacketsReceived()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_NonUnicastPacketsReceived
    open func get_NonUnicastPacketsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_NonUnicastPacketsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NonUnicastPacketsSent()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_NonUnicastPacketsSent
    open func get_NonUnicastPacketsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_NonUnicastPacketsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutgoingPacketsDiscarded()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_OutgoingPacketsDiscarded
    open func get_OutgoingPacketsDiscarded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_OutgoingPacketsDiscarded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutgoingPacketsWithErrors()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_OutgoingPacketsWithErrors
    open func get_OutgoingPacketsWithErrors() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_OutgoingPacketsWithErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutputQueueLength()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_OutputQueueLength
    open func get_OutputQueueLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_OutputQueueLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_UnicastPacketsReceived()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_UnicastPacketsReceived
    open func get_UnicastPacketsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_UnicastPacketsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_UnicastPacketsSent()
// docid: M:System.Net.NetworkInformation.IPInterfaceStatistics.get_UnicastPacketsSent
    open func get_UnicastPacketsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPInterfaceStatistics_i64__get_UnicastPacketsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of bytes that were received on the interface.

    */
    open var BytesReceived : Swift.Int64 {
        get {
            return try! get_BytesReceived();
        }
    }
    /**
    Gets the number of bytes that were sent on the interface.

    */
    open var BytesSent : Swift.Int64 {
        get {
            return try! get_BytesSent();
        }
    }
    /**
    Gets the number of incoming packets that were discarded.

    */
    open var IncomingPacketsDiscarded : Swift.Int64 {
        get {
            return try! get_IncomingPacketsDiscarded();
        }
    }
    /**
    Gets the number of incoming packets with errors.

    */
    open var IncomingPacketsWithErrors : Swift.Int64 {
        get {
            return try! get_IncomingPacketsWithErrors();
        }
    }
    /**
    Gets the number of incoming packets with an unknown protocol that were received on the interface.

    */
    open var IncomingUnknownProtocolPackets : Swift.Int64 {
        get {
            return try! get_IncomingUnknownProtocolPackets();
        }
    }
    /**
    Gets the number of non-unicast packets that were received on the interface.

    */
    open var NonUnicastPacketsReceived : Swift.Int64 {
        get {
            return try! get_NonUnicastPacketsReceived();
        }
    }
    /**
    Gets the number of non-unicast packets that were sent on the interface.

    */
    open var NonUnicastPacketsSent : Swift.Int64 {
        get {
            return try! get_NonUnicastPacketsSent();
        }
    }
    /**
    Gets the number of outgoing packets that were discarded.

    */
    open var OutgoingPacketsDiscarded : Swift.Int64 {
        get {
            return try! get_OutgoingPacketsDiscarded();
        }
    }
    /**
    Gets the number of outgoing packets with errors.

    */
    open var OutgoingPacketsWithErrors : Swift.Int64 {
        get {
            return try! get_OutgoingPacketsWithErrors();
        }
    }
    /**
    Gets the length of the output queue.

    */
    open var OutputQueueLength : Swift.Int64 {
        get {
            return try! get_OutputQueueLength();
        }
    }
    /**
    Gets the number of unicast packets that were received on the interface.

    */
    open var UnicastPacketsReceived : Swift.Int64 {
        get {
            return try! get_UnicastPacketsReceived();
        }
    }
    /**
    Gets the number of unicast packets that were sent on the interface.

    */
    open var UnicastPacketsSent : Swift.Int64 {
        get {
            return try! get_UnicastPacketsSent();
        }
    }
} // IPInterfaceStatistics


// type: System.Net.NetworkInformation.IPv4InterfaceProperties
    /**
    Provides information about network interfaces that support Internet Protocol version 4 (IPv4).

    */
open class IPv4InterfaceProperties
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPv4InterfaceProperties_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int32 get_Index()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceProperties.get_Index
    open func get_Index() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceProperties_i32__get_Index_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsAutomaticPrivateAddressingActive()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceProperties.get_IsAutomaticPrivateAddressingActive
    open func get_IsAutomaticPrivateAddressingActive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceProperties_bool__get_IsAutomaticPrivateAddressingActive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsAutomaticPrivateAddressingEnabled()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceProperties.get_IsAutomaticPrivateAddressingEnabled
    open func get_IsAutomaticPrivateAddressingEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceProperties_bool__get_IsAutomaticPrivateAddressingEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDhcpEnabled()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceProperties.get_IsDhcpEnabled
    open func get_IsDhcpEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceProperties_bool__get_IsDhcpEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsForwardingEnabled()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceProperties.get_IsForwardingEnabled
    open func get_IsForwardingEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceProperties_bool__get_IsForwardingEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Mtu()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceProperties.get_Mtu
    open func get_Mtu() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceProperties_i32__get_Mtu_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_UsesWins()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceProperties.get_UsesWins
    open func get_UsesWins() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceProperties_bool__get_UsesWins_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the index of the network interface associated with the Internet Protocol version 4 (IPv4) address.

    */
    open var Index : Swift.Int32 {
        get {
            return try! get_Index();
        }
    }
    /**
    Gets a  value that indicates whether this interface has an automatic private IP addressing (APIPA) address.

    */
    open var IsAutomaticPrivateAddressingActive : Bool {
        get {
            return try! get_IsAutomaticPrivateAddressingActive();
        }
    }
    /**
    Gets a  value that indicates whether this interface has automatic private IP addressing (APIPA) enabled.

    */
    open var IsAutomaticPrivateAddressingEnabled : Bool {
        get {
            return try! get_IsAutomaticPrivateAddressingEnabled();
        }
    }
    /**
    Gets a  value that indicates whether the interface is configured to use a Dynamic Host Configuration Protocol (DHCP) server to obtain an IP address.

    */
    open var IsDhcpEnabled : Bool {
        get {
            return try! get_IsDhcpEnabled();
        }
    }
    /**
    Gets a  value that indicates whether this interface can forward (route) packets.

    */
    open var IsForwardingEnabled : Bool {
        get {
            return try! get_IsForwardingEnabled();
        }
    }
    /**
    Gets the maximum transmission unit (MTU) for this network interface.

    */
    open var Mtu : Swift.Int32 {
        get {
            return try! get_Mtu();
        }
    }
    /**
    Gets a  value that indicates whether an interface uses Windows Internet Name Service (WINS).

    */
    open var UsesWins : Bool {
        get {
            return try! get_UsesWins();
        }
    }
} // IPv4InterfaceProperties


// type: System.Net.NetworkInformation.IPv4InterfaceStatistics
    /**
    Provides statistical data for a network interface on the local computer.

    */
open class IPv4InterfaceStatistics
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPv4InterfaceStatistics_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_BytesReceived()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_BytesReceived
    open func get_BytesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_BytesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_BytesSent()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_BytesSent
    open func get_BytesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_BytesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_IncomingPacketsDiscarded()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_IncomingPacketsDiscarded
    open func get_IncomingPacketsDiscarded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_IncomingPacketsDiscarded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_IncomingPacketsWithErrors()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_IncomingPacketsWithErrors
    open func get_IncomingPacketsWithErrors() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_IncomingPacketsWithErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_IncomingUnknownProtocolPackets()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_IncomingUnknownProtocolPackets
    open func get_IncomingUnknownProtocolPackets() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_IncomingUnknownProtocolPackets_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NonUnicastPacketsReceived()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_NonUnicastPacketsReceived
    open func get_NonUnicastPacketsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_NonUnicastPacketsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NonUnicastPacketsSent()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_NonUnicastPacketsSent
    open func get_NonUnicastPacketsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_NonUnicastPacketsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutgoingPacketsDiscarded()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_OutgoingPacketsDiscarded
    open func get_OutgoingPacketsDiscarded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_OutgoingPacketsDiscarded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutgoingPacketsWithErrors()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_OutgoingPacketsWithErrors
    open func get_OutgoingPacketsWithErrors() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_OutgoingPacketsWithErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_OutputQueueLength()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_OutputQueueLength
    open func get_OutputQueueLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_OutputQueueLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_UnicastPacketsReceived()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_UnicastPacketsReceived
    open func get_UnicastPacketsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_UnicastPacketsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_UnicastPacketsSent()
// docid: M:System.Net.NetworkInformation.IPv4InterfaceStatistics.get_UnicastPacketsSent
    open func get_UnicastPacketsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv4InterfaceStatistics_i64__get_UnicastPacketsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of bytes that were received on the interface.

    */
    open var BytesReceived : Swift.Int64 {
        get {
            return try! get_BytesReceived();
        }
    }
    /**
    Gets the number of bytes that were sent on the interface.

    */
    open var BytesSent : Swift.Int64 {
        get {
            return try! get_BytesSent();
        }
    }
    /**
    Gets the number of incoming packets that were discarded.

    */
    open var IncomingPacketsDiscarded : Swift.Int64 {
        get {
            return try! get_IncomingPacketsDiscarded();
        }
    }
    /**
    Gets the number of incoming packets with errors.

    */
    open var IncomingPacketsWithErrors : Swift.Int64 {
        get {
            return try! get_IncomingPacketsWithErrors();
        }
    }
    /**
    Gets the number of incoming packets with an unknown protocol that were received on the interface.

    */
    open var IncomingUnknownProtocolPackets : Swift.Int64 {
        get {
            return try! get_IncomingUnknownProtocolPackets();
        }
    }
    /**
    Gets the number of non-unicast packets that were received on the interface.

    */
    open var NonUnicastPacketsReceived : Swift.Int64 {
        get {
            return try! get_NonUnicastPacketsReceived();
        }
    }
    /**
    Gets the number of non-unicast packets that were sent on the interface.

    */
    open var NonUnicastPacketsSent : Swift.Int64 {
        get {
            return try! get_NonUnicastPacketsSent();
        }
    }
    /**
    Gets the number of outgoing packets that were discarded.

    */
    open var OutgoingPacketsDiscarded : Swift.Int64 {
        get {
            return try! get_OutgoingPacketsDiscarded();
        }
    }
    /**
    Gets the number of outgoing packets with errors.

    */
    open var OutgoingPacketsWithErrors : Swift.Int64 {
        get {
            return try! get_OutgoingPacketsWithErrors();
        }
    }
    /**
    Gets the length of the output queue.

    */
    open var OutputQueueLength : Swift.Int64 {
        get {
            return try! get_OutputQueueLength();
        }
    }
    /**
    Gets the number of unicast packets that were received on the interface.

    */
    open var UnicastPacketsReceived : Swift.Int64 {
        get {
            return try! get_UnicastPacketsReceived();
        }
    }
    /**
    Gets the number of unicast packets that were sent on the interface.

    */
    open var UnicastPacketsSent : Swift.Int64 {
        get {
            return try! get_UnicastPacketsSent();
        }
    }
} // IPv4InterfaceStatistics


// type: System.Net.NetworkInformation.IPv6InterfaceProperties
    /**
    Provides information about network interfaces that support Internet Protocol version 6 (IPv6).

    */
open class IPv6InterfaceProperties
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPv6InterfaceProperties_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int64 GetScopeId(System.Net.NetworkInformation.ScopeLevel)
// docid: M:System.Net.NetworkInformation.IPv6InterfaceProperties.GetScopeId(System.Net.NetworkInformation.ScopeLevel)
    /**
    Gets the scope ID of the network interface associated with an Internet Protocol version 6 (IPv6) address.

    - Parameter scopeLevel: The scope level.
    - Returns: The scope ID of the network interface associated with an IPv6 address.

    */
    open func GetScopeId(scopeLevel : dotnet.System.Net.NetworkInformation.ScopeLevel) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv6InterfaceProperties_i64__GetScopeId_0__1__ScopeLevel(&__thrown, self.get_handle(), scopeLevel.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Index()
// docid: M:System.Net.NetworkInformation.IPv6InterfaceProperties.get_Index
    open func get_Index() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv6InterfaceProperties_i32__get_Index_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Mtu()
// docid: M:System.Net.NetworkInformation.IPv6InterfaceProperties.get_Mtu
    open func get_Mtu() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IPv6InterfaceProperties_i32__get_Mtu_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the index of the network interface associated with an Internet Protocol version 6 (IPv6) address.

    */
    open var Index : Swift.Int32 {
        get {
            return try! get_Index();
        }
    }
    /**
    Gets the maximum transmission unit (MTU) for this network interface.

    */
    open var Mtu : Swift.Int32 {
        get {
            return try! get_Mtu();
        }
    }
} // IPv6InterfaceProperties


// type: System.Net.NetworkInformation.IcmpV4Statistics
    /**
    Provides Internet Control Message Protocol for IPv4 (ICMPv4) statistical data for the local computer.

    */
open class IcmpV4Statistics
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IcmpV4Statistics_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_AddressMaskRepliesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_AddressMaskRepliesReceived
    open func get_AddressMaskRepliesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_AddressMaskRepliesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_AddressMaskRepliesSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_AddressMaskRepliesSent
    open func get_AddressMaskRepliesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_AddressMaskRepliesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_AddressMaskRequestsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_AddressMaskRequestsReceived
    open func get_AddressMaskRequestsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_AddressMaskRequestsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_AddressMaskRequestsSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_AddressMaskRequestsSent
    open func get_AddressMaskRequestsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_AddressMaskRequestsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_DestinationUnreachableMessagesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_DestinationUnreachableMessagesReceived
    open func get_DestinationUnreachableMessagesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_DestinationUnreachableMessagesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_DestinationUnreachableMessagesSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_DestinationUnreachableMessagesSent
    open func get_DestinationUnreachableMessagesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_DestinationUnreachableMessagesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_EchoRepliesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_EchoRepliesReceived
    open func get_EchoRepliesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_EchoRepliesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_EchoRepliesSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_EchoRepliesSent
    open func get_EchoRepliesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_EchoRepliesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_EchoRequestsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_EchoRequestsReceived
    open func get_EchoRequestsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_EchoRequestsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_EchoRequestsSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_EchoRequestsSent
    open func get_EchoRequestsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_EchoRequestsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ErrorsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_ErrorsReceived
    open func get_ErrorsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_ErrorsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ErrorsSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_ErrorsSent
    open func get_ErrorsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_ErrorsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MessagesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_MessagesReceived
    open func get_MessagesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_MessagesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MessagesSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_MessagesSent
    open func get_MessagesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_MessagesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ParameterProblemsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_ParameterProblemsReceived
    open func get_ParameterProblemsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_ParameterProblemsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ParameterProblemsSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_ParameterProblemsSent
    open func get_ParameterProblemsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_ParameterProblemsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_RedirectsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_RedirectsReceived
    open func get_RedirectsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_RedirectsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_RedirectsSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_RedirectsSent
    open func get_RedirectsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_RedirectsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_SourceQuenchesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_SourceQuenchesReceived
    open func get_SourceQuenchesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_SourceQuenchesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_SourceQuenchesSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_SourceQuenchesSent
    open func get_SourceQuenchesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_SourceQuenchesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TimeExceededMessagesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_TimeExceededMessagesReceived
    open func get_TimeExceededMessagesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_TimeExceededMessagesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TimeExceededMessagesSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_TimeExceededMessagesSent
    open func get_TimeExceededMessagesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_TimeExceededMessagesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TimestampRepliesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_TimestampRepliesReceived
    open func get_TimestampRepliesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_TimestampRepliesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TimestampRepliesSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_TimestampRepliesSent
    open func get_TimestampRepliesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_TimestampRepliesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TimestampRequestsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_TimestampRequestsReceived
    open func get_TimestampRequestsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_TimestampRequestsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TimestampRequestsSent()
// docid: M:System.Net.NetworkInformation.IcmpV4Statistics.get_TimestampRequestsSent
    open func get_TimestampRequestsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV4Statistics_i64__get_TimestampRequestsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address Mask Reply messages that were received.

    */
    open var AddressMaskRepliesReceived : Swift.Int64 {
        get {
            return try! get_AddressMaskRepliesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address Mask Reply messages that were sent.

    */
    open var AddressMaskRepliesSent : Swift.Int64 {
        get {
            return try! get_AddressMaskRepliesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address Mask Request messages that were received.

    */
    open var AddressMaskRequestsReceived : Swift.Int64 {
        get {
            return try! get_AddressMaskRequestsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Address Mask Request messages that were sent.

    */
    open var AddressMaskRequestsSent : Swift.Int64 {
        get {
            return try! get_AddressMaskRequestsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages that were received because of a packet having an unreachable address in its destination.

    */
    open var DestinationUnreachableMessagesReceived : Swift.Int64 {
        get {
            return try! get_DestinationUnreachableMessagesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages that were sent because of a packet having an unreachable address in its destination.

    */
    open var DestinationUnreachableMessagesSent : Swift.Int64 {
        get {
            return try! get_DestinationUnreachableMessagesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo Reply messages that were received.

    */
    open var EchoRepliesReceived : Swift.Int64 {
        get {
            return try! get_EchoRepliesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo Reply messages that were sent.

    */
    open var EchoRepliesSent : Swift.Int64 {
        get {
            return try! get_EchoRepliesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo Request messages that were received.

    */
    open var EchoRequestsReceived : Swift.Int64 {
        get {
            return try! get_EchoRequestsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Echo Request messages that were sent.

    */
    open var EchoRequestsSent : Swift.Int64 {
        get {
            return try! get_EchoRequestsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) error messages that were received.

    */
    open var ErrorsReceived : Swift.Int64 {
        get {
            return try! get_ErrorsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) error messages that were sent.

    */
    open var ErrorsSent : Swift.Int64 {
        get {
            return try! get_ErrorsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol messages that were received.

    */
    open var MessagesReceived : Swift.Int64 {
        get {
            return try! get_MessagesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) messages that were sent.

    */
    open var MessagesSent : Swift.Int64 {
        get {
            return try! get_MessagesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Parameter Problem messages that were received.

    */
    open var ParameterProblemsReceived : Swift.Int64 {
        get {
            return try! get_ParameterProblemsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Parameter Problem messages that were sent.

    */
    open var ParameterProblemsSent : Swift.Int64 {
        get {
            return try! get_ParameterProblemsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Redirect messages that were received.

    */
    open var RedirectsReceived : Swift.Int64 {
        get {
            return try! get_RedirectsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Redirect messages that were sent.

    */
    open var RedirectsSent : Swift.Int64 {
        get {
            return try! get_RedirectsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Source Quench messages that were received.

    */
    open var SourceQuenchesReceived : Swift.Int64 {
        get {
            return try! get_SourceQuenchesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Source Quench messages that were sent.

    */
    open var SourceQuenchesSent : Swift.Int64 {
        get {
            return try! get_SourceQuenchesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Time Exceeded messages that were received.

    */
    open var TimeExceededMessagesReceived : Swift.Int64 {
        get {
            return try! get_TimeExceededMessagesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Time Exceeded messages that were sent.

    */
    open var TimeExceededMessagesSent : Swift.Int64 {
        get {
            return try! get_TimeExceededMessagesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp Reply messages that were received.

    */
    open var TimestampRepliesReceived : Swift.Int64 {
        get {
            return try! get_TimestampRepliesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp Reply messages that were sent.

    */
    open var TimestampRepliesSent : Swift.Int64 {
        get {
            return try! get_TimestampRepliesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp Request messages that were received.

    */
    open var TimestampRequestsReceived : Swift.Int64 {
        get {
            return try! get_TimestampRequestsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 4 (ICMPv4) Timestamp Request messages that were sent.

    */
    open var TimestampRequestsSent : Swift.Int64 {
        get {
            return try! get_TimestampRequestsSent();
        }
    }
} // IcmpV4Statistics


// type: System.Net.NetworkInformation.IcmpV6Statistics
    /**
    Provides Internet Control Message Protocol for Internet Protocol version 6 (ICMPv6) statistical data for the local computer.

    */
open class IcmpV6Statistics
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IcmpV6Statistics_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_DestinationUnreachableMessagesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_DestinationUnreachableMessagesReceived
    open func get_DestinationUnreachableMessagesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_DestinationUnreachableMessagesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_DestinationUnreachableMessagesSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_DestinationUnreachableMessagesSent
    open func get_DestinationUnreachableMessagesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_DestinationUnreachableMessagesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_EchoRepliesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_EchoRepliesReceived
    open func get_EchoRepliesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_EchoRepliesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_EchoRepliesSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_EchoRepliesSent
    open func get_EchoRepliesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_EchoRepliesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_EchoRequestsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_EchoRequestsReceived
    open func get_EchoRequestsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_EchoRequestsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_EchoRequestsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_EchoRequestsSent
    open func get_EchoRequestsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_EchoRequestsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ErrorsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_ErrorsReceived
    open func get_ErrorsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_ErrorsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ErrorsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_ErrorsSent
    open func get_ErrorsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_ErrorsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MembershipQueriesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_MembershipQueriesReceived
    open func get_MembershipQueriesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_MembershipQueriesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MembershipQueriesSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_MembershipQueriesSent
    open func get_MembershipQueriesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_MembershipQueriesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MembershipReductionsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_MembershipReductionsReceived
    open func get_MembershipReductionsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_MembershipReductionsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MembershipReductionsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_MembershipReductionsSent
    open func get_MembershipReductionsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_MembershipReductionsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MembershipReportsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_MembershipReportsReceived
    open func get_MembershipReportsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_MembershipReportsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MembershipReportsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_MembershipReportsSent
    open func get_MembershipReportsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_MembershipReportsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MessagesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_MessagesReceived
    open func get_MessagesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_MessagesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MessagesSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_MessagesSent
    open func get_MessagesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_MessagesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NeighborAdvertisementsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_NeighborAdvertisementsReceived
    open func get_NeighborAdvertisementsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_NeighborAdvertisementsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NeighborAdvertisementsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_NeighborAdvertisementsSent
    open func get_NeighborAdvertisementsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_NeighborAdvertisementsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NeighborSolicitsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_NeighborSolicitsReceived
    open func get_NeighborSolicitsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_NeighborSolicitsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NeighborSolicitsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_NeighborSolicitsSent
    open func get_NeighborSolicitsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_NeighborSolicitsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PacketTooBigMessagesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_PacketTooBigMessagesReceived
    open func get_PacketTooBigMessagesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_PacketTooBigMessagesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PacketTooBigMessagesSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_PacketTooBigMessagesSent
    open func get_PacketTooBigMessagesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_PacketTooBigMessagesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ParameterProblemsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_ParameterProblemsReceived
    open func get_ParameterProblemsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_ParameterProblemsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ParameterProblemsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_ParameterProblemsSent
    open func get_ParameterProblemsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_ParameterProblemsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_RedirectsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_RedirectsReceived
    open func get_RedirectsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_RedirectsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_RedirectsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_RedirectsSent
    open func get_RedirectsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_RedirectsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_RouterAdvertisementsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_RouterAdvertisementsReceived
    open func get_RouterAdvertisementsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_RouterAdvertisementsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_RouterAdvertisementsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_RouterAdvertisementsSent
    open func get_RouterAdvertisementsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_RouterAdvertisementsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_RouterSolicitsReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_RouterSolicitsReceived
    open func get_RouterSolicitsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_RouterSolicitsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_RouterSolicitsSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_RouterSolicitsSent
    open func get_RouterSolicitsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_RouterSolicitsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TimeExceededMessagesReceived()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_TimeExceededMessagesReceived
    open func get_TimeExceededMessagesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_TimeExceededMessagesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TimeExceededMessagesSent()
// docid: M:System.Net.NetworkInformation.IcmpV6Statistics.get_TimeExceededMessagesSent
    open func get_TimeExceededMessagesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_IcmpV6Statistics_i64__get_TimeExceededMessagesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) messages received because of a packet having an unreachable address in its destination.

    */
    open var DestinationUnreachableMessagesReceived : Swift.Int64 {
        get {
            return try! get_DestinationUnreachableMessagesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) messages sent because of a packet having an unreachable address in its destination.

    */
    open var DestinationUnreachableMessagesSent : Swift.Int64 {
        get {
            return try! get_DestinationUnreachableMessagesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Echo Reply messages received.

    */
    open var EchoRepliesReceived : Swift.Int64 {
        get {
            return try! get_EchoRepliesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Echo Reply messages sent.

    */
    open var EchoRepliesSent : Swift.Int64 {
        get {
            return try! get_EchoRepliesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Echo Request messages received.

    */
    open var EchoRequestsReceived : Swift.Int64 {
        get {
            return try! get_EchoRequestsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Echo Request messages sent.

    */
    open var EchoRequestsSent : Swift.Int64 {
        get {
            return try! get_EchoRequestsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) error messages received.

    */
    open var ErrorsReceived : Swift.Int64 {
        get {
            return try! get_ErrorsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) error messages sent.

    */
    open var ErrorsSent : Swift.Int64 {
        get {
            return try! get_ErrorsSent();
        }
    }
    /**
    Gets the number of Internet Group management Protocol (IGMP) Group Membership Query messages received.

    */
    open var MembershipQueriesReceived : Swift.Int64 {
        get {
            return try! get_MembershipQueriesReceived();
        }
    }
    /**
    Gets the number of Internet Group management Protocol (IGMP) Group Membership Query messages sent.

    */
    open var MembershipQueriesSent : Swift.Int64 {
        get {
            return try! get_MembershipQueriesSent();
        }
    }
    /**
    Gets the number of Internet Group Management Protocol (IGMP) Group Membership Reduction messages received.

    */
    open var MembershipReductionsReceived : Swift.Int64 {
        get {
            return try! get_MembershipReductionsReceived();
        }
    }
    /**
    Gets the number of Internet Group Management Protocol (IGMP) Group Membership Reduction messages sent.

    */
    open var MembershipReductionsSent : Swift.Int64 {
        get {
            return try! get_MembershipReductionsSent();
        }
    }
    /**
    Gets the number of Internet Group Management Protocol (IGMP) Group Membership Report messages received.

    */
    open var MembershipReportsReceived : Swift.Int64 {
        get {
            return try! get_MembershipReportsReceived();
        }
    }
    /**
    Gets the number of Internet Group Management Protocol (IGMP) Group Membership Report messages sent.

    */
    open var MembershipReportsSent : Swift.Int64 {
        get {
            return try! get_MembershipReportsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) messages received.

    */
    open var MessagesReceived : Swift.Int64 {
        get {
            return try! get_MessagesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) messages sent.

    */
    open var MessagesSent : Swift.Int64 {
        get {
            return try! get_MessagesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Neighbor Advertisement messages received.

    */
    open var NeighborAdvertisementsReceived : Swift.Int64 {
        get {
            return try! get_NeighborAdvertisementsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Neighbor Advertisement messages sent.

    */
    open var NeighborAdvertisementsSent : Swift.Int64 {
        get {
            return try! get_NeighborAdvertisementsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Neighbor Solicitation messages received.

    */
    open var NeighborSolicitsReceived : Swift.Int64 {
        get {
            return try! get_NeighborSolicitsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Neighbor Solicitation messages sent.

    */
    open var NeighborSolicitsSent : Swift.Int64 {
        get {
            return try! get_NeighborSolicitsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Packet Too Big messages received.

    */
    open var PacketTooBigMessagesReceived : Swift.Int64 {
        get {
            return try! get_PacketTooBigMessagesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Packet Too Big messages sent.

    */
    open var PacketTooBigMessagesSent : Swift.Int64 {
        get {
            return try! get_PacketTooBigMessagesSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Parameter Problem messages received.

    */
    open var ParameterProblemsReceived : Swift.Int64 {
        get {
            return try! get_ParameterProblemsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Parameter Problem messages sent.

    */
    open var ParameterProblemsSent : Swift.Int64 {
        get {
            return try! get_ParameterProblemsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Redirect messages received.

    */
    open var RedirectsReceived : Swift.Int64 {
        get {
            return try! get_RedirectsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Redirect messages sent.

    */
    open var RedirectsSent : Swift.Int64 {
        get {
            return try! get_RedirectsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Router Advertisement messages received.

    */
    open var RouterAdvertisementsReceived : Swift.Int64 {
        get {
            return try! get_RouterAdvertisementsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Router Advertisement messages sent.

    */
    open var RouterAdvertisementsSent : Swift.Int64 {
        get {
            return try! get_RouterAdvertisementsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Router Solicitation messages received.

    */
    open var RouterSolicitsReceived : Swift.Int64 {
        get {
            return try! get_RouterSolicitsReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Router Solicitation messages sent.

    */
    open var RouterSolicitsSent : Swift.Int64 {
        get {
            return try! get_RouterSolicitsSent();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Time Exceeded messages received.

    */
    open var TimeExceededMessagesReceived : Swift.Int64 {
        get {
            return try! get_TimeExceededMessagesReceived();
        }
    }
    /**
    Gets the number of Internet Control Message Protocol version 6 (ICMPv6) Time Exceeded messages sent.

    */
    open var TimeExceededMessagesSent : Swift.Int64 {
        get {
            return try! get_TimeExceededMessagesSent();
        }
    }
} // IcmpV6Statistics


// type: System.Net.NetworkInformation.MulticastIPAddressInformation
    /**
    Provides information about a network interface's multicast address.

    */
open class MulticastIPAddressInformation
    :
    dotnet.System.Net.NetworkInformation.IPAddressInformation
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_MulticastIPAddressInformation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_AddressPreferredLifetime()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformation.get_AddressPreferredLifetime
    open func get_AddressPreferredLifetime() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformation_i64__get_AddressPreferredLifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_AddressValidLifetime()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformation.get_AddressValidLifetime
    open func get_AddressValidLifetime() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformation_i64__get_AddressValidLifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_DhcpLeaseLifetime()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformation.get_DhcpLeaseLifetime
    open func get_DhcpLeaseLifetime() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformation_i64__get_DhcpLeaseLifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.DuplicateAddressDetectionState get_DuplicateAddressDetectionState()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformation.get_DuplicateAddressDetectionState
    open func get_DuplicateAddressDetectionState() throws -> dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformation_DuplicateAddressDetectionState__get_DuplicateAddressDetectionState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState(val: __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.PrefixOrigin get_PrefixOrigin()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformation.get_PrefixOrigin
    open func get_PrefixOrigin() throws -> dotnet.System.Net.NetworkInformation.PrefixOrigin {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformation_PrefixOrigin__get_PrefixOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PrefixOrigin(val: __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.SuffixOrigin get_SuffixOrigin()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformation.get_SuffixOrigin
    open func get_SuffixOrigin() throws -> dotnet.System.Net.NetworkInformation.SuffixOrigin {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformation_SuffixOrigin__get_SuffixOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.SuffixOrigin(val: __return);
        }
    }
    /**
    Gets the number of seconds remaining during which this address is the preferred address.

    */
    open var AddressPreferredLifetime : Swift.Int64 {
        get {
            return try! get_AddressPreferredLifetime();
        }
    }
    /**
    Gets the number of seconds remaining during which this address is valid.

    */
    open var AddressValidLifetime : Swift.Int64 {
        get {
            return try! get_AddressValidLifetime();
        }
    }
    /**
    Specifies the amount of time remaining on the Dynamic Host Configuration Protocol (DHCP) lease for this IP address.

    */
    open var DhcpLeaseLifetime : Swift.Int64 {
        get {
            return try! get_DhcpLeaseLifetime();
        }
    }
    /**
    Gets a value that indicates the state of the duplicate address detection algorithm.

    */
    open var DuplicateAddressDetectionState : dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        get {
            return try! get_DuplicateAddressDetectionState();
        }
    }
    /**
    Gets a value that identifies the source of a Multicast Internet Protocol (IP) address prefix.

    */
    open var PrefixOrigin : dotnet.System.Net.NetworkInformation.PrefixOrigin {
        get {
            return try! get_PrefixOrigin();
        }
    }
    /**
    Gets a value that identifies the source of a Multicast Internet Protocol (IP) address suffix.

    */
    open var SuffixOrigin : dotnet.System.Net.NetworkInformation.SuffixOrigin {
        get {
            return try! get_SuffixOrigin();
        }
    }
} // MulticastIPAddressInformation


// type: System.Net.NetworkInformation.MulticastIPAddressInformationCollection
    /**
    Stores a set of  types.

    */
open class MulticastIPAddressInformationCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_MulticastIPAddressInformationCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Net.NetworkInformation.MulticastIPAddressInformation)
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Add(System.Net.NetworkInformation.MulticastIPAddressInformation)
    /**
    Throws a  because the collection is read-only and elements cannot be added to the collection.

    - Parameter address: The object to be added to the collection.
    */
    open func Add(address : dotnet.System.Net.NetworkInformation.MulticastIPAddressInformation) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_MulticastIPAddressInformationCollection_void__Add_0__1__MulticastIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Clear
    /**
    Throws a  because the collection is read-only and elements cannot be removed.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_MulticastIPAddressInformationCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Net.NetworkInformation.MulticastIPAddressInformation)
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Contains(System.Net.NetworkInformation.MulticastIPAddressInformation)
    /**
    Checks whether the collection contains the specified  object.

    - Parameter address: The  object to be searched in the collection.
    - Returns: 
         if the  object exists in the collection; otherwise, .

    */
    open func Contains(address : dotnet.System.Net.NetworkInformation.MulticastIPAddressInformation) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformationCollection_bool__Contains_0__1__MulticastIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Net.NetworkInformation.MulticastIPAddressInformation[], System.Int32)
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.MulticastIPAddressInformation[],System.Int32)
    /**
    Copies the elements in this collection to a one-dimensional array of type .

    - Parameter array: A one-dimensional array that receives a copy of the collection.
    - Parameter offset: The zero-based index in  at which the copy begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Net.NetworkInformation.MulticastIPAddressInformation>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_MulticastIPAddressInformationCollection_void__CopyTo_0__2__MulticastIPAddressInformationArray_i32(&__thrown, self.get_handle(), array.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.MulticastIPAddressInformation> GetEnumerator()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.GetEnumerator
    /**
    Returns an object that can be used to iterate through this collection.

    - Returns: An object that implements the  interface and provides access to the  types in this collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Net.NetworkInformation.MulticastIPAddressInformation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformationCollection_System_Collections_Generic_IEnumerator_System_Net_NetworkInformation_MulticastIPAddressInformation___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.Net.NetworkInformation.MulticastIPAddressInformation)
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Remove(System.Net.NetworkInformation.MulticastIPAddressInformation)
    /**
    Throws a  because the collection is read-only and elements cannot be removed.

    - Parameter address: The object to be removed.
    - Returns: Always throws a .

    */
    open func Remove(address : dotnet.System.Net.NetworkInformation.MulticastIPAddressInformation) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformationCollection_bool__Remove_0__1__MulticastIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformationCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformationCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.MulticastIPAddressInformation get_Item(System.Int32)
// docid: M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Net.NetworkInformation.MulticastIPAddressInformation {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_MulticastIPAddressInformationCollection_MulticastIPAddressInformation__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.MulticastIPAddressInformation(hndl : __return);
        }
    }
    /**
    Gets the number of  types in this collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether access to this collection is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
} // MulticastIPAddressInformationCollection


// type: System.Net.NetworkInformation.NetBiosNodeType
    /**
    Specifies the Network Basic Input/Output System (NetBIOS) node type.

    */
public struct NetBiosNodeType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetBiosNodeType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.NetBiosNodeType Unknown
    /**
    An unknown node type.

    */
    public static var Unknown : dotnet.System.Net.NetworkInformation.NetBiosNodeType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetBiosNodeType(val: System_Net_NetworkInformation_NetBiosNodeType_get_Unknown());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetBiosNodeType Broadcast
    /**
    A broadcast node.

    */
    public static var Broadcast : dotnet.System.Net.NetworkInformation.NetBiosNodeType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetBiosNodeType(val: System_Net_NetworkInformation_NetBiosNodeType_get_Broadcast());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetBiosNodeType Peer2Peer
    /**
    A peer-to-peer node.

    */
    public static var Peer2Peer : dotnet.System.Net.NetworkInformation.NetBiosNodeType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetBiosNodeType(val: System_Net_NetworkInformation_NetBiosNodeType_get_Peer2Peer());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetBiosNodeType Mixed
    /**
    A mixed node.

    */
    public static var Mixed : dotnet.System.Net.NetworkInformation.NetBiosNodeType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetBiosNodeType(val: System_Net_NetworkInformation_NetBiosNodeType_get_Mixed());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetBiosNodeType Hybrid
    /**
    A hybrid node.

    */
    public static var Hybrid : dotnet.System.Net.NetworkInformation.NetBiosNodeType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetBiosNodeType(val: System_Net_NetworkInformation_NetBiosNodeType_get_Hybrid());
            return __return;
        }
    }
} // NetBiosNodeType


// type: System.Net.NetworkInformation.NetworkAddressChangedEventHandler
    /**
    References one or more methods to be called when the address of a network interface changes.

    */
public final class NetworkAddressChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetworkAddressChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.EventArgs)
// docid: M:System.Net.NetworkInformation.NetworkAddressChangedEventHandler.Invoke(System.Object,System.EventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.EventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkAddressChangedEventHandler_void__Invoke_0__2__Object_EventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.EventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.NetworkInformation.NetworkAddressChangedEventHandler.BeginInvoke(System.Object,System.EventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.EventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkAddressChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_EventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.NetworkInformation.NetworkAddressChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkAddressChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.EventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_NetworkAddressChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.EventArgs)
// docid: M:System.Net.NetworkInformation.NetworkAddressChangedEventHandler.Invoke(System.Object,System.EventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.EventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkAddressChangedEventHandler_void__Invoke_0__2__Object_EventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // NetworkAddressChangedEventHandler


// type: System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler
    /**
    References one or more methods to be called when the availability of the network changes.

    */
public final class NetworkAvailabilityChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetworkAvailabilityChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.NetworkInformation.NetworkAvailabilityEventArgs)
// docid: M:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler.Invoke(System.Object,System.Net.NetworkInformation.NetworkAvailabilityEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Net.NetworkInformation.NetworkAvailabilityEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkAvailabilityChangedEventHandler_void__Invoke_0__2__Object_NetworkAvailabilityEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.NetworkInformation.NetworkAvailabilityEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler.BeginInvoke(System.Object,System.Net.NetworkInformation.NetworkAvailabilityEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Net.NetworkInformation.NetworkAvailabilityEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkAvailabilityChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_NetworkAvailabilityEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkAvailabilityChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.Net.NetworkInformation.NetworkAvailabilityEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.Net.NetworkInformation.NetworkAvailabilityEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_NetworkAvailabilityChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.NetworkInformation.NetworkAvailabilityEventArgs)
// docid: M:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler.Invoke(System.Object,System.Net.NetworkInformation.NetworkAvailabilityEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.Net.NetworkInformation.NetworkAvailabilityEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkAvailabilityChangedEventHandler_void__Invoke_0__2__Object_NetworkAvailabilityEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // NetworkAvailabilityChangedEventHandler


// type: System.Net.NetworkInformation.NetworkAvailabilityEventArgs
    /**
    Provides data for the  event.

    */
open class NetworkAvailabilityEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetworkAvailabilityEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_IsAvailable()
// docid: M:System.Net.NetworkInformation.NetworkAvailabilityEventArgs.get_IsAvailable
    open func get_IsAvailable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkAvailabilityEventArgs_bool__get_IsAvailable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the current status of the network connection.

    */
    open var IsAvailable : Bool {
        get {
            return try! get_IsAvailable();
        }
    }
} // NetworkAvailabilityEventArgs


// type: System.Net.NetworkInformation.NetworkChange
    /**
    Allows applications to receive notification when the Internet Protocol (IP) address of a network interface, also called a network card or adapter, changes.

    */
open class NetworkChange
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetworkChange_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.NetworkInformation.NetworkChange.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_NetworkChange_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void RegisterNetworkChange(System.Net.NetworkInformation.NetworkChange)
// docid: M:System.Net.NetworkInformation.NetworkChange.RegisterNetworkChange(System.Net.NetworkInformation.NetworkChange)
    /**
    Registers a network change instance to receive network change events.

    - Parameter nc: The instance to register.
    */
    open class func RegisterNetworkChange(nc : dotnet.System.Net.NetworkInformation.NetworkChange) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkChange_void__RegisterNetworkChange_0__1__NetworkChange(&__thrown, nc.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_NetworkAddressChanged(System.Net.NetworkInformation.NetworkAddressChangedEventHandler)
// docid: M:System.Net.NetworkInformation.NetworkChange.add_NetworkAddressChanged(System.Net.NetworkInformation.NetworkAddressChangedEventHandler)
    open class func add_NetworkAddressChanged(value : Optional<dotnet.System.Net.NetworkInformation.NetworkAddressChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkChange_void__add_NetworkAddressChanged_0__1__NetworkAddressChangedEventHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func add_NetworkAddressChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.NetworkInformation.NetworkAddressChangedEventHandler(value);
        return try add_NetworkAddressChanged(value: del_value);
    }
    // [IsSpecialName] void remove_NetworkAddressChanged(System.Net.NetworkInformation.NetworkAddressChangedEventHandler)
// docid: M:System.Net.NetworkInformation.NetworkChange.remove_NetworkAddressChanged(System.Net.NetworkInformation.NetworkAddressChangedEventHandler)
    open class func remove_NetworkAddressChanged(value : Optional<dotnet.System.Net.NetworkInformation.NetworkAddressChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkChange_void__remove_NetworkAddressChanged_0__1__NetworkAddressChangedEventHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func remove_NetworkAddressChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.NetworkInformation.NetworkAddressChangedEventHandler(value);
        return try remove_NetworkAddressChanged(value: del_value);
    }
    // [IsSpecialName] void add_NetworkAvailabilityChanged(System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler)
// docid: M:System.Net.NetworkInformation.NetworkChange.add_NetworkAvailabilityChanged(System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler)
    open class func add_NetworkAvailabilityChanged(value : Optional<dotnet.System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkChange_void__add_NetworkAvailabilityChanged_0__1__NetworkAvailabilityChangedEventHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func add_NetworkAvailabilityChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Net.NetworkInformation.NetworkAvailabilityEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler(value);
        return try add_NetworkAvailabilityChanged(value: del_value);
    }
    // [IsSpecialName] void remove_NetworkAvailabilityChanged(System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler)
// docid: M:System.Net.NetworkInformation.NetworkChange.remove_NetworkAvailabilityChanged(System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler)
    open class func remove_NetworkAvailabilityChanged(value : Optional<dotnet.System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_NetworkChange_void__remove_NetworkAvailabilityChanged_0__1__NetworkAvailabilityChangedEventHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func remove_NetworkAvailabilityChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Net.NetworkInformation.NetworkAvailabilityEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler(value);
        return try remove_NetworkAvailabilityChanged(value: del_value);
    }
} // NetworkChange


// type: System.Net.NetworkInformation.NetworkInformationException
    /**
    The exception that is thrown when an error occurs while retrieving network information.

    */
open class NetworkInformationException
    :
    dotnet.System.ComponentModel.Win32Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetworkInformationException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.NetworkInformation.NetworkInformationException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_NetworkInformationException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Net.NetworkInformation.NetworkInformationException.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class with the specified error code.

    - Parameter errorCode: A  error code.
    */
    public init(errorCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_NetworkInformationException_ctor_0__1__i32(&__thrown, errorCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_ErrorCode()
// docid: M:System.Net.NetworkInformation.NetworkInformationException.get_ErrorCode
    open override func get_ErrorCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInformationException_i32__get_ErrorCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the  error code for this exception.

    */
    open override var ErrorCode : Swift.Int32 {
        get {
            return try! get_ErrorCode();
        }
    }
} // NetworkInformationException


// type: System.Net.NetworkInformation.NetworkInterface
    /**
    Provides configuration and statistical information for a network interface.

    */
open class NetworkInterface
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetworkInterface_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Net.NetworkInformation.NetworkInterface[] GetAllNetworkInterfaces()
// docid: M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces
    /**
    Returns objects that describe the network interfaces on the local computer.

    - Returns: A  array that contains objects that describe the available network interfaces, or an empty array if no interfaces are detected.

    */
    open class func GetAllNetworkInterfaces() throws -> dotnet.System_Arr<dotnet.System.Net.NetworkInformation.NetworkInterface> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_NetworkInterfaceArray__GetAllNetworkInterfaces_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.NetworkInformation.NetworkInterface>(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IPInterfaceProperties GetIPProperties()
// docid: M:System.Net.NetworkInformation.NetworkInterface.GetIPProperties
    /**
    Returns an object that describes the configuration of this network interface.

    - Returns: An  object that describes this network interface.

    */
    open func GetIPProperties() throws -> dotnet.System.Net.NetworkInformation.IPInterfaceProperties {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_IPInterfaceProperties__GetIPProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPInterfaceProperties(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IPInterfaceStatistics GetIPStatistics()
// docid: M:System.Net.NetworkInformation.NetworkInterface.GetIPStatistics
    /**
    Gets the IP statistics for this  instance.

    - Returns: The IP statistics.

    */
    open func GetIPStatistics() throws -> dotnet.System.Net.NetworkInformation.IPInterfaceStatistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_IPInterfaceStatistics__GetIPStatistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPInterfaceStatistics(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.IPv4InterfaceStatistics GetIPv4Statistics()
// docid: M:System.Net.NetworkInformation.NetworkInterface.GetIPv4Statistics
    /**
    Gets the IPv4 statistics for this  instance.

    - Returns: An  object.

    */
    open func GetIPv4Statistics() throws -> dotnet.System.Net.NetworkInformation.IPv4InterfaceStatistics {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_IPv4InterfaceStatistics__GetIPv4Statistics_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPv4InterfaceStatistics(hndl : __return);
        }
    }
    // bool GetIsNetworkAvailable()
// docid: M:System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable
    /**
    Indicates whether any network connection is available.

    - Returns: 
         if a network connection is available; otherwise, .

    */
    open class func GetIsNetworkAvailable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_bool__GetIsNetworkAvailable_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Net.NetworkInformation.PhysicalAddress GetPhysicalAddress()
// docid: M:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress
    /**
    Returns the Media Access Control (MAC) or physical address for this adapter.

    - Returns: A  object that contains the physical address.

    */
    open func GetPhysicalAddress() throws -> dotnet.System.Net.NetworkInformation.PhysicalAddress {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_PhysicalAddress__GetPhysicalAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PhysicalAddress(hndl : __return);
        }
    }
    // bool Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)
// docid: M:System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)
    /**
    Gets a  value that indicates whether the interface supports the specified protocol.

    - Parameter networkInterfaceComponent: A  value.
    - Returns: 
         if the specified protocol is supported; otherwise, .

    */
    open func Supports(networkInterfaceComponent : dotnet.System.Net.NetworkInformation.NetworkInterfaceComponent) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_bool__Supports_0__1__NetworkInterfaceComponent(&__thrown, self.get_handle(), networkInterfaceComponent.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_Description
    open func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_Id
    open func get_Id() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_IPv6LoopbackInterfaceIndex()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_IPv6LoopbackInterfaceIndex
    open class func get_IPv6LoopbackInterfaceIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_i32__get_IPv6LoopbackInterfaceIndex_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReceiveOnly()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_IsReceiveOnly
    open func get_IsReceiveOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_bool__get_IsReceiveOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_LoopbackInterfaceIndex()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_LoopbackInterfaceIndex
    open class func get_LoopbackInterfaceIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_i32__get_LoopbackInterfaceIndex_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.NetworkInterfaceType get_NetworkInterfaceType()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_NetworkInterfaceType
    open func get_NetworkInterfaceType() throws -> dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_NetworkInterfaceType__get_NetworkInterfaceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.OperationalStatus get_OperationalStatus()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_OperationalStatus
    open func get_OperationalStatus() throws -> dotnet.System.Net.NetworkInformation.OperationalStatus {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_OperationalStatus__get_OperationalStatus_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.OperationalStatus(val: __return);
        }
    }
    // [IsSpecialName] System.Int64 get_Speed()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_Speed
    open func get_Speed() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_i64__get_Speed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_SupportsMulticast()
// docid: M:System.Net.NetworkInformation.NetworkInterface.get_SupportsMulticast
    open func get_SupportsMulticast() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_NetworkInterface_bool__get_SupportsMulticast_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the description of the interface.

    */
    open var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
    }
    /**
    Gets the index of the IPv6 loopback interface.

    */
    public static var IPv6LoopbackInterfaceIndex : Swift.Int32 {
        get {
            return try! get_IPv6LoopbackInterfaceIndex();
        }
    }
    /**
    Gets the identifier of the network adapter.

    */
    open var Id : dotnet.System.String {
        get {
            return try! get_Id();
        }
    }
    /**
    Gets a  value that indicates whether the network interface is set to only receive data packets.

    */
    open var IsReceiveOnly : Bool {
        get {
            return try! get_IsReceiveOnly();
        }
    }
    /**
    Gets the index of the IPv4 loopback interface.

    */
    public static var LoopbackInterfaceIndex : Swift.Int32 {
        get {
            return try! get_LoopbackInterfaceIndex();
        }
    }
    /**
    Gets the name of the network adapter.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the interface type.

    */
    open var NetworkInterfaceType : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
            return try! get_NetworkInterfaceType();
        }
    }
    /**
    Gets the current operational state of the network connection.

    */
    open var OperationalStatus : dotnet.System.Net.NetworkInformation.OperationalStatus {
        get {
            return try! get_OperationalStatus();
        }
    }
    /**
    Gets the speed of the network interface.

    */
    open var Speed : Swift.Int64 {
        get {
            return try! get_Speed();
        }
    }
    /**
    Gets a  value that indicates whether the network interface is enabled to receive multicast packets.

    */
    open var SupportsMulticast : Bool {
        get {
            return try! get_SupportsMulticast();
        }
    }
} // NetworkInterface


// type: System.Net.NetworkInformation.NetworkInterfaceComponent
    /**
    Specifies the Internet Protocol versions that are supported by a network interface.

    */
public struct NetworkInterfaceComponent : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetworkInterfaceComponent_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.NetworkInterfaceComponent IPv4
    /**
    Internet Protocol version 4.

    */
    public static var IPv4 : dotnet.System.Net.NetworkInformation.NetworkInterfaceComponent {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceComponent(val: System_Net_NetworkInformation_NetworkInterfaceComponent_get_IPv4());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceComponent IPv6
    /**
    Internet Protocol version 6.

    */
    public static var IPv6 : dotnet.System.Net.NetworkInformation.NetworkInterfaceComponent {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceComponent(val: System_Net_NetworkInformation_NetworkInterfaceComponent_get_IPv6());
            return __return;
        }
    }
} // NetworkInterfaceComponent


// type: System.Net.NetworkInformation.NetworkInterfaceType
    /**
    Specifies types of network interfaces.

    */
public struct NetworkInterfaceType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_NetworkInterfaceType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Unknown
    /**
    The interface type is not known.

    */
    public static var Unknown : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Unknown());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Ethernet
    /**
    The network interface uses an Ethernet connection. Ethernet is defined in IEEE standard 802.3.

    */
    public static var Ethernet : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Ethernet());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType TokenRing
    /**
    The network interface uses a Token-Ring connection. Token-Ring is defined in IEEE standard 802.5.

    */
    public static var TokenRing : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_TokenRing());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Fddi
    /**
    The network interface uses a Fiber Distributed Data Interface (FDDI) connection. FDDI is a set of standards for data transmission on fiber optic lines in a local area network.

    */
    public static var Fddi : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Fddi());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType BasicIsdn
    /**
    The network interface uses a basic rate interface Integrated Services Digital Network (ISDN) connection. ISDN is a set of standards for data transmission over telephone lines.

    */
    public static var BasicIsdn : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_BasicIsdn());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType PrimaryIsdn
    /**
    The network interface uses a primary rate interface Integrated Services Digital Network (ISDN) connection. ISDN is a set of standards for data transmission over telephone lines.

    */
    public static var PrimaryIsdn : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_PrimaryIsdn());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Ppp
    /**
    The network interface uses a Point-To-Point protocol (PPP) connection. PPP is a protocol for data transmission using a serial device.

    */
    public static var Ppp : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Ppp());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Loopback
    /**
    The network interface is a loopback adapter. Such interfaces are often used for testing; no traffic is sent over the wire.

    */
    public static var Loopback : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Loopback());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Ethernet3Megabit
    /**
    The network interface uses an Ethernet 3 megabit/second connection. This version of Ethernet is defined in IETF RFC 895.

    */
    public static var Ethernet3Megabit : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Ethernet3Megabit());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Slip
    /**
    The network interface uses a Serial Line Internet Protocol (SLIP) connection. SLIP is defined in IETF RFC 1055.

    */
    public static var Slip : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Slip());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Atm
    /**
    The network interface uses asynchronous transfer mode (ATM) for data transmission.

    */
    public static var Atm : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Atm());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType GenericModem
    /**
    The network interface uses a modem.

    */
    public static var GenericModem : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_GenericModem());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType FastEthernetT
    /**
    The network interface uses a Fast Ethernet connection over twisted pair and provides a data rate of 100 megabits per second. This type of connection is also known as 100Base-T.

    */
    public static var FastEthernetT : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_FastEthernetT());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Isdn
    /**
    The network interface uses a connection configured for ISDN and the X.25 protocol. X.25 allows computers on public networks to communicate using an intermediary computer.

    */
    public static var Isdn : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Isdn());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType FastEthernetFx
    /**
    The network interface uses a Fast Ethernet connection over optical fiber and provides a data rate of 100 megabits per second. This type of connection is also known as 100Base-FX.

    */
    public static var FastEthernetFx : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_FastEthernetFx());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Wireless80211
    /**
    The network interface uses a wireless LAN connection (IEEE 802.11 standard).

    */
    public static var Wireless80211 : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Wireless80211());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType AsymmetricDsl
    /**
    The network interface uses an Asymmetric Digital Subscriber Line (ADSL).

    */
    public static var AsymmetricDsl : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_AsymmetricDsl());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType RateAdaptDsl
    /**
    The network interface uses a Rate Adaptive Digital Subscriber Line (RADSL).

    */
    public static var RateAdaptDsl : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_RateAdaptDsl());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType SymmetricDsl
    /**
    The network interface uses a Symmetric Digital Subscriber Line (SDSL).

    */
    public static var SymmetricDsl : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_SymmetricDsl());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType VeryHighSpeedDsl
    /**
    The network interface uses a Very High Data Rate Digital Subscriber Line (VDSL).

    */
    public static var VeryHighSpeedDsl : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_VeryHighSpeedDsl());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType IPOverAtm
    /**
    The network interface uses the Internet Protocol (IP) in combination with asynchronous transfer mode (ATM) for data transmission.

    */
    public static var IPOverAtm : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_IPOverAtm());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType GigabitEthernet
    /**
    The network interface uses a gigabit Ethernet connection and provides a data rate of 1,000 megabits per second (1 gigabit per second).

    */
    public static var GigabitEthernet : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_GigabitEthernet());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Tunnel
    /**
    The network interface uses a tunnel connection.

    */
    public static var Tunnel : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Tunnel());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType MultiRateSymmetricDsl
    /**
    The network interface uses a Multirate Digital Subscriber Line.

    */
    public static var MultiRateSymmetricDsl : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_MultiRateSymmetricDsl());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType HighPerformanceSerialBus
    /**
    The network interface uses a High Performance Serial Bus.

    */
    public static var HighPerformanceSerialBus : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_HighPerformanceSerialBus());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Wman
    /**
    The network interface uses a mobile broadband interface for WiMax devices.

    */
    public static var Wman : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Wman());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Wwanpp
    /**
    The network interface uses a mobile broadband interface for GSM-based devices.

    */
    public static var Wwanpp : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Wwanpp());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.NetworkInterfaceType Wwanpp2
    /**
    The network interface uses a mobile broadband interface for CDMA-based devices.

    */
    public static var Wwanpp2 : dotnet.System.Net.NetworkInformation.NetworkInterfaceType {
        get {
        let __return = dotnet.System.Net.NetworkInformation.NetworkInterfaceType(val: System_Net_NetworkInformation_NetworkInterfaceType_get_Wwanpp2());
            return __return;
        }
    }
} // NetworkInterfaceType


// type: System.Net.NetworkInformation.OperationalStatus
    /**
    Specifies the operational state of a network interface.

    */
public struct OperationalStatus : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_OperationalStatus_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.OperationalStatus Up
    /**
    The network interface is up; it can transmit data packets.

    */
    public static var Up : dotnet.System.Net.NetworkInformation.OperationalStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.OperationalStatus(val: System_Net_NetworkInformation_OperationalStatus_get_Up());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.OperationalStatus Down
    /**
    The network interface is unable to transmit data packets.

    */
    public static var Down : dotnet.System.Net.NetworkInformation.OperationalStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.OperationalStatus(val: System_Net_NetworkInformation_OperationalStatus_get_Down());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.OperationalStatus Testing
    /**
    The network interface is running tests.

    */
    public static var Testing : dotnet.System.Net.NetworkInformation.OperationalStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.OperationalStatus(val: System_Net_NetworkInformation_OperationalStatus_get_Testing());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.OperationalStatus Unknown
    /**
    The network interface status is not known.

    */
    public static var Unknown : dotnet.System.Net.NetworkInformation.OperationalStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.OperationalStatus(val: System_Net_NetworkInformation_OperationalStatus_get_Unknown());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.OperationalStatus Dormant
    /**
    The network interface is not in a condition to transmit data packets; it is waiting for an external event.

    */
    public static var Dormant : dotnet.System.Net.NetworkInformation.OperationalStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.OperationalStatus(val: System_Net_NetworkInformation_OperationalStatus_get_Dormant());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.OperationalStatus NotPresent
    /**
    The network interface is unable to transmit data packets because of a missing component, typically a hardware component.

    */
    public static var NotPresent : dotnet.System.Net.NetworkInformation.OperationalStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.OperationalStatus(val: System_Net_NetworkInformation_OperationalStatus_get_NotPresent());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.OperationalStatus LowerLayerDown
    /**
    The network interface is unable to transmit data packets because it runs on top of one or more other interfaces, and at least one of these "lower layer" interfaces is down.

    */
    public static var LowerLayerDown : dotnet.System.Net.NetworkInformation.OperationalStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.OperationalStatus(val: System_Net_NetworkInformation_OperationalStatus_get_LowerLayerDown());
            return __return;
        }
    }
} // OperationalStatus


// type: System.Net.NetworkInformation.PhysicalAddress
    /**
    Provides the Media Access Control (MAC) address for a network interface (adapter).

    */
open class PhysicalAddress
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_PhysicalAddress_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Net.NetworkInformation.PhysicalAddress None
    /**
    Returns a new  instance with a zero length address. This field is read-only.

    */
    open class var None : dotnet.System.Net.NetworkInformation.PhysicalAddress {
        get {
        let __return = dotnet.System.Net.NetworkInformation.PhysicalAddress(hndl: System_Net_NetworkInformation_PhysicalAddress_get_None());
            return __return;
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])
    /**
    Initializes a new instance of the  class.

    - Parameter address: A  array containing the address.
    */
    public init(address : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_PhysicalAddress_ctor_0__1__u8Array(&__thrown, address.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)
    /**
    Compares two  instances.

    - Parameter comparand: The  to compare to the current instance.
    - Returns: 
         if this instance and the specified instance contain the same address; otherwise .

    */
    open func Equals(comparand : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PhysicalAddress_bool__Equals_0__1__Object(&__thrown, self.get_handle(), comparand?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte[] GetAddressBytes()
// docid: M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes
    /**
    Returns the address of the current instance.

    - Returns: A  array containing the address.

    */
    open func GetAddressBytes() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PhysicalAddress_u8Array__GetAddressBytes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode
    /**
    Returns the hash value of a physical address.

    - Returns: An integer hash value.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PhysicalAddress_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Net.NetworkInformation.PhysicalAddress Parse(System.String)
// docid: M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)
    /**
    Parses the specified  and stores its contents as the address bytes of the  returned by this method.

    - Parameter address: A  containing the address that will be used to initialize the  instance returned by this method.
    - Returns: A  instance with the specified address.

    */
    open class func Parse(address : Optional<dotnet.System.String>) throws -> dotnet.System.Net.NetworkInformation.PhysicalAddress {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PhysicalAddress_PhysicalAddress__Parse_0__1__String(&__thrown, address?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PhysicalAddress(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) System.Net.NetworkInformation.PhysicalAddress Parse(System.ReadOnlySpan<System.Char>)
    // bool TryParse(System.String, ref System.Net.NetworkInformation.PhysicalAddress)
// docid: M:System.Net.NetworkInformation.PhysicalAddress.TryParse(System.String,System.Net.NetworkInformation.PhysicalAddress@)
    /**
    Tries to convert the string representation of a hardware address to a  instance. A return value indicates whether the conversion succeeded.

    - Parameter address: A string containing the address that will be used to initialize the  instance returned by this method.
    - Parameter value: When this method returns, contains the  instance equivalent of the address contained in , if the conversion succeeded, or  if the conversion failed. If the  is  it contains . This parameter is passed uninitialized; any value originally supplied in  will be overwritten.
    - Returns: 
         if  was converted successfully; otherwise, .

    */
    open class func TryParse(address : Optional<dotnet.System.String>, value : inout dotnet.System.Net.NetworkInformation.PhysicalAddress) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Net_NetworkInformation_PhysicalAddress_bool__TryParse_0__2__String_outPhysicalAddress(&__thrown, address?.get_handle() ?? nil, &_tmp_out_value);
        let _tmp2_value = dotnet.System.Net.NetworkInformation.PhysicalAddress(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryParse(System.ReadOnlySpan<System.Char>, ref System.Net.NetworkInformation.PhysicalAddress)
    // System.String ToString()
// docid: M:System.Net.NetworkInformation.PhysicalAddress.ToString
    /**
    Returns the  representation of the address of this instance.

    - Returns: A  containing the address contained in this instance.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PhysicalAddress_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // PhysicalAddress


// type: System.Net.NetworkInformation.PrefixOrigin
    /**
    Specifies how an IP address network prefix was located.

    */
public struct PrefixOrigin : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_PrefixOrigin_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.PrefixOrigin Other
    /**
    The prefix was located using an unspecified source.

    */
    public static var Other : dotnet.System.Net.NetworkInformation.PrefixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.PrefixOrigin(val: System_Net_NetworkInformation_PrefixOrigin_get_Other());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.PrefixOrigin Manual
    /**
    The prefix was manually configured.

    */
    public static var Manual : dotnet.System.Net.NetworkInformation.PrefixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.PrefixOrigin(val: System_Net_NetworkInformation_PrefixOrigin_get_Manual());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.PrefixOrigin WellKnown
    /**
    The prefix is a well-known prefix. Well-known prefixes are specified in standard-track Request for Comments (RFC) documents and assigned by the Internet Assigned Numbers Authority (Iana) or an address registry. Such prefixes are reserved for special purposes.

    */
    public static var WellKnown : dotnet.System.Net.NetworkInformation.PrefixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.PrefixOrigin(val: System_Net_NetworkInformation_PrefixOrigin_get_WellKnown());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.PrefixOrigin Dhcp
    /**
    The prefix was supplied by a Dynamic Host Configuration Protocol (DHCP) server.

    */
    public static var Dhcp : dotnet.System.Net.NetworkInformation.PrefixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.PrefixOrigin(val: System_Net_NetworkInformation_PrefixOrigin_get_Dhcp());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.PrefixOrigin RouterAdvertisement
    /**
    The prefix was supplied by a router advertisement.

    */
    public static var RouterAdvertisement : dotnet.System.Net.NetworkInformation.PrefixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.PrefixOrigin(val: System_Net_NetworkInformation_PrefixOrigin_get_RouterAdvertisement());
            return __return;
        }
    }
} // PrefixOrigin


// type: System.Net.NetworkInformation.ScopeLevel
    /**
    The scope level for an IPv6 address.

    */
public struct ScopeLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_ScopeLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.ScopeLevel None
    /**
    The scope level is not specified.

    */
    public static var None : dotnet.System.Net.NetworkInformation.ScopeLevel {
        get {
        let __return = dotnet.System.Net.NetworkInformation.ScopeLevel(val: System_Net_NetworkInformation_ScopeLevel_get_None());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.ScopeLevel Interface
    /**
    The scope is interface-level.

    */
    public static var Interface : dotnet.System.Net.NetworkInformation.ScopeLevel {
        get {
        let __return = dotnet.System.Net.NetworkInformation.ScopeLevel(val: System_Net_NetworkInformation_ScopeLevel_get_Interface());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.ScopeLevel Link
    /**
    The scope is link-level.

    */
    public static var Link : dotnet.System.Net.NetworkInformation.ScopeLevel {
        get {
        let __return = dotnet.System.Net.NetworkInformation.ScopeLevel(val: System_Net_NetworkInformation_ScopeLevel_get_Link());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.ScopeLevel Subnet
    /**
    The scope is subnet-level.

    */
    public static var Subnet : dotnet.System.Net.NetworkInformation.ScopeLevel {
        get {
        let __return = dotnet.System.Net.NetworkInformation.ScopeLevel(val: System_Net_NetworkInformation_ScopeLevel_get_Subnet());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.ScopeLevel Admin
    /**
    The scope is admin-level.

    */
    public static var Admin : dotnet.System.Net.NetworkInformation.ScopeLevel {
        get {
        let __return = dotnet.System.Net.NetworkInformation.ScopeLevel(val: System_Net_NetworkInformation_ScopeLevel_get_Admin());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.ScopeLevel Site
    /**
    The scope is site-level.

    */
    public static var Site : dotnet.System.Net.NetworkInformation.ScopeLevel {
        get {
        let __return = dotnet.System.Net.NetworkInformation.ScopeLevel(val: System_Net_NetworkInformation_ScopeLevel_get_Site());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.ScopeLevel Organization
    /**
    The scope is organization-level.

    */
    public static var Organization : dotnet.System.Net.NetworkInformation.ScopeLevel {
        get {
        let __return = dotnet.System.Net.NetworkInformation.ScopeLevel(val: System_Net_NetworkInformation_ScopeLevel_get_Organization());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.ScopeLevel Global
    /**
    The scope is global.

    */
    public static var Global : dotnet.System.Net.NetworkInformation.ScopeLevel {
        get {
        let __return = dotnet.System.Net.NetworkInformation.ScopeLevel(val: System_Net_NetworkInformation_ScopeLevel_get_Global());
            return __return;
        }
    }
} // ScopeLevel


// type: System.Net.NetworkInformation.SuffixOrigin
    /**
    Specifies how an IP address host suffix was located.

    */
public struct SuffixOrigin : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_SuffixOrigin_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.SuffixOrigin Other
    /**
    The suffix was located using an unspecified source.

    */
    public static var Other : dotnet.System.Net.NetworkInformation.SuffixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.SuffixOrigin(val: System_Net_NetworkInformation_SuffixOrigin_get_Other());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.SuffixOrigin Manual
    /**
    The suffix was manually configured.

    */
    public static var Manual : dotnet.System.Net.NetworkInformation.SuffixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.SuffixOrigin(val: System_Net_NetworkInformation_SuffixOrigin_get_Manual());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.SuffixOrigin WellKnown
    /**
    The suffix is a well-known suffix. Well-known suffixes are specified in standard-track Request for Comments (RFC) documents and assigned by the Internet Assigned Numbers Authority (Iana) or an address registry. Such suffixes are reserved for special purposes.

    */
    public static var WellKnown : dotnet.System.Net.NetworkInformation.SuffixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.SuffixOrigin(val: System_Net_NetworkInformation_SuffixOrigin_get_WellKnown());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.SuffixOrigin OriginDhcp
    /**
    The suffix was supplied by a Dynamic Host Configuration Protocol (DHCP) server.

    */
    public static var OriginDhcp : dotnet.System.Net.NetworkInformation.SuffixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.SuffixOrigin(val: System_Net_NetworkInformation_SuffixOrigin_get_OriginDhcp());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.SuffixOrigin LinkLayerAddress
    /**
    The suffix is a link-local suffix.

    */
    public static var LinkLayerAddress : dotnet.System.Net.NetworkInformation.SuffixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.SuffixOrigin(val: System_Net_NetworkInformation_SuffixOrigin_get_LinkLayerAddress());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.SuffixOrigin Random
    /**
    The suffix was randomly assigned.

    */
    public static var Random : dotnet.System.Net.NetworkInformation.SuffixOrigin {
        get {
        let __return = dotnet.System.Net.NetworkInformation.SuffixOrigin(val: System_Net_NetworkInformation_SuffixOrigin_get_Random());
            return __return;
        }
    }
} // SuffixOrigin


// type: System.Net.NetworkInformation.TcpConnectionInformation
    /**
    Provides information about the Transmission Control Protocol (TCP) connections on the local computer.

    */
open class TcpConnectionInformation
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_TcpConnectionInformation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.IPEndPoint get_LocalEndPoint()
// docid: M:System.Net.NetworkInformation.TcpConnectionInformation.get_LocalEndPoint
    open func get_LocalEndPoint() throws -> dotnet.System.Net.IPEndPoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpConnectionInformation_IPEndPoint__get_LocalEndPoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPEndPoint(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.IPEndPoint get_RemoteEndPoint()
// docid: M:System.Net.NetworkInformation.TcpConnectionInformation.get_RemoteEndPoint
    open func get_RemoteEndPoint() throws -> dotnet.System.Net.IPEndPoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpConnectionInformation_IPEndPoint__get_RemoteEndPoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPEndPoint(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.TcpState get_State()
// docid: M:System.Net.NetworkInformation.TcpConnectionInformation.get_State
    open func get_State() throws -> dotnet.System.Net.NetworkInformation.TcpState {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpConnectionInformation_TcpState__get_State_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.TcpState(val: __return);
        }
    }
    /**
    Gets the local endpoint of a Transmission Control Protocol (TCP) connection.

    */
    open var LocalEndPoint : dotnet.System.Net.IPEndPoint {
        get {
            return try! get_LocalEndPoint();
        }
    }
    /**
    Gets the remote endpoint of a Transmission Control Protocol (TCP) connection.

    */
    open var RemoteEndPoint : dotnet.System.Net.IPEndPoint {
        get {
            return try! get_RemoteEndPoint();
        }
    }
    /**
    Gets the state of this Transmission Control Protocol (TCP) connection.

    */
    open var State : dotnet.System.Net.NetworkInformation.TcpState {
        get {
            return try! get_State();
        }
    }
} // TcpConnectionInformation


// type: System.Net.NetworkInformation.TcpState
    /**
    Specifies the states of a Transmission Control Protocol (TCP) connection.

    */
public struct TcpState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_TcpState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.TcpState Unknown
    /**
    The TCP connection state is unknown.

    */
    public static var Unknown : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_Unknown());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState Closed
    /**
    The TCP connection is closed.

    */
    public static var Closed : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_Closed());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState Listen
    /**
    The local endpoint of the TCP connection is listening for a connection request from any remote endpoint.

    */
    public static var Listen : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_Listen());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState SynSent
    /**
    The local endpoint of the TCP connection has sent the remote endpoint a segment header with the synchronize (SYN) control bit set and is waiting for a matching connection request.

    */
    public static var SynSent : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_SynSent());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState SynReceived
    /**
    The local endpoint of the TCP connection has sent and received a connection request and is waiting for an acknowledgment.

    */
    public static var SynReceived : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_SynReceived());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState Established
    /**
    The TCP handshake is complete. The connection has been established and data can be sent.

    */
    public static var Established : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_Established());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState FinWait1
    /**
    The local endpoint of the TCP connection is waiting for a connection termination request from the remote endpoint or for an acknowledgement of the connection termination request sent previously.

    */
    public static var FinWait1 : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_FinWait1());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState FinWait2
    /**
    The local endpoint of the TCP connection is waiting for a connection termination request from the remote endpoint.

    */
    public static var FinWait2 : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_FinWait2());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState CloseWait
    /**
    The local endpoint of the TCP connection is waiting for a connection termination request from the local user.

    */
    public static var CloseWait : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_CloseWait());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState Closing
    /**
    The local endpoint of the TCP connection is waiting for an acknowledgement of the connection termination request sent previously.

    */
    public static var Closing : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_Closing());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState LastAck
    /**
    The local endpoint of the TCP connection is waiting for the final acknowledgement of the connection termination request sent previously.

    */
    public static var LastAck : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_LastAck());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState TimeWait
    /**
    The local endpoint of the TCP connection is waiting for enough time to pass to ensure that the remote endpoint received the acknowledgement of its connection termination request.

    */
    public static var TimeWait : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_TimeWait());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.TcpState DeleteTcb
    /**
    The transmission control buffer (TCB) for the TCP connection is being deleted.

    */
    public static var DeleteTcb : dotnet.System.Net.NetworkInformation.TcpState {
        get {
        let __return = dotnet.System.Net.NetworkInformation.TcpState(val: System_Net_NetworkInformation_TcpState_get_DeleteTcb());
            return __return;
        }
    }
} // TcpState


// type: System.Net.NetworkInformation.TcpStatistics
    /**
    Provides Transmission Control Protocol (TCP) statistical data.

    */
open class TcpStatistics
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_TcpStatistics_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_ConnectionsAccepted()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_ConnectionsAccepted
    open func get_ConnectionsAccepted() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_ConnectionsAccepted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ConnectionsInitiated()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_ConnectionsInitiated
    open func get_ConnectionsInitiated() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_ConnectionsInitiated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_CumulativeConnections()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_CumulativeConnections
    open func get_CumulativeConnections() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_CumulativeConnections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_CurrentConnections()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_CurrentConnections
    open func get_CurrentConnections() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_CurrentConnections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ErrorsReceived()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_ErrorsReceived
    open func get_ErrorsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_ErrorsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_FailedConnectionAttempts()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_FailedConnectionAttempts
    open func get_FailedConnectionAttempts() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_FailedConnectionAttempts_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaximumConnections()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_MaximumConnections
    open func get_MaximumConnections() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_MaximumConnections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaximumTransmissionTimeout()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_MaximumTransmissionTimeout
    open func get_MaximumTransmissionTimeout() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_MaximumTransmissionTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_MinimumTransmissionTimeout()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_MinimumTransmissionTimeout
    open func get_MinimumTransmissionTimeout() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_MinimumTransmissionTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ResetConnections()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_ResetConnections
    open func get_ResetConnections() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_ResetConnections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_ResetsSent()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_ResetsSent
    open func get_ResetsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_ResetsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_SegmentsReceived()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_SegmentsReceived
    open func get_SegmentsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_SegmentsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_SegmentsResent()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_SegmentsResent
    open func get_SegmentsResent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_SegmentsResent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_SegmentsSent()
// docid: M:System.Net.NetworkInformation.TcpStatistics.get_SegmentsSent
    open func get_SegmentsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_TcpStatistics_i64__get_SegmentsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of accepted Transmission Control Protocol (TCP) connection requests.

    */
    open var ConnectionsAccepted : Swift.Int64 {
        get {
            return try! get_ConnectionsAccepted();
        }
    }
    /**
    Gets the number of Transmission Control Protocol (TCP) connection requests made by clients.

    */
    open var ConnectionsInitiated : Swift.Int64 {
        get {
            return try! get_ConnectionsInitiated();
        }
    }
    /**
    Specifies the total number of Transmission Control Protocol (TCP) connections established.

    */
    open var CumulativeConnections : Swift.Int64 {
        get {
            return try! get_CumulativeConnections();
        }
    }
    /**
    Gets the number of current Transmission Control Protocol (TCP) connections.

    */
    open var CurrentConnections : Swift.Int64 {
        get {
            return try! get_CurrentConnections();
        }
    }
    /**
    Gets the number of Transmission Control Protocol (TCP) errors received.

    */
    open var ErrorsReceived : Swift.Int64 {
        get {
            return try! get_ErrorsReceived();
        }
    }
    /**
    Gets the number of failed Transmission Control Protocol (TCP) connection attempts.

    */
    open var FailedConnectionAttempts : Swift.Int64 {
        get {
            return try! get_FailedConnectionAttempts();
        }
    }
    /**
    Gets the maximum number of supported Transmission Control Protocol (TCP) connections.

    */
    open var MaximumConnections : Swift.Int64 {
        get {
            return try! get_MaximumConnections();
        }
    }
    /**
    Gets the maximum retransmission time-out value for Transmission Control Protocol (TCP) segments.

    */
    open var MaximumTransmissionTimeout : Swift.Int64 {
        get {
            return try! get_MaximumTransmissionTimeout();
        }
    }
    /**
    Gets the minimum retransmission time-out value for Transmission Control Protocol (TCP) segments.

    */
    open var MinimumTransmissionTimeout : Swift.Int64 {
        get {
            return try! get_MinimumTransmissionTimeout();
        }
    }
    /**
    Gets the number of RST packets received by Transmission Control Protocol (TCP) connections.

    */
    open var ResetConnections : Swift.Int64 {
        get {
            return try! get_ResetConnections();
        }
    }
    /**
    Gets the number of Transmission Control Protocol (TCP) segments sent with the reset flag set.

    */
    open var ResetsSent : Swift.Int64 {
        get {
            return try! get_ResetsSent();
        }
    }
    /**
    Gets the number of Transmission Control Protocol (TCP) segments received.

    */
    open var SegmentsReceived : Swift.Int64 {
        get {
            return try! get_SegmentsReceived();
        }
    }
    /**
    Gets the number of Transmission Control Protocol (TCP) segments re-sent.

    */
    open var SegmentsResent : Swift.Int64 {
        get {
            return try! get_SegmentsResent();
        }
    }
    /**
    Gets the number of Transmission Control Protocol (TCP) segments sent.

    */
    open var SegmentsSent : Swift.Int64 {
        get {
            return try! get_SegmentsSent();
        }
    }
} // TcpStatistics


// type: System.Net.NetworkInformation.UdpStatistics
    /**
    Provides User Datagram Protocol (UDP) statistical data.

    */
open class UdpStatistics
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_UdpStatistics_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_DatagramsReceived()
// docid: M:System.Net.NetworkInformation.UdpStatistics.get_DatagramsReceived
    open func get_DatagramsReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UdpStatistics_i64__get_DatagramsReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_DatagramsSent()
// docid: M:System.Net.NetworkInformation.UdpStatistics.get_DatagramsSent
    open func get_DatagramsSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UdpStatistics_i64__get_DatagramsSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_IncomingDatagramsDiscarded()
// docid: M:System.Net.NetworkInformation.UdpStatistics.get_IncomingDatagramsDiscarded
    open func get_IncomingDatagramsDiscarded() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UdpStatistics_i64__get_IncomingDatagramsDiscarded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_IncomingDatagramsWithErrors()
// docid: M:System.Net.NetworkInformation.UdpStatistics.get_IncomingDatagramsWithErrors
    open func get_IncomingDatagramsWithErrors() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UdpStatistics_i64__get_IncomingDatagramsWithErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_UdpListeners()
// docid: M:System.Net.NetworkInformation.UdpStatistics.get_UdpListeners
    open func get_UdpListeners() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UdpStatistics_i32__get_UdpListeners_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of User Datagram Protocol (UDP) datagrams that were received.

    */
    open var DatagramsReceived : Swift.Int64 {
        get {
            return try! get_DatagramsReceived();
        }
    }
    /**
    Gets the number of User Datagram Protocol (UDP) datagrams that were sent.

    */
    open var DatagramsSent : Swift.Int64 {
        get {
            return try! get_DatagramsSent();
        }
    }
    /**
    Gets the number of User Datagram Protocol (UDP) datagrams that were received and discarded because of port errors.

    */
    open var IncomingDatagramsDiscarded : Swift.Int64 {
        get {
            return try! get_IncomingDatagramsDiscarded();
        }
    }
    /**
    Gets the number of User Datagram Protocol (UDP) datagrams that were received and discarded because of errors other than bad port information.

    */
    open var IncomingDatagramsWithErrors : Swift.Int64 {
        get {
            return try! get_IncomingDatagramsWithErrors();
        }
    }
    /**
    Gets the number of local endpoints that are listening for User Datagram Protocol (UDP) datagrams.

    */
    open var UdpListeners : Swift.Int32 {
        get {
            return try! get_UdpListeners();
        }
    }
} // UdpStatistics


// type: System.Net.NetworkInformation.UnicastIPAddressInformation
    /**
    Provides information about a network interface's unicast address.

    */
open class UnicastIPAddressInformation
    :
    dotnet.System.Net.NetworkInformation.IPAddressInformation
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_UnicastIPAddressInformation_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_AddressPreferredLifetime()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformation.get_AddressPreferredLifetime
    open func get_AddressPreferredLifetime() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformation_i64__get_AddressPreferredLifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_AddressValidLifetime()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformation.get_AddressValidLifetime
    open func get_AddressValidLifetime() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformation_i64__get_AddressValidLifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_DhcpLeaseLifetime()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformation.get_DhcpLeaseLifetime
    open func get_DhcpLeaseLifetime() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformation_i64__get_DhcpLeaseLifetime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.DuplicateAddressDetectionState get_DuplicateAddressDetectionState()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformation.get_DuplicateAddressDetectionState
    open func get_DuplicateAddressDetectionState() throws -> dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformation_DuplicateAddressDetectionState__get_DuplicateAddressDetectionState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState(val: __return);
        }
    }
    // [IsSpecialName] System.Net.IPAddress get_IPv4Mask()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformation.get_IPv4Mask
    open func get_IPv4Mask() throws -> dotnet.System.Net.IPAddress {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformation_IPAddress__get_IPv4Mask_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPAddress(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_PrefixLength()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformation.get_PrefixLength
    open func get_PrefixLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformation_i32__get_PrefixLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.PrefixOrigin get_PrefixOrigin()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformation.get_PrefixOrigin
    open func get_PrefixOrigin() throws -> dotnet.System.Net.NetworkInformation.PrefixOrigin {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformation_PrefixOrigin__get_PrefixOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PrefixOrigin(val: __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.SuffixOrigin get_SuffixOrigin()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformation.get_SuffixOrigin
    open func get_SuffixOrigin() throws -> dotnet.System.Net.NetworkInformation.SuffixOrigin {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformation_SuffixOrigin__get_SuffixOrigin_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.SuffixOrigin(val: __return);
        }
    }
    /**
    Gets the number of seconds remaining during which this address is the preferred address.

    */
    open var AddressPreferredLifetime : Swift.Int64 {
        get {
            return try! get_AddressPreferredLifetime();
        }
    }
    /**
    Gets the number of seconds remaining during which this address is valid.

    */
    open var AddressValidLifetime : Swift.Int64 {
        get {
            return try! get_AddressValidLifetime();
        }
    }
    /**
    Specifies the amount of time remaining on the Dynamic Host Configuration Protocol (DHCP) lease for this IP address.

    */
    open var DhcpLeaseLifetime : Swift.Int64 {
        get {
            return try! get_DhcpLeaseLifetime();
        }
    }
    /**
    Gets a value that indicates the state of the duplicate address detection algorithm.

    */
    open var DuplicateAddressDetectionState : dotnet.System.Net.NetworkInformation.DuplicateAddressDetectionState {
        get {
            return try! get_DuplicateAddressDetectionState();
        }
    }
    /**
    Gets the IPv4 mask.

    */
    open var IPv4Mask : dotnet.System.Net.IPAddress {
        get {
            return try! get_IPv4Mask();
        }
    }
    /**
    Gets the length, in bits, of the prefix or network part of the IP address.

    */
    open var PrefixLength : Swift.Int32 {
        get {
            return try! get_PrefixLength();
        }
    }
    /**
    Gets a value that identifies the source of a unicast Internet Protocol (IP) address prefix.

    */
    open var PrefixOrigin : dotnet.System.Net.NetworkInformation.PrefixOrigin {
        get {
            return try! get_PrefixOrigin();
        }
    }
    /**
    Gets a value that identifies the source of a unicast Internet Protocol (IP) address suffix.

    */
    open var SuffixOrigin : dotnet.System.Net.NetworkInformation.SuffixOrigin {
        get {
            return try! get_SuffixOrigin();
        }
    }
} // UnicastIPAddressInformation


// type: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
    /**
    Stores a set of  types.

    */
open class UnicastIPAddressInformationCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_UnicastIPAddressInformationCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Net.NetworkInformation.UnicastIPAddressInformation)
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Add(System.Net.NetworkInformation.UnicastIPAddressInformation)
    /**
    Throws a  because this operation is not supported for this collection.

    - Parameter address: The object to be added to the collection.
    */
    open func Add(address : dotnet.System.Net.NetworkInformation.UnicastIPAddressInformation) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_UnicastIPAddressInformationCollection_void__Add_0__1__UnicastIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Clear
    /**
    Throws a  because this operation is not supported for this collection.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_UnicastIPAddressInformationCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Net.NetworkInformation.UnicastIPAddressInformation)
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Contains(System.Net.NetworkInformation.UnicastIPAddressInformation)
    /**
    Checks whether the collection contains the specified  object.

    - Parameter address: The  object to be searched in the collection.
    - Returns: 
         if the  object exists in the collection; otherwise, .

    */
    open func Contains(address : dotnet.System.Net.NetworkInformation.UnicastIPAddressInformation) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformationCollection_bool__Contains_0__1__UnicastIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Net.NetworkInformation.UnicastIPAddressInformation[], System.Int32)
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.UnicastIPAddressInformation[],System.Int32)
    /**
    Copies the elements in this collection to a one-dimensional array of type .

    - Parameter array: A one-dimensional array that receives a copy of the collection.
    - Parameter offset: The zero-based index in  at which the copy begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Net.NetworkInformation.UnicastIPAddressInformation>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_UnicastIPAddressInformationCollection_void__CopyTo_0__2__UnicastIPAddressInformationArray_i32(&__thrown, self.get_handle(), array.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.UnicastIPAddressInformation> GetEnumerator()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.GetEnumerator
    /**
    Returns an object that can be used to iterate through this collection.

    - Returns: An object that implements the  interface and provides access to the  types in this collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Net.NetworkInformation.UnicastIPAddressInformation> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformationCollection_System_Collections_Generic_IEnumerator_System_Net_NetworkInformation_UnicastIPAddressInformation___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.Net.NetworkInformation.UnicastIPAddressInformation)
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Remove(System.Net.NetworkInformation.UnicastIPAddressInformation)
    /**
    Throws a  because the collection is read-only and elements cannot be removed.

    - Parameter address: The object to be removed.
    - Returns: Always throws a .

    */
    open func Remove(address : dotnet.System.Net.NetworkInformation.UnicastIPAddressInformation) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformationCollection_bool__Remove_0__1__UnicastIPAddressInformation(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformationCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformationCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.UnicastIPAddressInformation get_Item(System.Int32)
// docid: M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Net.NetworkInformation.UnicastIPAddressInformation {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_UnicastIPAddressInformationCollection_UnicastIPAddressInformation__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.UnicastIPAddressInformation(hndl : __return);
        }
    }
    /**
    Gets the number of  types in this collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether access to this collection is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
} // UnicastIPAddressInformationCollection


}



