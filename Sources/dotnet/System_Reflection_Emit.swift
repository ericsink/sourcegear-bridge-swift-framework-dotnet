// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Reflection
// System.Reflection.Emit
extension System.Reflection.Emit {
// type: System.Reflection.Emit.AssemblyBuilder
    /**
    Defines and represents a dynamic assembly.

    */
public final class AssemblyBuilder
    :
    dotnet.System.Reflection.Assembly
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_AssemblyBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess)
// docid: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
    /**
    Defines a dynamic assembly that has the specified name and access rights.

    - Parameter name: The name of the assembly.
    - Parameter access: The access rights of the assembly.
    - Returns: An object that represents the new assembly.

    */
    public class func DefineDynamicAssembly(name : dotnet.System.Reflection.AssemblyName, access : dotnet.System.Reflection.Emit.AssemblyBuilderAccess) throws -> dotnet.System.Reflection.Emit.AssemblyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_AssemblyBuilder__DefineDynamicAssembly_0__2__AssemblyName_AssemblyBuilderAccess(&__thrown, name.get_handle(), access.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.AssemblyBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>)
// docid: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
    /**
    Defines a new assembly that has the specified name, access rights, and attributes.

    - Parameter name: The name of the assembly.
    - Parameter access: The access rights of the assembly.
    - Parameter assemblyAttributes: A collection that contains the attributes of the assembly.
    - Returns: An object that represents the new assembly.

    */
    public class func DefineDynamicAssembly(name : dotnet.System.Reflection.AssemblyName, access : dotnet.System.Reflection.Emit.AssemblyBuilderAccess, assemblyAttributes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Reflection.Emit.CustomAttributeBuilder>>) throws -> dotnet.System.Reflection.Emit.AssemblyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_AssemblyBuilder__DefineDynamicAssembly_0__3__AssemblyName_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder_(&__thrown, name.get_handle(), access.get_value(), (assemblyAttributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.AssemblyBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.ModuleBuilder DefineDynamicModule(System.String)
// docid: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
    /**
    Defines a named transient dynamic module in this assembly.

    - Parameter name: The name of the dynamic module.
    - Returns: A  representing the defined dynamic module.

    */
    public func DefineDynamicModule(name : dotnet.System.String) throws -> dotnet.System.Reflection.Emit.ModuleBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_ModuleBuilder__DefineDynamicModule_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ModuleBuilder(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
    /**
    Returns a value that indicates whether this instance is equal to the specified object.

    - Parameter obj: An object to compare with this instance, or .
    - Returns: 
         if  equals the type and value of this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)
    /**
    Returns all the custom attributes that have been applied to the current .

    - Parameter inherit: This argument is ignored for objects of this type.
    - Returns: An array that contains the custom attributes; the array is empty if there are no attributes.

    */
    public override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Returns all the custom attributes that have been applied to the current , and that derive from a specified attribute type.

    - Parameter attributeType: The base type from which attributes derive.
    - Parameter inherit: This argument is ignored for objects of this type.
    - Returns: An array that contains the custom attributes that are derived at any level from ; the array is empty if there are no such attributes.

    */
    public override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData()
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData
    /**
    Returns  objects that contain information about the attributes that have been applied to the current .

    - Returns: A generic list of  objects representing data about the attributes that have been applied to the current module.

    */
    public override func GetCustomAttributesData() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.CustomAttributeData> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_System_Collections_Generic_IList_System_Reflection_CustomAttributeData___GetCustomAttributesData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Reflection.Emit.ModuleBuilder GetDynamicModule(System.String)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
    /**
    Returns the dynamic module with the specified name.

    - Parameter name: The name of the requested dynamic module.
    - Returns: A ModuleBuilder object representing the requested dynamic module.

    */
    public func GetDynamicModule(name : dotnet.System.String) throws -> Optional<dotnet.System.Reflection.Emit.ModuleBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_ModuleBuilder__GetDynamicModule_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.Emit.ModuleBuilder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type[] GetExportedTypes()
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes
    /**
    Gets the exported types defined in this assembly.

    - Returns: An array of  containing the exported types defined in this assembly.

    */
    public override func GetExportedTypes() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_TypeArray__GetExportedTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.IO.FileStream GetFile(System.String)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)
    /**
    Gets a  for the specified file in the file table of the manifest of this assembly.

    - Parameter name: The name of the specified file.
    - Returns: A  for the specified file, or , if the file is not found.

    */
    public override func GetFile(name : dotnet.System.String) throws -> dotnet.System.IO.FileStream {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_FileStream__GetFile_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.FileStream(hndl : __return);
        }
    }
    // System.IO.FileStream[] GetFiles(bool)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)
    /**
    Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.

    - Parameter getResourceModules: 
         to include resource modules; otherwise, .
    - Returns: An array of  objects.

    */
    public override func GetFiles(getResourceModules : Bool) throws -> dotnet.System_Arr<dotnet.System.IO.FileStream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_FileStreamArray__GetFiles_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(getResourceModules ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.IO.FileStream>(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Reflection.Module[] GetLoadedModules(bool)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)
    /**
    Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.

    - Parameter getResourceModules: 
         to include resource modules; otherwise, .
    - Returns: The loaded modules that are part of this assembly.

    */
    public override func GetLoadedModules(getResourceModules : Bool) throws -> dotnet.System_Arr<dotnet.System.Reflection.Module> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_ModuleArray__GetLoadedModules_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(getResourceModules ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.Module>(hndl : __return);
        }
    }
    // System.Reflection.ManifestResourceInfo GetManifestResourceInfo(System.String)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
    /**
    Returns information about how the given resource has been persisted.

    - Parameter resourceName: The name of the resource.
    - Returns: 
         populated with information about the resource's topology, or  if the resource is not found.

    */
    public override func GetManifestResourceInfo(resourceName : dotnet.System.String) throws -> Optional<dotnet.System.Reflection.ManifestResourceInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_ManifestResourceInfo__GetManifestResourceInfo_0__1__String(&__thrown, self.get_handle(), resourceName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.ManifestResourceInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String[] GetManifestResourceNames()
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
    /**
    Loads the specified manifest resource from this assembly.

    - Returns: An array of type  containing the names of all the resources.

    */
    public override func GetManifestResourceNames() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_StringArray__GetManifestResourceNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // System.IO.Stream GetManifestResourceStream(System.String)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
    /**
    Loads the specified manifest resource from this assembly.

    - Parameter name: The name of the manifest resource being requested.
    - Returns: A  representing this manifest resource.

    */
    public override func GetManifestResourceStream(name : dotnet.System.String) throws -> Optional<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_Stream__GetManifestResourceStream_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IO.Stream(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IO.Stream GetManifestResourceStream(System.Type, System.String)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)
    /**
    Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.

    - Parameter type: The type whose namespace is used to scope the manifest resource name.
    - Parameter name: The name of the manifest resource being requested.
    - Returns: A  representing this manifest resource.

    */
    public override func GetManifestResourceStream(type : dotnet.System.Type_, name : dotnet.System.String) throws -> Optional<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_Stream__GetManifestResourceStream_0__2__Type_String(&__thrown, self.get_handle(), type.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IO.Stream(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.Module GetModule(System.String)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)
    /**
    Gets the specified module in this assembly.

    - Parameter name: The name of the requested module.
    - Returns: The module being requested, or  if the module is not found.

    */
    public override func GetModule(name : dotnet.System.String) throws -> Optional<dotnet.System.Reflection.Module> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_Module__GetModule_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.Module(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.Module[] GetModules(bool)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)
    /**
    Gets all the modules that are part of this assembly, and optionally includes resource modules.

    - Parameter getResourceModules: 
         to include resource modules; otherwise, .
    - Returns: The modules that are part of this assembly.

    */
    public override func GetModules(getResourceModules : Bool) throws -> dotnet.System_Arr<dotnet.System.Reflection.Module> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_ModuleArray__GetModules_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(getResourceModules ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.Module>(hndl : __return);
        }
    }
    // System.Reflection.AssemblyName GetName(bool)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)
    /**
    Gets the  that was specified when the current dynamic assembly was created, and sets the code base as specified.

    - Parameter copiedName: 
         to set the code base to the location of the assembly after it is shadow-copied;  to set the code base to the original location.
    - Returns: The name of the dynamic assembly.

    */
    public override func GetName(copiedName : Bool) throws -> dotnet.System.Reflection.AssemblyName {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_AssemblyName__GetName_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(copiedName ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.AssemblyName(hndl : __return);
        }
    }
    // System.Reflection.AssemblyName[] GetReferencedAssemblies()
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies
    /**
    Gets an incomplete list of  objects for the assemblies that are referenced by this .

    - Returns: An array of assembly names for the referenced assemblies. This array is not a complete list.

    */
    public override func GetReferencedAssemblies() throws -> dotnet.System_Arr<dotnet.System.Reflection.AssemblyName> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_AssemblyNameArray__GetReferencedAssemblies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.AssemblyName>(hndl : __return);
        }
    }
    // System.Reflection.Assembly GetSatelliteAssembly(System.Globalization.CultureInfo)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)
    /**
    Gets the satellite assembly for the specified culture.

    - Parameter culture: The specified culture.
    - Returns: The specified satellite assembly.

    */
    public override func GetSatelliteAssembly(culture : dotnet.System.Globalization.CultureInfo) throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_Assembly__GetSatelliteAssembly_0__1__CultureInfo(&__thrown, self.get_handle(), culture.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // System.Reflection.Assembly GetSatelliteAssembly(System.Globalization.CultureInfo, System.Version)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
    /**
    Gets the specified version of the satellite assembly for the specified culture.

    - Parameter culture: The specified culture.
    - Parameter version: The version of the satellite assembly.
    - Returns: The specified satellite assembly.

    */
    public override func GetSatelliteAssembly(culture : dotnet.System.Globalization.CultureInfo, version : Optional<dotnet.System.Version>) throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_Assembly__GetSatelliteAssembly_0__2__CultureInfo_Version(&__thrown, self.get_handle(), culture.get_handle(), version?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // System.Type GetType(System.String, bool, bool)
// docid: M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)
    /**
    Gets the specified type from the types that have been defined and created in the current .

    - Parameter name: The name of the type to search for.
    - Parameter throwOnError: 
         to throw an exception if the type is not found; otherwise, .
    - Parameter ignoreCase: 
         to ignore the case of the type name when searching; otherwise, .
    - Returns: The specified type, or  if the type is not found or has not been created yet.

    */
    public override func GetType(name : dotnet.System.String, throwOnError : Bool, ignoreCase : Bool) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_Type__GetType_0__3__String_bool_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(throwOnError ? 1 : 0), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.

    - Parameter attributeType: The type of attribute to test for.
    - Parameter inherit: This argument is ignored for objects of this type.
    - Returns: 
         if one or more instances of  is applied to this dynamic assembly; otherwise, .

    */
    public override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Set a custom attribute on this assembly using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_AssemblyBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Set a custom attribute on this assembly using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to define the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_AssemblyBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CodeBase()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_CodeBase
    public override func get_CodeBase() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_String__get_CodeBase_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.MethodInfo get_EntryPoint()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_EntryPoint
    public override func get_EntryPoint() throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_MethodInfo__get_EntryPoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_FullName()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_FullName
    public override func get_FullName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_String__get_FullName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int64 get_HostContext()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_HostContext
    public override func get_HostContext() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_i64__get_HostContext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsCollectible()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_IsCollectible
    public override func get_IsCollectible() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_bool__get_IsCollectible_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDynamic()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_IsDynamic
    public override func get_IsDynamic() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_bool__get_IsDynamic_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Location()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_Location
    public override func get_Location() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_String__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.Module get_ManifestModule()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_ManifestModule
    public override func get_ManifestModule() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_Module__get_ManifestModule_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ReflectionOnly()
// docid: M:System.Reflection.Emit.AssemblyBuilder.get_ReflectionOnly
    public override func get_ReflectionOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_AssemblyBuilder_bool__get_ReflectionOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the location of the assembly, as specified originally (such as in an  object).

    */
    public override var CodeBase : Optional<dotnet.System.String> {
        get {
            return try! get_CodeBase();
        }
    }
    /**
    Returns the entry point of this assembly.

    */
    public override var EntryPoint : Optional<dotnet.System.Reflection.MethodInfo> {
        get {
            return try! get_EntryPoint();
        }
    }
    /**
    Gets the display name of the current dynamic assembly.

    */
    public override var FullName : Optional<dotnet.System.String> {
        get {
            return try! get_FullName();
        }
    }
    /**
    Gets the host context where the dynamic assembly is being created.

    */
    public override var HostContext : Swift.Int64 {
        get {
            return try! get_HostContext();
        }
    }
    public override var IsCollectible : Bool {
        get {
            return try! get_IsCollectible();
        }
    }
    /**
    Gets a value that indicates that the current assembly is a dynamic assembly.

    */
    public override var IsDynamic : Bool {
        get {
            return try! get_IsDynamic();
        }
    }
    /**
    Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.

    */
    public override var Location : dotnet.System.String {
        get {
            return try! get_Location();
        }
    }
    /**
    Gets the module in the current  that contains the assembly manifest.

    */
    public override var ManifestModule : dotnet.System.Reflection.Module {
        get {
            return try! get_ManifestModule();
        }
    }
    /**
    Gets a value indicating whether the dynamic assembly is in the reflection-only context.

    */
    public override var ReflectionOnly : Bool {
        get {
            return try! get_ReflectionOnly();
        }
    }
} // AssemblyBuilder


// type: System.Reflection.Emit.AssemblyBuilderAccess
    /**
    Defines the access modes for a dynamic assembly.

    */
public struct AssemblyBuilderAccess : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_AssemblyBuilderAccess_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Reflection.Emit.AssemblyBuilderAccess Run
    /**
    The dynamic assembly can be executed, but not saved.

    */
    public static var Run : dotnet.System.Reflection.Emit.AssemblyBuilderAccess {
        get {
        let __return = dotnet.System.Reflection.Emit.AssemblyBuilderAccess(val: System_Reflection_Emit_AssemblyBuilderAccess_get_Run());
            return __return;
        }
    }
    // static field: System.Reflection.Emit.AssemblyBuilderAccess RunAndCollect
    /**
    The dynamic assembly will be automatically unloaded and its memory reclaimed, when it's no longer accessible.

    */
    public static var RunAndCollect : dotnet.System.Reflection.Emit.AssemblyBuilderAccess {
        get {
        let __return = dotnet.System.Reflection.Emit.AssemblyBuilderAccess(val: System_Reflection_Emit_AssemblyBuilderAccess_get_RunAndCollect());
            return __return;
        }
    }
} // AssemblyBuilderAccess


// type: System.Reflection.Emit.ConstructorBuilder
    /**
    Defines and represents a constructor of a dynamic class.

    */
public final class ConstructorBuilder
    :
    dotnet.System.Reflection.ConstructorInfo
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_ConstructorBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Reflection.Emit.ParameterBuilder DefineParameter(System.Int32, System.Reflection.ParameterAttributes, System.String)
// docid: M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
    /**
    Defines a parameter of this constructor.

    - Parameter iSequence: The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.
    - Parameter attributes: The attributes of the parameter.
    - Parameter strParamName: The name of the parameter. The name can be the null string.
    - Returns: An object that represents the new parameter of this constructor.

    */
    public func DefineParameter(iSequence : Swift.Int32, attributes : dotnet.System.Reflection.ParameterAttributes, strParamName : Optional<dotnet.System.String>) throws -> dotnet.System.Reflection.Emit.ParameterBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_ParameterBuilder__DefineParameter_0__3__i32_ParameterAttributes_String(&__thrown, self.get_handle(), iSequence, attributes.get_value(), strParamName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ParameterBuilder(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)
    /**
    Returns all the custom attributes defined for this constructor.

    - Parameter inherit: Controls inheritance of custom attributes from base classes. This parameter is ignored.
    - Returns: An array of objects representing all the custom attributes of the constructor represented by this  instance.

    */
    public override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Returns the custom attributes identified by the given type.

    - Parameter attributeType: The custom attribute type.
    - Parameter inherit: Controls inheritance of custom attributes from base classes. This parameter is ignored.
    - Returns: An object array that represents the attributes of this constructor.

    */
    public override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Reflection.Emit.ILGenerator GetILGenerator()
// docid: M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator
    /**
    Gets an  for this constructor.

    - Returns: An  object for this constructor.

    */
    public func GetILGenerator() throws -> dotnet.System.Reflection.Emit.ILGenerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_ILGenerator__GetILGenerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ILGenerator(hndl : __return);
        }
    }
    // System.Reflection.Emit.ILGenerator GetILGenerator(System.Int32)
// docid: M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)
    /**
    Gets an  object, with the specified MSIL stream size, that can be used to build a method body for this constructor.

    - Parameter streamSize: The size of the MSIL stream, in bytes.
    - Returns: An  for this constructor.

    */
    public func GetILGenerator(streamSize : Swift.Int32) throws -> dotnet.System.Reflection.Emit.ILGenerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_ILGenerator__GetILGenerator_0__1__i32(&__thrown, self.get_handle(), streamSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ILGenerator(hndl : __return);
        }
    }
    // System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
// docid: M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags
    /**
    Returns the method implementation flags for this constructor.

    - Returns: The method implementation flags for this constructor.

    */
    public override func GetMethodImplementationFlags() throws -> dotnet.System.Reflection.MethodImplAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_MethodImplAttributes__GetMethodImplementationFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodImplAttributes(val: __return);
        }
    }
    // System.Reflection.ParameterInfo[] GetParameters()
// docid: M:System.Reflection.Emit.ConstructorBuilder.GetParameters
    /**
    Returns the parameters of this constructor.

    - Returns: An array that represents the parameters of this constructor.

    */
    public override func GetParameters() throws -> dotnet.System_Arr<dotnet.System.Reflection.ParameterInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_ParameterInfoArray__GetParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.ParameterInfo>(hndl : __return);
        }
    }
    // System.Object Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)
// docid: M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
    /**
    Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified .

    - Parameter obj: The object that needs to be reinitialized.
    - Parameter invokeAttr: One of the  values that specifies the type of binding that is desired.
    - Parameter binder: A  that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If  is , then Binder.DefaultBinding is used.
    - Parameter parameters: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference ( in Visual Basic).
    - Parameter culture: A  used to govern the coercion of types. If this is null, the  for the current thread is used.
    - Returns: An instance of the class associated with the constructor.

    */
    public override func Invoke(obj : Optional<dotnet.System.Object>, invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, parameters : Optional<dotnet.System_Arr<dotnet.System.Object>>, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_Object__Invoke_0__5__Object_BindingFlags_Binder_ObjectArray_CultureInfo(&__thrown, self.get_handle(), obj?.get_handle() ?? nil, invokeAttr.get_value(), binder?.get_handle() ?? nil, (parameters?.get_handle()), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Invoke(System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)
// docid: M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
    /**
    Dynamically invokes the constructor represented by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.

    - Parameter invokeAttr: This must be a bit flag from , such as InvokeMethod, NonPublic, and so on.
    - Parameter binder: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of  objects using reflection. If binder is , the default binder is used. See .
    - Parameter parameters: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be .
    - Parameter culture: An instance of  used to govern the coercion of types. If this is null, the  for the current thread is used. (For example, this is necessary to convert a  that represents 1000 to a  value, since 1000 is represented differently by different cultures.)
    - Returns: The value returned by the invoked constructor.

    */
    public override func Invoke(invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, parameters : Optional<dotnet.System_Arr<dotnet.System.Object>>, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_Object__Invoke_0__4__BindingFlags_Binder_ObjectArray_CultureInfo(&__thrown, self.get_handle(), invokeAttr.get_value(), binder?.get_handle() ?? nil, (parameters?.get_handle()), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Checks if the specified custom attribute type is defined.

    - Parameter attributeType: A custom attribute type.
    - Parameter inherit: Controls inheritance of custom attributes from base classes. This parameter is ignored.
    - Returns: 
         if the specified custom attribute type is defined; otherwise, .

    */
    public override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Set a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ConstructorBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Set a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to define the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ConstructorBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetImplementationFlags(System.Reflection.MethodImplAttributes)
// docid: M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
    /**
    Sets the method implementation flags for this constructor.

    - Parameter attributes: The method implementation flags.
    */
    public func SetImplementationFlags(attributes : dotnet.System.Reflection.MethodImplAttributes) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ConstructorBuilder_void__SetImplementationFlags_0__1__MethodImplAttributes(&__thrown, self.get_handle(), attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Reflection.Emit.ConstructorBuilder.ToString
    /**
    Returns this  instance as a .

    - Returns: A string containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.MethodAttributes get_Attributes()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_Attributes
    public override func get_Attributes() throws -> dotnet.System.Reflection.MethodAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_MethodAttributes__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodAttributes(val: __return);
        }
    }
    // [IsSpecialName] System.Reflection.CallingConventions get_CallingConvention()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_CallingConvention
    public override func get_CallingConvention() throws -> dotnet.System.Reflection.CallingConventions {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_CallingConventions__get_CallingConvention_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.CallingConventions(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_DeclaringType()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_DeclaringType
    public override func get_DeclaringType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_Type__get_DeclaringType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_InitLocals()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_InitLocals
    public func get_InitLocals() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_bool__get_InitLocals_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_InitLocals(bool)
// docid: M:System.Reflection.Emit.ConstructorBuilder.set_InitLocals(System.Boolean)
    public func set_InitLocals(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ConstructorBuilder_void__set_InitLocals_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MetadataToken()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_MetadataToken
    public override func get_MetadataToken() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_i32__get_MetadataToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.RuntimeMethodHandle get_MethodHandle()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_MethodHandle
    public override func get_MethodHandle() throws -> dotnet.System.RuntimeMethodHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_RuntimeMethodHandle__get_MethodHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.RuntimeMethodHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.Module get_Module()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_Module
    public override func get_Module() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_Module__get_Module_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_Name
    public override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReflectedType()
// docid: M:System.Reflection.Emit.ConstructorBuilder.get_ReflectedType
    public override func get_ReflectedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ConstructorBuilder_Type__get_ReflectedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the attributes for this constructor.

    */
    public override var Attributes : dotnet.System.Reflection.MethodAttributes {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets a  value that depends on whether the declaring type is generic.

    */
    public override var CallingConvention : dotnet.System.Reflection.CallingConventions {
        get {
            return try! get_CallingConvention();
        }
    }
    /**
    Gets a reference to the  object for the type that declares this member.

    */
    public override var DeclaringType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaringType();
        }
    }
    /**
    Gets or sets whether the local variables in this constructor should be zero-initialized.

    */
    public var InitLocals : Bool {
        get {
            return try! get_InitLocals();
        }
        set(v) {
            return try! set_InitLocals(value: v);
        }
    }
    public override var MetadataToken : Swift.Int32 {
        get {
            return try! get_MetadataToken();
        }
    }
    /**
    Gets the internal handle for the method. Use this handle to access the underlying metadata handle.

    */
    public override var MethodHandle : dotnet.System.RuntimeMethodHandle {
        get {
            return try! get_MethodHandle();
        }
    }
    /**
    Gets the dynamic module in which this constructor is defined.

    */
    public override var Module : dotnet.System.Reflection.Module {
        get {
            return try! get_Module();
        }
    }
    /**
    Retrieves the name of this constructor.

    */
    public override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Holds a reference to the  object from which this object was obtained.

    */
    public override var ReflectedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReflectedType();
        }
    }
} // ConstructorBuilder


// type: System.Reflection.Emit.EnumBuilder
    /**
    Describes and represents an enumeration type.

    */
public final class EnumBuilder
    :
    dotnet.System.Reflection.TypeInfo
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_EnumBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Type CreateType()
// docid: M:System.Reflection.Emit.EnumBuilder.CreateType
    public func CreateType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__CreateType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.TypeInfo CreateTypeInfo()
// docid: M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo
    /**
    Gets a  object that represents this enumeration.

    - Returns: An object that represents this enumeration.

    */
    public func CreateTypeInfo() throws -> Optional<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_TypeInfo__CreateTypeInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.TypeInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.Emit.FieldBuilder DefineLiteral(System.String, System.Object)
// docid: M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)
    /**
    Defines the named static field in an enumeration type with the specified constant value.

    - Parameter literalName: The name of the static field.
    - Parameter literalValue: The constant value of the literal.
    - Returns: The defined field.

    */
    public func DefineLiteral(literalName : dotnet.System.String, literalValue : Optional<dotnet.System.Object>) throws -> dotnet.System.Reflection.Emit.FieldBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_FieldBuilder__DefineLiteral_0__2__String_Object(&__thrown, self.get_handle(), literalName.get_handle(), literalValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FieldBuilder(hndl : __return);
        }
    }
    // System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)
    /**
    Returns an array of  objects representing the public and non-public constructors defined for this class, as specified.

    - Parameter bindingAttr: This must be a bit flag from  : , , and so on.
    - Returns: Returns an array of  objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.

    */
    public override func GetConstructors(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_ConstructorInfoArray__GetConstructors_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)
    /**
    Returns all the custom attributes defined for this constructor.

    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the attributes.
    - Returns: Returns an array of objects representing all the custom attributes of the constructor represented by this  instance.

    */
    public override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Returns the custom attributes identified by the given type.

    - Parameter attributeType: The  object to which the custom attributes are applied.
    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the attributes.
    - Returns: Returns an array of objects representing the attributes of this constructor that are of .

    */
    public override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Type GetElementType()
// docid: M:System.Reflection.Emit.EnumBuilder.GetElementType
    /**
    Calling this method always throws .

    - Returns: This method is not supported. No value is returned.

    */
    public override func GetElementType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__GetElementType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type GetEnumUnderlyingType()
// docid: M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType
    /**
    Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.

    - Returns: The underlying type.

    */
    public override func GetEnumUnderlyingType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__GetEnumUnderlyingType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Reflection.EventInfo GetEvent(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
    /**
    Returns the event with the specified name.

    - Parameter name: The name of the event to get.
    - Parameter bindingAttr: This invocation attribute. This must be a bit flag from  : , , and so on.
    - Returns: Returns an  object representing the event declared or inherited by this type with the specified name. If there are no matches,  is returned.

    */
    public override func GetEvent(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_EventInfo__GetEvent_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.EventInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.EventInfo[] GetEvents()
// docid: M:System.Reflection.Emit.EnumBuilder.GetEvents
    /**
    Returns the events for the public events declared or inherited by this type.

    - Returns: Returns an array of  objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.

    */
    public override func GetEvents() throws -> dotnet.System_Arr<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_EventInfoArray__GetEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.EventInfo>(hndl : __return);
        }
    }
    // System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)
    /**
    Returns the public and non-public events that are declared by this type.

    - Parameter bindingAttr: This must be a bit flag from , such as , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.

    */
    public override func GetEvents(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_EventInfoArray__GetEvents_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.EventInfo>(hndl : __return);
        }
    }
    // System.Reflection.FieldInfo GetField(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)
    /**
    Returns the field specified by the given name.

    - Parameter name: The name of the field to get.
    - Parameter bindingAttr: This must be a bit flag from  : , , and so on.
    - Returns: Returns the  object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.

    */
    public override func GetField(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_FieldInfo__GetField_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.FieldInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)
    /**
    Returns the public and non-public fields that are declared by this type.

    - Parameter bindingAttr: This must be a bit flag from , such as InvokeMethod, NonPublic, and so on.
    - Returns: Returns an array of  objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.

    */
    public override func GetFields(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_FieldInfoArray__GetFields_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.FieldInfo>(hndl : __return);
        }
    }
    // System.Type GetInterface(System.String, bool)
// docid: M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)
    /**
    Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.

    - Parameter name: The name of the interface.
    - Parameter ignoreCase: If , the search is case-insensitive. If , the search is case-sensitive.
    - Returns: Returns a  object representing the implemented interface. Returns null if no interface matching name is found.

    */
    public override func GetInterface(name : dotnet.System.String, ignoreCase : Bool) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__GetInterface_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.InterfaceMapping GetInterfaceMap(System.Type)
// docid: M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)
    /**
    Returns an interface mapping for the interface requested.

    - Parameter interfaceType: The type of the interface for which the interface mapping is to be retrieved.
    - Returns: The requested interface mapping.

    */
    public override func GetInterfaceMap(interfaceType : dotnet.System.Type_) throws -> dotnet.System.Reflection.InterfaceMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_InterfaceMapping__GetInterfaceMap_0__1__Type(&__thrown, self.get_handle(), interfaceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.InterfaceMapping(hndl : __return);
        }
    }
    // System.Type[] GetInterfaces()
// docid: M:System.Reflection.Emit.EnumBuilder.GetInterfaces
    /**
    Returns an array of all the interfaces implemented on this a class and its base classes.

    - Returns: Returns an array of  objects representing the implemented interfaces. If none are defined, an empty array is returned.

    */
    public override func GetInterfaces() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_TypeArray__GetInterfaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
    /**
    Returns all members with the specified name, type, and binding that are declared or inherited by this type.

    - Parameter name: The name of the member.
    - Parameter type: The type of member that is to be returned.
    - Parameter bindingAttr: This must be a bit flag from  : , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public members defined on this type if  is used; otherwise, only the public members are returned.

    */
    public override func GetMember(name : dotnet.System.String, type : dotnet.System.Reflection.MemberTypes, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_MemberInfoArray__GetMember_0__3__String_MemberTypes_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), type.get_value(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)
    /**
    Returns the specified members declared or inherited by this type,.

    - Parameter bindingAttr: This must be a bit flag from  : , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.

    */
    public override func GetMembers(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_MemberInfoArray__GetMembers_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)
    /**
    Returns all the public and non-public methods declared or inherited by this type, as specified.

    - Parameter bindingAttr: This must be a bit flag from , such as , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public methods defined on this type if  is used; otherwise, only the public methods are returned.

    */
    public override func GetMethods(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_MethodInfoArray__GetMethods_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Type GetNestedType(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
    /**
    Returns the specified nested type that is declared by this type.

    - Parameter name: The  containing the name of the nested type to get.
    - Parameter bindingAttr: A bitmask comprised of one or more  that specify how the search is conducted.  
  
 -or-  
  
 Zero, to conduct a case-sensitive search for public methods.
    - Returns: A  object representing the nested type that matches the specified requirements, if found; otherwise, .

    */
    public override func GetNestedType(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__GetNestedType_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type[] GetNestedTypes(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)
    /**
    Returns the public and non-public nested types that are declared or inherited by this type.

    - Parameter bindingAttr: This must be a bit flag from , such as , , and so on.
    - Returns: An array of  objects representing all the types nested within the current  that match the specified binding constraints.  
  
 An empty array of type , if no types are nested within the current , or if none of the nested types match the binding constraints.

    */
    public override func GetNestedTypes(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_TypeArray__GetNestedTypes_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)
    /**
    Returns all the public and non-public properties declared or inherited by this type, as specified.

    - Parameter bindingAttr: This invocation attribute. This must be a bit flag from  : , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public properties defined on this type if  is used; otherwise, only the public properties are returned.

    */
    public override func GetProperties(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_PropertyInfoArray__GetProperties_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo>(hndl : __return);
        }
    }
    // System.Object InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])
// docid: M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
    /**
    Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.

    - Parameter name: The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.
    - Parameter invokeAttr: The invocation attribute. This must be a bit flag from .
    - Parameter binder: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of  objects using reflection. If binder is , the default binder is used. See .
    - Parameter target: The object on which to invoke the specified member. If the member is static, this parameter is ignored.
    - Parameter args: An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.
    - Parameter modifiers: An array of the same length as  with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.
    - Parameter culture: An instance of  used to govern the coercion of types. If this is null, the  for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)
    - Parameter namedParameters: Each parameter in the  array gets the value in the corresponding element in the  array. If the length of  is greater than the length of , the remaining argument values are passed in order.
    - Returns: Returns the return value of the invoked member.

    */
    public override func InvokeMember(name : dotnet.System.String, invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, target : Optional<dotnet.System.Object>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, modifiers : Optional<dotnet.System_Arr<dotnet.System.Reflection.ParameterModifier>>, culture : Optional<dotnet.System.Globalization.CultureInfo>, namedParameters : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Object__InvokeMember_0__8__String_BindingFlags_Binder_Object_ObjectArray_ParameterModifierArray_CultureInfo_StringArray(&__thrown, self.get_handle(), name.get_handle(), invokeAttr.get_value(), binder?.get_handle() ?? nil, target?.get_handle() ?? nil, (args?.get_handle()), (modifiers?.get_handle()), culture?.get_handle() ?? nil, (namedParameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsAssignableFrom(System.Reflection.TypeInfo)
// docid: M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
    public override func IsAssignableFrom(typeInfo : Optional<dotnet.System.Reflection.TypeInfo>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_bool__IsAssignableFrom_0__1__TypeInfo(&__thrown, self.get_handle(), typeInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Checks if the specified custom attribute type is defined.

    - Parameter attributeType: The  object to which the custom attributes are applied.
    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the attributes.
    - Returns: 
         if one or more instance of  is defined on this member; otherwise, .

    */
    public override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Type MakeArrayType()
// docid: M:System.Reflection.Emit.EnumBuilder.MakeArrayType
    /**
    Returns a  object representing a one-dimensional array of the current type, with a lower bound of zero.

    - Returns: A  object representing a one-dimensional array of the current type, with a lower bound of zero.

    */
    public override func MakeArrayType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__MakeArrayType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakeArrayType(System.Int32)
// docid: M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)
    /**
    Returns a  object representing an array of the current type, with the specified number of dimensions.

    - Parameter rank: The number of dimensions for the array. This number must be less than or equal to 32.
    - Returns: An object representing an array of the current type, with the specified number of dimensions.

    */
    public override func MakeArrayType(rank : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__MakeArrayType_0__1__i32(&__thrown, self.get_handle(), rank);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakeByRefType()
// docid: M:System.Reflection.Emit.EnumBuilder.MakeByRefType
    /**
    Returns a  object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).

    - Returns: A  object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).

    */
    public override func MakeByRefType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__MakeByRefType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakePointerType()
// docid: M:System.Reflection.Emit.EnumBuilder.MakePointerType
    /**
    Returns a  object that represents a pointer to the current type.

    - Returns: A  object that represents a pointer to the current type.

    */
    public override func MakePointerType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__MakePointerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Sets a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_EnumBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Sets a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to define the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_EnumBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.Assembly get_Assembly()
// docid: M:System.Reflection.Emit.EnumBuilder.get_Assembly
    public override func get_Assembly() throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Assembly__get_Assembly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AssemblyQualifiedName()
// docid: M:System.Reflection.Emit.EnumBuilder.get_AssemblyQualifiedName
    public override func get_AssemblyQualifiedName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_String__get_AssemblyQualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_BaseType()
// docid: M:System.Reflection.Emit.EnumBuilder.get_BaseType
    public override func get_BaseType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__get_BaseType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_DeclaringType()
// docid: M:System.Reflection.Emit.EnumBuilder.get_DeclaringType
    public override func get_DeclaringType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__get_DeclaringType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_FullName()
// docid: M:System.Reflection.Emit.EnumBuilder.get_FullName
    public override func get_FullName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_String__get_FullName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Guid get_GUID()
// docid: M:System.Reflection.Emit.EnumBuilder.get_GUID
    public override func get_GUID() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Guid__get_GUID_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsByRefLike()
// docid: M:System.Reflection.Emit.EnumBuilder.get_IsByRefLike
    public override func get_IsByRefLike() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_bool__get_IsByRefLike_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsConstructedGenericType()
// docid: M:System.Reflection.Emit.EnumBuilder.get_IsConstructedGenericType
    public override func get_IsConstructedGenericType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_bool__get_IsConstructedGenericType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSZArray()
// docid: M:System.Reflection.Emit.EnumBuilder.get_IsSZArray
    public override func get_IsSZArray() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_bool__get_IsSZArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsTypeDefinition()
// docid: M:System.Reflection.Emit.EnumBuilder.get_IsTypeDefinition
    public override func get_IsTypeDefinition() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_bool__get_IsTypeDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Reflection.Module get_Module()
// docid: M:System.Reflection.Emit.EnumBuilder.get_Module
    public override func get_Module() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Module__get_Module_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.EnumBuilder.get_Name
    public override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Reflection.Emit.EnumBuilder.get_Namespace
    public override func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_ReflectedType()
// docid: M:System.Reflection.Emit.EnumBuilder.get_ReflectedType
    public override func get_ReflectedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__get_ReflectedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.RuntimeTypeHandle get_TypeHandle()
// docid: M:System.Reflection.Emit.EnumBuilder.get_TypeHandle
    public override func get_TypeHandle() throws -> dotnet.System.RuntimeTypeHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_RuntimeTypeHandle__get_TypeHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.RuntimeTypeHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.Emit.FieldBuilder get_UnderlyingField()
// docid: M:System.Reflection.Emit.EnumBuilder.get_UnderlyingField
    public func get_UnderlyingField() throws -> dotnet.System.Reflection.Emit.FieldBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_FieldBuilder__get_UnderlyingField_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FieldBuilder(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_UnderlyingSystemType()
// docid: M:System.Reflection.Emit.EnumBuilder.get_UnderlyingSystemType
    public override func get_UnderlyingSystemType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_EnumBuilder_Type__get_UnderlyingSystemType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Retrieves the dynamic assembly that contains this enum definition.

    */
    public override var Assembly : dotnet.System.Reflection.Assembly {
        get {
            return try! get_Assembly();
        }
    }
    /**
    Returns the full path of this enum qualified by the display name of the parent assembly.

    */
    public override var AssemblyQualifiedName : Optional<dotnet.System.String> {
        get {
            return try! get_AssemblyQualifiedName();
        }
    }
    /**
    Returns the parent  of this type which is always .

    */
    public override var BaseType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BaseType();
        }
    }
    /**
    Returns the type that declared this .

    */
    public override var DeclaringType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaringType();
        }
    }
    /**
    Returns the full path of this enum.

    */
    public override var FullName : Optional<dotnet.System.String> {
        get {
            return try! get_FullName();
        }
    }
    /**
    Returns the GUID of this enum.

    */
    public override var GUID : dotnet.System.Guid {
        get {
            return try! get_GUID();
        }
    }
    /**
    */
    public override var IsByRefLike : Bool {
        get {
            return try! get_IsByRefLike();
        }
    }
    /**
    Gets a value that indicates whether this object represents a constructed generic type.

    */
    public override var IsConstructedGenericType : Bool {
        get {
            return try! get_IsConstructedGenericType();
        }
    }
    /**
    */
    public override var IsSZArray : Bool {
        get {
            return try! get_IsSZArray();
        }
    }
    /**
    */
    public override var IsTypeDefinition : Bool {
        get {
            return try! get_IsTypeDefinition();
        }
    }
    /**
    Retrieves the dynamic module that contains this  definition.

    */
    public override var Module : dotnet.System.Reflection.Module {
        get {
            return try! get_Module();
        }
    }
    /**
    Returns the name of this enum.

    */
    public override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Returns the namespace of this enum.

    */
    public override var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
    }
    /**
    Returns the type that was used to obtain this .

    */
    public override var ReflectedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReflectedType();
        }
    }
    /**
    Retrieves the internal handle for this enum.

    */
    public override var TypeHandle : dotnet.System.RuntimeTypeHandle {
        get {
            return try! get_TypeHandle();
        }
    }
    /**
    Returns the underlying field for this enum.

    */
    public var UnderlyingField : dotnet.System.Reflection.Emit.FieldBuilder {
        get {
            return try! get_UnderlyingField();
        }
    }
    /**
    Returns the underlying system type for this enum.

    */
    public override var UnderlyingSystemType : dotnet.System.Type_ {
        get {
            return try! get_UnderlyingSystemType();
        }
    }
} // EnumBuilder


// type: System.Reflection.Emit.EventBuilder
    /**
    Defines events for a class.

    */
public final class EventBuilder
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_EventBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddOtherMethod(System.Reflection.Emit.MethodBuilder)
// docid: M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)
    /**
    Adds one of the "other" methods associated with this event. "Other" methods are methods other than the "on" and "raise" methods associated with an event. This function can be called many times to add as many "other" methods.

    - Parameter mdBuilder: A  object that represents the other method.
    */
    public func AddOtherMethod(mdBuilder : dotnet.System.Reflection.Emit.MethodBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_EventBuilder_void__AddOtherMethod_0__1__MethodBuilder(&__thrown, self.get_handle(), mdBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAddOnMethod(System.Reflection.Emit.MethodBuilder)
// docid: M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)
    /**
    Sets the method used to subscribe to this event.

    - Parameter mdBuilder: A  object that represents the method used to subscribe to this event.
    */
    public func SetAddOnMethod(mdBuilder : dotnet.System.Reflection.Emit.MethodBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_EventBuilder_void__SetAddOnMethod_0__1__MethodBuilder(&__thrown, self.get_handle(), mdBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Set a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_EventBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Sets a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to describe the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_EventBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetRaiseMethod(System.Reflection.Emit.MethodBuilder)
// docid: M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)
    /**
    Sets the method used to raise this event.

    - Parameter mdBuilder: A  object that represents the method used to raise this event.
    */
    public func SetRaiseMethod(mdBuilder : dotnet.System.Reflection.Emit.MethodBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_EventBuilder_void__SetRaiseMethod_0__1__MethodBuilder(&__thrown, self.get_handle(), mdBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)
// docid: M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)
    /**
    Sets the method used to unsubscribe to this event.

    - Parameter mdBuilder: A  object that represents the method used to unsubscribe to this event.
    */
    public func SetRemoveOnMethod(mdBuilder : dotnet.System.Reflection.Emit.MethodBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_EventBuilder_void__SetRemoveOnMethod_0__1__MethodBuilder(&__thrown, self.get_handle(), mdBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // EventBuilder


// type: System.Reflection.Emit.FieldBuilder
    /**
    Defines and represents a field. This class cannot be inherited.

    */
public final class FieldBuilder
    :
    dotnet.System.Reflection.FieldInfo
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_FieldBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)
    /**
    Returns all the custom attributes defined for this field.

    - Parameter inherit: Controls inheritance of custom attributes from base classes.
    - Returns: An array of type  representing all the custom attributes of the constructor represented by this  instance.

    */
    public override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Returns all the custom attributes defined for this field identified by the given type.

    - Parameter attributeType: The custom attribute type.
    - Parameter inherit: Controls inheritance of custom attributes from base classes.
    - Returns: An array of type  representing all the custom attributes of the constructor represented by this  instance.

    */
    public override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object GetValue(System.Object)
// docid: M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)
    /**
    Retrieves the value of the field supported by the given object.

    - Parameter obj: The object on which to access the field.
    - Returns: An  containing the value of the field reflected by this instance.

    */
    public override func GetValue(obj : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_Object__GetValue_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Indicates whether an attribute having the specified type is defined on a field.

    - Parameter attributeType: The type of the attribute.
    - Parameter inherit: Controls inheritance of custom attributes from base classes.
    - Returns: 
         if one or more instance of  is defined on this field; otherwise, .

    */
    public override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SetConstant(System.Object)
// docid: M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)
    /**
    Sets the default value of this field.

    - Parameter defaultValue: The new default value for this field.
    */
    public func SetConstant(defaultValue : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_FieldBuilder_void__SetConstant_0__1__Object(&__thrown, self.get_handle(), defaultValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Sets a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_FieldBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Sets a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to define the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_FieldBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetOffset(System.Int32)
// docid: M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)
    /**
    Specifies the field layout.

    - Parameter iOffset: The offset of the field within the type containing this field.
    */
    public func SetOffset(iOffset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_FieldBuilder_void__SetOffset_0__1__i32(&__thrown, self.get_handle(), iOffset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.Object, System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Globalization.CultureInfo)
// docid: M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)
    /**
    Sets the value of the field supported by the given object.

    - Parameter obj: The object on which to access the field.
    - Parameter val: The value to assign to the field.
    - Parameter invokeAttr: A member of  that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).
    - Parameter binder: A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.
    - Parameter culture: The software preferences of a particular culture.
    */
    public func SetValue(obj : Optional<dotnet.System.Object>, val : Optional<dotnet.System.Object>, invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_FieldBuilder_void__SetValue_0__5__Object_Object_BindingFlags_Binder_CultureInfo(&__thrown, self.get_handle(), obj?.get_handle() ?? nil, val?.get_handle() ?? nil, invokeAttr.get_value(), binder?.get_handle() ?? nil, culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.FieldAttributes get_Attributes()
// docid: M:System.Reflection.Emit.FieldBuilder.get_Attributes
    public override func get_Attributes() throws -> dotnet.System.Reflection.FieldAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_FieldAttributes__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.FieldAttributes(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_DeclaringType()
// docid: M:System.Reflection.Emit.FieldBuilder.get_DeclaringType
    public override func get_DeclaringType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_Type__get_DeclaringType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.RuntimeFieldHandle get_FieldHandle()
// docid: M:System.Reflection.Emit.FieldBuilder.get_FieldHandle
    public override func get_FieldHandle() throws -> dotnet.System.RuntimeFieldHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_RuntimeFieldHandle__get_FieldHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.RuntimeFieldHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_FieldType()
// docid: M:System.Reflection.Emit.FieldBuilder.get_FieldType
    public override func get_FieldType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_Type__get_FieldType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MetadataToken()
// docid: M:System.Reflection.Emit.FieldBuilder.get_MetadataToken
    public override func get_MetadataToken() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_i32__get_MetadataToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Reflection.Module get_Module()
// docid: M:System.Reflection.Emit.FieldBuilder.get_Module
    public override func get_Module() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_Module__get_Module_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.FieldBuilder.get_Name
    public override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReflectedType()
// docid: M:System.Reflection.Emit.FieldBuilder.get_ReflectedType
    public override func get_ReflectedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_FieldBuilder_Type__get_ReflectedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Indicates the attributes of this field. This property is read-only.

    */
    public override var Attributes : dotnet.System.Reflection.FieldAttributes {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Indicates a reference to the  object for the type that declares this field. This property is read-only.

    */
    public override var DeclaringType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaringType();
        }
    }
    /**
    Indicates the internal metadata handle for this field. This property is read-only.

    */
    public override var FieldHandle : dotnet.System.RuntimeFieldHandle {
        get {
            return try! get_FieldHandle();
        }
    }
    /**
    Indicates the  object that represents the type of this field. This property is read-only.

    */
    public override var FieldType : dotnet.System.Type_ {
        get {
            return try! get_FieldType();
        }
    }
    public override var MetadataToken : Swift.Int32 {
        get {
            return try! get_MetadataToken();
        }
    }
    /**
    Gets the module in which the type that contains this field is being defined.

    */
    public override var Module : dotnet.System.Reflection.Module {
        get {
            return try! get_Module();
        }
    }
    /**
    Indicates the name of this field. This property is read-only.

    */
    public override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Indicates the reference to the  object from which this object was obtained. This property is read-only.

    */
    public override var ReflectedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReflectedType();
        }
    }
} // FieldBuilder


// type: System.Reflection.Emit.GenericTypeParameterBuilder
    /**
    Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.

    */
public final class GenericTypeParameterBuilder
    :
    dotnet.System.Reflection.TypeInfo
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_GenericTypeParameterBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(System.Object)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)
    /**
    Tests whether the given object is an instance of  and is equal to the current instance.

    - Parameter o: The object to be compared with the current instance.
    - Returns: 
         if  is an instance of  and equals the current instance; otherwise, .

    */
    public override func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetConstructors(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_ConstructorInfoArray__GetConstructors_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the attributes.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter attributeType: The type of attribute to search for. Only attributes that are assignable to this type are returned.
    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the attributes.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Type GetElementType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType
    /**
    Throws a  in all cases.

    - Returns: The type referred to by the current array type, pointer type, or  type; or  if the current type is not an array type, is not a pointer type, and is not passed by reference.

    */
    public override func GetElementType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__GetElementType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Reflection.EventInfo GetEvent(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter name: Not supported.
    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetEvent(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System.Reflection.EventInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_EventInfo__GetEvent_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.EventInfo(hndl : __return);
        }
    }
    // System.Reflection.EventInfo[] GetEvents()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents
    /**
    Not supported for incomplete generic type parameters.

    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetEvents() throws -> dotnet.System_Arr<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_EventInfoArray__GetEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.EventInfo>(hndl : __return);
        }
    }
    // System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetEvents(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_EventInfoArray__GetEvents_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.EventInfo>(hndl : __return);
        }
    }
    // System.Reflection.FieldInfo GetField(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter name: Not supported.
    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetField(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System.Reflection.FieldInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_FieldInfo__GetField_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.FieldInfo(hndl : __return);
        }
    }
    // System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetFields(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_FieldInfoArray__GetFields_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.FieldInfo>(hndl : __return);
        }
    }
    // System.Type[] GetGenericArguments()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments
    /**
    Not valid for generic type parameters.

    - Returns: Not valid for generic type parameters.

    */
    public override func GetGenericArguments() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_TypeArray__GetGenericArguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Type GetGenericTypeDefinition()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition
    /**
    Not valid for generic type parameters.

    - Returns: Not valid for generic type parameters.

    */
    public override func GetGenericTypeDefinition() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__GetGenericTypeDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode
    /**
    Returns a 32-bit integer hash code for the current instance.

    - Returns: A 32-bit integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Type GetInterface(System.String, bool)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter name: The name of the interface.
    - Parameter ignoreCase: 
         to search without regard for case;  to make a case-sensitive search.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetInterface(name : dotnet.System.String, ignoreCase : Bool) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__GetInterface_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Reflection.InterfaceMapping GetInterfaceMap(System.Type)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter interfaceType: A  object that represents the interface type for which the mapping is to be retrieved.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetInterfaceMap(interfaceType : dotnet.System.Type_) throws -> dotnet.System.Reflection.InterfaceMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_InterfaceMapping__GetInterfaceMap_0__1__Type(&__thrown, self.get_handle(), interfaceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.InterfaceMapping(hndl : __return);
        }
    }
    // System.Type[] GetInterfaces()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces
    /**
    Not supported for incomplete generic type parameters.

    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetInterfaces() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_TypeArray__GetInterfaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter name: Not supported.
    - Parameter type: Not supported.
    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetMember(name : dotnet.System.String, type : dotnet.System.Reflection.MemberTypes, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_MemberInfoArray__GetMember_0__3__String_MemberTypes_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), type.get_value(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetMembers(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_MemberInfoArray__GetMembers_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetMethods(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_MethodInfoArray__GetMethods_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Type GetNestedType(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter name: Not supported.
    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetNestedType(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__GetNestedType_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type[] GetNestedTypes(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetNestedTypes(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_TypeArray__GetNestedTypes_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter bindingAttr: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func GetProperties(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_PropertyInfoArray__GetProperties_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo>(hndl : __return);
        }
    }
    // System.Object InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
    /**
    Not supported for incomplete generic type parameters.

    - Parameter name: Not supported.
    - Parameter invokeAttr: Not supported.
    - Parameter binder: Not supported.
    - Parameter target: Not supported.
    - Parameter args: Not supported.
    - Parameter modifiers: Not supported.
    - Parameter culture: Not supported.
    - Parameter namedParameters: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func InvokeMember(name : dotnet.System.String, invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, target : Optional<dotnet.System.Object>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, modifiers : Optional<dotnet.System_Arr<dotnet.System.Reflection.ParameterModifier>>, culture : Optional<dotnet.System.Globalization.CultureInfo>, namedParameters : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Object__InvokeMember_0__8__String_BindingFlags_Binder_Object_ObjectArray_ParameterModifierArray_CultureInfo_StringArray(&__thrown, self.get_handle(), name.get_handle(), invokeAttr.get_value(), binder?.get_handle() ?? nil, target?.get_handle() ?? nil, (args?.get_handle()), (modifiers?.get_handle()), culture?.get_handle() ?? nil, (namedParameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool IsAssignableFrom(System.Reflection.TypeInfo)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
    public override func IsAssignableFrom(typeInfo : Optional<dotnet.System.Reflection.TypeInfo>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__IsAssignableFrom_0__1__TypeInfo(&__thrown, self.get_handle(), typeInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsAssignableFrom(System.Type)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)
    /**
    Throws a  exception in all cases.

    - Parameter c: The object to test.
    - Returns: Throws a  exception in all cases.

    */
    public override func IsAssignableFrom(c : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__IsAssignableFrom_0__1__Type(&__thrown, self.get_handle(), c?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter attributeType: Not supported.
    - Parameter inherit: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubclassOf(System.Type)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)
    /**
    Not supported for incomplete generic type parameters.

    - Parameter c: Not supported.
    - Returns: Not supported for incomplete generic type parameters.

    */
    public override func IsSubclassOf(c : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__IsSubclassOf_0__1__Type(&__thrown, self.get_handle(), c.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Type MakeArrayType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
    /**
    Returns the type of a one-dimensional array whose element type is the generic type parameter.

    - Returns: A  object that represents the type of a one-dimensional array whose element type is the generic type parameter.

    */
    public override func MakeArrayType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__MakeArrayType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakeArrayType(System.Int32)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)
    /**
    Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.

    - Parameter rank: The number of dimensions for the array.
    - Returns: A  object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.

    */
    public override func MakeArrayType(rank : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__MakeArrayType_0__1__i32(&__thrown, self.get_handle(), rank);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakeByRefType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
    /**
    Returns a  object that represents the current generic type parameter when passed as a reference parameter.

    - Returns: A  object that represents the current generic type parameter when passed as a reference parameter.

    */
    public override func MakeByRefType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__MakeByRefType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakeGenericType(System.Type[])
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])
    /**
    Not valid for incomplete generic type parameters.

    - Parameter typeArguments: An array of type arguments.
    - Returns: This method is invalid for incomplete generic type parameters.

    */
    public override func MakeGenericType(typeArguments : dotnet.System_Arr<dotnet.System.Type_>) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__MakeGenericType_0__1__TypeArray(&__thrown, self.get_handle(), typeArguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakePointerType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
    /**
    Returns a  object that represents a pointer to the current generic type parameter.

    - Returns: A  object that represents a pointer to the current generic type parameter.

    */
    public override func MakePointerType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__MakePointerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // void SetBaseTypeConstraint(System.Type)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)
    /**
    Sets the base type that a type must inherit in order to be substituted for the type parameter.

    - Parameter baseTypeConstraint: The  that must be inherited by any type that is to be substituted for the type parameter.
    */
    public func SetBaseTypeConstraint(baseTypeConstraint : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_GenericTypeParameterBuilder_void__SetBaseTypeConstraint_0__1__Type(&__thrown, self.get_handle(), baseTypeConstraint?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Sets a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attribute.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_GenericTypeParameterBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Set a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class that defines the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_GenericTypeParameterBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
    /**
    Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.

    - Parameter genericParameterAttributes: A bitwise combination of  values that represent the variance characteristics and special constraints of the generic type parameter.
    */
    public func SetGenericParameterAttributes(genericParameterAttributes : dotnet.System.Reflection.GenericParameterAttributes) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_GenericTypeParameterBuilder_void__SetGenericParameterAttributes_0__1__GenericParameterAttributes(&__thrown, self.get_handle(), genericParameterAttributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetInterfaceConstraints(System.Type[])
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])
    /**
    Sets the interfaces a type must implement in order to be substituted for the type parameter.

    - Parameter interfaceConstraints: An array of  objects that represent the interfaces a type must implement in order to be substituted for the type parameter.
    */
    public func SetInterfaceConstraints(interfaceConstraints : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_GenericTypeParameterBuilder_void__SetInterfaceConstraints_0__1__TypeArray(&__thrown, self.get_handle(), (interfaceConstraints?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString
    /**
    Returns a string representation of the current generic type parameter.

    - Returns: A string that contains the name of the generic type parameter.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.Assembly get_Assembly()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_Assembly
    public override func get_Assembly() throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Assembly__get_Assembly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AssemblyQualifiedName()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_AssemblyQualifiedName
    public override func get_AssemblyQualifiedName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_String__get_AssemblyQualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_BaseType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_BaseType
    public override func get_BaseType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__get_BaseType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_ContainsGenericParameters()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_ContainsGenericParameters
    public override func get_ContainsGenericParameters() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__get_ContainsGenericParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Reflection.MethodBase get_DeclaringMethod()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_DeclaringMethod
    public override func get_DeclaringMethod() throws -> Optional<dotnet.System.Reflection.MethodBase> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_MethodBase__get_DeclaringMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodBase(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_DeclaringType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_DeclaringType
    public override func get_DeclaringType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__get_DeclaringType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_FullName()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_FullName
    public override func get_FullName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_String__get_FullName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.GenericParameterAttributes get_GenericParameterAttributes()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_GenericParameterAttributes
    public override func get_GenericParameterAttributes() throws -> dotnet.System.Reflection.GenericParameterAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_GenericParameterAttributes__get_GenericParameterAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.GenericParameterAttributes(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_GenericParameterPosition()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_GenericParameterPosition
    public override func get_GenericParameterPosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_i32__get_GenericParameterPosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Guid get_GUID()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_GUID
    public override func get_GUID() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Guid__get_GUID_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsByRefLike()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_IsByRefLike
    public override func get_IsByRefLike() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__get_IsByRefLike_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsConstructedGenericType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_IsConstructedGenericType
    public override func get_IsConstructedGenericType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__get_IsConstructedGenericType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsGenericParameter()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_IsGenericParameter
    public override func get_IsGenericParameter() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__get_IsGenericParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsGenericType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_IsGenericType
    public override func get_IsGenericType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__get_IsGenericType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsGenericTypeDefinition()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_IsGenericTypeDefinition
    public override func get_IsGenericTypeDefinition() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__get_IsGenericTypeDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSZArray()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_IsSZArray
    public override func get_IsSZArray() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__get_IsSZArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsTypeDefinition()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_IsTypeDefinition
    public override func get_IsTypeDefinition() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_bool__get_IsTypeDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MetadataToken()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_MetadataToken
    public override func get_MetadataToken() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_i32__get_MetadataToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Reflection.Module get_Module()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_Module
    public override func get_Module() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Module__get_Module_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_Name
    public override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_Namespace
    public override func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_ReflectedType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_ReflectedType
    public override func get_ReflectedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__get_ReflectedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.RuntimeTypeHandle get_TypeHandle()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_TypeHandle
    public override func get_TypeHandle() throws -> dotnet.System.RuntimeTypeHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_RuntimeTypeHandle__get_TypeHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.RuntimeTypeHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_UnderlyingSystemType()
// docid: M:System.Reflection.Emit.GenericTypeParameterBuilder.get_UnderlyingSystemType
    public override func get_UnderlyingSystemType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_GenericTypeParameterBuilder_Type__get_UnderlyingSystemType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets an  object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.

    */
    public override var Assembly : dotnet.System.Reflection.Assembly {
        get {
            return try! get_Assembly();
        }
    }
    /**
    Gets  in all cases.

    */
    public override var AssemblyQualifiedName : Optional<dotnet.System.String> {
        get {
            return try! get_AssemblyQualifiedName();
        }
    }
    /**
    Gets the base type constraint of the current generic type parameter.

    */
    public override var BaseType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BaseType();
        }
    }
    /**
    Gets  in all cases.

    */
    public override var ContainsGenericParameters : Bool {
        get {
            return try! get_ContainsGenericParameters();
        }
    }
    /**
    Gets a  that represents the declaring method, if the current  represents a type parameter of a generic method.

    */
    public override var DeclaringMethod : Optional<dotnet.System.Reflection.MethodBase> {
        get {
            return try! get_DeclaringMethod();
        }
    }
    /**
    Gets the generic type definition or generic method definition to which the generic type parameter belongs.

    */
    public override var DeclaringType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaringType();
        }
    }
    /**
    Gets  in all cases.

    */
    public override var FullName : Optional<dotnet.System.String> {
        get {
            return try! get_FullName();
        }
    }
    /**
    Not supported for incomplete generic type parameters.

    */
    public override var GUID : dotnet.System.Guid {
        get {
            return try! get_GUID();
        }
    }
    /**
    Gets a combination of  flags that describe the covariance and special constraints of the current generic type parameter.

    */
    public override var GenericParameterAttributes : dotnet.System.Reflection.GenericParameterAttributes {
        get {
            return try! get_GenericParameterAttributes();
        }
    }
    /**
    Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.

    */
    public override var GenericParameterPosition : Swift.Int32 {
        get {
            return try! get_GenericParameterPosition();
        }
    }
    /**
    */
    public override var IsByRefLike : Bool {
        get {
            return try! get_IsByRefLike();
        }
    }
    /**
    Gets a value that indicates whether this object represents a constructed generic type.

    */
    public override var IsConstructedGenericType : Bool {
        get {
            return try! get_IsConstructedGenericType();
        }
    }
    /**
    Gets  in all cases.

    */
    public override var IsGenericParameter : Bool {
        get {
            return try! get_IsGenericParameter();
        }
    }
    /**
    Returns  in all cases.

    */
    public override var IsGenericType : Bool {
        get {
            return try! get_IsGenericType();
        }
    }
    /**
    Gets  in all cases.

    */
    public override var IsGenericTypeDefinition : Bool {
        get {
            return try! get_IsGenericTypeDefinition();
        }
    }
    /**
    */
    public override var IsSZArray : Bool {
        get {
            return try! get_IsSZArray();
        }
    }
    /**
    */
    public override var IsTypeDefinition : Bool {
        get {
            return try! get_IsTypeDefinition();
        }
    }
    public override var MetadataToken : Swift.Int32 {
        get {
            return try! get_MetadataToken();
        }
    }
    /**
    Gets the dynamic module that contains the generic type parameter.

    */
    public override var Module : dotnet.System.Reflection.Module {
        get {
            return try! get_Module();
        }
    }
    /**
    Gets the name of the generic type parameter.

    */
    public override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets  in all cases.

    */
    public override var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
    }
    /**
    Gets the  object that was used to obtain the .

    */
    public override var ReflectedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReflectedType();
        }
    }
    /**
    Not supported for incomplete generic type parameters.

    */
    public override var TypeHandle : dotnet.System.RuntimeTypeHandle {
        get {
            return try! get_TypeHandle();
        }
    }
    /**
    Gets the current generic type parameter.

    */
    public override var UnderlyingSystemType : dotnet.System.Type_ {
        get {
            return try! get_UnderlyingSystemType();
        }
    }
} // GenericTypeParameterBuilder


// type: System.Reflection.Emit.MethodBuilder
    /**
    Defines and represents a method (or constructor) on a dynamic class.

    */
public final class MethodBuilder
    :
    dotnet.System.Reflection.MethodInfo
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_MethodBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(System.String[])
// docid: M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
    /**
    Sets the number of generic type parameters for the current method, specifies their names, and returns an array of  objects that can be used to define their constraints.

    - Parameter names: An array of strings that represent the names of the generic type parameters.
    - Returns: An array of  objects representing the type parameters of the generic method.

    */
    public func DefineGenericParameters(names : dotnet.System_Arr<dotnet.System.String>) throws -> dotnet.System_Arr<dotnet.System.Reflection.Emit.GenericTypeParameterBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_GenericTypeParameterBuilderArray__DefineGenericParameters_0__1__StringArray(&__thrown, self.get_handle(), names.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.Emit.GenericTypeParameterBuilder>(hndl : __return);
        }
    }
    // System.Reflection.Emit.ParameterBuilder DefineParameter(System.Int32, System.Reflection.ParameterAttributes, System.String)
// docid: M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
    /**
    Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.

    - Parameter position: The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.
    - Parameter attributes: The parameter attributes of the parameter.
    - Parameter strParamName: The name of the parameter. The name can be the null string.
    - Returns: Returns a  object that represents a parameter of this method or the return value of this method.

    */
    public func DefineParameter(position : Swift.Int32, attributes : dotnet.System.Reflection.ParameterAttributes, strParamName : Optional<dotnet.System.String>) throws -> dotnet.System.Reflection.Emit.ParameterBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_ParameterBuilder__DefineParameter_0__3__i32_ParameterAttributes_String(&__thrown, self.get_handle(), position, attributes.get_value(), strParamName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ParameterBuilder(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)
    /**
    Determines whether the given object is equal to this instance.

    - Parameter obj: The object to compare with this  instance.
    - Returns: 
         if  is an instance of  and is equal to this object; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Reflection.MethodInfo GetBaseDefinition()
// docid: M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition
    /**
    Return the base implementation for a method.

    - Returns: The base implementation of this method.

    */
    public override func GetBaseDefinition() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_MethodInfo__GetBaseDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)
    /**
    Returns all the custom attributes defined for this method.

    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the custom attributes.
    - Returns: Returns an array of objects representing all the custom attributes of this method.

    */
    public override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Returns the custom attributes identified by the given type.

    - Parameter attributeType: The custom attribute type.
    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the custom attributes.
    - Returns: Returns an array of objects representing the attributes of this method that are of type .

    */
    public override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Type[] GetGenericArguments()
// docid: M:System.Reflection.Emit.MethodBuilder.GetGenericArguments
    /**
    Returns an array of  objects that represent the type parameters of the method, if it is generic.

    - Returns: An array of  objects representing the type parameters, if the method is generic, or  if the method is not generic.

    */
    public override func GetGenericArguments() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_TypeArray__GetGenericArguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo GetGenericMethodDefinition()
// docid: M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
    /**
    Returns this method.

    - Returns: The current instance of .

    */
    public override func GetGenericMethodDefinition() throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_MethodInfo__GetGenericMethodDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Reflection.Emit.MethodBuilder.GetHashCode
    /**
    Gets the hash code for this method.

    - Returns: The hash code for this method.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Reflection.Emit.ILGenerator GetILGenerator()
// docid: M:System.Reflection.Emit.MethodBuilder.GetILGenerator
    /**
    Returns an  for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.

    - Returns: Returns an  object for this method.

    */
    public func GetILGenerator() throws -> dotnet.System.Reflection.Emit.ILGenerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_ILGenerator__GetILGenerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ILGenerator(hndl : __return);
        }
    }
    // System.Reflection.Emit.ILGenerator GetILGenerator(System.Int32)
// docid: M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
    /**
    Returns an  for this method with the specified Microsoft intermediate language (MSIL) stream size.

    - Parameter size: The size of the MSIL stream, in bytes.
    - Returns: Returns an  object for this method.

    */
    public func GetILGenerator(size : Swift.Int32) throws -> dotnet.System.Reflection.Emit.ILGenerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_ILGenerator__GetILGenerator_0__1__i32(&__thrown, self.get_handle(), size);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ILGenerator(hndl : __return);
        }
    }
    // System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
// docid: M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags
    /**
    Returns the implementation flags for the method.

    - Returns: Returns the implementation flags for the method.

    */
    public override func GetMethodImplementationFlags() throws -> dotnet.System.Reflection.MethodImplAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_MethodImplAttributes__GetMethodImplementationFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodImplAttributes(val: __return);
        }
    }
    // System.Reflection.ParameterInfo[] GetParameters()
// docid: M:System.Reflection.Emit.MethodBuilder.GetParameters
    /**
    Returns the parameters of this method.

    - Returns: An array of  objects that represent the parameters of the method.

    */
    public override func GetParameters() throws -> dotnet.System_Arr<dotnet.System.Reflection.ParameterInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_ParameterInfoArray__GetParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.ParameterInfo>(hndl : __return);
        }
    }
    // System.Object Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)
// docid: M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
    /**
    Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.

    - Parameter obj: The object on which to invoke the specified method. If the method is static, this parameter is ignored.
    - Parameter invokeAttr: This must be a bit flag from  : , , and so on.
    - Parameter binder: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is , the default binder is used. For more details, see .
    - Parameter parameters: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be .
    - Parameter culture: An instance of  used to govern the coercion of types. If this is null, the  for the current thread is used. (Note that this is necessary to, for example, convert a  that represents 1000 to a  value, since 1000 is represented differently by different cultures.)
    - Returns: Returns an object containing the return value of the invoked method.

    */
    public override func Invoke(obj : Optional<dotnet.System.Object>, invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, parameters : Optional<dotnet.System_Arr<dotnet.System.Object>>, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_Object__Invoke_0__5__Object_BindingFlags_Binder_ObjectArray_CultureInfo(&__thrown, self.get_handle(), obj?.get_handle() ?? nil, invokeAttr.get_value(), binder?.get_handle() ?? nil, (parameters?.get_handle()), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Checks if the specified custom attribute type is defined.

    - Parameter attributeType: The custom attribute type.
    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the custom attributes.
    - Returns: 
         if the specified custom attribute type is defined; otherwise, .

    */
    public override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Reflection.MethodInfo MakeGenericMethod(System.Type[])
// docid: M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
    /**
    Returns a generic method constructed from the current generic method definition using the specified generic type arguments.

    - Parameter typeArguments: An array of  objects that represent the type arguments for the generic method.
    - Returns: A  representing the generic method constructed from the current generic method definition using the specified generic type arguments.

    */
    public override func MakeGenericMethod(typeArguments : dotnet.System_Arr<dotnet.System.Type_>) throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_MethodInfo__MakeGenericMethod_0__1__TypeArray(&__thrown, self.get_handle(), typeArguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Sets a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_MethodBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Sets a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to describe the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_MethodBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetImplementationFlags(System.Reflection.MethodImplAttributes)
// docid: M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
    /**
    Sets the implementation flags for this method.

    - Parameter attributes: The implementation flags to set.
    */
    public func SetImplementationFlags(attributes : dotnet.System.Reflection.MethodImplAttributes) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_MethodBuilder_void__SetImplementationFlags_0__1__MethodImplAttributes(&__thrown, self.get_handle(), attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetParameters(System.Type[])
// docid: M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
    /**
    Sets the number and types of parameters for a method.

    - Parameter parameterTypes: An array of  objects representing the parameter types.
    */
    public func SetParameters(parameterTypes : dotnet.System_Arr<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_MethodBuilder_void__SetParameters_0__1__TypeArray(&__thrown, self.get_handle(), parameterTypes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetReturnType(System.Type)
// docid: M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
    /**
    Sets the return type of the method.

    - Parameter returnType: A  object that represents the return type of the method.
    */
    public func SetReturnType(returnType : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_MethodBuilder_void__SetReturnType_0__1__Type(&__thrown, self.get_handle(), returnType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSignature(System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
    /**
    Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.

    - Parameter returnType: The return type of the method.
    - Parameter returnTypeRequiredCustomModifiers: An array of types representing the required custom modifiers, such as , for the return type of the method. If the return type has no required custom modifiers, specify .
    - Parameter returnTypeOptionalCustomModifiers: An array of types representing the optional custom modifiers, such as , for the return type of the method. If the return type has no optional custom modifiers, specify .
    - Parameter parameterTypes: The types of the parameters of the method.
    - Parameter parameterTypeRequiredCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as . If a particular parameter has no required custom modifiers, specify  instead of an array of types. If none of the parameters have required custom modifiers, specify  instead of an array of arrays.
    - Parameter parameterTypeOptionalCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as . If a particular parameter has no optional custom modifiers, specify  instead of an array of types. If none of the parameters have optional custom modifiers, specify  instead of an array of arrays.
    */
    public func SetSignature(returnType : Optional<dotnet.System.Type_>, returnTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, returnTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, parameterTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_MethodBuilder_void__SetSignature_0__6__Type_TypeArray_TypeArray_TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, self.get_handle(), returnType?.get_handle() ?? nil, (returnTypeRequiredCustomModifiers?.get_handle()), (returnTypeOptionalCustomModifiers?.get_handle()), (parameterTypes?.get_handle()), (parameterTypeRequiredCustomModifiers?.get_handle()), (parameterTypeOptionalCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Reflection.Emit.MethodBuilder.ToString
    /**
    Returns this  instance as a string.

    - Returns: Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.MethodAttributes get_Attributes()
// docid: M:System.Reflection.Emit.MethodBuilder.get_Attributes
    public override func get_Attributes() throws -> dotnet.System.Reflection.MethodAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_MethodAttributes__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodAttributes(val: __return);
        }
    }
    // [IsSpecialName] System.Reflection.CallingConventions get_CallingConvention()
// docid: M:System.Reflection.Emit.MethodBuilder.get_CallingConvention
    public override func get_CallingConvention() throws -> dotnet.System.Reflection.CallingConventions {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_CallingConventions__get_CallingConvention_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.CallingConventions(val: __return);
        }
    }
    // [IsSpecialName] bool get_ContainsGenericParameters()
// docid: M:System.Reflection.Emit.MethodBuilder.get_ContainsGenericParameters
    public override func get_ContainsGenericParameters() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__get_ContainsGenericParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_DeclaringType()
// docid: M:System.Reflection.Emit.MethodBuilder.get_DeclaringType
    public override func get_DeclaringType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_Type__get_DeclaringType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_InitLocals()
// docid: M:System.Reflection.Emit.MethodBuilder.get_InitLocals
    public func get_InitLocals() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__get_InitLocals_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_InitLocals(bool)
// docid: M:System.Reflection.Emit.MethodBuilder.set_InitLocals(System.Boolean)
    public func set_InitLocals(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_MethodBuilder_void__set_InitLocals_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsGenericMethod()
// docid: M:System.Reflection.Emit.MethodBuilder.get_IsGenericMethod
    public override func get_IsGenericMethod() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__get_IsGenericMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsGenericMethodDefinition()
// docid: M:System.Reflection.Emit.MethodBuilder.get_IsGenericMethodDefinition
    public override func get_IsGenericMethodDefinition() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__get_IsGenericMethodDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSecurityCritical()
// docid: M:System.Reflection.Emit.MethodBuilder.get_IsSecurityCritical
    public override func get_IsSecurityCritical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__get_IsSecurityCritical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSecuritySafeCritical()
// docid: M:System.Reflection.Emit.MethodBuilder.get_IsSecuritySafeCritical
    public override func get_IsSecuritySafeCritical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__get_IsSecuritySafeCritical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSecurityTransparent()
// docid: M:System.Reflection.Emit.MethodBuilder.get_IsSecurityTransparent
    public override func get_IsSecurityTransparent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_bool__get_IsSecurityTransparent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MetadataToken()
// docid: M:System.Reflection.Emit.MethodBuilder.get_MetadataToken
    public override func get_MetadataToken() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_i32__get_MetadataToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.RuntimeMethodHandle get_MethodHandle()
// docid: M:System.Reflection.Emit.MethodBuilder.get_MethodHandle
    public override func get_MethodHandle() throws -> dotnet.System.RuntimeMethodHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_RuntimeMethodHandle__get_MethodHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.RuntimeMethodHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.Module get_Module()
// docid: M:System.Reflection.Emit.MethodBuilder.get_Module
    public override func get_Module() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_Module__get_Module_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.MethodBuilder.get_Name
    public override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReflectedType()
// docid: M:System.Reflection.Emit.MethodBuilder.get_ReflectedType
    public override func get_ReflectedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_Type__get_ReflectedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.ParameterInfo get_ReturnParameter()
// docid: M:System.Reflection.Emit.MethodBuilder.get_ReturnParameter
    public override func get_ReturnParameter() throws -> dotnet.System.Reflection.ParameterInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_ParameterInfo__get_ReturnParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.ParameterInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReturnType()
// docid: M:System.Reflection.Emit.MethodBuilder.get_ReturnType
    public override func get_ReturnType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_Type__get_ReturnType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.ICustomAttributeProvider get_ReturnTypeCustomAttributes()
// docid: M:System.Reflection.Emit.MethodBuilder.get_ReturnTypeCustomAttributes
    public override func get_ReturnTypeCustomAttributes() throws -> dotnet.System.Reflection.ICustomAttributeProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_MethodBuilder_ICustomAttributeProvider__get_ReturnTypeCustomAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.ICustomAttributeProvider(hndl : __return);
        }
    }
    /**
    Retrieves the attributes for this method.

    */
    public override var Attributes : dotnet.System.Reflection.MethodAttributes {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Returns the calling convention of the method.

    */
    public override var CallingConvention : dotnet.System.Reflection.CallingConventions {
        get {
            return try! get_CallingConvention();
        }
    }
    /**
    Not supported for this type.

    */
    public override var ContainsGenericParameters : Bool {
        get {
            return try! get_ContainsGenericParameters();
        }
    }
    /**
    Returns the type that declares this method.

    */
    public override var DeclaringType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaringType();
        }
    }
    /**
    Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is .

    */
    public var InitLocals : Bool {
        get {
            return try! get_InitLocals();
        }
        set(v) {
            return try! set_InitLocals(value: v);
        }
    }
    /**
    Gets a value indicating whether the method is a generic method.

    */
    public override var IsGenericMethod : Bool {
        get {
            return try! get_IsGenericMethod();
        }
    }
    /**
    Gets a value indicating whether the current  object represents the definition of a generic method.

    */
    public override var IsGenericMethodDefinition : Bool {
        get {
            return try! get_IsGenericMethodDefinition();
        }
    }
    /**
    Throws a  in all cases.

    */
    public override var IsSecurityCritical : Bool {
        get {
            return try! get_IsSecurityCritical();
        }
    }
    /**
    Throws a  in all cases.

    */
    public override var IsSecuritySafeCritical : Bool {
        get {
            return try! get_IsSecuritySafeCritical();
        }
    }
    /**
    Throws a  in all cases.

    */
    public override var IsSecurityTransparent : Bool {
        get {
            return try! get_IsSecurityTransparent();
        }
    }
    public override var MetadataToken : Swift.Int32 {
        get {
            return try! get_MetadataToken();
        }
    }
    /**
    Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.

    */
    public override var MethodHandle : dotnet.System.RuntimeMethodHandle {
        get {
            return try! get_MethodHandle();
        }
    }
    /**
    Gets the module in which the current method is being defined.

    */
    public override var Module : dotnet.System.Reflection.Module {
        get {
            return try! get_Module();
        }
    }
    /**
    Retrieves the name of this method.

    */
    public override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Retrieves the class that was used in reflection to obtain this object.

    */
    public override var ReflectedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReflectedType();
        }
    }
    /**
    Gets a  object that contains information about the return type of the method, such as whether the return type has custom modifiers.

    */
    public override var ReturnParameter : dotnet.System.Reflection.ParameterInfo {
        get {
            return try! get_ReturnParameter();
        }
    }
    /**
    Gets the return type of the method represented by this .

    */
    public override var ReturnType : dotnet.System.Type_ {
        get {
            return try! get_ReturnType();
        }
    }
    /**
    Returns the custom attributes of the method's return type.

    */
    public override var ReturnTypeCustomAttributes : dotnet.System.Reflection.ICustomAttributeProvider {
        get {
            return try! get_ReturnTypeCustomAttributes();
        }
    }
} // MethodBuilder


// type: System.Reflection.Emit.ModuleBuilder
    /**
    Defines and represents a module in a dynamic assembly.

    */
open class ModuleBuilder
    :
    dotnet.System.Reflection.Module
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_ModuleBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void CreateGlobalFunctions()
// docid: M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
    /**
    Completes the global function definitions and global data definitions for this dynamic module.

    */
    open func CreateGlobalFunctions() throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ModuleBuilder_void__CreateGlobalFunctions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Reflection.Emit.EnumBuilder DefineEnum(System.String, System.Reflection.TypeAttributes, System.Type)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
    /**
    Defines an enumeration type that is a value type with a single non-static field called  of the specified type.

    - Parameter name: The full path of the enumeration type.  cannot contain embedded nulls.
    - Parameter visibility: The type attributes for the enumeration. The attributes are any bits defined by .
    - Parameter underlyingType: The underlying type for the enumeration. This must be a built-in integer type.
    - Returns: The defined enumeration.

    */
    open func DefineEnum(name : dotnet.System.String, visibility : dotnet.System.Reflection.TypeAttributes, underlyingType : dotnet.System.Type_) throws -> dotnet.System.Reflection.Emit.EnumBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_EnumBuilder__DefineEnum_0__3__String_TypeAttributes_Type(&__thrown, self.get_handle(), name.get_handle(), visibility.get_value(), underlyingType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.EnumBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
    /**
    Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.

    - Parameter name: The name of the method.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the method.  must include .
    - Parameter callingConvention: The calling convention for the method.
    - Parameter returnType: The return type of the method.
    - Parameter parameterTypes: The types of the method's parameters.
    - Returns: The defined global method.

    */
    open func DefineGlobalMethod(name : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MethodBuilder__DefineGlobalMethod_0__5__String_MethodAttributes_CallingConventions_Type_TypeArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
    /**
    Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.

    - Parameter name: The name of the method.  cannot contain embedded null characters.
    - Parameter attributes: The attributes of the method.  must include .
    - Parameter callingConvention: The calling convention for the method.
    - Parameter returnType: The return type of the method.
    - Parameter requiredReturnTypeCustomModifiers: An array of types representing the required custom modifiers for the return type, such as  or . If the return type has no required custom modifiers, specify .
    - Parameter optionalReturnTypeCustomModifiers: An array of types representing the optional custom modifiers for the return type, such as  or . If the return type has no optional custom modifiers, specify .
    - Parameter parameterTypes: The types of the method's parameters.
    - Parameter requiredParameterTypeCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify  instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify  instead of an array of arrays.
    - Parameter optionalParameterTypeCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify  instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify  instead of an array of arrays.
    - Returns: The defined global method.

    */
    open func DefineGlobalMethod(name : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, requiredReturnTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, optionalReturnTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, requiredParameterTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, optionalParameterTypeCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MethodBuilder__DefineGlobalMethod_0__9__String_MethodAttributes_CallingConventions_Type_TypeArray_TypeArray_TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (requiredReturnTypeCustomModifiers?.get_handle()), (optionalReturnTypeCustomModifiers?.get_handle()), (parameterTypes?.get_handle()), (requiredParameterTypeCustomModifiers?.get_handle()), (optionalParameterTypeCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
    /**
    Defines a global method with the specified name, attributes, return type, and parameter types.

    - Parameter name: The name of the method.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the method.  must include .
    - Parameter returnType: The return type of the method.
    - Parameter parameterTypes: The types of the method's parameters.
    - Returns: The defined global method.

    */
    open func DefineGlobalMethod(name : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MethodBuilder__DefineGlobalMethod_0__4__String_MethodAttributes_Type_TypeArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.FieldBuilder DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
    /**
    Defines an initialized data field in the .sdata section of the portable executable (PE) file.

    - Parameter name: The name used to refer to the data.  cannot contain embedded nulls.
    - Parameter data: The binary large object (BLOB) of data.
    - Parameter attributes: The attributes for the field. The default is .
    - Returns: A field to reference the data.

    */
    open func DefineInitializedData(name : dotnet.System.String, data : dotnet.System_Arr<Swift.UInt8>, attributes : dotnet.System.Reflection.FieldAttributes) throws -> dotnet.System.Reflection.Emit.FieldBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_FieldBuilder__DefineInitializedData_0__3__String_u8Array_FieldAttributes(&__thrown, self.get_handle(), name.get_handle(), data.get_handle(), attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FieldBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
    /**
    Defines a  method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the  flags.

    - Parameter name: The name of the  method.  cannot contain embedded nulls.
    - Parameter dllName: The name of the DLL in which the  method is defined.
    - Parameter attributes: The attributes of the method.
    - Parameter callingConvention: The method's calling convention.
    - Parameter returnType: The method's return type.
    - Parameter parameterTypes: The types of the method's parameters.
    - Parameter nativeCallConv: The native calling convention.
    - Parameter nativeCharSet: The method's native character set.
    - Returns: The defined  method.

    */
    open func DefinePInvokeMethod(name : dotnet.System.String, dllName : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, nativeCallConv : dotnet.System.Runtime.InteropServices.CallingConvention, nativeCharSet : dotnet.System.Runtime.InteropServices.CharSet) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MethodBuilder__DefinePInvokeMethod_0__8__String_String_MethodAttributes_CallingConventions_Type_TypeArray_CallingConvention_CharSet(&__thrown, self.get_handle(), name.get_handle(), dllName.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()), nativeCallConv.get_value(), nativeCharSet.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(System.String, System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
    /**
    Defines a  method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the  flags.

    - Parameter name: The name of the  method.  cannot contain embedded nulls.
    - Parameter dllName: The name of the DLL in which the  method is defined.
    - Parameter entryName: The name of the entry point in the DLL.
    - Parameter attributes: The attributes of the method.
    - Parameter callingConvention: The method's calling convention.
    - Parameter returnType: The method's return type.
    - Parameter parameterTypes: The types of the method's parameters.
    - Parameter nativeCallConv: The native calling convention.
    - Parameter nativeCharSet: The method's native character set.
    - Returns: The defined  method.

    */
    open func DefinePInvokeMethod(name : dotnet.System.String, dllName : dotnet.System.String, entryName : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, nativeCallConv : dotnet.System.Runtime.InteropServices.CallingConvention, nativeCharSet : dotnet.System.Runtime.InteropServices.CharSet) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MethodBuilder__DefinePInvokeMethod_0__9__String_String_String_MethodAttributes_CallingConventions_Type_TypeArray_CallingConvention_CharSet(&__thrown, self.get_handle(), name.get_handle(), dllName.get_handle(), entryName.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()), nativeCallConv.get_value(), nativeCharSet.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineType(System.String)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
    /**
    Constructs a  for a private type with the specified name in this module.

    - Parameter name: The full path of the type, including the namespace.  cannot contain embedded nulls.
    - Returns: A private type with the specified name.

    */
    open func DefineType(name : dotnet.System.String) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_TypeBuilder__DefineType_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineType(System.String, System.Reflection.TypeAttributes)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
    /**
    Constructs a  given the type name and the type attributes.

    - Parameter name: The full path of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the defined type.
    - Returns: A  created with all of the requested attributes.

    */
    open func DefineType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_TypeBuilder__DefineType_0__2__String_TypeAttributes(&__thrown, self.get_handle(), name.get_handle(), attr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineType(System.String, System.Reflection.TypeAttributes, System.Type)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
    /**
    Constructs a  given type name, its attributes, and the type that the defined type extends.

    - Parameter name: The full path of the type.  cannot contain embedded nulls.
    - Parameter attr: The attribute to be associated with the type.
    - Parameter parent: The type that the defined type extends.
    - Returns: A  created with all of the requested attributes.

    */
    open func DefineType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_TypeBuilder__DefineType_0__3__String_TypeAttributes_Type(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
    /**
    Constructs a  given the type name, the attributes, the type that the defined type extends, and the total size of the type.

    - Parameter name: The full path of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the defined type.
    - Parameter parent: The type that the defined type extends.
    - Parameter typesize: The total size of the type.
    - Returns: A  object.

    */
    open func DefineType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>, typesize : Swift.Int32) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_TypeBuilder__DefineType_0__4__String_TypeAttributes_Type_i32(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil, typesize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
    /**
    Constructs a  given the type name, the attributes, the type that the defined type extends, and the packing size of the type.

    - Parameter name: The full path of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the defined type.
    - Parameter parent: The type that the defined type extends.
    - Parameter packsize: The packing size of the type.
    - Returns: A  object.

    */
    open func DefineType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>, packsize : dotnet.System.Reflection.Emit.PackingSize) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_TypeBuilder__DefineType_0__4__String_TypeAttributes_Type_PackingSize(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil, packsize.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize, System.Int32)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
    /**
    Constructs a  given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.

    - Parameter name: The full path of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the defined type.
    - Parameter parent: The type that the defined type extends.
    - Parameter packingSize: The packing size of the type.
    - Parameter typesize: The total size of the type.
    - Returns: A  created with all of the requested attributes.

    */
    open func DefineType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>, packingSize : dotnet.System.Reflection.Emit.PackingSize, typesize : Swift.Int32) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_TypeBuilder__DefineType_0__5__String_TypeAttributes_Type_PackingSize_i32(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil, packingSize.get_value(), typesize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
    /**
    Constructs a  given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.

    - Parameter name: The full path of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes to be associated with the type.
    - Parameter parent: The type that the defined type extends.
    - Parameter interfaces: The list of interfaces that the type implements.
    - Returns: A  created with all of the requested attributes.

    */
    open func DefineType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>, interfaces : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_TypeBuilder__DefineType_0__4__String_TypeAttributes_Type_TypeArray(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil, (interfaces?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.FieldBuilder DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)
// docid: M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
    /**
    Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.

    - Parameter name: The name used to refer to the data.  cannot contain embedded nulls.
    - Parameter size: The size of the data field.
    - Parameter attributes: The attributes for the field.
    - Returns: A field to reference the data.

    */
    open func DefineUninitializedData(name : dotnet.System.String, size : Swift.Int32, attributes : dotnet.System.Reflection.FieldAttributes) throws -> dotnet.System.Reflection.Emit.FieldBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_FieldBuilder__DefineUninitializedData_0__3__String_i32_FieldAttributes(&__thrown, self.get_handle(), name.get_handle(), size, attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FieldBuilder(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
    /**
    Returns a value that indicates whether this instance is equal to the specified object.

    - Parameter obj: An object to compare with this instance, or .
    - Returns: 
         if  equals the type and value of this instance; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Reflection.MethodInfo GetArrayMethod(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
    /**
    Returns the named method on an array class.

    - Parameter arrayClass: An array class.
    - Parameter methodName: The name of a method on the array class.
    - Parameter callingConvention: The method's calling convention.
    - Parameter returnType: The return type of the method.
    - Parameter parameterTypes: The types of the method's parameters.
    - Returns: The named method on an array class.

    */
    open func GetArrayMethod(arrayClass : dotnet.System.Type_, methodName : dotnet.System.String, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MethodInfo__GetArrayMethod_0__5__Type_String_CallingConventions_Type_TypeArray(&__thrown, self.get_handle(), arrayClass.get_handle(), methodName.get_handle(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)
    /**
    Returns all the custom attributes that have been applied to the current .

    - Parameter inherit: This argument is ignored for objects of this type.
    - Returns: An array that contains the custom attributes; the array is empty if there are no attributes.

    */
    open override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Returns all the custom attributes that have been applied to the current , and that derive from a specified attribute type.

    - Parameter attributeType: The base type from which attributes derive.
    - Parameter inherit: This argument is ignored for objects of this type.
    - Returns: An array that contains the custom attributes that are derived, at any level, from ; the array is empty if there are no such attributes.

    */
    open override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData()
// docid: M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData
    /**
    Returns information about the attributes that have been applied to the current , expressed as  objects.

    - Returns: A generic list of  objects representing data about the attributes that have been applied to the current module.

    */
    open override func GetCustomAttributesData() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.CustomAttributeData> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_System_Collections_Generic_IList_System_Reflection_CustomAttributeData___GetCustomAttributesData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Reflection.FieldInfo GetField(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)
    /**
    Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.

    - Parameter name: The field name.
    - Parameter bindingAttr: A combination of the  bit flags used to control the search.
    - Returns: A field that has the specified name and binding attributes, or  if the field does not exist.

    */
    open override func GetField(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_FieldInfo__GetField_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.FieldInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)
    /**
    Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.

    - Parameter bindingFlags: A combination of the  bit flags used to control the search.
    - Returns: An array of fields that match the specified flags; the array is empty if no such fields exist.

    */
    open override func GetFields(bindingFlags : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_FieldInfoArray__GetFields_0__1__BindingFlags(&__thrown, self.get_handle(), bindingFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.FieldInfo>(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Reflection.Emit.ModuleBuilder.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)
    /**
    Returns all the methods that have been defined at the module level for the current , and that match the specified binding flags.

    - Parameter bindingFlags: A combination of  bit flags used to control the search.
    - Returns: An array that contains all the module-level methods that match .

    */
    open override func GetMethods(bindingFlags : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MethodInfoArray__GetMethods_0__1__BindingFlags(&__thrown, self.get_handle(), bindingFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // void GetPEKind(ref System.Reflection.PortableExecutableKinds, ref System.Reflection.ImageFileMachine)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
    /**
    Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.

    - Parameter peKind: When this method returns, a combination of the  values indicating the nature of the code in the module.
    - Parameter machine: When this method returns, one of the  values indicating the platform targeted by the module.
    */
    open override func GetPEKind(peKind : inout dotnet.System.Reflection.PortableExecutableKinds, machine : inout dotnet.System.Reflection.ImageFileMachine) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_peKind = peKind.get_value();
            var _tmp_out_machine = machine.get_value();
        System_Reflection_Emit_ModuleBuilder_void__GetPEKind_0__2__outPortableExecutableKinds_outImageFileMachine(&__thrown, self.get_handle(), &_tmp_out_peKind, &_tmp_out_machine);
        let _tmp2_peKind = dotnet.System.Reflection.PortableExecutableKinds(val: _tmp_out_peKind);
            peKind = _tmp2_peKind;
        let _tmp2_machine = dotnet.System.Reflection.ImageFileMachine(val: _tmp_out_machine);
            machine = _tmp2_machine;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Type GetType(System.String)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)
    /**
    Gets the named type defined in the module.

    - Parameter className: The name of the  to get.
    - Returns: The requested type, if the type is defined in this module; otherwise, .

    */
    open override func GetType(className : dotnet.System.String) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_Type__GetType_0__1__String(&__thrown, self.get_handle(), className.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type GetType(System.String, bool)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)
    /**
    Gets the named type defined in the module, optionally ignoring the case of the type name.

    - Parameter className: The name of the  to get.
    - Parameter ignoreCase: If , the search is case-insensitive. If , the search is case-sensitive.
    - Returns: The requested type, if the type is defined in this module; otherwise, .

    */
    open override func GetType(className : dotnet.System.String, ignoreCase : Bool) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_Type__GetType_0__2__String_bool(&__thrown, self.get_handle(), className.get_handle(), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type GetType(System.String, bool, bool)
// docid: M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)
    /**
    Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.

    - Parameter className: The name of the  to get.
    - Parameter throwOnError: 
         to throw an exception if the type cannot be found;  to return .
    - Parameter ignoreCase: If , the search is case-insensitive. If , the search is case-sensitive.
    - Returns: The specified type, if the type is declared in this module; otherwise, .

    */
    open override func GetType(className : dotnet.System.String, throwOnError : Bool, ignoreCase : Bool) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_Type__GetType_0__3__String_bool_bool(&__thrown, self.get_handle(), className.get_handle(), Swift.Int32(throwOnError ? 1 : 0), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type[] GetTypes()
// docid: M:System.Reflection.Emit.ModuleBuilder.GetTypes
    /**
    Returns all the classes defined within this module.

    - Returns: An array that contains the types defined within the module that is reflected by this instance.

    */
    open override func GetTypes() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_TypeArray__GetTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Returns a value that indicates whether the specified attribute type has been applied to this module.

    - Parameter attributeType: The type of custom attribute to test for.
    - Parameter inherit: This argument is ignored for objects of this type.
    - Returns: 
         if one or more instances of  have been applied to this module; otherwise, .

    */
    open override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsResource()
// docid: M:System.Reflection.Emit.ModuleBuilder.IsResource
    /**
    Gets a value indicating whether the object is a resource.

    - Returns: 
         if the object is a resource; otherwise, .

    */
    open override func IsResource() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_bool__IsResource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Reflection.FieldInfo ResolveField(System.Int32, System.Type[], System.Type[])
// docid: M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])
    /**
    Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.

    - Parameter metadataToken: A metadata token that identifies a field in the module.
    - Parameter genericTypeArguments: An array of  objects representing the generic type arguments of the type where the token is in scope, or  if that type is not generic.
    - Parameter genericMethodArguments: An array of  objects representing the generic type arguments of the method where the token is in scope, or  if that method is not generic.
    - Returns: A  object representing the field that is identified by the specified metadata token.

    */
    open override func ResolveField(metadataToken : Swift.Int32, genericTypeArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>, genericMethodArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> Optional<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_FieldInfo__ResolveField_0__3__i32_TypeArray_TypeArray(&__thrown, self.get_handle(), metadataToken, (genericTypeArguments?.get_handle()), (genericMethodArguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.FieldInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MemberInfo ResolveMember(System.Int32, System.Type[], System.Type[])
// docid: M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])
    /**
    Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.

    - Parameter metadataToken: A metadata token that identifies a type or member in the module.
    - Parameter genericTypeArguments: An array of  objects representing the generic type arguments of the type where the token is in scope, or  if that type is not generic.
    - Parameter genericMethodArguments: An array of  objects representing the generic type arguments of the method where the token is in scope, or  if that method is not generic.
    - Returns: A  object representing the type or member that is identified by the specified metadata token.

    */
    open override func ResolveMember(metadataToken : Swift.Int32, genericTypeArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>, genericMethodArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> Optional<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MemberInfo__ResolveMember_0__3__i32_TypeArray_TypeArray(&__thrown, self.get_handle(), metadataToken, (genericTypeArguments?.get_handle()), (genericMethodArguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MemberInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodBase ResolveMethod(System.Int32, System.Type[], System.Type[])
// docid: M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])
    /**
    Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.

    - Parameter metadataToken: A metadata token that identifies a method or constructor in the module.
    - Parameter genericTypeArguments: An array of  objects representing the generic type arguments of the type where the token is in scope, or  if that type is not generic.
    - Parameter genericMethodArguments: An array of  objects representing the generic type arguments of the method where the token is in scope, or  if that method is not generic.
    - Returns: A  object representing the method that is identified by the specified metadata token.

    */
    open override func ResolveMethod(metadataToken : Swift.Int32, genericTypeArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>, genericMethodArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> Optional<dotnet.System.Reflection.MethodBase> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_MethodBase__ResolveMethod_0__3__i32_TypeArray_TypeArray(&__thrown, self.get_handle(), metadataToken, (genericTypeArguments?.get_handle()), (genericMethodArguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodBase(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] ResolveSignature(System.Int32)
// docid: M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)
    /**
    Returns the signature blob identified by a metadata token.

    - Parameter metadataToken: A metadata token that identifies a signature in the module.
    - Returns: An array of bytes representing the signature blob.

    */
    open override func ResolveSignature(metadataToken : Swift.Int32) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_u8Array__ResolveSignature_0__1__i32(&__thrown, self.get_handle(), metadataToken);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.String ResolveString(System.Int32)
// docid: M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)
    /**
    Returns the string identified by the specified metadata token.

    - Parameter metadataToken: A metadata token that identifies a string in the string heap of the module.
    - Returns: A  containing a string value from the metadata string heap.

    */
    open override func ResolveString(metadataToken : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_String__ResolveString_0__1__i32(&__thrown, self.get_handle(), metadataToken);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Type ResolveType(System.Int32, System.Type[], System.Type[])
// docid: M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])
    /**
    Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.

    - Parameter metadataToken: A metadata token that identifies a type in the module.
    - Parameter genericTypeArguments: An array of  objects representing the generic type arguments of the type where the token is in scope, or  if that type is not generic.
    - Parameter genericMethodArguments: An array of  objects representing the generic type arguments of the method where the token is in scope, or  if that method is not generic.
    - Returns: A  object representing the type that is identified by the specified metadata token.

    */
    open override func ResolveType(metadataToken : Swift.Int32, genericTypeArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>, genericMethodArguments : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_Type__ResolveType_0__3__i32_TypeArray_TypeArray(&__thrown, self.get_handle(), metadataToken, (genericTypeArguments?.get_handle()), (genericMethodArguments?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte BLOB representing the attribute.
    */
    open func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ModuleBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Applies a custom attribute to this module by using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class that specifies the custom attribute to apply.
    */
    open func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_ModuleBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.Assembly get_Assembly()
// docid: M:System.Reflection.Emit.ModuleBuilder.get_Assembly
    open override func get_Assembly() throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_Assembly__get_Assembly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FullyQualifiedName()
// docid: M:System.Reflection.Emit.ModuleBuilder.get_FullyQualifiedName
    open override func get_FullyQualifiedName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_String__get_FullyQualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MDStreamVersion()
// docid: M:System.Reflection.Emit.ModuleBuilder.get_MDStreamVersion
    open override func get_MDStreamVersion() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_i32__get_MDStreamVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_MetadataToken()
// docid: M:System.Reflection.Emit.ModuleBuilder.get_MetadataToken
    open override func get_MetadataToken() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_i32__get_MetadataToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Guid get_ModuleVersionId()
// docid: M:System.Reflection.Emit.ModuleBuilder.get_ModuleVersionId
    open override func get_ModuleVersionId() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_Guid__get_ModuleVersionId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.ModuleBuilder.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ScopeName()
// docid: M:System.Reflection.Emit.ModuleBuilder.get_ScopeName
    open override func get_ScopeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_ModuleBuilder_String__get_ScopeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the dynamic assembly that defined this instance of .

    */
    open override var Assembly : dotnet.System.Reflection.Assembly {
        get {
            return try! get_Assembly();
        }
    }
    /**
    Gets a  representing the fully qualified name and path to this module.

    */
    open override var FullyQualifiedName : dotnet.System.String {
        get {
            return try! get_FullyQualifiedName();
        }
    }
    /**
    Gets the metadata stream version.

    */
    open override var MDStreamVersion : Swift.Int32 {
        get {
            return try! get_MDStreamVersion();
        }
    }
    /**
    Gets a token that identifies the current dynamic module in metadata.

    */
    open override var MetadataToken : Swift.Int32 {
        get {
            return try! get_MetadataToken();
        }
    }
    /**
    Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.

    */
    open override var ModuleVersionId : dotnet.System.Guid {
        get {
            return try! get_ModuleVersionId();
        }
    }
    /**
    A string that indicates that this is an in-memory module.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets a string that represents the name of the dynamic module.

    */
    open override var ScopeName : dotnet.System.String {
        get {
            return try! get_ScopeName();
        }
    }
} // ModuleBuilder


// type: System.Reflection.Emit.PropertyBuilder
    /**
    Defines the properties for a type.

    */
public final class PropertyBuilder
    :
    dotnet.System.Reflection.PropertyInfo
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_PropertyBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddOtherMethod(System.Reflection.Emit.MethodBuilder)
// docid: M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)
    /**
    Adds one of the other methods associated with this property.

    - Parameter mdBuilder: A  object that represents the other method.
    */
    public func AddOtherMethod(mdBuilder : dotnet.System.Reflection.Emit.MethodBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_PropertyBuilder_void__AddOtherMethod_0__1__MethodBuilder(&__thrown, self.get_handle(), mdBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Reflection.MethodInfo[] GetAccessors(bool)
// docid: M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)
    /**
    Returns an array of the public and non-public  and  accessors on this property.

    - Parameter nonPublic: Indicates whether non-public methods should be returned in the  array.  if non-public methods are to be included; otherwise, .
    - Returns: An array of type  containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.

    */
    public override func GetAccessors(nonPublic : Bool) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_MethodInfoArray__GetAccessors_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)
    /**
    Returns an array of all the custom attributes for this property.

    - Parameter inherit: If , walks up this property's inheritance chain to find the custom attributes
    - Returns: An array of all the custom attributes.

    */
    public override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Returns an array of custom attributes identified by .

    - Parameter attributeType: An array of custom attributes identified by type.
    - Parameter inherit: If , walks up this property's inheritance chain to find the custom attributes.
    - Returns: An array of custom attributes defined on this reflected member, or  if no attributes are defined on this member.

    */
    public override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo GetGetMethod(bool)
// docid: M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)
    /**
    Returns the public and non-public get accessor for this property.

    - Parameter nonPublic: Indicates whether non-public get accessors should be returned.  if non-public methods are to be included; otherwise, .
    - Returns: A  object representing the get accessor for this property, if  is . Returns  if  is  and the get accessor is non-public, or if  is  but no get accessors exist.

    */
    public override func GetGetMethod(nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_MethodInfo__GetGetMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.ParameterInfo[] GetIndexParameters()
// docid: M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters
    /**
    Returns an array of all the index parameters for the property.

    - Returns: An array of type  containing the parameters for the indexes.

    */
    public override func GetIndexParameters() throws -> dotnet.System_Arr<dotnet.System.Reflection.ParameterInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_ParameterInfoArray__GetIndexParameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.ParameterInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo GetSetMethod(bool)
// docid: M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)
    /**
    Returns the set accessor for this property.

    - Parameter nonPublic: Indicates whether the accessor should be returned if it is non-public.  if non-public methods are to be included; otherwise, .
    - Returns: The property's  method, or , as shown in the following table.  
  
  Value Condition A  object representing the Set method for this property. The set accessor is public.  
  
  is true and non-public methods can be returned. null is true, but the property is read-only.  
  
  is false and the set accessor is non-public.

    */
    public override func GetSetMethod(nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_MethodInfo__GetSetMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetValue(System.Object, System.Object[])
// docid: M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])
    /**
    Gets the value of the indexed property by calling the property's getter method.

    - Parameter obj: The object whose property value will be returned.
    - Parameter index: Optional index values for indexed properties. This value should be  for non-indexed properties.
    - Returns: The value of the specified indexed property.

    */
    public override func GetValue(obj : Optional<dotnet.System.Object>, index : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_Object__GetValue_0__2__Object_ObjectArray(&__thrown, self.get_handle(), obj?.get_handle() ?? nil, (index?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object GetValue(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)
// docid: M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
    /**
    Gets the value of a property having the specified binding, index, and .

    - Parameter obj: The object whose property value will be returned.
    - Parameter invokeAttr: The invocation attribute. This must be a bit flag from  : , , , , , , or . A suitable invocation attribute must be specified. If a static member is to be invoked, the  flag of  must be set.
    - Parameter binder: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of  objects using reflection. If  is , the default binder is used.
    - Parameter index: Optional index values for indexed properties. This value should be  for non-indexed properties.
    - Parameter culture: The  object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the  method will be called successively in search of a match. If this value is , the  is obtained from the  property.
    - Returns: The property value for .

    */
    public override func GetValue(obj : Optional<dotnet.System.Object>, invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, index : Optional<dotnet.System_Arr<dotnet.System.Object>>, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_Object__GetValue_0__5__Object_BindingFlags_Binder_ObjectArray_CultureInfo(&__thrown, self.get_handle(), obj?.get_handle() ?? nil, invokeAttr.get_value(), binder?.get_handle() ?? nil, (index?.get_handle()), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Indicates whether one or more instance of  is defined on this property.

    - Parameter attributeType: The  object to which the custom attributes are applied.
    - Parameter inherit: Specifies whether to walk up this property's inheritance chain to find the custom attributes.
    - Returns: 
         if one or more instance of  is defined on this property; otherwise .

    */
    public override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SetConstant(System.Object)
// docid: M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)
    /**
    Sets the default value of this property.

    - Parameter defaultValue: The default value of this property.
    */
    public func SetConstant(defaultValue : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_PropertyBuilder_void__SetConstant_0__1__Object(&__thrown, self.get_handle(), defaultValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Set a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_PropertyBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Set a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to define the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_PropertyBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetGetMethod(System.Reflection.Emit.MethodBuilder)
// docid: M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)
    /**
    Sets the method that gets the property value.

    - Parameter mdBuilder: A  object that represents the method that gets the property value.
    */
    public func SetGetMethod(mdBuilder : dotnet.System.Reflection.Emit.MethodBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_PropertyBuilder_void__SetGetMethod_0__1__MethodBuilder(&__thrown, self.get_handle(), mdBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSetMethod(System.Reflection.Emit.MethodBuilder)
// docid: M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)
    /**
    Sets the method that sets the property value.

    - Parameter mdBuilder: A  object that represents the method that sets the property value.
    */
    public func SetSetMethod(mdBuilder : dotnet.System.Reflection.Emit.MethodBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_PropertyBuilder_void__SetSetMethod_0__1__MethodBuilder(&__thrown, self.get_handle(), mdBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.Object, System.Object, System.Object[])
// docid: M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])
    /**
    Sets the value of the property with optional index values for index properties.

    - Parameter obj: The object whose property value will be set.
    - Parameter value: The new value for this property.
    - Parameter index: Optional index values for indexed properties. This value should be  for non-indexed properties.
    */
    public override func SetValue(obj : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>, index : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_PropertyBuilder_void__SetValue_0__3__Object_Object_ObjectArray(&__thrown, self.get_handle(), obj?.get_handle() ?? nil, value?.get_handle() ?? nil, (index?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.Object, System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)
// docid: M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
    /**
    Sets the property value for the given object to the given value.

    - Parameter obj: The object whose property value will be returned.
    - Parameter value: The new value for this property.
    - Parameter invokeAttr: The invocation attribute. This must be a bit flag from  : , , , , , , or . A suitable invocation attribute must be specified. If a static member is to be invoked, the  flag of  must be set.
    - Parameter binder: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of  objects using reflection. If  is , the default binder is used.
    - Parameter index: Optional index values for indexed properties. This value should be  for non-indexed properties.
    - Parameter culture: The  object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the  method will be called successively in search of a match. If this value is , the  is obtained from the  property.
    */
    public override func SetValue(obj : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>, invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, index : Optional<dotnet.System_Arr<dotnet.System.Object>>, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_PropertyBuilder_void__SetValue_0__6__Object_Object_BindingFlags_Binder_ObjectArray_CultureInfo(&__thrown, self.get_handle(), obj?.get_handle() ?? nil, value?.get_handle() ?? nil, invokeAttr.get_value(), binder?.get_handle() ?? nil, (index?.get_handle()), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.PropertyAttributes get_Attributes()
// docid: M:System.Reflection.Emit.PropertyBuilder.get_Attributes
    public override func get_Attributes() throws -> dotnet.System.Reflection.PropertyAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_PropertyAttributes__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.PropertyAttributes(val: __return);
        }
    }
    // [IsSpecialName] bool get_CanRead()
// docid: M:System.Reflection.Emit.PropertyBuilder.get_CanRead
    public override func get_CanRead() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_bool__get_CanRead_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanWrite()
// docid: M:System.Reflection.Emit.PropertyBuilder.get_CanWrite
    public override func get_CanWrite() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_bool__get_CanWrite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_DeclaringType()
// docid: M:System.Reflection.Emit.PropertyBuilder.get_DeclaringType
    public override func get_DeclaringType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_Type__get_DeclaringType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.Module get_Module()
// docid: M:System.Reflection.Emit.PropertyBuilder.get_Module
    public override func get_Module() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_Module__get_Module_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.PropertyBuilder.get_Name
    public override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_PropertyType()
// docid: M:System.Reflection.Emit.PropertyBuilder.get_PropertyType
    public override func get_PropertyType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_Type__get_PropertyType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReflectedType()
// docid: M:System.Reflection.Emit.PropertyBuilder.get_ReflectedType
    public override func get_ReflectedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_PropertyBuilder_Type__get_ReflectedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the attributes for this property.

    */
    public override var Attributes : dotnet.System.Reflection.PropertyAttributes {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets a value indicating whether the property can be read.

    */
    public override var CanRead : Bool {
        get {
            return try! get_CanRead();
        }
    }
    /**
    Gets a value indicating whether the property can be written to.

    */
    public override var CanWrite : Bool {
        get {
            return try! get_CanWrite();
        }
    }
    /**
    Gets the class that declares this member.

    */
    public override var DeclaringType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaringType();
        }
    }
    /**
    Gets the module in which the type that declares the current property is being defined.

    */
    public override var Module : dotnet.System.Reflection.Module {
        get {
            return try! get_Module();
        }
    }
    /**
    Gets the name of this member.

    */
    public override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the type of the field of this property.

    */
    public override var PropertyType : dotnet.System.Type_ {
        get {
            return try! get_PropertyType();
        }
    }
    /**
    Gets the class object that was used to obtain this instance of .

    */
    public override var ReflectedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReflectedType();
        }
    }
} // PropertyBuilder


// type: System.Reflection.Emit.TypeBuilder
    /**
    Defines and creates new instances of classes during run time.

    */
public final class TypeBuilder
    :
    dotnet.System.Reflection.TypeInfo
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Reflection_Emit_TypeBuilder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 UnspecifiedTypeSize
    /**
    Represents that total size for the type is not specified.

    */
    public class var UnspecifiedTypeSize : Swift.Int32 {
        get {
        let __return = System_Reflection_Emit_TypeBuilder_get_UnspecifiedTypeSize();
            return __return;
        }
    }
    // void AddInterfaceImplementation(System.Type)
// docid: M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)
    /**
    Adds an interface that this type implements.

    - Parameter interfaceType: The interface that this type implements.
    */
    public func AddInterfaceImplementation(interfaceType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_TypeBuilder_void__AddInterfaceImplementation_0__1__Type(&__thrown, self.get_handle(), interfaceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Type CreateType()
// docid: M:System.Reflection.Emit.TypeBuilder.CreateType
    /**
    Creates a  object for the class. After defining fields and methods on the class,  is called in order to load its  object.

    - Returns: Returns the new  object for this class.

    */
    public func CreateType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__CreateType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.TypeInfo CreateTypeInfo()
// docid: M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo
    /**
    Gets a  object that represents this type.

    - Returns: An object that represents this type.

    */
    public func CreateTypeInfo() throws -> Optional<dotnet.System.Reflection.TypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeInfo__CreateTypeInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.TypeInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.Emit.ConstructorBuilder DefineConstructor(System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type[])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])
    /**
    Adds a new constructor to the type, with the given attributes and signature.

    - Parameter attributes: The attributes of the constructor.
    - Parameter callingConvention: The calling convention of the constructor.
    - Parameter parameterTypes: The parameter types of the constructor.
    - Returns: The defined constructor.

    */
    public func DefineConstructor(attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.ConstructorBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_ConstructorBuilder__DefineConstructor_0__3__MethodAttributes_CallingConventions_TypeArray(&__thrown, self.get_handle(), attributes.get_value(), callingConvention.get_value(), (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ConstructorBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.ConstructorBuilder DefineConstructor(System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])
    /**
    Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.

    - Parameter attributes: The attributes of the constructor.
    - Parameter callingConvention: The calling convention of the constructor.
    - Parameter parameterTypes: The parameter types of the constructor.
    - Parameter requiredCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as . If a particular parameter has no required custom modifiers, specify  instead of an array of types. If none of the parameters have required custom modifiers, specify  instead of an array of arrays.
    - Parameter optionalCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as . If a particular parameter has no optional custom modifiers, specify  instead of an array of types. If none of the parameters have optional custom modifiers, specify  instead of an array of arrays.
    - Returns: The defined constructor.

    */
    public func DefineConstructor(attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, requiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, optionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws -> dotnet.System.Reflection.Emit.ConstructorBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_ConstructorBuilder__DefineConstructor_0__5__MethodAttributes_CallingConventions_TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, self.get_handle(), attributes.get_value(), callingConvention.get_value(), (parameterTypes?.get_handle()), (requiredCustomModifiers?.get_handle()), (optionalCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ConstructorBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor(System.Reflection.MethodAttributes)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)
    /**
    Defines the parameterless constructor. The constructor defined here will simply call the parameterless constructor of the parent.

    - Parameter attributes: A  object representing the attributes to be applied to the constructor.
    - Returns: Returns the constructor.

    */
    public func DefineDefaultConstructor(attributes : dotnet.System.Reflection.MethodAttributes) throws -> dotnet.System.Reflection.Emit.ConstructorBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_ConstructorBuilder__DefineDefaultConstructor_0__1__MethodAttributes(&__thrown, self.get_handle(), attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ConstructorBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.EventBuilder DefineEvent(System.String, System.Reflection.EventAttributes, System.Type)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)
    /**
    Adds a new event to the type, with the given name, attributes and event type.

    - Parameter name: The name of the event.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the event.
    - Parameter eventtype: The type of the event.
    - Returns: The defined event.

    */
    public func DefineEvent(name : dotnet.System.String, attributes : dotnet.System.Reflection.EventAttributes, eventtype : dotnet.System.Type_) throws -> dotnet.System.Reflection.Emit.EventBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_EventBuilder__DefineEvent_0__3__String_EventAttributes_Type(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), eventtype.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.EventBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.FieldBuilder DefineField(System.String, System.Type, System.Reflection.FieldAttributes)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)
    /**
    Adds a new field to the type, with the given name, attributes, and field type.

    - Parameter fieldName: The name of the field.  cannot contain embedded nulls.
    - Parameter type: The type of the field
    - Parameter attributes: The attributes of the field.
    - Returns: The defined field.

    */
    public func DefineField(fieldName : dotnet.System.String, type : dotnet.System.Type_, attributes : dotnet.System.Reflection.FieldAttributes) throws -> dotnet.System.Reflection.Emit.FieldBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_FieldBuilder__DefineField_0__3__String_Type_FieldAttributes(&__thrown, self.get_handle(), fieldName.get_handle(), type.get_handle(), attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FieldBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.FieldBuilder DefineField(System.String, System.Type, System.Type[], System.Type[], System.Reflection.FieldAttributes)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)
    /**
    Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.

    - Parameter fieldName: The name of the field.  cannot contain embedded nulls.
    - Parameter type: The type of the field
    - Parameter requiredCustomModifiers: An array of types representing the required custom modifiers for the field, such as .
    - Parameter optionalCustomModifiers: An array of types representing the optional custom modifiers for the field, such as .
    - Parameter attributes: The attributes of the field.
    - Returns: The defined field.

    */
    public func DefineField(fieldName : dotnet.System.String, type : dotnet.System.Type_, requiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, optionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, attributes : dotnet.System.Reflection.FieldAttributes) throws -> dotnet.System.Reflection.Emit.FieldBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_FieldBuilder__DefineField_0__5__String_Type_TypeArray_TypeArray_FieldAttributes(&__thrown, self.get_handle(), fieldName.get_handle(), type.get_handle(), (requiredCustomModifiers?.get_handle()), (optionalCustomModifiers?.get_handle()), attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FieldBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(System.String[])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])
    /**
    Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of  objects that can be used to set their constraints.

    - Parameter names: An array of names for the generic type parameters.
    - Returns: An array of  objects that can be used to define the constraints of the generic type parameters for the current type.

    */
    public func DefineGenericParameters(names : dotnet.System_Arr<dotnet.System.String>) throws -> dotnet.System_Arr<dotnet.System.Reflection.Emit.GenericTypeParameterBuilder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_GenericTypeParameterBuilderArray__DefineGenericParameters_0__1__StringArray(&__thrown, self.get_handle(), names.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.Emit.GenericTypeParameterBuilder>(hndl : __return);
        }
    }
    // System.Reflection.Emit.FieldBuilder DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
    /**
    Defines initialized data field in the .sdata section of the portable executable (PE) file.

    - Parameter name: The name used to refer to the data.  cannot contain embedded nulls.
    - Parameter data: The blob of data.
    - Parameter attributes: The attributes for the field.
    - Returns: A field to reference the data.

    */
    public func DefineInitializedData(name : dotnet.System.String, data : dotnet.System_Arr<Swift.UInt8>, attributes : dotnet.System.Reflection.FieldAttributes) throws -> dotnet.System.Reflection.Emit.FieldBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_FieldBuilder__DefineInitializedData_0__3__String_u8Array_FieldAttributes(&__thrown, self.get_handle(), name.get_handle(), data.get_handle(), attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FieldBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefineMethod(System.String, System.Reflection.MethodAttributes)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)
    /**
    Adds a new method to the type, with the specified name and method attributes.

    - Parameter name: The name of the method.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the method.
    - Returns: A  representing the newly defined method.

    */
    public func DefineMethod(name : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBuilder__DefineMethod_0__2__String_MethodAttributes(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)
    /**
    Adds a new method to the type, with the specified name, method attributes, and calling convention.

    - Parameter name: The name of the method.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the method.
    - Parameter callingConvention: The calling convention of the method.
    - Returns: A  representing the newly defined method.

    */
    public func DefineMethod(name : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBuilder__DefineMethod_0__3__String_MethodAttributes_CallingConventions(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), callingConvention.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
    /**
    Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.

    - Parameter name: The name of the method.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the method.
    - Parameter callingConvention: The calling convention of the method.
    - Parameter returnType: The return type of the method.
    - Parameter parameterTypes: The types of the parameters of the method.
    - Returns: A  representing the newly defined method.

    */
    public func DefineMethod(name : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBuilder__DefineMethod_0__5__String_MethodAttributes_CallingConventions_Type_TypeArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
    /**
    Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.

    - Parameter name: The name of the method.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the method.
    - Parameter callingConvention: The calling convention of the method.
    - Parameter returnType: The return type of the method.
    - Parameter returnTypeRequiredCustomModifiers: An array of types representing the required custom modifiers, such as , for the return type of the method. If the return type has no required custom modifiers, specify .
    - Parameter returnTypeOptionalCustomModifiers: An array of types representing the optional custom modifiers, such as , for the return type of the method. If the return type has no optional custom modifiers, specify .
    - Parameter parameterTypes: The types of the parameters of the method.
    - Parameter parameterTypeRequiredCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as . If a particular parameter has no required custom modifiers, specify  instead of an array of types. If none of the parameters have required custom modifiers, specify  instead of an array of arrays.
    - Parameter parameterTypeOptionalCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as . If a particular parameter has no optional custom modifiers, specify  instead of an array of types. If none of the parameters have optional custom modifiers, specify  instead of an array of arrays.
    - Returns: A  object representing the newly added method.

    */
    public func DefineMethod(name : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, returnTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, returnTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, parameterTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBuilder__DefineMethod_0__9__String_MethodAttributes_CallingConventions_Type_TypeArray_TypeArray_TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (returnTypeRequiredCustomModifiers?.get_handle()), (returnTypeOptionalCustomModifiers?.get_handle()), (parameterTypes?.get_handle()), (parameterTypeRequiredCustomModifiers?.get_handle()), (parameterTypeOptionalCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefineMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
    /**
    Adds a new method to the type, with the specified name, method attributes, and method signature.

    - Parameter name: The name of the method.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the method.
    - Parameter returnType: The return type of the method.
    - Parameter parameterTypes: The types of the parameters of the method.
    - Returns: The defined method.

    */
    public func DefineMethod(name : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBuilder__DefineMethod_0__4__String_MethodAttributes_Type_TypeArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // void DefineMethodOverride(System.Reflection.MethodInfo, System.Reflection.MethodInfo)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
    /**
    Specifies a given method body that implements a given method declaration, potentially with a different name.

    - Parameter methodInfoBody: The method body to be used. This should be a  object.
    - Parameter methodInfoDeclaration: The method whose declaration is to be used.
    */
    public func DefineMethodOverride(methodInfoBody : dotnet.System.Reflection.MethodInfo, methodInfoDeclaration : dotnet.System.Reflection.MethodInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_TypeBuilder_void__DefineMethodOverride_0__2__MethodInfo_MethodInfo(&__thrown, self.get_handle(), methodInfoBody.get_handle(), methodInfoDeclaration.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineNestedType(System.String)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)
    /**
    Defines a nested type, given its name.

    - Parameter name: The short name of the type.  cannot contain embedded nulls.
    - Returns: The defined nested type.

    */
    public func DefineNestedType(name : dotnet.System.String) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeBuilder__DefineNestedType_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineNestedType(System.String, System.Reflection.TypeAttributes)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)
    /**
    Defines a nested type, given its name and attributes.

    - Parameter name: The short name of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the type.
    - Returns: The defined nested type.

    */
    public func DefineNestedType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeBuilder__DefineNestedType_0__2__String_TypeAttributes(&__thrown, self.get_handle(), name.get_handle(), attr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)
    /**
    Defines a nested type, given its name, attributes, and the type that it extends.

    - Parameter name: The short name of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the type.
    - Parameter parent: The type that the nested type extends.
    - Returns: The defined nested type.

    */
    public func DefineNestedType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeBuilder__DefineNestedType_0__3__String_TypeAttributes_Type(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
    /**
    Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.

    - Parameter name: The short name of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the type.
    - Parameter parent: The type that the nested type extends.
    - Parameter typeSize: The total size of the type.
    - Returns: The defined nested type.

    */
    public func DefineNestedType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>, typeSize : Swift.Int32) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeBuilder__DefineNestedType_0__4__String_TypeAttributes_Type_i32(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil, typeSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
    /**
    Defines a nested type, given its name, attributes, the type that it extends, and the packing size.

    - Parameter name: The short name of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the type.
    - Parameter parent: The type that the nested type extends.
    - Parameter packSize: The packing size of the type.
    - Returns: The defined nested type.

    */
    public func DefineNestedType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>, packSize : dotnet.System.Reflection.Emit.PackingSize) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeBuilder__DefineNestedType_0__4__String_TypeAttributes_Type_PackingSize(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil, packSize.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize, System.Int32)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
    /**
    Defines a nested type, given its name, attributes, size, and the type that it extends.

    - Parameter name: The short name of the type.  cannot contain embedded null values.
    - Parameter attr: The attributes of the type.
    - Parameter parent: The type that the nested type extends.
    - Parameter packSize: The packing size of the type.
    - Parameter typeSize: The total size of the type.
    - Returns: The defined nested type.

    */
    public func DefineNestedType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>, packSize : dotnet.System.Reflection.Emit.PackingSize, typeSize : Swift.Int32) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeBuilder__DefineNestedType_0__5__String_TypeAttributes_Type_PackingSize_i32(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil, packSize.get_value(), typeSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.TypeBuilder DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
    /**
    Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.

    - Parameter name: The short name of the type.  cannot contain embedded nulls.
    - Parameter attr: The attributes of the type.
    - Parameter parent: The type that the nested type extends.
    - Parameter interfaces: The interfaces that the nested type implements.
    - Returns: The defined nested type.

    */
    public func DefineNestedType(name : dotnet.System.String, attr : dotnet.System.Reflection.TypeAttributes, parent : Optional<dotnet.System.Type_>, interfaces : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.TypeBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeBuilder__DefineNestedType_0__4__String_TypeAttributes_Type_TypeArray(&__thrown, self.get_handle(), name.get_handle(), attr.get_value(), parent?.get_handle() ?? nil, (interfaces?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.TypeBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)
// docid: M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
    /**
    Defines a  method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the  flags.

    - Parameter name: The name of the  method.  cannot contain embedded nulls.
    - Parameter dllName: The name of the DLL in which the  method is defined.
    - Parameter attributes: The attributes of the method.
    - Parameter callingConvention: The method's calling convention.
    - Parameter returnType: The method's return type.
    - Parameter parameterTypes: The types of the method's parameters.
    - Parameter nativeCallConv: The native calling convention.
    - Parameter nativeCharSet: The method's native character set.
    - Returns: The defined  method.

    */
    public func DefinePInvokeMethod(name : dotnet.System.String, dllName : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, nativeCallConv : dotnet.System.Runtime.InteropServices.CallingConvention, nativeCharSet : dotnet.System.Runtime.InteropServices.CharSet) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBuilder__DefinePInvokeMethod_0__8__String_String_MethodAttributes_CallingConventions_Type_TypeArray_CallingConvention_CharSet(&__thrown, self.get_handle(), name.get_handle(), dllName.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()), nativeCallConv.get_value(), nativeCharSet.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(System.String, System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)
// docid: M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
    /**
    Defines a  method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the  flags.

    - Parameter name: The name of the  method.  cannot contain embedded nulls.
    - Parameter dllName: The name of the DLL in which the  method is defined.
    - Parameter entryName: The name of the entry point in the DLL.
    - Parameter attributes: The attributes of the method.
    - Parameter callingConvention: The method's calling convention.
    - Parameter returnType: The method's return type.
    - Parameter parameterTypes: The types of the method's parameters.
    - Parameter nativeCallConv: The native calling convention.
    - Parameter nativeCharSet: The method's native character set.
    - Returns: The defined  method.

    */
    public func DefinePInvokeMethod(name : dotnet.System.String, dllName : dotnet.System.String, entryName : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, nativeCallConv : dotnet.System.Runtime.InteropServices.CallingConvention, nativeCharSet : dotnet.System.Runtime.InteropServices.CharSet) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBuilder__DefinePInvokeMethod_0__9__String_String_String_MethodAttributes_CallingConventions_Type_TypeArray_CallingConvention_CharSet(&__thrown, self.get_handle(), name.get_handle(), dllName.get_handle(), entryName.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (parameterTypes?.get_handle()), nativeCallConv.get_value(), nativeCharSet.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(System.String, System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)
// docid: M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
    /**
    Defines a  method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the  flags, and custom modifiers for the parameters and return type.

    - Parameter name: The name of the  method.  cannot contain embedded nulls.
    - Parameter dllName: The name of the DLL in which the  method is defined.
    - Parameter entryName: The name of the entry point in the DLL.
    - Parameter attributes: The attributes of the method.
    - Parameter callingConvention: The method's calling convention.
    - Parameter returnType: The method's return type.
    - Parameter returnTypeRequiredCustomModifiers: An array of types representing the required custom modifiers, such as , for the return type of the method. If the return type has no required custom modifiers, specify .
    - Parameter returnTypeOptionalCustomModifiers: An array of types representing the optional custom modifiers, such as , for the return type of the method. If the return type has no optional custom modifiers, specify .
    - Parameter parameterTypes: The types of the method's parameters.
    - Parameter parameterTypeRequiredCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as . If a particular parameter has no required custom modifiers, specify  instead of an array of types. If none of the parameters have required custom modifiers, specify  instead of an array of arrays.
    - Parameter parameterTypeOptionalCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as . If a particular parameter has no optional custom modifiers, specify  instead of an array of types. If none of the parameters have optional custom modifiers, specify  instead of an array of arrays.
    - Parameter nativeCallConv: The native calling convention.
    - Parameter nativeCharSet: The method's native character set.
    - Returns: A  representing the defined  method.

    */
    public func DefinePInvokeMethod(name : dotnet.System.String, dllName : dotnet.System.String, entryName : dotnet.System.String, attributes : dotnet.System.Reflection.MethodAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : Optional<dotnet.System.Type_>, returnTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, returnTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, parameterTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, nativeCallConv : dotnet.System.Runtime.InteropServices.CallingConvention, nativeCharSet : dotnet.System.Runtime.InteropServices.CharSet) throws -> dotnet.System.Reflection.Emit.MethodBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBuilder__DefinePInvokeMethod_0__13__String_String_String_MethodAttributes_CallingConventions_Type_TypeArray_TypeArray_TypeArray_TypeArrayArray_TypeArrayArray_CallingConvention_CharSet(&__thrown, self.get_handle(), name.get_handle(), dllName.get_handle(), entryName.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType?.get_handle() ?? nil, (returnTypeRequiredCustomModifiers?.get_handle()), (returnTypeOptionalCustomModifiers?.get_handle()), (parameterTypes?.get_handle()), (parameterTypeRequiredCustomModifiers?.get_handle()), (parameterTypeOptionalCustomModifiers?.get_handle()), nativeCallConv.get_value(), nativeCharSet.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.MethodBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.PropertyBuilder DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
    /**
    Adds a new property to the type, with the given name, attributes, calling convention, and property signature.

    - Parameter name: The name of the property.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the property.
    - Parameter callingConvention: The calling convention of the property accessors.
    - Parameter returnType: The return type of the property.
    - Parameter parameterTypes: The types of the parameters of the property.
    - Returns: The defined property.

    */
    public func DefineProperty(name : dotnet.System.String, attributes : dotnet.System.Reflection.PropertyAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : dotnet.System.Type_, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.PropertyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_PropertyBuilder__DefineProperty_0__5__String_PropertyAttributes_CallingConventions_Type_TypeArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType.get_handle(), (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.PropertyBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.PropertyBuilder DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
    /**
    Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.

    - Parameter name: The name of the property.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the property.
    - Parameter callingConvention: The calling convention of the property accessors.
    - Parameter returnType: The return type of the property.
    - Parameter returnTypeRequiredCustomModifiers: An array of types representing the required custom modifiers, such as , for the return type of the property. If the return type has no required custom modifiers, specify .
    - Parameter returnTypeOptionalCustomModifiers: An array of types representing the optional custom modifiers, such as , for the return type of the property. If the return type has no optional custom modifiers, specify .
    - Parameter parameterTypes: The types of the parameters of the property.
    - Parameter parameterTypeRequiredCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as . If a particular parameter has no required custom modifiers, specify  instead of an array of types. If none of the parameters have required custom modifiers, specify  instead of an array of arrays.
    - Parameter parameterTypeOptionalCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as . If a particular parameter has no optional custom modifiers, specify  instead of an array of types. If none of the parameters have optional custom modifiers, specify  instead of an array of arrays.
    - Returns: The defined property.

    */
    public func DefineProperty(name : dotnet.System.String, attributes : dotnet.System.Reflection.PropertyAttributes, callingConvention : dotnet.System.Reflection.CallingConventions, returnType : dotnet.System.Type_, returnTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, returnTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, parameterTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws -> dotnet.System.Reflection.Emit.PropertyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_PropertyBuilder__DefineProperty_0__9__String_PropertyAttributes_CallingConventions_Type_TypeArray_TypeArray_TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), callingConvention.get_value(), returnType.get_handle(), (returnTypeRequiredCustomModifiers?.get_handle()), (returnTypeOptionalCustomModifiers?.get_handle()), (parameterTypes?.get_handle()), (parameterTypeRequiredCustomModifiers?.get_handle()), (parameterTypeOptionalCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.PropertyBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.PropertyBuilder DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Type, System.Type[])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])
    /**
    Adds a new property to the type, with the given name and property signature.

    - Parameter name: The name of the property.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the property.
    - Parameter returnType: The return type of the property.
    - Parameter parameterTypes: The types of the parameters of the property.
    - Returns: The defined property.

    */
    public func DefineProperty(name : dotnet.System.String, attributes : dotnet.System.Reflection.PropertyAttributes, returnType : dotnet.System.Type_, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws -> dotnet.System.Reflection.Emit.PropertyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_PropertyBuilder__DefineProperty_0__4__String_PropertyAttributes_Type_TypeArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), returnType.get_handle(), (parameterTypes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.PropertyBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.PropertyBuilder DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
// docid: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
    /**
    Adds a new property to the type, with the given name, property signature, and custom modifiers.

    - Parameter name: The name of the property.  cannot contain embedded nulls.
    - Parameter attributes: The attributes of the property.
    - Parameter returnType: The return type of the property.
    - Parameter returnTypeRequiredCustomModifiers: An array of types representing the required custom modifiers, such as , for the return type of the property. If the return type has no required custom modifiers, specify .
    - Parameter returnTypeOptionalCustomModifiers: An array of types representing the optional custom modifiers, such as , for the return type of the property. If the return type has no optional custom modifiers, specify .
    - Parameter parameterTypes: The types of the parameters of the property.
    - Parameter parameterTypeRequiredCustomModifiers: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as . If a particular parameter has no required custom modifiers, specify  instead of an array of types. If none of the parameters have required custom modifiers, specify  instead of an array of arrays.
    - Parameter parameterTypeOptionalCustomModifiers: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as . If a particular parameter has no optional custom modifiers, specify  instead of an array of types. If none of the parameters have optional custom modifiers, specify  instead of an array of arrays.
    - Returns: The defined property.

    */
    public func DefineProperty(name : dotnet.System.String, attributes : dotnet.System.Reflection.PropertyAttributes, returnType : dotnet.System.Type_, returnTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, returnTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, parameterTypeRequiredCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>, parameterTypeOptionalCustomModifiers : Optional<dotnet.System_Arr<dotnet.System_Arr<dotnet.System.Type_>>>) throws -> dotnet.System.Reflection.Emit.PropertyBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_PropertyBuilder__DefineProperty_0__8__String_PropertyAttributes_Type_TypeArray_TypeArray_TypeArray_TypeArrayArray_TypeArrayArray(&__thrown, self.get_handle(), name.get_handle(), attributes.get_value(), returnType.get_handle(), (returnTypeRequiredCustomModifiers?.get_handle()), (returnTypeOptionalCustomModifiers?.get_handle()), (parameterTypes?.get_handle()), (parameterTypeRequiredCustomModifiers?.get_handle()), (parameterTypeOptionalCustomModifiers?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.PropertyBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer()
// docid: M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer
    /**
    Defines the initializer for this type.

    - Returns: Returns a type initializer.

    */
    public func DefineTypeInitializer() throws -> dotnet.System.Reflection.Emit.ConstructorBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_ConstructorBuilder__DefineTypeInitializer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.ConstructorBuilder(hndl : __return);
        }
    }
    // System.Reflection.Emit.FieldBuilder DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)
// docid: M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
    /**
    Defines an uninitialized data field in the  section of the portable executable (PE) file.

    - Parameter name: The name used to refer to the data.  cannot contain embedded nulls.
    - Parameter size: The size of the data field.
    - Parameter attributes: The attributes for the field.
    - Returns: A field to reference the data.

    */
    public func DefineUninitializedData(name : dotnet.System.String, size : Swift.Int32, attributes : dotnet.System.Reflection.FieldAttributes) throws -> dotnet.System.Reflection.Emit.FieldBuilder {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_FieldBuilder__DefineUninitializedData_0__3__String_i32_FieldAttributes(&__thrown, self.get_handle(), name.get_handle(), size, attributes.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.FieldBuilder(hndl : __return);
        }
    }
    // System.Reflection.ConstructorInfo GetConstructor(System.Type, System.Reflection.ConstructorInfo)
// docid: M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)
    /**
    Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.

    - Parameter type: The constructed generic type whose constructor is returned.
    - Parameter constructor: A constructor on the generic type definition of , which specifies which constructor of  to return.
    - Returns: A  object that represents the constructor of  corresponding to , which specifies a constructor belonging to the generic type definition of .

    */
    public class func GetConstructor(type : dotnet.System.Type_, constructor : dotnet.System.Reflection.ConstructorInfo) throws -> dotnet.System.Reflection.ConstructorInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_ConstructorInfo__GetConstructor_0__2__Type_ConstructorInfo(&__thrown, type.get_handle(), constructor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.ConstructorInfo(hndl : __return);
        }
    }
    // System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)
    /**
    Returns an array of  objects representing the public and non-public constructors defined for this class, as specified.

    - Parameter bindingAttr: This must be a bit flag from  as in , , and so on.
    - Returns: Returns an array of  objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.

    */
    public override func GetConstructors(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_ConstructorInfoArray__GetConstructors_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.ConstructorInfo>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)
    /**
    Returns all the custom attributes defined for this type.

    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the attributes.
    - Returns: Returns an array of objects representing all the custom attributes of this type.

    */
    public override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)
    /**
    Returns all the custom attributes of the current type that are assignable to a specified type.

    - Parameter attributeType: The type of attribute to search for. Only attributes that are assignable to this type are returned.
    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the attributes.
    - Returns: An array of custom attributes defined on the current type.

    */
    public override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Type GetElementType()
// docid: M:System.Reflection.Emit.TypeBuilder.GetElementType
    /**
    Calling this method always throws .

    - Returns: This method is not supported. No value is returned.

    */
    public override func GetElementType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__GetElementType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Reflection.EventInfo GetEvent(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
    /**
    Returns the event with the specified name.

    - Parameter name: The name of the event to search for.
    - Parameter bindingAttr: A bitwise combination of  values that limits the search.
    - Returns: An  object representing the event declared or inherited by this type with the specified name, or  if there are no matches.

    */
    public override func GetEvent(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_EventInfo__GetEvent_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.EventInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.EventInfo[] GetEvents()
// docid: M:System.Reflection.Emit.TypeBuilder.GetEvents
    /**
    Returns the public events declared or inherited by this type.

    - Returns: Returns an array of  objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.

    */
    public override func GetEvents() throws -> dotnet.System_Arr<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_EventInfoArray__GetEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.EventInfo>(hndl : __return);
        }
    }
    // System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)
    /**
    Returns the public and non-public events that are declared by this type.

    - Parameter bindingAttr: A bitwise combination of  values that limits the search.
    - Returns: Returns an array of  objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.

    */
    public override func GetEvents(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.EventInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_EventInfoArray__GetEvents_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.EventInfo>(hndl : __return);
        }
    }
    // System.Reflection.FieldInfo GetField(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)
    /**
    Returns the field specified by the given name.

    - Parameter name: The name of the field to get.
    - Parameter bindingAttr: This must be a bit flag from  as in , , and so on.
    - Returns: Returns the  object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then  is returned.

    */
    public override func GetField(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_FieldInfo__GetField_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.FieldInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.FieldInfo GetField(System.Type, System.Reflection.FieldInfo)
// docid: M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)
    /**
    Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.

    - Parameter type: The constructed generic type whose field is returned.
    - Parameter field: A field on the generic type definition of , which specifies which field of  to return.
    - Returns: A  object that represents the field of  corresponding to , which specifies a field belonging to the generic type definition of .

    */
    public class func GetField(type : dotnet.System.Type_, field : dotnet.System.Reflection.FieldInfo) throws -> dotnet.System.Reflection.FieldInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_FieldInfo__GetField_0__2__Type_FieldInfo(&__thrown, type.get_handle(), field.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.FieldInfo(hndl : __return);
        }
    }
    // System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)
    /**
    Returns the public and non-public fields that are declared by this type.

    - Parameter bindingAttr: This must be a bit flag from  : , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.

    */
    public override func GetFields(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.FieldInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_FieldInfoArray__GetFields_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.FieldInfo>(hndl : __return);
        }
    }
    // System.Type[] GetGenericArguments()
// docid: M:System.Reflection.Emit.TypeBuilder.GetGenericArguments
    /**
    Returns an array of  objects representing the type arguments of a generic type or the type parameters of a generic type definition.

    - Returns: An array of  objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.

    */
    public override func GetGenericArguments() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeArray__GetGenericArguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Type GetGenericTypeDefinition()
// docid: M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition
    /**
    Returns a  object that represents a generic type definition from which the current type can be obtained.

    - Returns: A  object representing a generic type definition from which the current type can be obtained.

    */
    public override func GetGenericTypeDefinition() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__GetGenericTypeDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type GetInterface(System.String, bool)
// docid: M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)
    /**
    Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.

    - Parameter name: The name of the interface.
    - Parameter ignoreCase: If , the search is case-insensitive. If , the search is case-sensitive.
    - Returns: Returns a  object representing the implemented interface. Returns null if no interface matching name is found.

    */
    public override func GetInterface(name : dotnet.System.String, ignoreCase : Bool) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__GetInterface_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.InterfaceMapping GetInterfaceMap(System.Type)
// docid: M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)
    /**
    Returns an interface mapping for the requested interface.

    - Parameter interfaceType: The  of the interface for which the mapping is to be retrieved.
    - Returns: Returns the requested interface mapping.

    */
    public override func GetInterfaceMap(interfaceType : dotnet.System.Type_) throws -> dotnet.System.Reflection.InterfaceMapping {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_InterfaceMapping__GetInterfaceMap_0__1__Type(&__thrown, self.get_handle(), interfaceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.InterfaceMapping(hndl : __return);
        }
    }
    // System.Type[] GetInterfaces()
// docid: M:System.Reflection.Emit.TypeBuilder.GetInterfaces
    /**
    Returns an array of all the interfaces implemented on this type and its base types.

    - Returns: Returns an array of  objects representing the implemented interfaces. If none are defined, an empty array is returned.

    */
    public override func GetInterfaces() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeArray__GetInterfaces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
    /**
    Returns all the public and non-public members declared or inherited by this type, as specified.

    - Parameter name: The name of the member.
    - Parameter type: The type of the member to return.
    - Parameter bindingAttr: This must be a bit flag from , as in , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public members defined on this type if  is used; otherwise, only the public members are returned.

    */
    public override func GetMember(name : dotnet.System.String, type : dotnet.System.Reflection.MemberTypes, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MemberInfoArray__GetMember_0__3__String_MemberTypes_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), type.get_value(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)
    /**
    Returns the members for the public and non-public members declared or inherited by this type.

    - Parameter bindingAttr: This must be a bit flag from , such as , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.

    */
    public override func GetMembers(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MemberInfoArray__GetMembers_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo GetMethod(System.Type, System.Reflection.MethodInfo)
// docid: M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)
    /**
    Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.

    - Parameter type: The constructed generic type whose method is returned.
    - Parameter method: A method on the generic type definition of , which specifies which method of  to return.
    - Returns: A  object that represents the method of  corresponding to , which specifies a method belonging to the generic type definition of .

    */
    public class func GetMethod(type : dotnet.System.Type_, method : dotnet.System.Reflection.MethodInfo) throws -> dotnet.System.Reflection.MethodInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodInfo__GetMethod_0__2__Type_MethodInfo(&__thrown, type.get_handle(), method.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.MethodInfo(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)
    /**
    Returns all the public and non-public methods declared or inherited by this type, as specified.

    - Parameter bindingAttr: This must be a bit flag from  as in , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public methods defined on this type if  is used; otherwise, only the public methods are returned.

    */
    public override func GetMethods(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodInfoArray__GetMethods_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Type GetNestedType(System.String, System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
    /**
    Returns the public and non-public nested types that are declared by this type.

    - Parameter name: The  containing the name of the nested type to get.
    - Parameter bindingAttr: A bitmask comprised of one or more  that specify how the search is conducted.  
  
 -or-  
  
 Zero, to conduct a case-sensitive search for public methods.
    - Returns: A  object representing the nested type that matches the specified requirements, if found; otherwise, .

    */
    public override func GetNestedType(name : dotnet.System.String, bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__GetNestedType_0__2__String_BindingFlags(&__thrown, self.get_handle(), name.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type[] GetNestedTypes(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)
    /**
    Returns the public and non-public nested types that are declared or inherited by this type.

    - Parameter bindingAttr: This must be a bit flag from , as in , , and so on.
    - Returns: An array of  objects representing all the types nested within the current  that match the specified binding constraints.  
  
 An empty array of type , if no types are nested within the current , or if none of the nested types match the binding constraints.

    */
    public override func GetNestedTypes(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_TypeArray__GetNestedTypes_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags)
// docid: M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)
    /**
    Returns all the public and non-public properties declared or inherited by this type, as specified.

    - Parameter bindingAttr: This invocation attribute. This must be a bit flag from  : , , and so on.
    - Returns: Returns an array of  objects representing the public and non-public properties defined on this type if  is used; otherwise, only the public properties are returned.

    */
    public override func GetProperties(bindingAttr : dotnet.System.Reflection.BindingFlags) throws -> dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_PropertyInfoArray__GetProperties_0__1__BindingFlags(&__thrown, self.get_handle(), bindingAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.PropertyInfo>(hndl : __return);
        }
    }
    // System.Object InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])
// docid: M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
    /**
    Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.

    - Parameter name: The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.
    - Parameter invokeAttr: The invocation attribute. This must be a bit flag from .
    - Parameter binder: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of  objects using reflection. If binder is , the default binder is used. See .
    - Parameter target: The object on which to invoke the specified member. If the member is static, this parameter is ignored.
    - Parameter args: An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.
    - Parameter modifiers: An array of the same length as  with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.
    - Parameter culture: An instance of  used to govern the coercion of types. If this is null, the  for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)
    - Parameter namedParameters: Each parameter in the  array gets the value in the corresponding element in the  array. If the length of  is greater than the length of , the remaining argument values are passed in order.
    - Returns: Returns the return value of the invoked member.

    */
    public override func InvokeMember(name : dotnet.System.String, invokeAttr : dotnet.System.Reflection.BindingFlags, binder : Optional<dotnet.System.Reflection.Binder>, target : Optional<dotnet.System.Object>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, modifiers : Optional<dotnet.System_Arr<dotnet.System.Reflection.ParameterModifier>>, culture : Optional<dotnet.System.Globalization.CultureInfo>, namedParameters : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Object__InvokeMember_0__8__String_BindingFlags_Binder_Object_ObjectArray_ParameterModifierArray_CultureInfo_StringArray(&__thrown, self.get_handle(), name.get_handle(), invokeAttr.get_value(), binder?.get_handle() ?? nil, target?.get_handle() ?? nil, (args?.get_handle()), (modifiers?.get_handle()), culture?.get_handle() ?? nil, (namedParameters?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsAssignableFrom(System.Reflection.TypeInfo)
// docid: M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
    public override func IsAssignableFrom(typeInfo : Optional<dotnet.System.Reflection.TypeInfo>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__IsAssignableFrom_0__1__TypeInfo(&__thrown, self.get_handle(), typeInfo?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsAssignableFrom(System.Type)
// docid: M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)
    /**
    Gets a value that indicates whether a specified  can be assigned to this object.

    - Parameter c: The object to test.
    - Returns: 
         if the  parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of , or if the current type is an interface that  supports.  if none of these conditions are valid, or if  is .

    */
    public override func IsAssignableFrom(c : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__IsAssignableFrom_0__1__Type(&__thrown, self.get_handle(), c?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsCreated()
// docid: M:System.Reflection.Emit.TypeBuilder.IsCreated
    /**
    Returns a value that indicates whether the current dynamic type has been created.

    - Returns: 
         if the  method has been called; otherwise, .

    */
    public func IsCreated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__IsCreated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)
    /**
    Determines whether a custom attribute is applied to the current type.

    - Parameter attributeType: The type of attribute to search for. Only attributes that are assignable to this type are returned.
    - Parameter inherit: Specifies whether to search this member's inheritance chain to find the attributes.
    - Returns: 
         if one or more instances of , or an attribute derived from , is defined on this type; otherwise, .

    */
    public override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsSubclassOf(System.Type)
// docid: M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)
    /**
    Determines whether this type is derived from a specified type.

    - Parameter c: A  that is to be checked.
    - Returns: Read-only. Returns  if this type is the same as the type , or is a subtype of type ; otherwise, .

    */
    public override func IsSubclassOf(c : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__IsSubclassOf_0__1__Type(&__thrown, self.get_handle(), c.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Type MakeArrayType()
// docid: M:System.Reflection.Emit.TypeBuilder.MakeArrayType
    /**
    Returns a  object that represents a one-dimensional array of the current type, with a lower bound of zero.

    - Returns: A  object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.

    */
    public override func MakeArrayType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__MakeArrayType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakeArrayType(System.Int32)
// docid: M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)
    /**
    Returns a  object that represents an array of the current type, with the specified number of dimensions.

    - Parameter rank: The number of dimensions for the array.
    - Returns: A  object that represents a one-dimensional array of the current type.

    */
    public override func MakeArrayType(rank : Swift.Int32) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__MakeArrayType_0__1__i32(&__thrown, self.get_handle(), rank);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakeByRefType()
// docid: M:System.Reflection.Emit.TypeBuilder.MakeByRefType
    /**
    Returns a  object that represents the current type when passed as a  parameter ( in Visual Basic).

    - Returns: A  object that represents the current type when passed as a  parameter ( in Visual Basic).

    */
    public override func MakeByRefType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__MakeByRefType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakeGenericType(System.Type[])
// docid: M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])
    /**
    Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.

    - Parameter typeArguments: An array of types to be substituted for the type parameters of the current generic type definition.
    - Returns: A  representing the constructed type formed by substituting the elements of  for the type parameters of the current generic type.

    */
    public override func MakeGenericType(typeArguments : dotnet.System_Arr<dotnet.System.Type_>) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__MakeGenericType_0__1__TypeArray(&__thrown, self.get_handle(), typeArguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type MakePointerType()
// docid: M:System.Reflection.Emit.TypeBuilder.MakePointerType
    /**
    Returns a  object that represents the type of an unmanaged pointer to the current type.

    - Returns: A  object that represents the type of an unmanaged pointer to the current type.

    */
    public override func MakePointerType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__MakePointerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // void SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
// docid: M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
    /**
    Sets a custom attribute using a specified custom attribute blob.

    - Parameter con: The constructor for the custom attribute.
    - Parameter binaryAttribute: A byte blob representing the attributes.
    */
    public func SetCustomAttribute(con : dotnet.System.Reflection.ConstructorInfo, binaryAttribute : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_TypeBuilder_void__SetCustomAttribute_0__2__ConstructorInfo_u8Array(&__thrown, self.get_handle(), con.get_handle(), binaryAttribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
// docid: M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
    /**
    Set a custom attribute using a custom attribute builder.

    - Parameter customBuilder: An instance of a helper class to define the custom attribute.
    */
    public func SetCustomAttribute(customBuilder : dotnet.System.Reflection.Emit.CustomAttributeBuilder) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_TypeBuilder_void__SetCustomAttribute_0__1__CustomAttributeBuilder(&__thrown, self.get_handle(), customBuilder.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetParent(System.Type)
// docid: M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)
    /**
    Sets the base type of the type currently under construction.

    - Parameter parent: The new base type.
    */
    public func SetParent(parent : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Reflection_Emit_TypeBuilder_void__SetParent_0__1__Type(&__thrown, self.get_handle(), parent?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Reflection.Emit.TypeBuilder.ToString
    /**
    Returns the name of the type excluding the namespace.

    - Returns: Read-only. The name of the type excluding the namespace.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Reflection.Assembly get_Assembly()
// docid: M:System.Reflection.Emit.TypeBuilder.get_Assembly
    public override func get_Assembly() throws -> dotnet.System.Reflection.Assembly {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Assembly__get_Assembly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Assembly(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AssemblyQualifiedName()
// docid: M:System.Reflection.Emit.TypeBuilder.get_AssemblyQualifiedName
    public override func get_AssemblyQualifiedName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_String__get_AssemblyQualifiedName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_BaseType()
// docid: M:System.Reflection.Emit.TypeBuilder.get_BaseType
    public override func get_BaseType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__get_BaseType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.MethodBase get_DeclaringMethod()
// docid: M:System.Reflection.Emit.TypeBuilder.get_DeclaringMethod
    public override func get_DeclaringMethod() throws -> Optional<dotnet.System.Reflection.MethodBase> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_MethodBase__get_DeclaringMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodBase(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_DeclaringType()
// docid: M:System.Reflection.Emit.TypeBuilder.get_DeclaringType
    public override func get_DeclaringType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__get_DeclaringType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_FullName()
// docid: M:System.Reflection.Emit.TypeBuilder.get_FullName
    public override func get_FullName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_String__get_FullName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.GenericParameterAttributes get_GenericParameterAttributes()
// docid: M:System.Reflection.Emit.TypeBuilder.get_GenericParameterAttributes
    public override func get_GenericParameterAttributes() throws -> dotnet.System.Reflection.GenericParameterAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_GenericParameterAttributes__get_GenericParameterAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.GenericParameterAttributes(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_GenericParameterPosition()
// docid: M:System.Reflection.Emit.TypeBuilder.get_GenericParameterPosition
    public override func get_GenericParameterPosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_i32__get_GenericParameterPosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Guid get_GUID()
// docid: M:System.Reflection.Emit.TypeBuilder.get_GUID
    public override func get_GUID() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Guid__get_GUID_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsByRefLike()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsByRefLike
    public override func get_IsByRefLike() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsByRefLike_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsConstructedGenericType()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsConstructedGenericType
    public override func get_IsConstructedGenericType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsConstructedGenericType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsGenericParameter()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsGenericParameter
    public override func get_IsGenericParameter() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsGenericParameter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsGenericType()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsGenericType
    public override func get_IsGenericType() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsGenericType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsGenericTypeDefinition()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsGenericTypeDefinition
    public override func get_IsGenericTypeDefinition() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsGenericTypeDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSecurityCritical()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsSecurityCritical
    public override func get_IsSecurityCritical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsSecurityCritical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSecuritySafeCritical()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsSecuritySafeCritical
    public override func get_IsSecuritySafeCritical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsSecuritySafeCritical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSecurityTransparent()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsSecurityTransparent
    public override func get_IsSecurityTransparent() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsSecurityTransparent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSZArray()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsSZArray
    public override func get_IsSZArray() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsSZArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsTypeDefinition()
// docid: M:System.Reflection.Emit.TypeBuilder.get_IsTypeDefinition
    public override func get_IsTypeDefinition() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_bool__get_IsTypeDefinition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_MetadataToken()
// docid: M:System.Reflection.Emit.TypeBuilder.get_MetadataToken
    public override func get_MetadataToken() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_i32__get_MetadataToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Reflection.Module get_Module()
// docid: M:System.Reflection.Emit.TypeBuilder.get_Module
    public override func get_Module() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Module__get_Module_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Reflection.Emit.TypeBuilder.get_Name
    public override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Namespace()
// docid: M:System.Reflection.Emit.TypeBuilder.get_Namespace
    public override func get_Namespace() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_String__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Reflection.Emit.PackingSize get_PackingSize()
// docid: M:System.Reflection.Emit.TypeBuilder.get_PackingSize
    public func get_PackingSize() throws -> dotnet.System.Reflection.Emit.PackingSize {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_PackingSize__get_PackingSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Emit.PackingSize(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_ReflectedType()
// docid: M:System.Reflection.Emit.TypeBuilder.get_ReflectedType
    public override func get_ReflectedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__get_ReflectedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_Size()
// docid: M:System.Reflection.Emit.TypeBuilder.get_Size
    public func get_Size() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_i32__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.RuntimeTypeHandle get_TypeHandle()
// docid: M:System.Reflection.Emit.TypeBuilder.get_TypeHandle
    public override func get_TypeHandle() throws -> dotnet.System.RuntimeTypeHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_RuntimeTypeHandle__get_TypeHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.RuntimeTypeHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_UnderlyingSystemType()
// docid: M:System.Reflection.Emit.TypeBuilder.get_UnderlyingSystemType
    public override func get_UnderlyingSystemType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_Emit_TypeBuilder_Type__get_UnderlyingSystemType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Retrieves the dynamic assembly that contains this type definition.

    */
    public override var Assembly : dotnet.System.Reflection.Assembly {
        get {
            return try! get_Assembly();
        }
    }
    /**
    Returns the full name of this type qualified by the display name of the assembly.

    */
    public override var AssemblyQualifiedName : Optional<dotnet.System.String> {
        get {
            return try! get_AssemblyQualifiedName();
        }
    }
    /**
    Retrieves the base type of this type.

    */
    public override var BaseType : Optional<dotnet.System.Type_> {
        get {
            return try! get_BaseType();
        }
    }
    /**
    Gets the method that declared the current generic type parameter.

    */
    public override var DeclaringMethod : Optional<dotnet.System.Reflection.MethodBase> {
        get {
            return try! get_DeclaringMethod();
        }
    }
    /**
    Returns the type that declared this type.

    */
    public override var DeclaringType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaringType();
        }
    }
    /**
    Retrieves the full path of this type.

    */
    public override var FullName : Optional<dotnet.System.String> {
        get {
            return try! get_FullName();
        }
    }
    /**
    Retrieves the GUID of this type.

    */
    public override var GUID : dotnet.System.Guid {
        get {
            return try! get_GUID();
        }
    }
    /**
    Gets a value that indicates the covariance and special constraints of the current generic type parameter.

    */
    public override var GenericParameterAttributes : dotnet.System.Reflection.GenericParameterAttributes {
        get {
            return try! get_GenericParameterAttributes();
        }
    }
    /**
    Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.

    */
    public override var GenericParameterPosition : Swift.Int32 {
        get {
            return try! get_GenericParameterPosition();
        }
    }
    /**
    */
    public override var IsByRefLike : Bool {
        get {
            return try! get_IsByRefLike();
        }
    }
    /**
    Gets a value that indicates whether this object represents a constructed generic type.

    */
    public override var IsConstructedGenericType : Bool {
        get {
            return try! get_IsConstructedGenericType();
        }
    }
    /**
    Gets a value indicating whether the current type is a generic type parameter.

    */
    public override var IsGenericParameter : Bool {
        get {
            return try! get_IsGenericParameter();
        }
    }
    /**
    Gets a value indicating whether the current type is a generic type.

    */
    public override var IsGenericType : Bool {
        get {
            return try! get_IsGenericType();
        }
    }
    /**
    Gets a value indicating whether the current  represents a generic type definition from which other generic types can be constructed.

    */
    public override var IsGenericTypeDefinition : Bool {
        get {
            return try! get_IsGenericTypeDefinition();
        }
    }
    /**
    */
    public override var IsSZArray : Bool {
        get {
            return try! get_IsSZArray();
        }
    }
    /**
    Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.

    */
    public override var IsSecurityCritical : Bool {
        get {
            return try! get_IsSecurityCritical();
        }
    }
    /**
    Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.

    */
    public override var IsSecuritySafeCritical : Bool {
        get {
            return try! get_IsSecuritySafeCritical();
        }
    }
    /**
    Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.

    */
    public override var IsSecurityTransparent : Bool {
        get {
            return try! get_IsSecurityTransparent();
        }
    }
    /**
    */
    public override var IsTypeDefinition : Bool {
        get {
            return try! get_IsTypeDefinition();
        }
    }
    public override var MetadataToken : Swift.Int32 {
        get {
            return try! get_MetadataToken();
        }
    }
    /**
    Retrieves the dynamic module that contains this type definition.

    */
    public override var Module : dotnet.System.Reflection.Module {
        get {
            return try! get_Module();
        }
    }
    /**
    Retrieves the name of this type.

    */
    public override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Retrieves the namespace where this  is defined.

    */
    public override var Namespace : Optional<dotnet.System.String> {
        get {
            return try! get_Namespace();
        }
    }
    /**
    Retrieves the packing size of this type.

    */
    public var PackingSize : dotnet.System.Reflection.Emit.PackingSize {
        get {
            return try! get_PackingSize();
        }
    }
    /**
    Returns the type that was used to obtain this type.

    */
    public override var ReflectedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReflectedType();
        }
    }
    /**
    Retrieves the total size of a type.

    */
    public var Size : Swift.Int32 {
        get {
            return try! get_Size();
        }
    }
    /**
    Not supported in dynamic modules.

    */
    public override var TypeHandle : dotnet.System.RuntimeTypeHandle {
        get {
            return try! get_TypeHandle();
        }
    }
    /**
    Returns the underlying system type for this .

    */
    public override var UnderlyingSystemType : dotnet.System.Type_ {
        get {
            return try! get_UnderlyingSystemType();
        }
    }
} // TypeBuilder


}



