// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Drawing
extension System.Drawing {
// type: System.Drawing.Color
// boxed value type
    /**
    Represents an ARGB (alpha, red, green, blue) color.

    */
public final class Color
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Drawing_Color_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Drawing.Color Empty
    /**
    Represents a color that is .

    */
    public class var Empty : dotnet.System.Drawing.Color {
        get {
        let __return = dotnet.System.Drawing.Color(hndl: System_Drawing_Color_get_Empty());
            return __return;
        }
    }
    /**
    Gets the alpha component value of this  structure.

    */
    public var A : Swift.UInt8 {
        get {
            return try! get_A();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF0F8FF.

    */
    public static var AliceBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_AliceBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFAEBD7.

    */
    public static var AntiqueWhite : dotnet.System.Drawing.Color {
        get {
            return try! get_AntiqueWhite();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF00FFFF.

    */
    public static var Aqua : dotnet.System.Drawing.Color {
        get {
            return try! get_Aqua();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF7FFFD4.

    */
    public static var Aquamarine : dotnet.System.Drawing.Color {
        get {
            return try! get_Aquamarine();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF0FFFF.

    */
    public static var Azure : dotnet.System.Drawing.Color {
        get {
            return try! get_Azure();
        }
    }
    /**
    Gets the blue component value of this  structure.

    */
    public var B : Swift.UInt8 {
        get {
            return try! get_B();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF5F5DC.

    */
    public static var Beige : dotnet.System.Drawing.Color {
        get {
            return try! get_Beige();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFE4C4.

    */
    public static var Bisque : dotnet.System.Drawing.Color {
        get {
            return try! get_Bisque();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF000000.

    */
    public static var Black : dotnet.System.Drawing.Color {
        get {
            return try! get_Black();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFEBCD.

    */
    public static var BlanchedAlmond : dotnet.System.Drawing.Color {
        get {
            return try! get_BlanchedAlmond();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF0000FF.

    */
    public static var Blue : dotnet.System.Drawing.Color {
        get {
            return try! get_Blue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF8A2BE2.

    */
    public static var BlueViolet : dotnet.System.Drawing.Color {
        get {
            return try! get_BlueViolet();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFA52A2A.

    */
    public static var Brown : dotnet.System.Drawing.Color {
        get {
            return try! get_Brown();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFDEB887.

    */
    public static var BurlyWood : dotnet.System.Drawing.Color {
        get {
            return try! get_BurlyWood();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF5F9EA0.

    */
    public static var CadetBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_CadetBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF7FFF00.

    */
    public static var Chartreuse : dotnet.System.Drawing.Color {
        get {
            return try! get_Chartreuse();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFD2691E.

    */
    public static var Chocolate : dotnet.System.Drawing.Color {
        get {
            return try! get_Chocolate();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF7F50.

    */
    public static var Coral : dotnet.System.Drawing.Color {
        get {
            return try! get_Coral();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF6495ED.

    */
    public static var CornflowerBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_CornflowerBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFF8DC.

    */
    public static var Cornsilk : dotnet.System.Drawing.Color {
        get {
            return try! get_Cornsilk();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFDC143C.

    */
    public static var Crimson : dotnet.System.Drawing.Color {
        get {
            return try! get_Crimson();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF00FFFF.

    */
    public static var Cyan : dotnet.System.Drawing.Color {
        get {
            return try! get_Cyan();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF00008B.

    */
    public static var DarkBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF008B8B.

    */
    public static var DarkCyan : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkCyan();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFB8860B.

    */
    public static var DarkGoldenrod : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkGoldenrod();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFA9A9A9.

    */
    public static var DarkGray : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkGray();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF006400.

    */
    public static var DarkGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFBDB76B.

    */
    public static var DarkKhaki : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkKhaki();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF8B008B.

    */
    public static var DarkMagenta : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkMagenta();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF556B2F.

    */
    public static var DarkOliveGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkOliveGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF8C00.

    */
    public static var DarkOrange : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkOrange();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF9932CC.

    */
    public static var DarkOrchid : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkOrchid();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF8B0000.

    */
    public static var DarkRed : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkRed();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFE9967A.

    */
    public static var DarkSalmon : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkSalmon();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF8FBC8B.

    */
    public static var DarkSeaGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkSeaGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF483D8B.

    */
    public static var DarkSlateBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkSlateBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF2F4F4F.

    */
    public static var DarkSlateGray : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkSlateGray();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF00CED1.

    */
    public static var DarkTurquoise : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkTurquoise();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF9400D3.

    */
    public static var DarkViolet : dotnet.System.Drawing.Color {
        get {
            return try! get_DarkViolet();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF1493.

    */
    public static var DeepPink : dotnet.System.Drawing.Color {
        get {
            return try! get_DeepPink();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF00BFFF.

    */
    public static var DeepSkyBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_DeepSkyBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF696969.

    */
    public static var DimGray : dotnet.System.Drawing.Color {
        get {
            return try! get_DimGray();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF1E90FF.

    */
    public static var DodgerBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_DodgerBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFB22222.

    */
    public static var Firebrick : dotnet.System.Drawing.Color {
        get {
            return try! get_Firebrick();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFFAF0.

    */
    public static var FloralWhite : dotnet.System.Drawing.Color {
        get {
            return try! get_FloralWhite();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF228B22.

    */
    public static var ForestGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_ForestGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF00FF.

    */
    public static var Fuchsia : dotnet.System.Drawing.Color {
        get {
            return try! get_Fuchsia();
        }
    }
    /**
    Gets the green component value of this  structure.

    */
    public var G : Swift.UInt8 {
        get {
            return try! get_G();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFDCDCDC.

    */
    public static var Gainsboro : dotnet.System.Drawing.Color {
        get {
            return try! get_Gainsboro();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF8F8FF.

    */
    public static var GhostWhite : dotnet.System.Drawing.Color {
        get {
            return try! get_GhostWhite();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFD700.

    */
    public static var Gold : dotnet.System.Drawing.Color {
        get {
            return try! get_Gold();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFDAA520.

    */
    public static var Goldenrod : dotnet.System.Drawing.Color {
        get {
            return try! get_Goldenrod();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF808080.

    */
    public static var Gray : dotnet.System.Drawing.Color {
        get {
            return try! get_Gray();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF008000.

    */
    public static var Green : dotnet.System.Drawing.Color {
        get {
            return try! get_Green();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFADFF2F.

    */
    public static var GreenYellow : dotnet.System.Drawing.Color {
        get {
            return try! get_GreenYellow();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF0FFF0.

    */
    public static var Honeydew : dotnet.System.Drawing.Color {
        get {
            return try! get_Honeydew();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF69B4.

    */
    public static var HotPink : dotnet.System.Drawing.Color {
        get {
            return try! get_HotPink();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFCD5C5C.

    */
    public static var IndianRed : dotnet.System.Drawing.Color {
        get {
            return try! get_IndianRed();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF4B0082.

    */
    public static var Indigo : dotnet.System.Drawing.Color {
        get {
            return try! get_Indigo();
        }
    }
    /**
    Specifies whether this  structure is uninitialized.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets a value indicating whether this  structure is a predefined color. Predefined colors are represented by the elements of the  enumeration.

    */
    public var IsKnownColor : Bool {
        get {
            return try! get_IsKnownColor();
        }
    }
    /**
    Gets a value indicating whether this  structure is a named color or a member of the  enumeration.

    */
    public var IsNamedColor : Bool {
        get {
            return try! get_IsNamedColor();
        }
    }
    /**
    Gets a value indicating whether this  structure is a system color. A system color is a color that is used in a Windows display element. System colors are represented by elements of the  enumeration.

    */
    public var IsSystemColor : Bool {
        get {
            return try! get_IsSystemColor();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFFFF0.

    */
    public static var Ivory : dotnet.System.Drawing.Color {
        get {
            return try! get_Ivory();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF0E68C.

    */
    public static var Khaki : dotnet.System.Drawing.Color {
        get {
            return try! get_Khaki();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFE6E6FA.

    */
    public static var Lavender : dotnet.System.Drawing.Color {
        get {
            return try! get_Lavender();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFF0F5.

    */
    public static var LavenderBlush : dotnet.System.Drawing.Color {
        get {
            return try! get_LavenderBlush();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF7CFC00.

    */
    public static var LawnGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_LawnGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFFACD.

    */
    public static var LemonChiffon : dotnet.System.Drawing.Color {
        get {
            return try! get_LemonChiffon();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFADD8E6.

    */
    public static var LightBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_LightBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF08080.

    */
    public static var LightCoral : dotnet.System.Drawing.Color {
        get {
            return try! get_LightCoral();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFE0FFFF.

    */
    public static var LightCyan : dotnet.System.Drawing.Color {
        get {
            return try! get_LightCyan();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFAFAD2.

    */
    public static var LightGoldenrodYellow : dotnet.System.Drawing.Color {
        get {
            return try! get_LightGoldenrodYellow();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFD3D3D3.

    */
    public static var LightGray : dotnet.System.Drawing.Color {
        get {
            return try! get_LightGray();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF90EE90.

    */
    public static var LightGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_LightGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFB6C1.

    */
    public static var LightPink : dotnet.System.Drawing.Color {
        get {
            return try! get_LightPink();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFA07A.

    */
    public static var LightSalmon : dotnet.System.Drawing.Color {
        get {
            return try! get_LightSalmon();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF20B2AA.

    */
    public static var LightSeaGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_LightSeaGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF87CEFA.

    */
    public static var LightSkyBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_LightSkyBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF778899.

    */
    public static var LightSlateGray : dotnet.System.Drawing.Color {
        get {
            return try! get_LightSlateGray();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFB0C4DE.

    */
    public static var LightSteelBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_LightSteelBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFFFE0.

    */
    public static var LightYellow : dotnet.System.Drawing.Color {
        get {
            return try! get_LightYellow();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF00FF00.

    */
    public static var Lime : dotnet.System.Drawing.Color {
        get {
            return try! get_Lime();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF32CD32.

    */
    public static var LimeGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_LimeGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFAF0E6.

    */
    public static var Linen : dotnet.System.Drawing.Color {
        get {
            return try! get_Linen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF00FF.

    */
    public static var Magenta : dotnet.System.Drawing.Color {
        get {
            return try! get_Magenta();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF800000.

    */
    public static var Maroon : dotnet.System.Drawing.Color {
        get {
            return try! get_Maroon();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF66CDAA.

    */
    public static var MediumAquamarine : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumAquamarine();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF0000CD.

    */
    public static var MediumBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFBA55D3.

    */
    public static var MediumOrchid : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumOrchid();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF9370DB.

    */
    public static var MediumPurple : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumPurple();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF3CB371.

    */
    public static var MediumSeaGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumSeaGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF7B68EE.

    */
    public static var MediumSlateBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumSlateBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF00FA9A.

    */
    public static var MediumSpringGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumSpringGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF48D1CC.

    */
    public static var MediumTurquoise : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumTurquoise();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFC71585.

    */
    public static var MediumVioletRed : dotnet.System.Drawing.Color {
        get {
            return try! get_MediumVioletRed();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF191970.

    */
    public static var MidnightBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_MidnightBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF5FFFA.

    */
    public static var MintCream : dotnet.System.Drawing.Color {
        get {
            return try! get_MintCream();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFE4E1.

    */
    public static var MistyRose : dotnet.System.Drawing.Color {
        get {
            return try! get_MistyRose();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFE4B5.

    */
    public static var Moccasin : dotnet.System.Drawing.Color {
        get {
            return try! get_Moccasin();
        }
    }
    /**
    Gets the name of this .

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFDEAD.

    */
    public static var NavajoWhite : dotnet.System.Drawing.Color {
        get {
            return try! get_NavajoWhite();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF000080.

    */
    public static var Navy : dotnet.System.Drawing.Color {
        get {
            return try! get_Navy();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFDF5E6.

    */
    public static var OldLace : dotnet.System.Drawing.Color {
        get {
            return try! get_OldLace();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF808000.

    */
    public static var Olive : dotnet.System.Drawing.Color {
        get {
            return try! get_Olive();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF6B8E23.

    */
    public static var OliveDrab : dotnet.System.Drawing.Color {
        get {
            return try! get_OliveDrab();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFA500.

    */
    public static var Orange : dotnet.System.Drawing.Color {
        get {
            return try! get_Orange();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF4500.

    */
    public static var OrangeRed : dotnet.System.Drawing.Color {
        get {
            return try! get_OrangeRed();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFDA70D6.

    */
    public static var Orchid : dotnet.System.Drawing.Color {
        get {
            return try! get_Orchid();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFEEE8AA.

    */
    public static var PaleGoldenrod : dotnet.System.Drawing.Color {
        get {
            return try! get_PaleGoldenrod();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF98FB98.

    */
    public static var PaleGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_PaleGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFAFEEEE.

    */
    public static var PaleTurquoise : dotnet.System.Drawing.Color {
        get {
            return try! get_PaleTurquoise();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFDB7093.

    */
    public static var PaleVioletRed : dotnet.System.Drawing.Color {
        get {
            return try! get_PaleVioletRed();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFEFD5.

    */
    public static var PapayaWhip : dotnet.System.Drawing.Color {
        get {
            return try! get_PapayaWhip();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFDAB9.

    */
    public static var PeachPuff : dotnet.System.Drawing.Color {
        get {
            return try! get_PeachPuff();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFCD853F.

    */
    public static var Peru : dotnet.System.Drawing.Color {
        get {
            return try! get_Peru();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFC0CB.

    */
    public static var Pink : dotnet.System.Drawing.Color {
        get {
            return try! get_Pink();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFDDA0DD.

    */
    public static var Plum : dotnet.System.Drawing.Color {
        get {
            return try! get_Plum();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFB0E0E6.

    */
    public static var PowderBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_PowderBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF800080.

    */
    public static var Purple : dotnet.System.Drawing.Color {
        get {
            return try! get_Purple();
        }
    }
    /**
    Gets the red component value of this  structure.

    */
    public var R : Swift.UInt8 {
        get {
            return try! get_R();
        }
    }
    public static var RebeccaPurple : dotnet.System.Drawing.Color {
        get {
            return try! get_RebeccaPurple();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF0000.

    */
    public static var Red : dotnet.System.Drawing.Color {
        get {
            return try! get_Red();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFBC8F8F.

    */
    public static var RosyBrown : dotnet.System.Drawing.Color {
        get {
            return try! get_RosyBrown();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF4169E1.

    */
    public static var RoyalBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_RoyalBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF8B4513.

    */
    public static var SaddleBrown : dotnet.System.Drawing.Color {
        get {
            return try! get_SaddleBrown();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFA8072.

    */
    public static var Salmon : dotnet.System.Drawing.Color {
        get {
            return try! get_Salmon();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF4A460.

    */
    public static var SandyBrown : dotnet.System.Drawing.Color {
        get {
            return try! get_SandyBrown();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF2E8B57.

    */
    public static var SeaGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_SeaGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFF5EE.

    */
    public static var SeaShell : dotnet.System.Drawing.Color {
        get {
            return try! get_SeaShell();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFA0522D.

    */
    public static var Sienna : dotnet.System.Drawing.Color {
        get {
            return try! get_Sienna();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFC0C0C0.

    */
    public static var Silver : dotnet.System.Drawing.Color {
        get {
            return try! get_Silver();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF87CEEB.

    */
    public static var SkyBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_SkyBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF6A5ACD.

    */
    public static var SlateBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_SlateBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF708090.

    */
    public static var SlateGray : dotnet.System.Drawing.Color {
        get {
            return try! get_SlateGray();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFFAFA.

    */
    public static var Snow : dotnet.System.Drawing.Color {
        get {
            return try! get_Snow();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF00FF7F.

    */
    public static var SpringGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_SpringGreen();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF4682B4.

    */
    public static var SteelBlue : dotnet.System.Drawing.Color {
        get {
            return try! get_SteelBlue();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFD2B48C.

    */
    public static var Tan : dotnet.System.Drawing.Color {
        get {
            return try! get_Tan();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF008080.

    */
    public static var Teal : dotnet.System.Drawing.Color {
        get {
            return try! get_Teal();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFD8BFD8.

    */
    public static var Thistle : dotnet.System.Drawing.Color {
        get {
            return try! get_Thistle();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFF6347.

    */
    public static var Tomato : dotnet.System.Drawing.Color {
        get {
            return try! get_Tomato();
        }
    }
    /**
    Gets a system-defined color.

    */
    public static var Transparent : dotnet.System.Drawing.Color {
        get {
            return try! get_Transparent();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF40E0D0.

    */
    public static var Turquoise : dotnet.System.Drawing.Color {
        get {
            return try! get_Turquoise();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFEE82EE.

    */
    public static var Violet : dotnet.System.Drawing.Color {
        get {
            return try! get_Violet();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF5DEB3.

    */
    public static var Wheat : dotnet.System.Drawing.Color {
        get {
            return try! get_Wheat();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFFFFF.

    */
    public static var White : dotnet.System.Drawing.Color {
        get {
            return try! get_White();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFF5F5F5.

    */
    public static var WhiteSmoke : dotnet.System.Drawing.Color {
        get {
            return try! get_WhiteSmoke();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FFFFFF00.

    */
    public static var Yellow : dotnet.System.Drawing.Color {
        get {
            return try! get_Yellow();
        }
    }
    /**
    Gets a system-defined color that has an ARGB value of #FF9ACD32.

    */
    public static var YellowGreen : dotnet.System.Drawing.Color {
        get {
            return try! get_YellowGreen();
        }
    }
    public override init() {
        let h = System_Drawing_Color_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Drawing.Color)
// docid: M:System.Drawing.Color.Equals(System.Drawing.Color)
    /**
    Indicates whether the current object is equal to another object of the same type.

    - Parameter other: An object to compare with this object.
    - Returns: 
         if the current object is equal to ; otherwise, .

    */
    public func Equals(other : dotnet.System.Drawing.Color) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_bool__Equals_0__1__Color(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Drawing.Color.Equals(System.Object)
    /**
    Tests whether the specified object is a  structure and is equivalent to this  structure.

    - Parameter obj: The object to test.
    - Returns: 
         if  is a  structure equivalent to this  structure; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Drawing.Color FromArgb(System.Int32)
// docid: M:System.Drawing.Color.FromArgb(System.Int32)
    /**
    Creates a  structure from a 32-bit ARGB value.

    - Parameter argb: A value specifying the 32-bit ARGB value.
    - Returns: The  structure that this method creates.

    */
    public class func FromArgb(argb : Swift.Int32) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__FromArgb_0__1__i32(&__thrown, argb);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.Drawing.Color FromArgb(System.Int32, System.Drawing.Color)
// docid: M:System.Drawing.Color.FromArgb(System.Int32,System.Drawing.Color)
    /**
    Creates a  structure from the specified  structure, but with the new specified alpha value. Although this method allows a 32-bit value to be passed for the alpha value, the value is limited to 8 bits.

    - Parameter alpha: The alpha value for the new . Valid values are 0 through 255.
    - Parameter baseColor: The  from which to create the new .
    - Returns: The  that this method creates.

    */
    public class func FromArgb(alpha : Swift.Int32, baseColor : dotnet.System.Drawing.Color) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__FromArgb_0__2__i32_Color(&__thrown, alpha, baseColor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.Drawing.Color FromArgb(System.Int32, System.Int32, System.Int32)
// docid: M:System.Drawing.Color.FromArgb(System.Int32,System.Int32,System.Int32)
    /**
    Creates a  structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color component, the value of each component is limited to 8 bits.

    - Parameter red: The red component value for the new . Valid values are 0 through 255.
    - Parameter green: The green component value for the new . Valid values are 0 through 255.
    - Parameter blue: The blue component value for the new . Valid values are 0 through 255.
    - Returns: The  that this method creates.

    */
    public class func FromArgb(red : Swift.Int32, green : Swift.Int32, blue : Swift.Int32) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__FromArgb_0__3__i32_i32_i32(&__thrown, red, green, blue);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.Drawing.Color FromArgb(System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Drawing.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Creates a  structure from the four ARGB component (alpha, red, green, and blue) values. Although this method allows a 32-bit value to be passed for each component, the value of each component is limited to 8 bits.

    - Parameter alpha: The alpha component. Valid values are 0 through 255.
    - Parameter red: The red component. Valid values are 0 through 255.
    - Parameter green: The green component. Valid values are 0 through 255.
    - Parameter blue: The blue component. Valid values are 0 through 255.
    - Returns: The  that this method creates.

    */
    public class func FromArgb(alpha : Swift.Int32, red : Swift.Int32, green : Swift.Int32, blue : Swift.Int32) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__FromArgb_0__4__i32_i32_i32_i32(&__thrown, alpha, red, green, blue);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.Drawing.Color FromKnownColor(System.Drawing.KnownColor)
// docid: M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)
    /**
    Creates a  structure from the specified predefined color.

    - Parameter color: An element of the  enumeration.
    - Returns: The  that this method creates.

    */
    public class func FromKnownColor(color : dotnet.System.Drawing.KnownColor) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__FromKnownColor_0__1__KnownColor(&__thrown, color.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.Drawing.Color FromName(System.String)
// docid: M:System.Drawing.Color.FromName(System.String)
    /**
    Creates a  structure from the specified name of a predefined color.

    - Parameter name: A string that is the name of a predefined color. Valid names are the same as the names of the elements of the  enumeration.
    - Returns: The  that this method creates.

    */
    public class func FromName(name : dotnet.System.String) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__FromName_0__1__String(&__thrown, name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.Single GetBrightness()
// docid: M:System.Drawing.Color.GetBrightness
    /**
    Gets the hue-saturation-lightness (HSL) lightness value for this  structure.

    - Returns: The lightness of this . The lightness ranges from 0.0 through 1.0, where 0.0 represents black and 1.0 represents white.

    */
    public func GetBrightness() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_f32__GetBrightness_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Drawing.Color.GetHashCode
    /**
    Returns a hash code for this  structure.

    - Returns: An integer value that specifies the hash code for this .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single GetHue()
// docid: M:System.Drawing.Color.GetHue
    /**
    Gets the hue-saturation-lightness (HSL) hue value, in degrees, for this  structure.

    - Returns: The hue, in degrees, of this . The hue is measured in degrees, ranging from 0.0 through 360.0, in HSL color space.

    */
    public func GetHue() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_f32__GetHue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single GetSaturation()
// docid: M:System.Drawing.Color.GetSaturation
    /**
    Gets the hue-saturation-lightness (HSL) saturation value for this  structure.

    - Returns: The saturation of this . The saturation ranges from 0.0 through 1.0, where 0.0 is grayscale and 1.0 is the most saturated.

    */
    public func GetSaturation() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_f32__GetSaturation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Drawing.Color, System.Drawing.Color)
// docid: M:System.Drawing.Color.op_Equality(System.Drawing.Color,System.Drawing.Color)
    /**
    Tests whether two specified  structures are equivalent.

    - Parameter left: The  that is to the left of the equality operator.
    - Parameter right: The  that is to the right of the equality operator.
    - Returns: 
         if the two  structures are equal; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Drawing.Color, right : dotnet.System.Drawing.Color) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_bool__op_Equality_0__2__Color_Color(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Drawing.Color, System.Drawing.Color)
// docid: M:System.Drawing.Color.op_Inequality(System.Drawing.Color,System.Drawing.Color)
    /**
    Tests whether two specified  structures are different.

    - Parameter left: The  that is to the left of the inequality operator.
    - Parameter right: The  that is to the right of the inequality operator.
    - Returns: 
         if the two  structures are different; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Drawing.Color, right : dotnet.System.Drawing.Color) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_bool__op_Inequality_0__2__Color_Color(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 ToArgb()
// docid: M:System.Drawing.Color.ToArgb
    /**
    Gets the 32-bit ARGB value of this  structure.

    - Returns: The 32-bit ARGB value of this .

    */
    public func ToArgb() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_i32__ToArgb_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Drawing.KnownColor ToKnownColor()
// docid: M:System.Drawing.Color.ToKnownColor
    /**
    Gets the  value of this  structure.

    - Returns: An element of the  enumeration, if the  is created from a predefined color by using either the  method or the  method; otherwise, 0.

    */
    public func ToKnownColor() throws -> dotnet.System.Drawing.KnownColor {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_KnownColor__ToKnownColor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.KnownColor(val: __return);
        }
    }
    // System.String ToString()
// docid: M:System.Drawing.Color.ToString
    /**
    Converts this  structure to a human-readable string.

    - Returns: A string that is the name of this , if the  is created from a predefined color by using either the  method or the  method; otherwise, a string that consists of the ARGB component names and their values.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte get_A()
// docid: M:System.Drawing.Color.get_A
    public func get_A() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_u8__get_A_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.Color get_AliceBlue()
// docid: M:System.Drawing.Color.get_AliceBlue
    public class func get_AliceBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_AliceBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_AntiqueWhite()
// docid: M:System.Drawing.Color.get_AntiqueWhite
    public class func get_AntiqueWhite() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_AntiqueWhite_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Aqua()
// docid: M:System.Drawing.Color.get_Aqua
    public class func get_Aqua() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Aqua_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Aquamarine()
// docid: M:System.Drawing.Color.get_Aquamarine
    public class func get_Aquamarine() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Aquamarine_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Azure()
// docid: M:System.Drawing.Color.get_Azure
    public class func get_Azure() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Azure_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte get_B()
// docid: M:System.Drawing.Color.get_B
    public func get_B() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_u8__get_B_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Beige()
// docid: M:System.Drawing.Color.get_Beige
    public class func get_Beige() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Beige_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Bisque()
// docid: M:System.Drawing.Color.get_Bisque
    public class func get_Bisque() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Bisque_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Black()
// docid: M:System.Drawing.Color.get_Black
    public class func get_Black() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Black_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_BlanchedAlmond()
// docid: M:System.Drawing.Color.get_BlanchedAlmond
    public class func get_BlanchedAlmond() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_BlanchedAlmond_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Blue()
// docid: M:System.Drawing.Color.get_Blue
    public class func get_Blue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Blue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_BlueViolet()
// docid: M:System.Drawing.Color.get_BlueViolet
    public class func get_BlueViolet() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_BlueViolet_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Brown()
// docid: M:System.Drawing.Color.get_Brown
    public class func get_Brown() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Brown_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_BurlyWood()
// docid: M:System.Drawing.Color.get_BurlyWood
    public class func get_BurlyWood() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_BurlyWood_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_CadetBlue()
// docid: M:System.Drawing.Color.get_CadetBlue
    public class func get_CadetBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_CadetBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Chartreuse()
// docid: M:System.Drawing.Color.get_Chartreuse
    public class func get_Chartreuse() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Chartreuse_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Chocolate()
// docid: M:System.Drawing.Color.get_Chocolate
    public class func get_Chocolate() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Chocolate_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Coral()
// docid: M:System.Drawing.Color.get_Coral
    public class func get_Coral() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Coral_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_CornflowerBlue()
// docid: M:System.Drawing.Color.get_CornflowerBlue
    public class func get_CornflowerBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_CornflowerBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Cornsilk()
// docid: M:System.Drawing.Color.get_Cornsilk
    public class func get_Cornsilk() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Cornsilk_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Crimson()
// docid: M:System.Drawing.Color.get_Crimson
    public class func get_Crimson() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Crimson_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Cyan()
// docid: M:System.Drawing.Color.get_Cyan
    public class func get_Cyan() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Cyan_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkBlue()
// docid: M:System.Drawing.Color.get_DarkBlue
    public class func get_DarkBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkCyan()
// docid: M:System.Drawing.Color.get_DarkCyan
    public class func get_DarkCyan() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkCyan_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkGoldenrod()
// docid: M:System.Drawing.Color.get_DarkGoldenrod
    public class func get_DarkGoldenrod() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkGoldenrod_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkGray()
// docid: M:System.Drawing.Color.get_DarkGray
    public class func get_DarkGray() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkGray_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkGreen()
// docid: M:System.Drawing.Color.get_DarkGreen
    public class func get_DarkGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkKhaki()
// docid: M:System.Drawing.Color.get_DarkKhaki
    public class func get_DarkKhaki() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkKhaki_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkMagenta()
// docid: M:System.Drawing.Color.get_DarkMagenta
    public class func get_DarkMagenta() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkMagenta_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkOliveGreen()
// docid: M:System.Drawing.Color.get_DarkOliveGreen
    public class func get_DarkOliveGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkOliveGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkOrange()
// docid: M:System.Drawing.Color.get_DarkOrange
    public class func get_DarkOrange() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkOrange_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkOrchid()
// docid: M:System.Drawing.Color.get_DarkOrchid
    public class func get_DarkOrchid() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkOrchid_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkRed()
// docid: M:System.Drawing.Color.get_DarkRed
    public class func get_DarkRed() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkRed_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkSalmon()
// docid: M:System.Drawing.Color.get_DarkSalmon
    public class func get_DarkSalmon() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkSalmon_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkSeaGreen()
// docid: M:System.Drawing.Color.get_DarkSeaGreen
    public class func get_DarkSeaGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkSeaGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkSlateBlue()
// docid: M:System.Drawing.Color.get_DarkSlateBlue
    public class func get_DarkSlateBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkSlateBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkSlateGray()
// docid: M:System.Drawing.Color.get_DarkSlateGray
    public class func get_DarkSlateGray() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkSlateGray_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkTurquoise()
// docid: M:System.Drawing.Color.get_DarkTurquoise
    public class func get_DarkTurquoise() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkTurquoise_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DarkViolet()
// docid: M:System.Drawing.Color.get_DarkViolet
    public class func get_DarkViolet() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DarkViolet_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DeepPink()
// docid: M:System.Drawing.Color.get_DeepPink
    public class func get_DeepPink() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DeepPink_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DeepSkyBlue()
// docid: M:System.Drawing.Color.get_DeepSkyBlue
    public class func get_DeepSkyBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DeepSkyBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DimGray()
// docid: M:System.Drawing.Color.get_DimGray
    public class func get_DimGray() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DimGray_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_DodgerBlue()
// docid: M:System.Drawing.Color.get_DodgerBlue
    public class func get_DodgerBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_DodgerBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Firebrick()
// docid: M:System.Drawing.Color.get_Firebrick
    public class func get_Firebrick() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Firebrick_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_FloralWhite()
// docid: M:System.Drawing.Color.get_FloralWhite
    public class func get_FloralWhite() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_FloralWhite_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ForestGreen()
// docid: M:System.Drawing.Color.get_ForestGreen
    public class func get_ForestGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_ForestGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Fuchsia()
// docid: M:System.Drawing.Color.get_Fuchsia
    public class func get_Fuchsia() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Fuchsia_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte get_G()
// docid: M:System.Drawing.Color.get_G
    public func get_G() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_u8__get_G_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Gainsboro()
// docid: M:System.Drawing.Color.get_Gainsboro
    public class func get_Gainsboro() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Gainsboro_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_GhostWhite()
// docid: M:System.Drawing.Color.get_GhostWhite
    public class func get_GhostWhite() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_GhostWhite_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Gold()
// docid: M:System.Drawing.Color.get_Gold
    public class func get_Gold() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Gold_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Goldenrod()
// docid: M:System.Drawing.Color.get_Goldenrod
    public class func get_Goldenrod() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Goldenrod_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Gray()
// docid: M:System.Drawing.Color.get_Gray
    public class func get_Gray() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Gray_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Green()
// docid: M:System.Drawing.Color.get_Green
    public class func get_Green() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Green_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_GreenYellow()
// docid: M:System.Drawing.Color.get_GreenYellow
    public class func get_GreenYellow() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_GreenYellow_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Honeydew()
// docid: M:System.Drawing.Color.get_Honeydew
    public class func get_Honeydew() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Honeydew_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_HotPink()
// docid: M:System.Drawing.Color.get_HotPink
    public class func get_HotPink() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_HotPink_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_IndianRed()
// docid: M:System.Drawing.Color.get_IndianRed
    public class func get_IndianRed() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_IndianRed_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Indigo()
// docid: M:System.Drawing.Color.get_Indigo
    public class func get_Indigo() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Indigo_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Drawing.Color.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsKnownColor()
// docid: M:System.Drawing.Color.get_IsKnownColor
    public func get_IsKnownColor() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_bool__get_IsKnownColor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNamedColor()
// docid: M:System.Drawing.Color.get_IsNamedColor
    public func get_IsNamedColor() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_bool__get_IsNamedColor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSystemColor()
// docid: M:System.Drawing.Color.get_IsSystemColor
    public func get_IsSystemColor() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_bool__get_IsSystemColor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Ivory()
// docid: M:System.Drawing.Color.get_Ivory
    public class func get_Ivory() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Ivory_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Khaki()
// docid: M:System.Drawing.Color.get_Khaki
    public class func get_Khaki() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Khaki_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Lavender()
// docid: M:System.Drawing.Color.get_Lavender
    public class func get_Lavender() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Lavender_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LavenderBlush()
// docid: M:System.Drawing.Color.get_LavenderBlush
    public class func get_LavenderBlush() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LavenderBlush_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LawnGreen()
// docid: M:System.Drawing.Color.get_LawnGreen
    public class func get_LawnGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LawnGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LemonChiffon()
// docid: M:System.Drawing.Color.get_LemonChiffon
    public class func get_LemonChiffon() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LemonChiffon_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightBlue()
// docid: M:System.Drawing.Color.get_LightBlue
    public class func get_LightBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightCoral()
// docid: M:System.Drawing.Color.get_LightCoral
    public class func get_LightCoral() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightCoral_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightCyan()
// docid: M:System.Drawing.Color.get_LightCyan
    public class func get_LightCyan() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightCyan_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightGoldenrodYellow()
// docid: M:System.Drawing.Color.get_LightGoldenrodYellow
    public class func get_LightGoldenrodYellow() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightGoldenrodYellow_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightGray()
// docid: M:System.Drawing.Color.get_LightGray
    public class func get_LightGray() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightGray_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightGreen()
// docid: M:System.Drawing.Color.get_LightGreen
    public class func get_LightGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightPink()
// docid: M:System.Drawing.Color.get_LightPink
    public class func get_LightPink() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightPink_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightSalmon()
// docid: M:System.Drawing.Color.get_LightSalmon
    public class func get_LightSalmon() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightSalmon_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightSeaGreen()
// docid: M:System.Drawing.Color.get_LightSeaGreen
    public class func get_LightSeaGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightSeaGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightSkyBlue()
// docid: M:System.Drawing.Color.get_LightSkyBlue
    public class func get_LightSkyBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightSkyBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightSlateGray()
// docid: M:System.Drawing.Color.get_LightSlateGray
    public class func get_LightSlateGray() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightSlateGray_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightSteelBlue()
// docid: M:System.Drawing.Color.get_LightSteelBlue
    public class func get_LightSteelBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightSteelBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LightYellow()
// docid: M:System.Drawing.Color.get_LightYellow
    public class func get_LightYellow() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LightYellow_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Lime()
// docid: M:System.Drawing.Color.get_Lime
    public class func get_Lime() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Lime_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_LimeGreen()
// docid: M:System.Drawing.Color.get_LimeGreen
    public class func get_LimeGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_LimeGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Linen()
// docid: M:System.Drawing.Color.get_Linen
    public class func get_Linen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Linen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Magenta()
// docid: M:System.Drawing.Color.get_Magenta
    public class func get_Magenta() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Magenta_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Maroon()
// docid: M:System.Drawing.Color.get_Maroon
    public class func get_Maroon() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Maroon_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumAquamarine()
// docid: M:System.Drawing.Color.get_MediumAquamarine
    public class func get_MediumAquamarine() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumAquamarine_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumBlue()
// docid: M:System.Drawing.Color.get_MediumBlue
    public class func get_MediumBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumOrchid()
// docid: M:System.Drawing.Color.get_MediumOrchid
    public class func get_MediumOrchid() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumOrchid_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumPurple()
// docid: M:System.Drawing.Color.get_MediumPurple
    public class func get_MediumPurple() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumPurple_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumSeaGreen()
// docid: M:System.Drawing.Color.get_MediumSeaGreen
    public class func get_MediumSeaGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumSeaGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumSlateBlue()
// docid: M:System.Drawing.Color.get_MediumSlateBlue
    public class func get_MediumSlateBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumSlateBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumSpringGreen()
// docid: M:System.Drawing.Color.get_MediumSpringGreen
    public class func get_MediumSpringGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumSpringGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumTurquoise()
// docid: M:System.Drawing.Color.get_MediumTurquoise
    public class func get_MediumTurquoise() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumTurquoise_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MediumVioletRed()
// docid: M:System.Drawing.Color.get_MediumVioletRed
    public class func get_MediumVioletRed() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MediumVioletRed_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MidnightBlue()
// docid: M:System.Drawing.Color.get_MidnightBlue
    public class func get_MidnightBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MidnightBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MintCream()
// docid: M:System.Drawing.Color.get_MintCream
    public class func get_MintCream() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MintCream_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MistyRose()
// docid: M:System.Drawing.Color.get_MistyRose
    public class func get_MistyRose() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_MistyRose_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Moccasin()
// docid: M:System.Drawing.Color.get_Moccasin
    public class func get_Moccasin() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Moccasin_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Drawing.Color.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_NavajoWhite()
// docid: M:System.Drawing.Color.get_NavajoWhite
    public class func get_NavajoWhite() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_NavajoWhite_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Navy()
// docid: M:System.Drawing.Color.get_Navy
    public class func get_Navy() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Navy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_OldLace()
// docid: M:System.Drawing.Color.get_OldLace
    public class func get_OldLace() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_OldLace_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Olive()
// docid: M:System.Drawing.Color.get_Olive
    public class func get_Olive() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Olive_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_OliveDrab()
// docid: M:System.Drawing.Color.get_OliveDrab
    public class func get_OliveDrab() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_OliveDrab_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Orange()
// docid: M:System.Drawing.Color.get_Orange
    public class func get_Orange() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Orange_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_OrangeRed()
// docid: M:System.Drawing.Color.get_OrangeRed
    public class func get_OrangeRed() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_OrangeRed_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Orchid()
// docid: M:System.Drawing.Color.get_Orchid
    public class func get_Orchid() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Orchid_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_PaleGoldenrod()
// docid: M:System.Drawing.Color.get_PaleGoldenrod
    public class func get_PaleGoldenrod() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_PaleGoldenrod_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_PaleGreen()
// docid: M:System.Drawing.Color.get_PaleGreen
    public class func get_PaleGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_PaleGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_PaleTurquoise()
// docid: M:System.Drawing.Color.get_PaleTurquoise
    public class func get_PaleTurquoise() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_PaleTurquoise_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_PaleVioletRed()
// docid: M:System.Drawing.Color.get_PaleVioletRed
    public class func get_PaleVioletRed() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_PaleVioletRed_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_PapayaWhip()
// docid: M:System.Drawing.Color.get_PapayaWhip
    public class func get_PapayaWhip() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_PapayaWhip_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_PeachPuff()
// docid: M:System.Drawing.Color.get_PeachPuff
    public class func get_PeachPuff() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_PeachPuff_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Peru()
// docid: M:System.Drawing.Color.get_Peru
    public class func get_Peru() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Peru_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Pink()
// docid: M:System.Drawing.Color.get_Pink
    public class func get_Pink() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Pink_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Plum()
// docid: M:System.Drawing.Color.get_Plum
    public class func get_Plum() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Plum_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_PowderBlue()
// docid: M:System.Drawing.Color.get_PowderBlue
    public class func get_PowderBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_PowderBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Purple()
// docid: M:System.Drawing.Color.get_Purple
    public class func get_Purple() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Purple_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte get_R()
// docid: M:System.Drawing.Color.get_R
    public func get_R() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_u8__get_R_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.Color get_RebeccaPurple()
// docid: M:System.Drawing.Color.get_RebeccaPurple
    public class func get_RebeccaPurple() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_RebeccaPurple_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Red()
// docid: M:System.Drawing.Color.get_Red
    public class func get_Red() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Red_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_RosyBrown()
// docid: M:System.Drawing.Color.get_RosyBrown
    public class func get_RosyBrown() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_RosyBrown_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_RoyalBlue()
// docid: M:System.Drawing.Color.get_RoyalBlue
    public class func get_RoyalBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_RoyalBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SaddleBrown()
// docid: M:System.Drawing.Color.get_SaddleBrown
    public class func get_SaddleBrown() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SaddleBrown_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Salmon()
// docid: M:System.Drawing.Color.get_Salmon
    public class func get_Salmon() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Salmon_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SandyBrown()
// docid: M:System.Drawing.Color.get_SandyBrown
    public class func get_SandyBrown() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SandyBrown_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SeaGreen()
// docid: M:System.Drawing.Color.get_SeaGreen
    public class func get_SeaGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SeaGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SeaShell()
// docid: M:System.Drawing.Color.get_SeaShell
    public class func get_SeaShell() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SeaShell_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Sienna()
// docid: M:System.Drawing.Color.get_Sienna
    public class func get_Sienna() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Sienna_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Silver()
// docid: M:System.Drawing.Color.get_Silver
    public class func get_Silver() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Silver_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SkyBlue()
// docid: M:System.Drawing.Color.get_SkyBlue
    public class func get_SkyBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SkyBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SlateBlue()
// docid: M:System.Drawing.Color.get_SlateBlue
    public class func get_SlateBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SlateBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SlateGray()
// docid: M:System.Drawing.Color.get_SlateGray
    public class func get_SlateGray() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SlateGray_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Snow()
// docid: M:System.Drawing.Color.get_Snow
    public class func get_Snow() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Snow_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SpringGreen()
// docid: M:System.Drawing.Color.get_SpringGreen
    public class func get_SpringGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SpringGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_SteelBlue()
// docid: M:System.Drawing.Color.get_SteelBlue
    public class func get_SteelBlue() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_SteelBlue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Tan()
// docid: M:System.Drawing.Color.get_Tan
    public class func get_Tan() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Tan_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Teal()
// docid: M:System.Drawing.Color.get_Teal
    public class func get_Teal() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Teal_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Thistle()
// docid: M:System.Drawing.Color.get_Thistle
    public class func get_Thistle() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Thistle_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Tomato()
// docid: M:System.Drawing.Color.get_Tomato
    public class func get_Tomato() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Tomato_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Transparent()
// docid: M:System.Drawing.Color.get_Transparent
    public class func get_Transparent() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Transparent_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Turquoise()
// docid: M:System.Drawing.Color.get_Turquoise
    public class func get_Turquoise() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Turquoise_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Violet()
// docid: M:System.Drawing.Color.get_Violet
    public class func get_Violet() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Violet_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Wheat()
// docid: M:System.Drawing.Color.get_Wheat
    public class func get_Wheat() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Wheat_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_White()
// docid: M:System.Drawing.Color.get_White
    public class func get_White() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_White_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_WhiteSmoke()
// docid: M:System.Drawing.Color.get_WhiteSmoke
    public class func get_WhiteSmoke() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_WhiteSmoke_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Yellow()
// docid: M:System.Drawing.Color.get_Yellow
    public class func get_Yellow() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_Yellow_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_YellowGreen()
// docid: M:System.Drawing.Color.get_YellowGreen
    public class func get_YellowGreen() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Color_Color__get_YellowGreen_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
} // Color


// type: System.Drawing.ColorTranslator
public struct ColorTranslator {
    // System.Drawing.Color FromHtml(System.String)
// docid: M:System.Drawing.ColorTranslator.FromHtml(System.String)
    /**
    Translates an HTML color representation to a GDI+  structure.

    - Parameter htmlColor: The string representation of the Html color to translate.
    - Returns: The  structure that represents the translated HTML color or  if  is .

    */
    public static func FromHtml(htmlColor : dotnet.System.String) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorTranslator_Color__FromHtml_0__1__String(&__thrown, htmlColor.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.Drawing.Color FromOle(System.Int32)
// docid: M:System.Drawing.ColorTranslator.FromOle(System.Int32)
    /**
    Translates an OLE color value to a GDI+  structure.

    - Parameter oleColor: The OLE color to translate.
    - Returns: The  structure that represents the translated OLE color.

    */
    public static func FromOle(oleColor : Swift.Int32) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorTranslator_Color__FromOle_0__1__i32(&__thrown, oleColor);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.Drawing.Color FromWin32(System.Int32)
// docid: M:System.Drawing.ColorTranslator.FromWin32(System.Int32)
    /**
    Translates a Windows color value to a GDI+  structure.

    - Parameter win32Color: The Windows color to translate.
    - Returns: The  structure that represents the translated Windows color.

    */
    public static func FromWin32(win32Color : Swift.Int32) throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorTranslator_Color__FromWin32_0__1__i32(&__thrown, win32Color);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // System.String ToHtml(System.Drawing.Color)
// docid: M:System.Drawing.ColorTranslator.ToHtml(System.Drawing.Color)
    /**
    Translates the specified  structure to an HTML string color representation.

    - Parameter c: The  structure to translate.
    - Returns: The string that represents the HTML color.

    */
    public static func ToHtml(c : dotnet.System.Drawing.Color) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorTranslator_String__ToHtml_0__1__Color(&__thrown, c.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Int32 ToOle(System.Drawing.Color)
// docid: M:System.Drawing.ColorTranslator.ToOle(System.Drawing.Color)
    /**
    Translates the specified  structure to an OLE color.

    - Parameter c: The  structure to translate.
    - Returns: The OLE color value.

    */
    public static func ToOle(c : dotnet.System.Drawing.Color) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorTranslator_i32__ToOle_0__1__Color(&__thrown, c.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ToWin32(System.Drawing.Color)
// docid: M:System.Drawing.ColorTranslator.ToWin32(System.Drawing.Color)
    /**
    Translates the specified  structure to a Windows color.

    - Parameter c: The  structure to translate.
    - Returns: The Windows color value.

    */
    public static func ToWin32(c : dotnet.System.Drawing.Color) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorTranslator_i32__ToWin32_0__1__Color(&__thrown, c.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // ColorTranslator


// type: System.Drawing.KnownColor
    /**
    Specifies the known system colors.

    */
public struct KnownColor : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Drawing_KnownColor_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Drawing.KnownColor ActiveBorder
    /**
    The system-defined color of the active window's border.

    */
    public static var ActiveBorder : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ActiveBorder());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ActiveCaption
    /**
    The system-defined color of the background of the active window's title bar.

    */
    public static var ActiveCaption : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ActiveCaption());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ActiveCaptionText
    /**
    The system-defined color of the text in the active window's title bar.

    */
    public static var ActiveCaptionText : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ActiveCaptionText());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor AppWorkspace
    /**
    The system-defined color of the application workspace. The application workspace is the area in a multiple-document view that is not being occupied by documents.

    */
    public static var AppWorkspace : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_AppWorkspace());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Control
    /**
    The system-defined face color of a 3-D element.

    */
    public static var Control : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Control());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ControlDark
    /**
    The system-defined shadow color of a 3-D element. The shadow color is applied to parts of a 3-D element that face away from the light source.

    */
    public static var ControlDark : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ControlDark());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ControlDarkDark
    /**
    The system-defined color that is the dark shadow color of a 3-D element. The dark shadow color is applied to the parts of a 3-D element that are the darkest color.

    */
    public static var ControlDarkDark : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ControlDarkDark());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ControlLight
    /**
    The system-defined color that is the light color of a 3-D element. The light color is applied to parts of a 3-D element that face the light source.

    */
    public static var ControlLight : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ControlLight());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ControlLightLight
    /**
    The system-defined highlight color of a 3-D element. The highlight color is applied to the parts of a 3-D element that are the lightest color.

    */
    public static var ControlLightLight : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ControlLightLight());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ControlText
    /**
    The system-defined color of text in a 3-D element.

    */
    public static var ControlText : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ControlText());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Desktop
    /**
    The system-defined color of the desktop.

    */
    public static var Desktop : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Desktop());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor GrayText
    /**
    The system-defined color of dimmed text. Items in a list that are disabled are displayed in dimmed text.

    */
    public static var GrayText : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_GrayText());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Highlight
    /**
    The system-defined color of the background of selected items. This includes selected menu items as well as selected text.

    */
    public static var Highlight : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Highlight());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor HighlightText
    /**
    The system-defined color of the text of selected items.

    */
    public static var HighlightText : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_HighlightText());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor HotTrack
    /**
    The system-defined color used to designate a hot-tracked item. Single-clicking a hot-tracked item executes the item.

    */
    public static var HotTrack : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_HotTrack());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor InactiveBorder
    /**
    The system-defined color of an inactive window's border.

    */
    public static var InactiveBorder : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_InactiveBorder());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor InactiveCaption
    /**
    The system-defined color of the background of an inactive window's title bar.

    */
    public static var InactiveCaption : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_InactiveCaption());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor InactiveCaptionText
    /**
    The system-defined color of the text in an inactive window's title bar.

    */
    public static var InactiveCaptionText : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_InactiveCaptionText());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Info
    /**
    The system-defined color of the background of a ToolTip.

    */
    public static var Info : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Info());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor InfoText
    /**
    The system-defined color of the text of a ToolTip.

    */
    public static var InfoText : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_InfoText());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Menu
    /**
    The system-defined color of a menu's background.

    */
    public static var Menu : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Menu());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MenuText
    /**
    The system-defined color of a menu's text.

    */
    public static var MenuText : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MenuText());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ScrollBar
    /**
    The system-defined color of the background of a scroll bar.

    */
    public static var ScrollBar : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ScrollBar());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Window
    /**
    The system-defined color of the background in the client area of a window.

    */
    public static var Window : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Window());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor WindowFrame
    /**
    The system-defined color of a window frame.

    */
    public static var WindowFrame : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_WindowFrame());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor WindowText
    /**
    The system-defined color of the text in the client area of a window.

    */
    public static var WindowText : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_WindowText());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Transparent
    /**
    A system-defined color.

    */
    public static var Transparent : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Transparent());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor AliceBlue
    /**
    A system-defined color.

    */
    public static var AliceBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_AliceBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor AntiqueWhite
    /**
    A system-defined color.

    */
    public static var AntiqueWhite : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_AntiqueWhite());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Aqua
    /**
    A system-defined color.

    */
    public static var Aqua : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Aqua());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Aquamarine
    /**
    A system-defined color.

    */
    public static var Aquamarine : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Aquamarine());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Azure
    /**
    A system-defined color.

    */
    public static var Azure : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Azure());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Beige
    /**
    A system-defined color.

    */
    public static var Beige : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Beige());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Bisque
    /**
    A system-defined color.

    */
    public static var Bisque : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Bisque());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Black
    /**
    A system-defined color.

    */
    public static var Black : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Black());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor BlanchedAlmond
    /**
    A system-defined color.

    */
    public static var BlanchedAlmond : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_BlanchedAlmond());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Blue
    /**
    A system-defined color.

    */
    public static var Blue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Blue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor BlueViolet
    /**
    A system-defined color.

    */
    public static var BlueViolet : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_BlueViolet());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Brown
    /**
    A system-defined color.

    */
    public static var Brown : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Brown());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor BurlyWood
    /**
    A system-defined color.

    */
    public static var BurlyWood : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_BurlyWood());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor CadetBlue
    /**
    A system-defined color.

    */
    public static var CadetBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_CadetBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Chartreuse
    /**
    A system-defined color.

    */
    public static var Chartreuse : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Chartreuse());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Chocolate
    /**
    A system-defined color.

    */
    public static var Chocolate : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Chocolate());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Coral
    /**
    A system-defined color.

    */
    public static var Coral : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Coral());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor CornflowerBlue
    /**
    A system-defined color.

    */
    public static var CornflowerBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_CornflowerBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Cornsilk
    /**
    A system-defined color.

    */
    public static var Cornsilk : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Cornsilk());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Crimson
    /**
    A system-defined color.

    */
    public static var Crimson : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Crimson());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Cyan
    /**
    A system-defined color.

    */
    public static var Cyan : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Cyan());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkBlue
    /**
    A system-defined color.

    */
    public static var DarkBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkCyan
    /**
    A system-defined color.

    */
    public static var DarkCyan : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkCyan());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkGoldenrod
    /**
    A system-defined color.

    */
    public static var DarkGoldenrod : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkGoldenrod());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkGray
    /**
    A system-defined color.

    */
    public static var DarkGray : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkGray());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkGreen
    /**
    A system-defined color.

    */
    public static var DarkGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkKhaki
    /**
    A system-defined color.

    */
    public static var DarkKhaki : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkKhaki());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkMagenta
    /**
    A system-defined color.

    */
    public static var DarkMagenta : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkMagenta());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkOliveGreen
    /**
    A system-defined color.

    */
    public static var DarkOliveGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkOliveGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkOrange
    /**
    A system-defined color.

    */
    public static var DarkOrange : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkOrange());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkOrchid
    /**
    A system-defined color.

    */
    public static var DarkOrchid : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkOrchid());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkRed
    /**
    A system-defined color.

    */
    public static var DarkRed : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkRed());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkSalmon
    /**
    A system-defined color.

    */
    public static var DarkSalmon : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkSalmon());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkSeaGreen
    /**
    A system-defined color.

    */
    public static var DarkSeaGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkSeaGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkSlateBlue
    /**
    A system-defined color.

    */
    public static var DarkSlateBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkSlateBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkSlateGray
    /**
    A system-defined color.

    */
    public static var DarkSlateGray : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkSlateGray());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkTurquoise
    /**
    A system-defined color.

    */
    public static var DarkTurquoise : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkTurquoise());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DarkViolet
    /**
    A system-defined color.

    */
    public static var DarkViolet : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DarkViolet());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DeepPink
    /**
    A system-defined color.

    */
    public static var DeepPink : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DeepPink());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DeepSkyBlue
    /**
    A system-defined color.

    */
    public static var DeepSkyBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DeepSkyBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DimGray
    /**
    A system-defined color.

    */
    public static var DimGray : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DimGray());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor DodgerBlue
    /**
    A system-defined color.

    */
    public static var DodgerBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_DodgerBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Firebrick
    /**
    A system-defined color.

    */
    public static var Firebrick : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Firebrick());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor FloralWhite
    /**
    A system-defined color.

    */
    public static var FloralWhite : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_FloralWhite());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ForestGreen
    /**
    A system-defined color.

    */
    public static var ForestGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ForestGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Fuchsia
    /**
    A system-defined color.

    */
    public static var Fuchsia : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Fuchsia());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Gainsboro
    /**
    A system-defined color.

    */
    public static var Gainsboro : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Gainsboro());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor GhostWhite
    /**
    A system-defined color.

    */
    public static var GhostWhite : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_GhostWhite());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Gold
    /**
    A system-defined color.

    */
    public static var Gold : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Gold());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Goldenrod
    /**
    A system-defined color.

    */
    public static var Goldenrod : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Goldenrod());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Gray
    /**
    A system-defined color.

    */
    public static var Gray : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Gray());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Green
    /**
    A system-defined color.

    */
    public static var Green : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Green());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor GreenYellow
    /**
    A system-defined color.

    */
    public static var GreenYellow : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_GreenYellow());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Honeydew
    /**
    A system-defined color.

    */
    public static var Honeydew : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Honeydew());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor HotPink
    /**
    A system-defined color.

    */
    public static var HotPink : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_HotPink());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor IndianRed
    /**
    A system-defined color.

    */
    public static var IndianRed : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_IndianRed());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Indigo
    /**
    A system-defined color.

    */
    public static var Indigo : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Indigo());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Ivory
    /**
    A system-defined color.

    */
    public static var Ivory : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Ivory());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Khaki
    /**
    A system-defined color.

    */
    public static var Khaki : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Khaki());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Lavender
    /**
    A system-defined color.

    */
    public static var Lavender : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Lavender());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LavenderBlush
    /**
    A system-defined color.

    */
    public static var LavenderBlush : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LavenderBlush());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LawnGreen
    /**
    A system-defined color.

    */
    public static var LawnGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LawnGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LemonChiffon
    /**
    A system-defined color.

    */
    public static var LemonChiffon : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LemonChiffon());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightBlue
    /**
    A system-defined color.

    */
    public static var LightBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightCoral
    /**
    A system-defined color.

    */
    public static var LightCoral : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightCoral());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightCyan
    /**
    A system-defined color.

    */
    public static var LightCyan : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightCyan());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightGoldenrodYellow
    /**
    A system-defined color.

    */
    public static var LightGoldenrodYellow : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightGoldenrodYellow());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightGray
    /**
    A system-defined color.

    */
    public static var LightGray : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightGray());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightGreen
    /**
    A system-defined color.

    */
    public static var LightGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightPink
    /**
    A system-defined color.

    */
    public static var LightPink : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightPink());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightSalmon
    /**
    A system-defined color.

    */
    public static var LightSalmon : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightSalmon());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightSeaGreen
    /**
    A system-defined color.

    */
    public static var LightSeaGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightSeaGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightSkyBlue
    /**
    A system-defined color.

    */
    public static var LightSkyBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightSkyBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightSlateGray
    /**
    A system-defined color.

    */
    public static var LightSlateGray : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightSlateGray());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightSteelBlue
    /**
    A system-defined color.

    */
    public static var LightSteelBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightSteelBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LightYellow
    /**
    A system-defined color.

    */
    public static var LightYellow : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LightYellow());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Lime
    /**
    A system-defined color.

    */
    public static var Lime : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Lime());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor LimeGreen
    /**
    A system-defined color.

    */
    public static var LimeGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_LimeGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Linen
    /**
    A system-defined color.

    */
    public static var Linen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Linen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Magenta
    /**
    A system-defined color.

    */
    public static var Magenta : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Magenta());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Maroon
    /**
    A system-defined color.

    */
    public static var Maroon : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Maroon());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumAquamarine
    /**
    A system-defined color.

    */
    public static var MediumAquamarine : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumAquamarine());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumBlue
    /**
    A system-defined color.

    */
    public static var MediumBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumOrchid
    /**
    A system-defined color.

    */
    public static var MediumOrchid : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumOrchid());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumPurple
    /**
    A system-defined color.

    */
    public static var MediumPurple : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumPurple());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumSeaGreen
    /**
    A system-defined color.

    */
    public static var MediumSeaGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumSeaGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumSlateBlue
    /**
    A system-defined color.

    */
    public static var MediumSlateBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumSlateBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumSpringGreen
    /**
    A system-defined color.

    */
    public static var MediumSpringGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumSpringGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumTurquoise
    /**
    A system-defined color.

    */
    public static var MediumTurquoise : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumTurquoise());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MediumVioletRed
    /**
    A system-defined color.

    */
    public static var MediumVioletRed : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MediumVioletRed());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MidnightBlue
    /**
    A system-defined color.

    */
    public static var MidnightBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MidnightBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MintCream
    /**
    A system-defined color.

    */
    public static var MintCream : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MintCream());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MistyRose
    /**
    A system-defined color.

    */
    public static var MistyRose : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MistyRose());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Moccasin
    /**
    A system-defined color.

    */
    public static var Moccasin : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Moccasin());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor NavajoWhite
    /**
    A system-defined color.

    */
    public static var NavajoWhite : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_NavajoWhite());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Navy
    /**
    A system-defined color.

    */
    public static var Navy : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Navy());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor OldLace
    /**
    A system-defined color.

    */
    public static var OldLace : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_OldLace());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Olive
    /**
    A system-defined color.

    */
    public static var Olive : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Olive());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor OliveDrab
    /**
    A system-defined color.

    */
    public static var OliveDrab : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_OliveDrab());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Orange
    /**
    A system-defined color.

    */
    public static var Orange : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Orange());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor OrangeRed
    /**
    A system-defined color.

    */
    public static var OrangeRed : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_OrangeRed());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Orchid
    /**
    A system-defined color.

    */
    public static var Orchid : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Orchid());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor PaleGoldenrod
    /**
    A system-defined color.

    */
    public static var PaleGoldenrod : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_PaleGoldenrod());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor PaleGreen
    /**
    A system-defined color.

    */
    public static var PaleGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_PaleGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor PaleTurquoise
    /**
    A system-defined color.

    */
    public static var PaleTurquoise : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_PaleTurquoise());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor PaleVioletRed
    /**
    A system-defined color.

    */
    public static var PaleVioletRed : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_PaleVioletRed());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor PapayaWhip
    /**
    A system-defined color.

    */
    public static var PapayaWhip : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_PapayaWhip());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor PeachPuff
    /**
    A system-defined color.

    */
    public static var PeachPuff : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_PeachPuff());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Peru
    /**
    A system-defined color.

    */
    public static var Peru : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Peru());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Pink
    /**
    A system-defined color.

    */
    public static var Pink : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Pink());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Plum
    /**
    A system-defined color.

    */
    public static var Plum : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Plum());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor PowderBlue
    /**
    A system-defined color.

    */
    public static var PowderBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_PowderBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Purple
    /**
    A system-defined color.

    */
    public static var Purple : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Purple());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Red
    /**
    A system-defined color.

    */
    public static var Red : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Red());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor RosyBrown
    /**
    A system-defined color.

    */
    public static var RosyBrown : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_RosyBrown());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor RoyalBlue
    /**
    A system-defined color.

    */
    public static var RoyalBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_RoyalBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SaddleBrown
    /**
    A system-defined color.

    */
    public static var SaddleBrown : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SaddleBrown());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Salmon
    /**
    A system-defined color.

    */
    public static var Salmon : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Salmon());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SandyBrown
    /**
    A system-defined color.

    */
    public static var SandyBrown : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SandyBrown());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SeaGreen
    /**
    A system-defined color.

    */
    public static var SeaGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SeaGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SeaShell
    /**
    A system-defined color.

    */
    public static var SeaShell : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SeaShell());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Sienna
    /**
    A system-defined color.

    */
    public static var Sienna : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Sienna());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Silver
    /**
    A system-defined color.

    */
    public static var Silver : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Silver());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SkyBlue
    /**
    A system-defined color.

    */
    public static var SkyBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SkyBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SlateBlue
    /**
    A system-defined color.

    */
    public static var SlateBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SlateBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SlateGray
    /**
    A system-defined color.

    */
    public static var SlateGray : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SlateGray());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Snow
    /**
    A system-defined color.

    */
    public static var Snow : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Snow());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SpringGreen
    /**
    A system-defined color.

    */
    public static var SpringGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SpringGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor SteelBlue
    /**
    A system-defined color.

    */
    public static var SteelBlue : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_SteelBlue());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Tan
    /**
    A system-defined color.

    */
    public static var Tan : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Tan());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Teal
    /**
    A system-defined color.

    */
    public static var Teal : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Teal());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Thistle
    /**
    A system-defined color.

    */
    public static var Thistle : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Thistle());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Tomato
    /**
    A system-defined color.

    */
    public static var Tomato : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Tomato());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Turquoise
    /**
    A system-defined color.

    */
    public static var Turquoise : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Turquoise());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Violet
    /**
    A system-defined color.

    */
    public static var Violet : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Violet());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Wheat
    /**
    A system-defined color.

    */
    public static var Wheat : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Wheat());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor White
    /**
    A system-defined color.

    */
    public static var White : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_White());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor WhiteSmoke
    /**
    A system-defined color.

    */
    public static var WhiteSmoke : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_WhiteSmoke());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor Yellow
    /**
    A system-defined color.

    */
    public static var Yellow : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_Yellow());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor YellowGreen
    /**
    A system-defined color.

    */
    public static var YellowGreen : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_YellowGreen());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ButtonFace
    /**
    The system-defined face color of a 3-D element.

    */
    public static var ButtonFace : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ButtonFace());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ButtonHighlight
    /**
    The system-defined color that is the highlight color of a 3-D element. This color is applied to parts of a 3-D element that face the light source.

    */
    public static var ButtonHighlight : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ButtonHighlight());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor ButtonShadow
    /**
    The system-defined color that is the shadow color of a 3-D element. This color is applied to parts of a 3-D element that face away from the light source.

    */
    public static var ButtonShadow : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_ButtonShadow());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor GradientActiveCaption
    /**
    The system-defined color of the lightest color in the color gradient of an active window's title bar.

    */
    public static var GradientActiveCaption : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_GradientActiveCaption());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor GradientInactiveCaption
    /**
    The system-defined color of the lightest color in the color gradient of an inactive window's title bar.

    */
    public static var GradientInactiveCaption : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_GradientInactiveCaption());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MenuBar
    /**
    The system-defined color of the background of a menu bar.

    */
    public static var MenuBar : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MenuBar());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor MenuHighlight
    /**
    The system-defined color used to highlight menu items when the menu appears as a flat menu.

    */
    public static var MenuHighlight : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_MenuHighlight());
            return __return;
        }
    }
    // static field: System.Drawing.KnownColor RebeccaPurple
    public static var RebeccaPurple : dotnet.System.Drawing.KnownColor {
        get {
        let __return = dotnet.System.Drawing.KnownColor(val: System_Drawing_KnownColor_get_RebeccaPurple());
            return __return;
        }
    }
} // KnownColor


// type: System.Drawing.Point
// boxed value type
    /**
    Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.

    */
public final class Point
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Drawing_Point_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Drawing.Point Empty
    /**
    Represents a  that has  and  values set to zero.

    */
    public class var Empty : dotnet.System.Drawing.Point {
        get {
        let __return = dotnet.System.Drawing.Point(hndl: System_Drawing_Point_get_Empty());
            return __return;
        }
    }
    /**
    Gets a value indicating whether this  is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets or sets the x-coordinate of this .

    */
    public var X : Swift.Int32 {
        get {
            return try! get_X();
        }
        set(v) {
            return try! set_X(value: v);
        }
    }
    /**
    Gets or sets the y-coordinate of this .

    */
    public var Y : Swift.Int32 {
        get {
            return try! get_Y();
        }
        set(v) {
            return try! set_Y(value: v);
        }
    }
    // .ctor(System.Drawing.Size)
// docid: M:System.Drawing.Point.#ctor(System.Drawing.Size)
    /**
    Initializes a new instance of the  struct from a .

    - Parameter sz: A  that specifies the coordinates for the new .
    */
    public init(sz : dotnet.System.Drawing.Size) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_Point_ctor_0__1__Size(&__thrown, sz.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Drawing.Point.#ctor(System.Int32)
    /**
    Initializes a new instance of the  struct using coordinates specified by an integer value.

    - Parameter dw: A 32-bit integer that specifies the coordinates for the new .
    */
    public init(dw : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_Point_ctor_0__1__i32(&__thrown, dw);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32)
// docid: M:System.Drawing.Point.#ctor(System.Int32,System.Int32)
    /**
    Initializes a new instance of the  struct with the specified coordinates.

    - Parameter x: The horizontal position of the point.
    - Parameter y: The vertical position of the point.
    */
    public init(x : Swift.Int32, y : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_Point_ctor_0__2__i32_i32(&__thrown, x, y);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Drawing_Point_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Drawing.Point Add(System.Drawing.Point, System.Drawing.Size)
// docid: M:System.Drawing.Point.Add(System.Drawing.Point,System.Drawing.Size)
    /**
    Adds the specified  to the specified .

    - Parameter pt: The  to add.
    - Parameter sz: The  to add
    - Returns: The  that is the result of the addition operation.

    */
    public class func Add(pt : dotnet.System.Drawing.Point, sz : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_Point__Add_0__2__Point_Size(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // System.Drawing.Point Ceiling(System.Drawing.PointF)
// docid: M:System.Drawing.Point.Ceiling(System.Drawing.PointF)
    /**
    Converts the specified  to a  by rounding the values of the  to the next higher integer values.

    - Parameter value: The  to convert.
    - Returns: The  this method converts to.

    */
    public class func Ceiling(value : dotnet.System.Drawing.PointF) throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_Point__Ceiling_0__1__PointF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // bool Equals(System.Drawing.Point)
// docid: M:System.Drawing.Point.Equals(System.Drawing.Point)
    /**
    Specifies whether this point instance contains the same coordinates as another point.

    - Parameter other: The point to test for equality.
    - Returns: 
         if  has the same coordinates as this point instance.

    */
    public func Equals(other : dotnet.System.Drawing.Point) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_bool__Equals_0__1__Point(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Drawing.Point.Equals(System.Object)
    /**
    Specifies whether this point instance contains the same coordinates as the specified object.

    - Parameter obj: The  to test for equality.
    - Returns: 
         if  is a  and has the same coordinates as this point instance.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Drawing.Point.GetHashCode
    /**
    Returns a hash code for this .

    - Returns: An integer value that specifies a hash value for this .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Offset(System.Drawing.Point)
// docid: M:System.Drawing.Point.Offset(System.Drawing.Point)
    /**
    Translates this  by the specified .

    - Parameter p: The  used offset this .
    */
    public func Offset(p : dotnet.System.Drawing.Point) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Point_void__Offset_0__1__Point(&__thrown, self.get_handle(), p.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Offset(System.Int32, System.Int32)
// docid: M:System.Drawing.Point.Offset(System.Int32,System.Int32)
    /**
    Translates this  by the specified amount.

    - Parameter dx: The amount to offset the x-coordinate.
    - Parameter dy: The amount to offset the y-coordinate.
    */
    public func Offset(dx : Swift.Int32, dy : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Point_void__Offset_0__2__i32_i32(&__thrown, self.get_handle(), dx, dy);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Drawing.Point op_Addition(System.Drawing.Point, System.Drawing.Size)
// docid: M:System.Drawing.Point.op_Addition(System.Drawing.Point,System.Drawing.Size)
    /**
    Translates a  by a given .

    - Parameter pt: The  to translate.
    - Parameter sz: A  that specifies the pair of numbers to add to the coordinates of .
    - Returns: The translated .

    */
    public class func op_Addition(pt : dotnet.System.Drawing.Point, sz : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_Point__op_Addition_0__2__Point_Size(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Drawing.Point, System.Drawing.Point)
// docid: M:System.Drawing.Point.op_Equality(System.Drawing.Point,System.Drawing.Point)
    /**
    Compares two  objects. The result specifies whether the values of the  and  properties of the two  objects are equal.

    - Parameter left: A  to compare.
    - Parameter right: A  to compare.
    - Returns: 
         if the  and  values of  and  are equal; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Drawing.Point, right : dotnet.System.Drawing.Point) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_bool__op_Equality_0__2__Point_Point(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.Size op_Explicit(System.Drawing.Point)
// docid: M:System.Drawing.Point.op_Explicit(System.Drawing.Point)
    public class func op_Explicit(p : dotnet.System.Drawing.Point) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_Size__op_Explicit_0__1__Point(&__thrown, p.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.PointF op_Implicit(System.Drawing.Point)
// docid: M:System.Drawing.Point.op_Implicit(System.Drawing.Point)
    public class func op_Implicit(p : dotnet.System.Drawing.Point) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_PointF__op_Implicit_0__1__Point(&__thrown, p.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Drawing.Point, System.Drawing.Point)
// docid: M:System.Drawing.Point.op_Inequality(System.Drawing.Point,System.Drawing.Point)
    /**
    Compares two  objects. The result specifies whether the values of the  or  properties of the two  objects are unequal.

    - Parameter left: A  to compare.
    - Parameter right: A  to compare.
    - Returns: 
         if the values of either the  properties or the  properties of  and  differ; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Drawing.Point, right : dotnet.System.Drawing.Point) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_bool__op_Inequality_0__2__Point_Point(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.Point op_Subtraction(System.Drawing.Point, System.Drawing.Size)
// docid: M:System.Drawing.Point.op_Subtraction(System.Drawing.Point,System.Drawing.Size)
    /**
    Translates a  by the negative of a given .

    - Parameter pt: The  to translate.
    - Parameter sz: A  that specifies the pair of numbers to subtract from the coordinates of .
    - Returns: A  structure that is translated by the negative of a given  structure.

    */
    public class func op_Subtraction(pt : dotnet.System.Drawing.Point, sz : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_Point__op_Subtraction_0__2__Point_Size(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // System.Drawing.Point Round(System.Drawing.PointF)
// docid: M:System.Drawing.Point.Round(System.Drawing.PointF)
    /**
    Converts the specified  to a  object by rounding the  values to the nearest integer.

    - Parameter value: The  to convert.
    - Returns: The  this method converts to.

    */
    public class func Round(value : dotnet.System.Drawing.PointF) throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_Point__Round_0__1__PointF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // System.Drawing.Point Subtract(System.Drawing.Point, System.Drawing.Size)
// docid: M:System.Drawing.Point.Subtract(System.Drawing.Point,System.Drawing.Size)
    /**
    Returns the result of subtracting specified  from the specified .

    - Parameter pt: The  to be subtracted from.
    - Parameter sz: The  to subtract from the .
    - Returns: The  that is the result of the subtraction operation.

    */
    public class func Subtract(pt : dotnet.System.Drawing.Point, sz : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_Point__Subtract_0__2__Point_Size(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Drawing.Point.ToString
    /**
    Converts this  to a human-readable string.

    - Returns: A string that represents this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Drawing.Point Truncate(System.Drawing.PointF)
// docid: M:System.Drawing.Point.Truncate(System.Drawing.PointF)
    /**
    Converts the specified  to a  by truncating the values of the .

    - Parameter value: The  to convert.
    - Returns: The  this method converts to.

    */
    public class func Truncate(value : dotnet.System.Drawing.PointF) throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_Point__Truncate_0__1__PointF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Drawing.Point.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_X()
// docid: M:System.Drawing.Point.get_X
    public func get_X() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_i32__get_X_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_X(System.Int32)
// docid: M:System.Drawing.Point.set_X(System.Int32)
    public func set_X(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Point_void__set_X_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Y()
// docid: M:System.Drawing.Point.get_Y
    public func get_Y() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Point_i32__get_Y_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Y(System.Int32)
// docid: M:System.Drawing.Point.set_Y(System.Int32)
    public func set_Y(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Point_void__set_Y_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Point


// type: System.Drawing.PointF
// boxed value type
    /**
    Represents an ordered pair of floating-point x- and y-coordinates that defines a point in a two-dimensional plane.

    */
public final class PointF
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Drawing_PointF_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Drawing.PointF Empty
    /**
    Represents a new instance of the  class with member data left uninitialized.

    */
    public class var Empty : dotnet.System.Drawing.PointF {
        get {
        let __return = dotnet.System.Drawing.PointF(hndl: System_Drawing_PointF_get_Empty());
            return __return;
        }
    }
    /**
    Gets a value indicating whether this  is empty.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets or sets the x-coordinate of this .

    */
    public var X : Swift.Float {
        get {
            return try! get_X();
        }
        set(v) {
            return try! set_X(value: v);
        }
    }
    /**
    Gets or sets the y-coordinate of this .

    */
    public var Y : Swift.Float {
        get {
            return try! get_Y();
        }
        set(v) {
            return try! set_Y(value: v);
        }
    }
    // .ctor(System.Single, System.Single)
// docid: M:System.Drawing.PointF.#ctor(System.Single,System.Single)
    /**
    Initializes a new instance of the  class with the specified coordinates.

    - Parameter x: The horizontal position of the point.
    - Parameter y: The vertical position of the point.
    */
    public init(x : Swift.Float, y : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_PointF_ctor_0__2__f32_f32(&__thrown, x, y);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Numerics.Vector2)
// docid: M:System.Drawing.PointF.#ctor(System.Numerics.Vector2)
    public init(vector : dotnet.System.Numerics.Vector2) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_PointF_ctor_0__1__Vector2(&__thrown, vector.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Drawing_PointF_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Drawing.PointF Add(System.Drawing.PointF, System.Drawing.Size)
// docid: M:System.Drawing.PointF.Add(System.Drawing.PointF,System.Drawing.Size)
    /**
    Translates a given  by the specified .

    - Parameter pt: The  to translate.
    - Parameter sz: The  that specifies the numbers to add to the coordinates of .
    - Returns: The translated .

    */
    public class func Add(pt : dotnet.System.Drawing.PointF, sz : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__Add_0__2__PointF_Size(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // System.Drawing.PointF Add(System.Drawing.PointF, System.Drawing.SizeF)
// docid: M:System.Drawing.PointF.Add(System.Drawing.PointF,System.Drawing.SizeF)
    /**
    Translates a given  by a specified .

    - Parameter pt: The  to translate.
    - Parameter sz: The  that specifies the numbers to add to the coordinates of .
    - Returns: The translated .

    */
    public class func Add(pt : dotnet.System.Drawing.PointF, sz : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__Add_0__2__PointF_SizeF(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // bool Equals(System.Drawing.PointF)
// docid: M:System.Drawing.PointF.Equals(System.Drawing.PointF)
    /**
    Indicates whether the current object is equal to another object of the same type.

    - Parameter other: An object to compare with this object.
    - Returns: 
         if the current object is equal to ; otherwise, .

    */
    public func Equals(other : dotnet.System.Drawing.PointF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_bool__Equals_0__1__PointF(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Drawing.PointF.Equals(System.Object)
    /**
    Specifies whether this  contains the same coordinates as the specified .

    - Parameter obj: The  to test.
    - Returns: This method returns  if  is a  and has the same coordinates as this .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Drawing.PointF.GetHashCode
    /**
    Returns a hash code for this  structure.

    - Returns: An integer value that specifies a hash value for this  structure.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Explicit(System.Drawing.PointF)
// docid: M:System.Drawing.PointF.op_Explicit(System.Drawing.PointF)
    public class func op_Explicit(point : dotnet.System.Drawing.PointF) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_Vector2__op_Explicit_0__1__PointF(&__thrown, point.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.PointF op_Explicit(System.Numerics.Vector2)
// docid: M:System.Drawing.PointF.op_Explicit(System.Numerics.Vector2)
    public class func op_Explicit(vector : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__op_Explicit_0__1__Vector2(&__thrown, vector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.PointF op_Addition(System.Drawing.PointF, System.Drawing.Size)
// docid: M:System.Drawing.PointF.op_Addition(System.Drawing.PointF,System.Drawing.Size)
    /**
    Translates a  by a given .

    - Parameter pt: The  to translate.
    - Parameter sz: A  that specifies the pair of numbers to add to the coordinates of .
    - Returns: The translated .

    */
    public class func op_Addition(pt : dotnet.System.Drawing.PointF, sz : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__op_Addition_0__2__PointF_Size(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.PointF op_Addition(System.Drawing.PointF, System.Drawing.SizeF)
// docid: M:System.Drawing.PointF.op_Addition(System.Drawing.PointF,System.Drawing.SizeF)
    /**
    Translates the  by the specified .

    - Parameter pt: The  to translate.
    - Parameter sz: The  that specifies the numbers to add to the x- and y-coordinates of the .
    - Returns: The translated .

    */
    public class func op_Addition(pt : dotnet.System.Drawing.PointF, sz : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__op_Addition_0__2__PointF_SizeF(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Drawing.PointF, System.Drawing.PointF)
// docid: M:System.Drawing.PointF.op_Equality(System.Drawing.PointF,System.Drawing.PointF)
    /**
    Compares two  structures. The result specifies whether the values of the  and  properties of the two  structures are equal.

    - Parameter left: A  to compare.
    - Parameter right: A  to compare.
    - Returns: 
         if the  and  values of the left and right  structures are equal; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Drawing.PointF, right : dotnet.System.Drawing.PointF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_bool__op_Equality_0__2__PointF_PointF(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Drawing.PointF, System.Drawing.PointF)
// docid: M:System.Drawing.PointF.op_Inequality(System.Drawing.PointF,System.Drawing.PointF)
    /**
    Determines whether the coordinates of the specified points are not equal.

    - Parameter left: A  to compare.
    - Parameter right: A  to compare.
    - Returns: 
         to indicate the  and  values of  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Drawing.PointF, right : dotnet.System.Drawing.PointF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_bool__op_Inequality_0__2__PointF_PointF(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.PointF op_Subtraction(System.Drawing.PointF, System.Drawing.Size)
// docid: M:System.Drawing.PointF.op_Subtraction(System.Drawing.PointF,System.Drawing.Size)
    /**
    Translates a  by the negative of a given .

    - Parameter pt: The  to translate.
    - Parameter sz: The  that specifies the numbers to subtract from the coordinates of .
    - Returns: The translated .

    */
    public class func op_Subtraction(pt : dotnet.System.Drawing.PointF, sz : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__op_Subtraction_0__2__PointF_Size(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.PointF op_Subtraction(System.Drawing.PointF, System.Drawing.SizeF)
// docid: M:System.Drawing.PointF.op_Subtraction(System.Drawing.PointF,System.Drawing.SizeF)
    /**
    Translates a  by the negative of a specified .

    - Parameter pt: The  to translate.
    - Parameter sz: The  that specifies the numbers to subtract from the coordinates of .
    - Returns: The translated .

    */
    public class func op_Subtraction(pt : dotnet.System.Drawing.PointF, sz : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__op_Subtraction_0__2__PointF_SizeF(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // System.Drawing.PointF Subtract(System.Drawing.PointF, System.Drawing.Size)
// docid: M:System.Drawing.PointF.Subtract(System.Drawing.PointF,System.Drawing.Size)
    /**
    Translates a  by the negative of a specified size.

    - Parameter pt: The  to translate.
    - Parameter sz: The  that specifies the numbers to subtract from the coordinates of .
    - Returns: The translated .

    */
    public class func Subtract(pt : dotnet.System.Drawing.PointF, sz : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__Subtract_0__2__PointF_Size(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // System.Drawing.PointF Subtract(System.Drawing.PointF, System.Drawing.SizeF)
// docid: M:System.Drawing.PointF.Subtract(System.Drawing.PointF,System.Drawing.SizeF)
    /**
    Translates a  by the negative of a specified size.

    - Parameter pt: The  to translate.
    - Parameter sz: The  that specifies the numbers to subtract from the coordinates of .
    - Returns: The translated .

    */
    public class func Subtract(pt : dotnet.System.Drawing.PointF, sz : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_PointF__Subtract_0__2__PointF_SizeF(&__thrown, pt.get_handle(), sz.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Drawing.PointF.ToString
    /**
    Converts this  to a human readable string.

    - Returns: A string that represents this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Numerics.Vector2 ToVector2()
// docid: M:System.Drawing.PointF.ToVector2
    public func ToVector2() throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_Vector2__ToVector2_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Drawing.PointF.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Single get_X()
// docid: M:System.Drawing.PointF.get_X
    public func get_X() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_f32__get_X_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_X(System.Single)
// docid: M:System.Drawing.PointF.set_X(System.Single)
    public func set_X(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_PointF_void__set_X_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_Y()
// docid: M:System.Drawing.PointF.get_Y
    public func get_Y() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointF_f32__get_Y_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Y(System.Single)
// docid: M:System.Drawing.PointF.set_Y(System.Single)
    public func set_Y(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_PointF_void__set_Y_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PointF


// type: System.Drawing.Rectangle
// boxed value type
    /**
    Stores a set of four integers that represent the location and size of a rectangle.

    */
public final class Rectangle
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Drawing_Rectangle_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Drawing.Rectangle Empty
    /**
    Represents a  structure with its properties left uninitialized.

    */
    public class var Empty : dotnet.System.Drawing.Rectangle {
        get {
        let __return = dotnet.System.Drawing.Rectangle(hndl: System_Drawing_Rectangle_get_Empty());
            return __return;
        }
    }
    /**
    Gets the y-coordinate that is the sum of the  and  property values of this  structure.

    */
    public var Bottom : Swift.Int32 {
        get {
            return try! get_Bottom();
        }
    }
    /**
    Gets or sets the height of this  structure.

    */
    public var Height : Swift.Int32 {
        get {
            return try! get_Height();
        }
        set(v) {
            return try! set_Height(value: v);
        }
    }
    /**
    Tests whether all numeric properties of this  have values of zero.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the x-coordinate of the left edge of this  structure.

    */
    public var Left : Swift.Int32 {
        get {
            return try! get_Left();
        }
    }
    /**
    Gets or sets the coordinates of the upper-left corner of this  structure.

    */
    public var Location : dotnet.System.Drawing.Point {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v);
        }
    }
    /**
    Gets the x-coordinate that is the sum of  and  property values of this  structure.

    */
    public var Right : Swift.Int32 {
        get {
            return try! get_Right();
        }
    }
    /**
    Gets or sets the size of this .

    */
    public var Size : dotnet.System.Drawing.Size {
        get {
            return try! get_Size();
        }
        set(v) {
            return try! set_Size(value: v);
        }
    }
    /**
    Gets the y-coordinate of the top edge of this  structure.

    */
    public var Top : Swift.Int32 {
        get {
            return try! get_Top();
        }
    }
    /**
    Gets or sets the width of this  structure.

    */
    public var Width : Swift.Int32 {
        get {
            return try! get_Width();
        }
        set(v) {
            return try! set_Width(value: v);
        }
    }
    /**
    Gets or sets the x-coordinate of the upper-left corner of this  structure.

    */
    public var X : Swift.Int32 {
        get {
            return try! get_X();
        }
        set(v) {
            return try! set_X(value: v);
        }
    }
    /**
    Gets or sets the y-coordinate of the upper-left corner of this  structure.

    */
    public var Y : Swift.Int32 {
        get {
            return try! get_Y();
        }
        set(v) {
            return try! set_Y(value: v);
        }
    }
    // .ctor(System.Drawing.Point, System.Drawing.Size)
// docid: M:System.Drawing.Rectangle.#ctor(System.Drawing.Point,System.Drawing.Size)
    /**
    Initializes a new instance of the  class with the specified location and size.

    - Parameter location: A  that represents the upper-left corner of the rectangular region.
    - Parameter size: A  that represents the width and height of the rectangular region.
    */
    public init(location : dotnet.System.Drawing.Point, size : dotnet.System.Drawing.Size) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_Rectangle_ctor_0__2__Point_Size(&__thrown, location.get_handle(), size.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Drawing.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class with the specified location and size.

    - Parameter x: The x-coordinate of the upper-left corner of the rectangle.
    - Parameter y: The y-coordinate of the upper-left corner of the rectangle.
    - Parameter width: The width of the rectangle.
    - Parameter height: The height of the rectangle.
    */
    public init(x : Swift.Int32, y : Swift.Int32, width : Swift.Int32, height : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_Rectangle_ctor_0__4__i32_i32_i32_i32(&__thrown, x, y, width, height);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Drawing_Rectangle_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Drawing.Rectangle Ceiling(System.Drawing.RectangleF)
// docid: M:System.Drawing.Rectangle.Ceiling(System.Drawing.RectangleF)
    /**
    Converts the specified  structure to a  structure by rounding the  values to the next higher integer values.

    - Parameter value: The  structure to be converted.
    - Returns: Returns a .

    */
    public class func Ceiling(value : dotnet.System.Drawing.RectangleF) throws -> dotnet.System.Drawing.Rectangle {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Rectangle__Ceiling_0__1__RectangleF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Rectangle(hndl : __return);
        }
    }
    // bool Contains(System.Drawing.Point)
// docid: M:System.Drawing.Rectangle.Contains(System.Drawing.Point)
    /**
    Determines if the specified point is contained within this  structure.

    - Parameter pt: The  to test.
    - Returns: This method returns  if the point represented by  is contained within this  structure; otherwise .

    */
    public func Contains(pt : dotnet.System.Drawing.Point) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__Contains_0__1__Point(&__thrown, self.get_handle(), pt.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Drawing.Rectangle)
// docid: M:System.Drawing.Rectangle.Contains(System.Drawing.Rectangle)
    /**
    Determines if the rectangular region represented by  is entirely contained within this  structure.

    - Parameter rect: The  to test.
    - Returns: This method returns  if the rectangular region represented by  is entirely contained within this  structure; otherwise .

    */
    public func Contains(rect : dotnet.System.Drawing.Rectangle) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__Contains_0__1__Rectangle(&__thrown, self.get_handle(), rect.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Int32, System.Int32)
// docid: M:System.Drawing.Rectangle.Contains(System.Int32,System.Int32)
    /**
    Determines if the specified point is contained within this  structure.

    - Parameter x: The x-coordinate of the point to test.
    - Parameter y: The y-coordinate of the point to test.
    - Returns: This method returns  if the point defined by  and  is contained within this  structure; otherwise .

    */
    public func Contains(x : Swift.Int32, y : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__Contains_0__2__i32_i32(&__thrown, self.get_handle(), x, y);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Drawing.Rectangle)
// docid: M:System.Drawing.Rectangle.Equals(System.Drawing.Rectangle)
    /**
    Indicates whether the current object is equal to another object of the same type.

    - Parameter other: An object to compare with this object.
    - Returns: 
         if the current object is equal to ; otherwise, .

    */
    public func Equals(other : dotnet.System.Drawing.Rectangle) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__Equals_0__1__Rectangle(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Drawing.Rectangle.Equals(System.Object)
    /**
    Tests whether  is a  structure with the same location and size of this  structure.

    - Parameter obj: The  to test.
    - Returns: This method returns  if  is a  structure and its , , , and  properties are equal to the corresponding properties of this  structure; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Drawing.Rectangle FromLTRB(System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Drawing.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Creates a  structure with the specified edge locations.

    - Parameter left: The x-coordinate of the upper-left corner of this  structure.
    - Parameter top: The y-coordinate of the upper-left corner of this  structure.
    - Parameter right: The x-coordinate of the lower-right corner of this  structure.
    - Parameter bottom: The y-coordinate of the lower-right corner of this  structure.
    - Returns: The new  that this method creates.

    */
    public class func FromLTRB(left : Swift.Int32, top : Swift.Int32, right : Swift.Int32, bottom : Swift.Int32) throws -> dotnet.System.Drawing.Rectangle {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Rectangle__FromLTRB_0__4__i32_i32_i32_i32(&__thrown, left, top, right, bottom);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Rectangle(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Drawing.Rectangle.GetHashCode
    /**
    Returns the hash code for this  structure. For information about the use of hash codes, see  .

    - Returns: An integer that represents the hash code for this rectangle.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Drawing.Rectangle Inflate(System.Drawing.Rectangle, System.Int32, System.Int32)
// docid: M:System.Drawing.Rectangle.Inflate(System.Drawing.Rectangle,System.Int32,System.Int32)
    /**
    Creates and returns an enlarged copy of the specified  structure. The copy is enlarged by the specified amount. The original  structure remains unmodified.

    - Parameter rect: The  with which to start. This rectangle is not modified.
    - Parameter x: The amount to inflate this  horizontally.
    - Parameter y: The amount to inflate this  vertically.
    - Returns: The enlarged .

    */
    public class func Inflate(rect : dotnet.System.Drawing.Rectangle, x : Swift.Int32, y : Swift.Int32) throws -> dotnet.System.Drawing.Rectangle {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Rectangle__Inflate_0__3__Rectangle_i32_i32(&__thrown, rect.get_handle(), x, y);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Rectangle(hndl : __return);
        }
    }
    // void Inflate(System.Drawing.Size)
// docid: M:System.Drawing.Rectangle.Inflate(System.Drawing.Size)
    /**
    Enlarges this  by the specified amount.

    - Parameter size: The amount to inflate this rectangle.
    */
    public func Inflate(size : dotnet.System.Drawing.Size) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__Inflate_0__1__Size(&__thrown, self.get_handle(), size.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Inflate(System.Int32, System.Int32)
// docid: M:System.Drawing.Rectangle.Inflate(System.Int32,System.Int32)
    /**
    Enlarges this  by the specified amount.

    - Parameter width: The amount to inflate this  horizontally.
    - Parameter height: The amount to inflate this  vertically.
    */
    public func Inflate(width : Swift.Int32, height : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__Inflate_0__2__i32_i32(&__thrown, self.get_handle(), width, height);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Intersect(System.Drawing.Rectangle)
// docid: M:System.Drawing.Rectangle.Intersect(System.Drawing.Rectangle)
    /**
    Replaces this  with the intersection of itself and the specified .

    - Parameter rect: The  with which to intersect.
    */
    public func Intersect(rect : dotnet.System.Drawing.Rectangle) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__Intersect_0__1__Rectangle(&__thrown, self.get_handle(), rect.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Drawing.Rectangle Intersect(System.Drawing.Rectangle, System.Drawing.Rectangle)
// docid: M:System.Drawing.Rectangle.Intersect(System.Drawing.Rectangle,System.Drawing.Rectangle)
    /**
    Returns a third  structure that represents the intersection of two other  structures. If there is no intersection, an empty  is returned.

    - Parameter a: A rectangle to intersect.
    - Parameter b: A rectangle to intersect.
    - Returns: A  that represents the intersection of  and .

    */
    public class func Intersect(a : dotnet.System.Drawing.Rectangle, b : dotnet.System.Drawing.Rectangle) throws -> dotnet.System.Drawing.Rectangle {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Rectangle__Intersect_0__2__Rectangle_Rectangle(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Rectangle(hndl : __return);
        }
    }
    // bool IntersectsWith(System.Drawing.Rectangle)
// docid: M:System.Drawing.Rectangle.IntersectsWith(System.Drawing.Rectangle)
    /**
    Determines if this rectangle intersects with .

    - Parameter rect: The rectangle to test.
    - Returns: This method returns  if there is any intersection, otherwise .

    */
    public func IntersectsWith(rect : dotnet.System.Drawing.Rectangle) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__IntersectsWith_0__1__Rectangle(&__thrown, self.get_handle(), rect.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Offset(System.Drawing.Point)
// docid: M:System.Drawing.Rectangle.Offset(System.Drawing.Point)
    /**
    Adjusts the location of this rectangle by the specified amount.

    - Parameter pos: Amount to offset the location.
    */
    public func Offset(pos : dotnet.System.Drawing.Point) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__Offset_0__1__Point(&__thrown, self.get_handle(), pos.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Offset(System.Int32, System.Int32)
// docid: M:System.Drawing.Rectangle.Offset(System.Int32,System.Int32)
    /**
    Adjusts the location of this rectangle by the specified amount.

    - Parameter x: The horizontal offset.
    - Parameter y: The vertical offset.
    */
    public func Offset(x : Swift.Int32, y : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__Offset_0__2__i32_i32(&__thrown, self.get_handle(), x, y);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Drawing.Rectangle, System.Drawing.Rectangle)
// docid: M:System.Drawing.Rectangle.op_Equality(System.Drawing.Rectangle,System.Drawing.Rectangle)
    /**
    Tests whether two  structures have equal location and size.

    - Parameter left: The  structure that is to the left of the equality operator.
    - Parameter right: The  structure that is to the right of the equality operator.
    - Returns: This operator returns  if the two  structures have equal , , , and  properties.

    */
    public class func op_Equality(left : dotnet.System.Drawing.Rectangle, right : dotnet.System.Drawing.Rectangle) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__op_Equality_0__2__Rectangle_Rectangle(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Drawing.Rectangle, System.Drawing.Rectangle)
// docid: M:System.Drawing.Rectangle.op_Inequality(System.Drawing.Rectangle,System.Drawing.Rectangle)
    /**
    Tests whether two  structures differ in location or size.

    - Parameter left: The  structure that is to the left of the inequality operator.
    - Parameter right: The  structure that is to the right of the inequality operator.
    - Returns: This operator returns  if any of the , ,  or  properties of the two  structures are unequal; otherwise .

    */
    public class func op_Inequality(left : dotnet.System.Drawing.Rectangle, right : dotnet.System.Drawing.Rectangle) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__op_Inequality_0__2__Rectangle_Rectangle(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Drawing.Rectangle Round(System.Drawing.RectangleF)
// docid: M:System.Drawing.Rectangle.Round(System.Drawing.RectangleF)
    /**
    Converts the specified  to a  by rounding the  values to the nearest integer values.

    - Parameter value: The  to be converted.
    - Returns: The rounded integer value of the .

    */
    public class func Round(value : dotnet.System.Drawing.RectangleF) throws -> dotnet.System.Drawing.Rectangle {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Rectangle__Round_0__1__RectangleF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Rectangle(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Drawing.Rectangle.ToString
    /**
    Converts the attributes of this  to a human-readable string.

    - Returns: A string that contains the position, width, and height of this  structure ¾ for example, {X=20, Y=20, Width=100, Height=50}

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Drawing.Rectangle Truncate(System.Drawing.RectangleF)
// docid: M:System.Drawing.Rectangle.Truncate(System.Drawing.RectangleF)
    /**
    Converts the specified  to a  by truncating the  values.

    - Parameter value: The  to be converted.
    - Returns: The truncated value of the  .

    */
    public class func Truncate(value : dotnet.System.Drawing.RectangleF) throws -> dotnet.System.Drawing.Rectangle {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Rectangle__Truncate_0__1__RectangleF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Rectangle(hndl : __return);
        }
    }
    // System.Drawing.Rectangle Union(System.Drawing.Rectangle, System.Drawing.Rectangle)
// docid: M:System.Drawing.Rectangle.Union(System.Drawing.Rectangle,System.Drawing.Rectangle)
    /**
    Gets a  structure that contains the union of two  structures.

    - Parameter a: A rectangle to union.
    - Parameter b: A rectangle to union.
    - Returns: A  structure that bounds the union of the two  structures.

    */
    public class func Union(a : dotnet.System.Drawing.Rectangle, b : dotnet.System.Drawing.Rectangle) throws -> dotnet.System.Drawing.Rectangle {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Rectangle__Union_0__2__Rectangle_Rectangle(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Rectangle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Bottom()
// docid: M:System.Drawing.Rectangle.get_Bottom
    public func get_Bottom() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__get_Bottom_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Height()
// docid: M:System.Drawing.Rectangle.get_Height
    public func get_Height() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__get_Height_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Height(System.Int32)
// docid: M:System.Drawing.Rectangle.set_Height(System.Int32)
    public func set_Height(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__set_Height_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Drawing.Rectangle.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Left()
// docid: M:System.Drawing.Rectangle.get_Left
    public func get_Left() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__get_Left_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.Point get_Location()
// docid: M:System.Drawing.Rectangle.get_Location
    public func get_Location() throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Point__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Location(System.Drawing.Point)
// docid: M:System.Drawing.Rectangle.set_Location(System.Drawing.Point)
    public func set_Location(value : dotnet.System.Drawing.Point) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__set_Location_0__1__Point(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Right()
// docid: M:System.Drawing.Rectangle.get_Right
    public func get_Right() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__get_Right_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.Size get_Size()
// docid: M:System.Drawing.Rectangle.get_Size
    public func get_Size() throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_Size__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Size(System.Drawing.Size)
// docid: M:System.Drawing.Rectangle.set_Size(System.Drawing.Size)
    public func set_Size(value : dotnet.System.Drawing.Size) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__set_Size_0__1__Size(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Top()
// docid: M:System.Drawing.Rectangle.get_Top
    public func get_Top() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__get_Top_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Width()
// docid: M:System.Drawing.Rectangle.get_Width
    public func get_Width() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__get_Width_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Width(System.Int32)
// docid: M:System.Drawing.Rectangle.set_Width(System.Int32)
    public func set_Width(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__set_Width_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_X()
// docid: M:System.Drawing.Rectangle.get_X
    public func get_X() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__get_X_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_X(System.Int32)
// docid: M:System.Drawing.Rectangle.set_X(System.Int32)
    public func set_X(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__set_X_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Y()
// docid: M:System.Drawing.Rectangle.get_Y
    public func get_Y() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Rectangle_i32__get_Y_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Y(System.Int32)
// docid: M:System.Drawing.Rectangle.set_Y(System.Int32)
    public func set_Y(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Rectangle_void__set_Y_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Rectangle


// type: System.Drawing.RectangleF
// boxed value type
    /**
    Stores a set of four floating-point numbers that represent the location and size of a rectangle. For more advanced region functions, use a  object.

    */
public final class RectangleF
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Drawing_RectangleF_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Drawing.RectangleF Empty
    /**
    Represents an instance of the  class with its members uninitialized.

    */
    public class var Empty : dotnet.System.Drawing.RectangleF {
        get {
        let __return = dotnet.System.Drawing.RectangleF(hndl: System_Drawing_RectangleF_get_Empty());
            return __return;
        }
    }
    /**
    Gets the y-coordinate that is the sum of  and  of this  structure.

    */
    public var Bottom : Swift.Float {
        get {
            return try! get_Bottom();
        }
    }
    /**
    Gets or sets the height of this  structure.

    */
    public var Height : Swift.Float {
        get {
            return try! get_Height();
        }
        set(v) {
            return try! set_Height(value: v);
        }
    }
    /**
    Gets a value that indicates whether the  or  property of this  has a value of zero.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the x-coordinate of the left edge of this  structure.

    */
    public var Left : Swift.Float {
        get {
            return try! get_Left();
        }
    }
    /**
    Gets or sets the coordinates of the upper-left corner of this  structure.

    */
    public var Location : dotnet.System.Drawing.PointF {
        get {
            return try! get_Location();
        }
        set(v) {
            return try! set_Location(value: v);
        }
    }
    /**
    Gets the x-coordinate that is the sum of  and  of this  structure.

    */
    public var Right : Swift.Float {
        get {
            return try! get_Right();
        }
    }
    /**
    Gets or sets the size of this .

    */
    public var Size : dotnet.System.Drawing.SizeF {
        get {
            return try! get_Size();
        }
        set(v) {
            return try! set_Size(value: v);
        }
    }
    /**
    Gets the y-coordinate of the top edge of this  structure.

    */
    public var Top : Swift.Float {
        get {
            return try! get_Top();
        }
    }
    /**
    Gets or sets the width of this  structure.

    */
    public var Width : Swift.Float {
        get {
            return try! get_Width();
        }
        set(v) {
            return try! set_Width(value: v);
        }
    }
    /**
    Gets or sets the x-coordinate of the upper-left corner of this  structure.

    */
    public var X : Swift.Float {
        get {
            return try! get_X();
        }
        set(v) {
            return try! set_X(value: v);
        }
    }
    /**
    Gets or sets the y-coordinate of the upper-left corner of this  structure.

    */
    public var Y : Swift.Float {
        get {
            return try! get_Y();
        }
        set(v) {
            return try! set_Y(value: v);
        }
    }
    // .ctor(System.Drawing.PointF, System.Drawing.SizeF)
// docid: M:System.Drawing.RectangleF.#ctor(System.Drawing.PointF,System.Drawing.SizeF)
    /**
    Initializes a new instance of the  class with the specified location and size.

    - Parameter location: A  that represents the upper-left corner of the rectangular region.
    - Parameter size: A  that represents the width and height of the rectangular region.
    */
    public init(location : dotnet.System.Drawing.PointF, size : dotnet.System.Drawing.SizeF) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_RectangleF_ctor_0__2__PointF_SizeF(&__thrown, location.get_handle(), size.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Drawing.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)
    /**
    Initializes a new instance of the  class with the specified location and size.

    - Parameter x: The x-coordinate of the upper-left corner of the rectangle.
    - Parameter y: The y-coordinate of the upper-left corner of the rectangle.
    - Parameter width: The width of the rectangle.
    - Parameter height: The height of the rectangle.
    */
    public init(x : Swift.Float, y : Swift.Float, width : Swift.Float, height : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_RectangleF_ctor_0__4__f32_f32_f32_f32(&__thrown, x, y, width, height);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Numerics.Vector4)
// docid: M:System.Drawing.RectangleF.#ctor(System.Numerics.Vector4)
    public init(vector : dotnet.System.Numerics.Vector4) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_RectangleF_ctor_0__1__Vector4(&__thrown, vector.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Drawing_RectangleF_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Contains(System.Drawing.PointF)
// docid: M:System.Drawing.RectangleF.Contains(System.Drawing.PointF)
    /**
    Determines if the specified point is contained within this  structure.

    - Parameter pt: The  to test.
    - Returns: 
         if the point represented by the  parameter is contained within this  structure; otherwise, .

    */
    public func Contains(pt : dotnet.System.Drawing.PointF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__Contains_0__1__PointF(&__thrown, self.get_handle(), pt.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.Contains(System.Drawing.RectangleF)
    /**
    Determines if the rectangular region represented by  is entirely contained within this  structure.

    - Parameter rect: The  to test.
    - Returns: 
         if the rectangular region represented by  is entirely contained within the rectangular region represented by this ; otherwise, .

    */
    public func Contains(rect : dotnet.System.Drawing.RectangleF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__Contains_0__1__RectangleF(&__thrown, self.get_handle(), rect.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Single, System.Single)
// docid: M:System.Drawing.RectangleF.Contains(System.Single,System.Single)
    /**
    Determines if the specified point is contained within this  structure.

    - Parameter x: The x-coordinate of the point to test.
    - Parameter y: The y-coordinate of the point to test.
    - Returns: 
         if the point defined by  and  is contained within this  structure; otherwise, .

    */
    public func Contains(x : Swift.Float, y : Swift.Float) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__Contains_0__2__f32_f32(&__thrown, self.get_handle(), x, y);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.Equals(System.Drawing.RectangleF)
    /**
    Indicates whether the current object is equal to another object of the same type.

    - Parameter other: An object to compare with this object.
    - Returns: 
         if the current object is equal to ; otherwise, .

    */
    public func Equals(other : dotnet.System.Drawing.RectangleF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__Equals_0__1__RectangleF(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Drawing.RectangleF.Equals(System.Object)
    /**
    Tests whether  is a  with the same location and size of this .

    - Parameter obj: The  to test.
    - Returns: 
         if  is a  and its , , , and  properties are equal to the corresponding properties of this ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Drawing.RectangleF FromLTRB(System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Drawing.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)
    /**
    Creates a  structure with upper-left corner and lower-right corner at the specified locations.

    - Parameter left: The x-coordinate of the upper-left corner of the rectangular region.
    - Parameter top: The y-coordinate of the upper-left corner of the rectangular region.
    - Parameter right: The x-coordinate of the lower-right corner of the rectangular region.
    - Parameter bottom: The y-coordinate of the lower-right corner of the rectangular region.
    - Returns: The new  that this method creates.

    */
    public class func FromLTRB(left : Swift.Float, top : Swift.Float, right : Swift.Float, bottom : Swift.Float) throws -> dotnet.System.Drawing.RectangleF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_RectangleF__FromLTRB_0__4__f32_f32_f32_f32(&__thrown, left, top, right, bottom);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.RectangleF(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Drawing.RectangleF.GetHashCode
    /**
    Gets the hash code for this  structure. For information about the use of hash codes, see .

    - Returns: The hash code for this .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Drawing.RectangleF Inflate(System.Drawing.RectangleF, System.Single, System.Single)
// docid: M:System.Drawing.RectangleF.Inflate(System.Drawing.RectangleF,System.Single,System.Single)
    /**
    Creates and returns an enlarged copy of the specified  structure. The copy is enlarged by the specified amount and the original rectangle remains unmodified.

    - Parameter rect: The  to be copied. This rectangle is not modified.
    - Parameter x: The amount to enlarge the copy of the rectangle horizontally.
    - Parameter y: The amount to enlarge the copy of the rectangle vertically.
    - Returns: The enlarged .

    */
    public class func Inflate(rect : dotnet.System.Drawing.RectangleF, x : Swift.Float, y : Swift.Float) throws -> dotnet.System.Drawing.RectangleF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_RectangleF__Inflate_0__3__RectangleF_f32_f32(&__thrown, rect.get_handle(), x, y);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.RectangleF(hndl : __return);
        }
    }
    // void Inflate(System.Drawing.SizeF)
// docid: M:System.Drawing.RectangleF.Inflate(System.Drawing.SizeF)
    /**
    Enlarges this  by the specified amount.

    - Parameter size: The amount to inflate this rectangle.
    */
    public func Inflate(size : dotnet.System.Drawing.SizeF) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__Inflate_0__1__SizeF(&__thrown, self.get_handle(), size.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Inflate(System.Single, System.Single)
// docid: M:System.Drawing.RectangleF.Inflate(System.Single,System.Single)
    /**
    Enlarges this  structure by the specified amount.

    - Parameter x: The amount to inflate this  structure horizontally.
    - Parameter y: The amount to inflate this  structure vertically.
    */
    public func Inflate(x : Swift.Float, y : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__Inflate_0__2__f32_f32(&__thrown, self.get_handle(), x, y);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Intersect(System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.Intersect(System.Drawing.RectangleF)
    /**
    Replaces this  structure with the intersection of itself and the specified  structure.

    - Parameter rect: The rectangle to intersect.
    */
    public func Intersect(rect : dotnet.System.Drawing.RectangleF) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__Intersect_0__1__RectangleF(&__thrown, self.get_handle(), rect.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Drawing.RectangleF Intersect(System.Drawing.RectangleF, System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.Intersect(System.Drawing.RectangleF,System.Drawing.RectangleF)
    /**
    Returns a  structure that represents the intersection of two rectangles. If there is no intersection, and empty  is returned.

    - Parameter a: A rectangle to intersect.
    - Parameter b: A rectangle to intersect.
    - Returns: A third  structure the size of which represents the overlapped area of the two specified rectangles.

    */
    public class func Intersect(a : dotnet.System.Drawing.RectangleF, b : dotnet.System.Drawing.RectangleF) throws -> dotnet.System.Drawing.RectangleF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_RectangleF__Intersect_0__2__RectangleF_RectangleF(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.RectangleF(hndl : __return);
        }
    }
    // bool IntersectsWith(System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.IntersectsWith(System.Drawing.RectangleF)
    /**
    Determines if this rectangle intersects with .

    - Parameter rect: The rectangle to test.
    - Returns: 
         if there is any intersection; otherwise, .

    */
    public func IntersectsWith(rect : dotnet.System.Drawing.RectangleF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__IntersectsWith_0__1__RectangleF(&__thrown, self.get_handle(), rect.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Offset(System.Drawing.PointF)
// docid: M:System.Drawing.RectangleF.Offset(System.Drawing.PointF)
    /**
    Adjusts the location of this rectangle by the specified amount.

    - Parameter pos: The amount to offset the location.
    */
    public func Offset(pos : dotnet.System.Drawing.PointF) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__Offset_0__1__PointF(&__thrown, self.get_handle(), pos.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Offset(System.Single, System.Single)
// docid: M:System.Drawing.RectangleF.Offset(System.Single,System.Single)
    /**
    Adjusts the location of this rectangle by the specified amount.

    - Parameter x: The amount to offset the location horizontally.
    - Parameter y: The amount to offset the location vertically.
    */
    public func Offset(x : Swift.Float, y : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__Offset_0__2__f32_f32(&__thrown, self.get_handle(), x, y);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Numerics.Vector4 op_Explicit(System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.op_Explicit(System.Drawing.RectangleF)
    public class func op_Explicit(rectangle : dotnet.System.Drawing.RectangleF) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_Vector4__op_Explicit_0__1__RectangleF(&__thrown, rectangle.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.RectangleF op_Explicit(System.Numerics.Vector4)
// docid: M:System.Drawing.RectangleF.op_Explicit(System.Numerics.Vector4)
    public class func op_Explicit(vector : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Drawing.RectangleF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_RectangleF__op_Explicit_0__1__Vector4(&__thrown, vector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.RectangleF(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Drawing.RectangleF, System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.op_Equality(System.Drawing.RectangleF,System.Drawing.RectangleF)
    /**
    Tests whether two  structures have equal location and size.

    - Parameter left: The  structure that is to the left of the equality operator.
    - Parameter right: The  structure that is to the right of the equality operator.
    - Returns: 
         if the two specified  structures have equal , , , and  properties; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Drawing.RectangleF, right : dotnet.System.Drawing.RectangleF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__op_Equality_0__2__RectangleF_RectangleF(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.RectangleF op_Implicit(System.Drawing.Rectangle)
// docid: M:System.Drawing.RectangleF.op_Implicit(System.Drawing.Rectangle)
    public class func op_Implicit(r : dotnet.System.Drawing.Rectangle) throws -> dotnet.System.Drawing.RectangleF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_RectangleF__op_Implicit_0__1__Rectangle(&__thrown, r.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.RectangleF(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Drawing.RectangleF, System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.op_Inequality(System.Drawing.RectangleF,System.Drawing.RectangleF)
    /**
    Tests whether two  structures differ in location or size.

    - Parameter left: The  structure that is to the left of the inequality operator.
    - Parameter right: The  structure that is to the right of the inequality operator.
    - Returns: 
         if any of the  , , , or  properties of the two  structures are unequal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Drawing.RectangleF, right : dotnet.System.Drawing.RectangleF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__op_Inequality_0__2__RectangleF_RectangleF(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Drawing.RectangleF.ToString
    /**
    Converts the  and  of this  to a human-readable string.

    - Returns: A string that contains the position, width, and height of this  structure. For example, "{X=20, Y=20, Width=100, Height=50}".

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Numerics.Vector4 ToVector4()
// docid: M:System.Drawing.RectangleF.ToVector4
    public func ToVector4() throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_Vector4__ToVector4_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Drawing.RectangleF Union(System.Drawing.RectangleF, System.Drawing.RectangleF)
// docid: M:System.Drawing.RectangleF.Union(System.Drawing.RectangleF,System.Drawing.RectangleF)
    /**
    Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.

    - Parameter a: A rectangle to union.
    - Parameter b: A rectangle to union.
    - Returns: A third  structure that contains both of the two rectangles that form the union.

    */
    public class func Union(a : dotnet.System.Drawing.RectangleF, b : dotnet.System.Drawing.RectangleF) throws -> dotnet.System.Drawing.RectangleF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_RectangleF__Union_0__2__RectangleF_RectangleF(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.RectangleF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Single get_Bottom()
// docid: M:System.Drawing.RectangleF.get_Bottom
    public func get_Bottom() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_f32__get_Bottom_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Single get_Height()
// docid: M:System.Drawing.RectangleF.get_Height
    public func get_Height() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_f32__get_Height_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Height(System.Single)
// docid: M:System.Drawing.RectangleF.set_Height(System.Single)
    public func set_Height(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__set_Height_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Drawing.RectangleF.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Single get_Left()
// docid: M:System.Drawing.RectangleF.get_Left
    public func get_Left() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_f32__get_Left_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.PointF get_Location()
// docid: M:System.Drawing.RectangleF.get_Location
    public func get_Location() throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_PointF__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Location(System.Drawing.PointF)
// docid: M:System.Drawing.RectangleF.set_Location(System.Drawing.PointF)
    public func set_Location(value : dotnet.System.Drawing.PointF) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__set_Location_0__1__PointF(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_Right()
// docid: M:System.Drawing.RectangleF.get_Right
    public func get_Right() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_f32__get_Right_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.SizeF get_Size()
// docid: M:System.Drawing.RectangleF.get_Size
    public func get_Size() throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_SizeF__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Size(System.Drawing.SizeF)
// docid: M:System.Drawing.RectangleF.set_Size(System.Drawing.SizeF)
    public func set_Size(value : dotnet.System.Drawing.SizeF) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__set_Size_0__1__SizeF(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_Top()
// docid: M:System.Drawing.RectangleF.get_Top
    public func get_Top() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_f32__get_Top_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Single get_Width()
// docid: M:System.Drawing.RectangleF.get_Width
    public func get_Width() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_f32__get_Width_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Width(System.Single)
// docid: M:System.Drawing.RectangleF.set_Width(System.Single)
    public func set_Width(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__set_Width_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_X()
// docid: M:System.Drawing.RectangleF.get_X
    public func get_X() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_f32__get_X_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_X(System.Single)
// docid: M:System.Drawing.RectangleF.set_X(System.Single)
    public func set_X(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__set_X_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Single get_Y()
// docid: M:System.Drawing.RectangleF.get_Y
    public func get_Y() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleF_f32__get_Y_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Y(System.Single)
// docid: M:System.Drawing.RectangleF.set_Y(System.Single)
    public func set_Y(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_RectangleF_void__set_Y_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RectangleF


// type: System.Drawing.Size
// boxed value type
    /**
    Stores an ordered pair of integers, which specify a  and .

    */
public final class Size
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Drawing_Size_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Drawing.Size Empty
    /**
    Gets a  structure that has a  and  value of 0.

    */
    public class var Empty : dotnet.System.Drawing.Size {
        get {
        let __return = dotnet.System.Drawing.Size(hndl: System_Drawing_Size_get_Empty());
            return __return;
        }
    }
    /**
    Gets or sets the vertical component of this  structure.

    */
    public var Height : Swift.Int32 {
        get {
            return try! get_Height();
        }
        set(v) {
            return try! set_Height(value: v);
        }
    }
    /**
    Tests whether this  structure has width and height of 0.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets or sets the horizontal component of this  structure.

    */
    public var Width : Swift.Int32 {
        get {
            return try! get_Width();
        }
        set(v) {
            return try! set_Width(value: v);
        }
    }
    // .ctor(System.Drawing.Point)
// docid: M:System.Drawing.Size.#ctor(System.Drawing.Point)
    /**
    Initializes a new instance of the  structure from the specified  structure.

    - Parameter pt: The  structure from which to initialize this  structure.
    */
    public init(pt : dotnet.System.Drawing.Point) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_Size_ctor_0__1__Point(&__thrown, pt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Int32)
// docid: M:System.Drawing.Size.#ctor(System.Int32,System.Int32)
    /**
    Initializes a new instance of the  structure from the specified dimensions.

    - Parameter width: The width component of the new .
    - Parameter height: The height component of the new .
    */
    public init(width : Swift.Int32, height : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_Size_ctor_0__2__i32_i32(&__thrown, width, height);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Drawing_Size_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Drawing.Size Add(System.Drawing.Size, System.Drawing.Size)
// docid: M:System.Drawing.Size.Add(System.Drawing.Size,System.Drawing.Size)
    /**
    Adds the width and height of one  structure to the width and height of another  structure.

    - Parameter sz1: The first  structure to add.
    - Parameter sz2: The second  structure to add.
    - Returns: A  structure that is the result of the addition operation.

    */
    public class func Add(sz1 : dotnet.System.Drawing.Size, sz2 : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__Add_0__2__Size_Size(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // System.Drawing.Size Ceiling(System.Drawing.SizeF)
// docid: M:System.Drawing.Size.Ceiling(System.Drawing.SizeF)
    /**
    Converts the specified  structure to a  structure by rounding the values of the  structure to the next higher integer values.

    - Parameter value: The  structure to convert.
    - Returns: The  structure this method converts to.

    */
    public class func Ceiling(value : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__Ceiling_0__1__SizeF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // bool Equals(System.Drawing.Size)
// docid: M:System.Drawing.Size.Equals(System.Drawing.Size)
    /**
    Indicates whether the current object is equal to another object of the same type.

    - Parameter other: An object to compare with this object.
    - Returns: 
         if the current object is equal to ; otherwise, .

    */
    public func Equals(other : dotnet.System.Drawing.Size) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_bool__Equals_0__1__Size(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Drawing.Size.Equals(System.Object)
    /**
    Tests to see whether the specified object is a  structure with the same dimensions as this  structure.

    - Parameter obj: The  to test.
    - Returns: 
         if  is a  and has the same width and height as this ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Drawing.Size.GetHashCode
    /**
    Returns a hash code for this  structure.

    - Returns: An integer value that specifies a hash value for this  structure.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Drawing.Size op_Addition(System.Drawing.Size, System.Drawing.Size)
// docid: M:System.Drawing.Size.op_Addition(System.Drawing.Size,System.Drawing.Size)
    /**
    Adds the width and height of one  structure to the width and height of another  structure.

    - Parameter sz1: The first  to add.
    - Parameter sz2: The second  to add.
    - Returns: A  structure that is the result of the addition operation.

    */
    public class func op_Addition(sz1 : dotnet.System.Drawing.Size, sz2 : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__op_Addition_0__2__Size_Size(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Size op_Division(System.Drawing.Size, System.Int32)
// docid: M:System.Drawing.Size.op_Division(System.Drawing.Size,System.Int32)
    /**
    Divides the specified  by the specified integer.

    - Parameter left: The dividend.
    - Parameter right: The divisor.
    - Returns: A new , which contains the result of dividing 's height by  and 's width by , respectively.

    */
    public class func op_Division(left : dotnet.System.Drawing.Size, right : Swift.Int32) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__op_Division_0__2__Size_i32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Division(System.Drawing.Size, System.Single)
// docid: M:System.Drawing.Size.op_Division(System.Drawing.Size,System.Single)
    /**
    Divides the specified  by the specified single-precision floating-point number.

    - Parameter left: The dividend.
    - Parameter right: The divisor.
    - Returns: The result of dividing 's width and height by .

    */
    public class func op_Division(left : dotnet.System.Drawing.Size, right : Swift.Float) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_SizeF__op_Division_0__2__Size_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Drawing.Size, System.Drawing.Size)
// docid: M:System.Drawing.Size.op_Equality(System.Drawing.Size,System.Drawing.Size)
    /**
    Tests whether two  structures are equal.

    - Parameter sz1: The  structure on the left side of the equality operator.
    - Parameter sz2: The  structure on the right of the equality operator.
    - Returns: 
         if  and  have equal width and height; otherwise, .

    */
    public class func op_Equality(sz1 : dotnet.System.Drawing.Size, sz2 : dotnet.System.Drawing.Size) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_bool__op_Equality_0__2__Size_Size(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.Point op_Explicit(System.Drawing.Size)
// docid: M:System.Drawing.Size.op_Explicit(System.Drawing.Size)
    public class func op_Explicit(size : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Point {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Point__op_Explicit_0__1__Size(&__thrown, size.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Point(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Implicit(System.Drawing.Size)
// docid: M:System.Drawing.Size.op_Implicit(System.Drawing.Size)
    public class func op_Implicit(p : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_SizeF__op_Implicit_0__1__Size(&__thrown, p.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Drawing.Size, System.Drawing.Size)
// docid: M:System.Drawing.Size.op_Inequality(System.Drawing.Size,System.Drawing.Size)
    /**
    Tests whether two  structures are different.

    - Parameter sz1: The  structure on the left of the inequality operator.
    - Parameter sz2: The  structure on the right of the inequality operator.
    - Returns: 
         if  and  differ either in width or height;  if  and  are equal.

    */
    public class func op_Inequality(sz1 : dotnet.System.Drawing.Size, sz2 : dotnet.System.Drawing.Size) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_bool__op_Inequality_0__2__Size_Size(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.Size op_Multiply(System.Drawing.Size, System.Int32)
// docid: M:System.Drawing.Size.op_Multiply(System.Drawing.Size,System.Int32)
    /**
    Multiplies the specified  by the specified integer.

    - Parameter left: The multiplicand.
    - Parameter right: The multiplier.
    - Returns: The result of multiplying 's width and height by .

    */
    public class func op_Multiply(left : dotnet.System.Drawing.Size, right : Swift.Int32) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__op_Multiply_0__2__Size_i32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Multiply(System.Drawing.Size, System.Single)
// docid: M:System.Drawing.Size.op_Multiply(System.Drawing.Size,System.Single)
    /**
    Multiplies the specified  by the specified single-precision floating-point number.

    - Parameter left: The multiplicand.
    - Parameter right: The multiplier.
    - Returns: The result of multiplying 's width and height by .

    */
    public class func op_Multiply(left : dotnet.System.Drawing.Size, right : Swift.Float) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_SizeF__op_Multiply_0__2__Size_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Size op_Multiply(System.Int32, System.Drawing.Size)
// docid: M:System.Drawing.Size.op_Multiply(System.Int32,System.Drawing.Size)
    /**
    Multiplies the specified integer by the specified .

    - Parameter left: The multiplier.
    - Parameter right: The multiplicand.
    - Returns: The result of multiplying 's width and height by .

    */
    public class func op_Multiply(left : Swift.Int32, right : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__op_Multiply_0__2__i32_Size(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Multiply(System.Single, System.Drawing.Size)
// docid: M:System.Drawing.Size.op_Multiply(System.Single,System.Drawing.Size)
    /**
    Multiplies the specified single-precision floating-point number by the specified .

    - Parameter left: The multiplier.
    - Parameter right: The multiplicand.
    - Returns: The result of multiplying 's width and height by .

    */
    public class func op_Multiply(left : Swift.Float, right : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_SizeF__op_Multiply_0__2__f32_Size(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Size op_Subtraction(System.Drawing.Size, System.Drawing.Size)
// docid: M:System.Drawing.Size.op_Subtraction(System.Drawing.Size,System.Drawing.Size)
    /**
    Subtracts the width and height of one  structure from the width and height of another  structure.

    - Parameter sz1: The  structure on the left side of the subtraction operator.
    - Parameter sz2: The  structure on the right side of the subtraction operator.
    - Returns: A  structure that is the result of the subtraction operation.

    */
    public class func op_Subtraction(sz1 : dotnet.System.Drawing.Size, sz2 : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__op_Subtraction_0__2__Size_Size(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // System.Drawing.Size Round(System.Drawing.SizeF)
// docid: M:System.Drawing.Size.Round(System.Drawing.SizeF)
    /**
    Converts the specified  structure to a  structure by rounding the values of the  structure to the nearest integer values.

    - Parameter value: The  structure to convert.
    - Returns: The  structure this method converts to.

    */
    public class func Round(value : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__Round_0__1__SizeF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // System.Drawing.Size Subtract(System.Drawing.Size, System.Drawing.Size)
// docid: M:System.Drawing.Size.Subtract(System.Drawing.Size,System.Drawing.Size)
    /**
    Subtracts the width and height of one  structure from the width and height of another  structure.

    - Parameter sz1: The  structure on the left side of the subtraction operator.
    - Parameter sz2: The  structure on the right side of the subtraction operator.
    - Returns: A  structure that is a result of the subtraction operation.

    */
    public class func Subtract(sz1 : dotnet.System.Drawing.Size, sz2 : dotnet.System.Drawing.Size) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__Subtract_0__2__Size_Size(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Drawing.Size.ToString
    /**
    Creates a human-readable string that represents this  structure.

    - Returns: A string that represents this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Drawing.Size Truncate(System.Drawing.SizeF)
// docid: M:System.Drawing.Size.Truncate(System.Drawing.SizeF)
    /**
    Converts the specified  structure to a  structure by truncating the values of the  structure to the next lower integer values.

    - Parameter value: The  structure to convert.
    - Returns: The  structure this method converts to.

    */
    public class func Truncate(value : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_Size__Truncate_0__1__SizeF(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Height()
// docid: M:System.Drawing.Size.get_Height
    public func get_Height() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_i32__get_Height_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Height(System.Int32)
// docid: M:System.Drawing.Size.set_Height(System.Int32)
    public func set_Height(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Size_void__set_Height_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Drawing.Size.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Width()
// docid: M:System.Drawing.Size.get_Width
    public func get_Width() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_Size_i32__get_Width_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Width(System.Int32)
// docid: M:System.Drawing.Size.set_Width(System.Int32)
    public func set_Width(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_Size_void__set_Width_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Size


// type: System.Drawing.SizeF
// boxed value type
    /**
    Stores an ordered pair of floating-point numbers, typically the width and height of a rectangle.

    */
public final class SizeF
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Drawing_SizeF_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Drawing.SizeF Empty
    /**
    Gets a  structure that has a  and  value of 0.

    */
    public class var Empty : dotnet.System.Drawing.SizeF {
        get {
        let __return = dotnet.System.Drawing.SizeF(hndl: System_Drawing_SizeF_get_Empty());
            return __return;
        }
    }
    /**
    Gets or sets the vertical component of this  structure.

    */
    public var Height : Swift.Float {
        get {
            return try! get_Height();
        }
        set(v) {
            return try! set_Height(value: v);
        }
    }
    /**
    Gets a value that indicates whether this  structure has zero width and height.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets or sets the horizontal component of this  structure.

    */
    public var Width : Swift.Float {
        get {
            return try! get_Width();
        }
        set(v) {
            return try! set_Width(value: v);
        }
    }
    // .ctor(System.Drawing.PointF)
// docid: M:System.Drawing.SizeF.#ctor(System.Drawing.PointF)
    /**
    Initializes a new instance of the  structure from the specified  structure.

    - Parameter pt: The  structure from which to initialize this  structure.
    */
    public init(pt : dotnet.System.Drawing.PointF) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_SizeF_ctor_0__1__PointF(&__thrown, pt.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.#ctor(System.Drawing.SizeF)
    /**
    Initializes a new instance of the  structure from the specified existing  structure.

    - Parameter size: The  structure from which to create the new  structure.
    */
    public init(size : dotnet.System.Drawing.SizeF) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_SizeF_ctor_0__1__SizeF(&__thrown, size.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single, System.Single)
// docid: M:System.Drawing.SizeF.#ctor(System.Single,System.Single)
    /**
    Initializes a new instance of the  structure from the specified dimensions.

    - Parameter width: The width component of the new  structure.
    - Parameter height: The height component of the new  structure.
    */
    public init(width : Swift.Float, height : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_SizeF_ctor_0__2__f32_f32(&__thrown, width, height);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Numerics.Vector2)
// docid: M:System.Drawing.SizeF.#ctor(System.Numerics.Vector2)
    public init(vector : dotnet.System.Numerics.Vector2) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_SizeF_ctor_0__1__Vector2(&__thrown, vector.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Drawing_SizeF_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Drawing.SizeF Add(System.Drawing.SizeF, System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.Add(System.Drawing.SizeF,System.Drawing.SizeF)
    /**
    Adds the width and height of one  structure to the width and height of another  structure.

    - Parameter sz1: The first  structure to add.
    - Parameter sz2: The second  structure to add.
    - Returns: A  structure that is the result of the addition operation.

    */
    public class func Add(sz1 : dotnet.System.Drawing.SizeF, sz2 : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_SizeF__Add_0__2__SizeF_SizeF(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // bool Equals(System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.Equals(System.Drawing.SizeF)
    /**
    Indicates whether the current object is equal to another object of the same type.

    - Parameter other: An object to compare with this object.
    - Returns: 
         if the current object is equal to ; otherwise, .

    */
    public func Equals(other : dotnet.System.Drawing.SizeF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_bool__Equals_0__1__SizeF(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Drawing.SizeF.Equals(System.Object)
    /**
    Tests to see whether the specified object is a  structure with the same dimensions as this  structure.

    - Parameter obj: The  to test.
    - Returns: 
         if  is a  and has the same width and height as this ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Drawing.SizeF.GetHashCode
    /**
    Returns a hash code for this  structure.

    - Returns: An integer value that specifies a hash value for this  structure.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Explicit(System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.op_Explicit(System.Drawing.SizeF)
    public class func op_Explicit(size : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_Vector2__op_Explicit_0__1__SizeF(&__thrown, size.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Explicit(System.Numerics.Vector2)
// docid: M:System.Drawing.SizeF.op_Explicit(System.Numerics.Vector2)
    public class func op_Explicit(vector : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_SizeF__op_Explicit_0__1__Vector2(&__thrown, vector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Addition(System.Drawing.SizeF, System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)
    /**
    Adds the width and height of one  structure to the width and height of another  structure.

    - Parameter sz1: The first  structure to add.
    - Parameter sz2: The second  structure to add.
    - Returns: A  structure that is the result of the addition operation.

    */
    public class func op_Addition(sz1 : dotnet.System.Drawing.SizeF, sz2 : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_SizeF__op_Addition_0__2__SizeF_SizeF(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Division(System.Drawing.SizeF, System.Single)
// docid: M:System.Drawing.SizeF.op_Division(System.Drawing.SizeF,System.Single)
    /**
    Divides the specified  by the specified single-precision floating-point number.

    - Parameter left: The dividend.
    - Parameter right: The divisor.
    - Returns: The result of dividing 's width and height by .

    */
    public class func op_Division(left : dotnet.System.Drawing.SizeF, right : Swift.Float) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_SizeF__op_Division_0__2__SizeF_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Drawing.SizeF, System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.op_Equality(System.Drawing.SizeF,System.Drawing.SizeF)
    /**
    Tests whether two  structures are equal.

    - Parameter sz1: The  structure on the left side of the equality operator.
    - Parameter sz2: The  structure on the right of the equality operator.
    - Returns: 
         if  and  have equal width and height; otherwise, .

    */
    public class func op_Equality(sz1 : dotnet.System.Drawing.SizeF, sz2 : dotnet.System.Drawing.SizeF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_bool__op_Equality_0__2__SizeF_SizeF(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.PointF op_Explicit(System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.op_Explicit(System.Drawing.SizeF)
    public class func op_Explicit(size : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_PointF__op_Explicit_0__1__SizeF(&__thrown, size.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Drawing.SizeF, System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.op_Inequality(System.Drawing.SizeF,System.Drawing.SizeF)
    /**
    Tests whether two  structures are different.

    - Parameter sz1: The  structure on the left of the inequality operator.
    - Parameter sz2: The  structure on the right of the inequality operator.
    - Returns: 
         if  and  differ either in width or height;  if  and  are equal.

    */
    public class func op_Inequality(sz1 : dotnet.System.Drawing.SizeF, sz2 : dotnet.System.Drawing.SizeF) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_bool__op_Inequality_0__2__SizeF_SizeF(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Multiply(System.Drawing.SizeF, System.Single)
// docid: M:System.Drawing.SizeF.op_Multiply(System.Drawing.SizeF,System.Single)
    /**
    Multiplies the specified  by the specified single-precision floating-point number.

    - Parameter left: The multiplicand.
    - Parameter right: The multiplier.
    - Returns: The result of multiplying 's width and height by .

    */
    public class func op_Multiply(left : dotnet.System.Drawing.SizeF, right : Swift.Float) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_SizeF__op_Multiply_0__2__SizeF_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Multiply(System.Single, System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.op_Multiply(System.Single,System.Drawing.SizeF)
    /**
    Multiplies the specified single-precision floating-point number by the specified .

    - Parameter left: The multiplier.
    - Parameter right: The multiplicand.
    - Returns: The result of multiplying 's width and height by .

    */
    public class func op_Multiply(left : Swift.Float, right : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_SizeF__op_Multiply_0__2__f32_SizeF(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.SizeF op_Subtraction(System.Drawing.SizeF, System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)
    /**
    Subtracts the width and height of one  structure from the width and height of another  structure.

    - Parameter sz1: The  structure on the left side of the subtraction operator.
    - Parameter sz2: The  structure on the right side of the subtraction operator.
    - Returns: A  that is the result of the subtraction operation.

    */
    public class func op_Subtraction(sz1 : dotnet.System.Drawing.SizeF, sz2 : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_SizeF__op_Subtraction_0__2__SizeF_SizeF(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // System.Drawing.SizeF Subtract(System.Drawing.SizeF, System.Drawing.SizeF)
// docid: M:System.Drawing.SizeF.Subtract(System.Drawing.SizeF,System.Drawing.SizeF)
    /**
    Subtracts the width and height of one  structure from the width and height of another  structure.

    - Parameter sz1: The  structure on the left side of the subtraction operator.
    - Parameter sz2: The  structure on the right side of the subtraction operator.
    - Returns: A  structure that is a result of the subtraction operation.

    */
    public class func Subtract(sz1 : dotnet.System.Drawing.SizeF, sz2 : dotnet.System.Drawing.SizeF) throws -> dotnet.System.Drawing.SizeF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_SizeF__Subtract_0__2__SizeF_SizeF(&__thrown, sz1.get_handle(), sz2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.SizeF(hndl : __return);
        }
    }
    // System.Drawing.PointF ToPointF()
// docid: M:System.Drawing.SizeF.ToPointF
    /**
    Converts a  structure to a  structure.

    - Returns: A  structure.

    */
    public func ToPointF() throws -> dotnet.System.Drawing.PointF {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_PointF__ToPointF_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.PointF(hndl : __return);
        }
    }
    // System.Drawing.Size ToSize()
// docid: M:System.Drawing.SizeF.ToSize
    /**
    Converts a  structure to a  structure.

    - Returns: A  structure.

    */
    public func ToSize() throws -> dotnet.System.Drawing.Size {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_Size__ToSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Size(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Drawing.SizeF.ToString
    /**
    Creates a human-readable string that represents this  structure.

    - Returns: A string that represents this  structure.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Numerics.Vector2 ToVector2()
// docid: M:System.Drawing.SizeF.ToVector2
    public func ToVector2() throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_Vector2__ToVector2_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Single get_Height()
// docid: M:System.Drawing.SizeF.get_Height
    public func get_Height() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_f32__get_Height_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Height(System.Single)
// docid: M:System.Drawing.SizeF.set_Height(System.Single)
    public func set_Height(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_SizeF_void__set_Height_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Drawing.SizeF.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Single get_Width()
// docid: M:System.Drawing.SizeF.get_Width
    public func get_Width() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeF_f32__get_Width_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Width(System.Single)
// docid: M:System.Drawing.SizeF.set_Width(System.Single)
    public func set_Width(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Drawing_SizeF_void__set_Width_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // SizeF


// type: System.Drawing.SystemColors
public struct SystemColors {
    // [IsSpecialName] System.Drawing.Color get_ActiveBorder()
// docid: M:System.Drawing.SystemColors.get_ActiveBorder
    public static func get_ActiveBorder() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ActiveBorder_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ActiveCaption()
// docid: M:System.Drawing.SystemColors.get_ActiveCaption
    public static func get_ActiveCaption() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ActiveCaption_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ActiveCaptionText()
// docid: M:System.Drawing.SystemColors.get_ActiveCaptionText
    public static func get_ActiveCaptionText() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ActiveCaptionText_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_AppWorkspace()
// docid: M:System.Drawing.SystemColors.get_AppWorkspace
    public static func get_AppWorkspace() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_AppWorkspace_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ButtonFace()
// docid: M:System.Drawing.SystemColors.get_ButtonFace
    public static func get_ButtonFace() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ButtonFace_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ButtonHighlight()
// docid: M:System.Drawing.SystemColors.get_ButtonHighlight
    public static func get_ButtonHighlight() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ButtonHighlight_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ButtonShadow()
// docid: M:System.Drawing.SystemColors.get_ButtonShadow
    public static func get_ButtonShadow() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ButtonShadow_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Control()
// docid: M:System.Drawing.SystemColors.get_Control
    public static func get_Control() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_Control_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ControlDark()
// docid: M:System.Drawing.SystemColors.get_ControlDark
    public static func get_ControlDark() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ControlDark_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ControlDarkDark()
// docid: M:System.Drawing.SystemColors.get_ControlDarkDark
    public static func get_ControlDarkDark() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ControlDarkDark_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ControlLight()
// docid: M:System.Drawing.SystemColors.get_ControlLight
    public static func get_ControlLight() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ControlLight_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ControlLightLight()
// docid: M:System.Drawing.SystemColors.get_ControlLightLight
    public static func get_ControlLightLight() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ControlLightLight_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ControlText()
// docid: M:System.Drawing.SystemColors.get_ControlText
    public static func get_ControlText() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ControlText_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Desktop()
// docid: M:System.Drawing.SystemColors.get_Desktop
    public static func get_Desktop() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_Desktop_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_GradientActiveCaption()
// docid: M:System.Drawing.SystemColors.get_GradientActiveCaption
    public static func get_GradientActiveCaption() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_GradientActiveCaption_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_GradientInactiveCaption()
// docid: M:System.Drawing.SystemColors.get_GradientInactiveCaption
    public static func get_GradientInactiveCaption() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_GradientInactiveCaption_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_GrayText()
// docid: M:System.Drawing.SystemColors.get_GrayText
    public static func get_GrayText() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_GrayText_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Highlight()
// docid: M:System.Drawing.SystemColors.get_Highlight
    public static func get_Highlight() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_Highlight_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_HighlightText()
// docid: M:System.Drawing.SystemColors.get_HighlightText
    public static func get_HighlightText() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_HighlightText_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_HotTrack()
// docid: M:System.Drawing.SystemColors.get_HotTrack
    public static func get_HotTrack() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_HotTrack_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_InactiveBorder()
// docid: M:System.Drawing.SystemColors.get_InactiveBorder
    public static func get_InactiveBorder() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_InactiveBorder_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_InactiveCaption()
// docid: M:System.Drawing.SystemColors.get_InactiveCaption
    public static func get_InactiveCaption() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_InactiveCaption_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_InactiveCaptionText()
// docid: M:System.Drawing.SystemColors.get_InactiveCaptionText
    public static func get_InactiveCaptionText() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_InactiveCaptionText_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Info()
// docid: M:System.Drawing.SystemColors.get_Info
    public static func get_Info() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_Info_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_InfoText()
// docid: M:System.Drawing.SystemColors.get_InfoText
    public static func get_InfoText() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_InfoText_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Menu()
// docid: M:System.Drawing.SystemColors.get_Menu
    public static func get_Menu() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_Menu_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MenuBar()
// docid: M:System.Drawing.SystemColors.get_MenuBar
    public static func get_MenuBar() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_MenuBar_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MenuHighlight()
// docid: M:System.Drawing.SystemColors.get_MenuHighlight
    public static func get_MenuHighlight() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_MenuHighlight_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_MenuText()
// docid: M:System.Drawing.SystemColors.get_MenuText
    public static func get_MenuText() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_MenuText_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_ScrollBar()
// docid: M:System.Drawing.SystemColors.get_ScrollBar
    public static func get_ScrollBar() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_ScrollBar_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_Window()
// docid: M:System.Drawing.SystemColors.get_Window
    public static func get_Window() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_Window_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_WindowFrame()
// docid: M:System.Drawing.SystemColors.get_WindowFrame
    public static func get_WindowFrame() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_WindowFrame_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    // [IsSpecialName] System.Drawing.Color get_WindowText()
// docid: M:System.Drawing.SystemColors.get_WindowText
    public static func get_WindowText() throws -> dotnet.System.Drawing.Color {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SystemColors_Color__get_WindowText_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Drawing.Color(hndl : __return);
        }
    }
    /**
    Gets a  structure that is the color of the active window's border.

    */
    public static var ActiveBorder : dotnet.System.Drawing.Color {
        get {
            return try! get_ActiveBorder();
        }
    }
    /**
    Gets a  structure that is the color of the background of the active window's title bar.

    */
    public static var ActiveCaption : dotnet.System.Drawing.Color {
        get {
            return try! get_ActiveCaption();
        }
    }
    /**
    Gets a  structure that is the color of the text in the active window's title bar.

    */
    public static var ActiveCaptionText : dotnet.System.Drawing.Color {
        get {
            return try! get_ActiveCaptionText();
        }
    }
    /**
    Gets a  structure that is the color of the application workspace.

    */
    public static var AppWorkspace : dotnet.System.Drawing.Color {
        get {
            return try! get_AppWorkspace();
        }
    }
    /**
    Gets a  structure that is the face color of a 3-D element.

    */
    public static var ButtonFace : dotnet.System.Drawing.Color {
        get {
            return try! get_ButtonFace();
        }
    }
    /**
    Gets a  structure that is the highlight color of a 3-D element.

    */
    public static var ButtonHighlight : dotnet.System.Drawing.Color {
        get {
            return try! get_ButtonHighlight();
        }
    }
    /**
    Gets a  structure that is the shadow color of a 3-D element.

    */
    public static var ButtonShadow : dotnet.System.Drawing.Color {
        get {
            return try! get_ButtonShadow();
        }
    }
    /**
    Gets a  structure that is the face color of a 3-D element.

    */
    public static var Control : dotnet.System.Drawing.Color {
        get {
            return try! get_Control();
        }
    }
    /**
    Gets a  structure that is the shadow color of a 3-D element.

    */
    public static var ControlDark : dotnet.System.Drawing.Color {
        get {
            return try! get_ControlDark();
        }
    }
    /**
    Gets a  structure that is the dark shadow color of a 3-D element.

    */
    public static var ControlDarkDark : dotnet.System.Drawing.Color {
        get {
            return try! get_ControlDarkDark();
        }
    }
    /**
    Gets a  structure that is the light color of a 3-D element.

    */
    public static var ControlLight : dotnet.System.Drawing.Color {
        get {
            return try! get_ControlLight();
        }
    }
    /**
    Gets a  structure that is the highlight color of a 3-D element.

    */
    public static var ControlLightLight : dotnet.System.Drawing.Color {
        get {
            return try! get_ControlLightLight();
        }
    }
    /**
    Gets a  structure that is the color of text in a 3-D element.

    */
    public static var ControlText : dotnet.System.Drawing.Color {
        get {
            return try! get_ControlText();
        }
    }
    /**
    Gets a  structure that is the color of the desktop.

    */
    public static var Desktop : dotnet.System.Drawing.Color {
        get {
            return try! get_Desktop();
        }
    }
    /**
    Gets a  structure that is the lightest color in the color gradient of an active window's title bar.

    */
    public static var GradientActiveCaption : dotnet.System.Drawing.Color {
        get {
            return try! get_GradientActiveCaption();
        }
    }
    /**
    Gets a  structure that is the lightest color in the color gradient of an inactive window's title bar.

    */
    public static var GradientInactiveCaption : dotnet.System.Drawing.Color {
        get {
            return try! get_GradientInactiveCaption();
        }
    }
    /**
    Gets a  structure that is the color of dimmed text.

    */
    public static var GrayText : dotnet.System.Drawing.Color {
        get {
            return try! get_GrayText();
        }
    }
    /**
    Gets a  structure that is the color of the background of selected items.

    */
    public static var Highlight : dotnet.System.Drawing.Color {
        get {
            return try! get_Highlight();
        }
    }
    /**
    Gets a  structure that is the color of the text of selected items.

    */
    public static var HighlightText : dotnet.System.Drawing.Color {
        get {
            return try! get_HighlightText();
        }
    }
    /**
    Gets a  structure that is the color used to designate a hot-tracked item.

    */
    public static var HotTrack : dotnet.System.Drawing.Color {
        get {
            return try! get_HotTrack();
        }
    }
    /**
    Gets a  structure that is the color of an inactive window's border.

    */
    public static var InactiveBorder : dotnet.System.Drawing.Color {
        get {
            return try! get_InactiveBorder();
        }
    }
    /**
    Gets a  structure that is the color of the background of an inactive window's title bar.

    */
    public static var InactiveCaption : dotnet.System.Drawing.Color {
        get {
            return try! get_InactiveCaption();
        }
    }
    /**
    Gets a  structure that is the color of the text in an inactive window's title bar.

    */
    public static var InactiveCaptionText : dotnet.System.Drawing.Color {
        get {
            return try! get_InactiveCaptionText();
        }
    }
    /**
    Gets a  structure that is the color of the background of a ToolTip.

    */
    public static var Info : dotnet.System.Drawing.Color {
        get {
            return try! get_Info();
        }
    }
    /**
    Gets a  structure that is the color of the text of a ToolTip.

    */
    public static var InfoText : dotnet.System.Drawing.Color {
        get {
            return try! get_InfoText();
        }
    }
    /**
    Gets a  structure that is the color of a menu's background.

    */
    public static var Menu : dotnet.System.Drawing.Color {
        get {
            return try! get_Menu();
        }
    }
    /**
    Gets a  structure that is the color of the background of a menu bar.

    */
    public static var MenuBar : dotnet.System.Drawing.Color {
        get {
            return try! get_MenuBar();
        }
    }
    /**
    Gets a  structure that is the color used to highlight menu items when the menu appears as a flat menu.

    */
    public static var MenuHighlight : dotnet.System.Drawing.Color {
        get {
            return try! get_MenuHighlight();
        }
    }
    /**
    Gets a  structure that is the color of a menu's text.

    */
    public static var MenuText : dotnet.System.Drawing.Color {
        get {
            return try! get_MenuText();
        }
    }
    /**
    Gets a  structure that is the color of the background of a scroll bar.

    */
    public static var ScrollBar : dotnet.System.Drawing.Color {
        get {
            return try! get_ScrollBar();
        }
    }
    /**
    Gets a  structure that is the color of the background in the client area of a window.

    */
    public static var Window : dotnet.System.Drawing.Color {
        get {
            return try! get_Window();
        }
    }
    /**
    Gets a  structure that is the color of a window frame.

    */
    public static var WindowFrame : dotnet.System.Drawing.Color {
        get {
            return try! get_WindowFrame();
        }
    }
    /**
    Gets a  structure that is the color of the text in the client area of a window.

    */
    public static var WindowText : dotnet.System.Drawing.Color {
        get {
            return try! get_WindowText();
        }
    }
} // SystemColors


}


