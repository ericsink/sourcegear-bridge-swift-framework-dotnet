// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Text
extension System.Text {
// type: System.Text.CodePagesEncodingProvider
    /**
    Provides access to an encoding provider for code pages that otherwise are available only in the desktop .NET Framework.

    */
public final class CodePagesEncodingProvider
    :
    dotnet.System.Text.EncodingProvider
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_CodePagesEncodingProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Text.Encoding GetEncoding(System.Int32)
// docid: M:System.Text.CodePagesEncodingProvider.GetEncoding(System.Int32)
    /**
    Returns the encoding associated with the specified code page identifier.

    - Parameter codepage: The code page identifier of the preferred encoding which the encoding provider may support.
    - Returns: The encoding associated with the specified code page identifier, or  if the provider does not support the requested codepage encoding.

    */
    public override func GetEncoding(codepage : Swift.Int32) throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_CodePagesEncodingProvider_Encoding__GetEncoding_0__1__i32(&__thrown, self.get_handle(), codepage);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Encoding GetEncoding(System.String)
// docid: M:System.Text.CodePagesEncodingProvider.GetEncoding(System.String)
    /**
    Returns the encoding associated with the specified code page name.

    - Parameter name: The code page name of the preferred encoding which the encoding provider may support.
    - Returns: The encoding associated with the specified code page, or  if the provider does not support the requested encoding.

    */
    public override func GetEncoding(name : dotnet.System.String) throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_CodePagesEncodingProvider_Encoding__GetEncoding_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<System.Text.EncodingInfo> GetEncodings()
// docid: M:System.Text.CodePagesEncodingProvider.GetEncodings
    /**
    Returns an array that contains all the encodings that are supported by the .

    - Returns: An array that contains all the supported encodings.

    */
    public override func GetEncodings() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Text.EncodingInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_CodePagesEncodingProvider_System_Collections_Generic_IEnumerable_System_Text_EncodingInfo___GetEncodings_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.EncodingProvider get_Instance()
// docid: M:System.Text.CodePagesEncodingProvider.get_Instance
    public class func get_Instance() throws -> dotnet.System.Text.EncodingProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_CodePagesEncodingProvider_EncodingProvider__get_Instance_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.EncodingProvider(hndl : __return);
        }
    }
    /**
    Gets an encoding provider for code pages supported in the desktop .NET Framework but not in the current .NET Framework platform.

    */
    public static var Instance : dotnet.System.Text.EncodingProvider {
        get {
            return try! get_Instance();
        }
    }
} // CodePagesEncodingProvider


}


