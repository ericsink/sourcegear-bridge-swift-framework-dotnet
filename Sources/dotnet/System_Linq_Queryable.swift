// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Linq
extension System.Linq {
// type: System.Linq.EnumerableExecutor
    /**
    Represents an expression tree and provides functionality to execute the expression tree after rewriting it.

    */
open class EnumerableExecutor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_EnumerableExecutor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // EnumerableExecutor


// type: System.Linq.EnumerableExecutor`1
    /**
    Represents an expression tree and provides functionality to execute the expression tree after rewriting it.

    */
open class EnumerableExecutor_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Linq.EnumerableExecutor
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_EnumerableExecutor_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Linq.Expressions.Expression)
// docid: M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)
    /**
    Initializes a new instance of the  class.

    - Parameter expression: An expression tree to associate with the new instance.
    */
    public init(expression : dotnet.System.Linq.Expressions.Expression) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Linq_EnumerableExecutor_1_ctor_0__1__Expression(T.get_type_handle(), &__thrown, expression.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // EnumerableExecutor_1


// type: System.Linq.EnumerableQuery
    /**
    Represents an  as an  data source.

    */
open class EnumerableQuery
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_EnumerableQuery_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // EnumerableQuery


// type: System.Linq.EnumerableQuery`1
    /**
    Represents an  collection as an  data source.

    */
open class EnumerableQuery_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Linq.EnumerableQuery,
    System_Collections_IEnumerable,
    System_Linq_IOrderedQueryable,
    System_Linq_IQueryable,
    System_Linq_IQueryProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Linq_EnumerableQuery_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class and associates it with an  collection.

    - Parameter enumerable: A collection to associate with the new instance.
    */
    public init(enumerable : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Linq_EnumerableQuery_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, enumerable.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Linq.Expressions.Expression)
// docid: M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)
    /**
    Initializes a new instance of the  class and associates the instance with an expression tree.

    - Parameter expression: An expression tree to associate with the new instance.
    */
    public init(expression : dotnet.System.Linq.Expressions.Expression) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Linq_EnumerableQuery_1_ctor_0__1__Expression(T.get_type_handle(), &__thrown, expression.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Linq.EnumerableQuery`1.ToString
    /**
    Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.

    - Returns: A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.

    */
    open override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_EnumerableQuery_1_String__ToString_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EnumerableQuery_1


// type: System.Linq.Queryable
public struct Queryable {
    // TSource Aggregate<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TSource,TSource>>)
// docid: M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
    /**
    Applies an accumulator function over a sequence.

    - Parameter source: A sequence to aggregate over.
    - Parameter func: An accumulator function to apply to each element.
    - Returns: The final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, func_ : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,UTSource,UTSource>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Aggregate_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTSource_UTSource__(UTSource.get_type_handle(), &__thrown, source.get_handle(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TAccumulate Aggregate<TSource, TAccumulate>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>>)
// docid: M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
    /**
    Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.

    - Parameter source: A sequence to aggregate over.
    - Parameter seed: The initial accumulator value.
    - Parameter func: An accumulator function to invoke on each element.
    - Returns: The final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, seed : UTAccumulate, func_ : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>>) throws -> UTAccumulate {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTAccumulate__Aggregate_2__3__System_Linq_IQueryable_UTSource__UTAccumulate_System_Linq_Expressions_Expression_System_System_Func_UTAccumulate_UTSource_UTAccumulate__(UTSource.get_type_handle(), UTAccumulate.get_type_handle(), &__thrown, source.get_handle(), seed.to_gval(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTAccumulate(gval: __return);
        }
    }
    // TResult Aggregate<TSource, TAccumulate, TResult>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>>, System.Linq.Expressions.Expression<System.Func<TAccumulate,TResult>>)
// docid: M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
    /**
    Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.

    - Parameter source: A sequence to aggregate over.
    - Parameter seed: The initial accumulator value.
    - Parameter func: An accumulator function to invoke on each element.
    - Parameter selector: A function to transform the final accumulator value into the result value.
    - Returns: The transformed final accumulator value.

    */
    public static func Aggregate<UTSource : SGBridgeGenericValue,UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, seed : UTAccumulate, func_ : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTAccumulate,UTSource,UTAccumulate>>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTAccumulate,UTResult>>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTResult__Aggregate_3__4__System_Linq_IQueryable_UTSource__UTAccumulate_System_Linq_Expressions_Expression_System_System_Func_UTAccumulate_UTSource_UTAccumulate___System_Linq_Expressions_Expression_System_System_Func_UTAccumulate_UTResult__(UTSource.get_type_handle(), UTAccumulate.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), seed.to_gval(), func_.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // bool All<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Determines whether all the elements of a sequence satisfy a condition.

    - Parameter source: A sequence whose elements to test for a condition.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
         if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, .

    */
    public static func All<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_bool__All_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Any<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
    /**
    Determines whether a sequence contains any elements.

    - Parameter source: A sequence to check for being empty.
    - Returns: 
         if the source sequence contains any elements; otherwise, .

    */
    public static func Any_<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_bool__Any_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Any<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Determines whether any element of a sequence satisfies a condition.

    - Parameter source: A sequence whose elements to test for a condition.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
         if any elements in the source sequence pass the test in the specified predicate; otherwise, .

    */
    public static func Any_<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_bool__Any_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Linq.IQueryable<TSource> Append<TSource>(System.Linq.IQueryable<TSource>, TSource)
// docid: M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)
    /**
    Returns a new queryable sequence that contains the elements from  plus the specified  appended at the end.

    - Parameter source: A queryable sequence.
    - Parameter element: An element of type  to append to .
    - Returns: A new queryable sequence that contains the elements from  plus the specified  appended at the end.

    */
    public static func Append<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, element : UTSource) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Append_1__2__System_Linq_IQueryable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), element.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable AsQueryable(System.Collections.IEnumerable)
// docid: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    /**
    Converts an  to an .

    - Parameter source: A sequence to convert.
    - Returns: An  that represents the input sequence.

    */
    public static func AsQueryable(source : dotnet.System.Collections.IEnumerable) throws -> dotnet.System.Linq.IQueryable {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_IQueryable__AsQueryable_0__1__IEnumerable(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TElement> AsQueryable<TElement>(System.Collections.Generic.IEnumerable<TElement>)
// docid: M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Converts a generic  to a generic .

    - Parameter source: A sequence to convert.
    - Returns: An  that represents the input sequence.

    */
    public static func AsQueryable<UTElement : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> dotnet.System.Linq.IQueryable_1<UTElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTElement___AsQueryable_1__1__System_Collections_Generic_IEnumerable_UTElement_(UTElement.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Decimal Average(System.Linq.IQueryable<System.Decimal>)
// docid: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.IQueryable_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_Decimal__Average_0__1__System_Linq_IQueryable_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Average(System.Linq.IQueryable<System.Double>)
// docid: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.IQueryable_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f64__Average_0__1__System_Linq_IQueryable_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Average(System.Linq.IQueryable<System.Int32>)
// docid: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.IQueryable_1<Swift.Int32>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f64__Average_0__1__System_Linq_IQueryable_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Average(System.Linq.IQueryable<System.Int64>)
// docid: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.IQueryable_1<Swift.Int64>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f64__Average_0__1__System_Linq_IQueryable_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Average(System.Linq.IQueryable<System.Single>)
// docid: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
    /**
    Computes the average of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the average of.
    - Returns: The average of the sequence of values.

    */
    public static func Average(source : dotnet.System.Linq.IQueryable_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f32__Average_0__1__System_Linq_IQueryable_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Decimal Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>>)
// docid: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    /**
    Computes the average of a sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values that are used to calculate an average.
    - Parameter selector: A projection function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,dotnet.System.Decimal>>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_Decimal__Average_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_System_Decimal__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Double>>)
// docid: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    /**
    Computes the average of a sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the average of.
    - Parameter selector: A projection function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Swift.Double>>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f64__Average_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_f64__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32>>)
// docid: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    /**
    Computes the average of a sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the average of.
    - Parameter selector: A projection function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Swift.Int32>>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f64__Average_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i32__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Double Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>>)
// docid: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    /**
    Computes the average of a sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the average of.
    - Parameter selector: A projection function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Swift.Int64>>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f64__Average_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i64__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Single>>)
// docid: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    /**
    Computes the average of a sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values to calculate the average of.
    - Parameter selector: A projection function to apply to each element.
    - Returns: The average of the sequence of values.

    */
    public static func Average<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Swift.Float>>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f32__Average_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_f32__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Linq.IQueryable<TResult> Cast<TResult>(System.Linq.IQueryable)
    // System.Linq.IQueryable<TSource[]> Chunk<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
// docid: M:System.Linq.Queryable.Chunk``1(System.Linq.IQueryable{``0},System.Int32)
    public static func Chunk<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, size : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System_Arr<UTSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSourceArray___Chunk_1__2__System_Linq_IQueryable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), size);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Concat<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Concatenates two sequences.

    - Parameter source1: The first sequence to concatenate.
    - Parameter source2: The sequence to concatenate to the first sequence.
    - Returns: An  that contains the concatenated elements of the two input sequences.

    */
    public static func Concat<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Concat_1__2__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // bool Contains<TSource>(System.Linq.IQueryable<TSource>, TSource)
// docid: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
    /**
    Determines whether a sequence contains a specified element by using the default equality comparer.

    - Parameter source: An  in which to locate .
    - Parameter item: The object to locate in the sequence.
    - Returns: 
         if the input sequence contains an element that has the specified value; otherwise, .

    */
    public static func Contains<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, item : UTSource) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_bool__Contains_1__2__System_Linq_IQueryable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains<TSource>(System.Linq.IQueryable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    /**
    Determines whether a sequence contains a specified element by using a specified .

    - Parameter source: An  in which to locate .
    - Parameter item: The object to locate in the sequence.
    - Parameter comparer: An  to compare values.
    - Returns: 
         if the input sequence contains an element that has the specified value; otherwise, .

    */
    public static func Contains<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, item : UTSource, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_bool__Contains_1__3__System_Linq_IQueryable_UTSource__UTSource_System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), item.to_gval(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 Count<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
    /**
    Returns the number of elements in a sequence.

    - Parameter source: The  that contains the elements to be counted.
    - Returns: The number of elements in the input sequence.

    */
    public static func Count<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_i32__Count_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Count<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns the number of elements in the specified sequence that satisfies a condition.

    - Parameter source: An  that contains the elements to be counted.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: The number of elements in the sequence that satisfies the condition in the predicate function.

    */
    public static func Count<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_i32__Count_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
    /**
    Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.

    - Parameter source: The  to return a default value for if empty.
    - Returns: An  that contains () if  is empty; otherwise, .

    */
    public static func DefaultIfEmpty<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___DefaultIfEmpty_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>, TSource)
// docid: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
    /**
    Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.

    - Parameter source: The  to return the specified value for if empty.
    - Parameter defaultValue: The value to return if the sequence is empty.
    - Returns: An  that contains  if  is empty; otherwise, .

    */
    public static func DefaultIfEmpty<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, defaultValue : UTSource) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___DefaultIfEmpty_1__2__System_Linq_IQueryable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> DistinctBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.DistinctBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    public static func DistinctBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___DistinctBy_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> DistinctBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.DistinctBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    public static func DistinctBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___DistinctBy_2__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Distinct<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
    /**
    Returns distinct elements from a sequence by using the default equality comparer to compare values.

    - Parameter source: The  to remove duplicates from.
    - Returns: An  that contains distinct elements from .

    */
    public static func Distinct<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Distinct_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Distinct<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Returns distinct elements from a sequence by using a specified  to compare values.

    - Parameter source: The  to remove duplicates from.
    - Parameter comparer: An  to compare values.
    - Returns: An  that contains distinct elements from .

    */
    public static func Distinct<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Distinct_1__2__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // TSource ElementAtOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Index)
// docid: M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Index)
    public static func ElementAtOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, index : dotnet.System.Index) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__ElementAtOrDefault_1__2__System_Linq_IQueryable_UTSource__Index(UTSource.get_type_handle(), &__thrown, source.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource ElementAtOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
// docid: M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
    /**
    Returns the element at a specified index in a sequence or a default value if the index is out of range.

    - Parameter source: An  to return an element from.
    - Parameter index: The zero-based index of the element to retrieve.
    - Returns: 
        default() if  is outside the bounds of ; otherwise, the element at the specified position in .

    */
    public static func ElementAtOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, index : Swift.Int32) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__ElementAtOrDefault_1__2__System_Linq_IQueryable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource ElementAt<TSource>(System.Linq.IQueryable<TSource>, System.Index)
// docid: M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Index)
    public static func ElementAt<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, index : dotnet.System.Index) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__ElementAt_1__2__System_Linq_IQueryable_UTSource__Index(UTSource.get_type_handle(), &__thrown, source.get_handle(), index.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource ElementAt<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
// docid: M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
    /**
    Returns the element at a specified index in a sequence.

    - Parameter source: An  to return an element from.
    - Parameter index: The zero-based index of the element to retrieve.
    - Returns: The element at the specified position in .

    */
    public static func ElementAt<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, index : Swift.Int32) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__ElementAt_1__2__System_Linq_IQueryable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // System.Linq.IQueryable<TSource> ExceptBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.ExceptBy``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    public static func ExceptBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___ExceptBy_2__3__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTKey__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> ExceptBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.ExceptBy``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    public static func ExceptBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___ExceptBy_2__4__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTKey__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Produces the set difference of two sequences by using the default equality comparer to compare values.

    - Parameter source1: An  whose elements that are not also in  will be returned.
    - Parameter source2: An  whose elements that also occur in the first sequence will not appear in the returned sequence.
    - Returns: An  that contains the set difference of the two sequences.

    */
    public static func Except<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Except_1__2__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set difference of two sequences by using the specified  to compare values.

    - Parameter source1: An  whose elements that are not also in  will be returned.
    - Parameter source2: An  whose elements that also occur in the first sequence will not appear in the returned sequence.
    - Parameter comparer: An  to compare values.
    - Returns: An  that contains the set difference of the two sequences.

    */
    public static func Except<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Except_1__3__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
    /**
    Returns the first element of a sequence, or a default value if the sequence contains no elements.

    - Parameter source: The  to return the first element of.
    - Returns: 
        default() if  is empty; otherwise, the first element in .

    */
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__FirstOrDefault_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.

    - Parameter source: An  to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
        default() if  is empty or if no element passes the test specified by ; otherwise, the first element in  that passes the test specified by .

    */
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__FirstOrDefault_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>, TSource)
// docid: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__FirstOrDefault_1__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool___UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, TSource)
// docid: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},``0)
    public static func FirstOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__FirstOrDefault_1__2__System_Linq_IQueryable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource First<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
    /**
    Returns the first element of a sequence.

    - Parameter source: The  to return the first element of.
    - Returns: The first element in .

    */
    public static func First<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__First_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource First<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns the first element of a sequence that satisfies a specified condition.

    - Parameter source: An  to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: The first element in  that passes the test in .

    */
    public static func First<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__First_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    Groups the elements of a sequence according to a specified key selector function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Returns: An IQueryable<IGrouping<TKey, TSource>> in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each  object contains a sequence of objects and a key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_System_Linq_System_Linq_IGrouping_UTKey_UTSource____GroupBy_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter comparer: An  to compare keys.
    - Returns: An IQueryable<IGrouping<TKey, TSource>> in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each  contains a sequence of objects and a key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTSource>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_System_Linq_System_Linq_IGrouping_UTKey_UTSource____GroupBy_2__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TSource,TElement>>)
// docid: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
    /**
    Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an .
    - Returns: An IQueryable<IGrouping<TKey, TElement>> in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each  contains a sequence of objects of type  and a key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, elementSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTElement>>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_System_Linq_System_Linq_IGrouping_UTKey_UTElement____GroupBy_3__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTSource_UTElement__(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TSource,TElement>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an .
    - Parameter comparer: An  to compare keys.
    - Returns: An IQueryable<IGrouping<TKey, TElement>> in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each  contains a sequence of objects of type  and a key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, elementSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTElement>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_System_Linq_System_Linq_IGrouping_UTKey_UTElement____GroupBy_3__4__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTSource_UTElement___System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>)
// docid: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter resultSelector: A function to create a result value from each group.
    - Returns: An T:System.Linq.IQueryable`1 that has a type argument of  and where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___GroupBy_3__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTSource__UTResult__(UTSource.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter resultSelector: A function to create a result value from each group.
    - Parameter comparer: An  to compare keys.
    - Returns: An T:System.Linq.IQueryable`1 that has a type argument of  and where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTSource>,UTResult>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___GroupBy_3__4__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTSource__UTResult___System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TSource,TElement>>, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>)
// docid: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an .
    - Parameter resultSelector: A function to create a result value from each group.
    - Returns: An T:System.Linq.IQueryable`1 that has a type argument of  and where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, elementSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTElement>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___GroupBy_4__4__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTSource_UTElement___System_Linq_Expressions_Expression_System_System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTElement__UTResult__(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TSource,TElement>>, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
    /**
    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.

    - Parameter source: An  whose elements to group.
    - Parameter keySelector: A function to extract the key for each element.
    - Parameter elementSelector: A function to map each source element to an element in an .
    - Parameter resultSelector: A function to create a result value from each group.
    - Parameter comparer: An  to compare keys.
    - Returns: An T:System.Linq.IQueryable`1 that has a type argument of  and where each element represents a projection over a group and its key.

    */
    public static func GroupBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, elementSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTElement>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___GroupBy_4__5__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTSource_UTElement___System_Linq_Expressions_Expression_System_System_Func_UTKey_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTElement__UTResult___System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), UTElement.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), elementSelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>, System.Linq.Expressions.Expression<System.Func<TInner,TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>)
// docid: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    /**
    Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - Returns: An  that contains elements of type  obtained by performing a grouped join on two sequences.

    */
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.IQueryable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTOuter,UTKey>>, innerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTInner,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___GroupJoin_4__5__System_Linq_IQueryable_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Linq_Expressions_Expression_System_System_Func_UTOuter_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTInner_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTOuter_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTInner__UTResult__(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>, System.Linq.Expressions.Expression<System.Func<TInner,TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    /**
    Correlates the elements of two sequences based on key equality and groups the results. A specified  is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - Parameter comparer: A comparer to hash and compare keys.
    - Returns: An  that contains elements of type  obtained by performing a grouped join on two sequences.

    */
    public static func GroupJoin<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.IQueryable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTOuter,UTKey>>, innerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTInner,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTOuter,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___GroupJoin_4__6__System_Linq_IQueryable_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Linq_Expressions_Expression_System_System_Func_UTOuter_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTInner_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTOuter_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTInner__UTResult___System_Collections_Generic_IEqualityComparer_UTKey_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> IntersectBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.IntersectBy``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    public static func IntersectBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___IntersectBy_2__3__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTKey__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> IntersectBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.IntersectBy``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    public static func IntersectBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___IntersectBy_2__4__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTKey__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Produces the set intersection of two sequences by using the default equality comparer to compare values.

    - Parameter source1: A sequence whose distinct elements that also appear in  are returned.
    - Parameter source2: A sequence whose distinct elements that also appear in the first sequence are returned.
    - Returns: A sequence that contains the set intersection of the two sequences.

    */
    public static func Intersect<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Intersect_1__2__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set intersection of two sequences by using the specified  to compare values.

    - Parameter source1: An  whose distinct elements that also appear in  are returned.
    - Parameter source2: An  whose distinct elements that also appear in the first sequence are returned.
    - Parameter comparer: An  to compare values.
    - Returns: An  that contains the set intersection of the two sequences.

    */
    public static func Intersect<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Intersect_1__3__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>, System.Linq.Expressions.Expression<System.Func<TInner,TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>>)
// docid: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    /**
    Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from two matching elements.
    - Returns: An  that has elements of type  obtained by performing an inner join on two sequences.

    */
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.IQueryable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTOuter,UTKey>>, innerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTInner,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTOuter,UTInner,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___Join_4__5__System_Linq_IQueryable_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Linq_Expressions_Expression_System_System_Func_UTOuter_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTInner_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTOuter_UTInner_UTResult__(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>, System.Linq.Expressions.Expression<System.Func<TInner,TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    /**
    Correlates the elements of two sequences based on matching keys. A specified  is used to compare keys.

    - Parameter outer: The first sequence to join.
    - Parameter inner: The sequence to join to the first sequence.
    - Parameter outerKeySelector: A function to extract the join key from each element of the first sequence.
    - Parameter innerKeySelector: A function to extract the join key from each element of the second sequence.
    - Parameter resultSelector: A function to create a result element from two matching elements.
    - Parameter comparer: An  to hash and compare keys.
    - Returns: An  that has elements of type  obtained by performing an inner join on two sequences.

    */
    public static func Join<UTOuter : SGBridgeGenericValue,UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(outer : dotnet.System.Linq.IQueryable_1<UTOuter>, inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTOuter,UTKey>>, innerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTInner,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTOuter,UTInner,UTResult>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___Join_4__6__System_Linq_IQueryable_UTOuter__System_Collections_Generic_IEnumerable_UTInner__System_Linq_Expressions_Expression_System_System_Func_UTOuter_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTInner_UTKey___System_Linq_Expressions_Expression_System_System_Func_UTOuter_UTInner_UTResult___System_Collections_Generic_IEqualityComparer_UTKey_(UTOuter.get_type_handle(), UTInner.get_type_handle(), UTKey.get_type_handle(), UTResult.get_type_handle(), &__thrown, outer.get_handle(), inner.get_handle(), outerKeySelector.get_handle(), innerKeySelector.get_handle(), resultSelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // TSource LastOrDefault<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
    /**
    Returns the last element in a sequence, or a default value if the sequence contains no elements.

    - Parameter source: An  to return the last element of.
    - Returns: 
        default() if  is empty; otherwise, the last element in .

    */
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__LastOrDefault_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.

    - Parameter source: An  to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: 
        default() if  is empty or if no elements pass the test in the predicate function; otherwise, the last element of  that passes the test in the predicate function.

    */
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__LastOrDefault_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>, TSource)
// docid: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__LastOrDefault_1__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool___UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, TSource)
// docid: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},``0)
    public static func LastOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__LastOrDefault_1__2__System_Linq_IQueryable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Last<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
    /**
    Returns the last element in a sequence.

    - Parameter source: An  to return the last element of.
    - Returns: The value at the last position in .

    */
    public static func Last<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Last_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Last<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns the last element of a sequence that satisfies a specified condition.

    - Parameter source: An  to return an element from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: The last element in  that passes the test specified by .

    */
    public static func Last<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Last_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // System.Int64 LongCount<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
    /**
    Returns an  that represents the total number of elements in a sequence.

    - Parameter source: An  that contains the elements to be counted.
    - Returns: The number of elements in .

    */
    public static func LongCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_i64__LongCount_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 LongCount<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns an  that represents the number of elements in a sequence that satisfy a condition.

    - Parameter source: An  that contains the elements to be counted.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: The number of elements in  that satisfy the condition in the predicate function.

    */
    public static func LongCount<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_i64__LongCount_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // TSource MaxBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.MaxBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    public static func MaxBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__MaxBy_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource MaxBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TSource>)
// docid: M:System.Linq.Queryable.MaxBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``0})
    public static func MaxBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__MaxBy_2__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IComparer_UTSource_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Max<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
    /**
    Returns the maximum value in a generic .

    - Parameter source: A sequence of values to determine the maximum of.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Max_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Max<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IComparer<TSource>)
// docid: M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0},System.Collections.Generic.IComparer{``0})
    public static func Max<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Max_1__2__System_Linq_IQueryable_UTSource__System_Collections_Generic_IComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TResult Max<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TResult>>)
// docid: M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    Invokes a projection function on each element of a generic  and returns the maximum resulting value.

    - Parameter source: A sequence of values to determine the maximum of.
    - Parameter selector: A projection function to apply to each element.
    - Returns: The maximum value in the sequence.

    */
    public static func Max<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTResult>>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTResult__Max_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTResult__(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
    // TSource MinBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.MinBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    public static func MinBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__MinBy_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource MinBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TSource>)
// docid: M:System.Linq.Queryable.MinBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``0})
    public static func MinBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__MinBy_2__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IComparer_UTSource_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Min<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
    /**
    Returns the minimum value of a generic .

    - Parameter source: A sequence of values to determine the minimum of.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Min_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Min<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IComparer<TSource>)
// docid: M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0},System.Collections.Generic.IComparer{``0})
    public static func Min<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Min_1__2__System_Linq_IQueryable_UTSource__System_Collections_Generic_IComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TResult Min<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TResult>>)
// docid: M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    Invokes a projection function on each element of a generic  and returns the minimum resulting value.

    - Parameter source: A sequence of values to determine the minimum of.
    - Parameter selector: A projection function to apply to each element.
    - Returns: The minimum value in the sequence.

    */
    public static func Min<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTResult>>) throws -> UTResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTResult__Min_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTResult__(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTResult(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Linq.IQueryable<TResult> OfType<TResult>(System.Linq.IQueryable)
    // System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    Sorts the elements of a sequence in descending order according to a key.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted in descending order according to a key.

    */
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IOrderedQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IOrderedQueryable_UTSource___OrderByDescending_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the elements of a sequence in descending order by using a specified comparer.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted in descending order according to a key.

    */
    public static func OrderByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IOrderedQueryable_UTSource___OrderByDescending_2__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IOrderedQueryable<TSource> OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    Sorts the elements of a sequence in ascending order according to a key.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Returns: An  whose elements are sorted according to a key.

    */
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IOrderedQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IOrderedQueryable_UTSource___OrderBy_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IOrderedQueryable<TSource> OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    /**
    Sorts the elements of a sequence in ascending order by using a specified comparer.

    - Parameter source: A sequence of values to order.
    - Parameter keySelector: A function to extract a key from an element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted according to a key.

    */
    public static func OrderBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IOrderedQueryable_UTSource___OrderBy_2__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Prepend<TSource>(System.Linq.IQueryable<TSource>, TSource)
// docid: M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)
    /**
    Returns a new queryable sequence that contains the elements from  plus the specified  prepended at the beginning.

    - Parameter source: A queryable sequence.
    - Parameter element: An element of type  to prepend to .
    - Returns: A new queryable sequence that contains the elements from  plus the specified  prepended at the beginning.

    */
    public static func Prepend<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, element : UTSource) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Prepend_1__2__System_Linq_IQueryable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), element.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Reverse<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
    /**
    Inverts the order of the elements in a sequence.

    - Parameter source: A sequence of values to reverse.
    - Returns: An  whose elements correspond to those of the input sequence in reverse order.

    */
    public static func Reverse<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Reverse_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>>)
// docid: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    /**
    Projects each element of a sequence to an  and combines the resulting sequences into one sequence.

    - Parameter source: A sequence of values to project.
    - Parameter selector: A projection function to apply to each element.
    - Returns: An  whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___SelectMany_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTResult___(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>>)
// docid: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
    /**
    Projects each element of a sequence to an  and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.

    - Parameter source: A sequence of values to project.
    - Parameter selector: A projection function to apply to each element; the second parameter of this function represents the index of the source element.
    - Returns: An  whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___SelectMany_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i32_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTResult___(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>>)
// docid: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    /**
    Projects each element of a sequence to an  and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.

    - Parameter source: A sequence of values to project.
    - Parameter collectionSelector: A projection function to apply to each element of the input sequence.
    - Parameter resultSelector: A projection function to apply to each element of each intermediate sequence.
    - Returns: An  whose elements are the result of invoking the one-to-many projection function  on each element of  and then mapping each of those sequence elements and their corresponding  element to a result element.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, collectionSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,UTCollection,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___SelectMany_3__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTCollection____System_Linq_Expressions_Expression_System_System_Func_UTSource_UTCollection_UTResult__(UTSource.get_type_handle(), UTCollection.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), collectionSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>>)
// docid: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    /**
    Projects each element of a sequence to an  that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.

    - Parameter source: A sequence of values to project.
    - Parameter collectionSelector: A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.
    - Parameter resultSelector: A projection function to apply to each element of each intermediate sequence.
    - Returns: An  whose elements are the result of invoking the one-to-many projection function  on each element of  and then mapping each of those sequence elements and their corresponding  element to a result element.

    */
    public static func SelectMany<UTSource : SGBridgeGenericValue,UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, collectionSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,UTCollection,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___SelectMany_3__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i32_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTCollection____System_Linq_Expressions_Expression_System_System_Func_UTSource_UTCollection_UTResult__(UTSource.get_type_handle(), UTCollection.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), collectionSelector.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,TResult>>)
// docid: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
    /**
    Projects each element of a sequence into a new form by incorporating the element's index.

    - Parameter source: A sequence of values to project.
    - Parameter selector: A projection function to apply to each element.
    - Returns: An  whose elements are the result of invoking a projection function on each element of .

    */
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,Swift.Int32,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___Select_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i32_UTResult__(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TResult>>)
// docid: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    Projects each element of a sequence into a new form.

    - Parameter source: A sequence of values to project.
    - Parameter selector: A projection function to apply to each element.
    - Returns: An  whose elements are the result of invoking a projection function on each element of .

    */
    public static func Select<UTSource : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___Select_2__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTResult__(UTSource.get_type_handle(), UTResult.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // bool SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Determines whether two sequences are equal by using the default equality comparer to compare elements.

    - Parameter source1: An  whose elements to compare to those of .
    - Parameter source2: An  whose elements to compare to those of the first sequence.
    - Returns: 
         if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, .

    */
    public static func SequenceEqual<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_bool__SequenceEqual_1__2__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Determines whether two sequences are equal by using a specified  to compare elements.

    - Parameter source1: An  whose elements to compare to those of .
    - Parameter source2: An  whose elements to compare to those of the first sequence.
    - Parameter comparer: An  to use to compare elements.
    - Returns: 
         if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, .

    */
    public static func SequenceEqual<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_bool__SequenceEqual_1__3__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // TSource SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
    /**
    Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.

    - Parameter source: An  to return the single element of.
    - Returns: The single element of the input sequence, or default() if the sequence contains no elements.

    */
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__SingleOrDefault_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.

    - Parameter source: An  to return a single element from.
    - Parameter predicate: A function to test an element for a condition.
    - Returns: The single element of the input sequence that satisfies the condition in , or default() if no such element is found.

    */
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__SingleOrDefault_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>, TSource)
// docid: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__SingleOrDefault_1__3__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool___UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, TSource)
// docid: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},``0)
    public static func SingleOrDefault<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, defaultValue : UTSource) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__SingleOrDefault_1__2__System_Linq_IQueryable_UTSource__UTSource(UTSource.get_type_handle(), &__thrown, source.get_handle(), defaultValue.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Single<TSource>(System.Linq.IQueryable<TSource>)
// docid: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
    /**
    Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.

    - Parameter source: An  to return the single element of.
    - Returns: The single element of the input sequence.

    */
    public static func Single<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Single_1__1__System_Linq_IQueryable_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // TSource Single<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.

    - Parameter source: An  to return a single element from.
    - Parameter predicate: A function to test an element for a condition.
    - Returns: The single element of the input sequence that satisfies the condition in .

    */
    public static func Single<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> UTSource {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_UTSource__Single_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTSource(gval: __return);
        }
    }
    // System.Linq.IQueryable<TSource> SkipLast<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
// docid: M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)
    /**
    Returns a new queryable sequence that contains the elements from  with the last  elements of the source queryable sequence omitted.

    - Parameter source: A queryable sequence.
    - Parameter count: The number of elements to omit from the end of the queryable sequence.
    - Returns: A new queryable sequence that contains the elements from  minus  elements from the end of the queryable sequence.

    */
    public static func SkipLast<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___SkipLast_1__2__System_Linq_IQueryable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.

    - Parameter source: An  to return elements from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: An  that contains elements from  starting at the first element in the linear series that does not pass the test specified by .

    */
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___SkipWhile_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,bool>>)
// docid: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
    /**
    Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.

    - Parameter source: An  to return elements from.
    - Parameter predicate: A function to test each element for a condition; the second parameter of this function represents the index of the source element.
    - Returns: An  that contains elements from  starting at the first element in the linear series that does not pass the test specified by .

    */
    public static func SkipWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,Swift.Int32,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___SkipWhile_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i32_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Skip<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
// docid: M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
    /**
    Bypasses a specified number of elements in a sequence and then returns the remaining elements.

    - Parameter source: An  to return elements from.
    - Parameter count: The number of elements to skip before returning the remaining elements.
    - Returns: An  that contains elements that occur after the specified index in the input sequence.

    */
    public static func Skip<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Skip_1__2__System_Linq_IQueryable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Decimal Sum(System.Linq.IQueryable<System.Decimal>)
// docid: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.IQueryable_1<dotnet.System.Decimal>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_Decimal__Sum_0__1__System_Linq_IQueryable_System_Decimal_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Sum(System.Linq.IQueryable<System.Double>)
// docid: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.IQueryable_1<Swift.Double>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f64__Sum_0__1__System_Linq_IQueryable_f64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Sum(System.Linq.IQueryable<System.Int32>)
// docid: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.IQueryable_1<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_i32__Sum_0__1__System_Linq_IQueryable_i32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 Sum(System.Linq.IQueryable<System.Int64>)
// docid: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.IQueryable_1<Swift.Int64>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_i64__Sum_0__1__System_Linq_IQueryable_i64_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Sum(System.Linq.IQueryable<System.Single>)
// docid: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
    /**
    Computes the sum of a sequence of  values.

    - Parameter source: A sequence of  values to calculate the sum of.
    - Returns: The sum of the values in the sequence.

    */
    public static func Sum(source : dotnet.System.Linq.IQueryable_1<Swift.Float>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f32__Sum_0__1__System_Linq_IQueryable_f32_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Decimal Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>>)
// docid: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    /**
    Computes the sum of the sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values of type .
    - Parameter selector: A projection function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,dotnet.System.Decimal>>) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_Decimal__Sum_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_System_Decimal__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Double>>)
// docid: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    /**
    Computes the sum of the sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values of type .
    - Parameter selector: A projection function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Swift.Double>>) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f64__Sum_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_f64__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32>>)
// docid: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    /**
    Computes the sum of the sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values of type .
    - Parameter selector: A projection function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Swift.Int32>>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_i32__Sum_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i32__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>>)
// docid: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    /**
    Computes the sum of the sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values of type .
    - Parameter selector: A projection function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Swift.Int64>>) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_i64__Sum_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i64__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Single>>)
// docid: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    /**
    Computes the sum of the sequence of  values that is obtained by invoking a projection function on each element of the input sequence.

    - Parameter source: A sequence of values of type .
    - Parameter selector: A projection function to apply to each element.
    - Returns: The sum of the projected values.

    */
    public static func Sum<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Swift.Float>>) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_f32__Sum_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_f32__(UTSource.get_type_handle(), &__thrown, source.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Linq.IQueryable<TSource> TakeLast<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
// docid: M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)
    /**
    Returns a new queryable sequence that contains the last  elements from .

    - Parameter source: A queryable sequence instance.
    - Parameter count: The number of elements to take from the end of the queryable sequence.
    - Returns: A new queryable sequence that contains the last  elements from .

    */
    public static func TakeLast<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___TakeLast_1__2__System_Linq_IQueryable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Returns elements from a sequence as long as a specified condition is true.

    - Parameter source: The sequence to return elements from.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: An  that contains elements from the input sequence occurring before the element at which the test specified by  no longer passes.

    */
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___TakeWhile_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,bool>>)
// docid: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
    /**
    Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.

    - Parameter source: The sequence to return elements from.
    - Parameter predicate: A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.
    - Returns: An  that contains elements from the input sequence occurring before the element at which the test specified by  no longer passes.

    */
    public static func TakeWhile<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,Swift.Int32,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___TakeWhile_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i32_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Take<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
// docid: M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
    /**
    Returns a specified number of contiguous elements from the start of a sequence.

    - Parameter source: The sequence to return elements from.
    - Parameter count: The number of elements to return.
    - Returns: An  that contains the specified number of elements from the start of .

    */
    public static func Take<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, count : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Take_1__2__System_Linq_IQueryable_UTSource__i32(UTSource.get_type_handle(), &__thrown, source.get_handle(), count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Take<TSource>(System.Linq.IQueryable<TSource>, System.Range)
// docid: M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Range)
    public static func Take<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, range : dotnet.System.Range) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Take_1__2__System_Linq_IQueryable_UTSource__Range(UTSource.get_type_handle(), &__thrown, source.get_handle(), range.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from each element.
    - Returns: An  whose elements are sorted in descending order according to a key.

    */
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IOrderedQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IOrderedQueryable_UTSource___ThenByDescending_2__2__System_Linq_IOrderedQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    /**
    Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: A collection whose elements are sorted in descending order according to a key.

    */
    public static func ThenByDescending<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IOrderedQueryable_UTSource___ThenByDescending_2__3__System_Linq_IOrderedQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IOrderedQueryable<TSource> ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    /**
    Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from each element.
    - Returns: An  whose elements are sorted according to a key.

    */
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IOrderedQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IOrderedQueryable_UTSource___ThenBy_2__2__System_Linq_IOrderedQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IOrderedQueryable<TSource> ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TKey>)
// docid: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    /**
    Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.

    - Parameter source: An  that contains elements to sort.
    - Parameter keySelector: A function to extract a key from each element.
    - Parameter comparer: An  to compare keys.
    - Returns: An  whose elements are sorted according to a key.

    */
    public static func ThenBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source : dotnet.System.Linq.IOrderedQueryable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IOrderedQueryable_UTSource___ThenBy_2__3__System_Linq_IOrderedQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IOrderedQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> UnionBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
// docid: M:System.Linq.Queryable.UnionBy``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    public static func UnionBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___UnionBy_2__3__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey__(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), keySelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> UnionBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
// docid: M:System.Linq.Queryable.UnionBy``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    public static func UnionBy<UTSource : SGBridgeGenericValue,UTKey : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___UnionBy_2__4__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_UTKey___System_Collections_Generic_IEqualityComparer_UTKey_(UTSource.get_type_handle(), UTKey.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), keySelector.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
// docid: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
    /**
    Produces the set union of two sequences by using the default equality comparer.

    - Parameter source1: A sequence whose distinct elements form the first set for the union operation.
    - Parameter source2: A sequence whose distinct elements form the second set for the union operation.
    - Returns: An  that contains the elements from both input sequences, excluding duplicates.

    */
    public static func Union<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Union_1__2__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
// docid: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    /**
    Produces the set union of two sequences by using a specified .

    - Parameter source1: A sequence whose distinct elements form the first set for the union operation.
    - Parameter source2: A sequence whose distinct elements form the second set for the union operation.
    - Parameter comparer: An  to compare values.
    - Returns: An  that contains the elements from both input sequences, excluding duplicates.

    */
    public static func Union<UTSource : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTSource>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTSource>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Union_1__3__System_Linq_IQueryable_UTSource__System_Collections_Generic_IEnumerable_UTSource__System_Collections_Generic_IEqualityComparer_UTSource_(UTSource.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
// docid: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    /**
    Filters a sequence of values based on a predicate.

    - Parameter source: An  to filter.
    - Parameter predicate: A function to test each element for a condition.
    - Returns: An  that contains elements from the input sequence that satisfy the condition specified by .

    */
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTSource,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Where_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TSource> Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,bool>>)
// docid: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
    /**
    Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.

    - Parameter source: An  to filter.
    - Parameter predicate: A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.
    - Returns: An  that contains elements from the input sequence that satisfy the condition specified by .

    */
    public static func Where<UTSource : SGBridgeGenericValue>(source : dotnet.System.Linq.IQueryable_1<UTSource>, predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTSource,Swift.Int32,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<UTSource> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTSource___Where_1__2__System_Linq_IQueryable_UTSource__System_Linq_Expressions_Expression_System_System_Func_UTSource_i32_bool__(UTSource.get_type_handle(), &__thrown, source.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<System.ValueTuple<TFirst,TSecond>> Zip<TFirst, TSecond>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>)
// docid: M:System.Linq.Queryable.Zip``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1})
    /**
    Produces a sequence of tuples with elements from the two specified sequences.

    - Parameter source1: The first sequence to merge.
    - Parameter source2: The second sequence to merge.
    - Returns: A sequence of tuples with elements taken from the first and second sequences, in that order.

    */
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTFirst>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.ValueTuple_2<UTFirst,UTSecond>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_System_System_ValueTuple_UTFirst_UTSecond____Zip_2__2__System_Linq_IQueryable_UTFirst__System_Collections_Generic_IEnumerable_UTSecond_(UTFirst.get_type_handle(), UTSecond.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<System.ValueTuple<TFirst,TSecond,TThird>> Zip<TFirst, TSecond, TThird>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Collections.Generic.IEnumerable<TThird>)
// docid: M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTThird : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTFirst>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, source3 : dotnet.System.Collections.Generic.IEnumerable_1<UTThird>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.ValueTuple_3<UTFirst,UTSecond,UTThird>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_System_System_ValueTuple_UTFirst_UTSecond_UTThird____Zip_3__3__System_Linq_IQueryable_UTFirst__System_Collections_Generic_IEnumerable_UTSecond__System_Collections_Generic_IEnumerable_UTThird_(UTFirst.get_type_handle(), UTSecond.get_type_handle(), UTThird.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), source3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
    // System.Linq.IQueryable<TResult> Zip<TFirst, TSecond, TResult>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Linq.Expressions.Expression<System.Func<TFirst,TSecond,TResult>>)
// docid: M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    /**
    Merges two sequences by using the specified predicate function.

    - Parameter source1: The first sequence to merge.
    - Parameter source2: The second sequence to merge.
    - Parameter resultSelector: A function that specifies how to merge the elements from the two sequences.
    - Returns: An  that contains merged elements of two input sequences.

    */
    public static func Zip<UTFirst : SGBridgeGenericValue,UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source1 : dotnet.System.Linq.IQueryable_1<UTFirst>, source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTFirst,UTSecond,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Linq_Queryable_System_Linq_IQueryable_UTResult___Zip_3__3__System_Linq_IQueryable_UTFirst__System_Collections_Generic_IEnumerable_UTSecond__System_Linq_Expressions_Expression_System_System_Func_UTFirst_UTSecond_UTResult__(UTFirst.get_type_handle(), UTSecond.get_type_handle(), UTResult.get_type_handle(), &__thrown, source1.get_handle(), source2.get_handle(), resultSelector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Linq.IQueryable_1(hndl : __return);
        }
    }
} // Queryable


}


// EXTENSION METHOD TSource Aggregate<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TSource,TSource>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Aggregate(func_ : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,T,T>>) throws -> T {
        return try dotnet.System.Linq.Queryable.Aggregate(source: self, func_: func_);
    }
}

// EXTENSION METHOD TAccumulate Aggregate<TSource, TAccumulate>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue>(seed : UTAccumulate, func_ : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>>) throws -> UTAccumulate {
        return try dotnet.System.Linq.Queryable.Aggregate(source: self, seed: seed, func_: func_);
    }
}

// EXTENSION METHOD TResult Aggregate<TSource, TAccumulate, TResult>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>>, System.Linq.Expressions.Expression<System.Func<TAccumulate,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Aggregate<UTAccumulate : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(seed : UTAccumulate, func_ : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTAccumulate,T,UTAccumulate>>, selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTAccumulate,UTResult>>) throws -> UTResult {
        return try dotnet.System.Linq.Queryable.Aggregate(source: self, seed: seed, func_: func_, selector: selector);
    }
}

// EXTENSION METHOD bool All<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func All(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> Bool {
        return try dotnet.System.Linq.Queryable.All(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD bool Any<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Any_() throws -> Bool {
        return try dotnet.System.Linq.Queryable.Any_(source: self);
    }
}

// EXTENSION METHOD bool Any<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Any_(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> Bool {
        return try dotnet.System.Linq.Queryable.Any_(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Append<TSource>(System.Linq.IQueryable<TSource>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func Append(element : T) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Append(source: self, element: element);
    }
}

// EXTENSION METHOD System.Linq.IQueryable AsQueryable(System.Collections.IEnumerable)
extension System_Collections_IEnumerable {
    public func AsQueryable() throws -> dotnet.System.Linq.IQueryable {
        return try dotnet.System.Linq.Queryable.AsQueryable(source: dotnet.System.Collections.IEnumerable(hndl: __copy_handle(self.get_handle())));
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TElement> AsQueryable<TElement>(System.Collections.Generic.IEnumerable<TElement>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func AsQueryable() throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.AsQueryable(source: self);
    }
}

// EXTENSION METHOD System.Decimal Average(System.Linq.IQueryable<System.Decimal>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average() throws -> dotnet.System.Decimal where T == dotnet.System.Decimal {
        return try dotnet.System.Linq.Queryable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Linq.IQueryable<System.Double>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average() throws -> Swift.Double where T == Swift.Double {
        return try dotnet.System.Linq.Queryable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Linq.IQueryable<System.Int32>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average() throws -> Swift.Double where T == Swift.Int32 {
        return try dotnet.System.Linq.Queryable.Average(source: self);
    }
}

// EXTENSION METHOD System.Double Average(System.Linq.IQueryable<System.Int64>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average() throws -> Swift.Double where T == Swift.Int64 {
        return try dotnet.System.Linq.Queryable.Average(source: self);
    }
}

// EXTENSION METHOD System.Single Average(System.Linq.IQueryable<System.Single>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average() throws -> Swift.Float where T == Swift.Float {
        return try dotnet.System.Linq.Queryable.Average(source: self);
    }
}

// EXTENSION METHOD System.Decimal Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,dotnet.System.Decimal>>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.Queryable.Average(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Double>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Swift.Double>>) throws -> Swift.Double {
        return try dotnet.System.Linq.Queryable.Average(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Swift.Int32>>) throws -> Swift.Double {
        return try dotnet.System.Linq.Queryable.Average(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Double Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Swift.Int64>>) throws -> Swift.Double {
        return try dotnet.System.Linq.Queryable.Average(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Single Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Single>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Average(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Swift.Float>>) throws -> Swift.Float {
        return try dotnet.System.Linq.Queryable.Average(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> Cast<TResult>(System.Linq.IQueryable)
// TODO COPE extension method (unused generic param) System.Linq.IQueryable<TResult> Cast<TResult>(System.Linq.IQueryable)

// EXTENSION METHOD System.Linq.IQueryable<TSource[]> Chunk<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
extension dotnet.System.Linq.IQueryable_1 {
    public func Chunk(size : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System_Arr<T>> {
        return try dotnet.System.Linq.Queryable.Chunk(source: self, size: size);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Concat<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Concat(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Concat(source1: self, source2: source2);
    }
}

// EXTENSION METHOD bool Contains<TSource>(System.Linq.IQueryable<TSource>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func Contains(item : T) throws -> Bool {
        return try dotnet.System.Linq.Queryable.Contains(source: self, item: item);
    }
}

// EXTENSION METHOD bool Contains<TSource>(System.Linq.IQueryable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Contains(item : T, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Bool {
        return try dotnet.System.Linq.Queryable.Contains(source: self, item: item, comparer: comparer);
    }
}

// EXTENSION METHOD System.Int32 Count<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Count() throws -> Swift.Int32 {
        return try dotnet.System.Linq.Queryable.Count(source: self);
    }
}

// EXTENSION METHOD System.Int32 Count<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Count(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.Queryable.Count(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func DefaultIfEmpty() throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.DefaultIfEmpty(source: self);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func DefaultIfEmpty(defaultValue : T) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.DefaultIfEmpty(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> DistinctBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func DistinctBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.DistinctBy(source: self, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> DistinctBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func DistinctBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.DistinctBy(source: self, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Distinct<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Distinct() throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Distinct(source: self);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Distinct<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Distinct(comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Distinct(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD TSource ElementAtOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Index)
extension dotnet.System.Linq.IQueryable_1 {
    public func ElementAtOrDefault(index : dotnet.System.Index) throws -> T {
        return try dotnet.System.Linq.Queryable.ElementAtOrDefault(source: self, index: index);
    }
}

// EXTENSION METHOD TSource ElementAtOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
extension dotnet.System.Linq.IQueryable_1 {
    public func ElementAtOrDefault(index : Swift.Int32) throws -> T {
        return try dotnet.System.Linq.Queryable.ElementAtOrDefault(source: self, index: index);
    }
}

// EXTENSION METHOD TSource ElementAt<TSource>(System.Linq.IQueryable<TSource>, System.Index)
extension dotnet.System.Linq.IQueryable_1 {
    public func ElementAt(index : dotnet.System.Index) throws -> T {
        return try dotnet.System.Linq.Queryable.ElementAt(source: self, index: index);
    }
}

// EXTENSION METHOD TSource ElementAt<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
extension dotnet.System.Linq.IQueryable_1 {
    public func ElementAt(index : Swift.Int32) throws -> T {
        return try dotnet.System.Linq.Queryable.ElementAt(source: self, index: index);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> ExceptBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func ExceptBy<UTKey : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.ExceptBy(source1: self, source2: source2, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> ExceptBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func ExceptBy<UTKey : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.ExceptBy(source1: self, source2: source2, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Except(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Except(source1: self, source2: source2);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Except(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Except(source1: self, source2: source2, comparer: comparer);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func FirstOrDefault() throws -> T {
        return try dotnet.System.Linq.Queryable.FirstOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func FirstOrDefault(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> T {
        return try dotnet.System.Linq.Queryable.FirstOrDefault(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func FirstOrDefault(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>, defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Queryable.FirstOrDefault(source: self, predicate: predicate, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func FirstOrDefault(defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Queryable.FirstOrDefault(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource First<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func First() throws -> T {
        return try dotnet.System.Linq.Queryable.First(source: self);
    }
}

// EXTENSION METHOD TSource First<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func First(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> T {
        return try dotnet.System.Linq.Queryable.First(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.Linq.IGrouping_2<UTKey,T>> {
        return try dotnet.System.Linq.Queryable.GroupBy(source: self, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.Linq.IGrouping_2<UTKey,T>> {
        return try dotnet.System.Linq.Queryable.GroupBy(source: self, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TSource,TElement>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, elementSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTElement>>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        return try dotnet.System.Linq.Queryable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TSource,TElement>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, elementSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTElement>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.Linq.IGrouping_2<UTKey,UTElement>> {
        return try dotnet.System.Linq.Queryable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<T>,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.GroupBy(source: self, keySelector: keySelector, resultSelector: resultSelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<T>,UTResult>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.GroupBy(source: self, keySelector: keySelector, resultSelector: resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TSource,TElement>>, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, elementSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTElement>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, resultSelector: resultSelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Linq.Expressions.Expression<System.Func<TSource,TElement>>, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupBy<UTKey : SGBridgeGenericValue,UTElement : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, elementSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTElement>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<UTKey,dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTResult>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.GroupBy(source: self, keySelector: keySelector, elementSelector: elementSelector, resultSelector: resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>, System.Linq.Expressions.Expression<System.Func<TInner,TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, innerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTInner,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.GroupJoin(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>, System.Linq.Expressions.Expression<System.Func<TInner,TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func GroupJoin<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, innerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTInner,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,dotnet.System.Collections.Generic.IEnumerable_1<UTInner>,UTResult>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.GroupJoin(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> IntersectBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func IntersectBy<UTKey : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.IntersectBy(source1: self, source2: source2, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> IntersectBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func IntersectBy<UTKey : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTKey>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.IntersectBy(source1: self, source2: source2, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Intersect(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Intersect(source1: self, source2: source2);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Intersect(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Intersect(source1: self, source2: source2, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>, System.Linq.Expressions.Expression<System.Func<TInner,TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, innerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTInner,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,UTInner,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.Join(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>, System.Linq.Expressions.Expression<System.Func<TInner,TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Join<UTInner : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(inner : dotnet.System.Collections.Generic.IEnumerable_1<UTInner>, outerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, innerKeySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<UTInner,UTKey>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,UTInner,UTResult>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.Join(outer: self, inner: inner, outerKeySelector: outerKeySelector, innerKeySelector: innerKeySelector, resultSelector: resultSelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func LastOrDefault() throws -> T {
        return try dotnet.System.Linq.Queryable.LastOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func LastOrDefault(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> T {
        return try dotnet.System.Linq.Queryable.LastOrDefault(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func LastOrDefault(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>, defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Queryable.LastOrDefault(source: self, predicate: predicate, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func LastOrDefault(defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Queryable.LastOrDefault(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource Last<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Last() throws -> T {
        return try dotnet.System.Linq.Queryable.Last(source: self);
    }
}

// EXTENSION METHOD TSource Last<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Last(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> T {
        return try dotnet.System.Linq.Queryable.Last(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Int64 LongCount<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func LongCount() throws -> Swift.Int64 {
        return try dotnet.System.Linq.Queryable.LongCount(source: self);
    }
}

// EXTENSION METHOD System.Int64 LongCount<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func LongCount(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.Queryable.LongCount(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD TSource MaxBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func MaxBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> T {
        return try dotnet.System.Linq.Queryable.MaxBy(source: self, keySelector: keySelector);
    }
}

// EXTENSION METHOD TSource MaxBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func MaxBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> T {
        return try dotnet.System.Linq.Queryable.MaxBy(source: self, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource Max<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Max() throws -> T {
        return try dotnet.System.Linq.Queryable.Max(source: self);
    }
}

// EXTENSION METHOD TSource Max<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Max(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> T {
        return try dotnet.System.Linq.Queryable.Max(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD TResult Max<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Max<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTResult>>) throws -> UTResult {
        return try dotnet.System.Linq.Queryable.Max(source: self, selector: selector);
    }
}

// EXTENSION METHOD TSource MinBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func MinBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> T {
        return try dotnet.System.Linq.Queryable.MinBy(source: self, keySelector: keySelector);
    }
}

// EXTENSION METHOD TSource MinBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func MinBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> T {
        return try dotnet.System.Linq.Queryable.MinBy(source: self, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD TSource Min<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Min() throws -> T {
        return try dotnet.System.Linq.Queryable.Min(source: self);
    }
}

// EXTENSION METHOD TSource Min<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Min(comparer : dotnet.System.Collections.Generic.IComparer_1<T>) throws -> T {
        return try dotnet.System.Linq.Queryable.Min(source: self, comparer: comparer);
    }
}

// EXTENSION METHOD TResult Min<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Min<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTResult>>) throws -> UTResult {
        return try dotnet.System.Linq.Queryable.Min(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> OfType<TResult>(System.Linq.IQueryable)
// TODO COPE extension method (unused generic param) System.Linq.IQueryable<TResult> OfType<TResult>(System.Linq.IQueryable)

// EXTENSION METHOD System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IOrderedQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.OrderByDescending(source: self, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func OrderByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.OrderByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IOrderedQueryable<TSource> OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IOrderedQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.OrderBy(source: self, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IOrderedQueryable<TSource> OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func OrderBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.OrderBy(source: self, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Prepend<TSource>(System.Linq.IQueryable<TSource>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func Prepend(element : T) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Prepend(source: self, element: element);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Reverse<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Reverse() throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Reverse(source: self);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.SelectMany(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SelectMany<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTResult>>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.SelectMany(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,UTCollection,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.SelectMany(source: self, collectionSelector: collectionSelector, resultSelector: resultSelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SelectMany<UTCollection : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(collectionSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,Swift.Int32,dotnet.System.Collections.Generic.IEnumerable_1<UTCollection>>>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,UTCollection,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.SelectMany(source: self, collectionSelector: collectionSelector, resultSelector: resultSelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Select<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,Swift.Int32,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.Select(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Select<UTResult : SGBridgeGenericValue>(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.Select(source: self, selector: selector);
    }
}

// EXTENSION METHOD bool SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SequenceEqual(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> Bool {
        return try dotnet.System.Linq.Queryable.SequenceEqual(source1: self, source2: source2);
    }
}

// EXTENSION METHOD bool SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SequenceEqual(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> Bool {
        return try dotnet.System.Linq.Queryable.SequenceEqual(source1: self, source2: source2, comparer: comparer);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SingleOrDefault() throws -> T {
        return try dotnet.System.Linq.Queryable.SingleOrDefault(source: self);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SingleOrDefault(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> T {
        return try dotnet.System.Linq.Queryable.SingleOrDefault(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func SingleOrDefault(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>, defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Queryable.SingleOrDefault(source: self, predicate: predicate, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, TSource)
extension dotnet.System.Linq.IQueryable_1 {
    public func SingleOrDefault(defaultValue : T) throws -> T {
        return try dotnet.System.Linq.Queryable.SingleOrDefault(source: self, defaultValue: defaultValue);
    }
}

// EXTENSION METHOD TSource Single<TSource>(System.Linq.IQueryable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Single() throws -> T {
        return try dotnet.System.Linq.Queryable.Single(source: self);
    }
}

// EXTENSION METHOD TSource Single<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Single(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> T {
        return try dotnet.System.Linq.Queryable.Single(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> SkipLast<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
extension dotnet.System.Linq.IQueryable_1 {
    public func SkipLast(count : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.SkipLast(source: self, count: count);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SkipWhile(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.SkipWhile(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func SkipWhile(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,Swift.Int32,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.SkipWhile(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Skip<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
extension dotnet.System.Linq.IQueryable_1 {
    public func Skip(count : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Skip(source: self, count: count);
    }
}

// EXTENSION METHOD System.Decimal Sum(System.Linq.IQueryable<System.Decimal>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum() throws -> dotnet.System.Decimal where T == dotnet.System.Decimal {
        return try dotnet.System.Linq.Queryable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Double Sum(System.Linq.IQueryable<System.Double>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum() throws -> Swift.Double where T == Swift.Double {
        return try dotnet.System.Linq.Queryable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Int32 Sum(System.Linq.IQueryable<System.Int32>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum() throws -> Swift.Int32 where T == Swift.Int32 {
        return try dotnet.System.Linq.Queryable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Int64 Sum(System.Linq.IQueryable<System.Int64>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum() throws -> Swift.Int64 where T == Swift.Int64 {
        return try dotnet.System.Linq.Queryable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Single Sum(System.Linq.IQueryable<System.Single>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum() throws -> Swift.Float where T == Swift.Float {
        return try dotnet.System.Linq.Queryable.Sum(source: self);
    }
}

// EXTENSION METHOD System.Decimal Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,dotnet.System.Decimal>>) throws -> dotnet.System.Decimal {
        return try dotnet.System.Linq.Queryable.Sum(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Double Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Double>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Swift.Double>>) throws -> Swift.Double {
        return try dotnet.System.Linq.Queryable.Sum(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Int32 Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Swift.Int32>>) throws -> Swift.Int32 {
        return try dotnet.System.Linq.Queryable.Sum(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Int64 Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Swift.Int64>>) throws -> Swift.Int64 {
        return try dotnet.System.Linq.Queryable.Sum(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Single Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Single>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Sum(selector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Swift.Float>>) throws -> Swift.Float {
        return try dotnet.System.Linq.Queryable.Sum(source: self, selector: selector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> TakeLast<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
extension dotnet.System.Linq.IQueryable_1 {
    public func TakeLast(count : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.TakeLast(source: self, count: count);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func TakeWhile(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.TakeWhile(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func TakeWhile(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,Swift.Int32,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.TakeWhile(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Take<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
extension dotnet.System.Linq.IQueryable_1 {
    public func Take(count : Swift.Int32) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Take(source: self, count: count);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Take<TSource>(System.Linq.IQueryable<TSource>, System.Range)
extension dotnet.System.Linq.IQueryable_1 {
    public func Take(range : dotnet.System.Range) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Take(source: self, range: range);
    }
}

// EXTENSION METHOD System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IOrderedQueryable_1 {
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IOrderedQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.ThenByDescending(source: self, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.IOrderedQueryable_1 {
    public func ThenByDescending<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.ThenByDescending(source: self, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IOrderedQueryable<TSource> ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IOrderedQueryable_1 {
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IOrderedQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.ThenBy(source: self, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IOrderedQueryable<TSource> ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IComparer<TKey>)
extension dotnet.System.Linq.IOrderedQueryable_1 {
    public func ThenBy<UTKey : SGBridgeGenericValue>(keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IComparer_1<UTKey>) throws -> dotnet.System.Linq.IOrderedQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.ThenBy(source: self, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> UnionBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func UnionBy<UTKey : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.UnionBy(source1: self, source2: source2, keySelector: keySelector);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> UnionBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
extension dotnet.System.Linq.IQueryable_1 {
    public func UnionBy<UTKey : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>, keySelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,UTKey>>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<UTKey>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.UnionBy(source1: self, source2: source2, keySelector: keySelector, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Union(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Union(source1: self, source2: source2);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Union(source2 : dotnet.System.Collections.Generic.IEnumerable_1<T>, comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<T>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Union(source1: self, source2: source2, comparer: comparer);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Where(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_2<T,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Where(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TSource> Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,bool>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Where(predicate : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,Swift.Int32,Bool>>) throws -> dotnet.System.Linq.IQueryable_1<T> {
        return try dotnet.System.Linq.Queryable.Where(source: self, predicate: predicate);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<System.ValueTuple<TFirst,TSecond>> Zip<TFirst, TSecond>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Zip<UTSecond : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.ValueTuple_2<T,UTSecond>> {
        return try dotnet.System.Linq.Queryable.Zip(source1: self, source2: source2);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<System.ValueTuple<TFirst,TSecond,TThird>> Zip<TFirst, TSecond, TThird>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Collections.Generic.IEnumerable<TThird>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Zip<UTSecond : SGBridgeGenericValue,UTThird : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, source3 : dotnet.System.Collections.Generic.IEnumerable_1<UTThird>) throws -> dotnet.System.Linq.IQueryable_1<dotnet.System.ValueTuple_3<T,UTSecond,UTThird>> {
        return try dotnet.System.Linq.Queryable.Zip(source1: self, source2: source2, source3: source3);
    }
}

// EXTENSION METHOD System.Linq.IQueryable<TResult> Zip<TFirst, TSecond, TResult>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Linq.Expressions.Expression<System.Func<TFirst,TSecond,TResult>>)
extension dotnet.System.Linq.IQueryable_1 {
    public func Zip<UTSecond : SGBridgeGenericValue,UTResult : SGBridgeGenericValue>(source2 : dotnet.System.Collections.Generic.IEnumerable_1<UTSecond>, resultSelector : dotnet.System.Linq.Expressions.Expression_1<dotnet.System.Func_3<T,UTSecond,UTResult>>) throws -> dotnet.System.Linq.IQueryable_1<UTResult> {
        return try dotnet.System.Linq.Queryable.Zip(source1: self, source2: source2, resultSelector: resultSelector);
    }
}

