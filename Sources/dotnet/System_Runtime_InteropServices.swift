// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
extension System {
// type: System.DataMisalignedException
    /**
    The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.

    */
public final class DataMisalignedException
    :
    dotnet.System.SystemException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_DataMisalignedException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.DataMisalignedException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_DataMisalignedException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.DataMisalignedException.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified error message.

    - Parameter message: A  object that describes the error. The content of  is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_DataMisalignedException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.DataMisalignedException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class using the specified error message and underlying exception.

    - Parameter message: A  object that describes the error. The content of  is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    - Parameter innerException: The exception that is the cause of the current . If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_DataMisalignedException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DataMisalignedException


// type: System.DllNotFoundException
    /**
    The exception that is thrown when a DLL specified in a DLL import cannot be found.

    */
open class DllNotFoundException
    :
    dotnet.System.TypeLoadException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_DllNotFoundException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.DllNotFoundException.#ctor
    /**
    Initializes a new instance of the  class with default properties.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_DllNotFoundException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.DllNotFoundException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The error message that explains the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_DllNotFoundException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.DllNotFoundException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_DllNotFoundException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DllNotFoundException


}
// System.IO
extension System.IO {
// type: System.IO.UnmanagedMemoryAccessor
    /**
    Provides random access to unmanaged blocks of memory from managed code.

    */
open class UnmanagedMemoryAccessor
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_IO_UnmanagedMemoryAccessor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Runtime.InteropServices.SafeBuffer, System.Int64, System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
    /**
    Initializes a new instance of the  class with a specified buffer, offset, and capacity.

    - Parameter buffer: The buffer to contain the accessor.
    - Parameter offset: The byte at which to start the accessor.
    - Parameter capacity: The size, in bytes, of memory to allocate.
    */
    public init(buffer : dotnet.System.Runtime.InteropServices.SafeBuffer, offset : Swift.Int64, capacity : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_UnmanagedMemoryAccessor_ctor_0__3__SafeBuffer_i64_i64(&__thrown, buffer.get_handle(), offset, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.InteropServices.SafeBuffer, System.Int64, System.Int64, System.IO.FileAccess)
// docid: M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
    /**
    Initializes a new instance of the  class with a specified buffer, offset, capacity, and access right.

    - Parameter buffer: The buffer to contain the accessor.
    - Parameter offset: The byte at which to start the accessor.
    - Parameter capacity: The size, in bytes, of memory to allocate.
    - Parameter access: The type of access allowed to the memory. The default is .
    */
    public init(buffer : dotnet.System.Runtime.InteropServices.SafeBuffer, offset : Swift.Int64, capacity : Swift.Int64, access : dotnet.System.IO.FileAccess) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_UnmanagedMemoryAccessor_ctor_0__4__SafeBuffer_i64_i64_FileAccess(&__thrown, buffer.get_handle(), offset, capacity, access.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.IO.UnmanagedMemoryAccessor.Dispose
    /**
    Releases all resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Int32 ReadArray<T>(System.Int64, T[], System.Int32, System.Int32)
    // bool ReadBoolean(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
    /**
    Reads a Boolean value from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: 
         or .

    */
    open func ReadBoolean(position : Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_bool__ReadBoolean_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte ReadByte(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
    /**
    Reads a byte value from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadByte(position : Swift.Int64) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_u8__ReadByte_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Char ReadChar(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
    /**
    Reads a character from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadChar(position : Swift.Int64) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_Char__ReadChar_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // System.Decimal ReadDecimal(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
    /**
    Reads a decimal value from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadDecimal(position : Swift.Int64) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_Decimal__ReadDecimal_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double ReadDouble(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
    /**
    Reads a double-precision floating-point value from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadDouble(position : Swift.Int64) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_f64__ReadDouble_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int16 ReadInt16(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
    /**
    Reads a 16-bit integer from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadInt16(position : Swift.Int64) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_i16__ReadInt16_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadInt32(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
    /**
    Reads a 32-bit integer from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadInt32(position : Swift.Int64) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_i32__ReadInt32_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ReadInt64(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
    /**
    Reads a 64-bit integer from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadInt64(position : Swift.Int64) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_i64__ReadInt64_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.SByte ReadSByte(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
    /**
    Reads an 8-bit signed integer from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadSByte(position : Swift.Int64) throws -> Swift.Int8 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_i8__ReadSByte_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single ReadSingle(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
    /**
    Reads a single-precision floating-point value from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadSingle(position : Swift.Int64) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_f32__ReadSingle_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt16 ReadUInt16(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
    /**
    Reads an unsigned 16-bit integer from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadUInt16(position : Swift.Int64) throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_u16__ReadUInt16_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt32 ReadUInt32(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
    /**
    Reads an unsigned 32-bit integer from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadUInt32(position : Swift.Int64) throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_u32__ReadUInt32_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt64 ReadUInt64(System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
    /**
    Reads an unsigned 64-bit integer from the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin reading.
    - Returns: The value that was read.

    */
    open func ReadUInt64(position : Swift.Int64) throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_u64__ReadUInt64_0__1__i64(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void Read<T>(System.Int64, ref T)
    // void Write(System.Int64, bool)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
    /**
    Writes a Boolean value into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_bool(&__thrown, self.get_handle(), position, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.Byte)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
    /**
    Writes a byte value into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_u8(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.Char)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
    /**
    Writes a character into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_Char(&__thrown, self.get_handle(), position, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.Decimal)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
    /**
    Writes a decimal value into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_Decimal(&__thrown, self.get_handle(), position, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.Double)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
    /**
    Writes a  value into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_f64(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.Int16)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
    /**
    Writes a 16-bit integer into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_i16(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.Int32)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
    /**
    Writes a 32-bit integer into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_i32(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.Int64)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
    /**
    Writes a 64-bit integer into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_i64(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.SByte)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
    /**
    Writes an 8-bit integer into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.Int8) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_i8(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.Single)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
    /**
    Writes a  into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_f32(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.UInt16)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
    /**
    Writes an unsigned 16-bit integer into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.UInt16) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_u16(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.UInt32)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
    /**
    Writes an unsigned 32-bit integer into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_u32(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64, System.UInt64)
// docid: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
    /**
    Writes an unsigned 64-bit integer into the accessor.

    - Parameter position: The number of bytes into the accessor at which to begin writing.
    - Parameter value: The value to write.
    */
    open func Write(position : Swift.Int64, value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
        System_IO_UnmanagedMemoryAccessor_void__Write_0__2__i64_u64(&__thrown, self.get_handle(), position, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void WriteArray<T>(System.Int64, T[], System.Int32, System.Int32)
// TODO COPE (write_all_methods) (unused generic param) void Write<T>(System.Int64, ref T)
    // [IsSpecialName] bool get_CanRead()
// docid: M:System.IO.UnmanagedMemoryAccessor.get_CanRead
    open func get_CanRead() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_bool__get_CanRead_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanWrite()
// docid: M:System.IO.UnmanagedMemoryAccessor.get_CanWrite
    open func get_CanWrite() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_bool__get_CanWrite_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Capacity()
// docid: M:System.IO.UnmanagedMemoryAccessor.get_Capacity
    open func get_Capacity() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_UnmanagedMemoryAccessor_i64__get_Capacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Determines whether the accessor is readable.

    */
    open var CanRead : Bool {
        get {
            return try! get_CanRead();
        }
    }
    /**
    Determines whether the accessory is writable.

    */
    open var CanWrite : Bool {
        get {
            return try! get_CanWrite();
        }
    }
    /**
    Gets the capacity of the accessor.

    */
    open var Capacity : Swift.Int64 {
        get {
            return try! get_Capacity();
        }
    }
} // UnmanagedMemoryAccessor


}

// System.Runtime
// System.Runtime.CompilerServices
extension System.Runtime.CompilerServices {
// type: System.Runtime.CompilerServices.IDispatchConstantAttribute
    /**
    Indicates that the default value for the attributed field or parameter is an instance of , where the  is .

    */
public final class IDispatchConstantAttribute
    :
    dotnet.System.Runtime.CompilerServices.CustomConstantAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_IDispatchConstantAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_CompilerServices_IDispatchConstantAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Runtime.CompilerServices.IDispatchConstantAttribute.get_Value
    public override func get_Value() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_IDispatchConstantAttribute_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the  constant stored in this attribute.

    */
    public override var Value : dotnet.System.Object {
        get {
            return try! get_Value();
        }
    }
} // IDispatchConstantAttribute


// type: System.Runtime.CompilerServices.IUnknownConstantAttribute
    /**
    Indicates that the default value for the attributed field or parameter is an instance of , where the  is . This class cannot be inherited.

    */
public final class IUnknownConstantAttribute
    :
    dotnet.System.Runtime.CompilerServices.CustomConstantAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_CompilerServices_IUnknownConstantAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_CompilerServices_IUnknownConstantAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Runtime.CompilerServices.IUnknownConstantAttribute.get_Value
    public override func get_Value() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_CompilerServices_IUnknownConstantAttribute_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the  constant stored in this attribute.

    */
    public override var Value : dotnet.System.Object {
        get {
            return try! get_Value();
        }
    }
} // IUnknownConstantAttribute


}

// System.Runtime.InteropServices
extension System.Runtime.InteropServices {
// type: System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute
    /**
    Allows an unmanaged method to call a managed method.

    */
public final class AllowReversePInvokeCallsAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_AllowReversePInvokeCallsAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_AllowReversePInvokeCallsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // AllowReversePInvokeCallsAttribute


// type: System.Runtime.InteropServices.ArrayWithOffset
// boxed value type
    /**
    Encapsulates an array and an offset within the specified array.

    */
public final class ArrayWithOffset
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ArrayWithOffset_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.Int32)
// docid: M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)
    /**
    Initializes a new instance of the  structure.

    - Parameter array: A managed array.
    - Parameter offset: The offset in bytes, of the element to be passed through platform invoke.
    */
    public init(array : Optional<dotnet.System.Object>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ArrayWithOffset_ctor_0__2__Object_i32(&__thrown, array?.get_handle() ?? nil, offset);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Runtime_InteropServices_ArrayWithOffset_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)
    /**
    Indicates whether the specified object matches the current  object.

    - Parameter obj: Object to compare with this instance.
    - Returns: 
         if the object matches this ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ArrayWithOffset_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Runtime.InteropServices.ArrayWithOffset)
// docid: M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)
    /**
    Indicates whether the specified  object matches the current instance.

    - Parameter obj: An  object to compare with this instance.
    - Returns: 
         if the specified  object matches the current instance; otherwise, .

    */
    public func Equals(obj : dotnet.System.Runtime.InteropServices.ArrayWithOffset) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ArrayWithOffset_bool__Equals_0__1__ArrayWithOffset(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object GetArray()
// docid: M:System.Runtime.InteropServices.ArrayWithOffset.GetArray
    /**
    Returns the managed array referenced by this .

    - Returns: The managed array this instance references.

    */
    public func GetArray() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ArrayWithOffset_Object__GetArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode
    /**
    Returns a hash code for this value type.

    - Returns: The hash code for this instance.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ArrayWithOffset_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetOffset()
// docid: M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset
    /**
    Returns the offset provided when this  was constructed.

    - Returns: The offset for this instance.

    */
    public func GetOffset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ArrayWithOffset_i32__GetOffset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Runtime.InteropServices.ArrayWithOffset, System.Runtime.InteropServices.ArrayWithOffset)
// docid: M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)
    /**
    Determines whether two specified  objects have the same value.

    - Parameter a: An  object to compare with the  parameter.
    - Parameter b: An  object to compare with the  parameter.
    - Returns: 
         if the value of  is the same as the value of ; otherwise, .

    */
    public class func op_Equality(a : dotnet.System.Runtime.InteropServices.ArrayWithOffset, b : dotnet.System.Runtime.InteropServices.ArrayWithOffset) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ArrayWithOffset_bool__op_Equality_0__2__ArrayWithOffset_ArrayWithOffset(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Runtime.InteropServices.ArrayWithOffset, System.Runtime.InteropServices.ArrayWithOffset)
// docid: M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)
    /**
    Determines whether two specified  objects no not have the same value.

    - Parameter a: An  object to compare with the  parameter.
    - Parameter b: An  object to compare with the  parameter.
    - Returns: 
         if the value of  is not the same as the value of ; otherwise, .

    */
    public class func op_Inequality(a : dotnet.System.Runtime.InteropServices.ArrayWithOffset, b : dotnet.System.Runtime.InteropServices.ArrayWithOffset) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ArrayWithOffset_bool__op_Inequality_0__2__ArrayWithOffset_ArrayWithOffset(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ArrayWithOffset


// type: System.Runtime.InteropServices.AutomationProxyAttribute
    /**
    Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.

    */
public final class AutomationProxyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_AutomationProxyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool)
// docid: M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter val: 
         if the class should be marshaled using the Automation Marshaler;  if a proxy stub marshaler should be used.
    */
    public init(val : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_AutomationProxyAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(val ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Value()
// docid: M:System.Runtime.InteropServices.AutomationProxyAttribute.get_Value
    public func get_Value() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_AutomationProxyAttribute_bool__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating the type of marshaler to use.

    */
    public var Value : Bool {
        get {
            return try! get_Value();
        }
    }
} // AutomationProxyAttribute


// type: System.Runtime.InteropServices.BStrWrapper
    /**
    Marshals data of type  from managed to unmanaged code. This class cannot be inherited.

    */
public final class BStrWrapper
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_BStrWrapper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)
    /**
    Initializes a new instance of the  class with the specified  object.

    - Parameter value: The object to wrap and marshal as .
    */
    public init(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_BStrWrapper_ctor_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified  object.

    - Parameter value: The object to wrap and marshal as .
    */
    public init(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_BStrWrapper_ctor_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_WrappedObject()
// docid: M:System.Runtime.InteropServices.BStrWrapper.get_WrappedObject
    public func get_WrappedObject() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_BStrWrapper_String__get_WrappedObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the wrapped  object to marshal as type .

    */
    public var WrappedObject : Optional<dotnet.System.String> {
        get {
            return try! get_WrappedObject();
        }
    }
} // BStrWrapper


// type: System.Runtime.InteropServices.BestFitMappingAttribute
    /**
    Controls whether Unicode characters are converted to the closest matching ANSI characters.

    */
public final class BestFitMappingAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_BestFitMappingAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // instance field: System.Boolean ThrowOnUnmappableChar
    /**
    Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.

    */
    public var ThrowOnUnmappableChar : Bool {
        get {
        let __return = (System_Runtime_InteropServices_BestFitMappingAttribute_get_ThrowOnUnmappableChar(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_BestFitMappingAttribute_set_ThrowOnUnmappableChar(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // .ctor(bool)
// docid: M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class set to the value of the  property.

    - Parameter BestFitMapping: 
         to indicate that best-fit mapping is enabled; otherwise, . The default is .
    */
    public init(BestFitMapping : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_BestFitMappingAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(BestFitMapping ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_BestFitMapping()
// docid: M:System.Runtime.InteropServices.BestFitMappingAttribute.get_BestFitMapping
    public func get_BestFitMapping() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_BestFitMappingAttribute_bool__get_BestFitMapping_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.

    */
    public var BestFitMapping : Bool {
        get {
            return try! get_BestFitMapping();
        }
    }
} // BestFitMappingAttribute


// type: System.Runtime.InteropServices.CLong
// boxed value type
public final class CLong
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CLong_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Value : dotnet.System.IntPtr {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Runtime.InteropServices.CLong.#ctor(System.Int32)
    public init(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_CLong_ctor_0__1__i32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IntPtr)
// docid: M:System.Runtime.InteropServices.CLong.#ctor(System.IntPtr)
    public init(value : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_CLong_ctor_0__1__IntPtr(&__thrown, value.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Runtime_InteropServices_CLong_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.Runtime.InteropServices.CLong.Equals(System.Object)
    public func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CLong_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Runtime.InteropServices.CLong)
// docid: M:System.Runtime.InteropServices.CLong.Equals(System.Runtime.InteropServices.CLong)
    public func Equals(other : dotnet.System.Runtime.InteropServices.CLong) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CLong_bool__Equals_0__1__CLong(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Runtime.InteropServices.CLong.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CLong_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Runtime.InteropServices.CLong.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CLong_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.IntPtr get_Value()
// docid: M:System.Runtime.InteropServices.CLong.get_Value
    public func get_Value() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CLong_IntPtr__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
} // CLong


// type: System.Runtime.InteropServices.COMException
    /**
    The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.

    */
open class COMException
    :
    dotnet.System.Runtime.InteropServices.ExternalException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_COMException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.COMException.#ctor
    /**
    Initializes a new instance of the  class with default values.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_COMException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.COMException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified message.

    - Parameter message: The message that indicates the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_COMException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_COMException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32)
// docid: M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)
    /**
    Initializes a new instance of the  class with a specified message and error code.

    - Parameter message: The message that indicates the reason the exception occurred.
    - Parameter errorCode: The error code (HRESULT) value associated with this exception.
    */
    public override init(message : Optional<dotnet.System.String>, errorCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_COMException_ctor_0__2__String_i32(&__thrown, message?.get_handle() ?? nil, errorCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Runtime.InteropServices.COMException.ToString
    /**
    Converts the contents of the exception to a string.

    - Returns: A string containing the , , , and  properties of the exception.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_COMException_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // COMException


// type: System.Runtime.InteropServices.CULong
// boxed value type
public final class CULong
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CULong_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Value : dotnet.System.UIntPtr {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.UInt32)
// docid: M:System.Runtime.InteropServices.CULong.#ctor(System.UInt32)
    public init(value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_CULong_ctor_0__1__u32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.UIntPtr)
// docid: M:System.Runtime.InteropServices.CULong.#ctor(System.UIntPtr)
    public init(value : dotnet.System.UIntPtr) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_CULong_ctor_0__1__UIntPtr(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Runtime_InteropServices_CULong_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.Runtime.InteropServices.CULong.Equals(System.Object)
    public func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CULong_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Runtime.InteropServices.CULong)
// docid: M:System.Runtime.InteropServices.CULong.Equals(System.Runtime.InteropServices.CULong)
    public func Equals(other : dotnet.System.Runtime.InteropServices.CULong) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CULong_bool__Equals_0__1__CULong(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Runtime.InteropServices.CULong.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CULong_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Runtime.InteropServices.CULong.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CULong_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.UIntPtr get_Value()
// docid: M:System.Runtime.InteropServices.CULong.get_Value
    public func get_Value() throws -> dotnet.System.UIntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CULong_UIntPtr__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.UIntPtr(hndl : __return);
        }
    }
} // CULong


// type: System.Runtime.InteropServices.CallingConvention
    /**
    Specifies the calling convention required to call methods implemented in unmanaged code.

    */
public struct CallingConvention : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CallingConvention_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.CallingConvention Winapi
    /**
    This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows x86 the default is  and on Linux x86 it is .

    */
    public static var Winapi : dotnet.System.Runtime.InteropServices.CallingConvention {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CallingConvention(val: System_Runtime_InteropServices_CallingConvention_get_Winapi());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CallingConvention Cdecl
    /**
    The caller cleans the stack. This enables calling functions with , which makes it appropriate to use for methods that accept a variable number of parameters, such as .

    */
    public static var Cdecl : dotnet.System.Runtime.InteropServices.CallingConvention {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CallingConvention(val: System_Runtime_InteropServices_CallingConvention_get_Cdecl());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CallingConvention StdCall
    /**
    The callee cleans the stack.

    */
    public static var StdCall : dotnet.System.Runtime.InteropServices.CallingConvention {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CallingConvention(val: System_Runtime_InteropServices_CallingConvention_get_StdCall());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CallingConvention ThisCall
    /**
    The first parameter is the  pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.

    */
    public static var ThisCall : dotnet.System.Runtime.InteropServices.CallingConvention {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CallingConvention(val: System_Runtime_InteropServices_CallingConvention_get_ThisCall());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CallingConvention FastCall
    /**
    This calling convention is not supported.

    */
    public static var FastCall : dotnet.System.Runtime.InteropServices.CallingConvention {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CallingConvention(val: System_Runtime_InteropServices_CallingConvention_get_FastCall());
            return __return;
        }
    }
} // CallingConvention


// type: System.Runtime.InteropServices.ClassInterfaceAttribute
    /**
    Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.

    */
public final class ClassInterfaceAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ClassInterfaceAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int16)
// docid: M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)
    /**
    Initializes a new instance of the  class with the specified  enumeration value.

    - Parameter classInterfaceType: Describes the type of interface that is generated for a class.
    */
    public init(classInterfaceType : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ClassInterfaceAttribute_ctor_0__1__i16(&__thrown, classInterfaceType);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.InteropServices.ClassInterfaceType)
// docid: M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)
    /**
    Initializes a new instance of the  class with the specified  enumeration member.

    - Parameter classInterfaceType: One of the  values that describes the type of interface that is generated for a class.
    */
    public init(classInterfaceType : dotnet.System.Runtime.InteropServices.ClassInterfaceType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ClassInterfaceAttribute_ctor_0__1__ClassInterfaceType(&__thrown, classInterfaceType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.ClassInterfaceType get_Value()
// docid: M:System.Runtime.InteropServices.ClassInterfaceAttribute.get_Value
    public func get_Value() throws -> dotnet.System.Runtime.InteropServices.ClassInterfaceType {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ClassInterfaceAttribute_ClassInterfaceType__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.ClassInterfaceType(val: __return);
        }
    }
    /**
    Gets the  value that describes which type of interface should be generated for the class.

    */
    public var Value : dotnet.System.Runtime.InteropServices.ClassInterfaceType {
        get {
            return try! get_Value();
        }
    }
} // ClassInterfaceAttribute


// type: System.Runtime.InteropServices.ClassInterfaceType
    /**
    Identifies the type of class interface that is generated for a class.

    */
public struct ClassInterfaceType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ClassInterfaceType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ClassInterfaceType None
    /**
    Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the  interface. This is the recommended setting for . Using  is the only way to expose functionality through interfaces implemented explicitly by the class.

    */
    public static var None : dotnet.System.Runtime.InteropServices.ClassInterfaceType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ClassInterfaceType(val: System_Runtime_InteropServices_ClassInterfaceType_get_None());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ClassInterfaceType AutoDispatch
    /**
    
        Indicates that the class only supports late binding for COM clients. A  for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the  in order to prevent clients from caching the DISPIDs of the interface. The  does not exhibit the versioning problems described in  because clients can only late-bind to the interface.
        This is the default setting for .
      

    */
    public static var AutoDispatch : dotnet.System.Runtime.InteropServices.ClassInterfaceType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ClassInterfaceType(val: System_Runtime_InteropServices_ClassInterfaceType_get_AutoDispatch());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ClassInterfaceType AutoDual
    /**
    Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using  is strongly discouraged because of the versioning limitations described in .

    */
    public static var AutoDual : dotnet.System.Runtime.InteropServices.ClassInterfaceType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ClassInterfaceType(val: System_Runtime_InteropServices_ClassInterfaceType_get_AutoDual());
            return __return;
        }
    }
} // ClassInterfaceType


// type: System.Runtime.InteropServices.CoClassAttribute
    /**
    Specifies the class identifier of a coclass imported from a type library.

    */
public final class CoClassAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CoClassAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)
    /**
    Initializes new instance of the  with the class identifier of the original coclass.

    - Parameter coClass: A  that contains the class identifier of the original coclass.
    */
    public init(coClass : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_CoClassAttribute_ctor_0__1__Type(&__thrown, coClass.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_CoClass()
// docid: M:System.Runtime.InteropServices.CoClassAttribute.get_CoClass
    public func get_CoClass() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CoClassAttribute_Type__get_CoClass_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the class identifier of the original coclass.

    */
    public var CoClass : dotnet.System.Type_ {
        get {
            return try! get_CoClass();
        }
    }
} // CoClassAttribute


// type: System.Runtime.InteropServices.CollectionsMarshal
public struct CollectionsMarshal {
} // CollectionsMarshal


// type: System.Runtime.InteropServices.ComAliasNameAttribute
    /**
    Indicates the COM alias for a parameter or field type.

    */
public final class ComAliasNameAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComAliasNameAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the alias for the attributed field or parameter.

    - Parameter alias: The alias for the field or parameter as found in the type library when it was imported.
    */
    public init(alias : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComAliasNameAttribute_ctor_0__1__String(&__thrown, alias.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Runtime.InteropServices.ComAliasNameAttribute.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAliasNameAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the alias for the field or parameter as found in the type library when it was imported.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // ComAliasNameAttribute


// type: System.Runtime.InteropServices.ComAwareEventInfo
    /**
    Permits late-bound registration of an event handler.

    */
open class ComAwareEventInfo
    :
    dotnet.System.Reflection.EventInfo
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComAwareEventInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, System.String)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)
    /**
    Initializes a new instance of the  class by using the specified type and a name of the event on the type.

    - Parameter type: The type of object.
    - Parameter eventName: The name of an event on .
    */
    public init(type : dotnet.System.Type_, eventName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComAwareEventInfo_ctor_0__2__Type_String(&__thrown, type.get_handle(), eventName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddEventHandler(System.Object, System.Delegate)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)
    /**
    Attaches an event handler to a COM object.

    - Parameter target: The target object that the event delegate should bind to.
    - Parameter handler: The event delegate.
    */
    open func AddEventHandler(target : dotnet.System.Object, handler : dotnet.System.Delegate) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComAwareEventInfo_void__AddEventHandler_0__2__Object_Delegate(&__thrown, self.get_handle(), target.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Reflection.MethodInfo GetAddMethod(bool)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)
    /**
    Gets the method that was used to add an event handler delegate to the event source.

    - Parameter nonPublic: 
         to return non-public methods; otherwise, .
    - Returns: The method that was used to add an event handler delegate to the event source.

    */
    open override func GetAddMethod(nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_MethodInfo__GetAddMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object[] GetCustomAttributes(bool)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)
    /**
    When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.

    - Parameter inherit: 
         to search this member's inheritance chain to find the attributes; otherwise, .
    - Returns: An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.

    */
    open override func GetCustomAttributes(inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_ObjectArray__GetCustomAttributes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetCustomAttributes(System.Type, bool)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)
    /**
    When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.

    - Parameter attributeType: The attribute type to search for. Only attributes that are assignable to this type can be returned.
    - Parameter inherit: 
         to search this member's inheritance chain to find the attributes; otherwise, .
    - Returns: An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.

    */
    open override func GetCustomAttributes(attributeType : dotnet.System.Type_, inherit : Bool) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_ObjectArray__GetCustomAttributes_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData()
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData
    /**
    Returns a list of  objects for the current .

    - Returns: A generic list of  objects representing data about the attributes that have been applied to the current .

    */
    open override func GetCustomAttributesData() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Reflection.CustomAttributeData> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_System_Collections_Generic_IList_System_Reflection_CustomAttributeData___GetCustomAttributesData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo[] GetOtherMethods(bool)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)
    /**
    Returns the public or non-public methods that have been associated with an event in metadata.

    - Parameter nonPublic: 
         to include non-public methods; otherwise, .
    - Returns: An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.

    */
    open override func GetOtherMethods(nonPublic : Bool) throws -> dotnet.System_Arr<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_MethodInfoArray__GetOtherMethods_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MethodInfo>(hndl : __return);
        }
    }
    // System.Reflection.MethodInfo GetRaiseMethod(bool)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)
    /**
    When overridden in a derived class, returns the method that was called when the event was raised.

    - Parameter nonPublic: 
         to return non-public methods; otherwise, .
    - Returns: The object that was called when the event was raised.

    */
    open override func GetRaiseMethod(nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_MethodInfo__GetRaiseMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.MethodInfo GetRemoveMethod(bool)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)
    /**
    When overridden in a derived class, retrieves the  object for removing a method of the event.

    - Parameter nonPublic: 
         to return non-public methods; otherwise, .
    - Returns: The method that was used to remove an event handler delegate from the event source.

    */
    open override func GetRemoveMethod(nonPublic : Bool) throws -> Optional<dotnet.System.Reflection.MethodInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_MethodInfo__GetRemoveMethod_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(nonPublic ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MethodInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsDefined(System.Type, bool)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)
    /**
    Indicates whether one or more instances of the specified attribute are applied to this member.

    - Parameter attributeType: The attribute type to search for.
    - Parameter inherit: 
         to search this member's inheritance chain to find the attributes; otherwise, .
    - Returns: 
         if the specified attribute has been applied to this member; otherwise, .

    */
    open override func IsDefined(attributeType : dotnet.System.Type_, inherit : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_bool__IsDefined_0__2__Type_bool(&__thrown, self.get_handle(), attributeType.get_handle(), Swift.Int32(inherit ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveEventHandler(System.Object, System.Delegate)
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)
    /**
    Detaches an event handler from a COM object.

    - Parameter target: The target object that the event delegate is bound to.
    - Parameter handler: The event delegate.
    */
    open func RemoveEventHandler(target : dotnet.System.Object, handler : dotnet.System.Delegate) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComAwareEventInfo_void__RemoveEventHandler_0__2__Object_Delegate(&__thrown, self.get_handle(), target.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Reflection.EventAttributes get_Attributes()
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.get_Attributes
    open override func get_Attributes() throws -> dotnet.System.Reflection.EventAttributes {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_EventAttributes__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.EventAttributes(val: __return);
        }
    }
    // [IsSpecialName] System.Type get_DeclaringType()
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.get_DeclaringType
    open override func get_DeclaringType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_Type__get_DeclaringType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_MetadataToken()
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.get_MetadataToken
    open override func get_MetadataToken() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_i32__get_MetadataToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Reflection.Module get_Module()
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.get_Module
    open override func get_Module() throws -> dotnet.System.Reflection.Module {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_Module__get_Module_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Reflection.Module(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ReflectedType()
// docid: M:System.Runtime.InteropServices.ComAwareEventInfo.get_ReflectedType
    open override func get_ReflectedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComAwareEventInfo_Type__get_ReflectedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the attributes for this event.

    */
    open override var Attributes : dotnet.System.Reflection.EventAttributes {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets the class that declares this member.

    */
    open override var DeclaringType : Optional<dotnet.System.Type_> {
        get {
            return try! get_DeclaringType();
        }
    }
    /**
    Gets the metadata token associated with the current  object.

    */
    open override var MetadataToken : Swift.Int32 {
        get {
            return try! get_MetadataToken();
        }
    }
    /**
    Gets the module associated with the current  object.

    */
    open override var Module : dotnet.System.Reflection.Module {
        get {
            return try! get_Module();
        }
    }
    /**
    Gets the name of the current member.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the class object that was used to initialize this instance.

    */
    open override var ReflectedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReflectedType();
        }
    }
} // ComAwareEventInfo


// type: System.Runtime.InteropServices.ComCompatibleVersionAttribute
    /**
    Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.

    */
public final class ComCompatibleVersionAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComCompatibleVersionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class with the major version, minor version, build, and revision numbers of the assembly.

    - Parameter major: The major version number of the assembly.
    - Parameter minor: The minor version number of the assembly.
    - Parameter build: The build number of the assembly.
    - Parameter revision: The revision number of the assembly.
    */
    public init(major : Swift.Int32, minor : Swift.Int32, build : Swift.Int32, revision : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComCompatibleVersionAttribute_ctor_0__4__i32_i32_i32_i32(&__thrown, major, minor, build, revision);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_BuildNumber()
// docid: M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.get_BuildNumber
    public func get_BuildNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComCompatibleVersionAttribute_i32__get_BuildNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_MajorVersion()
// docid: M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.get_MajorVersion
    public func get_MajorVersion() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComCompatibleVersionAttribute_i32__get_MajorVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_MinorVersion()
// docid: M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.get_MinorVersion
    public func get_MinorVersion() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComCompatibleVersionAttribute_i32__get_MinorVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_RevisionNumber()
// docid: M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.get_RevisionNumber
    public func get_RevisionNumber() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComCompatibleVersionAttribute_i32__get_RevisionNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the build number of the assembly.

    */
    public var BuildNumber : Swift.Int32 {
        get {
            return try! get_BuildNumber();
        }
    }
    /**
    Gets the major version number of the assembly.

    */
    public var MajorVersion : Swift.Int32 {
        get {
            return try! get_MajorVersion();
        }
    }
    /**
    Gets the minor version number of the assembly.

    */
    public var MinorVersion : Swift.Int32 {
        get {
            return try! get_MinorVersion();
        }
    }
    /**
    Gets the revision number of the assembly.

    */
    public var RevisionNumber : Swift.Int32 {
        get {
            return try! get_RevisionNumber();
        }
    }
} // ComCompatibleVersionAttribute


// type: System.Runtime.InteropServices.ComConversionLossAttribute
    /**
    Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.

    */
public final class ComConversionLossAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComConversionLossAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComConversionLossAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ComConversionLossAttribute


// type: System.Runtime.InteropServices.ComDefaultInterfaceAttribute
    /**
    Specifies a default interface to expose to COM. This class cannot be inherited.

    */
public final class ComDefaultInterfaceAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComDefaultInterfaceAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class with the specified  object as the default interface exposed to COM.

    - Parameter defaultInterface: A  value indicating the default interface to expose to COM.
    */
    public init(defaultInterface : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComDefaultInterfaceAttribute_ctor_0__1__Type(&__thrown, defaultInterface.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_Value()
// docid: M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.get_Value
    public func get_Value() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComDefaultInterfaceAttribute_Type__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the  object that specifies the default interface to expose to COM.

    */
    public var Value : dotnet.System.Type_ {
        get {
            return try! get_Value();
        }
    }
} // ComDefaultInterfaceAttribute


// type: System.Runtime.InteropServices.ComEventInterfaceAttribute
    /**
    Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.

    */
public final class ComEventInterfaceAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComEventInterfaceAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, System.Type)
// docid: M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)
    /**
    Initializes a new instance of the  class with the source interface and event provider class.

    - Parameter SourceInterface: A  that contains the original source interface from the type library. COM uses this interface to call back to the managed class.
    - Parameter EventProvider: A  that contains the class that implements the methods of the event interface.
    */
    public init(SourceInterface : dotnet.System.Type_, EventProvider : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComEventInterfaceAttribute_ctor_0__2__Type_Type(&__thrown, SourceInterface.get_handle(), EventProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_EventProvider()
// docid: M:System.Runtime.InteropServices.ComEventInterfaceAttribute.get_EventProvider
    public func get_EventProvider() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComEventInterfaceAttribute_Type__get_EventProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_SourceInterface()
// docid: M:System.Runtime.InteropServices.ComEventInterfaceAttribute.get_SourceInterface
    public func get_SourceInterface() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComEventInterfaceAttribute_Type__get_SourceInterface_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the class that implements the methods of the event interface.

    */
    public var EventProvider : dotnet.System.Type_ {
        get {
            return try! get_EventProvider();
        }
    }
    /**
    Gets the original source interface from the type library.

    */
    public var SourceInterface : dotnet.System.Type_ {
        get {
            return try! get_SourceInterface();
        }
    }
} // ComEventInterfaceAttribute


// type: System.Runtime.InteropServices.ComEventsHelper
public struct ComEventsHelper {
    // void Combine(System.Object, System.Guid, System.Int32, System.Delegate)
// docid: M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)
    /**
    Adds a delegate to the invocation list of events originating from a COM object.

    - Parameter rcw: The COM object that triggers the events the caller would like to respond to.
    - Parameter iid: The identifier of the source interface used by the COM object to trigger events.
    - Parameter dispid: The dispatch identifier of the method on the source interface.
    - Parameter d: The delegate to invoke when the COM event is fired.
    */
    public static func Combine(rcw : dotnet.System.Object, iid : dotnet.System.Guid, dispid : Swift.Int32, d : dotnet.System.Delegate) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComEventsHelper_void__Combine_0__4__Object_Guid_i32_Delegate(&__thrown, rcw.get_handle(), iid.get_handle(), dispid, d.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Delegate Remove(System.Object, System.Guid, System.Int32, System.Delegate)
// docid: M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)
    /**
    Removes a delegate from the invocation list of events originating from a COM object.

    - Parameter rcw: The COM object the delegate is attached to.
    - Parameter iid: The identifier of the source interface used by the COM object to trigger events.
    - Parameter dispid: The dispatch identifier of the method on the source interface.
    - Parameter d: The delegate to remove from the invocation list.
    - Returns: The delegate that was removed from the invocation list.

    */
    public static func Remove(rcw : dotnet.System.Object, iid : dotnet.System.Guid, dispid : Swift.Int32, d : dotnet.System.Delegate) throws -> Optional<dotnet.System.Delegate> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComEventsHelper_Delegate__Remove_0__4__Object_Guid_i32_Delegate(&__thrown, rcw.get_handle(), iid.get_handle(), dispid, d.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Delegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ComEventsHelper


// type: System.Runtime.InteropServices.ComImportAttribute
    /**
    Indicates that the attributed type was previously defined in COM.

    */
public final class ComImportAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComImportAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.ComImportAttribute.#ctor
    /**
    Initializes a new instance of the .

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComImportAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ComImportAttribute


// type: System.Runtime.InteropServices.ComInterfaceType
    /**
    Identifies how to expose an interface to COM.

    */
public struct ComInterfaceType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComInterfaceType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComInterfaceType InterfaceIsDual
    /**
    Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding.  is the default value.

    */
    public static var InterfaceIsDual : dotnet.System.Runtime.InteropServices.ComInterfaceType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComInterfaceType(val: System_Runtime_InteropServices_ComInterfaceType_get_InterfaceIsDual());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComInterfaceType InterfaceIsIUnknown
    /**
    Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.

    */
    public static var InterfaceIsIUnknown : dotnet.System.Runtime.InteropServices.ComInterfaceType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComInterfaceType(val: System_Runtime_InteropServices_ComInterfaceType_get_InterfaceIsIUnknown());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComInterfaceType InterfaceIsIDispatch
    /**
    Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.

    */
    public static var InterfaceIsIDispatch : dotnet.System.Runtime.InteropServices.ComInterfaceType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComInterfaceType(val: System_Runtime_InteropServices_ComInterfaceType_get_InterfaceIsIDispatch());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComInterfaceType InterfaceIsIInspectable
    /**
    Indicates that an interface is exposed to COM as a Windows Runtime interface.

    */
    public static var InterfaceIsIInspectable : dotnet.System.Runtime.InteropServices.ComInterfaceType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComInterfaceType(val: System_Runtime_InteropServices_ComInterfaceType_get_InterfaceIsIInspectable());
            return __return;
        }
    }
} // ComInterfaceType


// type: System.Runtime.InteropServices.ComMemberType
    /**
    Describes the type of a COM member.

    */
public struct ComMemberType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComMemberType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComMemberType Method
    /**
    The member is a normal method.

    */
    public static var Method : dotnet.System.Runtime.InteropServices.ComMemberType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComMemberType(val: System_Runtime_InteropServices_ComMemberType_get_Method());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComMemberType PropGet
    /**
    The member gets properties.

    */
    public static var PropGet : dotnet.System.Runtime.InteropServices.ComMemberType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComMemberType(val: System_Runtime_InteropServices_ComMemberType_get_PropGet());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComMemberType PropSet
    /**
    The member sets properties.

    */
    public static var PropSet : dotnet.System.Runtime.InteropServices.ComMemberType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComMemberType(val: System_Runtime_InteropServices_ComMemberType_get_PropSet());
            return __return;
        }
    }
} // ComMemberType


// type: System.Runtime.InteropServices.ComRegisterFunctionAttribute
    /**
    Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.

    */
public final class ComRegisterFunctionAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComRegisterFunctionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComRegisterFunctionAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ComRegisterFunctionAttribute


// type: System.Runtime.InteropServices.ComSourceInterfacesAttribute
    /**
    Identifies a list of interfaces that are exposed as COM event sources for the attributed class.

    */
public final class ComSourceInterfacesAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComSourceInterfacesAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the name of the event source interface.

    - Parameter sourceInterfaces: A null-delimited list of fully qualified event source interface names.
    */
    public init(sourceInterfaces : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComSourceInterfacesAttribute_ctor_0__1__String(&__thrown, sourceInterfaces.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class with the type to use as a source interface.

    - Parameter sourceInterface: The  of the source interface.
    */
    public init(sourceInterface : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComSourceInterfacesAttribute_ctor_0__1__Type(&__thrown, sourceInterface.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type)
// docid: M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)
    /**
    Initializes a new instance of the  class with the types to use as source interfaces.

    - Parameter sourceInterface1: The  of the default source interface.
    - Parameter sourceInterface2: The  of a source interface.
    */
    public init(sourceInterface1 : dotnet.System.Type_, sourceInterface2 : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComSourceInterfacesAttribute_ctor_0__2__Type_Type(&__thrown, sourceInterface1.get_handle(), sourceInterface2.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type, System.Type)
// docid: M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)
    /**
    Initializes a new instance of the  class with the types to use as source interfaces.

    - Parameter sourceInterface1: The  of the default source interface.
    - Parameter sourceInterface2: The  of a source interface.
    - Parameter sourceInterface3: The  of a source interface.
    */
    public init(sourceInterface1 : dotnet.System.Type_, sourceInterface2 : dotnet.System.Type_, sourceInterface3 : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComSourceInterfacesAttribute_ctor_0__3__Type_Type_Type(&__thrown, sourceInterface1.get_handle(), sourceInterface2.get_handle(), sourceInterface3.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type, System.Type, System.Type)
// docid: M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)
    /**
    Initializes a new instance of the  class with the types to use as source interfaces.

    - Parameter sourceInterface1: The  of the default source interface.
    - Parameter sourceInterface2: The  of a source interface.
    - Parameter sourceInterface3: The  of a source interface.
    - Parameter sourceInterface4: The  of a source interface.
    */
    public init(sourceInterface1 : dotnet.System.Type_, sourceInterface2 : dotnet.System.Type_, sourceInterface3 : dotnet.System.Type_, sourceInterface4 : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComSourceInterfacesAttribute_ctor_0__4__Type_Type_Type_Type(&__thrown, sourceInterface1.get_handle(), sourceInterface2.get_handle(), sourceInterface3.get_handle(), sourceInterface4.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComSourceInterfacesAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the fully qualified name of the event source interface.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // ComSourceInterfacesAttribute


// type: System.Runtime.InteropServices.ComUnregisterFunctionAttribute
    /**
    Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.

    */
public final class ComUnregisterFunctionAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComUnregisterFunctionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ComUnregisterFunctionAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ComUnregisterFunctionAttribute


// type: System.Runtime.InteropServices.ComWrappers
    /**
    Class for managing wrappers of COM IUnknown types.

    */
open class ComWrappers
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComWrappers_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // ComWrappers


// type: System.Runtime.InteropServices.ComWrappers+ComInterfaceDispatch
// boxed value type
    /**
    An application binary interface for function dispatch of a COM interface.

    */
public final class ComWrappers_ComInterfaceDispatch
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComWrappers_ComInterfaceDispatch_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComWrappers_ComInterfaceDispatch_implicit_ctor();
            super.init(hndl: h);
    }
} // ComWrappers_ComInterfaceDispatch


// type: System.Runtime.InteropServices.ComWrappers+ComInterfaceEntry
// boxed value type
    /**
    Interface type and pointer to targeted VTable.

    */
public final class ComWrappers_ComInterfaceEntry
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComWrappers_ComInterfaceEntry_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComWrappers_ComInterfaceEntry_implicit_ctor();
            super.init(hndl: h);
    }
} // ComWrappers_ComInterfaceEntry


// type: System.Runtime.InteropServices.CreateComInterfaceFlags
    /**
    Specifies flags for the  method.

    */
public struct CreateComInterfaceFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CreateComInterfaceFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.CreateComInterfaceFlags None
    /**
    Flag used to indicate no flags set.

    */
    public static var None : dotnet.System.Runtime.InteropServices.CreateComInterfaceFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CreateComInterfaceFlags(val: System_Runtime_InteropServices_CreateComInterfaceFlags_get_None());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CreateComInterfaceFlags CallerDefinedIUnknown
    /**
    The caller will provide an IUnknown Vtable.

    */
    public static var CallerDefinedIUnknown : dotnet.System.Runtime.InteropServices.CreateComInterfaceFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CreateComInterfaceFlags(val: System_Runtime_InteropServices_CreateComInterfaceFlags_get_CallerDefinedIUnknown());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CreateComInterfaceFlags TrackerSupport
    /**
    Flag used to indicate the COM interface should implement IReferenceTrackerTarget.

    */
    public static var TrackerSupport : dotnet.System.Runtime.InteropServices.CreateComInterfaceFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CreateComInterfaceFlags(val: System_Runtime_InteropServices_CreateComInterfaceFlags_get_TrackerSupport());
            return __return;
        }
    }
} // CreateComInterfaceFlags


// type: System.Runtime.InteropServices.CreateObjectFlags
    /**
    Specifies flags for the  method.

    */
public struct CreateObjectFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CreateObjectFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.CreateObjectFlags None
    /**
    Flag used to indicate no flags set.

    */
    public static var None : dotnet.System.Runtime.InteropServices.CreateObjectFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CreateObjectFlags(val: System_Runtime_InteropServices_CreateObjectFlags_get_None());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CreateObjectFlags TrackerObject
    /**
    Indicates that the supplied external COM object implements the IReferenceTracker.

    */
    public static var TrackerObject : dotnet.System.Runtime.InteropServices.CreateObjectFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CreateObjectFlags(val: System_Runtime_InteropServices_CreateObjectFlags_get_TrackerObject());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CreateObjectFlags UniqueInstance
    /**
    Indicates to ignore internal caching and always create a unique instance.

    */
    public static var UniqueInstance : dotnet.System.Runtime.InteropServices.CreateObjectFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CreateObjectFlags(val: System_Runtime_InteropServices_CreateObjectFlags_get_UniqueInstance());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CreateObjectFlags Aggregation
    public static var Aggregation : dotnet.System.Runtime.InteropServices.CreateObjectFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CreateObjectFlags(val: System_Runtime_InteropServices_CreateObjectFlags_get_Aggregation());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CreateObjectFlags Unwrap
    public static var Unwrap : dotnet.System.Runtime.InteropServices.CreateObjectFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CreateObjectFlags(val: System_Runtime_InteropServices_CreateObjectFlags_get_Unwrap());
            return __return;
        }
    }
} // CreateObjectFlags


// type: System.Runtime.InteropServices.CurrencyWrapper
    /**
    Wraps objects the marshaler should marshal as a .

    */
public final class CurrencyWrapper
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CurrencyWrapper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Decimal)
// docid: M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)
    /**
    Initializes a new instance of the  class with the  to be wrapped and marshaled as type .

    - Parameter obj: The  to be wrapped and marshaled as .
    */
    public init(obj : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_CurrencyWrapper_ctor_0__1__Decimal(&__thrown, obj.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object)
// docid: M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)
    /**
    Initializes a new instance of the  class with the object containing the  to be wrapped and marshaled as type .

    - Parameter obj: The object containing the  to be wrapped and marshaled as .
    */
    public init(obj : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_CurrencyWrapper_ctor_0__1__Object(&__thrown, obj.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Decimal get_WrappedObject()
// docid: M:System.Runtime.InteropServices.CurrencyWrapper.get_WrappedObject
    public func get_WrappedObject() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_CurrencyWrapper_Decimal__get_WrappedObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    /**
    Gets the wrapped object to be marshaled as type .

    */
    public var WrappedObject : dotnet.System.Decimal {
        get {
            return try! get_WrappedObject();
        }
    }
} // CurrencyWrapper


// type: System.Runtime.InteropServices.CustomQueryInterfaceMode
    /**
    Indicates whether the  method's IUnknown::QueryInterface calls can use the  interface.

    */
public struct CustomQueryInterfaceMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CustomQueryInterfaceMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.CustomQueryInterfaceMode Ignore
    /**
    IUnknown::QueryInterface method calls should ignore the  interface.

    */
    public static var Ignore : dotnet.System.Runtime.InteropServices.CustomQueryInterfaceMode {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CustomQueryInterfaceMode(val: System_Runtime_InteropServices_CustomQueryInterfaceMode_get_Ignore());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CustomQueryInterfaceMode Allow
    /**
    IUnknown::QueryInterface method calls can use the  interface. When you use this value, the  method overload functions like the  overload.

    */
    public static var Allow : dotnet.System.Runtime.InteropServices.CustomQueryInterfaceMode {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CustomQueryInterfaceMode(val: System_Runtime_InteropServices_CustomQueryInterfaceMode_get_Allow());
            return __return;
        }
    }
} // CustomQueryInterfaceMode


// type: System.Runtime.InteropServices.CustomQueryInterfaceResult
    /**
    Provides return values for the  method.

    */
public struct CustomQueryInterfaceResult : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_CustomQueryInterfaceResult_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.CustomQueryInterfaceResult Handled
    /**
    The interface pointer that is returned from the  method can be used as the result of IUnknown::QueryInterface.

    */
    public static var Handled : dotnet.System.Runtime.InteropServices.CustomQueryInterfaceResult {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CustomQueryInterfaceResult(val: System_Runtime_InteropServices_CustomQueryInterfaceResult_get_Handled());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CustomQueryInterfaceResult NotHandled
    /**
    The custom  was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.

    */
    public static var NotHandled : dotnet.System.Runtime.InteropServices.CustomQueryInterfaceResult {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CustomQueryInterfaceResult(val: System_Runtime_InteropServices_CustomQueryInterfaceResult_get_NotHandled());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.CustomQueryInterfaceResult Failed
    /**
    The interface for a specific interface ID is not available. In this case, the returned interface is . E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.

    */
    public static var Failed : dotnet.System.Runtime.InteropServices.CustomQueryInterfaceResult {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CustomQueryInterfaceResult(val: System_Runtime_InteropServices_CustomQueryInterfaceResult_get_Failed());
            return __return;
        }
    }
} // CustomQueryInterfaceResult


// type: System.Runtime.InteropServices.DefaultCharSetAttribute
    /**
    Specifies the value of the  enumeration. This class cannot be inherited.

    */
public final class DefaultCharSetAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DefaultCharSetAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Runtime.InteropServices.CharSet)
// docid: M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter charSet: One of the  values.
    */
    public init(charSet : dotnet.System.Runtime.InteropServices.CharSet) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_DefaultCharSetAttribute_ctor_0__1__CharSet(&__thrown, charSet.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.CharSet get_CharSet()
// docid: M:System.Runtime.InteropServices.DefaultCharSetAttribute.get_CharSet
    public func get_CharSet() throws -> dotnet.System.Runtime.InteropServices.CharSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DefaultCharSetAttribute_CharSet__get_CharSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.CharSet(val: __return);
        }
    }
    /**
    Gets the default value of  for any call to .

    */
    public var CharSet : dotnet.System.Runtime.InteropServices.CharSet {
        get {
            return try! get_CharSet();
        }
    }
} // DefaultCharSetAttribute


// type: System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute
    /**
    Specifies the paths that are used to search for DLLs that provide functions for platform invokes.

    */
public final class DefaultDllImportSearchPathsAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DefaultDllImportSearchPathsAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Runtime.InteropServices.DllImportSearchPath)
// docid: M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)
    /**
    Initializes a new instance of the  class, specifying the paths to use when searching for the targets of platform invokes.

    - Parameter paths: A bitwise combination of enumeration values that specify the paths that the LoadLibraryEx function searches during platform invokes.
    */
    public init(paths : dotnet.System.Runtime.InteropServices.DllImportSearchPath) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_DefaultDllImportSearchPathsAttribute_ctor_0__1__DllImportSearchPath(&__thrown, paths.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.DllImportSearchPath get_Paths()
// docid: M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.get_Paths
    public func get_Paths() throws -> dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DefaultDllImportSearchPathsAttribute_DllImportSearchPath__get_Paths_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: __return);
        }
    }
    /**
    Gets a bitwise combination of enumeration values that specify the paths that the LoadLibraryEx function searches during platform invokes.

    */
    public var Paths : dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        get {
            return try! get_Paths();
        }
    }
} // DefaultDllImportSearchPathsAttribute


// type: System.Runtime.InteropServices.DefaultParameterValueAttribute
    /**
    Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.

    */
public final class DefaultParameterValueAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DefaultParameterValueAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)
    /**
    Initializes a new instance of the  class with the default value of a parameter.

    - Parameter value: An object that represents the default value of a parameter.
    */
    public init(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_DefaultParameterValueAttribute_ctor_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Runtime.InteropServices.DefaultParameterValueAttribute.get_Value
    public func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DefaultParameterValueAttribute_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the default value of a parameter.

    */
    public var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
} // DefaultParameterValueAttribute


// type: System.Runtime.InteropServices.DispIdAttribute
    /**
    Specifies the COM dispatch identifier (DISPID) of a method, field, or property.

    */
public final class DispIdAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DispIdAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class with the specified DISPID.

    - Parameter dispId: The DISPID for the member.
    */
    public init(dispId : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_DispIdAttribute_ctor_0__1__i32(&__thrown, dispId);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_Value()
// docid: M:System.Runtime.InteropServices.DispIdAttribute.get_Value
    public func get_Value() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DispIdAttribute_i32__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the DISPID for the member.

    */
    public var Value : Swift.Int32 {
        get {
            return try! get_Value();
        }
    }
} // DispIdAttribute


// type: System.Runtime.InteropServices.DispatchWrapper
    /**
    Wraps objects the marshaler should marshal as a .

    */
public final class DispatchWrapper
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DispatchWrapper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)
    /**
    Initializes a new instance of the  class with the object being wrapped.

    - Parameter obj: The object to be wrapped and converted to .
    */
    public init(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_DispatchWrapper_ctor_0__1__Object(&__thrown, obj?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_WrappedObject()
// docid: M:System.Runtime.InteropServices.DispatchWrapper.get_WrappedObject
    public func get_WrappedObject() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DispatchWrapper_Object__get_WrappedObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the object wrapped by the .

    */
    public var WrappedObject : Optional<dotnet.System.Object> {
        get {
            return try! get_WrappedObject();
        }
    }
} // DispatchWrapper


// type: System.Runtime.InteropServices.DllImportAttribute
    /**
    Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.

    */
public final class DllImportAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DllImportAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // instance field: System.Boolean BestFitMapping
    /**
    Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.

    */
    public var BestFitMapping : Bool {
        get {
        let __return = (System_Runtime_InteropServices_DllImportAttribute_get_BestFitMapping(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_DllImportAttribute_set_BestFitMapping(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // instance field: System.Runtime.InteropServices.CallingConvention CallingConvention
    /**
    Indicates the calling convention of an entry point.

    */
    public var CallingConvention : dotnet.System.Runtime.InteropServices.CallingConvention {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CallingConvention(val: System_Runtime_InteropServices_DllImportAttribute_get_CallingConvention(self.get_handle()));
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_DllImportAttribute_set_CallingConvention(self.get_handle(), v.get_value());
        }
    }
    // instance field: System.Runtime.InteropServices.CharSet CharSet
    /**
    Indicates how to marshal string parameters to the method and controls name mangling.

    */
    public var CharSet : dotnet.System.Runtime.InteropServices.CharSet {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CharSet(val: System_Runtime_InteropServices_DllImportAttribute_get_CharSet(self.get_handle()));
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_DllImportAttribute_set_CharSet(self.get_handle(), v.get_value());
        }
    }
    // instance field: System.String EntryPoint
    /**
    Indicates the name or ordinal of the DLL entry point to be called.

    */
    public var EntryPoint : Optional<dotnet.System.String> {
        get {
        let __h = System_Runtime_InteropServices_DllImportAttribute_get_EntryPoint(self.get_handle());
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_DllImportAttribute_set_EntryPoint(self.get_handle(), v?.get_handle());
        }
    }
    // instance field: System.Boolean ExactSpelling
    /**
    Controls whether the  field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.

    */
    public var ExactSpelling : Bool {
        get {
        let __return = (System_Runtime_InteropServices_DllImportAttribute_get_ExactSpelling(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_DllImportAttribute_set_ExactSpelling(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // instance field: System.Boolean PreserveSig
    /**
    Indicates whether unmanaged methods that have  or  return values are directly translated or whether  or  return values are automatically converted to exceptions.

    */
    public var PreserveSig : Bool {
        get {
        let __return = (System_Runtime_InteropServices_DllImportAttribute_get_PreserveSig(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_DllImportAttribute_set_PreserveSig(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // instance field: System.Boolean SetLastError
    /**
    Indicates whether the callee calls the  Windows API function before returning from the attributed method.

    */
    public var SetLastError : Bool {
        get {
        let __return = (System_Runtime_InteropServices_DllImportAttribute_get_SetLastError(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_DllImportAttribute_set_SetLastError(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // instance field: System.Boolean ThrowOnUnmappableChar
    /**
    Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.

    */
    public var ThrowOnUnmappableChar : Bool {
        get {
        let __return = (System_Runtime_InteropServices_DllImportAttribute_get_ThrowOnUnmappableChar(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_DllImportAttribute_set_ThrowOnUnmappableChar(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the name of the DLL containing the method to import.

    - Parameter dllName: The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.
    */
    public init(dllName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_DllImportAttribute_ctor_0__1__String(&__thrown, dllName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Runtime.InteropServices.DllImportAttribute.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DllImportAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the name of the DLL file that contains the entry point.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // DllImportAttribute


// type: System.Runtime.InteropServices.DllImportResolver
    /**
    Provides a delegate used to resolve native libraries via callback.

    */
public final class DllImportResolver
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DllImportResolver_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.IntPtr Invoke(System.String, System.Reflection.Assembly, System.Nullable<System.Runtime.InteropServices.DllImportSearchPath>)
// docid: M:System.Runtime.InteropServices.DllImportResolver.Invoke(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})
    public func Invoke(libraryName : dotnet.System.String, assembly : dotnet.System.Reflection.Assembly, searchPath : Optional<dotnet.System.Runtime.InteropServices.DllImportSearchPath>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DllImportResolver_IntPtr__Invoke_0__3__String_Assembly_System_Nullable_System_Runtime_InteropServices_DllImportSearchPath_(&__thrown, self.get_handle(), libraryName.get_handle(), assembly.get_handle(), (searchPath != nil) ? System_Int32_box(searchPath!.get_value()) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.String, System.Reflection.Assembly, System.Nullable<System.Runtime.InteropServices.DllImportSearchPath>, System.AsyncCallback, System.Object)
// docid: M:System.Runtime.InteropServices.DllImportResolver.BeginInvoke(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.AsyncCallback,System.Object)
    public func BeginInvoke(libraryName : dotnet.System.String, assembly : dotnet.System.Reflection.Assembly, searchPath : Optional<dotnet.System.Runtime.InteropServices.DllImportSearchPath>, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DllImportResolver_IAsyncResult__BeginInvoke_0__5__String_Assembly_System_Nullable_System_Runtime_InteropServices_DllImportSearchPath__AsyncCallback_Object(&__thrown, self.get_handle(), libraryName.get_handle(), assembly.get_handle(), (searchPath != nil) ? System_Int32_box(searchPath!.get_value()) : nil, callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IntPtr EndInvoke(System.IAsyncResult)
// docid: M:System.Runtime.InteropServices.DllImportResolver.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DllImportResolver_IntPtr__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    public init(_ callback : @escaping (dotnet.System.String, dotnet.System.Reflection.Assembly, Optional<dotnet.System.Runtime.InteropServices.DllImportSearchPath>) throws -> dotnet.System.IntPtr) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle, NullableHandle) -> Swift.Int =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, libraryName : NonnullHandle, assembly : NonnullHandle, searchPath : NullableHandle) -> Swift.Int in
            do
            {
                thrown.pointee = nil;
                let ret = try callback(dotnet.System.String(hndl: libraryName), dotnet.System.Reflection.Assembly(hndl: assembly), (searchPath != nil) ? dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: System_Int32_unbox(searchPath!)) : nil);
                return ret.get_value();
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return 0;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return 0;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, libraryName : NonnullHandle, assembly : NonnullHandle, searchPath : NullableHandle) -> Swift.Int
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle, NullableHandle) -> Swift.Int;
            return f(thrown, libraryName, assembly, searchPath);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_DllImportResolver_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IntPtr Invoke(System.String, System.Reflection.Assembly, System.Nullable<System.Runtime.InteropServices.DllImportSearchPath>)
// docid: M:System.Runtime.InteropServices.DllImportResolver.Invoke(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})
    public func callAsFunction(libraryName : dotnet.System.String, assembly : dotnet.System.Reflection.Assembly, searchPath : Optional<dotnet.System.Runtime.InteropServices.DllImportSearchPath>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_DllImportResolver_IntPtr__Invoke_0__3__String_Assembly_System_Nullable_System_Runtime_InteropServices_DllImportSearchPath_(&__thrown, self.get_handle(), libraryName.get_handle(), assembly.get_handle(), (searchPath != nil) ? System_Int32_box(searchPath!.get_value()) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
} // DllImportResolver


// type: System.Runtime.InteropServices.DllImportSearchPath
    /**
    Specifies the paths that are used to search for DLLs that provide functions for platform invokes.

    */
public struct DllImportSearchPath : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DllImportSearchPath_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.DllImportSearchPath LegacyBehavior
    /**
    Search the application directory, and then call the Win32 LoadLibraryEx function with the LOAD_WITH_ALTERED_SEARCH_PATH flag. This value is ignored if any other value is specified. Operating systems that do not support the  attribute use this value, and ignore other values.

    */
    public static var LegacyBehavior : dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        get {
        let __return = dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: System_Runtime_InteropServices_DllImportSearchPath_get_LegacyBehavior());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.DllImportSearchPath AssemblyDirectory
    /**
    When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. This value is used by the .NET Framework, before the paths are passed to the Win32 LoadLibraryEx function.

    */
    public static var AssemblyDirectory : dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        get {
        let __return = dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: System_Runtime_InteropServices_DllImportSearchPath_get_AssemblyDirectory());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.DllImportSearchPath UseDllDirectoryForDependencies
    /**
    Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.

    */
    public static var UseDllDirectoryForDependencies : dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        get {
        let __return = dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: System_Runtime_InteropServices_DllImportSearchPath_get_UseDllDirectoryForDependencies());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.DllImportSearchPath ApplicationDirectory
    /**
    Include the application directory in the DLL search path.

    */
    public static var ApplicationDirectory : dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        get {
        let __return = dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: System_Runtime_InteropServices_DllImportSearchPath_get_ApplicationDirectory());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.DllImportSearchPath UserDirectories
    /**
    Include any path that was explicitly added to the process-wide search path by using the Win32 AddDllDirectory function.

    */
    public static var UserDirectories : dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        get {
        let __return = dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: System_Runtime_InteropServices_DllImportSearchPath_get_UserDirectories());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.DllImportSearchPath System32
    /**
    Include the  directory in the DLL search path.

    */
    public static var System32 : dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        get {
        let __return = dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: System_Runtime_InteropServices_DllImportSearchPath_get_System32());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.DllImportSearchPath SafeDirectories
    /**
    Include the application directory, the  directory, and user directories in the DLL search path.

    */
    public static var SafeDirectories : dotnet.System.Runtime.InteropServices.DllImportSearchPath {
        get {
        let __return = dotnet.System.Runtime.InteropServices.DllImportSearchPath(val: System_Runtime_InteropServices_DllImportSearchPath_get_SafeDirectories());
            return __return;
        }
    }
} // DllImportSearchPath


// type: System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute
    /**
    Attribute required by any type that is returned by .

    */
public final class DynamicInterfaceCastableImplementationAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_DynamicInterfaceCastableImplementationAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute.#ctor
    /**
    Instance constructor.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_DynamicInterfaceCastableImplementationAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DynamicInterfaceCastableImplementationAttribute


// type: System.Runtime.InteropServices.ErrorWrapper
    /**
    Wraps objects the marshaler should marshal as a .

    */
public final class ErrorWrapper
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ErrorWrapper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Exception)
// docid: M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)
    /**
    Initializes a new instance of the  class with the HRESULT that corresponds to the exception supplied.

    - Parameter e: The exception to be converted to an error code.
    */
    public init(e : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ErrorWrapper_ctor_0__1__Exception(&__thrown, e.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class with the HRESULT of the error.

    - Parameter errorCode: The HRESULT of the error.
    */
    public init(errorCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ErrorWrapper_ctor_0__1__i32(&__thrown, errorCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object)
// docid: M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)
    /**
    Initializes a new instance of the  class with an object containing the HRESULT of the error.

    - Parameter errorCode: The object containing the HRESULT of the error.
    */
    public init(errorCode : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ErrorWrapper_ctor_0__1__Object(&__thrown, errorCode.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_ErrorCode()
// docid: M:System.Runtime.InteropServices.ErrorWrapper.get_ErrorCode
    public func get_ErrorCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ErrorWrapper_i32__get_ErrorCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the error code of the wrapper.

    */
    public var ErrorCode : Swift.Int32 {
        get {
            return try! get_ErrorCode();
        }
    }
} // ErrorWrapper


// type: System.Runtime.InteropServices.GuidAttribute
    /**
    Supplies an explicit  when an automatic GUID is undesirable.

    */
public final class GuidAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_GuidAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified GUID.

    - Parameter guid: The  to be assigned.
    */
    public init(guid : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_GuidAttribute_ctor_0__1__String(&__thrown, guid.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Runtime.InteropServices.GuidAttribute.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_GuidAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the  of the class.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // GuidAttribute


// type: System.Runtime.InteropServices.HandleCollector
    /**
    Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.

    */
public final class HandleCollector
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_HandleCollector_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Int32)
// docid: M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)
    /**
    Initializes a new instance of the  class using a name and a threshold at which to begin handle collection.

    - Parameter name: A name for the collector. This parameter allows you to name collectors that track handle types separately.
    - Parameter initialThreshold: A value that specifies the point at which collections should begin.
    */
    public init(name : Optional<dotnet.System.String>, initialThreshold : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_HandleCollector_ctor_0__2__String_i32(&__thrown, name?.get_handle() ?? nil, initialThreshold);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.

    - Parameter name: A name for the collector.  This parameter allows you to name collectors that track handle types separately.
    - Parameter initialThreshold: A value that specifies the point at which collections should begin.
    - Parameter maximumThreshold: A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.
    */
    public init(name : Optional<dotnet.System.String>, initialThreshold : Swift.Int32, maximumThreshold : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_HandleCollector_ctor_0__3__String_i32_i32(&__thrown, name?.get_handle() ?? nil, initialThreshold, maximumThreshold);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add()
// docid: M:System.Runtime.InteropServices.HandleCollector.Add
    /**
    Increments the current handle count.

    */
    public func Add() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_HandleCollector_void__Add_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove()
// docid: M:System.Runtime.InteropServices.HandleCollector.Remove
    /**
    Decrements the current handle count.

    */
    public func Remove() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_HandleCollector_void__Remove_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Runtime.InteropServices.HandleCollector.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_HandleCollector_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_InitialThreshold()
// docid: M:System.Runtime.InteropServices.HandleCollector.get_InitialThreshold
    public func get_InitialThreshold() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_HandleCollector_i32__get_InitialThreshold_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumThreshold()
// docid: M:System.Runtime.InteropServices.HandleCollector.get_MaximumThreshold
    public func get_MaximumThreshold() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_HandleCollector_i32__get_MaximumThreshold_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Runtime.InteropServices.HandleCollector.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_HandleCollector_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the number of handles collected.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that specifies the point at which collections should begin.

    */
    public var InitialThreshold : Swift.Int32 {
        get {
            return try! get_InitialThreshold();
        }
    }
    /**
    Gets a value that specifies the point at which collections must occur.

    */
    public var MaximumThreshold : Swift.Int32 {
        get {
            return try! get_MaximumThreshold();
        }
    }
    /**
    Gets the name of a  object.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // HandleCollector


// type: System.Runtime.InteropServices.HandleRef
// boxed value type
    /**
    Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.

    */
public final class HandleRef
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_HandleRef_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the handle to a resource.

    */
    public var Handle : dotnet.System.IntPtr {
        get {
            return try! get_Handle();
        }
    }
    /**
    Gets the object holding the handle to a resource.

    */
    public var Wrapper : Optional<dotnet.System.Object> {
        get {
            return try! get_Wrapper();
        }
    }
    // .ctor(System.Object, System.IntPtr)
// docid: M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)
    /**
    Initializes a new instance of the  class with the object to wrap and a handle to the resource used by unmanaged code.

    - Parameter wrapper: A managed object that should not be finalized until the platform invoke call returns.
    - Parameter handle: An  that indicates a handle to a resource.
    */
    public init(wrapper : Optional<dotnet.System.Object>, handle : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_HandleRef_ctor_0__2__Object_IntPtr(&__thrown, wrapper?.get_handle() ?? nil, handle.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Runtime_InteropServices_HandleRef_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.IntPtr op_Explicit(System.Runtime.InteropServices.HandleRef)
// docid: M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)
    public class func op_Explicit(value : dotnet.System.Runtime.InteropServices.HandleRef) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_HandleRef_IntPtr__op_Explicit_0__1__HandleRef(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr ToIntPtr(System.Runtime.InteropServices.HandleRef)
// docid: M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)
    /**
    Returns the internal integer representation of a  object.

    - Parameter value: A  object to retrieve an internal integer representation from.
    - Returns: An  object that represents a  object.

    */
    public class func ToIntPtr(value : dotnet.System.Runtime.InteropServices.HandleRef) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_HandleRef_IntPtr__ToIntPtr_0__1__HandleRef(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] System.IntPtr get_Handle()
// docid: M:System.Runtime.InteropServices.HandleRef.get_Handle
    public func get_Handle() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_HandleRef_IntPtr__get_Handle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] System.Object get_Wrapper()
// docid: M:System.Runtime.InteropServices.HandleRef.get_Wrapper
    public func get_Wrapper() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_HandleRef_Object__get_Wrapper_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // HandleRef


// type: System.Runtime.InteropServices.ICustomAdapter
    /**
    Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.

    */
open class ICustomAdapter
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ICustomAdapter
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ICustomAdapter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object GetUnderlyingObject()
// docid: M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject
    /**
    Provides access to the underlying object wrapped by a custom marshaler.

    - Returns: The object contained by the adapter object.

    */
    open func GetUnderlyingObject() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ICustomAdapter_Object__GetUnderlyingObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // ICustomAdapter


// type: System.Runtime.InteropServices.ICustomFactory
    /**
    Enables users to write activation code for managed objects that extend .

    */
open class ICustomFactory
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ICustomFactory
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ICustomFactory_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.MarshalByRefObject CreateInstance(System.Type)
// docid: M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)
    /**
    Creates a new instance of the specified type.

    - Parameter serverType: The type to activate.
    - Returns: A  associated with the specified type.

    */
    open func CreateInstance(serverType : dotnet.System.Type_) throws -> dotnet.System.MarshalByRefObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ICustomFactory_MarshalByRefObject__CreateInstance_0__1__Type(&__thrown, self.get_handle(), serverType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.MarshalByRefObject(hndl : __return);
        }
    }
} // ICustomFactory


// type: System.Runtime.InteropServices.ICustomMarshaler
    /**
    Provides custom wrappers for handling method calls.

    */
open class ICustomMarshaler
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ICustomMarshaler
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ICustomMarshaler_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void CleanUpManagedData(System.Object)
// docid: M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
    /**
    Performs necessary cleanup of the managed data when it is no longer needed.

    - Parameter ManagedObj: The managed object to be destroyed.
    */
    open func CleanUpManagedData(ManagedObj : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ICustomMarshaler_void__CleanUpManagedData_0__1__Object(&__thrown, self.get_handle(), ManagedObj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CleanUpNativeData(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
    /**
    Performs necessary cleanup of the unmanaged data when it is no longer needed.

    - Parameter pNativeData: A pointer to the unmanaged data to be destroyed.
    */
    open func CleanUpNativeData(pNativeData : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ICustomMarshaler_void__CleanUpNativeData_0__1__IntPtr(&__thrown, self.get_handle(), pNativeData.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 GetNativeDataSize()
// docid: M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
    /**
    Returns the size of the native data to be marshaled.

    - Returns: The size, in bytes, of the native data.

    */
    open func GetNativeDataSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ICustomMarshaler_i32__GetNativeDataSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.IntPtr MarshalManagedToNative(System.Object)
// docid: M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
    /**
    Converts the managed data to unmanaged data.

    - Parameter ManagedObj: The managed object to be converted.
    - Returns: A pointer to the COM view of the managed object.

    */
    open func MarshalManagedToNative(ManagedObj : dotnet.System.Object) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ICustomMarshaler_IntPtr__MarshalManagedToNative_0__1__Object(&__thrown, self.get_handle(), ManagedObj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.Object MarshalNativeToManaged(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
    /**
    Converts the unmanaged data to managed data.

    - Parameter pNativeData: A pointer to the unmanaged data to be wrapped.
    - Returns: An object that represents the managed view of the COM data.

    */
    open func MarshalNativeToManaged(pNativeData : dotnet.System.IntPtr) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ICustomMarshaler_Object__MarshalNativeToManaged_0__1__IntPtr(&__thrown, self.get_handle(), pNativeData.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // ICustomMarshaler


// type: System.Runtime.InteropServices.ICustomQueryInterface
    /**
    Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void (ASTERISK)(ASTERISK)ppvObject) method.

    */
open class ICustomQueryInterface
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ICustomQueryInterface
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ICustomQueryInterface_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Runtime.InteropServices.CustomQueryInterfaceResult GetInterface(ref System.Guid, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)
    /**
    Returns an interface according to a specified interface ID.

    - Parameter iid: The GUID of the requested interface.
    - Parameter ppv: A reference to the requested interface, when this method returns.
    - Returns: One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.

    */
    open func GetInterface(iid : inout dotnet.System.Guid, ppv : inout dotnet.System.IntPtr) throws -> dotnet.System.Runtime.InteropServices.CustomQueryInterfaceResult {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_iid = iid.get_handle();
            var _tmp_out_ppv = ppv.get_value();
        let __return = System_Runtime_InteropServices_ICustomQueryInterface_CustomQueryInterfaceResult__GetInterface_0__2__refGuid_outIntPtr(&__thrown, self.get_handle(), &_tmp_ref_iid, &_tmp_out_ppv);
        let _tmp2_iid = dotnet.System.Guid(hndl: _tmp_ref_iid);
            iid = _tmp2_iid;
        let _tmp2_ppv = dotnet.System.IntPtr(val: _tmp_out_ppv);
            ppv = _tmp2_ppv;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.CustomQueryInterfaceResult(val: __return);
        }
    }
} // ICustomQueryInterface


// type: System.Runtime.InteropServices.IDynamicInterfaceCastable
    /**
    Interface used to participate in a type cast failure.

    */
open class IDynamicInterfaceCastable
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_IDynamicInterfaceCastable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_IDynamicInterfaceCastable_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool IsInterfaceImplemented(System.RuntimeTypeHandle, bool)
// docid: M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)
    /**
    Called when an implementing class instance is cast to an interface type that is not contained in the class's metadata.

    - Parameter interfaceType: The interface type.
    - Parameter throwIfNotImplemented: Indicates if the function should throw an exception instead of returning .
    - Returns: 
         if this object can be cast to the given interface; otherwise, .

    */
    open func IsInterfaceImplemented(interfaceType : dotnet.System.RuntimeTypeHandle, throwIfNotImplemented : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_IDynamicInterfaceCastable_bool__IsInterfaceImplemented_0__2__RuntimeTypeHandle_bool(&__thrown, self.get_handle(), interfaceType.get_handle(), Swift.Int32(throwIfNotImplemented ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.RuntimeTypeHandle GetInterfaceImplementation(System.RuntimeTypeHandle)
// docid: M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)
    /**
    Called during interface dispatch when the given interface type cannot be found in the class's metadata.

    - Parameter interfaceType: The interface type.
    - Returns: The type that should be used to dispatch for  on the current object.

    */
    open func GetInterfaceImplementation(interfaceType : dotnet.System.RuntimeTypeHandle) throws -> dotnet.System.RuntimeTypeHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_IDynamicInterfaceCastable_RuntimeTypeHandle__GetInterfaceImplementation_0__1__RuntimeTypeHandle(&__thrown, self.get_handle(), interfaceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.RuntimeTypeHandle(hndl : __return);
        }
    }
} // IDynamicInterfaceCastable


// type: System.Runtime.InteropServices.ImportedFromTypeLibAttribute
    /**
    Indicates that the types defined within an assembly were originally defined in a type library.

    */
public final class ImportedFromTypeLibAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ImportedFromTypeLibAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the name of the original type library file.

    - Parameter tlbFile: The location of the original type library file.
    */
    public init(tlbFile : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ImportedFromTypeLibAttribute_ctor_0__1__String(&__thrown, tlbFile.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ImportedFromTypeLibAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the name of the original type library file.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // ImportedFromTypeLibAttribute


// type: System.Runtime.InteropServices.InterfaceTypeAttribute
    /**
    Indicates whether a managed interface is dual, dispatch-only, or  -only when exposed to COM.

    */
public final class InterfaceTypeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_InterfaceTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int16)
// docid: M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)
    /**
    Initializes a new instance of the  class with the specified  enumeration member.

    - Parameter interfaceType: Describes how the interface should be exposed to COM clients.
    */
    public init(interfaceType : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_InterfaceTypeAttribute_ctor_0__1__i16(&__thrown, interfaceType);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.InteropServices.ComInterfaceType)
// docid: M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)
    /**
    Initializes a new instance of the  class with the specified  enumeration member.

    - Parameter interfaceType: One of the  values that describes how the interface should be exposed to COM clients.
    */
    public init(interfaceType : dotnet.System.Runtime.InteropServices.ComInterfaceType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_InterfaceTypeAttribute_ctor_0__1__ComInterfaceType(&__thrown, interfaceType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.ComInterfaceType get_Value()
// docid: M:System.Runtime.InteropServices.InterfaceTypeAttribute.get_Value
    public func get_Value() throws -> dotnet.System.Runtime.InteropServices.ComInterfaceType {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_InterfaceTypeAttribute_ComInterfaceType__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.ComInterfaceType(val: __return);
        }
    }
    /**
    Gets the  value that describes how the interface should be exposed to COM.

    */
    public var Value : dotnet.System.Runtime.InteropServices.ComInterfaceType {
        get {
            return try! get_Value();
        }
    }
} // InterfaceTypeAttribute


// type: System.Runtime.InteropServices.InvalidComObjectException
    /**
    The exception thrown when an invalid COM object is used.

    */
open class InvalidComObjectException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_InvalidComObjectException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.InvalidComObjectException.#ctor
    /**
    Initializes an instance of the  with default properties.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_InvalidComObjectException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)
    /**
    Initializes an instance of the  with a message.

    - Parameter message: The message that indicates the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_InvalidComObjectException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_InvalidComObjectException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InvalidComObjectException


// type: System.Runtime.InteropServices.InvalidOleVariantTypeException
    /**
    The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.

    */
open class InvalidOleVariantTypeException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_InvalidOleVariantTypeException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor
    /**
    Initializes a new instance of the  class with default values.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_InvalidOleVariantTypeException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified message.

    - Parameter message: The message that indicates the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_InvalidOleVariantTypeException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_InvalidOleVariantTypeException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InvalidOleVariantTypeException


// type: System.Runtime.InteropServices.LCIDConversionAttribute
    /**
    Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.

    */
public final class LCIDConversionAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_LCIDConversionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class with the position of the LCID in the unmanaged signature.

    - Parameter lcid: Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.
    */
    public init(lcid : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_LCIDConversionAttribute_ctor_0__1__i32(&__thrown, lcid);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_Value()
// docid: M:System.Runtime.InteropServices.LCIDConversionAttribute.get_Value
    public func get_Value() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_LCIDConversionAttribute_i32__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the position of the LCID argument in the unmanaged signature.

    */
    public var Value : Swift.Int32 {
        get {
            return try! get_Value();
        }
    }
} // LCIDConversionAttribute


// type: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute
    /**
    Provides support for user customization of interop stubs in managed-to-COM interop scenarios.

    */
public final class ManagedToNativeComInteropStubAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ManagedToNativeComInteropStubAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type, System.String)
// docid: M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)
    /**
    Initializes a new instance of the  class with the specified class type and method name.

    - Parameter classType: The class that contains the required stub method.
    - Parameter methodName: The name of the stub method.
    */
    public init(classType : dotnet.System.Type_, methodName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ManagedToNativeComInteropStubAttribute_ctor_0__2__Type_String(&__thrown, classType.get_handle(), methodName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_ClassType()
// docid: M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.get_ClassType
    public func get_ClassType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ManagedToNativeComInteropStubAttribute_Type__get_ClassType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_MethodName()
// docid: M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.get_MethodName
    public func get_MethodName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ManagedToNativeComInteropStubAttribute_String__get_MethodName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the class that contains the required stub method.

    */
    public var ClassType : dotnet.System.Type_ {
        get {
            return try! get_ClassType();
        }
    }
    /**
    Gets the name of the stub method.

    */
    public var MethodName : dotnet.System.String {
        get {
            return try! get_MethodName();
        }
    }
} // ManagedToNativeComInteropStubAttribute


// type: System.Runtime.InteropServices.Marshal
public struct Marshal {
    // static field: System.Int32 SystemDefaultCharSize
    /**
    Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.

    */
    public static var SystemDefaultCharSize : Swift.Int32 {
        get {
        let __return = System_Runtime_InteropServices_Marshal_get_SystemDefaultCharSize();
            return __return;
        }
    }
    // static field: System.Int32 SystemMaxDBCSCharSize
    /**
    Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.

    */
    public static var SystemMaxDBCSCharSize : Swift.Int32 {
        get {
        let __return = System_Runtime_InteropServices_Marshal_get_SystemMaxDBCSCharSize();
            return __return;
        }
    }
    // System.Int32 AddRef(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
    /**
    Increments the reference count on the specified interface.

    - Parameter pUnk: The interface reference count to increment.
    - Returns: The new value of the reference count on the  parameter.

    */
    public static func AddRef(pUnk : dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__AddRef_0__1__IntPtr(&__thrown, pUnk.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.IntPtr AllocCoTaskMem(System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
    /**
    Allocates a block of memory of specified size from the COM task memory allocator.

    - Parameter cb: The size of the block of memory to be allocated.
    - Returns: An integer representing the address of the block of memory allocated. This memory must be released with .

    */
    public static func AllocCoTaskMem(cb : Swift.Int32) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__AllocCoTaskMem_0__1__i32(&__thrown, cb);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr AllocHGlobal(System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
    /**
    Allocates memory from the unmanaged memory of the process by using the specified number of bytes.

    - Parameter cb: The required number of bytes in memory.
    - Returns: A pointer to the newly allocated memory. This memory must be released using the  method.

    */
    public static func AllocHGlobal(cb : Swift.Int32) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__AllocHGlobal_0__1__i32(&__thrown, cb);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr AllocHGlobal(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
    /**
    Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.

    - Parameter cb: The required number of bytes in memory.
    - Returns: A pointer to the newly allocated memory. This memory must be released using the  method.

    */
    public static func AllocHGlobal(cb : dotnet.System.IntPtr) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__AllocHGlobal_0__1__IntPtr(&__thrown, cb.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // bool AreComObjectsAvailableForCleanup()
// docid: M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup
    /**
    Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.

    - Returns: 
         if there are any RCWs available for cleanup; otherwise, .

    */
    public static func AreComObjectsAvailableForCleanup() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_bool__AreComObjectsAvailableForCleanup_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object BindToMoniker(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)
    /**
    Gets an interface pointer identified by the specified moniker.

    - Parameter monikerName: The moniker corresponding to the desired interface pointer.
    - Returns: An object containing a reference to the interface pointer identified by the  parameter. A moniker is a name, and in this case, the moniker is defined by an interface.

    */
    public static func BindToMoniker(monikerName : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Object__BindToMoniker_0__1__String(&__thrown, monikerName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void ChangeWrapperHandleStrength(System.Object, bool)
// docid: M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)
    /**
    Changes the strength of an object's COM Callable Wrapper (CCW) handle.

    - Parameter otp: The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.
    - Parameter fIsWeak: 
         to change the strength of the handle on the  parameter to weak, regardless of its reference count;  to reset the handle strength on  to be reference counted.
    */
    public static func ChangeWrapperHandleStrength(otp : dotnet.System.Object, fIsWeak : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ChangeWrapperHandleStrength_0__2__Object_bool(&__thrown, otp.get_handle(), Swift.Int32(fIsWeak ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CleanupUnusedObjectsInCurrentContext()
// docid: M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext
    /**
    Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.

    */
    public static func CleanupUnusedObjectsInCurrentContext() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__CleanupUnusedObjectsInCurrentContext_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.Byte[], System.Int32, System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
    /**
    Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.

    - Parameter source: The one-dimensional array to copy from.
    - Parameter startIndex: The zero-based index in the source array where copying should start.
    - Parameter destination: The memory pointer to copy to.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System_Arr<Swift.UInt8>, startIndex : Swift.Int32, destination : dotnet.System.IntPtr, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__u8Array_i32_IntPtr_i32(&__thrown, source.get_handle(), startIndex, destination.get_value(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.Char[], System.Int32, System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
    /**
    Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.

    - Parameter source: The one-dimensional array to copy from.
    - Parameter startIndex: The zero-based index in the source array where copying should start.
    - Parameter destination: The memory pointer to copy to.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System_Arr<dotnet.System.Char>, startIndex : Swift.Int32, destination : dotnet.System.IntPtr, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__CharArray_i32_IntPtr_i32(&__thrown, source.get_handle(), startIndex, destination.get_value(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.Double[], System.Int32, System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
    /**
    Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.

    - Parameter source: The one-dimensional array to copy from.
    - Parameter startIndex: The zero-based index in the source array where copying should start.
    - Parameter destination: The memory pointer to copy to.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System_Arr<Swift.Double>, startIndex : Swift.Int32, destination : dotnet.System.IntPtr, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__f64Array_i32_IntPtr_i32(&__thrown, source.get_handle(), startIndex, destination.get_value(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.Int16[], System.Int32, System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
    /**
    Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.

    - Parameter source: The one-dimensional array to copy from.
    - Parameter startIndex: The zero-based index in the source array where copying should start.
    - Parameter destination: The memory pointer to copy to.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System_Arr<Swift.Int16>, startIndex : Swift.Int32, destination : dotnet.System.IntPtr, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__i16Array_i32_IntPtr_i32(&__thrown, source.get_handle(), startIndex, destination.get_value(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.Int32[], System.Int32, System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    /**
    Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.

    - Parameter source: The one-dimensional array to copy from.
    - Parameter startIndex: The zero-based index in the source array where copying should start.
    - Parameter destination: The memory pointer to copy to.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System_Arr<Swift.Int32>, startIndex : Swift.Int32, destination : dotnet.System.IntPtr, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__i32Array_i32_IntPtr_i32(&__thrown, source.get_handle(), startIndex, destination.get_value(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.Int64[], System.Int32, System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
    /**
    Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.

    - Parameter source: The one-dimensional array to copy from.
    - Parameter startIndex: The zero-based index in the source array where copying should start.
    - Parameter destination: The memory pointer to copy to.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System_Arr<Swift.Int64>, startIndex : Swift.Int32, destination : dotnet.System.IntPtr, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__i64Array_i32_IntPtr_i32(&__thrown, source.get_handle(), startIndex, destination.get_value(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr, System.Byte[], System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
    /**
    Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.

    - Parameter source: The memory pointer to copy from.
    - Parameter destination: The array to copy to.
    - Parameter startIndex: The zero-based index in the destination array where copying should start.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System.IntPtr, destination : dotnet.System_Arr<Swift.UInt8>, startIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtr_u8Array_i32_i32(&__thrown, source.get_value(), destination.get_handle(), startIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr, System.Char[], System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
    /**
    Copies data from an unmanaged memory pointer to a managed character array.

    - Parameter source: The memory pointer to copy from.
    - Parameter destination: The array to copy to.
    - Parameter startIndex: The zero-based index in the destination array where copying should start.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System.IntPtr, destination : dotnet.System_Arr<dotnet.System.Char>, startIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtr_CharArray_i32_i32(&__thrown, source.get_value(), destination.get_handle(), startIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr, System.Double[], System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
    /**
    Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.

    - Parameter source: The memory pointer to copy from.
    - Parameter destination: The array to copy to.
    - Parameter startIndex: The zero-based index in the destination array where copying should start.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System.IntPtr, destination : dotnet.System_Arr<Swift.Double>, startIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtr_f64Array_i32_i32(&__thrown, source.get_value(), destination.get_handle(), startIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr, System.Int16[], System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
    /**
    Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.

    - Parameter source: The memory pointer to copy from.
    - Parameter destination: The array to copy to.
    - Parameter startIndex: The zero-based index in the destination array where copying should start.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System.IntPtr, destination : dotnet.System_Arr<Swift.Int16>, startIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtr_i16Array_i32_i32(&__thrown, source.get_value(), destination.get_handle(), startIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr, System.Int32[], System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
    /**
    Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.

    - Parameter source: The memory pointer to copy from.
    - Parameter destination: The array to copy to.
    - Parameter startIndex: The zero-based index in the destination array where copying should start.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System.IntPtr, destination : dotnet.System_Arr<Swift.Int32>, startIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtr_i32Array_i32_i32(&__thrown, source.get_value(), destination.get_handle(), startIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr, System.Int64[], System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
    /**
    Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.

    - Parameter source: The memory pointer to copy from.
    - Parameter destination: The array to copy to.
    - Parameter startIndex: The zero-based index in the destination array where copying should start.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System.IntPtr, destination : dotnet.System_Arr<Swift.Int64>, startIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtr_i64Array_i32_i32(&__thrown, source.get_value(), destination.get_handle(), startIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr, System.IntPtr[], System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
    /**
    Copies data from an unmanaged memory pointer to a managed  array.

    - Parameter source: The memory pointer to copy from.
    - Parameter destination: The array to copy to.
    - Parameter startIndex: The zero-based index in the destination array where copying should start.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System.IntPtr, destination : dotnet.System_Arr<dotnet.System.IntPtr>, startIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtr_IntPtrArray_i32_i32(&__thrown, source.get_value(), destination.get_handle(), startIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr, System.Single[], System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
    /**
    Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.

    - Parameter source: The memory pointer to copy from.
    - Parameter destination: The array to copy to.
    - Parameter startIndex: The zero-based index in the destination array where copying should start.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System.IntPtr, destination : dotnet.System_Arr<Swift.Float>, startIndex : Swift.Int32, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtr_f32Array_i32_i32(&__thrown, source.get_value(), destination.get_handle(), startIndex, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.IntPtr[], System.Int32, System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
    /**
    Copies data from a one-dimensional, managed  array to an unmanaged memory pointer.

    - Parameter source: The one-dimensional array to copy from.
    - Parameter startIndex: The zero-based index in the source array where copying should start.
    - Parameter destination: The memory pointer to copy to.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System_Arr<dotnet.System.IntPtr>, startIndex : Swift.Int32, destination : dotnet.System.IntPtr, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__IntPtrArray_i32_IntPtr_i32(&__thrown, source.get_handle(), startIndex, destination.get_value(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Copy(System.Single[], System.Int32, System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
    /**
    Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.

    - Parameter source: The one-dimensional array to copy from.
    - Parameter startIndex: The zero-based index in the source array where copying should start.
    - Parameter destination: The memory pointer to copy to.
    - Parameter length: The number of array elements to copy.
    */
    public static func Copy(source : dotnet.System_Arr<Swift.Float>, startIndex : Swift.Int32, destination : dotnet.System.IntPtr, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Copy_0__4__f32Array_i32_IntPtr_i32(&__thrown, source.get_handle(), startIndex, destination.get_value(), length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IntPtr CreateAggregatedObject(System.IntPtr, System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)
    /**
    Aggregates a managed object with the specified COM object.

    - Parameter pOuter: The outer  pointer.
    - Parameter o: An object to aggregate.
    - Returns: The inner  pointer of the managed object.

    */
    public static func CreateAggregatedObject(pOuter : dotnet.System.IntPtr, o : dotnet.System.Object) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__CreateAggregatedObject_0__2__IntPtr_Object(&__thrown, pOuter.get_value(), o.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr CreateAggregatedObject<T>(System.IntPtr, T)
// docid: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)
    /**
    [Supported in the .NET Framework 4.5.1 and later versions]  
  
 Aggregates a managed object of the specified type with the specified COM object.

    - Parameter pOuter: The outer IUnknown pointer.
    - Parameter o: The managed object to aggregate.
    - Returns: The inner IUnknown pointer of the managed object.

    */
    public static func CreateAggregatedObject<UT : SGBridgeGenericValue>(pOuter : dotnet.System.IntPtr, o : UT) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__CreateAggregatedObject_1__2__IntPtr_UT(UT.get_type_handle(), &__thrown, pOuter.get_value(), o.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.Object CreateWrapperOfType(System.Object, System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)
    /**
    Wraps the specified COM object in an object of the specified type.

    - Parameter o: The object to be wrapped.
    - Parameter t: The type of wrapper to create.
    - Returns: The newly wrapped object that is an instance of the desired type.

    */
    public static func CreateWrapperOfType(o : Optional<dotnet.System.Object>, t : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Object__CreateWrapperOfType_0__2__Object_Type(&__thrown, o?.get_handle() ?? nil, t.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TWrapper CreateWrapperOfType<T, TWrapper>(T)
    // void DestroyStructure(System.IntPtr, System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
    /**
    Frees all substructures that the specified unmanaged memory block points to.

    - Parameter ptr: A pointer to an unmanaged block of memory.
    - Parameter structuretype: Type of a formatted class. This provides the layout information necessary to delete the buffer in the  parameter.
    */
    public static func DestroyStructure(ptr : dotnet.System.IntPtr, structuretype : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__DestroyStructure_0__2__IntPtr_Type(&__thrown, ptr.get_value(), structuretype.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void DestroyStructure<T>(System.IntPtr)
    // System.Int32 FinalReleaseComObject(System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
    /**
    Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.

    - Parameter o: The RCW to be released.
    - Returns: The new value of the reference count of the RCW associated with the  parameter, which is 0 (zero) if the release is successful.

    */
    public static func FinalReleaseComObject(o : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__FinalReleaseComObject_0__1__Object(&__thrown, o.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void FreeBSTR(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
    /**
    Frees a  using the COM SysFreeString function.

    - Parameter ptr: The address of the BSTR to be freed.
    */
    public static func FreeBSTR(ptr : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__FreeBSTR_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void FreeCoTaskMem(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
    /**
    Frees a block of memory allocated by the unmanaged COM task memory allocator.

    - Parameter ptr: The address of the memory to be freed.
    */
    public static func FreeCoTaskMem(ptr : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__FreeCoTaskMem_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void FreeHGlobal(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
    /**
    Frees memory previously allocated from the unmanaged memory of the process.

    - Parameter hglobal: The handle returned by the original matching call to .
    */
    public static func FreeHGlobal(hglobal : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__FreeHGlobal_0__1__IntPtr(&__thrown, hglobal.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Guid GenerateGuidForType(System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)
    /**
    Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).

    - Parameter type: The type to generate a GUID for.
    - Returns: An identifier for the specified type.

    */
    public static func GenerateGuidForType(type : dotnet.System.Type_) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Guid__GenerateGuidForType_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.String GenerateProgIdForType(System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)
    /**
    Returns a programmatic identifier (ProgID) for the specified type.

    - Parameter type: The type to get a ProgID for.
    - Returns: The ProgID of the specified type.

    */
    public static func GenerateProgIdForType(type : dotnet.System.Type_) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__GenerateProgIdForType_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IntPtr GetComInterfaceForObject(System.Object, System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
    /**
    Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.

    - Parameter o: The object that provides the interface.
    - Parameter T: The type of interface that is requested.
    - Returns: The interface pointer that represents the specified interface for the object.

    */
    public static func GetComInterfaceForObject(o : dotnet.System.Object, T : dotnet.System.Type_) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__GetComInterfaceForObject_0__2__Object_Type(&__thrown, o.get_handle(), T.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr GetComInterfaceForObject(System.Object, System.Type, System.Runtime.InteropServices.CustomQueryInterfaceMode)
// docid: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
    /**
    Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.

    - Parameter o: The object that provides the interface.
    - Parameter T: The type of interface that is requested.
    - Parameter mode: One of the enumeration values that indicates whether to apply an  customization that is supplied by an .
    - Returns: The interface pointer that represents the interface for the object.

    */
    public static func GetComInterfaceForObject(o : dotnet.System.Object, T : dotnet.System.Type_, mode : dotnet.System.Runtime.InteropServices.CustomQueryInterfaceMode) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__GetComInterfaceForObject_0__3__Object_Type_CustomQueryInterfaceMode(&__thrown, o.get_handle(), T.get_handle(), mode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.IntPtr GetComInterfaceForObject<T, TInterface>(T)
    // System.Object GetComObjectData(System.Object, System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)
    /**
    Retrieves data that is referenced by the specified key from the specified COM object.

    - Parameter obj: The COM object that contains the data that you want.
    - Parameter key: The key in the internal hash table of  to retrieve the data from.
    - Returns: The data represented by the  parameter in the internal hash table of the  parameter.

    */
    public static func GetComObjectData(obj : dotnet.System.Object, key : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Object__GetComObjectData_0__2__Object_Object(&__thrown, obj.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Delegate GetDelegateForFunctionPointer(System.IntPtr, System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)
    /**
    Converts an unmanaged function pointer to a delegate.

    - Parameter ptr: The unmanaged function pointer to be converted.
    - Parameter t: The type of the delegate to be returned.
    - Returns: A delegate instance that can be cast to the appropriate delegate type.

    */
    public static func GetDelegateForFunctionPointer(ptr : dotnet.System.IntPtr, t : dotnet.System.Type_) throws -> dotnet.System.Delegate {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Delegate__GetDelegateForFunctionPointer_0__2__IntPtr_Type(&__thrown, ptr.get_value(), t.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Delegate(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TDelegate GetDelegateForFunctionPointer<TDelegate>(System.IntPtr)
    // System.Int32 GetEndComSlot(System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)
    /**
    Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.

    - Parameter t: A type that represents an interface or class.
    - Returns: The last VTBL slot of the interface when exposed to COM. If the  parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.

    */
    public static func GetEndComSlot(t : dotnet.System.Type_) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__GetEndComSlot_0__1__Type(&__thrown, t.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetExceptionCode()
// docid: M:System.Runtime.InteropServices.Marshal.GetExceptionCode
    /**
    Retrieves a code that identifies the type of the exception that occurred.

    - Returns: The type of the exception.

    */
    public static func GetExceptionCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__GetExceptionCode_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Exception GetExceptionForHR(System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
    /**
    Converts the specified HRESULT error code to a corresponding  object.

    - Parameter errorCode: The HRESULT to be converted.
    - Returns: An object that represents the converted HRESULT, or  if the HRESULT value doesn't represent an error code (for example,  or ).

    */
    public static func GetExceptionForHR(errorCode : Swift.Int32) throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Exception__GetExceptionForHR_0__1__i32(&__thrown, errorCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Exception GetExceptionForHR(System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)
    /**
    Converts the specified HRESULT error code to a corresponding  object, with additional error information passed in an IErrorInfo interface for the exception object.

    - Parameter errorCode: The HRESULT to be converted.
    - Parameter errorInfo: A pointer to the  interface that provides more information about the error. You can specify IntPtr(0) to use the current  interface, or IntPtr(-1) to ignore the current  interface and construct the exception just from the error code.
    - Returns: An object that represents the converted HRESULT and information obtained from , or  if an HRESULT value doesn't represent an error code (for example,  or ).

    */
    public static func GetExceptionForHR(errorCode : Swift.Int32, errorInfo : dotnet.System.IntPtr) throws -> Optional<dotnet.System.Exception> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Exception__GetExceptionForHR_0__2__i32_IntPtr(&__thrown, errorCode, errorInfo.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Exception(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IntPtr GetExceptionPointers()
// docid: M:System.Runtime.InteropServices.Marshal.GetExceptionPointers
    /**
    Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.

    - Returns: A pointer to an EXCEPTION_POINTERS structure.

    */
    public static func GetExceptionPointers() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__GetExceptionPointers_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr GetFunctionPointerForDelegate(System.Delegate)
// docid: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
    /**
    Converts a delegate into a function pointer that is callable from unmanaged code.

    - Parameter d: The delegate to be passed to unmanaged code.
    - Returns: A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.

    */
    public static func GetFunctionPointerForDelegate(d : dotnet.System.Delegate) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__GetFunctionPointerForDelegate_0__1__Delegate(&__thrown, d.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate)
// docid: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)
    /**
    [Supported in the .NET Framework 4.5.1 and later versions]  
  
 Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.

    - Parameter d: The delegate to be passed to unmanaged code.
    - Returns: A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.

    */
    public static func GetFunctionPointerForDelegate<UTDelegate : SGBridgeGenericValue>(d : UTDelegate) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__GetFunctionPointerForDelegate_1__1__UTDelegate(UTDelegate.get_type_handle(), &__thrown, d.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr GetHINSTANCE(System.Reflection.Module)
// docid: M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)
    /**
    Returns the instance handle (HINSTANCE) for the specified module.

    - Parameter m: The module whose HINSTANCE is desired.
    - Returns: The HINSTANCE for ; or -1 if the module does not have an HINSTANCE.

    */
    public static func GetHINSTANCE(m : dotnet.System.Reflection.Module) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__GetHINSTANCE_0__1__Module(&__thrown, m.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.Int32 GetHRForException(System.Exception)
// docid: M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
    /**
    Converts the specified exception to an HRESULT.

    - Parameter e: The exception to convert to an HRESULT.
    - Returns: The HRESULT mapped to the supplied exception.

    */
    public static func GetHRForException(e : Optional<dotnet.System.Exception>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__GetHRForException_0__1__Exception(&__thrown, e?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetHRForLastWin32Error()
// docid: M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error
    /**
    Returns the HRESULT corresponding to the last error incurred by Win32 code executed using .

    - Returns: The HRESULT corresponding to the last Win32 error code.

    */
    public static func GetHRForLastWin32Error() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__GetHRForLastWin32Error_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.IntPtr GetIDispatchForObject(System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
    /**
    Returns an IDispatch interface from a managed object.

    - Parameter o: The object whose  interface is requested.
    - Returns: The  pointer for the  parameter.

    */
    public static func GetIDispatchForObject(o : dotnet.System.Object) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__GetIDispatchForObject_0__1__Object(&__thrown, o.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr GetIUnknownForObject(System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
    /**
    Returns an IUnknown interface from a managed object.

    - Parameter o: The object whose  interface is requested.
    - Returns: The  pointer for the  parameter.

    */
    public static func GetIUnknownForObject(o : dotnet.System.Object) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__GetIUnknownForObject_0__1__Object(&__thrown, o.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.Int32 GetLastPInvokeError()
// docid: M:System.Runtime.InteropServices.Marshal.GetLastPInvokeError
    public static func GetLastPInvokeError() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__GetLastPInvokeError_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetLastSystemError()
// docid: M:System.Runtime.InteropServices.Marshal.GetLastSystemError
    public static func GetLastSystemError() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__GetLastSystemError_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetLastWin32Error()
// docid: M:System.Runtime.InteropServices.Marshal.GetLastWin32Error
    /**
    Returns the error code returned by the last unmanaged function that was called using platform invoke that has the  flag set.

    - Returns: The last error code set by a call to the Win32 SetLastError function.

    */
    public static func GetLastWin32Error() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__GetLastWin32Error_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void GetNativeVariantForObject(System.Object, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
    /**
    Converts an object to a COM VARIANT.

    - Parameter obj: The object for which to get a COM VARIANT.
    - Parameter pDstNativeVariant: A pointer to receive the VARIANT that corresponds to the  parameter.
    */
    public static func GetNativeVariantForObject(obj : Optional<dotnet.System.Object>, pDstNativeVariant : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__GetNativeVariantForObject_0__2__Object_IntPtr(&__thrown, obj?.get_handle() ?? nil, pDstNativeVariant.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetNativeVariantForObject<T>(T, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)
    /**
    [Supported in the .NET Framework 4.5.1 and later versions]  
  
 Converts an object of a specified type to a COM VARIANT.

    - Parameter obj: The object for which to get a COM VARIANT.
    - Parameter pDstNativeVariant: A pointer to receive the VARIANT that corresponds to the  parameter.
    */
    public static func GetNativeVariantForObject<UT : SGBridgeGenericValue>(obj : UT, pDstNativeVariant : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__GetNativeVariantForObject_1__2__UT_IntPtr(UT.get_type_handle(), &__thrown, obj.to_gval(), pDstNativeVariant.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetObjectForIUnknown(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
    /**
    Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.

    - Parameter pUnk: A pointer to the  interface.
    - Returns: An object that represents the specified unmanaged COM object.

    */
    public static func GetObjectForIUnknown(pUnk : dotnet.System.IntPtr) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Object__GetObjectForIUnknown_0__1__IntPtr(&__thrown, pUnk.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object GetObjectForNativeVariant(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
    /**
    Converts a COM VARIANT to an object.

    - Parameter pSrcNativeVariant: A pointer to a COM VARIANT.
    - Returns: An object that corresponds to the  parameter.

    */
    public static func GetObjectForNativeVariant(pSrcNativeVariant : dotnet.System.IntPtr) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Object__GetObjectForNativeVariant_0__1__IntPtr(&__thrown, pSrcNativeVariant.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T GetObjectForNativeVariant<T>(System.IntPtr)
    // System.Object[] GetObjectsForNativeVariants(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)
    /**
    Converts an array of COM VARIANTs to an array of objects.

    - Parameter aSrcNativeVariant: A pointer to the first element of an array of COM VARIANTs.
    - Parameter cVars: The count of COM VARIANTs in .
    - Returns: An object array that corresponds to .

    */
    public static func GetObjectsForNativeVariants(aSrcNativeVariant : dotnet.System.IntPtr, cVars : Swift.Int32) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_ObjectArray__GetObjectsForNativeVariants_0__2__IntPtr_i32(&__thrown, aSrcNativeVariant.get_value(), cVars);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T[] GetObjectsForNativeVariants<T>(System.IntPtr, System.Int32)
    // System.Int32 GetStartComSlot(System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
    /**
    Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.

    - Parameter t: A type that represents an interface or a class.
    - Returns: The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.

    */
    public static func GetStartComSlot(t : dotnet.System.Type_) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__GetStartComSlot_0__1__Type(&__thrown, t.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Object GetTypedObjectForIUnknown(System.IntPtr, System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)
    /**
    Returns a managed object of a specified type that represents a COM object.

    - Parameter pUnk: A pointer to the  interface of the unmanaged object.
    - Parameter t: The type of the requested managed class.
    - Returns: An instance of the class corresponding to the  object that represents the requested unmanaged COM object.

    */
    public static func GetTypedObjectForIUnknown(pUnk : dotnet.System.IntPtr, t : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Object__GetTypedObjectForIUnknown_0__2__IntPtr_Type(&__thrown, pUnk.get_value(), t.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Type GetTypeFromCLSID(System.Guid)
// docid: M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
    /**
    Returns the type associated with the specified class identifier (CLSID).

    - Parameter clsid: The CLSID of the type to return.
    - Returns: 
         regardless of whether the CLSID is valid.

    */
    public static func GetTypeFromCLSID(clsid : dotnet.System.Guid) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Type__GetTypeFromCLSID_0__1__Guid(&__thrown, clsid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
// docid: M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
    /**
    Retrieves the name of the type represented by an ITypeInfo object.

    - Parameter typeInfo: An object that represents an  pointer.
    - Returns: The name of the type that the  parameter points to.

    */
    public static func GetTypeInfoName(typeInfo : dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__GetTypeInfoName_0__1__ITypeInfo(&__thrown, typeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object GetUniqueObjectForIUnknown(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
    /**
    Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.

    - Parameter unknown: A managed pointer to an  interface.
    - Returns: A unique RCW for the specified  interface.

    */
    public static func GetUniqueObjectForIUnknown(unknown : dotnet.System.IntPtr) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Object__GetUniqueObjectForIUnknown_0__1__IntPtr(&__thrown, unknown.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void InitHandle(System.Runtime.InteropServices.SafeHandle, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.InitHandle(System.Runtime.InteropServices.SafeHandle,System.IntPtr)
    public static func InitHandle(safeHandle : dotnet.System.Runtime.InteropServices.SafeHandle, handle : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__InitHandle_0__2__SafeHandle_IntPtr(&__thrown, safeHandle.get_handle(), handle.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsComObject(System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
    /**
    Indicates whether a specified object represents a COM object.

    - Parameter o: The object to check.
    - Returns: 
         if the  parameter is a COM type; otherwise, .

    */
    public static func IsComObject(o : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_bool__IsComObject_0__1__Object(&__thrown, o.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsTypeVisibleFromCom(System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)
    /**
    Indicates whether a type is visible to COM clients.

    - Parameter t: The type to check for COM visibility.
    - Returns: 
         if the type is visible to COM; otherwise, .

    */
    public static func IsTypeVisibleFromCom(t : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_bool__IsTypeVisibleFromCom_0__1__Type(&__thrown, t.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.IntPtr OffsetOf(System.Type, System.String)
// docid: M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)
    /**
    Returns the field offset of the unmanaged form of the managed class.

    - Parameter t: A value type or formatted reference type that specifies the managed class. You must apply the  to the class.
    - Parameter fieldName: The field within the  parameter.
    - Returns: The offset, in bytes, for the  parameter within the specified class that is declared by platform invoke.

    */
    public static func OffsetOf(t : dotnet.System.Type_, fieldName : dotnet.System.String) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__OffsetOf_0__2__Type_String(&__thrown, t.get_handle(), fieldName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.IntPtr OffsetOf<T>(System.String)
    // void Prelink(System.Reflection.MethodInfo)
// docid: M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)
    /**
    Executes one-time method setup tasks without calling the method.

    - Parameter m: The method to be checked.
    */
    public static func Prelink(m : dotnet.System.Reflection.MethodInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__Prelink_0__1__MethodInfo(&__thrown, m.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PrelinkAll(System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)
    /**
    Performs a pre-link check for all methods on a class.

    - Parameter c: The class whose methods are to be checked.
    */
    public static func PrelinkAll(c : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__PrelinkAll_0__1__Type(&__thrown, c.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String PtrToStringAnsi(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
    /**
    Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed , and widens each character to UTF-16.

    - Parameter ptr: The address of the first character of the unmanaged string.
    - Returns: A managed string that holds a copy of the unmanaged string. If  is , the method returns a null string.

    */
    public static func PtrToStringAnsi(ptr : dotnet.System.IntPtr) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringAnsi_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String PtrToStringAnsi(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)
    /**
    Allocates a managed , copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.

    - Parameter ptr: The address of the first character of the unmanaged string.
    - Parameter len: The byte count of the input string to copy.
    - Returns: A managed string that holds a copy of the native string if the value of the  parameter is not ; otherwise, this method returns .

    */
    public static func PtrToStringAnsi(ptr : dotnet.System.IntPtr, len : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringAnsi_0__2__IntPtr_i32(&__thrown, ptr.get_value(), len);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String PtrToStringAuto(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)
    /**
    Allocates a managed  and copies all characters up to the first null character from a string stored in unmanaged memory into it.

    - Parameter ptr: For Unicode platforms, the address of the first Unicode character.  
  
 -or-  
  
 For ANSI platforms, the address of the first ANSI character.
    - Returns: A managed string that holds a copy of the unmanaged string if the value of the  parameter is not ; otherwise, this method returns .

    */
    public static func PtrToStringAuto(ptr : dotnet.System.IntPtr) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringAuto_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String PtrToStringAuto(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)
    /**
    Allocates a managed  and copies the specified number of characters from a string stored in unmanaged memory into it.

    - Parameter ptr: For Unicode platforms, the address of the first Unicode character.  
  
 -or-  
  
 For ANSI platforms, the address of the first ANSI character.
    - Parameter len: The number of characters to copy.
    - Returns: A managed string that holds a copy of the native string if the value of the  parameter is not ; otherwise, this method returns .

    */
    public static func PtrToStringAuto(ptr : dotnet.System.IntPtr, len : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringAuto_0__2__IntPtr_i32(&__thrown, ptr.get_value(), len);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String PtrToStringBSTR(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
    /**
    Allocates a managed  and copies a binary string (BSTR) stored in unmanaged memory into it.

    - Parameter ptr: The address of the first character of the unmanaged string.
    - Returns: A managed string that holds a copy of the unmanaged string.

    */
    public static func PtrToStringBSTR(ptr : dotnet.System.IntPtr) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringBSTR_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String PtrToStringUni(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
    /**
    Allocates a managed  and copies all characters up to the first null character from an unmanaged Unicode string into it.

    - Parameter ptr: The address of the first character of the unmanaged string.
    - Returns: A managed string that holds a copy of the unmanaged string if the value of the  parameter is not ; otherwise, this method returns .

    */
    public static func PtrToStringUni(ptr : dotnet.System.IntPtr) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringUni_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String PtrToStringUni(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
    /**
    Allocates a managed  and copies a specified number of characters from an unmanaged Unicode string into it.

    - Parameter ptr: The address of the first character of the unmanaged string.
    - Parameter len: The number of Unicode characters to copy.
    - Returns: A managed string that holds a copy of the unmanaged string if the value of the  parameter is not ; otherwise, this method returns .

    */
    public static func PtrToStringUni(ptr : dotnet.System.IntPtr, len : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringUni_0__2__IntPtr_i32(&__thrown, ptr.get_value(), len);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String PtrToStringUTF8(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
    /**
    Allocates a managed  and copies all characters up to the first null character from an unmanaged UTF-8 string into it.

    - Parameter ptr: The address of the first character of the unmanaged string.
    - Returns: A managed string that holds a copy of the unmanaged string if the value of the  parameter is not ; otherwise, this method returns .

    */
    public static func PtrToStringUTF8(ptr : dotnet.System.IntPtr) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringUTF8_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String PtrToStringUTF8(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)
    /**
    Allocates a managed  and copies a specified number of bytes from an unmanaged UTF8 string into it.

    - Parameter ptr: The address of the first character of the unmanaged string.
    - Parameter byteLen: The number of bytes to copy.
    - Returns: A managed string that holds a copy of the unmanaged string if the value of the  parameter is not ; otherwise, this method returns .

    */
    public static func PtrToStringUTF8(ptr : dotnet.System.IntPtr, byteLen : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_String__PtrToStringUTF8_0__2__IntPtr_i32(&__thrown, ptr.get_value(), byteLen);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void PtrToStructure(System.IntPtr, System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)
    /**
    Marshals data from an unmanaged block of memory to a managed object.

    - Parameter ptr: A pointer to an unmanaged block of memory.
    - Parameter structure: The object to which the data is to be copied. This must be an instance of a formatted class.
    */
    public static func PtrToStructure(ptr : dotnet.System.IntPtr, structure : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__PtrToStructure_0__2__IntPtr_Object(&__thrown, ptr.get_value(), structure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object PtrToStructure(System.IntPtr, System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)
    /**
    Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.

    - Parameter ptr: A pointer to an unmanaged block of memory.
    - Parameter structureType: The type of object to be created. This object must represent a formatted class or a structure.
    - Returns: A managed object containing the data pointed to by the  parameter.

    */
    public static func PtrToStructure(ptr : dotnet.System.IntPtr, structureType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_Object__PtrToStructure_0__2__IntPtr_Type(&__thrown, ptr.get_value(), structureType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T PtrToStructure<T>(System.IntPtr)
    // void PtrToStructure<T>(System.IntPtr, T)
// docid: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)
    /**
    [Supported in the .NET Framework 4.5.1 and later versions]  
  
 Marshals data from an unmanaged block of memory to a managed object of the specified type.

    - Parameter ptr: A pointer to an unmanaged block of memory.
    - Parameter structure: The object to which the data is to be copied.
    */
    public static func PtrToStructure<UT : SGBridgeGenericValue>(ptr : dotnet.System.IntPtr, structure : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__PtrToStructure_1__2__IntPtr_UT(UT.get_type_handle(), &__thrown, ptr.get_value(), structure.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 QueryInterface(System.IntPtr, ref System.Guid, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
    /**
    Requests a pointer to a specified interface from a COM object.

    - Parameter pUnk: The interface to be queried.
    - Parameter iid: The interface identifier (IID) of the requested interface.
    - Parameter ppv: When this method returns, contains a reference to the returned interface.
    - Returns: An HRESULT that indicates the success or failure of the call.

    */
    public static func QueryInterface(pUnk : dotnet.System.IntPtr, iid : inout dotnet.System.Guid, ppv : inout dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_iid = iid.get_handle();
            var _tmp_out_ppv = ppv.get_value();
        let __return = System_Runtime_InteropServices_Marshal_i32__QueryInterface_0__3__IntPtr_refGuid_outIntPtr(&__thrown, pUnk.get_value(), &_tmp_ref_iid, &_tmp_out_ppv);
        let _tmp2_iid = dotnet.System.Guid(hndl: _tmp_ref_iid);
            iid = _tmp2_iid;
        let _tmp2_ppv = dotnet.System.IntPtr(val: _tmp_out_ppv);
            ppv = _tmp2_ppv;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte ReadByte(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
    /**
    Reads a single byte from unmanaged memory.

    - Parameter ptr: The address in unmanaged memory from which to read.
    - Returns: The byte read from unmanaged memory.

    */
    public static func ReadByte(ptr : dotnet.System.IntPtr) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_u8__ReadByte_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte ReadByte(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)
    /**
    Reads a single byte at a given offset (or index) from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory from which to read.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The byte read from unmanaged memory at the given offset.

    */
    public static func ReadByte(ptr : dotnet.System.IntPtr, ofs : Swift.Int32) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_u8__ReadByte_0__2__IntPtr_i32(&__thrown, ptr.get_value(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte ReadByte(System.Object, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
    /**
    Reads a single byte at a given offset (or index) from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory of the source object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The byte read from unmanaged memory at the given offset.

    */
    public static func ReadByte(ptr : dotnet.System.Object, ofs : Swift.Int32) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_u8__ReadByte_0__2__Object_i32(&__thrown, ptr.get_handle(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int16 ReadInt16(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
    /**
    Reads a 16-bit signed integer from unmanaged memory.

    - Parameter ptr: The address in unmanaged memory from which to read.
    - Returns: The 16-bit signed integer read from unmanaged memory.

    */
    public static func ReadInt16(ptr : dotnet.System.IntPtr) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i16__ReadInt16_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int16 ReadInt16(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)
    /**
    Reads a 16-bit signed integer at a given offset from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory from which to read.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The 16-bit signed integer read from unmanaged memory at the given offset.

    */
    public static func ReadInt16(ptr : dotnet.System.IntPtr, ofs : Swift.Int32) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i16__ReadInt16_0__2__IntPtr_i32(&__thrown, ptr.get_value(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int16 ReadInt16(System.Object, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)
    /**
    Reads a 16-bit signed integer at a given offset from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory of the source object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The 16-bit signed integer read from unmanaged memory at the given offset.

    */
    public static func ReadInt16(ptr : dotnet.System.Object, ofs : Swift.Int32) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i16__ReadInt16_0__2__Object_i32(&__thrown, ptr.get_handle(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadInt32(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
    /**
    Reads a 32-bit signed integer from unmanaged memory.

    - Parameter ptr: The address in unmanaged memory from which to read.
    - Returns: The 32-bit signed integer read from unmanaged memory.

    */
    public static func ReadInt32(ptr : dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__ReadInt32_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadInt32(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)
    /**
    Reads a 32-bit signed integer at a given offset from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory from which to read.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The 32-bit signed integer read from unmanaged memory.

    */
    public static func ReadInt32(ptr : dotnet.System.IntPtr, ofs : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__ReadInt32_0__2__IntPtr_i32(&__thrown, ptr.get_value(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadInt32(System.Object, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)
    /**
    Reads a 32-bit signed integer at a given offset from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory of the source object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The 32-bit signed integer read from unmanaged memory at the given offset.

    */
    public static func ReadInt32(ptr : dotnet.System.Object, ofs : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__ReadInt32_0__2__Object_i32(&__thrown, ptr.get_handle(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ReadInt64(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
    /**
    Reads a 64-bit signed integer from unmanaged memory.

    - Parameter ptr: The address in unmanaged memory from which to read.
    - Returns: The 64-bit signed integer read from unmanaged memory.

    */
    public static func ReadInt64(ptr : dotnet.System.IntPtr) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i64__ReadInt64_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ReadInt64(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)
    /**
    Reads a 64-bit signed integer at a given offset from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory from which to read.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The 64-bit signed integer read from unmanaged memory at the given offset.

    */
    public static func ReadInt64(ptr : dotnet.System.IntPtr, ofs : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i64__ReadInt64_0__2__IntPtr_i32(&__thrown, ptr.get_value(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ReadInt64(System.Object, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)
    /**
    Reads a 64-bit signed integer at a given offset from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory of the source object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The 64-bit signed integer read from unmanaged memory at the given offset.

    */
    public static func ReadInt64(ptr : dotnet.System.Object, ofs : Swift.Int32) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i64__ReadInt64_0__2__Object_i32(&__thrown, ptr.get_handle(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.IntPtr ReadIntPtr(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
    /**
    Reads a processor native-sized integer from unmanaged memory.

    - Parameter ptr: The address in unmanaged memory from which to read.
    - Returns: The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.

    */
    public static func ReadIntPtr(ptr : dotnet.System.IntPtr) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__ReadIntPtr_0__1__IntPtr(&__thrown, ptr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr ReadIntPtr(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)
    /**
    Reads a processor native sized integer at a given offset from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory from which to read.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The integer read from unmanaged memory at the given offset.

    */
    public static func ReadIntPtr(ptr : dotnet.System.IntPtr, ofs : Swift.Int32) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__ReadIntPtr_0__2__IntPtr_i32(&__thrown, ptr.get_value(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr ReadIntPtr(System.Object, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)
    /**
    Reads a processor native sized integer from unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory of the source object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before reading.
    - Returns: The integer read from unmanaged memory at the given offset.

    */
    public static func ReadIntPtr(ptr : dotnet.System.Object, ofs : Swift.Int32) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__ReadIntPtr_0__2__Object_i32(&__thrown, ptr.get_handle(), ofs);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr ReAllocCoTaskMem(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
    /**
    Resizes a block of memory previously allocated with .

    - Parameter pv: A pointer to memory allocated with .
    - Parameter cb: The new size of the allocated block.
    - Returns: An integer representing the address of the reallocated block of memory. This memory must be released with .

    */
    public static func ReAllocCoTaskMem(pv : dotnet.System.IntPtr, cb : Swift.Int32) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__ReAllocCoTaskMem_0__2__IntPtr_i32(&__thrown, pv.get_value(), cb);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr ReAllocHGlobal(System.IntPtr, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
    /**
    Resizes a block of memory previously allocated with .

    - Parameter pv: A pointer to memory allocated with .
    - Parameter cb: The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type . If you pass a pointer, it is treated as a size.
    - Returns: A pointer to the reallocated memory. This memory must be released using .

    */
    public static func ReAllocHGlobal(pv : dotnet.System.IntPtr, cb : dotnet.System.IntPtr) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__ReAllocHGlobal_0__2__IntPtr_IntPtr(&__thrown, pv.get_value(), cb.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.Int32 Release(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
    /**
    Decrements the reference count on the specified interface.

    - Parameter pUnk: The interface to release.
    - Returns: The new value of the reference count on the interface specified by the  parameter.

    */
    public static func Release(pUnk : dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__Release_0__1__IntPtr(&__thrown, pUnk.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReleaseComObject(System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
    /**
    Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.

    - Parameter o: The COM object to release.
    - Returns: The new value of the reference count of the RCW associated with . This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.

    */
    public static func ReleaseComObject(o : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__ReleaseComObject_0__1__Object(&__thrown, o.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.IntPtr SecureStringToBSTR(System.Security.SecureString)
// docid: M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)
    /**
    Allocates an unmanaged binary string (BSTR) and copies the contents of a managed  object into it.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, where the  parameter was copied to, or 0 if a null object was supplied.

    */
    public static func SecureStringToBSTR(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__SecureStringToBSTR_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr SecureStringToCoTaskMemAnsi(System.Security.SecureString)
// docid: M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)
    /**
    Copies the contents of a managed  object to a block of memory allocated from the unmanaged COM task allocator.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, where the  parameter was copied to, or 0 if a null object was supplied.

    */
    public static func SecureStringToCoTaskMemAnsi(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__SecureStringToCoTaskMemAnsi_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr SecureStringToCoTaskMemUnicode(System.Security.SecureString)
// docid: M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)
    /**
    Copies the contents of a managed  object to a block of memory allocated from the unmanaged COM task allocator.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, where the  parameter was copied to, or 0 if a null object was supplied.

    */
    public static func SecureStringToCoTaskMemUnicode(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__SecureStringToCoTaskMemUnicode_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr SecureStringToGlobalAllocAnsi(System.Security.SecureString)
// docid: M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)
    /**
    Copies the contents of a managed  into unmanaged memory, converting into ANSI format as it copies.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, to where the  parameter was copied, or 0 if a null object was supplied.

    */
    public static func SecureStringToGlobalAllocAnsi(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__SecureStringToGlobalAllocAnsi_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr SecureStringToGlobalAllocUnicode(System.Security.SecureString)
// docid: M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)
    /**
    Copies the contents of a managed  object into unmanaged memory.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, where  was copied, or 0 if  is a  object whose length is 0.

    */
    public static func SecureStringToGlobalAllocUnicode(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__SecureStringToGlobalAllocUnicode_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // bool SetComObjectData(System.Object, System.Object, System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)
    /**
    Sets data referenced by the specified key in the specified COM object.

    - Parameter obj: The COM object in which to store the data.
    - Parameter key: The key in the internal hash table of the COM object in which to store the data.
    - Parameter data: The data to set.
    - Returns: 
         if the data was set successfully; otherwise, .

    */
    public static func SetComObjectData(obj : dotnet.System.Object, key : dotnet.System.Object, data : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_bool__SetComObjectData_0__3__Object_Object_Object(&__thrown, obj.get_handle(), key.get_handle(), data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SetLastPInvokeError(System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.SetLastPInvokeError(System.Int32)
    public static func SetLastPInvokeError(error : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__SetLastPInvokeError_0__1__i32(&__thrown, error);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetLastSystemError(System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.SetLastSystemError(System.Int32)
    public static func SetLastSystemError(error : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__SetLastSystemError_0__1__i32(&__thrown, error);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 SizeOf(System.Object)
// docid: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
    /**
    Returns the unmanaged size of an object in bytes.

    - Parameter structure: The object whose size is to be returned.
    - Returns: The size of the specified object in unmanaged code.

    */
    public static func SizeOf(structure : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__SizeOf_0__1__Object(&__thrown, structure.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 SizeOf(System.Type)
// docid: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
    /**
    Returns the size of an unmanaged type in bytes.

    - Parameter t: The type whose size is to be returned.
    - Returns: The size of the specified type in unmanaged code.

    */
    public static func SizeOf(t : dotnet.System.Type_) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__SizeOf_0__1__Type(&__thrown, t.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Int32 SizeOf<T>()
    // System.Int32 SizeOf<T>(T)
// docid: M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
    /**
    [Supported in the .NET Framework 4.5.1 and later versions]  
  
 Returns the unmanaged size of an object of a specified type in bytes.

    - Parameter structure: The object whose size is to be returned.
    - Returns: The size, in bytes, of the specified object in unmanaged code.

    */
    public static func SizeOf<UT : SGBridgeGenericValue>(structure : UT) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_i32__SizeOf_1__1__UT(UT.get_type_handle(), &__thrown, structure.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.IntPtr StringToBSTR(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
    /**
    Allocates a BSTR and copies the contents of a managed  into it.

    - Parameter s: The managed string to be copied.
    - Returns: An unmanaged pointer to the , or 0 if  is null.

    */
    public static func StringToBSTR(s : Optional<dotnet.System.String>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__StringToBSTR_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr StringToCoTaskMemAnsi(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
    /**
    Copies the contents of a managed  to a block of memory allocated from the unmanaged COM task allocator.

    - Parameter s: A managed string to be copied.
    - Returns: An integer representing a pointer to the block of memory allocated for the string, or 0 if  is .

    */
    public static func StringToCoTaskMemAnsi(s : Optional<dotnet.System.String>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__StringToCoTaskMemAnsi_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr StringToCoTaskMemAuto(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)
    /**
    Copies the contents of a managed  to a block of memory allocated from the unmanaged COM task allocator.

    - Parameter s: A managed string to be copied.
    - Returns: The allocated memory block, or 0 if  is .

    */
    public static func StringToCoTaskMemAuto(s : Optional<dotnet.System.String>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__StringToCoTaskMemAuto_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr StringToCoTaskMemUni(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
    /**
    Copies the contents of a managed  to a block of memory allocated from the unmanaged COM task allocator.

    - Parameter s: A managed string to be copied.
    - Returns: An integer representing a pointer to the block of memory allocated for the string, or 0 if s is .

    */
    public static func StringToCoTaskMemUni(s : Optional<dotnet.System.String>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__StringToCoTaskMemUni_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr StringToCoTaskMemUTF8(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
    /**
    Copies the contents of a managed  to a block of memory allocated from the unmanaged COM task allocator.

    - Parameter s: A managed string to be copied.
    - Returns: An integer representing a pointer to the block of memory allocated for the string, or 0 if  is .

    */
    public static func StringToCoTaskMemUTF8(s : Optional<dotnet.System.String>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__StringToCoTaskMemUTF8_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr StringToHGlobalAnsi(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
    /**
    Copies the contents of a managed  into unmanaged memory, converting into ANSI format as it copies.

    - Parameter s: A managed string to be copied.
    - Returns: The address, in unmanaged memory, to where  was copied, or 0 if  is .

    */
    public static func StringToHGlobalAnsi(s : Optional<dotnet.System.String>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__StringToHGlobalAnsi_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr StringToHGlobalAuto(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)
    /**
    Copies the contents of a managed  into unmanaged memory, converting into ANSI format if required.

    - Parameter s: A managed string to be copied.
    - Returns: The address, in unmanaged memory, to where the string was copied, or 0 if  is .

    */
    public static func StringToHGlobalAuto(s : Optional<dotnet.System.String>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__StringToHGlobalAuto_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr StringToHGlobalUni(System.String)
// docid: M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
    /**
    Copies the contents of a managed  into unmanaged memory.

    - Parameter s: A managed string to be copied.
    - Returns: The address, in unmanaged memory, to where the  was copied, or 0 if  is .

    */
    public static func StringToHGlobalUni(s : Optional<dotnet.System.String>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__StringToHGlobalUni_0__1__String(&__thrown, s?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // void StructureToPtr(System.Object, System.IntPtr, bool)
// docid: M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)
    /**
    Marshals data from a managed object to an unmanaged block of memory.

    - Parameter structure: A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.
    - Parameter ptr: A pointer to an unmanaged block of memory, which must be allocated before this method is called.
    - Parameter fDeleteOld: 
         to call the  method on the  parameter before this method copies the data. The block must contain valid data. Note that passing  when the memory block already contains data can lead to a memory leak.
    */
    public static func StructureToPtr(structure : dotnet.System.Object, ptr : dotnet.System.IntPtr, fDeleteOld : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__StructureToPtr_0__3__Object_IntPtr_bool(&__thrown, structure.get_handle(), ptr.get_value(), Swift.Int32(fDeleteOld ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void StructureToPtr<T>(T, System.IntPtr, bool)
// docid: M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)
    /**
    [Supported in the .NET Framework 4.5.1 and later versions]  
  
 Marshals data from a managed object of a specified type to an unmanaged block of memory.

    - Parameter structure: A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.
    - Parameter ptr: A pointer to an unmanaged block of memory, which must be allocated before this method is called.
    - Parameter fDeleteOld: 
         to call the  method on the  parameter before this method copies the data. The block must contain valid data. Note that passing  when the memory block already contains data can lead to a memory leak.
    */
    public static func StructureToPtr<UT : SGBridgeGenericValue>(structure : UT, ptr : dotnet.System.IntPtr, fDeleteOld : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__StructureToPtr_1__3__UT_IntPtr_bool(UT.get_type_handle(), &__thrown, structure.to_gval(), ptr.get_value(), Swift.Int32(fDeleteOld ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ThrowExceptionForHR(System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
    /**
    Throws an exception with a specific failure HRESULT value.

    - Parameter errorCode: The HRESULT corresponding to the desired exception.
    */
    public static func ThrowExceptionForHR(errorCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ThrowExceptionForHR_0__1__i32(&__thrown, errorCode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ThrowExceptionForHR(System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)
    /**
    Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.

    - Parameter errorCode: The HRESULT corresponding to the desired exception.
    - Parameter errorInfo: A pointer to the IErrorInfo interface that provides more information about the error. You can specify IntPtr(0) to use the current IErrorInfo interface, or IntPtr(-1) to ignore the current IErrorInfo interface and construct the exception just from the error code.
    */
    public static func ThrowExceptionForHR(errorCode : Swift.Int32, errorInfo : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ThrowExceptionForHR_0__2__i32_IntPtr(&__thrown, errorCode, errorInfo.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IntPtr UnsafeAddrOfPinnedArrayElement(System.Array, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
    /**
    Gets the address of the element at the specified index inside the specified array.

    - Parameter arr: The array that contains the desired element.
    - Parameter index: The index in the  parameter of the desired element.
    - Returns: The address of  inside .

    */
    public static func UnsafeAddrOfPinnedArrayElement(arr : dotnet.System.Array, index : Swift.Int32) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_Marshal_IntPtr__UnsafeAddrOfPinnedArrayElement_0__2__Array_i32(&__thrown, arr.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[], System.Int32)
    // void WriteByte(System.IntPtr, System.Byte)
// docid: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)
    /**
    Writes a single byte value to unmanaged memory.

    - Parameter ptr: The address in unmanaged memory to write to.
    - Parameter val: The value to write.
    */
    public static func WriteByte(ptr : dotnet.System.IntPtr, val : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteByte_0__2__IntPtr_u8(&__thrown, ptr.get_value(), val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteByte(System.IntPtr, System.Int32, System.Byte)
// docid: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
    /**
    Writes a single byte value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory to write to.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteByte(ptr : dotnet.System.IntPtr, ofs : Swift.Int32, val : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteByte_0__3__IntPtr_i32_u8(&__thrown, ptr.get_value(), ofs, val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteByte(System.Object, System.Int32, System.Byte)
// docid: M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)
    /**
    Writes a single byte value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory of the target object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteByte(ptr : dotnet.System.Object, ofs : Swift.Int32, val : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteByte_0__3__Object_i32_u8(&__thrown, ptr.get_handle(), ofs, val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt16(System.IntPtr, System.Char)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)
    /**
    Writes a character as a 16-bit integer value to unmanaged memory.

    - Parameter ptr: The address in unmanaged memory to write to.
    - Parameter val: The value to write.
    */
    public static func WriteInt16(ptr : dotnet.System.IntPtr, val : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt16_0__2__IntPtr_Char(&__thrown, ptr.get_value(), val.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt16(System.IntPtr, System.Int16)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)
    /**
    Writes a 16-bit integer value to unmanaged memory.

    - Parameter ptr: The address in unmanaged memory to write to.
    - Parameter val: The value to write.
    */
    public static func WriteInt16(ptr : dotnet.System.IntPtr, val : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt16_0__2__IntPtr_i16(&__thrown, ptr.get_value(), val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt16(System.IntPtr, System.Int32, System.Char)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)
    /**
    Writes a 16-bit signed integer value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in the native heap to write to.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteInt16(ptr : dotnet.System.IntPtr, ofs : Swift.Int32, val : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt16_0__3__IntPtr_i32_Char(&__thrown, ptr.get_value(), ofs, val.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt16(System.IntPtr, System.Int32, System.Int16)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)
    /**
    Writes a 16-bit signed integer value into unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory to write to.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteInt16(ptr : dotnet.System.IntPtr, ofs : Swift.Int32, val : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt16_0__3__IntPtr_i32_i16(&__thrown, ptr.get_value(), ofs, val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt16(System.Object, System.Int32, System.Char)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)
    /**
    Writes a 16-bit signed integer value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory of the target object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteInt16(ptr : dotnet.System.Object, ofs : Swift.Int32, val : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt16_0__3__Object_i32_Char(&__thrown, ptr.get_handle(), ofs, val.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt16(System.Object, System.Int32, System.Int16)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)
    /**
    Writes a 16-bit signed integer value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory of the target object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteInt16(ptr : dotnet.System.Object, ofs : Swift.Int32, val : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt16_0__3__Object_i32_i16(&__thrown, ptr.get_handle(), ofs, val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt32(System.IntPtr, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)
    /**
    Writes a 32-bit signed integer value to unmanaged memory.

    - Parameter ptr: The address in unmanaged memory to write to.
    - Parameter val: The value to write.
    */
    public static func WriteInt32(ptr : dotnet.System.IntPtr, val : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt32_0__2__IntPtr_i32(&__thrown, ptr.get_value(), val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt32(System.IntPtr, System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)
    /**
    Writes a 32-bit signed integer value into unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory to write to.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteInt32(ptr : dotnet.System.IntPtr, ofs : Swift.Int32, val : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt32_0__3__IntPtr_i32_i32(&__thrown, ptr.get_value(), ofs, val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt32(System.Object, System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)
    /**
    Writes a 32-bit signed integer value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory of the target object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteInt32(ptr : dotnet.System.Object, ofs : Swift.Int32, val : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt32_0__3__Object_i32_i32(&__thrown, ptr.get_handle(), ofs, val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt64(System.IntPtr, System.Int32, System.Int64)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)
    /**
    Writes a 64-bit signed integer value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory to write.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteInt64(ptr : dotnet.System.IntPtr, ofs : Swift.Int32, val : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt64_0__3__IntPtr_i32_i64(&__thrown, ptr.get_value(), ofs, val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt64(System.IntPtr, System.Int64)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)
    /**
    Writes a 64-bit signed integer value to unmanaged memory.

    - Parameter ptr: The address in unmanaged memory to write to.
    - Parameter val: The value to write.
    */
    public static func WriteInt64(ptr : dotnet.System.IntPtr, val : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt64_0__2__IntPtr_i64(&__thrown, ptr.get_value(), val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteInt64(System.Object, System.Int32, System.Int64)
// docid: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)
    /**
    Writes a 64-bit signed integer value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory of the target object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteInt64(ptr : dotnet.System.Object, ofs : Swift.Int32, val : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteInt64_0__3__Object_i32_i64(&__thrown, ptr.get_handle(), ofs, val);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteIntPtr(System.IntPtr, System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
    /**
    Writes a processor native-sized integer value to unmanaged memory at a specified offset.

    - Parameter ptr: The base address in unmanaged memory to write to.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteIntPtr(ptr : dotnet.System.IntPtr, ofs : Swift.Int32, val : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteIntPtr_0__3__IntPtr_i32_IntPtr(&__thrown, ptr.get_value(), ofs, val.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteIntPtr(System.IntPtr, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)
    /**
    Writes a processor native sized integer value into unmanaged memory.

    - Parameter ptr: The address in unmanaged memory to write to.
    - Parameter val: The value to write.
    */
    public static func WriteIntPtr(ptr : dotnet.System.IntPtr, val : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteIntPtr_0__2__IntPtr_IntPtr(&__thrown, ptr.get_value(), val.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteIntPtr(System.Object, System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)
    /**
    Writes a processor native sized integer value to unmanaged memory.

    - Parameter ptr: The base address in unmanaged memory of the target object.
    - Parameter ofs: An additional byte offset, which is added to the  parameter before writing.
    - Parameter val: The value to write.
    */
    public static func WriteIntPtr(ptr : dotnet.System.Object, ofs : Swift.Int32, val : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__WriteIntPtr_0__3__Object_i32_IntPtr(&__thrown, ptr.get_handle(), ofs, val.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ZeroFreeBSTR(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
    /**
    Frees a BSTR pointer that was allocated using the  method.

    - Parameter s: The address of the  to free.
    */
    public static func ZeroFreeBSTR(s : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ZeroFreeBSTR_0__1__IntPtr(&__thrown, s.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ZeroFreeCoTaskMemAnsi(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
    /**
    Frees an unmanaged string pointer that was allocated using the  method.

    - Parameter s: The address of the unmanaged string to free.
    */
    public static func ZeroFreeCoTaskMemAnsi(s : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ZeroFreeCoTaskMemAnsi_0__1__IntPtr(&__thrown, s.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ZeroFreeCoTaskMemUnicode(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
    /**
    Frees an unmanaged string pointer that was allocated using the  method.

    - Parameter s: The address of the unmanaged string to free.
    */
    public static func ZeroFreeCoTaskMemUnicode(s : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ZeroFreeCoTaskMemUnicode_0__1__IntPtr(&__thrown, s.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ZeroFreeCoTaskMemUTF8(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
    /**
    Frees an unmanaged string pointer that was allocated using the  method.

    - Parameter s: The address of the unmanaged string to free.
    */
    public static func ZeroFreeCoTaskMemUTF8(s : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ZeroFreeCoTaskMemUTF8_0__1__IntPtr(&__thrown, s.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ZeroFreeGlobalAllocAnsi(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
    /**
    Frees an unmanaged string pointer that was allocated using the  method.

    - Parameter s: The address of the unmanaged string to free.
    */
    public static func ZeroFreeGlobalAllocAnsi(s : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ZeroFreeGlobalAllocAnsi_0__1__IntPtr(&__thrown, s.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ZeroFreeGlobalAllocUnicode(System.IntPtr)
// docid: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
    /**
    Frees an unmanaged string pointer that was allocated using the  method.

    - Parameter s: The address of the unmanaged string to free.
    */
    public static func ZeroFreeGlobalAllocUnicode(s : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_Marshal_void__ZeroFreeGlobalAllocUnicode_0__1__IntPtr(&__thrown, s.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Marshal


// type: System.Runtime.InteropServices.MarshalAsAttribute
    /**
    Indicates how to marshal the data between managed and unmanaged code.

    */
public final class MarshalAsAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_MarshalAsAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // instance field: System.Runtime.InteropServices.UnmanagedType ArraySubType
    /**
    Specifies the element type of the unmanaged  or .

    */
    public var ArraySubType : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_MarshalAsAttribute_get_ArraySubType(self.get_handle()));
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_ArraySubType(self.get_handle(), v.get_value());
        }
    }
    // instance field: System.Int32 IidParameterIndex
    /**
    Specifies the parameter index of the unmanaged  attribute used by COM.

    */
    public var IidParameterIndex : Swift.Int32 {
        get {
        let __return = System_Runtime_InteropServices_MarshalAsAttribute_get_IidParameterIndex(self.get_handle());
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_IidParameterIndex(self.get_handle(), v);
        }
    }
    // instance field: System.String MarshalCookie
    /**
    Provides additional information to a custom marshaler.

    */
    public var MarshalCookie : Optional<dotnet.System.String> {
        get {
        let __h = System_Runtime_InteropServices_MarshalAsAttribute_get_MarshalCookie(self.get_handle());
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_MarshalCookie(self.get_handle(), v?.get_handle());
        }
    }
    // instance field: System.String MarshalType
    /**
    Specifies the fully qualified name of a custom marshaler.

    */
    public var MarshalType : Optional<dotnet.System.String> {
        get {
        let __h = System_Runtime_InteropServices_MarshalAsAttribute_get_MarshalType(self.get_handle());
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_MarshalType(self.get_handle(), v?.get_handle());
        }
    }
    // instance field: System.Type MarshalTypeRef
    /**
    Implements  as a type.

    */
    public var MarshalTypeRef : Optional<dotnet.System.Type_> {
        get {
        let __h = System_Runtime_InteropServices_MarshalAsAttribute_get_MarshalTypeRef(self.get_handle());
        let __return = (__h != nil) ? dotnet.System.Type_(hndl: __h!) : nil;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_MarshalTypeRef(self.get_handle(), v?.get_handle());
        }
    }
    // instance field: System.Runtime.InteropServices.VarEnum SafeArraySubType
    /**
    Indicates the element type of the .

    */
    public var SafeArraySubType : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_MarshalAsAttribute_get_SafeArraySubType(self.get_handle()));
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_SafeArraySubType(self.get_handle(), v.get_value());
        }
    }
    // instance field: System.Type SafeArrayUserDefinedSubType
    /**
    Indicates the user-defined element type of the .

    */
    public var SafeArrayUserDefinedSubType : Optional<dotnet.System.Type_> {
        get {
        let __h = System_Runtime_InteropServices_MarshalAsAttribute_get_SafeArrayUserDefinedSubType(self.get_handle());
        let __return = (__h != nil) ? dotnet.System.Type_(hndl: __h!) : nil;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_SafeArrayUserDefinedSubType(self.get_handle(), v?.get_handle());
        }
    }
    // instance field: System.Int32 SizeConst
    /**
    Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.

    */
    public var SizeConst : Swift.Int32 {
        get {
        let __return = System_Runtime_InteropServices_MarshalAsAttribute_get_SizeConst(self.get_handle());
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_SizeConst(self.get_handle(), v);
        }
    }
    // instance field: System.Int16 SizeParamIndex
    /**
    Indicates the zero-based parameter that contains the count of array elements, similar to  in COM.

    */
    public var SizeParamIndex : Swift.Int16 {
        get {
        let __return = System_Runtime_InteropServices_MarshalAsAttribute_get_SizeParamIndex(self.get_handle());
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_MarshalAsAttribute_set_SizeParamIndex(self.get_handle(), v);
        }
    }
    // .ctor(System.Int16)
// docid: M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter unmanagedType: The value the data is to be marshaled as.
    */
    public init(unmanagedType : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_MarshalAsAttribute_ctor_0__1__i16(&__thrown, unmanagedType);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.InteropServices.UnmanagedType)
// docid: M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
    /**
    Initializes a new instance of the  class with the specified  enumeration member.

    - Parameter unmanagedType: The value the data is to be marshaled as.
    */
    public init(unmanagedType : dotnet.System.Runtime.InteropServices.UnmanagedType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_MarshalAsAttribute_ctor_0__1__UnmanagedType(&__thrown, unmanagedType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.UnmanagedType get_Value()
// docid: M:System.Runtime.InteropServices.MarshalAsAttribute.get_Value
    public func get_Value() throws -> dotnet.System.Runtime.InteropServices.UnmanagedType {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_MarshalAsAttribute_UnmanagedType__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.UnmanagedType(val: __return);
        }
    }
    /**
    Gets the  value the data is to be marshaled as.

    */
    public var Value : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
            return try! get_Value();
        }
    }
} // MarshalAsAttribute


// type: System.Runtime.InteropServices.MarshalDirectiveException
    /**
    The exception that is thrown by the marshaler when it encounters a  it does not support.

    */
open class MarshalDirectiveException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_MarshalDirectiveException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor
    /**
    Initializes a new instance of the  class with default properties.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_MarshalDirectiveException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The error message that specifies the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_MarshalDirectiveException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_MarshalDirectiveException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // MarshalDirectiveException


// type: System.Runtime.InteropServices.NFloat
// boxed value type
public final class NFloat
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_NFloat_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Value : Swift.Double {
        get {
            return try! get_Value();
        }
    }
    // .ctor(System.Single)
// docid: M:System.Runtime.InteropServices.NFloat.#ctor(System.Single)
    public init(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_NFloat_ctor_0__1__f32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Double)
// docid: M:System.Runtime.InteropServices.NFloat.#ctor(System.Double)
    public init(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_NFloat_ctor_0__1__f64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Runtime_InteropServices_NFloat_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.Runtime.InteropServices.NFloat.Equals(System.Object)
    public func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NFloat_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Runtime.InteropServices.NFloat)
// docid: M:System.Runtime.InteropServices.NFloat.Equals(System.Runtime.InteropServices.NFloat)
    public func Equals(other : dotnet.System.Runtime.InteropServices.NFloat) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NFloat_bool__Equals_0__1__NFloat(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Runtime.InteropServices.NFloat.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NFloat_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Runtime.InteropServices.NFloat.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NFloat_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double get_Value()
// docid: M:System.Runtime.InteropServices.NFloat.get_Value
    public func get_Value() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NFloat_f64__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // NFloat


// type: System.Runtime.InteropServices.NativeLibrary
public struct NativeLibrary {
    // void Free(System.IntPtr)
// docid: M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)
    /**
    Frees a loaded library with the specified OS handle, or takes no action if the input handle is .

    - Parameter handle: The native library OS handle to be freed.
    */
    public static func Free(handle : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_NativeLibrary_void__Free_0__1__IntPtr(&__thrown, handle.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IntPtr GetExport(System.IntPtr, System.String)
// docid: M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)
    /**
    Gets the address of an exported symbol.

    - Parameter handle: The native library OS handle.
    - Parameter name: The name of the exported symbol.
    - Returns: The address of the symbol.

    */
    public static func GetExport(handle : dotnet.System.IntPtr, name : dotnet.System.String) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeLibrary_IntPtr__GetExport_0__2__IntPtr_String(&__thrown, handle.get_value(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr Load(System.String)
// docid: M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)
    /**
    Provides a simple API for loading a native library that wraps the OS loader and uses default flags.

    - Parameter libraryPath: The name of the native library to be loaded.
    - Returns: The OS handle for the loaded native library.

    */
    public static func Load(libraryPath : dotnet.System.String) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeLibrary_IntPtr__Load_0__1__String(&__thrown, libraryPath.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr Load(System.String, System.Reflection.Assembly, System.Nullable<System.Runtime.InteropServices.DllImportSearchPath>)
// docid: M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})
    /**
    Provides a high-level API for loading a native library.

    - Parameter libraryName: The name of the native library to be loaded.
    - Parameter assembly: The assembly loading the native library.
    - Parameter searchPath: The search path.
    - Returns: The OS handle for the loaded library.

    */
    public static func Load(libraryName : dotnet.System.String, assembly : dotnet.System.Reflection.Assembly, searchPath : Optional<dotnet.System.Runtime.InteropServices.DllImportSearchPath>) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeLibrary_IntPtr__Load_0__3__String_Assembly_System_Nullable_System_Runtime_InteropServices_DllImportSearchPath_(&__thrown, libraryName.get_handle(), assembly.get_handle(), (searchPath != nil) ? System_Int32_box(searchPath!.get_value()) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // void SetDllImportResolver(System.Reflection.Assembly, System.Runtime.InteropServices.DllImportResolver)
// docid: M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)
    /**
    Sets a callback for resolving native library imports from an assembly.

    - Parameter assembly: The assembly for which the resolver is registered.
    - Parameter resolver: The resolver callback to register.
    */
    public static func SetDllImportResolver(assembly : dotnet.System.Reflection.Assembly, resolver : dotnet.System.Runtime.InteropServices.DllImportResolver) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_NativeLibrary_void__SetDllImportResolver_0__2__Assembly_DllImportResolver(&__thrown, assembly.get_handle(), resolver.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func SetDllImportResolver(assembly : dotnet.System.Reflection.Assembly, resolver : @escaping (dotnet.System.String, dotnet.System.Reflection.Assembly, Optional<dotnet.System.Runtime.InteropServices.DllImportSearchPath>) throws -> dotnet.System.IntPtr) throws {
        let del_resolver = try dotnet.System.Runtime.InteropServices.DllImportResolver(resolver);
        return try SetDllImportResolver(assembly: assembly, resolver: del_resolver);
    }
    // bool TryGetExport(System.IntPtr, System.String, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)
    /**
    Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.

    - Parameter handle: The native library OS handle.
    - Parameter name: The name of the exported symbol.
    - Parameter address: When the method returns, contains the symbol address, if it exists.
    - Returns: 
         if the method returned successfully; otherwise, .

    */
    public static func TryGetExport(handle : dotnet.System.IntPtr, name : dotnet.System.String, address : inout dotnet.System.IntPtr) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_address = address.get_value();
        let __return = System_Runtime_InteropServices_NativeLibrary_bool__TryGetExport_0__3__IntPtr_String_outIntPtr(&__thrown, handle.get_value(), name.get_handle(), &_tmp_out_address);
        let _tmp2_address = dotnet.System.IntPtr(val: _tmp_out_address);
            address = _tmp2_address;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryLoad(System.String, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)
    /**
    Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.

    - Parameter libraryPath: The name of the native library to be loaded.
    - Parameter handle: When the method returns, the OS handle of the loaded native library.
    - Returns: 
         if the native library was loaded successful; otherwise, .

    */
    public static func TryLoad(libraryPath : dotnet.System.String, handle : inout dotnet.System.IntPtr) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_handle = handle.get_value();
        let __return = System_Runtime_InteropServices_NativeLibrary_bool__TryLoad_0__2__String_outIntPtr(&__thrown, libraryPath.get_handle(), &_tmp_out_handle);
        let _tmp2_handle = dotnet.System.IntPtr(val: _tmp_out_handle);
            handle = _tmp2_handle;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryLoad(System.String, System.Reflection.Assembly, System.Nullable<System.Runtime.InteropServices.DllImportSearchPath>, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)
    /**
    Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.

    - Parameter libraryName: The name of the native library to be loaded.
    - Parameter assembly: The assembly loading the native library.
    - Parameter searchPath: The search path.
    - Parameter handle: When the method returns, the OS handle of the loaded native library.
    - Returns: 
         if the load operation was successful; otherwise, .

    */
    public static func TryLoad(libraryName : dotnet.System.String, assembly : dotnet.System.Reflection.Assembly, searchPath : Optional<dotnet.System.Runtime.InteropServices.DllImportSearchPath>, handle : inout dotnet.System.IntPtr) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_handle = handle.get_value();
        let __return = System_Runtime_InteropServices_NativeLibrary_bool__TryLoad_0__4__String_Assembly_System_Nullable_System_Runtime_InteropServices_DllImportSearchPath__outIntPtr(&__thrown, libraryName.get_handle(), assembly.get_handle(), (searchPath != nil) ? System_Int32_box(searchPath!.get_value()) : nil, &_tmp_out_handle);
        let _tmp2_handle = dotnet.System.IntPtr(val: _tmp_out_handle);
            handle = _tmp2_handle;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // NativeLibrary


// type: System.Runtime.InteropServices.NativeMemory
public struct NativeMemory {
    // void* AlignedAlloc(System.UIntPtr, System.UIntPtr)
// docid: M:System.Runtime.InteropServices.NativeMemory.AlignedAlloc(System.UIntPtr,System.UIntPtr)
    public static func AlignedAlloc(byteCount : dotnet.System.UIntPtr, alignment : dotnet.System.UIntPtr) throws -> UnsafeMutableRawPointer? {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeMemory_pvoid__AlignedAlloc_0__2__UIntPtr_UIntPtr(&__thrown, byteCount.get_handle(), alignment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return __return;
        }
    }
    // void AlignedFree(void*)
// docid: M:System.Runtime.InteropServices.NativeMemory.AlignedFree(System.Void*)
    public static func AlignedFree(ptr : UnsafeMutableRawPointer?) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_NativeMemory_void__AlignedFree_0__1__pvoid(&__thrown, ptr);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void* AlignedRealloc(void*, System.UIntPtr, System.UIntPtr)
// docid: M:System.Runtime.InteropServices.NativeMemory.AlignedRealloc(System.Void*,System.UIntPtr,System.UIntPtr)
    public static func AlignedRealloc(ptr : UnsafeMutableRawPointer?, byteCount : dotnet.System.UIntPtr, alignment : dotnet.System.UIntPtr) throws -> UnsafeMutableRawPointer? {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeMemory_pvoid__AlignedRealloc_0__3__pvoid_UIntPtr_UIntPtr(&__thrown, ptr, byteCount.get_handle(), alignment.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return __return;
        }
    }
    // void* Alloc(System.UIntPtr)
// docid: M:System.Runtime.InteropServices.NativeMemory.Alloc(System.UIntPtr)
    public static func Alloc(byteCount : dotnet.System.UIntPtr) throws -> UnsafeMutableRawPointer? {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeMemory_pvoid__Alloc_0__1__UIntPtr(&__thrown, byteCount.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return __return;
        }
    }
    // void* Alloc(System.UIntPtr, System.UIntPtr)
// docid: M:System.Runtime.InteropServices.NativeMemory.Alloc(System.UIntPtr,System.UIntPtr)
    public static func Alloc(elementCount : dotnet.System.UIntPtr, elementSize : dotnet.System.UIntPtr) throws -> UnsafeMutableRawPointer? {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeMemory_pvoid__Alloc_0__2__UIntPtr_UIntPtr(&__thrown, elementCount.get_handle(), elementSize.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return __return;
        }
    }
    // void* AllocZeroed(System.UIntPtr)
// docid: M:System.Runtime.InteropServices.NativeMemory.AllocZeroed(System.UIntPtr)
    public static func AllocZeroed(byteCount : dotnet.System.UIntPtr) throws -> UnsafeMutableRawPointer? {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeMemory_pvoid__AllocZeroed_0__1__UIntPtr(&__thrown, byteCount.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return __return;
        }
    }
    // void* AllocZeroed(System.UIntPtr, System.UIntPtr)
// docid: M:System.Runtime.InteropServices.NativeMemory.AllocZeroed(System.UIntPtr,System.UIntPtr)
    public static func AllocZeroed(elementCount : dotnet.System.UIntPtr, elementSize : dotnet.System.UIntPtr) throws -> UnsafeMutableRawPointer? {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeMemory_pvoid__AllocZeroed_0__2__UIntPtr_UIntPtr(&__thrown, elementCount.get_handle(), elementSize.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return __return;
        }
    }
    // void Free(void*)
// docid: M:System.Runtime.InteropServices.NativeMemory.Free(System.Void*)
    public static func Free(ptr : UnsafeMutableRawPointer?) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_NativeMemory_void__Free_0__1__pvoid(&__thrown, ptr);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void* Realloc(void*, System.UIntPtr)
// docid: M:System.Runtime.InteropServices.NativeMemory.Realloc(System.Void*,System.UIntPtr)
    public static func Realloc(ptr : UnsafeMutableRawPointer?, byteCount : dotnet.System.UIntPtr) throws -> UnsafeMutableRawPointer? {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_NativeMemory_pvoid__Realloc_0__2__pvoid_UIntPtr(&__thrown, ptr, byteCount.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return __return;
        }
    }
} // NativeMemory


// type: System.Runtime.InteropServices.OptionalAttribute
    /**
    Indicates that a parameter is optional.

    */
public final class OptionalAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_OptionalAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.OptionalAttribute.#ctor
    /**
    Initializes a new instance of the  class with default values.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_OptionalAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // OptionalAttribute


// type: System.Runtime.InteropServices.PosixSignal
public struct PosixSignal : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_PosixSignal_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.PosixSignal SIGTSTP
    public static var SIGTSTP : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGTSTP());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGTTOU
    public static var SIGTTOU : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGTTOU());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGTTIN
    public static var SIGTTIN : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGTTIN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGWINCH
    public static var SIGWINCH : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGWINCH());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGCONT
    public static var SIGCONT : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGCONT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGCHLD
    public static var SIGCHLD : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGCHLD());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGTERM
    public static var SIGTERM : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGTERM());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGQUIT
    public static var SIGQUIT : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGQUIT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGINT
    public static var SIGINT : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGINT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.PosixSignal SIGHUP
    public static var SIGHUP : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
        let __return = dotnet.System.Runtime.InteropServices.PosixSignal(val: System_Runtime_InteropServices_PosixSignal_get_SIGHUP());
            return __return;
        }
    }
} // PosixSignal


// type: System.Runtime.InteropServices.PosixSignalContext
public final class PosixSignalContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_PosixSignalContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Runtime.InteropServices.PosixSignal)
// docid: M:System.Runtime.InteropServices.PosixSignalContext.#ctor(System.Runtime.InteropServices.PosixSignal)
    public init(signal : dotnet.System.Runtime.InteropServices.PosixSignal) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_PosixSignalContext_ctor_0__1__PosixSignal(&__thrown, signal.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Cancel()
// docid: M:System.Runtime.InteropServices.PosixSignalContext.get_Cancel
    public func get_Cancel() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_PosixSignalContext_bool__get_Cancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Cancel(bool)
// docid: M:System.Runtime.InteropServices.PosixSignalContext.set_Cancel(System.Boolean)
    public func set_Cancel(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_PosixSignalContext_void__set_Cancel_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.PosixSignal get_Signal()
// docid: M:System.Runtime.InteropServices.PosixSignalContext.get_Signal
    public func get_Signal() throws -> dotnet.System.Runtime.InteropServices.PosixSignal {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_PosixSignalContext_PosixSignal__get_Signal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.PosixSignal(val: __return);
        }
    }
    public var Cancel : Bool {
        get {
            return try! get_Cancel();
        }
        set(v) {
            return try! set_Cancel(value: v);
        }
    }
    public var Signal : dotnet.System.Runtime.InteropServices.PosixSignal {
        get {
            return try! get_Signal();
        }
    }
} // PosixSignalContext


// type: System.Runtime.InteropServices.PosixSignalRegistration
public final class PosixSignalRegistration
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_PosixSignalRegistration_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Runtime.InteropServices.PosixSignalRegistration Create(System.Runtime.InteropServices.PosixSignal, System.Action<System.Runtime.InteropServices.PosixSignalContext>)
// docid: M:System.Runtime.InteropServices.PosixSignalRegistration.Create(System.Runtime.InteropServices.PosixSignal,System.Action{System.Runtime.InteropServices.PosixSignalContext})
    public class func Create(signal : dotnet.System.Runtime.InteropServices.PosixSignal, handler : dotnet.System.Action_1<dotnet.System.Runtime.InteropServices.PosixSignalContext>) throws -> dotnet.System.Runtime.InteropServices.PosixSignalRegistration {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_PosixSignalRegistration_PosixSignalRegistration__Create_0__2__PosixSignal_System_Action_System_Runtime_InteropServices_PosixSignalContext_(&__thrown, signal.get_value(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.PosixSignalRegistration(hndl : __return);
        }
    }
    // delegate closure overload
    public class func Create(signal : dotnet.System.Runtime.InteropServices.PosixSignal, handler : @escaping (Optional<dotnet.System.Runtime.InteropServices.PosixSignalContext>) throws -> Void) throws -> dotnet.System.Runtime.InteropServices.PosixSignalRegistration {
        let del_handler = try dotnet.System.Action_1<dotnet.System.Runtime.InteropServices.PosixSignalContext>(handler);
        return try Create(signal: signal, handler: del_handler);
    }
    // void Dispose()
// docid: M:System.Runtime.InteropServices.PosixSignalRegistration.Dispose
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_PosixSignalRegistration_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PosixSignalRegistration


// type: System.Runtime.InteropServices.PreserveSigAttribute
    /**
    Indicates that the HRESULT or  signature transformation that takes place during COM interop calls should be suppressed.

    */
public final class PreserveSigAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_PreserveSigAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_PreserveSigAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // PreserveSigAttribute


// type: System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute
    /**
    Indicates that the attributed assembly is a primary interop assembly.

    */
public final class PrimaryInteropAssemblyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_PrimaryInteropAssemblyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.

    - Parameter major: The major version of the type library for which this assembly is the primary interop assembly.
    - Parameter minor: The minor version of the type library for which this assembly is the primary interop assembly.
    */
    public init(major : Swift.Int32, minor : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_PrimaryInteropAssemblyAttribute_ctor_0__2__i32_i32(&__thrown, major, minor);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_MajorVersion()
// docid: M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.get_MajorVersion
    public func get_MajorVersion() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_PrimaryInteropAssemblyAttribute_i32__get_MajorVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_MinorVersion()
// docid: M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.get_MinorVersion
    public func get_MinorVersion() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_PrimaryInteropAssemblyAttribute_i32__get_MinorVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the major version number of the type library for which this assembly is the primary interop assembly.

    */
    public var MajorVersion : Swift.Int32 {
        get {
            return try! get_MajorVersion();
        }
    }
    /**
    Gets the minor version number of the type library for which this assembly is the primary interop assembly.

    */
    public var MinorVersion : Swift.Int32 {
        get {
            return try! get_MinorVersion();
        }
    }
} // PrimaryInteropAssemblyAttribute


// type: System.Runtime.InteropServices.ProgIdAttribute
    /**
    Allows the user to specify the ProgID of a class.

    */
public final class ProgIdAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ProgIdAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  with the specified ProgID.

    - Parameter progId: The ProgID to be assigned to the class.
    */
    public init(progId : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ProgIdAttribute_ctor_0__1__String(&__thrown, progId.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Runtime.InteropServices.ProgIdAttribute.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ProgIdAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the ProgID of the class.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // ProgIdAttribute


// type: System.Runtime.InteropServices.RuntimeEnvironment
public struct RuntimeEnvironment {
    // bool FromGlobalAccessCache(System.Reflection.Assembly)
// docid: M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)
    /**
    Tests whether the specified assembly is loaded in the global assembly cache.

    - Parameter a: The assembly to test.
    - Returns: 
         if the assembly is loaded in the global assembly cache; otherwise, .

    */
    public static func FromGlobalAccessCache(a : dotnet.System.Reflection.Assembly) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_RuntimeEnvironment_bool__FromGlobalAccessCache_0__1__Assembly(&__thrown, a.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String GetRuntimeDirectory()
// docid: M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory
    /**
    Returns the directory where the common language runtime is installed.

    - Returns: A string that contains the path to the directory where the common language runtime is installed.

    */
    public static func GetRuntimeDirectory() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_RuntimeEnvironment_String__GetRuntimeDirectory_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.IntPtr GetRuntimeInterfaceAsIntPtr(System.Guid, System.Guid)
// docid: M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)
    /**
    Returns the specified interface on the specified class.

    - Parameter clsid: The identifier for the desired class.
    - Parameter riid: The identifier for the desired interface.
    - Returns: An unmanaged pointer to the requested interface.

    */
    public static func GetRuntimeInterfaceAsIntPtr(clsid : dotnet.System.Guid, riid : dotnet.System.Guid) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_RuntimeEnvironment_IntPtr__GetRuntimeInterfaceAsIntPtr_0__2__Guid_Guid(&__thrown, clsid.get_handle(), riid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.Object GetRuntimeInterfaceAsObject(System.Guid, System.Guid)
// docid: M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)
    /**
    Returns an instance of a type that represents a COM object by a pointer to its  interface.

    - Parameter clsid: The identifier for the desired class.
    - Parameter riid: The identifier for the desired interface.
    - Returns: An object that represents the specified unmanaged COM object.

    */
    public static func GetRuntimeInterfaceAsObject(clsid : dotnet.System.Guid, riid : dotnet.System.Guid) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_RuntimeEnvironment_Object__GetRuntimeInterfaceAsObject_0__2__Guid_Guid(&__thrown, clsid.get_handle(), riid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.String GetSystemVersion()
// docid: M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion
    /**
    Gets the version number of the common language runtime that is running the current process.

    - Returns: A string containing the version number of the common language runtime.

    */
    public static func GetSystemVersion() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_RuntimeEnvironment_String__GetSystemVersion_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_SystemConfigurationFile()
// docid: M:System.Runtime.InteropServices.RuntimeEnvironment.get_SystemConfigurationFile
    public static func get_SystemConfigurationFile() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_RuntimeEnvironment_String__get_SystemConfigurationFile_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the path to the system configuration file.

    */
    public static var SystemConfigurationFile : dotnet.System.String {
        get {
            return try! get_SystemConfigurationFile();
        }
    }
} // RuntimeEnvironment


// type: System.Runtime.InteropServices.SEHException
    /**
    Represents structured exception handling (SEH) errors.

    */
open class SEHException
    :
    dotnet.System.Runtime.InteropServices.ExternalException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_SEHException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.SEHException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SEHException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.SEHException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified message.

    - Parameter message: The message that indicates the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SEHException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SEHException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanResume()
// docid: M:System.Runtime.InteropServices.SEHException.CanResume
    /**
    Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.

    - Returns: Always , because resumable exceptions are not implemented.

    */
    open func CanResume() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_SEHException_bool__CanResume_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // SEHException


// type: System.Runtime.InteropServices.SafeArrayRankMismatchException
    /**
    The exception thrown when the rank of an incoming  does not match the rank specified in the managed signature.

    */
open class SafeArrayRankMismatchException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_SafeArrayRankMismatchException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor
    /**
    Initializes a new instance of the  class with default values.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SafeArrayRankMismatchException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified message.

    - Parameter message: The message that indicates the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SafeArrayRankMismatchException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SafeArrayRankMismatchException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SafeArrayRankMismatchException


// type: System.Runtime.InteropServices.SafeArrayTypeMismatchException
    /**
    The exception thrown when the type of the incoming  does not match the type specified in the managed signature.

    */
open class SafeArrayTypeMismatchException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_SafeArrayTypeMismatchException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor
    /**
    Initializes a new instance of the  class with default values.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SafeArrayTypeMismatchException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified message.

    - Parameter message: The message that indicates the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SafeArrayTypeMismatchException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_SafeArrayTypeMismatchException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SafeArrayTypeMismatchException


// type: System.Runtime.InteropServices.StandardOleMarshalObject
    /**
    Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.

    */
open class StandardOleMarshalObject
    :
    dotnet.System.MarshalByRefObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_StandardOleMarshalObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // StandardOleMarshalObject


// type: System.Runtime.InteropServices.TypeIdentifierAttribute
    /**
    Provides support for type equivalence.

    */
public final class TypeIdentifierAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeIdentifierAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor
    /**
    Creates a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeIdentifierAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)
    /**
    Creates a new instance of the  class with the specified scope and identifier.

    - Parameter scope: The first type equivalence string.
    - Parameter identifier: The second type equivalence string.
    */
    public init(scope : Optional<dotnet.System.String>, identifier : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeIdentifierAttribute_ctor_0__2__String_String(&__thrown, scope?.get_handle() ?? nil, identifier?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Identifier()
// docid: M:System.Runtime.InteropServices.TypeIdentifierAttribute.get_Identifier
    public func get_Identifier() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_TypeIdentifierAttribute_String__get_Identifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Scope()
// docid: M:System.Runtime.InteropServices.TypeIdentifierAttribute.get_Scope
    public func get_Scope() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_TypeIdentifierAttribute_String__get_Scope_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the value of the  parameter that was passed to the  constructor.

    */
    public var Identifier : Optional<dotnet.System.String> {
        get {
            return try! get_Identifier();
        }
    }
    /**
    Gets the value of the  parameter that was passed to the  constructor.

    */
    public var Scope : Optional<dotnet.System.String> {
        get {
            return try! get_Scope();
        }
    }
} // TypeIdentifierAttribute


// type: System.Runtime.InteropServices.TypeLibFuncAttribute
    /**
    Contains the  that were originally imported for this method from the COM type library.

    */
public final class TypeLibFuncAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeLibFuncAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int16)
// docid: M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter flags: The  value for the attributed method as found in the type library it was imported from.
    */
    public init(flags : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeLibFuncAttribute_ctor_0__1__i16(&__thrown, flags);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.InteropServices.TypeLibFuncFlags)
// docid: M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter flags: The  value for the attributed method as found in the type library it was imported from.
    */
    public init(flags : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeLibFuncAttribute_ctor_0__1__TypeLibFuncFlags(&__thrown, flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.TypeLibFuncFlags get_Value()
// docid: M:System.Runtime.InteropServices.TypeLibFuncAttribute.get_Value
    public func get_Value() throws -> dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_TypeLibFuncAttribute_TypeLibFuncFlags__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: __return);
        }
    }
    /**
    Gets the  value for this method.

    */
    public var Value : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
            return try! get_Value();
        }
    }
} // TypeLibFuncAttribute


// type: System.Runtime.InteropServices.TypeLibFuncFlags
    /**
    Describes the original settings of the  in the COM type library from where this method was imported.

    */
public struct TypeLibFuncFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeLibFuncFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FRestricted
    /**
    This flag is intended for system-level functions or functions that type browsers should not display.

    */
    public static var FRestricted : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FRestricted());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FSource
    /**
    The function returns an object that is a source of events.

    */
    public static var FSource : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FSource());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FBindable
    /**
    The function that supports data binding.

    */
    public static var FBindable : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FBindable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FRequestEdit
    /**
    When set, any call to a method that sets the property results first in a call to .

    */
    public static var FRequestEdit : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FRequestEdit());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FDisplayBind
    /**
    The function that is displayed to the user as bindable.  must also be set.

    */
    public static var FDisplayBind : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FDisplayBind());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FDefaultBind
    /**
    The function that best represents the object. Only one function in a type information can have this attribute.

    */
    public static var FDefaultBind : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FDefaultBind());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FHidden
    /**
    The function should not be displayed to the user, although it exists and is bindable.

    */
    public static var FHidden : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FHidden());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FUsesGetLastError
    /**
    The function supports .

    */
    public static var FUsesGetLastError : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FUsesGetLastError());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FDefaultCollelem
    /**
    Permits an optimization in which the compiler looks for a member named "xyz" on the type "abc". If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.

    */
    public static var FDefaultCollelem : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FDefaultCollelem());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FUiDefault
    /**
    The type information member is the default member for display in the user interface.

    */
    public static var FUiDefault : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FUiDefault());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FNonBrowsable
    /**
    The property appears in an object browser, but not in a properties browser.

    */
    public static var FNonBrowsable : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FNonBrowsable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FReplaceable
    /**
    Tags the interface as having default behaviors.

    */
    public static var FReplaceable : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FReplaceable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibFuncFlags FImmediateBind
    /**
    The function is mapped as individual bindable properties.

    */
    public static var FImmediateBind : dotnet.System.Runtime.InteropServices.TypeLibFuncFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibFuncFlags(val: System_Runtime_InteropServices_TypeLibFuncFlags_get_FImmediateBind());
            return __return;
        }
    }
} // TypeLibFuncFlags


// type: System.Runtime.InteropServices.TypeLibImportClassAttribute
    /**
    Specifies which  exclusively uses an interface. This class cannot be inherited.

    */
public final class TypeLibImportClassAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeLibImportClassAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class specifying the  that exclusively uses an interface.

    - Parameter importClass: The  object that exclusively uses an interface.
    */
    public init(importClass : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeLibImportClassAttribute_ctor_0__1__Type(&__thrown, importClass.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Runtime.InteropServices.TypeLibImportClassAttribute.get_Value
    public func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_TypeLibImportClassAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the name of a  object that exclusively uses an interface.

    */
    public var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // TypeLibImportClassAttribute


// type: System.Runtime.InteropServices.TypeLibTypeAttribute
    /**
    Contains the  that were originally imported for this type from the COM type library.

    */
public final class TypeLibTypeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeLibTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int16)
// docid: M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter flags: The  value for the attributed type as found in the type library it was imported from.
    */
    public init(flags : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeLibTypeAttribute_ctor_0__1__i16(&__thrown, flags);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.InteropServices.TypeLibTypeFlags)
// docid: M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter flags: The  value for the attributed type as found in the type library it was imported from.
    */
    public init(flags : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeLibTypeAttribute_ctor_0__1__TypeLibTypeFlags(&__thrown, flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.TypeLibTypeFlags get_Value()
// docid: M:System.Runtime.InteropServices.TypeLibTypeAttribute.get_Value
    public func get_Value() throws -> dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_TypeLibTypeAttribute_TypeLibTypeFlags__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: __return);
        }
    }
    /**
    Gets the  value for this type.

    */
    public var Value : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
            return try! get_Value();
        }
    }
} // TypeLibTypeAttribute


// type: System.Runtime.InteropServices.TypeLibTypeFlags
    /**
    Describes the original settings of the  in the COM type library from which the type was imported.

    */
public struct TypeLibTypeFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeLibTypeFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FAppObject
    /**
    A type description that describes an  object.

    */
    public static var FAppObject : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FAppObject());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FCanCreate
    /**
    Instances of the type can be created by .

    */
    public static var FCanCreate : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FCanCreate());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FLicensed
    /**
    The type is licensed.

    */
    public static var FLicensed : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FLicensed());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FPreDeclId
    /**
    The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.

    */
    public static var FPreDeclId : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FPreDeclId());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FHidden
    /**
    The type should not be displayed to browsers.

    */
    public static var FHidden : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FHidden());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FControl
    /**
    The type is a control from which other types will be derived, and should not be displayed to users.

    */
    public static var FControl : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FControl());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FDual
    /**
    The interface supplies both  and V-table binding.

    */
    public static var FDual : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FDual());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FNonExtensible
    /**
    The interface cannot add members at run time.

    */
    public static var FNonExtensible : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FNonExtensible());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FOleAutomation
    /**
    The types used in the interface are fully compatible with Automation, including vtable binding support.

    */
    public static var FOleAutomation : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FOleAutomation());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FRestricted
    /**
    This flag is intended for system-level types or types that type browsers should not display.

    */
    public static var FRestricted : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FRestricted());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FAggregatable
    /**
    The class supports aggregation.

    */
    public static var FAggregatable : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FAggregatable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FReplaceable
    /**
    The object supports , and has default behaviors.

    */
    public static var FReplaceable : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FReplaceable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FDispatchable
    /**
    Indicates that the interface derives from , either directly or indirectly.

    */
    public static var FDispatchable : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FDispatchable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibTypeFlags FReverseBind
    /**
    Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.

    */
    public static var FReverseBind : dotnet.System.Runtime.InteropServices.TypeLibTypeFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibTypeFlags(val: System_Runtime_InteropServices_TypeLibTypeFlags_get_FReverseBind());
            return __return;
        }
    }
} // TypeLibTypeFlags


// type: System.Runtime.InteropServices.TypeLibVarAttribute
    /**
    Contains the  that were originally imported for this field from the COM type library.

    */
public final class TypeLibVarAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeLibVarAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int16)
// docid: M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter flags: The  value for the attributed field as found in the type library it was imported from.
    */
    public init(flags : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeLibVarAttribute_ctor_0__1__i16(&__thrown, flags);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.InteropServices.TypeLibVarFlags)
// docid: M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)
    /**
    Initializes a new instance of the  class with the specified  value.

    - Parameter flags: The  value for the attributed field as found in the type library it was imported from.
    */
    public init(flags : dotnet.System.Runtime.InteropServices.TypeLibVarFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeLibVarAttribute_ctor_0__1__TypeLibVarFlags(&__thrown, flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.TypeLibVarFlags get_Value()
// docid: M:System.Runtime.InteropServices.TypeLibVarAttribute.get_Value
    public func get_Value() throws -> dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_TypeLibVarAttribute_TypeLibVarFlags__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: __return);
        }
    }
    /**
    Gets the  value for this field.

    */
    public var Value : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
            return try! get_Value();
        }
    }
} // TypeLibVarAttribute


// type: System.Runtime.InteropServices.TypeLibVarFlags
    /**
    Describes the original settings of the  in the COM type library from which the variable was imported.

    */
public struct TypeLibVarFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeLibVarFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FReadOnly
    /**
    Assignment to the variable should not be allowed.

    */
    public static var FReadOnly : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FReadOnly());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FSource
    /**
    The variable returns an object that is a source of events.

    */
    public static var FSource : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FSource());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FBindable
    /**
    The variable supports data binding.

    */
    public static var FBindable : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FBindable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FRequestEdit
    /**
    Indicates that the property supports the COM  notification.

    */
    public static var FRequestEdit : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FRequestEdit());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FDisplayBind
    /**
    The variable is displayed as bindable.  must also be set.

    */
    public static var FDisplayBind : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FDisplayBind());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FDefaultBind
    /**
    The variable is the single property that best represents the object. Only one variable in a type info can have this value.

    */
    public static var FDefaultBind : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FDefaultBind());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FHidden
    /**
    The variable should not be displayed in a browser, though it exists and is bindable.

    */
    public static var FHidden : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FHidden());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FRestricted
    /**
    This flag is intended for system-level functions or functions that type browsers should not display.

    */
    public static var FRestricted : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FRestricted());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FDefaultCollelem
    /**
    Permits an optimization in which the compiler looks for a member named "xyz" on the type "abc". If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.

    */
    public static var FDefaultCollelem : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FDefaultCollelem());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FUiDefault
    /**
    The default display in the user interface.

    */
    public static var FUiDefault : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FUiDefault());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FNonBrowsable
    /**
    The variable appears in an object browser, but not in a properties browser.

    */
    public static var FNonBrowsable : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FNonBrowsable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FReplaceable
    /**
    Tags the interface as having default behaviors.

    */
    public static var FReplaceable : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FReplaceable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.TypeLibVarFlags FImmediateBind
    /**
    The variable is mapped as individual bindable properties.

    */
    public static var FImmediateBind : dotnet.System.Runtime.InteropServices.TypeLibVarFlags {
        get {
        let __return = dotnet.System.Runtime.InteropServices.TypeLibVarFlags(val: System_Runtime_InteropServices_TypeLibVarFlags_get_FImmediateBind());
            return __return;
        }
    }
} // TypeLibVarFlags


// type: System.Runtime.InteropServices.TypeLibVersionAttribute
    /**
    Specifies the version number of an exported type library.

    */
public final class TypeLibVersionAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_TypeLibVersionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class with the major and minor version numbers of the type library.

    - Parameter major: The major version number of the type library.
    - Parameter minor: The minor version number of the type library.
    */
    public init(major : Swift.Int32, minor : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_TypeLibVersionAttribute_ctor_0__2__i32_i32(&__thrown, major, minor);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_MajorVersion()
// docid: M:System.Runtime.InteropServices.TypeLibVersionAttribute.get_MajorVersion
    public func get_MajorVersion() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_TypeLibVersionAttribute_i32__get_MajorVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_MinorVersion()
// docid: M:System.Runtime.InteropServices.TypeLibVersionAttribute.get_MinorVersion
    public func get_MinorVersion() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_TypeLibVersionAttribute_i32__get_MinorVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the major version number of the type library.

    */
    public var MajorVersion : Swift.Int32 {
        get {
            return try! get_MajorVersion();
        }
    }
    /**
    Gets the minor version number of the type library.

    */
    public var MinorVersion : Swift.Int32 {
        get {
            return try! get_MinorVersion();
        }
    }
} // TypeLibVersionAttribute


// type: System.Runtime.InteropServices.UnknownWrapper
    /**
    Wraps objects the marshaler should marshal as a .

    */
public final class UnknownWrapper
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_UnknownWrapper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)
    /**
    Initializes a new instance of the  class with the object to be wrapped.

    - Parameter obj: The object being wrapped.
    */
    public init(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_UnknownWrapper_ctor_0__1__Object(&__thrown, obj?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_WrappedObject()
// docid: M:System.Runtime.InteropServices.UnknownWrapper.get_WrappedObject
    public func get_WrappedObject() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_UnknownWrapper_Object__get_WrappedObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the object contained by this wrapper.

    */
    public var WrappedObject : Optional<dotnet.System.Object> {
        get {
            return try! get_WrappedObject();
        }
    }
} // UnknownWrapper


// type: System.Runtime.InteropServices.UnmanagedCallConvAttribute
public final class UnmanagedCallConvAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_UnmanagedCallConvAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.UnmanagedCallConvAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_UnmanagedCallConvAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UnmanagedCallConvAttribute


// type: System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute
    /**
    Any method marked with  can be directly called from native code. The function token can be loaded to a local variable using the address-of operator in C# and passed as a callback to a native method.

    */
public final class UnmanagedCallersOnlyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_UnmanagedCallersOnlyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // instance field: System.String EntryPoint
    /**
    Optional. If omitted, no named export is emitted during compilation.

    */
    public var EntryPoint : Optional<dotnet.System.String> {
        get {
        let __h = System_Runtime_InteropServices_UnmanagedCallersOnlyAttribute_get_EntryPoint(self.get_handle());
        let __return = (__h != nil) ? dotnet.System.String(hndl: __h!) : nil;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_UnmanagedCallersOnlyAttribute_set_EntryPoint(self.get_handle(), v?.get_handle());
        }
    }
    // .ctor()
// docid: M:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.#ctor
    /**
    Initializes a new  instance.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_UnmanagedCallersOnlyAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UnmanagedCallersOnlyAttribute


// type: System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute
    /**
    Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.

    */
public final class UnmanagedFunctionPointerAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // instance field: System.Boolean BestFitMapping
    /**
    Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.

    */
    public var BestFitMapping : Bool {
        get {
        let __return = (System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_get_BestFitMapping(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_set_BestFitMapping(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // instance field: System.Runtime.InteropServices.CharSet CharSet
    /**
    Indicates how to marshal string parameters to the method, and controls name mangling.

    */
    public var CharSet : dotnet.System.Runtime.InteropServices.CharSet {
        get {
        let __return = dotnet.System.Runtime.InteropServices.CharSet(val: System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_get_CharSet(self.get_handle()));
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_set_CharSet(self.get_handle(), v.get_value());
        }
    }
    // instance field: System.Boolean SetLastError
    /**
    Indicates whether the callee calls the  Windows API function before returning from the attributed method.

    */
    public var SetLastError : Bool {
        get {
        let __return = (System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_get_SetLastError(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_set_SetLastError(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // instance field: System.Boolean ThrowOnUnmappableChar
    /**
    Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.

    */
    public var ThrowOnUnmappableChar : Bool {
        get {
        let __return = (System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_get_ThrowOnUnmappableChar(self.get_handle())) != 0;
            return __return;
        }
        set(v) {
            System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_set_ThrowOnUnmappableChar(self.get_handle(), Swift.Int32(v ? 1 : 0));
        }
    }
    // .ctor(System.Runtime.InteropServices.CallingConvention)
// docid: M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)
    /**
    Initializes a new instance of the  class with the specified calling convention.

    - Parameter callingConvention: The specified calling convention.
    */
    public init(callingConvention : dotnet.System.Runtime.InteropServices.CallingConvention) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_ctor_0__1__CallingConvention(&__thrown, callingConvention.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.InteropServices.CallingConvention get_CallingConvention()
// docid: M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.get_CallingConvention
    public func get_CallingConvention() throws -> dotnet.System.Runtime.InteropServices.CallingConvention {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_UnmanagedFunctionPointerAttribute_CallingConvention__get_CallingConvention_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.CallingConvention(val: __return);
        }
    }
    /**
    Gets the value of the calling convention.

    */
    public var CallingConvention : dotnet.System.Runtime.InteropServices.CallingConvention {
        get {
            return try! get_CallingConvention();
        }
    }
} // UnmanagedFunctionPointerAttribute


// type: System.Runtime.InteropServices.UnmanagedType
    /**
    Identifies how to marshal parameters or fields to unmanaged code.

    */
public struct UnmanagedType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_UnmanagedType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.UnmanagedType Bool
    /**
    A 4-byte Boolean value ( != 0,  = 0). This is the Win32 BOOL type.

    */
    public static var Bool : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_Bool());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType I1
    /**
    A 1-byte signed integer. You can use this member to transform a Boolean value into a 1-byte, C-style  ( = 1,  = 0).

    */
    public static var I1 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_I1());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType U1
    /**
    A 1-byte unsigned integer.

    */
    public static var U1 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_U1());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType I2
    /**
    A 2-byte signed integer.

    */
    public static var I2 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_I2());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType U2
    /**
    A 2-byte unsigned integer.

    */
    public static var U2 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_U2());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType I4
    /**
    A 4-byte signed integer.

    */
    public static var I4 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_I4());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType U4
    /**
    A 4-byte unsigned integer.

    */
    public static var U4 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_U4());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType I8
    /**
    An 8-byte signed integer.

    */
    public static var I8 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_I8());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType U8
    /**
    An 8-byte unsigned integer.

    */
    public static var U8 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_U8());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType R4
    /**
    A 4-byte floating-point number.

    */
    public static var R4 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_R4());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType R8
    /**
    An 8-byte floating-point number.

    */
    public static var R8 : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_R8());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType Currency
    /**
    A currency type. Used on a  to marshal the decimal value as a COM currency type instead of as a .

    */
    public static var Currency : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_Currency());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType BStr
    /**
    A Unicode character string that is a length-prefixed double byte. You can use this member, which is the default string in COM, on the  data type.

    */
    public static var BStr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_BStr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType LPStr
    /**
    A single byte, null-terminated ANSI character string. You can use this member on the  and  data types.

    */
    public static var LPStr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_LPStr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType LPWStr
    /**
    A 2-byte, null-terminated Unicode character string. You cannot use the  value with an unmanaged string unless the string was created by using the unmanaged  function.

    */
    public static var LPWStr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_LPWStr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType LPTStr
    /**
    A platform-dependent character string: ANSI on Windows 98, and Unicode on Windows NT and Windows XP. This value is supported only for platform invoke and not for COM interop, because exporting a string of type  is not supported.

    */
    public static var LPTStr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_LPTStr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType ByValTStr
    /**
    Used for in-line, fixed-length character arrays that appear within a structure.  types behave like C-style, fixed-size strings inside a structure (for example, char s[5]). The character type used with  is determined by the  argument of the  attribute applied to the containing structure. Always use the  field to indicate the size of the array.

    */
    public static var ByValTStr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_ByValTStr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType IUnknown
    /**
    A COM  pointer. You can use this member on the  data type.

    */
    public static var IUnknown : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_IUnknown());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType IDispatch
    /**
    A COM  pointer ( in Microsoft Visual Basic 6.0).

    */
    public static var IDispatch : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_IDispatch());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType Struct
    /**
    A VARIANT, which is used to marshal managed formatted classes and value types.

    */
    public static var Struct : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_Struct());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType Interface
    /**
    A COM interface pointer. The  of the interface is obtained from the class metadata. Use this member to specify the exact interface type or the default interface type if you apply it to a class. This member produces the same behavior as  when you apply it to the  data type.

    */
    public static var Interface : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_Interface());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType SafeArray
    /**
    A , which is a self-describing array that carries the type, rank, and bounds of the associated array data. You can use this member with the  field to override the default element type.

    */
    public static var SafeArray : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_SafeArray());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType ByValArray
    /**
    When the  property is set to , the  field must be set to indicate the number of elements in the array. The  field can optionally contain the  of the array elements when it is necessary to differentiate among string types. You can use this  only on an array that whose elements appear as fields in a structure.

    */
    public static var ByValArray : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_ByValArray());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType SysInt
    /**
    A platform-dependent, signed integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.

    */
    public static var SysInt : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_SysInt());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType SysUInt
    /**
    A platform-dependent, unsigned integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.

    */
    public static var SysUInt : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_SysUInt());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType VBByRefStr
    /**
    A value that enables Visual Basic to change a string in unmanaged code and have the results reflected in managed code. This value is only supported for platform invoke.

    */
    public static var VBByRefStr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_VBByRefStr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType AnsiBStr
    /**
    An ANSI character string that is a length-prefixed single byte. You can use this member on the  data type.

    */
    public static var AnsiBStr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_AnsiBStr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType TBStr
    /**
    A length-prefixed, platform-dependent  string: ANSI on Windows 98, Unicode on Windows NT. You rarely use this BSTR-like member.

    */
    public static var TBStr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_TBStr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType VariantBool
    /**
    A 2-byte, OLE-defined VARIANT_BOOL type ( = -1,  = 0).

    */
    public static var VariantBool : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_VariantBool());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType FunctionPtr
    /**
    An integer that can be used as a C-style function pointer. You can use this member on a  data type or on a type that inherits from a .

    */
    public static var FunctionPtr : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_FunctionPtr());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType AsAny
    /**
    A dynamic type that determines the type of an object at run time and marshals the object as that type. This member is valid for platform invoke methods only.

    */
    public static var AsAny : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_AsAny());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType LPArray
    /**
    A pointer to the first element of a C-style array. When marshaling from managed to unmanaged code, the length of the array is determined by the length of the managed array. When marshaling from unmanaged to managed code, the length of the array is determined from the  and  fields, optionally followed by the unmanaged type of the elements within the array when it is necessary to differentiate among string types.

    */
    public static var LPArray : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_LPArray());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType LPStruct
    /**
    A pointer to a C-style structure that you use to marshal managed formatted classes. This member is valid for platform invoke methods only.

    */
    public static var LPStruct : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_LPStruct());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType CustomMarshaler
    /**
    Specifies the custom marshaler class when used with the  or  field. The  field can be used to pass additional information to the custom marshaler. You can use this member on any reference type. This member is valid for parameters and return values only. It cannot be used on fields.

    */
    public static var CustomMarshaler : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_CustomMarshaler());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType Error
    /**
    A native type that is associated with an  or an  and that causes the parameter to be exported as an HRESULT in the exported type library.

    */
    public static var Error : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_Error());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType IInspectable
    /**
    A Windows Runtime interface pointer. You can use this member on the  data type.

    */
    public static var IInspectable : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_IInspectable());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType HString
    /**
    A Windows Runtime string. You can use this member on the  data type.

    */
    public static var HString : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_HString());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.UnmanagedType LPUTF8Str
    /**
    A pointer to a UTF-8 encoded string.

    */
    public static var LPUTF8Str : dotnet.System.Runtime.InteropServices.UnmanagedType {
        get {
        let __return = dotnet.System.Runtime.InteropServices.UnmanagedType(val: System_Runtime_InteropServices_UnmanagedType_get_LPUTF8Str());
            return __return;
        }
    }
} // UnmanagedType


// type: System.Runtime.InteropServices.VarEnum
    /**
    Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a .

    */
public struct VarEnum : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_VarEnum_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.VarEnum VT_EMPTY
    /**
    Indicates that a value was not specified.

    */
    public static var VT_EMPTY : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_EMPTY());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_NULL
    /**
    Indicates a null value, similar to a null value in SQL.

    */
    public static var VT_NULL : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_NULL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_I2
    /**
    Indicates a  integer.

    */
    public static var VT_I2 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_I2());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_I4
    /**
    Indicates a  integer.

    */
    public static var VT_I4 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_I4());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_R4
    /**
    Indicates a  value.

    */
    public static var VT_R4 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_R4());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_R8
    /**
    Indicates a  value.

    */
    public static var VT_R8 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_R8());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_CY
    /**
    Indicates a currency value.

    */
    public static var VT_CY : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_CY());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_DATE
    /**
    Indicates a DATE value.

    */
    public static var VT_DATE : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_DATE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_BSTR
    /**
    Indicates a BSTR string.

    */
    public static var VT_BSTR : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_BSTR());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_DISPATCH
    /**
    Indicates an  pointer.

    */
    public static var VT_DISPATCH : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_DISPATCH());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_ERROR
    /**
    Indicates an SCODE.

    */
    public static var VT_ERROR : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_ERROR());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_BOOL
    /**
    Indicates a Boolean value.

    */
    public static var VT_BOOL : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_BOOL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_VARIANT
    /**
    Indicates a VARIANT  pointer.

    */
    public static var VT_VARIANT : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_VARIANT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_UNKNOWN
    /**
    Indicates an  pointer.

    */
    public static var VT_UNKNOWN : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_UNKNOWN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_DECIMAL
    /**
    Indicates a  value.

    */
    public static var VT_DECIMAL : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_DECIMAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_I1
    /**
    Indicates a  value.

    */
    public static var VT_I1 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_I1());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_UI1
    /**
    Indicates a .

    */
    public static var VT_UI1 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_UI1());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_UI2
    /**
    Indicates an .

    */
    public static var VT_UI2 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_UI2());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_UI4
    /**
    Indicates an .

    */
    public static var VT_UI4 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_UI4());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_I8
    /**
    Indicates a 64-bit integer.

    */
    public static var VT_I8 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_I8());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_UI8
    /**
    Indicates an 64-bit unsigned integer.

    */
    public static var VT_UI8 : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_UI8());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_INT
    /**
    Indicates an integer value.

    */
    public static var VT_INT : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_INT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_UINT
    /**
    Indicates an  integer value.

    */
    public static var VT_UINT : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_UINT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_VOID
    /**
    Indicates a C style .

    */
    public static var VT_VOID : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_VOID());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_HRESULT
    /**
    Indicates an HRESULT.

    */
    public static var VT_HRESULT : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_HRESULT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_PTR
    /**
    Indicates a pointer type.

    */
    public static var VT_PTR : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_PTR());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_SAFEARRAY
    /**
    Indicates a SAFEARRAY. Not valid in a VARIANT.

    */
    public static var VT_SAFEARRAY : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_SAFEARRAY());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_CARRAY
    /**
    Indicates a C style array.

    */
    public static var VT_CARRAY : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_CARRAY());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_USERDEFINED
    /**
    Indicates a user defined type.

    */
    public static var VT_USERDEFINED : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_USERDEFINED());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_LPSTR
    /**
    Indicates a null-terminated string.

    */
    public static var VT_LPSTR : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_LPSTR());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_LPWSTR
    /**
    Indicates a wide string terminated by .

    */
    public static var VT_LPWSTR : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_LPWSTR());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_RECORD
    /**
    Indicates a user defined type.

    */
    public static var VT_RECORD : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_RECORD());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_FILETIME
    /**
    Indicates a FILETIME value.

    */
    public static var VT_FILETIME : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_FILETIME());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_BLOB
    /**
    Indicates length prefixed bytes.

    */
    public static var VT_BLOB : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_BLOB());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_STREAM
    /**
    Indicates that the name of a stream follows.

    */
    public static var VT_STREAM : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_STREAM());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_STORAGE
    /**
    Indicates that the name of a storage follows.

    */
    public static var VT_STORAGE : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_STORAGE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_STREAMED_OBJECT
    /**
    Indicates that a stream contains an object.

    */
    public static var VT_STREAMED_OBJECT : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_STREAMED_OBJECT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_STORED_OBJECT
    /**
    Indicates that a storage contains an object.

    */
    public static var VT_STORED_OBJECT : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_STORED_OBJECT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_BLOB_OBJECT
    /**
    Indicates that a blob contains an object.

    */
    public static var VT_BLOB_OBJECT : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_BLOB_OBJECT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_CF
    /**
    Indicates the clipboard format.

    */
    public static var VT_CF : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_CF());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_CLSID
    /**
    Indicates a class ID.

    */
    public static var VT_CLSID : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_CLSID());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_VECTOR
    /**
    Indicates a simple, counted array.

    */
    public static var VT_VECTOR : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_VECTOR());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_ARRAY
    /**
    Indicates a  pointer.

    */
    public static var VT_ARRAY : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_ARRAY());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.VarEnum VT_BYREF
    /**
    Indicates that a value is a reference.

    */
    public static var VT_BYREF : dotnet.System.Runtime.InteropServices.VarEnum {
        get {
        let __return = dotnet.System.Runtime.InteropServices.VarEnum(val: System_Runtime_InteropServices_VarEnum_get_VT_BYREF());
            return __return;
        }
    }
} // VarEnum


// type: System.Runtime.InteropServices.VariantWrapper
    /**
    Marshals data of type  from managed to unmanaged code. This class cannot be inherited.

    */
public final class VariantWrapper
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_VariantWrapper_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)
    /**
    Initializes a new instance of the  class for the specified  parameter.

    - Parameter obj: The object to marshal.
    */
    public init(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_VariantWrapper_ctor_0__1__Object(&__thrown, obj?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_WrappedObject()
// docid: M:System.Runtime.InteropServices.VariantWrapper.get_WrappedObject
    public func get_WrappedObject() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_VariantWrapper_Object__get_WrappedObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the object wrapped by the  object.

    */
    public var WrappedObject : Optional<dotnet.System.Object> {
        get {
            return try! get_WrappedObject();
        }
    }
} // VariantWrapper


}
// System.Runtime.InteropServices.ComTypes
extension System.Runtime.InteropServices.ComTypes {
// type: System.Runtime.InteropServices.ComTypes.ADVF
    /**
    Specifies the requested behavior when setting up an advise sink or a caching connection with an object.

    */
public struct ADVF : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_ADVF_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.ADVF ADVF_NODATA
    /**
    For data advisory connections ( or ), this flag requests the data object not to send data when it calls .

    */
    public static var ADVF_NODATA : dotnet.System.Runtime.InteropServices.ComTypes.ADVF {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.ADVF(val: System_Runtime_InteropServices_ComTypes_ADVF_get_ADVF_NODATA());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.ADVF ADVF_PRIMEFIRST
    /**
    Requests that the object not wait for the data or view to change before making an initial call to  (for data or view advisory connections) or updating the cache (for cache connections).

    */
    public static var ADVF_PRIMEFIRST : dotnet.System.Runtime.InteropServices.ComTypes.ADVF {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.ADVF(val: System_Runtime_InteropServices_ComTypes_ADVF_get_ADVF_PRIMEFIRST());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.ADVF ADVF_ONLYONCE
    /**
    Requests that the object make only one change notification or cache update before deleting the connection.

    */
    public static var ADVF_ONLYONCE : dotnet.System.Runtime.InteropServices.ComTypes.ADVF {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.ADVF(val: System_Runtime_InteropServices_ComTypes_ADVF_get_ADVF_ONLYONCE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.ADVF ADVFCACHE_NOHANDLER
    /**
    Synonym for , which is used more often.

    */
    public static var ADVFCACHE_NOHANDLER : dotnet.System.Runtime.InteropServices.ComTypes.ADVF {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.ADVF(val: System_Runtime_InteropServices_ComTypes_ADVF_get_ADVFCACHE_NOHANDLER());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.ADVF ADVFCACHE_FORCEBUILTIN
    /**
    This value is used by DLL object applications and object handlers that perform the drawing of their objects.

    */
    public static var ADVFCACHE_FORCEBUILTIN : dotnet.System.Runtime.InteropServices.ComTypes.ADVF {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.ADVF(val: System_Runtime_InteropServices_ComTypes_ADVF_get_ADVFCACHE_FORCEBUILTIN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.ADVF ADVFCACHE_ONSAVE
    /**
    For cache connections, this flag updates the cached representation only when the object containing the cache is saved.

    */
    public static var ADVFCACHE_ONSAVE : dotnet.System.Runtime.InteropServices.ComTypes.ADVF {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.ADVF(val: System_Runtime_InteropServices_ComTypes_ADVF_get_ADVFCACHE_ONSAVE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.ADVF ADVF_DATAONSTOP
    /**
    For data advisory connections, assures accessibility to data.

    */
    public static var ADVF_DATAONSTOP : dotnet.System.Runtime.InteropServices.ComTypes.ADVF {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.ADVF(val: System_Runtime_InteropServices_ComTypes_ADVF_get_ADVF_DATAONSTOP());
            return __return;
        }
    }
} // ADVF


// type: System.Runtime.InteropServices.ComTypes.BINDPTR
// boxed value type
    /**
    Contains a pointer to a bound-to  structure,  structure, or an  interface.

    */
public final class BINDPTR
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_BINDPTR_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_BINDPTR_implicit_ctor();
            super.init(hndl: h);
    }
} // BINDPTR


// type: System.Runtime.InteropServices.ComTypes.BIND_OPTS
// boxed value type
    /**
    Stores the parameters that are used during a moniker binding operation.

    */
public final class BIND_OPTS
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_BIND_OPTS_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_BIND_OPTS_implicit_ctor();
            super.init(hndl: h);
    }
} // BIND_OPTS


// type: System.Runtime.InteropServices.ComTypes.CALLCONV
    /**
    Identifies the calling convention used by a method described in a METHODDATA structure.

    */
public struct CALLCONV : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_CALLCONV_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_CDECL
    /**
    Indicates that the C declaration (CDECL) calling convention is used for a method.

    */
    public static var CC_CDECL : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_CDECL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_MSCPASCAL
    /**
    Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.

    */
    public static var CC_MSCPASCAL : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_MSCPASCAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_PASCAL
    /**
    Indicates that the Pascal calling convention is used for a method.

    */
    public static var CC_PASCAL : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_PASCAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_MACPASCAL
    /**
    Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.

    */
    public static var CC_MACPASCAL : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_MACPASCAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_STDCALL
    /**
    Indicates that the standard calling convention (STDCALL) is used for a method.

    */
    public static var CC_STDCALL : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_STDCALL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_RESERVED
    /**
    This value is reserved for future use.

    */
    public static var CC_RESERVED : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_RESERVED());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_SYSCALL
    /**
    Indicates that the standard SYSCALL calling convention is used for a method.

    */
    public static var CC_SYSCALL : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_SYSCALL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_MPWCDECL
    /**
    Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.

    */
    public static var CC_MPWCDECL : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_MPWCDECL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_MPWPASCAL
    /**
    Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.

    */
    public static var CC_MPWPASCAL : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_MPWPASCAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.CALLCONV CC_MAX
    /**
    Indicates the end of the  enumeration.

    */
    public static var CC_MAX : dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.CALLCONV(val: System_Runtime_InteropServices_ComTypes_CALLCONV_get_CC_MAX());
            return __return;
        }
    }
} // CALLCONV


// type: System.Runtime.InteropServices.ComTypes.CONNECTDATA
// boxed value type
    /**
    Describes a connection that exists to a given connection point.

    */
public final class CONNECTDATA
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_CONNECTDATA_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_CONNECTDATA_implicit_ctor();
            super.init(hndl: h);
    }
} // CONNECTDATA


// type: System.Runtime.InteropServices.ComTypes.DATADIR
    /**
    Specifies the direction of the data flow in the  parameter of the  method. This determines the formats that the resulting enumerator can enumerate.

    */
public struct DATADIR : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_DATADIR_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.DATADIR DATADIR_GET
    /**
    Requests that  supply an enumerator for the formats that can be specified in .

    */
    public static var DATADIR_GET : dotnet.System.Runtime.InteropServices.ComTypes.DATADIR {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DATADIR(val: System_Runtime_InteropServices_ComTypes_DATADIR_get_DATADIR_GET());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DATADIR DATADIR_SET
    /**
    Requests that  supply an enumerator for the formats that can be specified in .

    */
    public static var DATADIR_SET : dotnet.System.Runtime.InteropServices.ComTypes.DATADIR {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DATADIR(val: System_Runtime_InteropServices_ComTypes_DATADIR_get_DATADIR_SET());
            return __return;
        }
    }
} // DATADIR


// type: System.Runtime.InteropServices.ComTypes.DESCKIND
    /**
    Identifies the type description being bound to.

    */
public struct DESCKIND : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_DESCKIND_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.DESCKIND DESCKIND_NONE
    /**
    Indicates that no match was found.

    */
    public static var DESCKIND_NONE : dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND(val: System_Runtime_InteropServices_ComTypes_DESCKIND_get_DESCKIND_NONE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DESCKIND DESCKIND_FUNCDESC
    /**
    Indicates that a  structure was returned.

    */
    public static var DESCKIND_FUNCDESC : dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND(val: System_Runtime_InteropServices_ComTypes_DESCKIND_get_DESCKIND_FUNCDESC());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DESCKIND DESCKIND_VARDESC
    /**
    Indicates that a  was returned.

    */
    public static var DESCKIND_VARDESC : dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND(val: System_Runtime_InteropServices_ComTypes_DESCKIND_get_DESCKIND_VARDESC());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DESCKIND DESCKIND_TYPECOMP
    /**
    Indicates that a  was returned.

    */
    public static var DESCKIND_TYPECOMP : dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND(val: System_Runtime_InteropServices_ComTypes_DESCKIND_get_DESCKIND_TYPECOMP());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DESCKIND DESCKIND_IMPLICITAPPOBJ
    /**
    Indicates that an  was returned.

    */
    public static var DESCKIND_IMPLICITAPPOBJ : dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND(val: System_Runtime_InteropServices_ComTypes_DESCKIND_get_DESCKIND_IMPLICITAPPOBJ());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DESCKIND DESCKIND_MAX
    /**
    Indicates an end-of-enumeration marker.

    */
    public static var DESCKIND_MAX : dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND(val: System_Runtime_InteropServices_ComTypes_DESCKIND_get_DESCKIND_MAX());
            return __return;
        }
    }
} // DESCKIND


// type: System.Runtime.InteropServices.ComTypes.DISPPARAMS
// boxed value type
    /**
    Contains the arguments passed to a method or property by .

    */
public final class DISPPARAMS
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_DISPPARAMS_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_DISPPARAMS_implicit_ctor();
            super.init(hndl: h);
    }
} // DISPPARAMS


// type: System.Runtime.InteropServices.ComTypes.DVASPECT
    /**
    Specifies the desired data or view aspect of the object when drawing or getting data.

    */
public struct DVASPECT : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_DVASPECT_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.DVASPECT DVASPECT_CONTENT
    /**
    A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.

    */
    public static var DVASPECT_CONTENT : dotnet.System.Runtime.InteropServices.ComTypes.DVASPECT {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DVASPECT(val: System_Runtime_InteropServices_ComTypes_DVASPECT_get_DVASPECT_CONTENT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DVASPECT DVASPECT_THUMBNAIL
    /**
    A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.

    */
    public static var DVASPECT_THUMBNAIL : dotnet.System.Runtime.InteropServices.ComTypes.DVASPECT {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DVASPECT(val: System_Runtime_InteropServices_ComTypes_DVASPECT_get_DVASPECT_THUMBNAIL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DVASPECT DVASPECT_ICON
    /**
    An iconic representation of an object.

    */
    public static var DVASPECT_ICON : dotnet.System.Runtime.InteropServices.ComTypes.DVASPECT {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DVASPECT(val: System_Runtime_InteropServices_ComTypes_DVASPECT_get_DVASPECT_ICON());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.DVASPECT DVASPECT_DOCPRINT
    /**
    A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.

    */
    public static var DVASPECT_DOCPRINT : dotnet.System.Runtime.InteropServices.ComTypes.DVASPECT {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.DVASPECT(val: System_Runtime_InteropServices_ComTypes_DVASPECT_get_DVASPECT_DOCPRINT());
            return __return;
        }
    }
} // DVASPECT


// type: System.Runtime.InteropServices.ComTypes.ELEMDESC
// boxed value type
    /**
    Contains the type description and process transfer information for a variable, function, or a function parameter.

    */
public final class ELEMDESC
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_ELEMDESC_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_ELEMDESC_implicit_ctor();
            super.init(hndl: h);
    }
} // ELEMDESC


// type: System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION
// boxed value type
    /**
    Contains information about an element.

    */
public final class ELEMDESC_DESCUNION
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_ELEMDESC_DESCUNION_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_ELEMDESC_DESCUNION_implicit_ctor();
            super.init(hndl: h);
    }
} // ELEMDESC_DESCUNION


// type: System.Runtime.InteropServices.ComTypes.EXCEPINFO
// boxed value type
    /**
    Describes the exceptions that occur during .

    */
public final class EXCEPINFO
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_EXCEPINFO_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_EXCEPINFO_implicit_ctor();
            super.init(hndl: h);
    }
} // EXCEPINFO


// type: System.Runtime.InteropServices.ComTypes.FILETIME
// boxed value type
    /**
    Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.

    */
public final class FILETIME
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_FILETIME_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_FILETIME_implicit_ctor();
            super.init(hndl: h);
    }
} // FILETIME


// type: System.Runtime.InteropServices.ComTypes.FORMATETC
// boxed value type
    /**
    Represents a generalized Clipboard format.

    */
public final class FORMATETC
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_FORMATETC_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_FORMATETC_implicit_ctor();
            super.init(hndl: h);
    }
} // FORMATETC


// type: System.Runtime.InteropServices.ComTypes.FUNCDESC
// boxed value type
    /**
    Defines a function description.

    */
public final class FUNCDESC
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_FUNCDESC_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_FUNCDESC_implicit_ctor();
            super.init(hndl: h);
    }
} // FUNCDESC


// type: System.Runtime.InteropServices.ComTypes.FUNCFLAGS
    /**
    Identifies the constants that define the properties of a function.

    */
public struct FUNCFLAGS : SGBridgeGenericValue {
    let v : Swift.Int16;
    public init(val: Swift.Int16) { self.v = val; }
    public func get_value() -> Swift.Int16 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int16(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FRESTRICTED
    /**
    The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.

    */
    public static var FUNCFLAG_FRESTRICTED : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FRESTRICTED());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FSOURCE
    /**
    The function returns an object that is a source of events.

    */
    public static var FUNCFLAG_FSOURCE : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FSOURCE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FBINDABLE
    /**
    The function that supports data binding.

    */
    public static var FUNCFLAG_FBINDABLE : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FBINDABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FREQUESTEDIT
    /**
    When set, any call to a method that sets the property results first in a call to . The implementation of  determines if the call is allowed to set the property.

    */
    public static var FUNCFLAG_FREQUESTEDIT : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FREQUESTEDIT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FDISPLAYBIND
    /**
    The function that is displayed to the user as bindable.  must also be set.

    */
    public static var FUNCFLAG_FDISPLAYBIND : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FDISPLAYBIND());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FDEFAULTBIND
    /**
    The function that best represents the object. Only one function in a type can have this attribute.

    */
    public static var FUNCFLAG_FDEFAULTBIND : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FDEFAULTBIND());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FHIDDEN
    /**
    The function should not be displayed to the user, although it exists and is bindable.

    */
    public static var FUNCFLAG_FHIDDEN : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FHIDDEN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FUSESGETLASTERROR
    /**
    The function supports . If an error occurs during the function, the caller can call  to retrieve the error code.

    */
    public static var FUNCFLAG_FUSESGETLASTERROR : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FUSESGETLASTERROR());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FDEFAULTCOLLELEM
    /**
    Permits an optimization in which the compiler looks for a member named "xyz" on the type of "abc". If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.

    */
    public static var FUNCFLAG_FDEFAULTCOLLELEM : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FDEFAULTCOLLELEM());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FUIDEFAULT
    /**
    The type information member is the default member for display in the user interface.

    */
    public static var FUNCFLAG_FUIDEFAULT : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FUIDEFAULT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FNONBROWSABLE
    /**
    The property appears in an object browser, but not in a properties browser.

    */
    public static var FUNCFLAG_FNONBROWSABLE : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FNONBROWSABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FREPLACEABLE
    /**
    Tags the interface as having default behaviors.

    */
    public static var FUNCFLAG_FREPLACEABLE : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FREPLACEABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCFLAGS FUNCFLAG_FIMMEDIATEBIND
    /**
    Mapped as individual bindable properties.

    */
    public static var FUNCFLAG_FIMMEDIATEBIND : dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCFLAGS(val: System_Runtime_InteropServices_ComTypes_FUNCFLAGS_get_FUNCFLAG_FIMMEDIATEBIND());
            return __return;
        }
    }
} // FUNCFLAGS


// type: System.Runtime.InteropServices.ComTypes.FUNCKIND
    /**
    Defines how to access a function.

    */
public struct FUNCKIND : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_FUNCKIND_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCKIND FUNC_VIRTUAL
    /**
    The function is accessed in the same way as , except the function has an implementation.

    */
    public static var FUNC_VIRTUAL : dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND(val: System_Runtime_InteropServices_ComTypes_FUNCKIND_get_FUNC_VIRTUAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCKIND FUNC_PUREVIRTUAL
    /**
    The function is accessed through the virtual function table (VTBL), and takes an implicit  pointer.

    */
    public static var FUNC_PUREVIRTUAL : dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND(val: System_Runtime_InteropServices_ComTypes_FUNCKIND_get_FUNC_PUREVIRTUAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCKIND FUNC_NONVIRTUAL
    /**
    The function is accessed by  address and takes an implicit  pointer.

    */
    public static var FUNC_NONVIRTUAL : dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND(val: System_Runtime_InteropServices_ComTypes_FUNCKIND_get_FUNC_NONVIRTUAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCKIND FUNC_STATIC
    /**
    The function is accessed by  address and does not take an implicit  pointer.

    */
    public static var FUNC_STATIC : dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND(val: System_Runtime_InteropServices_ComTypes_FUNCKIND_get_FUNC_STATIC());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.FUNCKIND FUNC_DISPATCH
    /**
    The function can be accessed only through .

    */
    public static var FUNC_DISPATCH : dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.FUNCKIND(val: System_Runtime_InteropServices_ComTypes_FUNCKIND_get_FUNC_DISPATCH());
            return __return;
        }
    }
} // FUNCKIND


// type: System.Runtime.InteropServices.ComTypes.IAdviseSink
    /**
    Provides a managed definition of the  interface.

    */
open class IAdviseSink
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IAdviseSink
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IAdviseSink_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnClose()
// docid: M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose
    /**
    Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.

    */
    open func OnClose() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IAdviseSink_void__OnClose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnDataChange(ref System.Runtime.InteropServices.ComTypes.FORMATETC, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM)
// docid: M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)
    /**
    Notifies all data objects currently registered advisory sinks that data in the object has changed.

    - Parameter format: A , passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.
    - Parameter stgmedium: A , passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.
    */
    open func OnDataChange(format : inout dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC, stgmedium : inout dotnet.System.Runtime.InteropServices.ComTypes.STGMEDIUM) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_format = format.get_handle();
            var _tmp_ref_stgmedium = stgmedium.get_handle();
        System_Runtime_InteropServices_ComTypes_IAdviseSink_void__OnDataChange_0__2__refFORMATETC_refSTGMEDIUM(&__thrown, self.get_handle(), &_tmp_ref_format, &_tmp_ref_stgmedium);
        let _tmp2_format = dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC(hndl: _tmp_ref_format);
            format = _tmp2_format;
        let _tmp2_stgmedium = dotnet.System.Runtime.InteropServices.ComTypes.STGMEDIUM(hndl: _tmp_ref_stgmedium);
            stgmedium = _tmp2_stgmedium;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)
    /**
    Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.

    - Parameter moniker: A pointer to the  interface on the new full moniker of the object.
    */
    open func OnRename(moniker : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IAdviseSink_void__OnRename_0__1__IMoniker(&__thrown, self.get_handle(), moniker.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnSave()
// docid: M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave
    /**
    Notifies all registered advisory sinks that the object has been saved. This method is called by a server.

    */
    open func OnSave() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IAdviseSink_void__OnSave_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnViewChange(System.Int32, System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)
    /**
    Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.

    - Parameter aspect: The aspect, or view, of the object. Contains a value taken from the  enumeration.
    - Parameter index: The portion of the view that has changed. Currently, only -1 is valid.
    */
    open func OnViewChange(aspect : Swift.Int32, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IAdviseSink_void__OnViewChange_0__2__i32_i32(&__thrown, self.get_handle(), aspect, index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IAdviseSink


// type: System.Runtime.InteropServices.ComTypes.IBindCtx
    /**
    Provides the managed definition of the  interface.

    */
open class IBindCtx
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IBindCtx
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IBindCtx_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void EnumObjectParam(ref System.Runtime.InteropServices.ComTypes.IEnumString)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)
    /**
    Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.

    - Parameter ppenum: When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.
    */
    open func EnumObjectParam(ppenum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumString) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppenum = ppenum.get_handle();
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__EnumObjectParam_0__1__outIEnumString(&__thrown, self.get_handle(), &_tmp_out_ppenum);
        let _tmp2_ppenum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumString(hndl: _tmp_out_ppenum);
            ppenum = _tmp2_ppenum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetBindOptions(ref System.Runtime.InteropServices.ComTypes.BIND_OPTS)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)
    /**
    Returns the current binding options stored in the current bind context.

    - Parameter pbindopts: A pointer to the structure to receive the binding options.
    */
    open func GetBindOptions(pbindopts : inout dotnet.System.Runtime.InteropServices.ComTypes.BIND_OPTS) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_pbindopts = pbindopts.get_handle();
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__GetBindOptions_0__1__refBIND_OPTS(&__thrown, self.get_handle(), &_tmp_ref_pbindopts);
        let _tmp2_pbindopts = dotnet.System.Runtime.InteropServices.ComTypes.BIND_OPTS(hndl: _tmp_ref_pbindopts);
            pbindopts = _tmp2_pbindopts;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetObjectParam(System.String, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)
    /**
    Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.

    - Parameter pszKey: The name of the object to search for.
    - Parameter ppunk: When this method returns, contains the object interface pointer. This parameter is passed uninitialized.
    */
    open func GetObjectParam(pszKey : dotnet.System.String, ppunk : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppunk = ppunk.get_handle();
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__GetObjectParam_0__2__String_outObject(&__thrown, self.get_handle(), pszKey.get_handle(), &_tmp_out_ppunk);
        let _tmp2_ppunk = dotnet.System.Object(hndl: _tmp_out_ppunk);
            ppunk = _tmp2_ppunk;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetRunningObjectTable(ref System.Runtime.InteropServices.ComTypes.IRunningObjectTable)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)
    /**
    Returns access to the Running Object Table (ROT) relevant to this binding process.

    - Parameter pprot: When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.
    */
    open func GetRunningObjectTable(pprot : inout dotnet.System.Runtime.InteropServices.ComTypes.IRunningObjectTable) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pprot = pprot.get_handle();
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__GetRunningObjectTable_0__1__outIRunningObjectTable(&__thrown, self.get_handle(), &_tmp_out_pprot);
        let _tmp2_pprot = dotnet.System.Runtime.InteropServices.ComTypes.IRunningObjectTable(hndl: _tmp_out_pprot);
            pprot = _tmp2_pprot;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterObjectBound(System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)
    /**
    Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.

    - Parameter punk: The object to register for release.
    */
    open func RegisterObjectBound(punk : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__RegisterObjectBound_0__1__Object(&__thrown, self.get_handle(), punk.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterObjectParam(System.String, System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)
    /**
    Registers the specified object pointer under the specified name in the internally maintained table of object pointers.

    - Parameter pszKey: The name to register  with.
    - Parameter punk: The object to register.
    */
    open func RegisterObjectParam(pszKey : dotnet.System.String, punk : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__RegisterObjectParam_0__2__String_Object(&__thrown, self.get_handle(), pszKey.get_handle(), punk.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReleaseBoundObjects()
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects
    /**
    Releases all the objects currently registered with the bind context by using the  method.

    */
    open func ReleaseBoundObjects() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__ReleaseBoundObjects_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RevokeObjectBound(System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)
    /**
    Removes the object from the set of registered objects that need to be released.

    - Parameter punk: The object to unregister for release.
    */
    open func RevokeObjectBound(punk : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__RevokeObjectBound_0__1__Object(&__thrown, self.get_handle(), punk.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 RevokeObjectParam(System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)
    /**
    Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.

    - Parameter pszKey: The key to unregister.
    - Returns: An  value if the specified key was successfully removed from the table; otherwise, an  value.

    */
    open func RevokeObjectParam(pszKey : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IBindCtx_i32__RevokeObjectParam_0__1__String(&__thrown, self.get_handle(), pszKey.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void SetBindOptions(ref System.Runtime.InteropServices.ComTypes.BIND_OPTS)
// docid: M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)
    /**
    Stores a block of parameters in the bind context. These parameters will apply to later  operations that use this bind context.

    - Parameter pbindopts: The structure containing the binding options to set.
    */
    open func SetBindOptions(pbindopts : inout dotnet.System.Runtime.InteropServices.ComTypes.BIND_OPTS) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_pbindopts = pbindopts.get_handle();
        System_Runtime_InteropServices_ComTypes_IBindCtx_void__SetBindOptions_0__1__refBIND_OPTS(&__thrown, self.get_handle(), &_tmp_ref_pbindopts);
        let _tmp2_pbindopts = dotnet.System.Runtime.InteropServices.ComTypes.BIND_OPTS(hndl: _tmp_ref_pbindopts);
            pbindopts = _tmp2_pbindopts;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IBindCtx


// type: System.Runtime.InteropServices.ComTypes.IConnectionPoint
    /**
    Provides the managed definition of the  interface.

    */
open class IConnectionPoint
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IConnectionPoint
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IConnectionPoint_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Advise(System.Object, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)
    /**
    Establishes an advisory connection between the connection point and the caller's sink object.

    - Parameter pUnkSink: A reference to the sink to receive calls for the outgoing interface managed by this connection point.
    - Parameter pdwCookie: When this method returns, contains the connection cookie. This parameter is passed uninitialized.
    */
    open func Advise(pUnkSink : dotnet.System.Object, pdwCookie : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pdwCookie = pdwCookie;
        System_Runtime_InteropServices_ComTypes_IConnectionPoint_void__Advise_0__2__Object_outi32(&__thrown, self.get_handle(), pUnkSink.get_handle(), &_tmp_out_pdwCookie);
        let _tmp2_pdwCookie = _tmp_out_pdwCookie;
            pdwCookie = _tmp2_pdwCookie;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnumConnections(ref System.Runtime.InteropServices.ComTypes.IEnumConnections)
// docid: M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)
    /**
    Creates an enumerator object for iteration through the connections that exist to this connection point.

    - Parameter ppEnum: When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.
    */
    open func EnumConnections(ppEnum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumConnections) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppEnum = ppEnum.get_handle();
        System_Runtime_InteropServices_ComTypes_IConnectionPoint_void__EnumConnections_0__1__outIEnumConnections(&__thrown, self.get_handle(), &_tmp_out_ppEnum);
        let _tmp2_ppEnum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumConnections(hndl: _tmp_out_ppEnum);
            ppEnum = _tmp2_ppEnum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetConnectionInterface(ref System.Guid)
// docid: M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)
    /**
    Returns the IID of the outgoing interface managed by this connection point.

    - Parameter pIID: When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.
    */
    open func GetConnectionInterface(pIID : inout dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pIID = pIID.get_handle();
        System_Runtime_InteropServices_ComTypes_IConnectionPoint_void__GetConnectionInterface_0__1__outGuid(&__thrown, self.get_handle(), &_tmp_out_pIID);
        let _tmp2_pIID = dotnet.System.Guid(hndl: _tmp_out_pIID);
            pIID = _tmp2_pIID;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetConnectionPointContainer(ref System.Runtime.InteropServices.ComTypes.IConnectionPointContainer)
// docid: M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)
    /**
    Retrieves the  interface pointer to the connectable object that conceptually owns this connection point.

    - Parameter ppCPC: When this parameter returns, contains the connectable object's  interface. This parameter is passed uninitialized.
    */
    open func GetConnectionPointContainer(ppCPC : inout dotnet.System.Runtime.InteropServices.ComTypes.IConnectionPointContainer) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppCPC = ppCPC.get_handle();
        System_Runtime_InteropServices_ComTypes_IConnectionPoint_void__GetConnectionPointContainer_0__1__outIConnectionPointContainer(&__thrown, self.get_handle(), &_tmp_out_ppCPC);
        let _tmp2_ppCPC = dotnet.System.Runtime.InteropServices.ComTypes.IConnectionPointContainer(hndl: _tmp_out_ppCPC);
            ppCPC = _tmp2_ppCPC;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Unadvise(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)
    /**
    Terminates an advisory connection previously established through the  method.

    - Parameter dwCookie: The connection cookie previously returned from the  method.
    */
    open func Unadvise(dwCookie : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IConnectionPoint_void__Unadvise_0__1__i32(&__thrown, self.get_handle(), dwCookie);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IConnectionPoint


// type: System.Runtime.InteropServices.ComTypes.IConnectionPointContainer
    /**
    Provides the managed definition of the  interface.

    */
open class IConnectionPointContainer
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IConnectionPointContainer
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IConnectionPointContainer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void EnumConnectionPoints(ref System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints)
// docid: M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)
    /**
    Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.

    - Parameter ppEnum: When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.
    */
    open func EnumConnectionPoints(ppEnum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppEnum = ppEnum.get_handle();
        System_Runtime_InteropServices_ComTypes_IConnectionPointContainer_void__EnumConnectionPoints_0__1__outIEnumConnectionPoints(&__thrown, self.get_handle(), &_tmp_out_ppEnum);
        let _tmp2_ppEnum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints(hndl: _tmp_out_ppEnum);
            ppEnum = _tmp2_ppEnum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void FindConnectionPoint(ref System.Guid, ref System.Runtime.InteropServices.ComTypes.IConnectionPoint)
// docid: M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)
    /**
    Asks the connectable object if it has a connection point for a particular IID, and if so, returns the  interface pointer to that connection point.

    - Parameter riid: A reference to the outgoing interface IID whose connection point is being requested.
    - Parameter ppCP: When this method returns, contains the connection point that manages the outgoing interface . This parameter is passed uninitialized.
    */
    open func FindConnectionPoint(riid : inout dotnet.System.Guid, ppCP : inout dotnet.System.Runtime.InteropServices.ComTypes.IConnectionPoint) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_riid = riid.get_handle();
            var _tmp_out_ppCP = ppCP.get_handle();
        System_Runtime_InteropServices_ComTypes_IConnectionPointContainer_void__FindConnectionPoint_0__2__refGuid_outIConnectionPoint(&__thrown, self.get_handle(), &_tmp_ref_riid, &_tmp_out_ppCP);
        let _tmp2_riid = dotnet.System.Guid(hndl: _tmp_ref_riid);
            riid = _tmp2_riid;
        let _tmp2_ppCP = dotnet.System.Runtime.InteropServices.ComTypes.IConnectionPoint(hndl: _tmp_out_ppCP);
            ppCP = _tmp2_ppCP;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IConnectionPointContainer


// type: System.Runtime.InteropServices.ComTypes.IDLDESC
// boxed value type
    /**
    Contains information needed for transferring a structure element, parameter, or function return value between processes.

    */
public final class IDLDESC
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IDLDESC_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_IDLDESC_implicit_ctor();
            super.init(hndl: h);
    }
} // IDLDESC


// type: System.Runtime.InteropServices.ComTypes.IDLFLAG
    /**
    Describes how to transfer a structure element, parameter, or function return value between processes.

    */
public struct IDLFLAG : SGBridgeGenericValue {
    let v : Swift.Int16;
    public init(val: Swift.Int16) { self.v = val; }
    public func get_value() -> Swift.Int16 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IDLFLAG_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int16(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.IDLFLAG IDLFLAG_NONE
    /**
    Does not specify whether the parameter passes or receives information.

    */
    public static var IDLFLAG_NONE : dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG(val: System_Runtime_InteropServices_ComTypes_IDLFLAG_get_IDLFLAG_NONE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.IDLFLAG IDLFLAG_FIN
    /**
    The parameter passes information from the caller to the callee.

    */
    public static var IDLFLAG_FIN : dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG(val: System_Runtime_InteropServices_ComTypes_IDLFLAG_get_IDLFLAG_FIN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.IDLFLAG IDLFLAG_FOUT
    /**
    The parameter returns information from the callee to the caller.

    */
    public static var IDLFLAG_FOUT : dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG(val: System_Runtime_InteropServices_ComTypes_IDLFLAG_get_IDLFLAG_FOUT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.IDLFLAG IDLFLAG_FLCID
    /**
    The parameter is the local identifier of a client application.

    */
    public static var IDLFLAG_FLCID : dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG(val: System_Runtime_InteropServices_ComTypes_IDLFLAG_get_IDLFLAG_FLCID());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.IDLFLAG IDLFLAG_FRETVAL
    /**
    The parameter is the return value of the member.

    */
    public static var IDLFLAG_FRETVAL : dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IDLFLAG(val: System_Runtime_InteropServices_ComTypes_IDLFLAG_get_IDLFLAG_FRETVAL());
            return __return;
        }
    }
} // IDLFLAG


// type: System.Runtime.InteropServices.ComTypes.IDataObject
    /**
    Provides the managed definition of the  interface.

    */
open class IDataObject
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IDataObject
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IDataObject_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Int32 DAdvise(ref System.Runtime.InteropServices.ComTypes.FORMATETC, System.Runtime.InteropServices.ComTypes.ADVF, System.Runtime.InteropServices.ComTypes.IAdviseSink, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)
    /**
    Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.

    - Parameter pFormatetc: A  structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.
    - Parameter advf: One of the  values that specifies a group of flags for controlling the advisory connection.
    - Parameter adviseSink: A pointer to the  interface on the advisory sink that will receive the change notification.
    - Parameter connection: When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to . If this value is zero, the connection was not established. This parameter is passed uninitialized.
    - Returns: This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  
  
  Value Description S_OK The advisory connection was created. E_NOTIMPL This method is not implemented on the data object. DV_E_LINDEX There is an invalid value for ; currently, only -1 is supported. DV_E_FORMATETC There is an invalid value for the  parameter. OLE_E_ADVISENOTSUPPORTED The data object does not support change notification.

    */
    open func DAdvise(pFormatetc : inout dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC, advf : dotnet.System.Runtime.InteropServices.ComTypes.ADVF, adviseSink : dotnet.System.Runtime.InteropServices.ComTypes.IAdviseSink, connection : inout Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_pFormatetc = pFormatetc.get_handle();
            var _tmp_out_connection = connection;
        let __return = System_Runtime_InteropServices_ComTypes_IDataObject_i32__DAdvise_0__4__refFORMATETC_ADVF_IAdviseSink_outi32(&__thrown, self.get_handle(), &_tmp_ref_pFormatetc, advf.get_value(), adviseSink.get_handle(), &_tmp_out_connection);
        let _tmp2_pFormatetc = dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC(hndl: _tmp_ref_pFormatetc);
            pFormatetc = _tmp2_pFormatetc;
        let _tmp2_connection = _tmp_out_connection;
            connection = _tmp2_connection;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void DUnadvise(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)
    /**
    Destroys a notification connection that had been previously established.

    - Parameter connection: A DWORD token that specifies the connection to remove. Use the value returned by  when the connection was originally established.
    */
    open func DUnadvise(connection : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IDataObject_void__DUnadvise_0__1__i32(&__thrown, self.get_handle(), connection);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 EnumDAdvise(ref System.Runtime.InteropServices.ComTypes.IEnumSTATDATA)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)
    /**
    Creates an object that can be used to enumerate the current advisory connections.

    - Parameter enumAdvise: When this method returns, contains an  that receives the interface pointer to the new enumerator object. If the implementation sets  to , there are no connections to advisory sinks at this time. This parameter is passed uninitialized.
    - Returns: This method supports the standard return value E_OUTOFMEMORY, as well as the following:  
  
  Value Description S_OK The enumerator object is successfully instantiated or there are no connections. OLE_E_ADVISENOTSUPPORTED This object does not support advisory notifications.

    */
    open func EnumDAdvise(enumAdvise : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumSTATDATA) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_enumAdvise = enumAdvise.get_handle();
        let __return = System_Runtime_InteropServices_ComTypes_IDataObject_i32__EnumDAdvise_0__1__outIEnumSTATDATA(&__thrown, self.get_handle(), &_tmp_out_enumAdvise);
        let _tmp2_enumAdvise = dotnet.System.Runtime.InteropServices.ComTypes.IEnumSTATDATA(hndl: _tmp_out_enumAdvise);
            enumAdvise = _tmp2_enumAdvise;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Runtime.InteropServices.ComTypes.IEnumFORMATETC EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)
    /**
    Creates an object for enumerating the  structures for a data object. These structures are used in calls to  or .

    - Parameter direction: One of the  values that specifies the direction of the data.
    - Returns: This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  
  
  Value Description S_OK The enumerator object was successfully created. E_NOTIMPL The direction specified by the  parameter is not supported. OLE_S_USEREG Requests that OLE enumerate the formats from the registry.

    */
    open func EnumFormatEtc(direction : dotnet.System.Runtime.InteropServices.ComTypes.DATADIR) throws -> dotnet.System.Runtime.InteropServices.ComTypes.IEnumFORMATETC {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IDataObject_IEnumFORMATETC__EnumFormatEtc_0__1__DATADIR(&__thrown, self.get_handle(), direction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.ComTypes.IEnumFORMATETC(hndl : __return);
        }
    }
    // System.Int32 GetCanonicalFormatEtc(ref System.Runtime.InteropServices.ComTypes.FORMATETC, ref System.Runtime.InteropServices.ComTypes.FORMATETC)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)
    /**
    Provides a standard  structure that is logically equivalent to a more complex structure. Use this method to determine whether two different  structures would return the same data, removing the need for duplicate rendering.

    - Parameter formatIn: A pointer to a  structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as . The  member is not significant in this case and should be ignored.
    - Parameter formatOut: When this method returns, contains a pointer to a  structure that contains the most general information possible for a specific rendering, making it canonically equivalent to formatetcIn. The caller must allocate this structure and the  method must fill in the data. To retrieve data in a subsequent call such as , the caller uses the supplied value of , unless the value supplied is . This value is  if the method returns . The  member is not significant in this case and should be ignored. This parameter is passed uninitialized.
    - Returns: This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  
  
  Value Description S_OK The returned  structure is different from the one that was passed. DATA_S_SAMEFORMATETC The  structures are the same and  is returned in the  parameter. DV_E_LINDEX There is an invalid value for ; currently, only -1 is supported. DV_E_FORMATETC There is an invalid value for the  parameter. OLE_E_NOTRUNNING The application is not running.

    */
    open func GetCanonicalFormatEtc(formatIn : inout dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC, formatOut : inout dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_formatIn = formatIn.get_handle();
            var _tmp_out_formatOut = formatOut.get_handle();
        let __return = System_Runtime_InteropServices_ComTypes_IDataObject_i32__GetCanonicalFormatEtc_0__2__refFORMATETC_outFORMATETC(&__thrown, self.get_handle(), &_tmp_ref_formatIn, &_tmp_out_formatOut);
        let _tmp2_formatIn = dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC(hndl: _tmp_ref_formatIn);
            formatIn = _tmp2_formatIn;
        let _tmp2_formatOut = dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC(hndl: _tmp_out_formatOut);
            formatOut = _tmp2_formatOut;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void GetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)
    /**
    Obtains data from a source data object. The  method, which is called by a data consumer, renders the data described in the specified  structure and transfers it through the specified  structure. The caller then assumes responsibility for releasing the  structure.

    - Parameter format: A pointer to a  structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.
    - Parameter medium: When this method returns, contains a pointer to the  structure that indicates the storage medium containing the returned data through its  member, and the responsibility for releasing the medium through the value of its  member. If  is , the receiver of the medium is responsible for releasing it; otherwise,  points to the  interface on the appropriate object so its  method can be called. The medium must be allocated and filled in by . This parameter is passed uninitialized.
    */
    open func GetData(format : inout dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC, medium : inout dotnet.System.Runtime.InteropServices.ComTypes.STGMEDIUM) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_format = format.get_handle();
            var _tmp_out_medium = medium.get_handle();
        System_Runtime_InteropServices_ComTypes_IDataObject_void__GetData_0__2__refFORMATETC_outSTGMEDIUM(&__thrown, self.get_handle(), &_tmp_ref_format, &_tmp_out_medium);
        let _tmp2_format = dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC(hndl: _tmp_ref_format);
            format = _tmp2_format;
        let _tmp2_medium = dotnet.System.Runtime.InteropServices.ComTypes.STGMEDIUM(hndl: _tmp_out_medium);
            medium = _tmp2_medium;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDataHere(ref System.Runtime.InteropServices.ComTypes.FORMATETC, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)
    /**
    Obtains data from a source data object. This method, which is called by a data consumer, differs from the  method in that the caller must allocate and free the specified storage medium.

    - Parameter format: A pointer to a  structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in , and only the following  values are valid: , , , or .
    - Parameter medium: A , passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by . The caller must also free the medium. The implementation of this method must always supply a value of  for the  member of the  structure that this parameter points to.
    */
    open func GetDataHere(format : inout dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC, medium : inout dotnet.System.Runtime.InteropServices.ComTypes.STGMEDIUM) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_format = format.get_handle();
            var _tmp_ref_medium = medium.get_handle();
        System_Runtime_InteropServices_ComTypes_IDataObject_void__GetDataHere_0__2__refFORMATETC_refSTGMEDIUM(&__thrown, self.get_handle(), &_tmp_ref_format, &_tmp_ref_medium);
        let _tmp2_format = dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC(hndl: _tmp_ref_format);
            format = _tmp2_format;
        let _tmp2_medium = dotnet.System.Runtime.InteropServices.ComTypes.STGMEDIUM(hndl: _tmp_ref_medium);
            medium = _tmp2_medium;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 QueryGetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)
    /**
    Determines whether the data object is capable of rendering the data described in the  structure. Objects attempting a paste or drop operation can call this method before calling  to get an indication of whether the operation may be successful.

    - Parameter format: A pointer to a  structure, passed by reference, that defines the format, medium, and target device to use for the query.
    - Returns: This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  
  
  Value Description S_OK A subsequent call to  would probably be successful. DV_E_LINDEX An invalid value for ; currently, only -1 is supported. DV_E_FORMATETC An invalid value for the  parameter. DV_E_TYMED An invalid  value. DV_E_DVASPECT An invalid  value. OLE_E_NOTRUNNING The application is not running.

    */
    open func QueryGetData(format : inout dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_format = format.get_handle();
        let __return = System_Runtime_InteropServices_ComTypes_IDataObject_i32__QueryGetData_0__1__refFORMATETC(&__thrown, self.get_handle(), &_tmp_ref_format);
        let _tmp2_format = dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC(hndl: _tmp_ref_format);
            format = _tmp2_format;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void SetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM, bool)
// docid: M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)
    /**
    Transfers data to the object that implements this method. This method is called by an object that contains a data source.

    - Parameter formatIn: A  structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.
    - Parameter medium: A  structure, passed by reference, that defines the storage medium in which the data is being passed.
    - Parameter release: 
         to specify that the data object called, which implements , owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the  function.  to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.
    */
    open func SetData(formatIn : inout dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC, medium : inout dotnet.System.Runtime.InteropServices.ComTypes.STGMEDIUM, release : Bool) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_formatIn = formatIn.get_handle();
            var _tmp_ref_medium = medium.get_handle();
        System_Runtime_InteropServices_ComTypes_IDataObject_void__SetData_0__3__refFORMATETC_refSTGMEDIUM_bool(&__thrown, self.get_handle(), &_tmp_ref_formatIn, &_tmp_ref_medium, Swift.Int32(release ? 1 : 0));
        let _tmp2_formatIn = dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC(hndl: _tmp_ref_formatIn);
            formatIn = _tmp2_formatIn;
        let _tmp2_medium = dotnet.System.Runtime.InteropServices.ComTypes.STGMEDIUM(hndl: _tmp_ref_medium);
            medium = _tmp2_medium;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDataObject


// type: System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints
    /**
    Manages the definition of the  interface.

    */
open class IEnumConnectionPoints
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IEnumConnectionPoints
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IEnumConnectionPoints_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Clone(ref System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)
    /**
    Creates a new enumerator that contains the same enumeration state as the current one.

    - Parameter ppenum: When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.
    */
    open func Clone(ppenum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppenum = ppenum.get_handle();
        System_Runtime_InteropServices_ComTypes_IEnumConnectionPoints_void__Clone_0__1__outIEnumConnectionPoints(&__thrown, self.get_handle(), &_tmp_out_ppenum);
        let _tmp2_ppenum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints(hndl: _tmp_out_ppenum);
            ppenum = _tmp2_ppenum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Next(System.Int32, System.Runtime.InteropServices.ComTypes.IConnectionPoint[], System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)
    /**
    Retrieves a specified number of items in the enumeration sequence.

    - Parameter celt: The number of  references to return in .
    - Parameter rgelt: When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.
    - Parameter pceltFetched: When this method returns, contains a reference to the actual number of connections enumerated in .
    - Returns: 
         if the  parameter equals the  parameter; otherwise, .

    */
    open func Next(celt : Swift.Int32, rgelt : dotnet.System_Arr<dotnet.System.Runtime.InteropServices.ComTypes.IConnectionPoint>, pceltFetched : dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumConnectionPoints_i32__Next_0__3__i32_IConnectionPointArray_IntPtr(&__thrown, self.get_handle(), celt, rgelt.get_handle(), pceltFetched.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Reset()
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset
    /**
    Resets the enumeration sequence to the beginning.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IEnumConnectionPoints_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Skip(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)
    /**
    Skips a specified number of items in the enumeration sequence.

    - Parameter celt: The number of elements to skip in the enumeration.
    - Returns: 
         if the number of elements skipped equals the  parameter; otherwise, .

    */
    open func Skip(celt : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumConnectionPoints_i32__Skip_0__1__i32(&__thrown, self.get_handle(), celt);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IEnumConnectionPoints


// type: System.Runtime.InteropServices.ComTypes.IEnumConnections
    /**
    Manages the definition of the  interface.

    */
open class IEnumConnections
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IEnumConnections
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IEnumConnections_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Clone(ref System.Runtime.InteropServices.ComTypes.IEnumConnections)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)
    /**
    Creates a new enumerator that contains the same enumeration state as the current one.

    - Parameter ppenum: When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.
    */
    open func Clone(ppenum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumConnections) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppenum = ppenum.get_handle();
        System_Runtime_InteropServices_ComTypes_IEnumConnections_void__Clone_0__1__outIEnumConnections(&__thrown, self.get_handle(), &_tmp_out_ppenum);
        let _tmp2_ppenum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumConnections(hndl: _tmp_out_ppenum);
            ppenum = _tmp2_ppenum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Next(System.Int32, System.Runtime.InteropServices.ComTypes.CONNECTDATA[], System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)
    /**
    Retrieves a specified number of items in the enumeration sequence.

    - Parameter celt: The number of  structures to return in .
    - Parameter rgelt: When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.
    - Parameter pceltFetched: When this method returns, contains a reference to the actual number of connections enumerated in .
    - Returns: 
         if the  parameter equals the  parameter; otherwise, .

    */
    open func Next(celt : Swift.Int32, rgelt : dotnet.System_Arr<dotnet.System.Runtime.InteropServices.ComTypes.CONNECTDATA>, pceltFetched : dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumConnections_i32__Next_0__3__i32_CONNECTDATAArray_IntPtr(&__thrown, self.get_handle(), celt, rgelt.get_handle(), pceltFetched.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Reset()
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset
    /**
    Resets the enumeration sequence to the beginning.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IEnumConnections_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Skip(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)
    /**
    Skips a specified number of items in the enumeration sequence.

    - Parameter celt: The number of elements to skip in the enumeration.
    - Returns: 
         if the number of elements skipped equals the  parameter; otherwise, .

    */
    open func Skip(celt : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumConnections_i32__Skip_0__1__i32(&__thrown, self.get_handle(), celt);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IEnumConnections


// type: System.Runtime.InteropServices.ComTypes.IEnumFORMATETC
    /**
    Provides the managed definition of the  interface.

    */
open class IEnumFORMATETC
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IEnumFORMATETC
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IEnumFORMATETC_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Clone(ref System.Runtime.InteropServices.ComTypes.IEnumFORMATETC)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)
    /**
    Creates a new enumerator that contains the same enumeration state as the current enumerator.

    - Parameter newEnum: When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.
    */
    open func Clone(newEnum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumFORMATETC) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_newEnum = newEnum.get_handle();
        System_Runtime_InteropServices_ComTypes_IEnumFORMATETC_void__Clone_0__1__outIEnumFORMATETC(&__thrown, self.get_handle(), &_tmp_out_newEnum);
        let _tmp2_newEnum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumFORMATETC(hndl: _tmp_out_newEnum);
            newEnum = _tmp2_newEnum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Next(System.Int32, System.Runtime.InteropServices.ComTypes.FORMATETC[], System.Int32[])
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])
    /**
    Retrieves a specified number of items in the enumeration sequence.

    - Parameter celt: The number of  references to return in .
    - Parameter rgelt: When this method returns, contains a reference to the enumerated  references. This parameter is passed uninitialized.
    - Parameter pceltFetched: When this method returns, contains a reference to the actual number of references enumerated in . This parameter is passed uninitialized.
    - Returns: 
         if the  parameter equals the  parameter; otherwise, .

    */
    open func Next(celt : Swift.Int32, rgelt : dotnet.System_Arr<dotnet.System.Runtime.InteropServices.ComTypes.FORMATETC>, pceltFetched : dotnet.System_Arr<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumFORMATETC_i32__Next_0__3__i32_FORMATETCArray_i32Array(&__thrown, self.get_handle(), celt, rgelt.get_handle(), pceltFetched.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Reset()
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset
    /**
    Resets the enumeration sequence to the beginning.

    - Returns: An HRESULT with the value .

    */
    open func Reset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumFORMATETC_i32__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Skip(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)
    /**
    Skips a specified number of items in the enumeration sequence.

    - Parameter celt: The number of elements to skip in the enumeration.
    - Returns: 
         if the number of elements skipped equals the  parameter; otherwise, .

    */
    open func Skip(celt : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumFORMATETC_i32__Skip_0__1__i32(&__thrown, self.get_handle(), celt);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IEnumFORMATETC


// type: System.Runtime.InteropServices.ComTypes.IEnumMoniker
    /**
    Manages the definition of the  interface.

    */
open class IEnumMoniker
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IEnumMoniker
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IEnumMoniker_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Clone(ref System.Runtime.InteropServices.ComTypes.IEnumMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)
    /**
    Creates a new enumerator that contains the same enumeration state as the current one.

    - Parameter ppenum: When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.
    */
    open func Clone(ppenum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppenum = ppenum.get_handle();
        System_Runtime_InteropServices_ComTypes_IEnumMoniker_void__Clone_0__1__outIEnumMoniker(&__thrown, self.get_handle(), &_tmp_out_ppenum);
        let _tmp2_ppenum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumMoniker(hndl: _tmp_out_ppenum);
            ppenum = _tmp2_ppenum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Next(System.Int32, System.Runtime.InteropServices.ComTypes.IMoniker[], System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)
    /**
    Retrieves a specified number of items in the enumeration sequence.

    - Parameter celt: The number of monikers to return in .
    - Parameter rgelt: When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.
    - Parameter pceltFetched: When this method returns, contains a reference to the actual number of monikers enumerated in .
    - Returns: 
         if the  parameter equals the  parameter; otherwise, .

    */
    open func Next(celt : Swift.Int32, rgelt : dotnet.System_Arr<dotnet.System.Runtime.InteropServices.ComTypes.IMoniker>, pceltFetched : dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumMoniker_i32__Next_0__3__i32_IMonikerArray_IntPtr(&__thrown, self.get_handle(), celt, rgelt.get_handle(), pceltFetched.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Reset()
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset
    /**
    Resets the enumeration sequence to the beginning.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IEnumMoniker_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Skip(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)
    /**
    Skips a specified number of items in the enumeration sequence.

    - Parameter celt: The number of elements to skip in the enumeration.
    - Returns: 
         if the number of elements skipped equals the  parameter; otherwise, .

    */
    open func Skip(celt : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumMoniker_i32__Skip_0__1__i32(&__thrown, self.get_handle(), celt);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IEnumMoniker


// type: System.Runtime.InteropServices.ComTypes.IEnumSTATDATA
    /**
    Provides the managed definition of the  interface.

    */
open class IEnumSTATDATA
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IEnumSTATDATA
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IEnumSTATDATA_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Clone(ref System.Runtime.InteropServices.ComTypes.IEnumSTATDATA)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)
    /**
    Creates a new enumerator that contains the same enumeration state as the current enumerator.

    - Parameter newEnum: When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.
    */
    open func Clone(newEnum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumSTATDATA) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_newEnum = newEnum.get_handle();
        System_Runtime_InteropServices_ComTypes_IEnumSTATDATA_void__Clone_0__1__outIEnumSTATDATA(&__thrown, self.get_handle(), &_tmp_out_newEnum);
        let _tmp2_newEnum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumSTATDATA(hndl: _tmp_out_newEnum);
            newEnum = _tmp2_newEnum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Next(System.Int32, System.Runtime.InteropServices.ComTypes.STATDATA[], System.Int32[])
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])
    /**
    Retrieves a specified number of items in the enumeration sequence.

    - Parameter celt: The number of  references to return in .
    - Parameter rgelt: When this method returns, contains a reference to the enumerated  references. This parameter is passed uninitialized.
    - Parameter pceltFetched: When this parameter returns, contains a reference to the actual number of references enumerated in . This parameter is passed uninitialized.
    - Returns: 
         if the  parameter equals the  parameter; otherwise, .

    */
    open func Next(celt : Swift.Int32, rgelt : dotnet.System_Arr<dotnet.System.Runtime.InteropServices.ComTypes.STATDATA>, pceltFetched : dotnet.System_Arr<Swift.Int32>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumSTATDATA_i32__Next_0__3__i32_STATDATAArray_i32Array(&__thrown, self.get_handle(), celt, rgelt.get_handle(), pceltFetched.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Reset()
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset
    /**
    Resets the enumeration sequence to the beginning.

    - Returns: An HRESULT with the value .

    */
    open func Reset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumSTATDATA_i32__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Skip(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)
    /**
    Skips a specified number of items in the enumeration sequence.

    - Parameter celt: The number of elements to skip in the enumeration.
    - Returns: 
         if the number of elements skipped equals the  parameter; otherwise, .

    */
    open func Skip(celt : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumSTATDATA_i32__Skip_0__1__i32(&__thrown, self.get_handle(), celt);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IEnumSTATDATA


// type: System.Runtime.InteropServices.ComTypes.IEnumString
    /**
    Manages the definition of the  interface.

    */
open class IEnumString
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IEnumString
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IEnumString_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Clone(ref System.Runtime.InteropServices.ComTypes.IEnumString)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)
    /**
    Creates a new enumerator that contains the same enumeration state as the current one.

    - Parameter ppenum: When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.
    */
    open func Clone(ppenum : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumString) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppenum = ppenum.get_handle();
        System_Runtime_InteropServices_ComTypes_IEnumString_void__Clone_0__1__outIEnumString(&__thrown, self.get_handle(), &_tmp_out_ppenum);
        let _tmp2_ppenum = dotnet.System.Runtime.InteropServices.ComTypes.IEnumString(hndl: _tmp_out_ppenum);
            ppenum = _tmp2_ppenum;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Next(System.Int32, System.String[], System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)
    /**
    Retrieves a specified number of items in the enumeration sequence.

    - Parameter celt: The number of strings to return in .
    - Parameter rgelt: When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.
    - Parameter pceltFetched: When this method returns, contains a reference to the actual number of strings enumerated in .
    - Returns: 
         if the  parameter equals the  parameter; otherwise, .

    */
    open func Next(celt : Swift.Int32, rgelt : dotnet.System_Arr<dotnet.System.String>, pceltFetched : dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumString_i32__Next_0__3__i32_StringArray_IntPtr(&__thrown, self.get_handle(), celt, rgelt.get_handle(), pceltFetched.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Reset()
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset
    /**
    Resets the enumeration sequence to the beginning.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IEnumString_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Skip(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)
    /**
    Skips a specified number of items in the enumeration sequence.

    - Parameter celt: The number of elements to skip in the enumeration.
    - Returns: 
         if the number of elements skipped equals the  parameter; otherwise, .

    */
    open func Skip(celt : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumString_i32__Skip_0__1__i32(&__thrown, self.get_handle(), celt);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IEnumString


// type: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
    /**
    Manages the definition of the  interface.

    */
open class IEnumVARIANT
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IEnumVARIANT
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IEnumVARIANT_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Runtime.InteropServices.ComTypes.IEnumVARIANT Clone()
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone
    /**
    Creates a new enumerator that contains the same enumeration state as the current one.

    - Returns: An  reference to the newly created enumerator.

    */
    open func Clone() throws -> dotnet.System.Runtime.InteropServices.ComTypes.IEnumVARIANT {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumVARIANT_IEnumVARIANT__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.InteropServices.ComTypes.IEnumVARIANT(hndl : __return);
        }
    }
    // System.Int32 Next(System.Int32, System.Object[], System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)
    /**
    Retrieves a specified number of items in the enumeration sequence.

    - Parameter celt: The number of elements to return in rgelt.
    - Parameter rgVar: When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.
    - Parameter pceltFetched: When this method returns, contains a reference to the actual number of elements enumerated in rgelt.
    - Returns: 
         if the  parameter equals the  parameter; otherwise, .

    */
    open func Next(celt : Swift.Int32, rgVar : dotnet.System_Arr<dotnet.System.Object>, pceltFetched : dotnet.System.IntPtr) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumVARIANT_i32__Next_0__3__i32_ObjectArray_IntPtr(&__thrown, self.get_handle(), celt, rgVar.get_handle(), pceltFetched.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Reset()
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset
    /**
    Resets the enumeration sequence to the beginning.

    - Returns: An HRESULT with the value .

    */
    open func Reset() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumVARIANT_i32__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 Skip(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)
    /**
    Skips a specified number of items in the enumeration sequence.

    - Parameter celt: The number of elements to skip in the enumeration.
    - Returns: 
         if the number of elements skipped equals  parameter; otherwise, .

    */
    open func Skip(celt : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IEnumVARIANT_i32__Skip_0__1__i32(&__thrown, self.get_handle(), celt);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // IEnumVARIANT


// type: System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS
    /**
    Defines the attributes of an implemented or inherited interface of a type.

    */
public struct IMPLTYPEFLAGS : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IMPLTYPEFLAGS_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS IMPLTYPEFLAG_FDEFAULT
    /**
    The interface or dispinterface represents the default for the source or sink.

    */
    public static var IMPLTYPEFLAG_FDEFAULT : dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_IMPLTYPEFLAGS_get_IMPLTYPEFLAG_FDEFAULT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS IMPLTYPEFLAG_FSOURCE
    /**
    This member of a coclass is called rather than implemented.

    */
    public static var IMPLTYPEFLAG_FSOURCE : dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_IMPLTYPEFLAGS_get_IMPLTYPEFLAG_FSOURCE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS IMPLTYPEFLAG_FRESTRICTED
    /**
    The member should not be displayed or programmable by users.

    */
    public static var IMPLTYPEFLAG_FRESTRICTED : dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_IMPLTYPEFLAGS_get_IMPLTYPEFLAG_FRESTRICTED());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS IMPLTYPEFLAG_FDEFAULTVTABLE
    /**
    Sinks receive events through the virtual function table (VTBL).

    */
    public static var IMPLTYPEFLAG_FDEFAULTVTABLE : dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_IMPLTYPEFLAGS_get_IMPLTYPEFLAG_FDEFAULTVTABLE());
            return __return;
        }
    }
} // IMPLTYPEFLAGS


// type: System.Runtime.InteropServices.ComTypes.IMoniker
    /**
    Provides the managed definition of the  interface, with COM functionality from  and .

    */
open class IMoniker
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IMoniker
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IMoniker_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx, System.Runtime.InteropServices.ComTypes.IMoniker, ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)
    /**
    Uses the moniker to bind to the object that it identifies.

    - Parameter pbc: A reference to the  interface on the bind context object used in this binding operation.
    - Parameter pmkToLeft: A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.
    - Parameter riidResult: The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.
    - Parameter ppvResult: When this method returns, contains a reference to the interface requested by . This parameter is passed uninitialized.
    */
    open func BindToObject(pbc : dotnet.System.Runtime.InteropServices.ComTypes.IBindCtx, pmkToLeft : Optional<dotnet.System.Runtime.InteropServices.ComTypes.IMoniker>, riidResult : inout dotnet.System.Guid, ppvResult : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_riidResult = riidResult.get_handle();
            var _tmp_out_ppvResult = ppvResult.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__BindToObject_0__4__IBindCtx_IMoniker_refGuid_outObject(&__thrown, self.get_handle(), pbc.get_handle(), pmkToLeft?.get_handle() ?? nil, &_tmp_ref_riidResult, &_tmp_out_ppvResult);
        let _tmp2_riidResult = dotnet.System.Guid(hndl: _tmp_ref_riidResult);
            riidResult = _tmp2_riidResult;
        let _tmp2_ppvResult = dotnet.System.Object(hndl: _tmp_out_ppvResult);
            ppvResult = _tmp2_ppvResult;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx, System.Runtime.InteropServices.ComTypes.IMoniker, ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)
    /**
    Retrieves an interface pointer to the storage that contains the object identified by the moniker.

    - Parameter pbc: A reference to the  interface on the bind context object used during this binding operation.
    - Parameter pmkToLeft: A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.
    - Parameter riid: The interface identifier (IID) of the storage interface requested.
    - Parameter ppvObj: When this method returns, contains a reference to the interface requested by . This parameter is passed uninitialized.
    */
    open func BindToStorage(pbc : dotnet.System.Runtime.InteropServices.ComTypes.IBindCtx, pmkToLeft : Optional<dotnet.System.Runtime.InteropServices.ComTypes.IMoniker>, riid : inout dotnet.System.Guid, ppvObj : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_riid = riid.get_handle();
            var _tmp_out_ppvObj = ppvObj.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__BindToStorage_0__4__IBindCtx_IMoniker_refGuid_outObject(&__thrown, self.get_handle(), pbc.get_handle(), pmkToLeft?.get_handle() ?? nil, &_tmp_ref_riid, &_tmp_out_ppvObj);
        let _tmp2_riid = dotnet.System.Guid(hndl: _tmp_ref_riid);
            riid = _tmp2_riid;
        let _tmp2_ppvObj = dotnet.System.Object(hndl: _tmp_out_ppvObj);
            ppvObj = _tmp2_ppvObj;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker, ref System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)
    /**
    Creates a new moniker based on the common prefix that this moniker shares with another moniker.

    - Parameter pmkOther: A reference to the  interface on another moniker to compare with the current moniker for a common prefix.
    - Parameter ppmkPrefix: When this method returns, contains the moniker that is the common prefix of the current moniker and . This parameter is passed uninitialized.
    */
    open func CommonPrefixWith(pmkOther : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker, ppmkPrefix : inout dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppmkPrefix = ppmkPrefix.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__CommonPrefixWith_0__2__IMoniker_outIMoniker(&__thrown, self.get_handle(), pmkOther.get_handle(), &_tmp_out_ppmkPrefix);
        let _tmp2_ppmkPrefix = dotnet.System.Runtime.InteropServices.ComTypes.IMoniker(hndl: _tmp_out_ppmkPrefix);
            ppmkPrefix = _tmp2_ppmkPrefix;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker, bool, ref System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)
    /**
    Combines the current moniker with another moniker, creating a new composite moniker.

    - Parameter pmkRight: A reference to the  interface on a moniker to append to the end of the current moniker.
    - Parameter fOnlyIfNotGeneric: 
         to indicate that the caller requires a nongeneric composition. The operation proceeds only if  is a moniker class that the current moniker can combine with in some way other than forming a generic composite.  to indicate that the method can create a generic composite if necessary.
    - Parameter ppmkComposite: When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.
    */
    open func ComposeWith(pmkRight : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker, fOnlyIfNotGeneric : Bool, ppmkComposite : inout dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppmkComposite = ppmkComposite.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__ComposeWith_0__3__IMoniker_bool_outIMoniker(&__thrown, self.get_handle(), pmkRight.get_handle(), Swift.Int32(fOnlyIfNotGeneric ? 1 : 0), &_tmp_out_ppmkComposite);
        let _tmp2_ppmkComposite = dotnet.System.Runtime.InteropServices.ComTypes.IMoniker(hndl: _tmp_out_ppmkComposite);
            ppmkComposite = _tmp2_ppmkComposite;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Enum(bool, ref System.Runtime.InteropServices.ComTypes.IEnumMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)
    /**
    Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.

    - Parameter fForward: 
         to enumerate the monikers from left to right.  to enumerate from right to left.
    - Parameter ppenumMoniker: When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.
    */
    open func Enum(fForward : Bool, ppenumMoniker : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppenumMoniker = ppenumMoniker.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__Enum_0__2__bool_outIEnumMoniker(&__thrown, self.get_handle(), Swift.Int32(fForward ? 1 : 0), &_tmp_out_ppenumMoniker);
        let _tmp2_ppenumMoniker = dotnet.System.Runtime.InteropServices.ComTypes.IEnumMoniker(hndl: _tmp_out_ppenumMoniker);
            ppenumMoniker = _tmp2_ppenumMoniker;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetClassID(ref System.Guid)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)
    /**
    Retrieves the class identifier (CLSID) of an object.

    - Parameter pClassID: When this method returns, contains the CLSID. This parameter is passed uninitialized.
    */
    open func GetClassID(pClassID : inout dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pClassID = pClassID.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__GetClassID_0__1__outGuid(&__thrown, self.get_handle(), &_tmp_out_pClassID);
        let _tmp2_pClassID = dotnet.System.Guid(hndl: _tmp_out_pClassID);
            pClassID = _tmp2_pClassID;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx, System.Runtime.InteropServices.ComTypes.IMoniker, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)
    /**
    Gets the display name, which is a user-readable representation of the current moniker.

    - Parameter pbc: A reference to the bind context to use in this operation.
    - Parameter pmkToLeft: A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.
    - Parameter ppszDisplayName: When this method returns, contains the display name string. This parameter is passed uninitialized.
    */
    open func GetDisplayName(pbc : dotnet.System.Runtime.InteropServices.ComTypes.IBindCtx, pmkToLeft : Optional<dotnet.System.Runtime.InteropServices.ComTypes.IMoniker>, ppszDisplayName : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppszDisplayName = ppszDisplayName.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__GetDisplayName_0__3__IBindCtx_IMoniker_outString(&__thrown, self.get_handle(), pbc.get_handle(), pmkToLeft?.get_handle() ?? nil, &_tmp_out_ppszDisplayName);
        let _tmp2_ppszDisplayName = dotnet.System.String(hndl: _tmp_out_ppszDisplayName);
            ppszDisplayName = _tmp2_ppszDisplayName;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetSizeMax(ref System.Int64)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)
    /**
    Returns the size, in bytes, of the stream needed to save the object.

    - Parameter pcbSize: When this method returns, contains a  value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.
    */
    open func GetSizeMax(pcbSize : inout Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pcbSize = pcbSize;
        System_Runtime_InteropServices_ComTypes_IMoniker_void__GetSizeMax_0__1__outi64(&__thrown, self.get_handle(), &_tmp_out_pcbSize);
        let _tmp2_pcbSize = _tmp_out_pcbSize;
            pcbSize = _tmp2_pcbSize;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx, System.Runtime.InteropServices.ComTypes.IMoniker, ref System.Runtime.InteropServices.ComTypes.FILETIME)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)
    /**
    Provides a number representing the time that the object identified by the current moniker was last changed.

    - Parameter pbc: A reference to the bind context to use in this binding operation.
    - Parameter pmkToLeft: A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.
    - Parameter pFileTime: When this method returns, contains the time of the last change. This parameter is passed uninitialized.
    */
    open func GetTimeOfLastChange(pbc : dotnet.System.Runtime.InteropServices.ComTypes.IBindCtx, pmkToLeft : Optional<dotnet.System.Runtime.InteropServices.ComTypes.IMoniker>, pFileTime : inout dotnet.System.Runtime.InteropServices.ComTypes.FILETIME) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pFileTime = pFileTime.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__GetTimeOfLastChange_0__3__IBindCtx_IMoniker_outFILETIME(&__thrown, self.get_handle(), pbc.get_handle(), pmkToLeft?.get_handle() ?? nil, &_tmp_out_pFileTime);
        let _tmp2_pFileTime = dotnet.System.Runtime.InteropServices.ComTypes.FILETIME(hndl: _tmp_out_pFileTime);
            pFileTime = _tmp2_pFileTime;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Hash(ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)
    /**
    Calculates a 32-bit integer using the internal state of the moniker.

    - Parameter pdwHash: When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.
    */
    open func Hash(pdwHash : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pdwHash = pdwHash;
        System_Runtime_InteropServices_ComTypes_IMoniker_void__Hash_0__1__outi32(&__thrown, self.get_handle(), &_tmp_out_pdwHash);
        let _tmp2_pdwHash = _tmp_out_pdwHash;
            pdwHash = _tmp2_pdwHash;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Inverse(ref System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)
    /**
    Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.

    - Parameter ppmk: When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.
    */
    open func Inverse(ppmk : inout dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppmk = ppmk.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__Inverse_0__1__outIMoniker(&__thrown, self.get_handle(), &_tmp_out_ppmk);
        let _tmp2_ppmk = dotnet.System.Runtime.InteropServices.ComTypes.IMoniker(hndl: _tmp_out_ppmk);
            ppmk = _tmp2_ppmk;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IsDirty()
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty
    /**
    Checks the object for changes since it was last saved.

    - Returns: An  value if the object has changed; otherwise, an  value.

    */
    open func IsDirty() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IMoniker_i32__IsDirty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)
    /**
    Compares the current moniker with a specified moniker and indicates whether they are identical.

    - Parameter pmkOtherMoniker: A reference to the moniker to use for comparison.
    - Returns: An  value if the monikers are identical; otherwise, an  value.

    */
    open func IsEqual(pmkOtherMoniker : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IMoniker_i32__IsEqual_0__1__IMoniker(&__thrown, self.get_handle(), pmkOtherMoniker.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx, System.Runtime.InteropServices.ComTypes.IMoniker, System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)
    /**
    Determines whether the object that is identified by the current moniker is currently loaded and running.

    - Parameter pbc: A reference to the bind context to use in this binding operation.
    - Parameter pmkToLeft: A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.
    - Parameter pmkNewlyRunning: A reference to the moniker most recently added to the Running Object Table (ROT).
    - Returns: An  value if the moniker is running; an  value if the moniker is not running; or an  value.

    */
    open func IsRunning(pbc : dotnet.System.Runtime.InteropServices.ComTypes.IBindCtx, pmkToLeft : Optional<dotnet.System.Runtime.InteropServices.ComTypes.IMoniker>, pmkNewlyRunning : Optional<dotnet.System.Runtime.InteropServices.ComTypes.IMoniker>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IMoniker_i32__IsRunning_0__3__IBindCtx_IMoniker_IMoniker(&__thrown, self.get_handle(), pbc.get_handle(), pmkToLeft?.get_handle() ?? nil, pmkNewlyRunning?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IsSystemMoniker(ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)
    /**
    Indicates whether this moniker is of one of the system-supplied moniker classes.

    - Parameter pdwMksys: When this method returns, contains a pointer to an integer that is one of the values from the  enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.
    - Returns: An  value if the moniker is a system moniker; otherwise, an  value.

    */
    open func IsSystemMoniker(pdwMksys : inout Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pdwMksys = pdwMksys;
        let __return = System_Runtime_InteropServices_ComTypes_IMoniker_i32__IsSystemMoniker_0__1__outi32(&__thrown, self.get_handle(), &_tmp_out_pdwMksys);
        let _tmp2_pdwMksys = _tmp_out_pdwMksys;
            pdwMksys = _tmp2_pdwMksys;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Load(System.Runtime.InteropServices.ComTypes.IStream)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)
    /**
    Initializes an object from the stream where it was previously saved.

    - Parameter pStm: The stream that the object is loaded from.
    */
    open func Load(pStm : dotnet.System.Runtime.InteropServices.ComTypes.IStream) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IMoniker_void__Load_0__1__IStream(&__thrown, self.get_handle(), pStm.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx, System.Runtime.InteropServices.ComTypes.IMoniker, System.String, ref System.Int32, ref System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)
    /**
    Reads as many characters of the specified display name as the  understands and builds a moniker corresponding to the portion read.

    - Parameter pbc: A reference to the bind context to use in this binding operation.
    - Parameter pmkToLeft: A reference to the moniker that has been built from the display name up to this point.
    - Parameter pszDisplayName: A reference to the string containing the remaining display name to parse.
    - Parameter pchEaten: When this method returns, contains the number of characters that were consumed in parsing . This parameter is passed uninitialized.
    - Parameter ppmkOut: When this method returns, contains a reference to the moniker that was built from . This parameter is passed uninitialized.
    */
    open func ParseDisplayName(pbc : dotnet.System.Runtime.InteropServices.ComTypes.IBindCtx, pmkToLeft : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker, pszDisplayName : dotnet.System.String, pchEaten : inout Swift.Int32, ppmkOut : inout dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pchEaten = pchEaten;
            var _tmp_out_ppmkOut = ppmkOut.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__ParseDisplayName_0__5__IBindCtx_IMoniker_String_outi32_outIMoniker(&__thrown, self.get_handle(), pbc.get_handle(), pmkToLeft.get_handle(), pszDisplayName.get_handle(), &_tmp_out_pchEaten, &_tmp_out_ppmkOut);
        let _tmp2_pchEaten = _tmp_out_pchEaten;
            pchEaten = _tmp2_pchEaten;
        let _tmp2_ppmkOut = dotnet.System.Runtime.InteropServices.ComTypes.IMoniker(hndl: _tmp_out_ppmkOut);
            ppmkOut = _tmp2_ppmkOut;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx, System.Int32, ref System.Runtime.InteropServices.ComTypes.IMoniker, ref System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)
    /**
    Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.

    - Parameter pbc: A reference to the  interface on the bind context to use in this binding operation.
    - Parameter dwReduceHowFar: A value that specifies how far the current moniker should be reduced.
    - Parameter ppmkToLeft: A reference to the moniker to the left of the current moniker.
    - Parameter ppmkReduced: When this method returns, contains a reference to the reduced form of the current moniker, which can be  if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.
    */
    open func Reduce(pbc : dotnet.System.Runtime.InteropServices.ComTypes.IBindCtx, dwReduceHowFar : Swift.Int32, ppmkToLeft : inout dotnet.System.Runtime.InteropServices.ComTypes.IMoniker, ppmkReduced : inout dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_ppmkToLeft = ppmkToLeft.get_handle();
            var _tmp_out_ppmkReduced = ppmkReduced.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__Reduce_0__4__IBindCtx_i32_refIMoniker_outIMoniker(&__thrown, self.get_handle(), pbc.get_handle(), dwReduceHowFar, &_tmp_ref_ppmkToLeft, &_tmp_out_ppmkReduced);
        let _tmp2_ppmkToLeft = dotnet.System.Runtime.InteropServices.ComTypes.IMoniker(hndl: _tmp_ref_ppmkToLeft);
            ppmkToLeft = _tmp2_ppmkToLeft;
        let _tmp2_ppmkReduced = dotnet.System.Runtime.InteropServices.ComTypes.IMoniker(hndl: _tmp_out_ppmkReduced);
            ppmkReduced = _tmp2_ppmkReduced;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker, ref System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)
    /**
    Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.

    - Parameter pmkOther: A reference to the moniker to which a relative path should be taken.
    - Parameter ppmkRelPath: When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.
    */
    open func RelativePathTo(pmkOther : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker, ppmkRelPath : inout dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppmkRelPath = ppmkRelPath.get_handle();
        System_Runtime_InteropServices_ComTypes_IMoniker_void__RelativePathTo_0__2__IMoniker_outIMoniker(&__thrown, self.get_handle(), pmkOther.get_handle(), &_tmp_out_ppmkRelPath);
        let _tmp2_ppmkRelPath = dotnet.System.Runtime.InteropServices.ComTypes.IMoniker(hndl: _tmp_out_ppmkRelPath);
            ppmkRelPath = _tmp2_ppmkRelPath;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.Runtime.InteropServices.ComTypes.IStream, bool)
// docid: M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)
    /**
    Saves an object to the specified stream.

    - Parameter pStm: The stream to which the object is saved.
    - Parameter fClearDirty: 
         to clear the modified flag after the save is complete; otherwise 
    */
    open func Save(pStm : dotnet.System.Runtime.InteropServices.ComTypes.IStream, fClearDirty : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IMoniker_void__Save_0__2__IStream_bool(&__thrown, self.get_handle(), pStm.get_handle(), Swift.Int32(fClearDirty ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IMoniker


// type: System.Runtime.InteropServices.ComTypes.INVOKEKIND
    /**
    Specifies how to invoke a function by .

    */
public struct INVOKEKIND : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_INVOKEKIND_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.INVOKEKIND INVOKE_FUNC
    /**
    The member is called using a normal function invocation syntax.

    */
    public static var INVOKE_FUNC : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND(val: System_Runtime_InteropServices_ComTypes_INVOKEKIND_get_INVOKE_FUNC());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.INVOKEKIND INVOKE_PROPERTYGET
    /**
    The function is invoked using a normal property access syntax.

    */
    public static var INVOKE_PROPERTYGET : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND(val: System_Runtime_InteropServices_ComTypes_INVOKEKIND_get_INVOKE_PROPERTYGET());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.INVOKEKIND INVOKE_PROPERTYPUT
    /**
    The function is invoked using a property value assignment syntax.

    */
    public static var INVOKE_PROPERTYPUT : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND(val: System_Runtime_InteropServices_ComTypes_INVOKEKIND_get_INVOKE_PROPERTYPUT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.INVOKEKIND INVOKE_PROPERTYPUTREF
    /**
    The function is invoked using a property reference assignment syntax.

    */
    public static var INVOKE_PROPERTYPUTREF : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND(val: System_Runtime_InteropServices_ComTypes_INVOKEKIND_get_INVOKE_PROPERTYPUTREF());
            return __return;
        }
    }
} // INVOKEKIND


// type: System.Runtime.InteropServices.ComTypes.IPersistFile
    /**
    Provides the managed definition of the  interface, with functionality from .

    */
open class IPersistFile
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IPersistFile
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IPersistFile_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void GetClassID(ref System.Guid)
// docid: M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)
    /**
    Retrieves the class identifier (CLSID) of an object.

    - Parameter pClassID: When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.
    */
    open func GetClassID(pClassID : inout dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pClassID = pClassID.get_handle();
        System_Runtime_InteropServices_ComTypes_IPersistFile_void__GetClassID_0__1__outGuid(&__thrown, self.get_handle(), &_tmp_out_pClassID);
        let _tmp2_pClassID = dotnet.System.Guid(hndl: _tmp_out_pClassID);
            pClassID = _tmp2_pClassID;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetCurFile(ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)
    /**
    Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.

    - Parameter ppszFileName: When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as (ASTERISK).txt). This parameter is passed uninitialized.
    */
    open func GetCurFile(ppszFileName : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppszFileName = ppszFileName.get_handle();
        System_Runtime_InteropServices_ComTypes_IPersistFile_void__GetCurFile_0__1__outString(&__thrown, self.get_handle(), &_tmp_out_ppszFileName);
        let _tmp2_ppszFileName = dotnet.System.String(hndl: _tmp_out_ppszFileName);
            ppszFileName = _tmp2_ppszFileName;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IsDirty()
// docid: M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty
    /**
    Checks an object for changes since it was last saved to its current file.

    - Returns: 
         if the file has changed since it was last saved;  if the file has not changed since it was last saved.

    */
    open func IsDirty() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IPersistFile_i32__IsDirty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Load(System.String, System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)
    /**
    Opens the specified file and initializes an object from the file contents.

    - Parameter pszFileName: A zero-terminated string containing the absolute path of the file to open.
    - Parameter dwMode: A combination of values from the  enumeration to indicate the access mode in which to open .
    */
    open func Load(pszFileName : dotnet.System.String, dwMode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IPersistFile_void__Load_0__2__String_i32(&__thrown, self.get_handle(), pszFileName.get_handle(), dwMode);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.String, bool)
// docid: M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)
    /**
    Saves a copy of the object into the specified file.

    - Parameter pszFileName: A zero-terminated string containing the absolute path of the file to which the object is saved.
    - Parameter fRemember: 
         to used the  parameter as the current working file; otherwise .
    */
    open func Save(pszFileName : Optional<dotnet.System.String>, fRemember : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IPersistFile_void__Save_0__2__String_bool(&__thrown, self.get_handle(), pszFileName?.get_handle() ?? nil, Swift.Int32(fRemember ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SaveCompleted(System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)
    /**
    Notifies the object that it can write to its file.

    - Parameter pszFileName: The absolute path of the file where the object was previously saved.
    */
    open func SaveCompleted(pszFileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IPersistFile_void__SaveCompleted_0__1__String(&__thrown, self.get_handle(), pszFileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IPersistFile


// type: System.Runtime.InteropServices.ComTypes.IRunningObjectTable
    /**
    Provides the managed definition of the  interface.

    */
open class IRunningObjectTable
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IRunningObjectTable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IRunningObjectTable_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void EnumRunning(ref System.Runtime.InteropServices.ComTypes.IEnumMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)
    /**
    Enumerates the objects currently registered as running.

    - Parameter ppenumMoniker: When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.
    */
    open func EnumRunning(ppenumMoniker : inout dotnet.System.Runtime.InteropServices.ComTypes.IEnumMoniker) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppenumMoniker = ppenumMoniker.get_handle();
        System_Runtime_InteropServices_ComTypes_IRunningObjectTable_void__EnumRunning_0__1__outIEnumMoniker(&__thrown, self.get_handle(), &_tmp_out_ppenumMoniker);
        let _tmp2_ppenumMoniker = dotnet.System.Runtime.InteropServices.ComTypes.IEnumMoniker(hndl: _tmp_out_ppenumMoniker);
            ppenumMoniker = _tmp2_ppenumMoniker;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 GetObject(System.Runtime.InteropServices.ComTypes.IMoniker, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)
    /**
    Returns the registered object if the supplied object name is registered as running.

    - Parameter pmkObjectName: A reference to the moniker to search for in the Running Object Table (ROT).
    - Parameter ppunkObject: When this method returns, contains the requested running object. This parameter is passed uninitialized.
    - Returns: An  value that indicates the success or failure of the operation.

    */
    open func GetObject(pmkObjectName : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker, ppunkObject : inout dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppunkObject = ppunkObject.get_handle();
        let __return = System_Runtime_InteropServices_ComTypes_IRunningObjectTable_i32__GetObject_0__2__IMoniker_outObject(&__thrown, self.get_handle(), pmkObjectName.get_handle(), &_tmp_out_ppunkObject);
        let _tmp2_ppunkObject = dotnet.System.Object(hndl: _tmp_out_ppunkObject);
            ppunkObject = _tmp2_ppunkObject;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker, ref System.Runtime.InteropServices.ComTypes.FILETIME)
// docid: M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)
    /**
    Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.

    - Parameter pmkObjectName: A reference to the moniker to search for in the Running Object Table (ROT).
    - Parameter pfiletime: When this object returns, contains the objects last change time. This parameter is passed uninitialized.
    - Returns: An  value that indicates the success or failure of the operation.

    */
    open func GetTimeOfLastChange(pmkObjectName : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker, pfiletime : inout dotnet.System.Runtime.InteropServices.ComTypes.FILETIME) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pfiletime = pfiletime.get_handle();
        let __return = System_Runtime_InteropServices_ComTypes_IRunningObjectTable_i32__GetTimeOfLastChange_0__2__IMoniker_outFILETIME(&__thrown, self.get_handle(), pmkObjectName.get_handle(), &_tmp_out_pfiletime);
        let _tmp2_pfiletime = dotnet.System.Runtime.InteropServices.ComTypes.FILETIME(hndl: _tmp_out_pfiletime);
            pfiletime = _tmp2_pfiletime;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)
    /**
    Determines whether the specified moniker is currently registered in the Running Object Table (ROT).

    - Parameter pmkObjectName: A reference to the moniker to search for in the Running Object Table (ROT).
    - Returns: An  value that indicates the success or failure of the operation.

    */
    open func IsRunning(pmkObjectName : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IRunningObjectTable_i32__IsRunning_0__1__IMoniker(&__thrown, self.get_handle(), pmkObjectName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void NoteChangeTime(System.Int32, ref System.Runtime.InteropServices.ComTypes.FILETIME)
// docid: M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)
    /**
    Notes the time that a particular object changed so  can report an appropriate change time.

    - Parameter dwRegister: The Running Object Table (ROT) entry of the changed object.
    - Parameter pfiletime: A reference to the object's last change time.
    */
    open func NoteChangeTime(dwRegister : Swift.Int32, pfiletime : inout dotnet.System.Runtime.InteropServices.ComTypes.FILETIME) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_pfiletime = pfiletime.get_handle();
        System_Runtime_InteropServices_ComTypes_IRunningObjectTable_void__NoteChangeTime_0__2__i32_refFILETIME(&__thrown, self.get_handle(), dwRegister, &_tmp_ref_pfiletime);
        let _tmp2_pfiletime = dotnet.System.Runtime.InteropServices.ComTypes.FILETIME(hndl: _tmp_ref_pfiletime);
            pfiletime = _tmp2_pfiletime;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Register(System.Int32, System.Object, System.Runtime.InteropServices.ComTypes.IMoniker)
// docid: M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)
    /**
    Registers that the supplied object has entered the running state.

    - Parameter grfFlags: Specifies whether the Running Object Table's (ROT) reference to  is weak or strong, and controls access to the object through its entry in the ROT.
    - Parameter punkObject: A reference to the object being registered as running.
    - Parameter pmkObjectName: A reference to the moniker that identifies .
    - Returns: A value that can be used to identify this ROT entry in subsequent calls to  or .

    */
    open func Register(grfFlags : Swift.Int32, punkObject : dotnet.System.Object, pmkObjectName : dotnet.System.Runtime.InteropServices.ComTypes.IMoniker) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_IRunningObjectTable_i32__Register_0__3__i32_Object_IMoniker(&__thrown, self.get_handle(), grfFlags, punkObject.get_handle(), pmkObjectName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Revoke(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)
    /**
    Unregisters the specified object from the Running Object Table (ROT).

    - Parameter dwRegister: The Running Object Table (ROT) entry to revoke.
    */
    open func Revoke(dwRegister : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IRunningObjectTable_void__Revoke_0__1__i32(&__thrown, self.get_handle(), dwRegister);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IRunningObjectTable


// type: System.Runtime.InteropServices.ComTypes.IStream
    /**
    Provides the managed definition of the  interface, with  functionality.

    */
open class IStream
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_IStream
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_IStream_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Clone(ref System.Runtime.InteropServices.ComTypes.IStream)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)
    /**
    Creates a new stream object with its own seek pointer that references the same bytes as the original stream.

    - Parameter ppstm: When this method returns, contains the new stream object. This parameter is passed uninitialized.
    */
    open func Clone(ppstm : inout dotnet.System.Runtime.InteropServices.ComTypes.IStream) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppstm = ppstm.get_handle();
        System_Runtime_InteropServices_ComTypes_IStream_void__Clone_0__1__outIStream(&__thrown, self.get_handle(), &_tmp_out_ppstm);
        let _tmp2_ppstm = dotnet.System.Runtime.InteropServices.ComTypes.IStream(hndl: _tmp_out_ppstm);
            ppstm = _tmp2_ppstm;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Commit(System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)
    /**
    Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.

    - Parameter grfCommitFlags: A value that controls how the changes for the stream object are committed.
    */
    open func Commit(grfCommitFlags : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__Commit_0__1__i32(&__thrown, self.get_handle(), grfCommitFlags);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Runtime.InteropServices.ComTypes.IStream, System.Int64, System.IntPtr, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)
    /**
    Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.

    - Parameter pstm: A reference to the destination stream.
    - Parameter cb: The number of bytes to copy from the source stream.
    - Parameter pcbRead: On successful return, contains the actual number of bytes read from the source.
    - Parameter pcbWritten: On successful return, contains the actual number of bytes written to the destination.
    */
    open func CopyTo(pstm : dotnet.System.Runtime.InteropServices.ComTypes.IStream, cb : Swift.Int64, pcbRead : dotnet.System.IntPtr, pcbWritten : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__CopyTo_0__4__IStream_i64_IntPtr_IntPtr(&__thrown, self.get_handle(), pstm.get_handle(), cb, pcbRead.get_value(), pcbWritten.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LockRegion(System.Int64, System.Int64, System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)
    /**
    Restricts access to a specified range of bytes in the stream.

    - Parameter libOffset: The byte offset for the beginning of the range.
    - Parameter cb: The length of the range, in bytes, to restrict.
    - Parameter dwLockType: The requested restrictions on accessing the range.
    */
    open func LockRegion(libOffset : Swift.Int64, cb : Swift.Int64, dwLockType : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__LockRegion_0__3__i64_i64_i32(&__thrown, self.get_handle(), libOffset, cb, dwLockType);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Read(System.Byte[], System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)
    /**
    Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.

    - Parameter pv: When this method returns, contains the data read from the stream. This parameter is passed uninitialized.
    - Parameter cb: The number of bytes to read from the stream object.
    - Parameter pcbRead: A pointer to a  variable that receives the actual number of bytes read from the stream object.
    */
    open func Read(pv : dotnet.System_Arr<Swift.UInt8>, cb : Swift.Int32, pcbRead : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__Read_0__3__u8Array_i32_IntPtr(&__thrown, self.get_handle(), pv.get_handle(), cb, pcbRead.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Revert()
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.Revert
    /**
    Discards all changes that have been made to a transacted stream since the last  call.

    */
    open func Revert() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__Revert_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Seek(System.Int64, System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)
    /**
    Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.

    - Parameter dlibMove: The displacement to add to .
    - Parameter dwOrigin: The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.
    - Parameter plibNewPosition: On successful return, contains the offset of the seek pointer from the beginning of the stream.
    */
    open func Seek(dlibMove : Swift.Int64, dwOrigin : Swift.Int32, plibNewPosition : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__Seek_0__3__i64_i32_IntPtr(&__thrown, self.get_handle(), dlibMove, dwOrigin, plibNewPosition.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSize(System.Int64)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)
    /**
    Changes the size of the stream object.

    - Parameter libNewSize: The new size of the stream as a number of bytes.
    */
    open func SetSize(libNewSize : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__SetSize_0__1__i64(&__thrown, self.get_handle(), libNewSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Stat(ref System.Runtime.InteropServices.ComTypes.STATSTG, System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)
    /**
    Retrieves the  structure for this stream.

    - Parameter pstatstg: When this method returns, contains a  structure that describes this stream object. This parameter is passed uninitialized.
    - Parameter grfStatFlag: Members in the  structure that this method does not return, thus saving some memory allocation operations.
    */
    open func Stat(pstatstg : inout dotnet.System.Runtime.InteropServices.ComTypes.STATSTG, grfStatFlag : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pstatstg = pstatstg.get_handle();
        System_Runtime_InteropServices_ComTypes_IStream_void__Stat_0__2__outSTATSTG_i32(&__thrown, self.get_handle(), &_tmp_out_pstatstg, grfStatFlag);
        let _tmp2_pstatstg = dotnet.System.Runtime.InteropServices.ComTypes.STATSTG(hndl: _tmp_out_pstatstg);
            pstatstg = _tmp2_pstatstg;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UnlockRegion(System.Int64, System.Int64, System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)
    /**
    Removes the access restriction on a range of bytes previously restricted with the  method.

    - Parameter libOffset: The byte offset for the beginning of the range.
    - Parameter cb: The length, in bytes, of the range to restrict.
    - Parameter dwLockType: The access restrictions previously placed on the range.
    */
    open func UnlockRegion(libOffset : Swift.Int64, cb : Swift.Int64, dwLockType : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__UnlockRegion_0__3__i64_i64_i32(&__thrown, self.get_handle(), libOffset, cb, dwLockType);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Byte[], System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)
    /**
    Writes a specified number of bytes into the stream object starting at the current seek pointer.

    - Parameter pv: The buffer to write this stream to.
    - Parameter cb: The number of bytes to write to the stream.
    - Parameter pcbWritten: On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to , this method does not provide the actual number of bytes written.
    */
    open func Write(pv : dotnet.System_Arr<Swift.UInt8>, cb : Swift.Int32, pcbWritten : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_IStream_void__Write_0__3__u8Array_i32_IntPtr(&__thrown, self.get_handle(), pv.get_handle(), cb, pcbWritten.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IStream


// type: System.Runtime.InteropServices.ComTypes.ITypeComp
    /**
    Provides the managed definition of the  interface.

    */
open class ITypeComp
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_ITypeComp
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_ITypeComp_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Bind(System.String, System.Int32, System.Int16, ref System.Runtime.InteropServices.ComTypes.ITypeInfo, ref System.Runtime.InteropServices.ComTypes.DESCKIND, ref System.Runtime.InteropServices.ComTypes.BINDPTR)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)
    /**
    Maps a name to a member of a type, or binds global variables and functions contained in a type library.

    - Parameter szName: The name to bind.
    - Parameter lHashVal: A hash value for  computed by .
    - Parameter wFlags: A flags word containing one or more of the invoke flags defined in the  enumeration.
    - Parameter ppTInfo: When this method returns, contains a reference to the type description that contains the item to which it is bound, if a  or  was returned. This parameter is passed uninitialized.
    - Parameter pDescKind: When this method returns, contains a reference to a  enumerator that indicates whether the name bound-to is a , , or . This parameter is passed uninitialized.
    - Parameter pBindPtr: When this method returns, contains a reference to the bound-to , , or  interface. This parameter is passed uninitialized.
    */
    open func Bind(szName : dotnet.System.String, lHashVal : Swift.Int32, wFlags : Swift.Int16, ppTInfo : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo, pDescKind : inout dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND, pBindPtr : inout dotnet.System.Runtime.InteropServices.ComTypes.BINDPTR) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTInfo = ppTInfo.get_handle();
            var _tmp_out_pDescKind = pDescKind.get_value();
            var _tmp_out_pBindPtr = pBindPtr.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeComp_void__Bind_0__6__String_i32_i16_outITypeInfo_outDESCKIND_outBINDPTR(&__thrown, self.get_handle(), szName.get_handle(), lHashVal, wFlags, &_tmp_out_ppTInfo, &_tmp_out_pDescKind, &_tmp_out_pBindPtr);
        let _tmp2_ppTInfo = dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo(hndl: _tmp_out_ppTInfo);
            ppTInfo = _tmp2_ppTInfo;
        let _tmp2_pDescKind = dotnet.System.Runtime.InteropServices.ComTypes.DESCKIND(val: _tmp_out_pDescKind);
            pDescKind = _tmp2_pDescKind;
        let _tmp2_pBindPtr = dotnet.System.Runtime.InteropServices.ComTypes.BINDPTR(hndl: _tmp_out_pBindPtr);
            pBindPtr = _tmp2_pBindPtr;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BindType(System.String, System.Int32, ref System.Runtime.InteropServices.ComTypes.ITypeInfo, ref System.Runtime.InteropServices.ComTypes.ITypeComp)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)
    /**
    Binds to the type descriptions contained within a type library.

    - Parameter szName: The name to bind.
    - Parameter lHashVal: A hash value for  determined by .
    - Parameter ppTInfo: When this method returns, contains a reference to an  of the type to which  was bound. This parameter is passed uninitialized.
    - Parameter ppTComp: When this method returns, contains a reference to an  variable. This parameter is passed uninitialized.
    */
    open func BindType(szName : dotnet.System.String, lHashVal : Swift.Int32, ppTInfo : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo, ppTComp : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTInfo = ppTInfo.get_handle();
            var _tmp_out_ppTComp = ppTComp.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeComp_void__BindType_0__4__String_i32_outITypeInfo_outITypeComp(&__thrown, self.get_handle(), szName.get_handle(), lHashVal, &_tmp_out_ppTInfo, &_tmp_out_ppTComp);
        let _tmp2_ppTInfo = dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo(hndl: _tmp_out_ppTInfo);
            ppTInfo = _tmp2_ppTInfo;
        let _tmp2_ppTComp = dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp(hndl: _tmp_out_ppTComp);
            ppTComp = _tmp2_ppTComp;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITypeComp


// type: System.Runtime.InteropServices.ComTypes.ITypeInfo
    /**
    Provides the managed definition of the Component Automation ITypeInfo interface.

    */
open class ITypeInfo
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_ITypeInfo
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_ITypeInfo_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddressOfMember(System.Int32, System.Runtime.InteropServices.ComTypes.INVOKEKIND, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)
    /**
    Retrieves the addresses of static functions or variables, such as those defined in a DLL.

    - Parameter memid: The member ID of the  member's address to retrieve.
    - Parameter invKind: One of the  values that specifies whether the member is a property, and if so, what kind.
    - Parameter ppv: When this method returns, contains a reference to the  member. This parameter is passed uninitialized.
    */
    open func AddressOfMember(memid : Swift.Int32, invKind : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND, ppv : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppv = ppv.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__AddressOfMember_0__3__i32_INVOKEKIND_outIntPtr(&__thrown, self.get_handle(), memid, invKind.get_value(), &_tmp_out_ppv);
        let _tmp2_ppv = dotnet.System.IntPtr(val: _tmp_out_ppv);
            ppv = _tmp2_ppv;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CreateInstance(System.Object, ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)
    /**
    Creates a new instance of a type that describes a component class (coclass).

    - Parameter pUnkOuter: The object that acts as the controlling .
    - Parameter riid: The IID of the interface that the caller uses to communicate with the resulting object.
    - Parameter ppvObj: When this method returns, contains a reference to the created object. This parameter is passed uninitialized.
    */
    open func CreateInstance(pUnkOuter : Optional<dotnet.System.Object>, riid : inout dotnet.System.Guid, ppvObj : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_riid = riid.get_handle();
            var _tmp_out_ppvObj = ppvObj.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__CreateInstance_0__3__Object_refGuid_outObject(&__thrown, self.get_handle(), pUnkOuter?.get_handle() ?? nil, &_tmp_ref_riid, &_tmp_out_ppvObj);
        let _tmp2_riid = dotnet.System.Guid(hndl: _tmp_ref_riid);
            riid = _tmp2_riid;
        let _tmp2_ppvObj = dotnet.System.Object(hndl: _tmp_out_ppvObj);
            ppvObj = _tmp2_ppvObj;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetContainingTypeLib(ref System.Runtime.InteropServices.ComTypes.ITypeLib, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)
    /**
    Retrieves the type library that contains this type description and its index within that type library.

    - Parameter ppTLB: When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.
    - Parameter pIndex: When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.
    */
    open func GetContainingTypeLib(ppTLB : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeLib, pIndex : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTLB = ppTLB.get_handle();
            var _tmp_out_pIndex = pIndex;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetContainingTypeLib_0__2__outITypeLib_outi32(&__thrown, self.get_handle(), &_tmp_out_ppTLB, &_tmp_out_pIndex);
        let _tmp2_ppTLB = dotnet.System.Runtime.InteropServices.ComTypes.ITypeLib(hndl: _tmp_out_ppTLB);
            ppTLB = _tmp2_ppTLB;
        let _tmp2_pIndex = _tmp_out_pIndex;
            pIndex = _tmp2_pIndex;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDllEntry(System.Int32, System.Runtime.InteropServices.ComTypes.INVOKEKIND, System.IntPtr, System.IntPtr, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)
    /**
    Retrieves a description or specification of an entry point for a function in a DLL.

    - Parameter memid: The ID of the member function whose DLL entry description is to be returned.
    - Parameter invKind: One of the  values that specifies the kind of member identified by .
    - Parameter pBstrDllName: If not , the function sets  to a  that contains the name of the DLL.
    - Parameter pBstrName: If not , the function sets lpbstrName to a  that contains the name of the entry point.
    - Parameter pwOrdinal: If not , and the function is defined by an ordinal, then lpwOrdinal is set to point to the ordinal.
    */
    open func GetDllEntry(memid : Swift.Int32, invKind : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND, pBstrDllName : dotnet.System.IntPtr, pBstrName : dotnet.System.IntPtr, pwOrdinal : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetDllEntry_0__5__i32_INVOKEKIND_IntPtr_IntPtr_IntPtr(&__thrown, self.get_handle(), memid, invKind.get_value(), pBstrDllName.get_value(), pBstrName.get_value(), pwOrdinal.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDocumentation(System.Int32, ref System.String, ref System.String, ref System.Int32, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)
    /**
    Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.

    - Parameter index: The ID of the member whose documentation is to be returned.
    - Parameter strName: When this method returns, contains the name of the item method. This parameter is passed uninitialized.
    - Parameter strDocString: When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.
    - Parameter dwHelpContext: When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.
    - Parameter strHelpFile: When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.
    */
    open func GetDocumentation(index : Swift.Int32, strName : inout dotnet.System.String, strDocString : inout dotnet.System.String, dwHelpContext : inout Swift.Int32, strHelpFile : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_strName = strName.get_handle();
            var _tmp_out_strDocString = strDocString.get_handle();
            var _tmp_out_dwHelpContext = dwHelpContext;
            var _tmp_out_strHelpFile = strHelpFile.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetDocumentation_0__5__i32_outString_outString_outi32_outString(&__thrown, self.get_handle(), index, &_tmp_out_strName, &_tmp_out_strDocString, &_tmp_out_dwHelpContext, &_tmp_out_strHelpFile);
        let _tmp2_strName = dotnet.System.String(hndl: _tmp_out_strName);
            strName = _tmp2_strName;
        let _tmp2_strDocString = dotnet.System.String(hndl: _tmp_out_strDocString);
            strDocString = _tmp2_strDocString;
        let _tmp2_dwHelpContext = _tmp_out_dwHelpContext;
            dwHelpContext = _tmp2_dwHelpContext;
        let _tmp2_strHelpFile = dotnet.System.String(hndl: _tmp_out_strHelpFile);
            strHelpFile = _tmp2_strHelpFile;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetFuncDesc(System.Int32, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)
    /**
    Retrieves the  structure that contains information about a specified function.

    - Parameter index: The index of the function description to return.
    - Parameter ppFuncDesc: When this method returns, contains a reference to a  structure that describes the specified function. This parameter is passed uninitialized.
    */
    open func GetFuncDesc(index : Swift.Int32, ppFuncDesc : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppFuncDesc = ppFuncDesc.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetFuncDesc_0__2__i32_outIntPtr(&__thrown, self.get_handle(), index, &_tmp_out_ppFuncDesc);
        let _tmp2_ppFuncDesc = dotnet.System.IntPtr(val: _tmp_out_ppFuncDesc);
            ppFuncDesc = _tmp2_ppFuncDesc;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetIDsOfNames(System.String[], System.Int32, System.Int32[])
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])
    /**
    Maps between member names and member IDs, and parameter names and parameter IDs.

    - Parameter rgszNames: An array of names to map.
    - Parameter cNames: The count of names to map.
    - Parameter pMemId: When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.
    */
    open func GetIDsOfNames(rgszNames : dotnet.System_Arr<dotnet.System.String>, cNames : Swift.Int32, pMemId : dotnet.System_Arr<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetIDsOfNames_0__3__StringArray_i32_i32Array(&__thrown, self.get_handle(), rgszNames.get_handle(), cNames, pMemId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetImplTypeFlags(System.Int32, ref System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)
    /**
    Retrieves the  value for one implemented interface or base interface in a type description.

    - Parameter index: The index of the implemented interface or base interface.
    - Parameter pImplTypeFlags: When this method returns, contains a reference to the  enumeration. This parameter is passed uninitialized.
    */
    open func GetImplTypeFlags(index : Swift.Int32, pImplTypeFlags : inout dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pImplTypeFlags = pImplTypeFlags.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetImplTypeFlags_0__2__i32_outIMPLTYPEFLAGS(&__thrown, self.get_handle(), index, &_tmp_out_pImplTypeFlags);
        let _tmp2_pImplTypeFlags = dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS(val: _tmp_out_pImplTypeFlags);
            pImplTypeFlags = _tmp2_pImplTypeFlags;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetMops(System.Int32, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)
    /**
    Retrieves marshaling information.

    - Parameter memid: The member ID that indicates which marshaling information is needed.
    - Parameter pBstrMops: When this method returns, contains a reference to the  string used in marshaling the fields of the structure described by the referenced type description, or returns  if there is no information to return. This parameter is passed uninitialized.
    */
    open func GetMops(memid : Swift.Int32, pBstrMops : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pBstrMops = pBstrMops.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetMops_0__2__i32_outString(&__thrown, self.get_handle(), memid, &_tmp_out_pBstrMops);
        let _tmp2_pBstrMops = dotnet.System.String(hndl: _tmp_out_pBstrMops);
            pBstrMops = _tmp2_pBstrMops;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetNames(System.Int32, System.String[], System.Int32, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)
    /**
    Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.

    - Parameter memid: The ID of the member whose name (or names) is to be returned.
    - Parameter rgBstrNames: When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.
    - Parameter cMaxNames: The length of the  array.
    - Parameter pcNames: When this method returns, contains the number of names in the  array. This parameter is passed uninitialized.
    */
    open func GetNames(memid : Swift.Int32, rgBstrNames : dotnet.System_Arr<dotnet.System.String>, cMaxNames : Swift.Int32, pcNames : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pcNames = pcNames;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetNames_0__4__i32_StringArray_i32_outi32(&__thrown, self.get_handle(), memid, rgBstrNames.get_handle(), cMaxNames, &_tmp_out_pcNames);
        let _tmp2_pcNames = _tmp_out_pcNames;
            pcNames = _tmp2_pcNames;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetRefTypeInfo(System.Int32, ref System.Runtime.InteropServices.ComTypes.ITypeInfo)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)
    /**
    Retrieves the referenced type descriptions if a type description references other type descriptions.

    - Parameter hRef: A handle to the referenced type description to return.
    - Parameter ppTI: When this method returns, contains the referenced type description. This parameter is passed uninitialized.
    */
    open func GetRefTypeInfo(hRef : Swift.Int32, ppTI : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTI = ppTI.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetRefTypeInfo_0__2__i32_outITypeInfo(&__thrown, self.get_handle(), hRef, &_tmp_out_ppTI);
        let _tmp2_ppTI = dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo(hndl: _tmp_out_ppTI);
            ppTI = _tmp2_ppTI;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetRefTypeOfImplType(System.Int32, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)
    /**
    Retrieves the type description of the implemented interface types if a type description describes a COM class.

    - Parameter index: The index of the implemented type whose handle is returned.
    - Parameter href: When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.
    */
    open func GetRefTypeOfImplType(index : Swift.Int32, href : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_href = href;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetRefTypeOfImplType_0__2__i32_outi32(&__thrown, self.get_handle(), index, &_tmp_out_href);
        let _tmp2_href = _tmp_out_href;
            href = _tmp2_href;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeAttr(ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)
    /**
    Retrieves a  structure that contains the attributes of the type description.

    - Parameter ppTypeAttr: When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.
    */
    open func GetTypeAttr(ppTypeAttr : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTypeAttr = ppTypeAttr.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetTypeAttr_0__1__outIntPtr(&__thrown, self.get_handle(), &_tmp_out_ppTypeAttr);
        let _tmp2_ppTypeAttr = dotnet.System.IntPtr(val: _tmp_out_ppTypeAttr);
            ppTypeAttr = _tmp2_ppTypeAttr;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeComp(ref System.Runtime.InteropServices.ComTypes.ITypeComp)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)
    /**
    Retrieves the  interface for the type description, which enables a client compiler to bind to the type description's members.

    - Parameter ppTComp: When this method returns, contains a reference to the  interface of the containing type library. This parameter is passed uninitialized.
    */
    open func GetTypeComp(ppTComp : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTComp = ppTComp.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetTypeComp_0__1__outITypeComp(&__thrown, self.get_handle(), &_tmp_out_ppTComp);
        let _tmp2_ppTComp = dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp(hndl: _tmp_out_ppTComp);
            ppTComp = _tmp2_ppTComp;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetVarDesc(System.Int32, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)
    /**
    Retrieves a  structure that describes the specified variable.

    - Parameter index: The index of the variable description to return.
    - Parameter ppVarDesc: When this method returns, contains a reference to the  structure that describes the specified variable. This parameter is passed uninitialized.
    */
    open func GetVarDesc(index : Swift.Int32, ppVarDesc : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppVarDesc = ppVarDesc.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__GetVarDesc_0__2__i32_outIntPtr(&__thrown, self.get_handle(), index, &_tmp_out_ppVarDesc);
        let _tmp2_ppVarDesc = dotnet.System.IntPtr(val: _tmp_out_ppVarDesc);
            ppVarDesc = _tmp2_ppVarDesc;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Invoke(System.Object, System.Int32, System.Int16, ref System.Runtime.InteropServices.ComTypes.DISPPARAMS, System.IntPtr, System.IntPtr, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)
    /**
    Invokes a method, or accesses a property of an object, that implements the interface described by the type description.

    - Parameter pvInstance: A reference to the interface described by this type description.
    - Parameter memid: A value that identifies the interface member.
    - Parameter wFlags: Flags that describe the context of the invoke call.
    - Parameter pDispParams: A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.
    - Parameter pVarResult: A reference to the location at which the result is to be stored. If  specifies  or ,  is ignored. Set to  if no result is desired.
    - Parameter pExcepInfo: A pointer to an exception information structure, which is filled in only if  is returned.
    - Parameter puArgErr: If  returns ,  indicates the index within rgvarg of the argument with the incorrect type. If more than one argument returns an error,  indicates only the first argument with an error. This parameter is passed uninitialized.
    */
    open func Invoke(pvInstance : dotnet.System.Object, memid : Swift.Int32, wFlags : Swift.Int16, pDispParams : inout dotnet.System.Runtime.InteropServices.ComTypes.DISPPARAMS, pVarResult : dotnet.System.IntPtr, pExcepInfo : dotnet.System.IntPtr, puArgErr : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_pDispParams = pDispParams.get_handle();
            var _tmp_out_puArgErr = puArgErr;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__Invoke_0__7__Object_i32_i16_refDISPPARAMS_IntPtr_IntPtr_outi32(&__thrown, self.get_handle(), pvInstance.get_handle(), memid, wFlags, &_tmp_ref_pDispParams, pVarResult.get_value(), pExcepInfo.get_value(), &_tmp_out_puArgErr);
        let _tmp2_pDispParams = dotnet.System.Runtime.InteropServices.ComTypes.DISPPARAMS(hndl: _tmp_ref_pDispParams);
            pDispParams = _tmp2_pDispParams;
        let _tmp2_puArgErr = _tmp_out_puArgErr;
            puArgErr = _tmp2_puArgErr;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReleaseFuncDesc(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)
    /**
    Releases a  structure previously returned by the  method.

    - Parameter pFuncDesc: A reference to the  structure to release.
    */
    open func ReleaseFuncDesc(pFuncDesc : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__ReleaseFuncDesc_0__1__IntPtr(&__thrown, self.get_handle(), pFuncDesc.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReleaseTypeAttr(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)
    /**
    Releases a  structure previously returned by the  method.

    - Parameter pTypeAttr: A reference to the  structure to release.
    */
    open func ReleaseTypeAttr(pTypeAttr : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__ReleaseTypeAttr_0__1__IntPtr(&__thrown, self.get_handle(), pTypeAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReleaseVarDesc(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)
    /**
    Releases a  structure previously returned by the  method.

    - Parameter pVarDesc: A reference to the  structure to release.
    */
    open func ReleaseVarDesc(pVarDesc : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo_void__ReleaseVarDesc_0__1__IntPtr(&__thrown, self.get_handle(), pVarDesc.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITypeInfo


// type: System.Runtime.InteropServices.ComTypes.ITypeInfo2
    /**
    Provides the managed definition of the  interface.

    */
open class ITypeInfo2
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_ITypeInfo2,
    System_Runtime_InteropServices_ComTypes_ITypeInfo
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_ITypeInfo2_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddressOfMember(System.Int32, System.Runtime.InteropServices.ComTypes.INVOKEKIND, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)
    /**
    Retrieves the addresses of static functions or variables, such as those defined in a DLL.

    - Parameter memid: The member ID of the  member's address to retrieve.
    - Parameter invKind: One of the  values that specifies whether the member is a property, and if so, what kind.
    - Parameter ppv: When this method returns, contains a reference to the  member. This parameter is passed uninitialized.
    */
    open func AddressOfMember(memid : Swift.Int32, invKind : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND, ppv : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppv = ppv.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__AddressOfMember_0__3__i32_INVOKEKIND_outIntPtr(&__thrown, self.get_handle(), memid, invKind.get_value(), &_tmp_out_ppv);
        let _tmp2_ppv = dotnet.System.IntPtr(val: _tmp_out_ppv);
            ppv = _tmp2_ppv;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CreateInstance(System.Object, ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)
    /**
    Creates a new instance of a type that describes a component class (coclass).

    - Parameter pUnkOuter: An object that acts as the controlling .
    - Parameter riid: The IID of the interface that the caller uses to communicate with the resulting object.
    - Parameter ppvObj: When this method returns, contains a reference to the created object. This parameter is passed uninitialized.
    */
    open func CreateInstance(pUnkOuter : Optional<dotnet.System.Object>, riid : inout dotnet.System.Guid, ppvObj : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_riid = riid.get_handle();
            var _tmp_out_ppvObj = ppvObj.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__CreateInstance_0__3__Object_refGuid_outObject(&__thrown, self.get_handle(), pUnkOuter?.get_handle() ?? nil, &_tmp_ref_riid, &_tmp_out_ppvObj);
        let _tmp2_riid = dotnet.System.Guid(hndl: _tmp_ref_riid);
            riid = _tmp2_riid;
        let _tmp2_ppvObj = dotnet.System.Object(hndl: _tmp_out_ppvObj);
            ppvObj = _tmp2_ppvObj;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetAllCustData(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)
    /**
    Gets all custom data items for the library.

    - Parameter pCustData: A pointer to , which holds all custom data items.
    */
    open func GetAllCustData(pCustData : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetAllCustData_0__1__IntPtr(&__thrown, self.get_handle(), pCustData.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetAllFuncCustData(System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)
    /**
    Gets all custom data from the specified function.

    - Parameter index: The index of the function to get the custom data for.
    - Parameter pCustData: A pointer to , which holds all custom data items.
    */
    open func GetAllFuncCustData(index : Swift.Int32, pCustData : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetAllFuncCustData_0__2__i32_IntPtr(&__thrown, self.get_handle(), index, pCustData.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetAllImplTypeCustData(System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)
    /**
    Gets all custom data for the specified implementation type.

    - Parameter index: The index of the implementation type for the custom data.
    - Parameter pCustData: A pointer to  which holds all custom data items.
    */
    open func GetAllImplTypeCustData(index : Swift.Int32, pCustData : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetAllImplTypeCustData_0__2__i32_IntPtr(&__thrown, self.get_handle(), index, pCustData.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetAllParamCustData(System.Int32, System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)
    /**
    Gets all of the custom data for the specified function parameter.

    - Parameter indexFunc: The index of the function to get the custom data for.
    - Parameter indexParam: The index of the parameter of this function to get the custom data for.
    - Parameter pCustData: A pointer to , which holds all custom data items.
    */
    open func GetAllParamCustData(indexFunc : Swift.Int32, indexParam : Swift.Int32, pCustData : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetAllParamCustData_0__3__i32_i32_IntPtr(&__thrown, self.get_handle(), indexFunc, indexParam, pCustData.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetAllVarCustData(System.Int32, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)
    /**
    Gets the variable for the custom data.

    - Parameter index: The index of the variable to get the custom data for.
    - Parameter pCustData: A pointer to , which holds all custom data items.
    */
    open func GetAllVarCustData(index : Swift.Int32, pCustData : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetAllVarCustData_0__2__i32_IntPtr(&__thrown, self.get_handle(), index, pCustData.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetContainingTypeLib(ref System.Runtime.InteropServices.ComTypes.ITypeLib, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)
    /**
    Retrieves the type library that contains this type description and its index within that type library.

    - Parameter ppTLB: When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.
    - Parameter pIndex: When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.
    */
    open func GetContainingTypeLib(ppTLB : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeLib, pIndex : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTLB = ppTLB.get_handle();
            var _tmp_out_pIndex = pIndex;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetContainingTypeLib_0__2__outITypeLib_outi32(&__thrown, self.get_handle(), &_tmp_out_ppTLB, &_tmp_out_pIndex);
        let _tmp2_ppTLB = dotnet.System.Runtime.InteropServices.ComTypes.ITypeLib(hndl: _tmp_out_ppTLB);
            ppTLB = _tmp2_ppTLB;
        let _tmp2_pIndex = _tmp_out_pIndex;
            pIndex = _tmp2_pIndex;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetCustData(ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)
    /**
    Gets the custom data.

    - Parameter guid: The GUID used to identify the data.
    - Parameter pVarVal: When this method returns, contains an  that specifies where to put the retrieved data. This parameter is passed uninitialized.
    */
    open func GetCustData(guid : inout dotnet.System.Guid, pVarVal : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_guid = guid.get_handle();
            var _tmp_out_pVarVal = pVarVal.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetCustData_0__2__refGuid_outObject(&__thrown, self.get_handle(), &_tmp_ref_guid, &_tmp_out_pVarVal);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_ref_guid);
            guid = _tmp2_guid;
        let _tmp2_pVarVal = dotnet.System.Object(hndl: _tmp_out_pVarVal);
            pVarVal = _tmp2_pVarVal;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDllEntry(System.Int32, System.Runtime.InteropServices.ComTypes.INVOKEKIND, System.IntPtr, System.IntPtr, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)
    /**
    Retrieves a description or specification of an entry point for a function in a DLL.

    - Parameter memid: The ID of the member function whose DLL entry description is to be returned.
    - Parameter invKind: One of the  values that specifies the kind of member identified by .
    - Parameter pBstrDllName: If not , the function sets  to a  that contains the name of the DLL.
    - Parameter pBstrName: If not , the function sets lpbstrName to a  that contains the name of the entry point.
    - Parameter pwOrdinal: If not , and the function is defined by an ordinal, then lpwOrdinal is set to point to the ordinal.
    */
    open func GetDllEntry(memid : Swift.Int32, invKind : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND, pBstrDllName : dotnet.System.IntPtr, pBstrName : dotnet.System.IntPtr, pwOrdinal : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetDllEntry_0__5__i32_INVOKEKIND_IntPtr_IntPtr_IntPtr(&__thrown, self.get_handle(), memid, invKind.get_value(), pBstrDllName.get_value(), pBstrName.get_value(), pwOrdinal.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDocumentation(System.Int32, ref System.String, ref System.String, ref System.Int32, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)
    /**
    Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.

    - Parameter index: The ID of the member whose documentation is to be returned.
    - Parameter strName: When this method returns, contains the name of the item method. This parameter is passed uninitialized.
    - Parameter strDocString: When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.
    - Parameter dwHelpContext: When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.
    - Parameter strHelpFile: When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.
    */
    open func GetDocumentation(index : Swift.Int32, strName : inout dotnet.System.String, strDocString : inout dotnet.System.String, dwHelpContext : inout Swift.Int32, strHelpFile : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_strName = strName.get_handle();
            var _tmp_out_strDocString = strDocString.get_handle();
            var _tmp_out_dwHelpContext = dwHelpContext;
            var _tmp_out_strHelpFile = strHelpFile.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetDocumentation_0__5__i32_outString_outString_outi32_outString(&__thrown, self.get_handle(), index, &_tmp_out_strName, &_tmp_out_strDocString, &_tmp_out_dwHelpContext, &_tmp_out_strHelpFile);
        let _tmp2_strName = dotnet.System.String(hndl: _tmp_out_strName);
            strName = _tmp2_strName;
        let _tmp2_strDocString = dotnet.System.String(hndl: _tmp_out_strDocString);
            strDocString = _tmp2_strDocString;
        let _tmp2_dwHelpContext = _tmp_out_dwHelpContext;
            dwHelpContext = _tmp2_dwHelpContext;
        let _tmp2_strHelpFile = dotnet.System.String(hndl: _tmp_out_strHelpFile);
            strHelpFile = _tmp2_strHelpFile;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDocumentation2(System.Int32, ref System.String, ref System.Int32, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)
    /**
    Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.

    - Parameter memid: The member identifier for the type description.
    - Parameter pbstrHelpString: When this method returns, contains a  that contains the name of the specified item. If the caller does not need the item name,  can be . This parameter is passed uninitialized.
    - Parameter pdwHelpStringContext: When this method returns, contains the Help localization context. If the caller does not need the Help context,  can be . This parameter is passed uninitialized.
    - Parameter pbstrHelpStringDll: When this method returns, contains a  that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name,  can be . This parameter is passed uninitialized.
    */
    open func GetDocumentation2(memid : Swift.Int32, pbstrHelpString : inout dotnet.System.String, pdwHelpStringContext : inout Swift.Int32, pbstrHelpStringDll : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pbstrHelpString = pbstrHelpString.get_handle();
            var _tmp_out_pdwHelpStringContext = pdwHelpStringContext;
            var _tmp_out_pbstrHelpStringDll = pbstrHelpStringDll.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetDocumentation2_0__4__i32_outString_outi32_outString(&__thrown, self.get_handle(), memid, &_tmp_out_pbstrHelpString, &_tmp_out_pdwHelpStringContext, &_tmp_out_pbstrHelpStringDll);
        let _tmp2_pbstrHelpString = dotnet.System.String(hndl: _tmp_out_pbstrHelpString);
            pbstrHelpString = _tmp2_pbstrHelpString;
        let _tmp2_pdwHelpStringContext = _tmp_out_pdwHelpStringContext;
            pdwHelpStringContext = _tmp2_pdwHelpStringContext;
        let _tmp2_pbstrHelpStringDll = dotnet.System.String(hndl: _tmp_out_pbstrHelpStringDll);
            pbstrHelpStringDll = _tmp2_pbstrHelpStringDll;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetFuncCustData(System.Int32, ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)
    /**
    Gets the custom data from the specified function.

    - Parameter index: The index of the function to get the custom data for.
    - Parameter guid: The GUID used to identify the data.
    - Parameter pVarVal: When this method returns, contains an  that specified where to put the data. This parameter is passed uninitialized.
    */
    open func GetFuncCustData(index : Swift.Int32, guid : inout dotnet.System.Guid, pVarVal : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_guid = guid.get_handle();
            var _tmp_out_pVarVal = pVarVal.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetFuncCustData_0__3__i32_refGuid_outObject(&__thrown, self.get_handle(), index, &_tmp_ref_guid, &_tmp_out_pVarVal);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_ref_guid);
            guid = _tmp2_guid;
        let _tmp2_pVarVal = dotnet.System.Object(hndl: _tmp_out_pVarVal);
            pVarVal = _tmp2_pVarVal;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetFuncDesc(System.Int32, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)
    /**
    Retrieves the  structure that contains information about a specified function.

    - Parameter index: The index of the function description to return.
    - Parameter ppFuncDesc: When this method returns, contains a reference to a  structure that describes the specified function. This parameter is passed uninitialized.
    */
    open func GetFuncDesc(index : Swift.Int32, ppFuncDesc : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppFuncDesc = ppFuncDesc.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetFuncDesc_0__2__i32_outIntPtr(&__thrown, self.get_handle(), index, &_tmp_out_ppFuncDesc);
        let _tmp2_ppFuncDesc = dotnet.System.IntPtr(val: _tmp_out_ppFuncDesc);
            ppFuncDesc = _tmp2_ppFuncDesc;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetFuncIndexOfMemId(System.Int32, System.Runtime.InteropServices.ComTypes.INVOKEKIND, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)
    /**
    Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).

    - Parameter memid: The member identifier.
    - Parameter invKind: One of the  values that specifies the kind of member identified by memid.
    - Parameter pFuncIndex: When this method returns, contains an index into the function. This parameter is passed uninitialized.
    */
    open func GetFuncIndexOfMemId(memid : Swift.Int32, invKind : dotnet.System.Runtime.InteropServices.ComTypes.INVOKEKIND, pFuncIndex : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pFuncIndex = pFuncIndex;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetFuncIndexOfMemId_0__3__i32_INVOKEKIND_outi32(&__thrown, self.get_handle(), memid, invKind.get_value(), &_tmp_out_pFuncIndex);
        let _tmp2_pFuncIndex = _tmp_out_pFuncIndex;
            pFuncIndex = _tmp2_pFuncIndex;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetIDsOfNames(System.String[], System.Int32, System.Int32[])
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])
    /**
    Maps between member names and member IDs, and parameter names and parameter IDs.

    - Parameter rgszNames: An array of names to map.
    - Parameter cNames: The count of names to map.
    - Parameter pMemId: When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.
    */
    open func GetIDsOfNames(rgszNames : dotnet.System_Arr<dotnet.System.String>, cNames : Swift.Int32, pMemId : dotnet.System_Arr<Swift.Int32>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetIDsOfNames_0__3__StringArray_i32_i32Array(&__thrown, self.get_handle(), rgszNames.get_handle(), cNames, pMemId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetImplTypeCustData(System.Int32, ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)
    /**
    Gets the implementation type of the custom data.

    - Parameter index: The index of the implementation type for the custom data.
    - Parameter guid: The GUID used to identify the data.
    - Parameter pVarVal: When this method returns, contains an  that specifies where to put the retrieved data. This parameter is passed uninitialized.
    */
    open func GetImplTypeCustData(index : Swift.Int32, guid : inout dotnet.System.Guid, pVarVal : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_guid = guid.get_handle();
            var _tmp_out_pVarVal = pVarVal.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetImplTypeCustData_0__3__i32_refGuid_outObject(&__thrown, self.get_handle(), index, &_tmp_ref_guid, &_tmp_out_pVarVal);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_ref_guid);
            guid = _tmp2_guid;
        let _tmp2_pVarVal = dotnet.System.Object(hndl: _tmp_out_pVarVal);
            pVarVal = _tmp2_pVarVal;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetImplTypeFlags(System.Int32, ref System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)
    /**
    Retrieves the  value for one implemented interface or base interface in a type description.

    - Parameter index: The index of the implemented interface or base interface.
    - Parameter pImplTypeFlags: When this method returns, contains a reference to the  enumeration. This parameter is passed uninitialized.
    */
    open func GetImplTypeFlags(index : Swift.Int32, pImplTypeFlags : inout dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pImplTypeFlags = pImplTypeFlags.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetImplTypeFlags_0__2__i32_outIMPLTYPEFLAGS(&__thrown, self.get_handle(), index, &_tmp_out_pImplTypeFlags);
        let _tmp2_pImplTypeFlags = dotnet.System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS(val: _tmp_out_pImplTypeFlags);
            pImplTypeFlags = _tmp2_pImplTypeFlags;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetMops(System.Int32, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)
    /**
    Retrieves marshaling information.

    - Parameter memid: The member ID that indicates which marshaling information is needed.
    - Parameter pBstrMops: When this method returns, contains a reference to the  string used in marshaling the fields of the structure described by the referenced type description, or returns  if there is no information to return. This parameter is passed uninitialized.
    */
    open func GetMops(memid : Swift.Int32, pBstrMops : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pBstrMops = pBstrMops.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetMops_0__2__i32_outString(&__thrown, self.get_handle(), memid, &_tmp_out_pBstrMops);
        let _tmp2_pBstrMops = dotnet.System.String(hndl: _tmp_out_pBstrMops);
            pBstrMops = _tmp2_pBstrMops;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetNames(System.Int32, System.String[], System.Int32, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)
    /**
    Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.

    - Parameter memid: The ID of the member whose name (or names) is to be returned.
    - Parameter rgBstrNames: When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.
    - Parameter cMaxNames: The length of the  array.
    - Parameter pcNames: When this method returns, contains the number of names in the  array. This parameter is passed uninitialized.
    */
    open func GetNames(memid : Swift.Int32, rgBstrNames : dotnet.System_Arr<dotnet.System.String>, cMaxNames : Swift.Int32, pcNames : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pcNames = pcNames;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetNames_0__4__i32_StringArray_i32_outi32(&__thrown, self.get_handle(), memid, rgBstrNames.get_handle(), cMaxNames, &_tmp_out_pcNames);
        let _tmp2_pcNames = _tmp_out_pcNames;
            pcNames = _tmp2_pcNames;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetParamCustData(System.Int32, System.Int32, ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)
    /**
    Gets the specified custom data parameter.

    - Parameter indexFunc: The index of the function to get the custom data for.
    - Parameter indexParam: The index of the parameter of this function to get the custom data for.
    - Parameter guid: The GUID used to identify the data.
    - Parameter pVarVal: When this method returns, contains an  that specifies where to put the retrieved data. This parameter is passed uninitialized.
    */
    open func GetParamCustData(indexFunc : Swift.Int32, indexParam : Swift.Int32, guid : inout dotnet.System.Guid, pVarVal : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_guid = guid.get_handle();
            var _tmp_out_pVarVal = pVarVal.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetParamCustData_0__4__i32_i32_refGuid_outObject(&__thrown, self.get_handle(), indexFunc, indexParam, &_tmp_ref_guid, &_tmp_out_pVarVal);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_ref_guid);
            guid = _tmp2_guid;
        let _tmp2_pVarVal = dotnet.System.Object(hndl: _tmp_out_pVarVal);
            pVarVal = _tmp2_pVarVal;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetRefTypeInfo(System.Int32, ref System.Runtime.InteropServices.ComTypes.ITypeInfo)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)
    /**
    Retrieves the referenced type descriptions, if a type description references other type descriptions.

    - Parameter hRef: A handle to the referenced type description to return.
    - Parameter ppTI: When this method returns, contains the referenced type description. This parameter is passed uninitialized.
    */
    open func GetRefTypeInfo(hRef : Swift.Int32, ppTI : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTI = ppTI.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetRefTypeInfo_0__2__i32_outITypeInfo(&__thrown, self.get_handle(), hRef, &_tmp_out_ppTI);
        let _tmp2_ppTI = dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo(hndl: _tmp_out_ppTI);
            ppTI = _tmp2_ppTI;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetRefTypeOfImplType(System.Int32, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)
    /**
    Retrieves the type description of the implemented interface types, if a type description describes a COM class.

    - Parameter index: The index of the implemented type whose handle is returned.
    - Parameter href: When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.
    */
    open func GetRefTypeOfImplType(index : Swift.Int32, href : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_href = href;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetRefTypeOfImplType_0__2__i32_outi32(&__thrown, self.get_handle(), index, &_tmp_out_href);
        let _tmp2_href = _tmp_out_href;
            href = _tmp2_href;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeAttr(ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)
    /**
    Retrieves a  structure that contains the attributes of the type description.

    - Parameter ppTypeAttr: When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.
    */
    open func GetTypeAttr(ppTypeAttr : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTypeAttr = ppTypeAttr.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetTypeAttr_0__1__outIntPtr(&__thrown, self.get_handle(), &_tmp_out_ppTypeAttr);
        let _tmp2_ppTypeAttr = dotnet.System.IntPtr(val: _tmp_out_ppTypeAttr);
            ppTypeAttr = _tmp2_ppTypeAttr;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeComp(ref System.Runtime.InteropServices.ComTypes.ITypeComp)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)
    /**
    Retrieves the  interface for the type description, which enables a client compiler to bind to the type description's members.

    - Parameter ppTComp: When this method returns, contains a reference to the  of the containing type library. This parameter is passed uninitialized.
    */
    open func GetTypeComp(ppTComp : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTComp = ppTComp.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetTypeComp_0__1__outITypeComp(&__thrown, self.get_handle(), &_tmp_out_ppTComp);
        let _tmp2_ppTComp = dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp(hndl: _tmp_out_ppTComp);
            ppTComp = _tmp2_ppTComp;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeFlags(ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)
    /**
    Returns the type flags without any allocations. This method returns a  type flag, which expands the type flags without growing the  (type attribute).

    - Parameter pTypeFlags: When this method returns, contains a  reference to a . This parameter is passed uninitialized.
    */
    open func GetTypeFlags(pTypeFlags : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pTypeFlags = pTypeFlags;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetTypeFlags_0__1__outi32(&__thrown, self.get_handle(), &_tmp_out_pTypeFlags);
        let _tmp2_pTypeFlags = _tmp_out_pTypeFlags;
            pTypeFlags = _tmp2_pTypeFlags;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeKind(ref System.Runtime.InteropServices.ComTypes.TYPEKIND)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)
    /**
    Returns the  enumeration quickly, without doing any allocations.

    - Parameter pTypeKind: When this method returns, contains a reference to a  enumeration. This parameter is passed uninitialized.
    */
    open func GetTypeKind(pTypeKind : inout dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pTypeKind = pTypeKind.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetTypeKind_0__1__outTYPEKIND(&__thrown, self.get_handle(), &_tmp_out_pTypeKind);
        let _tmp2_pTypeKind = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: _tmp_out_pTypeKind);
            pTypeKind = _tmp2_pTypeKind;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetVarCustData(System.Int32, ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)
    /**
    Gets the variable for the custom data.

    - Parameter index: The index of the variable to get the custom data for.
    - Parameter guid: The GUID used to identify the data.
    - Parameter pVarVal: When this method returns, contains an  that specifies where to put the retrieved data. This parameter is passed uninitialized.
    */
    open func GetVarCustData(index : Swift.Int32, guid : inout dotnet.System.Guid, pVarVal : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_guid = guid.get_handle();
            var _tmp_out_pVarVal = pVarVal.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetVarCustData_0__3__i32_refGuid_outObject(&__thrown, self.get_handle(), index, &_tmp_ref_guid, &_tmp_out_pVarVal);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_ref_guid);
            guid = _tmp2_guid;
        let _tmp2_pVarVal = dotnet.System.Object(hndl: _tmp_out_pVarVal);
            pVarVal = _tmp2_pVarVal;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetVarDesc(System.Int32, ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)
    /**
    Retrieves a  structure that describes the specified variable.

    - Parameter index: The index of the variable description to return.
    - Parameter ppVarDesc: When this method returns, contains a reference to the  structure that describes the specified variable. This parameter is passed uninitialized.
    */
    open func GetVarDesc(index : Swift.Int32, ppVarDesc : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppVarDesc = ppVarDesc.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetVarDesc_0__2__i32_outIntPtr(&__thrown, self.get_handle(), index, &_tmp_out_ppVarDesc);
        let _tmp2_ppVarDesc = dotnet.System.IntPtr(val: _tmp_out_ppVarDesc);
            ppVarDesc = _tmp2_ppVarDesc;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetVarIndexOfMemId(System.Int32, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)
    /**
    Binds to a specific member based on a known , where the member name is not known (for example, when binding to a default member).

    - Parameter memid: The member identifier.
    - Parameter pVarIndex: When this method returns, contains an index of . This parameter is passed uninitialized.
    */
    open func GetVarIndexOfMemId(memid : Swift.Int32, pVarIndex : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pVarIndex = pVarIndex;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__GetVarIndexOfMemId_0__2__i32_outi32(&__thrown, self.get_handle(), memid, &_tmp_out_pVarIndex);
        let _tmp2_pVarIndex = _tmp_out_pVarIndex;
            pVarIndex = _tmp2_pVarIndex;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Invoke(System.Object, System.Int32, System.Int16, ref System.Runtime.InteropServices.ComTypes.DISPPARAMS, System.IntPtr, System.IntPtr, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)
    /**
    Invokes a method, or accesses a property of an object, that implements the interface described by the type description.

    - Parameter pvInstance: A reference to the interface described by this type description.
    - Parameter memid: Identifier of the interface member.
    - Parameter wFlags: Flags describing the context of the invoke call.
    - Parameter pDispParams: A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.
    - Parameter pVarResult: A reference to the location at which the result is to be stored. If  specifies  or ,  is ignored. Set to  if no result is desired.
    - Parameter pExcepInfo: A pointer to an exception information structure, which is filled in only if  is returned.
    - Parameter puArgErr: If  returns ,  indicates the index of the argument with incorrect type. If more than one argument returns an error,  indicates only the first argument with an error.
    */
    open func Invoke(pvInstance : dotnet.System.Object, memid : Swift.Int32, wFlags : Swift.Int16, pDispParams : inout dotnet.System.Runtime.InteropServices.ComTypes.DISPPARAMS, pVarResult : dotnet.System.IntPtr, pExcepInfo : dotnet.System.IntPtr, puArgErr : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_pDispParams = pDispParams.get_handle();
            var _tmp_out_puArgErr = puArgErr;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__Invoke_0__7__Object_i32_i16_refDISPPARAMS_IntPtr_IntPtr_outi32(&__thrown, self.get_handle(), pvInstance.get_handle(), memid, wFlags, &_tmp_ref_pDispParams, pVarResult.get_value(), pExcepInfo.get_value(), &_tmp_out_puArgErr);
        let _tmp2_pDispParams = dotnet.System.Runtime.InteropServices.ComTypes.DISPPARAMS(hndl: _tmp_ref_pDispParams);
            pDispParams = _tmp2_pDispParams;
        let _tmp2_puArgErr = _tmp_out_puArgErr;
            puArgErr = _tmp2_puArgErr;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReleaseFuncDesc(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)
    /**
    Releases a  structure previously returned by the  method.

    - Parameter pFuncDesc: A reference to the  structure to release.
    */
    open func ReleaseFuncDesc(pFuncDesc : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__ReleaseFuncDesc_0__1__IntPtr(&__thrown, self.get_handle(), pFuncDesc.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReleaseTypeAttr(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)
    /**
    Releases a  structure previously returned by the  method.

    - Parameter pTypeAttr: A reference to the  structure to release.
    */
    open func ReleaseTypeAttr(pTypeAttr : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__ReleaseTypeAttr_0__1__IntPtr(&__thrown, self.get_handle(), pTypeAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReleaseVarDesc(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)
    /**
    Releases a  structure previously returned by the  method.

    - Parameter pVarDesc: A reference to the  structure to release.
    */
    open func ReleaseVarDesc(pVarDesc : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeInfo2_void__ReleaseVarDesc_0__1__IntPtr(&__thrown, self.get_handle(), pVarDesc.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITypeInfo2


// type: System.Runtime.InteropServices.ComTypes.ITypeLib
    /**
    Provides the managed definition of the  interface.

    */
open class ITypeLib
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_ITypeLib
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_ITypeLib_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void FindName(System.String, System.Int32, System.Runtime.InteropServices.ComTypes.ITypeInfo[], System.Int32[], ref System.Int16)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)
    /**
    Finds occurrences of a type description in a type library.

    - Parameter szNameBuf: The name to search for. This is an in/out parameter.
    - Parameter lHashVal: A hash value to speed up the search, computed by the  function. If  is 0, a value is computed.
    - Parameter ppTInfo: When this method returns, contains an array of pointers to the type descriptions that contain the name specified in . This parameter is passed uninitialized.
    - Parameter rgMemId: An array of the  's of the found items;  [i] is the  that indexes into the type description specified by  [i]. Cannot be .
    - Parameter pcFound: On entry, indicates how many instances to look for. For example,  = 1 can be called to find the first occurrence. The search stops when one instance is found.  
  
 On exit, indicates the number of instances that were found. If the  and  values of  are identical, there might be more type descriptions that contain the name.
    */
    open func FindName(szNameBuf : dotnet.System.String, lHashVal : Swift.Int32, ppTInfo : dotnet.System_Arr<dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo>, rgMemId : dotnet.System_Arr<Swift.Int32>, pcFound : inout Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_pcFound = pcFound;
        System_Runtime_InteropServices_ComTypes_ITypeLib_void__FindName_0__5__String_i32_ITypeInfoArray_i32Array_refi16(&__thrown, self.get_handle(), szNameBuf.get_handle(), lHashVal, ppTInfo.get_handle(), rgMemId.get_handle(), &_tmp_ref_pcFound);
        let _tmp2_pcFound = _tmp_ref_pcFound;
            pcFound = _tmp2_pcFound;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDocumentation(System.Int32, ref System.String, ref System.String, ref System.Int32, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)
    /**
    Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.

    - Parameter index: The index of the type description whose documentation is to be returned.
    - Parameter strName: When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.
    - Parameter strDocString: When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.
    - Parameter dwHelpContext: When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.
    - Parameter strHelpFile: When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.
    */
    open func GetDocumentation(index : Swift.Int32, strName : inout dotnet.System.String, strDocString : inout dotnet.System.String, dwHelpContext : inout Swift.Int32, strHelpFile : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_strName = strName.get_handle();
            var _tmp_out_strDocString = strDocString.get_handle();
            var _tmp_out_dwHelpContext = dwHelpContext;
            var _tmp_out_strHelpFile = strHelpFile.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib_void__GetDocumentation_0__5__i32_outString_outString_outi32_outString(&__thrown, self.get_handle(), index, &_tmp_out_strName, &_tmp_out_strDocString, &_tmp_out_dwHelpContext, &_tmp_out_strHelpFile);
        let _tmp2_strName = dotnet.System.String(hndl: _tmp_out_strName);
            strName = _tmp2_strName;
        let _tmp2_strDocString = dotnet.System.String(hndl: _tmp_out_strDocString);
            strDocString = _tmp2_strDocString;
        let _tmp2_dwHelpContext = _tmp_out_dwHelpContext;
            dwHelpContext = _tmp2_dwHelpContext;
        let _tmp2_strHelpFile = dotnet.System.String(hndl: _tmp_out_strHelpFile);
            strHelpFile = _tmp2_strHelpFile;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetLibAttr(ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)
    /**
    Retrieves the structure that contains the library's attributes.

    - Parameter ppTLibAttr: When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.
    */
    open func GetLibAttr(ppTLibAttr : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTLibAttr = ppTLibAttr.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeLib_void__GetLibAttr_0__1__outIntPtr(&__thrown, self.get_handle(), &_tmp_out_ppTLibAttr);
        let _tmp2_ppTLibAttr = dotnet.System.IntPtr(val: _tmp_out_ppTLibAttr);
            ppTLibAttr = _tmp2_ppTLibAttr;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeComp(ref System.Runtime.InteropServices.ComTypes.ITypeComp)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)
    /**
    Enables a client compiler to bind to a library's types, variables, constants, and global functions.

    - Parameter ppTComp: When this method returns, contains an instance of a  instance for this . This parameter is passed uninitialized.
    */
    open func GetTypeComp(ppTComp : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTComp = ppTComp.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib_void__GetTypeComp_0__1__outITypeComp(&__thrown, self.get_handle(), &_tmp_out_ppTComp);
        let _tmp2_ppTComp = dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp(hndl: _tmp_out_ppTComp);
            ppTComp = _tmp2_ppTComp;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeInfo(System.Int32, ref System.Runtime.InteropServices.ComTypes.ITypeInfo)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)
    /**
    Retrieves the specified type description in the library.

    - Parameter index: The index of the  interface to return.
    - Parameter ppTI: When this method returns, contains an  describing the type referenced by . This parameter is passed uninitialized.
    */
    open func GetTypeInfo(index : Swift.Int32, ppTI : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTI = ppTI.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib_void__GetTypeInfo_0__2__i32_outITypeInfo(&__thrown, self.get_handle(), index, &_tmp_out_ppTI);
        let _tmp2_ppTI = dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo(hndl: _tmp_out_ppTI);
            ppTI = _tmp2_ppTI;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 GetTypeInfoCount()
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount
    /**
    Returns the number of type descriptions in the type library.

    - Returns: The number of type descriptions in the type library.

    */
    open func GetTypeInfoCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_ITypeLib_i32__GetTypeInfoCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void GetTypeInfoOfGuid(ref System.Guid, ref System.Runtime.InteropServices.ComTypes.ITypeInfo)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)
    /**
    Retrieves the type description that corresponds to the specified GUID.

    - Parameter guid: The IID of the interface or CLSID of the class whose type info is requested.
    - Parameter ppTInfo: When this method returns, contains the requested  interface. This parameter is passed uninitialized.
    */
    open func GetTypeInfoOfGuid(guid : inout dotnet.System.Guid, ppTInfo : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_guid = guid.get_handle();
            var _tmp_out_ppTInfo = ppTInfo.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib_void__GetTypeInfoOfGuid_0__2__refGuid_outITypeInfo(&__thrown, self.get_handle(), &_tmp_ref_guid, &_tmp_out_ppTInfo);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_ref_guid);
            guid = _tmp2_guid;
        let _tmp2_ppTInfo = dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo(hndl: _tmp_out_ppTInfo);
            ppTInfo = _tmp2_ppTInfo;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeInfoType(System.Int32, ref System.Runtime.InteropServices.ComTypes.TYPEKIND)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)
    /**
    Retrieves the type of a type description.

    - Parameter index: The index of the type description within the type library.
    - Parameter pTKind: When this method returns, contains a reference to the  enumeration for the type description. This parameter is passed uninitialized.
    */
    open func GetTypeInfoType(index : Swift.Int32, pTKind : inout dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pTKind = pTKind.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeLib_void__GetTypeInfoType_0__2__i32_outTYPEKIND(&__thrown, self.get_handle(), index, &_tmp_out_pTKind);
        let _tmp2_pTKind = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: _tmp_out_pTKind);
            pTKind = _tmp2_pTKind;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsName(System.String, System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)
    /**
    Indicates whether a passed-in string contains the name of a type or member described in the library.

    - Parameter szNameBuf: The string to test. This is an in/out parameter.
    - Parameter lHashVal: The hash value of .
    - Returns: 
         if  was found in the type library; otherwise, .

    */
    open func IsName(szNameBuf : dotnet.System.String, lHashVal : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_ITypeLib_bool__IsName_0__2__String_i32(&__thrown, self.get_handle(), szNameBuf.get_handle(), lHashVal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void ReleaseTLibAttr(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)
    /**
    Releases the  structure originally obtained from the  method.

    - Parameter pTLibAttr: The  structure to release.
    */
    open func ReleaseTLibAttr(pTLibAttr : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeLib_void__ReleaseTLibAttr_0__1__IntPtr(&__thrown, self.get_handle(), pTLibAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITypeLib


// type: System.Runtime.InteropServices.ComTypes.ITypeLib2
    /**
    Provides a managed definition of the  interface.

    */
open class ITypeLib2
    :
    SGBridgeGenericValue,
    System_Runtime_InteropServices_ComTypes_ITypeLib2,
    System_Runtime_InteropServices_ComTypes_ITypeLib
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_ITypeLib2_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void FindName(System.String, System.Int32, System.Runtime.InteropServices.ComTypes.ITypeInfo[], System.Int32[], ref System.Int16)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)
    /**
    Finds occurrences of a type description in a type library.

    - Parameter szNameBuf: The name to search for.
    - Parameter lHashVal: A hash value to speed up the search, computed by the  function. If  is 0, a value is computed.
    - Parameter ppTInfo: When this method returns, contains an array of pointers to the type descriptions that contain the name specified in . This parameter is passed uninitialized.
    - Parameter rgMemId: When this method returns, contains an array of the s of the found items;  [i] is the  that indexes into the type description specified by  [i]. This parameter cannot be . This parameter is passed uninitialized.
    - Parameter pcFound: On entry, a value, passed by reference, that indicates how many instances to look for. For example,  = 1 can be called to find the first occurrence. The search stops when one instance is found.  
  
 On exit, indicates the number of instances that were found. If the  and  values of  are identical, there might be more type descriptions that contain the name.
    */
    open func FindName(szNameBuf : dotnet.System.String, lHashVal : Swift.Int32, ppTInfo : dotnet.System_Arr<dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo>, rgMemId : dotnet.System_Arr<Swift.Int32>, pcFound : inout Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_pcFound = pcFound;
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__FindName_0__5__String_i32_ITypeInfoArray_i32Array_refi16(&__thrown, self.get_handle(), szNameBuf.get_handle(), lHashVal, ppTInfo.get_handle(), rgMemId.get_handle(), &_tmp_ref_pcFound);
        let _tmp2_pcFound = _tmp_ref_pcFound;
            pcFound = _tmp2_pcFound;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetAllCustData(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)
    /**
    Gets all custom data items for the library.

    - Parameter pCustData: A pointer to , which holds all custom data items.
    */
    open func GetAllCustData(pCustData : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetAllCustData_0__1__IntPtr(&__thrown, self.get_handle(), pCustData.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetCustData(ref System.Guid, ref System.Object)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)
    /**
    Gets the custom data.

    - Parameter guid: A  , passed by reference, that is used to identify the data.
    - Parameter pVarVal: When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.
    */
    open func GetCustData(guid : inout dotnet.System.Guid, pVarVal : inout dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_guid = guid.get_handle();
            var _tmp_out_pVarVal = pVarVal.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetCustData_0__2__refGuid_outObject(&__thrown, self.get_handle(), &_tmp_ref_guid, &_tmp_out_pVarVal);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_ref_guid);
            guid = _tmp2_guid;
        let _tmp2_pVarVal = dotnet.System.Object(hndl: _tmp_out_pVarVal);
            pVarVal = _tmp2_pVarVal;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDocumentation(System.Int32, ref System.String, ref System.String, ref System.Int32, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)
    /**
    Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.

    - Parameter index: An index of the type description whose documentation is to be returned.
    - Parameter strName: When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.
    - Parameter strDocString: When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.
    - Parameter dwHelpContext: When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.
    - Parameter strHelpFile: When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.
    */
    open func GetDocumentation(index : Swift.Int32, strName : inout dotnet.System.String, strDocString : inout dotnet.System.String, dwHelpContext : inout Swift.Int32, strHelpFile : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_strName = strName.get_handle();
            var _tmp_out_strDocString = strDocString.get_handle();
            var _tmp_out_dwHelpContext = dwHelpContext;
            var _tmp_out_strHelpFile = strHelpFile.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetDocumentation_0__5__i32_outString_outString_outi32_outString(&__thrown, self.get_handle(), index, &_tmp_out_strName, &_tmp_out_strDocString, &_tmp_out_dwHelpContext, &_tmp_out_strHelpFile);
        let _tmp2_strName = dotnet.System.String(hndl: _tmp_out_strName);
            strName = _tmp2_strName;
        let _tmp2_strDocString = dotnet.System.String(hndl: _tmp_out_strDocString);
            strDocString = _tmp2_strDocString;
        let _tmp2_dwHelpContext = _tmp_out_dwHelpContext;
            dwHelpContext = _tmp2_dwHelpContext;
        let _tmp2_strHelpFile = dotnet.System.String(hndl: _tmp_out_strHelpFile);
            strHelpFile = _tmp2_strHelpFile;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetDocumentation2(System.Int32, ref System.String, ref System.Int32, ref System.String)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)
    /**
    Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.

    - Parameter index: An index of the type description whose documentation is to be returned; if  is -1, the documentation for the library is returned.
    - Parameter pbstrHelpString: When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name,  can be . This parameter is passed uninitialized.
    - Parameter pdwHelpStringContext: When this method returns, contains the Help localization context. If the caller does not need the Help context,  can be . This parameter is passed uninitialized.
    - Parameter pbstrHelpStringDll: When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name,  can be . This parameter is passed uninitialized.
    */
    open func GetDocumentation2(index : Swift.Int32, pbstrHelpString : inout dotnet.System.String, pdwHelpStringContext : inout Swift.Int32, pbstrHelpStringDll : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pbstrHelpString = pbstrHelpString.get_handle();
            var _tmp_out_pdwHelpStringContext = pdwHelpStringContext;
            var _tmp_out_pbstrHelpStringDll = pbstrHelpStringDll.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetDocumentation2_0__4__i32_outString_outi32_outString(&__thrown, self.get_handle(), index, &_tmp_out_pbstrHelpString, &_tmp_out_pdwHelpStringContext, &_tmp_out_pbstrHelpStringDll);
        let _tmp2_pbstrHelpString = dotnet.System.String(hndl: _tmp_out_pbstrHelpString);
            pbstrHelpString = _tmp2_pbstrHelpString;
        let _tmp2_pdwHelpStringContext = _tmp_out_pdwHelpStringContext;
            pdwHelpStringContext = _tmp2_pdwHelpStringContext;
        let _tmp2_pbstrHelpStringDll = dotnet.System.String(hndl: _tmp_out_pbstrHelpStringDll);
            pbstrHelpStringDll = _tmp2_pbstrHelpStringDll;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetLibAttr(ref System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)
    /**
    Retrieves the structure that contains the library's attributes.

    - Parameter ppTLibAttr: When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.
    */
    open func GetLibAttr(ppTLibAttr : inout dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTLibAttr = ppTLibAttr.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetLibAttr_0__1__outIntPtr(&__thrown, self.get_handle(), &_tmp_out_ppTLibAttr);
        let _tmp2_ppTLibAttr = dotnet.System.IntPtr(val: _tmp_out_ppTLibAttr);
            ppTLibAttr = _tmp2_ppTLibAttr;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetLibStatistics(System.IntPtr, ref System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)
    /**
    Returns statistics about a type library that are required for efficient sizing of hash tables.

    - Parameter pcUniqueNames: A pointer to a count of unique names. If the caller does not need this information, set to .
    - Parameter pcchUniqueNames: When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.
    */
    open func GetLibStatistics(pcUniqueNames : dotnet.System.IntPtr, pcchUniqueNames : inout Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pcchUniqueNames = pcchUniqueNames;
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetLibStatistics_0__2__IntPtr_outi32(&__thrown, self.get_handle(), pcUniqueNames.get_value(), &_tmp_out_pcchUniqueNames);
        let _tmp2_pcchUniqueNames = _tmp_out_pcchUniqueNames;
            pcchUniqueNames = _tmp2_pcchUniqueNames;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeComp(ref System.Runtime.InteropServices.ComTypes.ITypeComp)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)
    /**
    Enables a client compiler to bind to a library's types, variables, constants, and global functions.

    - Parameter ppTComp: When this method returns, contains an  instance for this . This parameter is passed uninitialized.
    */
    open func GetTypeComp(ppTComp : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTComp = ppTComp.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetTypeComp_0__1__outITypeComp(&__thrown, self.get_handle(), &_tmp_out_ppTComp);
        let _tmp2_ppTComp = dotnet.System.Runtime.InteropServices.ComTypes.ITypeComp(hndl: _tmp_out_ppTComp);
            ppTComp = _tmp2_ppTComp;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeInfo(System.Int32, ref System.Runtime.InteropServices.ComTypes.ITypeInfo)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)
    /**
    Retrieves the specified type description in the library.

    - Parameter index: An index of the  interface to return.
    - Parameter ppTI: When this method returns, contains an  describing the type referenced by . This parameter is passed uninitialized.
    */
    open func GetTypeInfo(index : Swift.Int32, ppTI : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_ppTI = ppTI.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetTypeInfo_0__2__i32_outITypeInfo(&__thrown, self.get_handle(), index, &_tmp_out_ppTI);
        let _tmp2_ppTI = dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo(hndl: _tmp_out_ppTI);
            ppTI = _tmp2_ppTI;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 GetTypeInfoCount()
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount
    /**
    Returns the number of type descriptions in the type library.

    - Returns: The number of type descriptions in the type library.

    */
    open func GetTypeInfoCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_ITypeLib2_i32__GetTypeInfoCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void GetTypeInfoOfGuid(ref System.Guid, ref System.Runtime.InteropServices.ComTypes.ITypeInfo)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)
    /**
    Retrieves the type description that corresponds to the specified GUID.

    - Parameter guid: The , passed by reference, that represents the IID of the  interface of the class whose type info is requested.
    - Parameter ppTInfo: When this method returns, contains the requested  interface. This parameter is passed uninitialized.
    */
    open func GetTypeInfoOfGuid(guid : inout dotnet.System.Guid, ppTInfo : inout dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_guid = guid.get_handle();
            var _tmp_out_ppTInfo = ppTInfo.get_handle();
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetTypeInfoOfGuid_0__2__refGuid_outITypeInfo(&__thrown, self.get_handle(), &_tmp_ref_guid, &_tmp_out_ppTInfo);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_ref_guid);
            guid = _tmp2_guid;
        let _tmp2_ppTInfo = dotnet.System.Runtime.InteropServices.ComTypes.ITypeInfo(hndl: _tmp_out_ppTInfo);
            ppTInfo = _tmp2_ppTInfo;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetTypeInfoType(System.Int32, ref System.Runtime.InteropServices.ComTypes.TYPEKIND)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)
    /**
    Retrieves the type of a type description.

    - Parameter index: The index of the type description within the type library.
    - Parameter pTKind: When this method returns, contains a reference to the  enumeration for the type description. This parameter is passed uninitialized.
    */
    open func GetTypeInfoType(index : Swift.Int32, pTKind : inout dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_pTKind = pTKind.get_value();
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__GetTypeInfoType_0__2__i32_outTYPEKIND(&__thrown, self.get_handle(), index, &_tmp_out_pTKind);
        let _tmp2_pTKind = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: _tmp_out_pTKind);
            pTKind = _tmp2_pTKind;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsName(System.String, System.Int32)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)
    /**
    Indicates whether a passed-in string contains the name of a type or member described in the library.

    - Parameter szNameBuf: The string to test.
    - Parameter lHashVal: The hash value of .
    - Returns: 
         if  was found in the type library; otherwise, .

    */
    open func IsName(szNameBuf : dotnet.System.String, lHashVal : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_InteropServices_ComTypes_ITypeLib2_bool__IsName_0__2__String_i32(&__thrown, self.get_handle(), szNameBuf.get_handle(), lHashVal);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void ReleaseTLibAttr(System.IntPtr)
// docid: M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)
    /**
    Releases the  structure originally obtained from the  method.

    - Parameter pTLibAttr: The  structure to release.
    */
    open func ReleaseTLibAttr(pTLibAttr : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ComTypes_ITypeLib2_void__ReleaseTLibAttr_0__1__IntPtr(&__thrown, self.get_handle(), pTLibAttr.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITypeLib2


// type: System.Runtime.InteropServices.ComTypes.LIBFLAGS
    /**
    Defines flags that apply to type libraries.

    */
public struct LIBFLAGS : SGBridgeGenericValue {
    let v : Swift.Int16;
    public init(val: Swift.Int16) { self.v = val; }
    public func get_value() -> Swift.Int16 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_LIBFLAGS_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int16(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.LIBFLAGS LIBFLAG_FRESTRICTED
    /**
    The type library is restricted, and should not be displayed to users.

    */
    public static var LIBFLAG_FRESTRICTED : dotnet.System.Runtime.InteropServices.ComTypes.LIBFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.LIBFLAGS(val: System_Runtime_InteropServices_ComTypes_LIBFLAGS_get_LIBFLAG_FRESTRICTED());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.LIBFLAGS LIBFLAG_FCONTROL
    /**
    The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.

    */
    public static var LIBFLAG_FCONTROL : dotnet.System.Runtime.InteropServices.ComTypes.LIBFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.LIBFLAGS(val: System_Runtime_InteropServices_ComTypes_LIBFLAGS_get_LIBFLAG_FCONTROL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.LIBFLAGS LIBFLAG_FHIDDEN
    /**
    The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.

    */
    public static var LIBFLAG_FHIDDEN : dotnet.System.Runtime.InteropServices.ComTypes.LIBFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.LIBFLAGS(val: System_Runtime_InteropServices_ComTypes_LIBFLAGS_get_LIBFLAG_FHIDDEN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.LIBFLAGS LIBFLAG_FHASDISKIMAGE
    /**
    The type library exists in a persisted form on disk.

    */
    public static var LIBFLAG_FHASDISKIMAGE : dotnet.System.Runtime.InteropServices.ComTypes.LIBFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.LIBFLAGS(val: System_Runtime_InteropServices_ComTypes_LIBFLAGS_get_LIBFLAG_FHASDISKIMAGE());
            return __return;
        }
    }
} // LIBFLAGS


// type: System.Runtime.InteropServices.ComTypes.PARAMDESC
// boxed value type
    /**
    Contains information about how to transfer a structure element, parameter, or function return value between processes.

    */
public final class PARAMDESC
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_PARAMDESC_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_PARAMDESC_implicit_ctor();
            super.init(hndl: h);
    }
} // PARAMDESC


// type: System.Runtime.InteropServices.ComTypes.PARAMFLAG
    /**
    Describes how to transfer a structure element, parameter, or function return value between processes.

    */
public struct PARAMFLAG : SGBridgeGenericValue {
    let v : Swift.Int16;
    public init(val: Swift.Int16) { self.v = val; }
    public func get_value() -> Swift.Int16 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int16(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.PARAMFLAG PARAMFLAG_NONE
    /**
    Does not specify whether the parameter passes or receives information.

    */
    public static var PARAMFLAG_NONE : dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG(val: System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_PARAMFLAG_NONE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.PARAMFLAG PARAMFLAG_FIN
    /**
    The parameter passes information from the caller to the callee.

    */
    public static var PARAMFLAG_FIN : dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG(val: System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_PARAMFLAG_FIN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.PARAMFLAG PARAMFLAG_FOUT
    /**
    The parameter returns information from the callee to the caller.

    */
    public static var PARAMFLAG_FOUT : dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG(val: System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_PARAMFLAG_FOUT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.PARAMFLAG PARAMFLAG_FLCID
    /**
    The parameter is the local identifier of a client application.

    */
    public static var PARAMFLAG_FLCID : dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG(val: System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_PARAMFLAG_FLCID());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.PARAMFLAG PARAMFLAG_FRETVAL
    /**
    The parameter is the return value of the member.

    */
    public static var PARAMFLAG_FRETVAL : dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG(val: System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_PARAMFLAG_FRETVAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.PARAMFLAG PARAMFLAG_FOPT
    /**
    The parameter is optional.

    */
    public static var PARAMFLAG_FOPT : dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG(val: System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_PARAMFLAG_FOPT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.PARAMFLAG PARAMFLAG_FHASDEFAULT
    /**
    The parameter has default behaviors defined.

    */
    public static var PARAMFLAG_FHASDEFAULT : dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG(val: System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_PARAMFLAG_FHASDEFAULT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.PARAMFLAG PARAMFLAG_FHASCUSTDATA
    /**
    The parameter has custom data.

    */
    public static var PARAMFLAG_FHASCUSTDATA : dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.PARAMFLAG(val: System_Runtime_InteropServices_ComTypes_PARAMFLAG_get_PARAMFLAG_FHASCUSTDATA());
            return __return;
        }
    }
} // PARAMFLAG


// type: System.Runtime.InteropServices.ComTypes.STATDATA
// boxed value type
    /**
    Provides the managed definition of the  structure.

    */
public final class STATDATA
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_STATDATA_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_STATDATA_implicit_ctor();
            super.init(hndl: h);
    }
} // STATDATA


// type: System.Runtime.InteropServices.ComTypes.STATSTG
// boxed value type
    /**
    Contains statistical information about an open storage, stream, or byte-array object.

    */
public final class STATSTG
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_STATSTG_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_STATSTG_implicit_ctor();
            super.init(hndl: h);
    }
} // STATSTG


// type: System.Runtime.InteropServices.ComTypes.STGMEDIUM
// boxed value type
    /**
    Provides the managed definition of the  structure.

    */
public final class STGMEDIUM
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_STGMEDIUM_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_STGMEDIUM_implicit_ctor();
            super.init(hndl: h);
    }
} // STGMEDIUM


// type: System.Runtime.InteropServices.ComTypes.SYSKIND
    /**
    Identifies the target operating system platform.

    */
public struct SYSKIND : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_SYSKIND_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.SYSKIND SYS_WIN16
    /**
    The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.

    */
    public static var SYS_WIN16 : dotnet.System.Runtime.InteropServices.ComTypes.SYSKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.SYSKIND(val: System_Runtime_InteropServices_ComTypes_SYSKIND_get_SYS_WIN16());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.SYSKIND SYS_WIN32
    /**
    The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).

    */
    public static var SYS_WIN32 : dotnet.System.Runtime.InteropServices.ComTypes.SYSKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.SYSKIND(val: System_Runtime_InteropServices_ComTypes_SYSKIND_get_SYS_WIN32());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.SYSKIND SYS_MAC
    /**
    The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.

    */
    public static var SYS_MAC : dotnet.System.Runtime.InteropServices.ComTypes.SYSKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.SYSKIND(val: System_Runtime_InteropServices_ComTypes_SYSKIND_get_SYS_MAC());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.SYSKIND SYS_WIN64
    /**
    The target operating system for the type library is 64-bit Windows systems.

    */
    public static var SYS_WIN64 : dotnet.System.Runtime.InteropServices.ComTypes.SYSKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.SYSKIND(val: System_Runtime_InteropServices_ComTypes_SYSKIND_get_SYS_WIN64());
            return __return;
        }
    }
} // SYSKIND


// type: System.Runtime.InteropServices.ComTypes.TYMED
    /**
    Provides the managed definition of the  structure.

    */
public struct TYMED : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_TYMED_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.TYMED TYMED_NULL
    /**
    No data is being passed.

    */
    public static var TYMED_NULL : dotnet.System.Runtime.InteropServices.ComTypes.TYMED {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYMED(val: System_Runtime_InteropServices_ComTypes_TYMED_get_TYMED_NULL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYMED TYMED_HGLOBAL
    /**
    The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the  member is , the destination process should use  to release the memory.

    */
    public static var TYMED_HGLOBAL : dotnet.System.Runtime.InteropServices.ComTypes.TYMED {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYMED(val: System_Runtime_InteropServices_ComTypes_TYMED_get_TYMED_HGLOBAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYMED TYMED_FILE
    /**
    The storage medium is a disk file identified by a path. If the  member is , the destination process should use  to delete the file.

    */
    public static var TYMED_FILE : dotnet.System.Runtime.InteropServices.ComTypes.TYMED {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYMED(val: System_Runtime_InteropServices_ComTypes_TYMED_get_TYMED_FILE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYMED TYMED_ISTREAM
    /**
    The storage medium is a stream object identified by an  pointer. Use  to read the data. If the  member is not , the destination process should use  to release the stream component.

    */
    public static var TYMED_ISTREAM : dotnet.System.Runtime.InteropServices.ComTypes.TYMED {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYMED(val: System_Runtime_InteropServices_ComTypes_TYMED_get_TYMED_ISTREAM());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYMED TYMED_ISTORAGE
    /**
    The storage medium is a storage component identified by an  pointer. The data is in the streams and storages contained by this  instance. If the  member is not , the destination process should use  to release the storage component.

    */
    public static var TYMED_ISTORAGE : dotnet.System.Runtime.InteropServices.ComTypes.TYMED {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYMED(val: System_Runtime_InteropServices_ComTypes_TYMED_get_TYMED_ISTORAGE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYMED TYMED_GDI
    /**
    The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the  member is , the destination process should use  to delete the bitmap.

    */
    public static var TYMED_GDI : dotnet.System.Runtime.InteropServices.ComTypes.TYMED {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYMED(val: System_Runtime_InteropServices_ComTypes_TYMED_get_TYMED_GDI());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYMED TYMED_MFPICT
    /**
    The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the  member is , the destination process should use  to delete the bitmap.

    */
    public static var TYMED_MFPICT : dotnet.System.Runtime.InteropServices.ComTypes.TYMED {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYMED(val: System_Runtime_InteropServices_ComTypes_TYMED_get_TYMED_MFPICT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYMED TYMED_ENHMF
    /**
    The storage medium is an enhanced metafile. If the  member is , the destination process should use  to delete the bitmap.

    */
    public static var TYMED_ENHMF : dotnet.System.Runtime.InteropServices.ComTypes.TYMED {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYMED(val: System_Runtime_InteropServices_ComTypes_TYMED_get_TYMED_ENHMF());
            return __return;
        }
    }
} // TYMED


// type: System.Runtime.InteropServices.ComTypes.TYPEATTR
// boxed value type
    /**
    Contains attributes of a .

    */
public final class TYPEATTR
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_TYPEATTR_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 MEMBER_ID_NIL
    /**
    A constant used with the  and  fields.

    */
    public class var MEMBER_ID_NIL : Swift.Int32 {
        get {
        let __return = System_Runtime_InteropServices_ComTypes_TYPEATTR_get_MEMBER_ID_NIL();
            return __return;
        }
    }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_TYPEATTR_implicit_ctor();
            super.init(hndl: h);
    }
} // TYPEATTR


// type: System.Runtime.InteropServices.ComTypes.TYPEDESC
// boxed value type
    /**
    Describes the type of a variable, return type of a function, or the type of a function parameter.

    */
public final class TYPEDESC
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_TYPEDESC_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_TYPEDESC_implicit_ctor();
            super.init(hndl: h);
    }
} // TYPEDESC


// type: System.Runtime.InteropServices.ComTypes.TYPEFLAGS
    /**
    Defines the properties and attributes of a type description.

    */
public struct TYPEFLAGS : SGBridgeGenericValue {
    let v : Swift.Int16;
    public init(val: Swift.Int16) { self.v = val; }
    public func get_value() -> Swift.Int16 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int16(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FAPPOBJECT
    /**
    A type description that describes an  object.

    */
    public static var TYPEFLAG_FAPPOBJECT : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FAPPOBJECT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FCANCREATE
    /**
    Instances of the type can be created by .

    */
    public static var TYPEFLAG_FCANCREATE : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FCANCREATE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FLICENSED
    /**
    The type is licensed.

    */
    public static var TYPEFLAG_FLICENSED : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FLICENSED());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FPREDECLID
    /**
    The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.

    */
    public static var TYPEFLAG_FPREDECLID : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FPREDECLID());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FHIDDEN
    /**
    The type should not be displayed to browsers.

    */
    public static var TYPEFLAG_FHIDDEN : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FHIDDEN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FCONTROL
    /**
    The type is a control from which other types will be derived and should not be displayed to users.

    */
    public static var TYPEFLAG_FCONTROL : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FCONTROL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FDUAL
    /**
    The interface supplies both  and VTBL binding.

    */
    public static var TYPEFLAG_FDUAL : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FDUAL());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FNONEXTENSIBLE
    /**
    The interface cannot add members at run time.

    */
    public static var TYPEFLAG_FNONEXTENSIBLE : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FNONEXTENSIBLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FOLEAUTOMATION
    /**
    The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  . This flag is not allowed on dispinterfaces.

    */
    public static var TYPEFLAG_FOLEAUTOMATION : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FOLEAUTOMATION());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FRESTRICTED
    /**
    Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.

    */
    public static var TYPEFLAG_FRESTRICTED : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FRESTRICTED());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FAGGREGATABLE
    /**
    The class supports aggregation.

    */
    public static var TYPEFLAG_FAGGREGATABLE : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FAGGREGATABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FREPLACEABLE
    /**
    The object supports , and has default behaviors.

    */
    public static var TYPEFLAG_FREPLACEABLE : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FREPLACEABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FDISPATCHABLE
    /**
    Indicates that the interface derives from , either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.

    */
    public static var TYPEFLAG_FDISPATCHABLE : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FDISPATCHABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FREVERSEBIND
    /**
    Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.

    */
    public static var TYPEFLAG_FREVERSEBIND : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FREVERSEBIND());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEFLAGS TYPEFLAG_FPROXY
    /**
    Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.

    */
    public static var TYPEFLAG_FPROXY : dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEFLAGS(val: System_Runtime_InteropServices_ComTypes_TYPEFLAGS_get_TYPEFLAG_FPROXY());
            return __return;
        }
    }
} // TYPEFLAGS


// type: System.Runtime.InteropServices.ComTypes.TYPEKIND
    /**
    Specifies various types of data and functions.

    */
public struct TYPEKIND : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_TYPEKIND_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_ENUM
    /**
    A set of enumerators.

    */
    public static var TKIND_ENUM : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_ENUM());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_RECORD
    /**
    A structure with no methods.

    */
    public static var TKIND_RECORD : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_RECORD());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_MODULE
    /**
    A module that can have only static functions and data (for example, a DLL).

    */
    public static var TKIND_MODULE : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_MODULE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_INTERFACE
    /**
    A type that has virtual functions, all of which are pure.

    */
    public static var TKIND_INTERFACE : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_INTERFACE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_DISPATCH
    /**
    A set of methods and properties that are accessible through . By default, dual interfaces return .

    */
    public static var TKIND_DISPATCH : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_DISPATCH());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_COCLASS
    /**
    A set of implemented components interfaces.

    */
    public static var TKIND_COCLASS : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_COCLASS());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_ALIAS
    /**
    A type that is an alias for another type.

    */
    public static var TKIND_ALIAS : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_ALIAS());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_UNION
    /**
    A union of all members that have an offset of zero.

    */
    public static var TKIND_UNION : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_UNION());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.TYPEKIND TKIND_MAX
    /**
    End-of-enumeration marker.

    */
    public static var TKIND_MAX : dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.TYPEKIND(val: System_Runtime_InteropServices_ComTypes_TYPEKIND_get_TKIND_MAX());
            return __return;
        }
    }
} // TYPEKIND


// type: System.Runtime.InteropServices.ComTypes.TYPELIBATTR
// boxed value type
    /**
    Identifies a particular type library and provides localization support for member names.

    */
public final class TYPELIBATTR
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_TYPELIBATTR_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_TYPELIBATTR_implicit_ctor();
            super.init(hndl: h);
    }
} // TYPELIBATTR


// type: System.Runtime.InteropServices.ComTypes.VARDESC
// boxed value type
    /**
    Describes a variable, constant, or data member.

    */
public final class VARDESC
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_VARDESC_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_VARDESC_implicit_ctor();
            super.init(hndl: h);
    }
} // VARDESC


// type: System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION
// boxed value type
    /**
    Contains information about a variable.

    */
public final class VARDESC_DESCUNION
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_VARDESC_DESCUNION_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Runtime_InteropServices_ComTypes_VARDESC_DESCUNION_implicit_ctor();
            super.init(hndl: h);
    }
} // VARDESC_DESCUNION


// type: System.Runtime.InteropServices.ComTypes.VARFLAGS
    /**
    Identifies the constants that define the properties of a variable.

    */
public struct VARFLAGS : SGBridgeGenericValue {
    let v : Swift.Int16;
    public init(val: Swift.Int16) { self.v = val; }
    public func get_value() -> Swift.Int16 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_VARFLAGS_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int16(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FREADONLY
    /**
    Assignment to the variable should not be allowed.

    */
    public static var VARFLAG_FREADONLY : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FREADONLY());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FSOURCE
    /**
    The variable returns an object that is a source of events.

    */
    public static var VARFLAG_FSOURCE : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FSOURCE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FBINDABLE
    /**
    The variable supports data binding.

    */
    public static var VARFLAG_FBINDABLE : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FBINDABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FREQUESTEDIT
    /**
    When set, any attempt to directly change the property results in a call to . The implementation of  determines if the change is accepted.

    */
    public static var VARFLAG_FREQUESTEDIT : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FREQUESTEDIT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FDISPLAYBIND
    /**
    The variable is displayed to the user as bindable.  must also be set.

    */
    public static var VARFLAG_FDISPLAYBIND : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FDISPLAYBIND());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FDEFAULTBIND
    /**
    The variable is the single property that best represents the object. Only one variable in type information can have this attribute.

    */
    public static var VARFLAG_FDEFAULTBIND : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FDEFAULTBIND());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FHIDDEN
    /**
    The variable should not be displayed to the user in a browser, although it exists and is bindable.

    */
    public static var VARFLAG_FHIDDEN : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FHIDDEN());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FRESTRICTED
    /**
    The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.

    */
    public static var VARFLAG_FRESTRICTED : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FRESTRICTED());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FDEFAULTCOLLELEM
    /**
    Permits an optimization in which the compiler looks for a member named "xyz" on the type of "abc". If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.

    */
    public static var VARFLAG_FDEFAULTCOLLELEM : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FDEFAULTCOLLELEM());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FUIDEFAULT
    /**
    The variable is the default display in the user interface.

    */
    public static var VARFLAG_FUIDEFAULT : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FUIDEFAULT());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FNONBROWSABLE
    /**
    The variable appears in an object browser, but not in a properties browser.

    */
    public static var VARFLAG_FNONBROWSABLE : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FNONBROWSABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FREPLACEABLE
    /**
    Tags the interface as having default behaviors.

    */
    public static var VARFLAG_FREPLACEABLE : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FREPLACEABLE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARFLAGS VARFLAG_FIMMEDIATEBIND
    /**
    The variable is mapped as individual bindable properties.

    */
    public static var VARFLAG_FIMMEDIATEBIND : dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARFLAGS(val: System_Runtime_InteropServices_ComTypes_VARFLAGS_get_VARFLAG_FIMMEDIATEBIND());
            return __return;
        }
    }
} // VARFLAGS


// type: System.Runtime.InteropServices.ComTypes.VARKIND
    /**
    Defines the kind of variable.

    */
public struct VARKIND : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ComTypes_VARKIND_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ComTypes.VARKIND VAR_PERINSTANCE
    /**
    The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.

    */
    public static var VAR_PERINSTANCE : dotnet.System.Runtime.InteropServices.ComTypes.VARKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARKIND(val: System_Runtime_InteropServices_ComTypes_VARKIND_get_VAR_PERINSTANCE());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARKIND VAR_STATIC
    /**
    There is only one instance of the variable.

    */
    public static var VAR_STATIC : dotnet.System.Runtime.InteropServices.ComTypes.VARKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARKIND(val: System_Runtime_InteropServices_ComTypes_VARKIND_get_VAR_STATIC());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARKIND VAR_CONST
    /**
    The  structure describes a symbolic constant. There is no memory associated with it.

    */
    public static var VAR_CONST : dotnet.System.Runtime.InteropServices.ComTypes.VARKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARKIND(val: System_Runtime_InteropServices_ComTypes_VARKIND_get_VAR_CONST());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ComTypes.VARKIND VAR_DISPATCH
    /**
    The variable can be accessed only through .

    */
    public static var VAR_DISPATCH : dotnet.System.Runtime.InteropServices.ComTypes.VARKIND {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ComTypes.VARKIND(val: System_Runtime_InteropServices_ComTypes_VARKIND_get_VAR_DISPATCH());
            return __return;
        }
    }
} // VARKIND


}

// System.Runtime.InteropServices.ObjectiveC
extension System.Runtime.InteropServices.ObjectiveC {
// type: System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal
public struct ObjectiveCMarshal {
    // void SetMessageSendCallback(System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction, System.IntPtr)
// docid: M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.SetMessageSendCallback(System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction,System.IntPtr)
    public static func SetMessageSendCallback(msgSendFunction : dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction, func_ : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_void__SetMessageSendCallback_0__2__MessageSendFunction_IntPtr(&__thrown, msgSendFunction.get_value(), func_.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetMessageSendPendingException(System.Exception)
// docid: M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.SetMessageSendPendingException(System.Exception)
    public static func SetMessageSendPendingException(exception : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_void__SetMessageSendPendingException_0__1__Exception(&__thrown, exception?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ObjectiveCMarshal


// type: System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+MessageSendFunction
public struct ObjectiveCMarshal_MessageSendFunction : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_MessageSendFunction_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+MessageSendFunction MsgSend
    public static var MsgSend : dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction(val: System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_MessageSendFunction_get_MsgSend());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+MessageSendFunction MsgSendFpret
    public static var MsgSendFpret : dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction(val: System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_MessageSendFunction_get_MsgSendFpret());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+MessageSendFunction MsgSendStret
    public static var MsgSendStret : dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction(val: System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_MessageSendFunction_get_MsgSendStret());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+MessageSendFunction MsgSendSuper
    public static var MsgSendSuper : dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction(val: System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_MessageSendFunction_get_MsgSendSuper());
            return __return;
        }
    }
    // static field: System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+MessageSendFunction MsgSendSuperStret
    public static var MsgSendSuperStret : dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction {
        get {
        let __return = dotnet.System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal_MessageSendFunction(val: System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_MessageSendFunction_get_MsgSendSuperStret());
            return __return;
        }
    }
} // ObjectiveCMarshal_MessageSendFunction


// type: System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal+UnhandledExceptionPropagationHandler
public final class ObjectiveCMarshal_UnhandledExceptionPropagationHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ObjectiveC_ObjectiveCMarshal_UnhandledExceptionPropagationHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // ObjectiveCMarshal_UnhandledExceptionPropagationHandler


// type: System.Runtime.InteropServices.ObjectiveC.ObjectiveCTrackedTypeAttribute
public final class ObjectiveCTrackedTypeAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_InteropServices_ObjectiveC_ObjectiveCTrackedTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCTrackedTypeAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_InteropServices_ObjectiveC_ObjectiveCTrackedTypeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ObjectiveCTrackedTypeAttribute


}



// System.Security
extension System.Security {
// type: System.Security.SecureString
    /**
    Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.

    */
public final class SecureString
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_SecureString_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.SecureString.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_SecureString_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Char*, System.Int32)
// docid: M:System.Security.SecureString.#ctor(System.Char*,System.Int32)
    /**
    Initializes a new instance of the  class from a subarray of  objects.  
  
 This constructor is not CLS-compliant. The CLS-compliant alternative is .

    - Parameter value: A pointer to an array of  objects.
    - Parameter length: The number of elements of  to include in the new instance.
    */
    public init(value : UnsafeMutablePointer<Swift.Int16>?, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_SecureString_ctor_0__2__pchar_i32(&__thrown, value, length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AppendChar(System.Char)
// docid: M:System.Security.SecureString.AppendChar(System.Char)
    /**
    Appends a character to the end of the current secure string.

    - Parameter c: A character to append to this secure string.
    */
    public func AppendChar(c : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Security_SecureString_void__AppendChar_0__1__Char(&__thrown, self.get_handle(), c.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Security.SecureString.Clear
    /**
    Deletes the value of the current secure string.

    */
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Security_SecureString_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.SecureString Copy()
// docid: M:System.Security.SecureString.Copy
    /**
    Creates a copy of the current secure string.

    - Returns: A duplicate of this secure string.

    */
    public func Copy() throws -> dotnet.System.Security.SecureString {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_SecureString_SecureString__Copy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.SecureString(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:System.Security.SecureString.Dispose
    /**
    Releases all resources used by the current  object.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Security_SecureString_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertAt(System.Int32, System.Char)
// docid: M:System.Security.SecureString.InsertAt(System.Int32,System.Char)
    /**
    Inserts a character in this secure string at the specified index position.

    - Parameter index: The index position where parameter  is inserted.
    - Parameter c: The character to insert.
    */
    public func InsertAt(index : Swift.Int32, c : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Security_SecureString_void__InsertAt_0__2__i32_Char(&__thrown, self.get_handle(), index, c.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsReadOnly()
// docid: M:System.Security.SecureString.IsReadOnly
    /**
    Indicates whether this secure string is marked read-only.

    - Returns: 
         if this secure string is marked read-only; otherwise, .

    */
    public func IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_SecureString_bool__IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void MakeReadOnly()
// docid: M:System.Security.SecureString.MakeReadOnly
    /**
    Makes the text value of this secure string read-only.

    */
    public func MakeReadOnly() throws {
        var __thrown : NullableHandle = nil;
        System_Security_SecureString_void__MakeReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Security.SecureString.RemoveAt(System.Int32)
    /**
    Removes the character at the specified index position from this secure string.

    - Parameter index: The index position of a character in this secure string.
    */
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_SecureString_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAt(System.Int32, System.Char)
// docid: M:System.Security.SecureString.SetAt(System.Int32,System.Char)
    /**
    Replaces the existing character at the specified index position with another character.

    - Parameter index: The index position of an existing character in this secure string
    - Parameter c: A character that replaces the existing character.
    */
    public func SetAt(index : Swift.Int32, c : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Security_SecureString_void__SetAt_0__2__i32_Char(&__thrown, self.get_handle(), index, c.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.Security.SecureString.get_Length
    public func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_SecureString_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of characters in the current secure string.

    */
    public var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
} // SecureString


// type: System.Security.SecureStringMarshal
public struct SecureStringMarshal {
    // System.IntPtr SecureStringToCoTaskMemAnsi(System.Security.SecureString)
// docid: M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)
    /**
    Copies the contents of a managed  object to a block of memory allocated from the unmanaged COM task allocator.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, where the  parameter was copied to, or 0 if a null object was supplied.

    */
    public static func SecureStringToCoTaskMemAnsi(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_SecureStringMarshal_IntPtr__SecureStringToCoTaskMemAnsi_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr SecureStringToCoTaskMemUnicode(System.Security.SecureString)
// docid: M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)
    /**
    Copies the contents of a managed  object to a block of memory allocated from the unmanaged COM task allocator.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, where the  parameter was copied to, or 0 if a null object was supplied.

    */
    public static func SecureStringToCoTaskMemUnicode(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_SecureStringMarshal_IntPtr__SecureStringToCoTaskMemUnicode_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr SecureStringToGlobalAllocAnsi(System.Security.SecureString)
// docid: M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)
    /**
    Copies the contents of a managed  into unmanaged memory, converting into ANSI format as it copies.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, to where the  parameter was copied, or 0 if a null object was supplied.

    */
    public static func SecureStringToGlobalAllocAnsi(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_SecureStringMarshal_IntPtr__SecureStringToGlobalAllocAnsi_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // System.IntPtr SecureStringToGlobalAllocUnicode(System.Security.SecureString)
// docid: M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)
    /**
    Copies the contents of a managed  object into unmanaged memory.

    - Parameter s: The managed object to copy.
    - Returns: The address, in unmanaged memory, where  was copied, or 0 if  is a  object whose length is 0.

    */
    public static func SecureStringToGlobalAllocUnicode(s : dotnet.System.Security.SecureString) throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_SecureStringMarshal_IntPtr__SecureStringToGlobalAllocUnicode_0__1__SecureString(&__thrown, s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
} // SecureStringMarshal


}


public protocol System_Runtime_InteropServices_ComTypes_IAdviseSink
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IBindCtx
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IConnectionPoint
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IConnectionPointContainer
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IDataObject
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IEnumConnectionPoints
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IEnumConnections
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IEnumFORMATETC
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IEnumMoniker
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IEnumSTATDATA
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IEnumString
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IEnumVARIANT
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IMoniker
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IPersistFile
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IRunningObjectTable
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_IStream
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_ITypeComp
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_ITypeInfo
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_ITypeInfo2
    :
    System_Runtime_InteropServices_ComTypes_ITypeInfo
{
}

public protocol System_Runtime_InteropServices_ComTypes_ITypeLib
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ComTypes_ITypeLib2
    :
    System_Runtime_InteropServices_ComTypes_ITypeLib
{
}

public protocol System_Runtime_InteropServices_ICustomAdapter
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ICustomFactory
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ICustomMarshaler
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_ICustomQueryInterface
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_InteropServices_IDynamicInterfaceCastable
    :
    SGBridgeGetHandle
{
}

