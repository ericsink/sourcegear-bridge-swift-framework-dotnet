// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
extension System.Net {
// type: System.Net.BindIPEndPoint
    /**
    Represents the method that specifies a local Internet Protocol address and port number for a .

    */
public final class BindIPEndPoint
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_BindIPEndPoint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Net.IPEndPoint Invoke(System.Net.ServicePoint, System.Net.IPEndPoint, System.Int32)
// docid: M:System.Net.BindIPEndPoint.Invoke(System.Net.ServicePoint,System.Net.IPEndPoint,System.Int32)
    public func Invoke(servicePoint : dotnet.System.Net.ServicePoint, remoteEndPoint : dotnet.System.Net.IPEndPoint, retryCount : Swift.Int32) throws -> dotnet.System.Net.IPEndPoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_BindIPEndPoint_IPEndPoint__Invoke_0__3__ServicePoint_IPEndPoint_i32(&__thrown, self.get_handle(), servicePoint.get_handle(), remoteEndPoint.get_handle(), retryCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPEndPoint(hndl : __return);
        }
    }
    // System.IAsyncResult BeginInvoke(System.Net.ServicePoint, System.Net.IPEndPoint, System.Int32, System.AsyncCallback, System.Object)
// docid: M:System.Net.BindIPEndPoint.BeginInvoke(System.Net.ServicePoint,System.Net.IPEndPoint,System.Int32,System.AsyncCallback,System.Object)
    public func BeginInvoke(servicePoint : dotnet.System.Net.ServicePoint, remoteEndPoint : dotnet.System.Net.IPEndPoint, retryCount : Swift.Int32, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_BindIPEndPoint_IAsyncResult__BeginInvoke_0__5__ServicePoint_IPEndPoint_i32_AsyncCallback_Object(&__thrown, self.get_handle(), servicePoint.get_handle(), remoteEndPoint.get_handle(), retryCount, callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Net.IPEndPoint EndInvoke(System.IAsyncResult)
// docid: M:System.Net.BindIPEndPoint.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> dotnet.System.Net.IPEndPoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_BindIPEndPoint_IPEndPoint__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPEndPoint(hndl : __return);
        }
    }
    public init(_ callback : @escaping (dotnet.System.Net.ServicePoint, dotnet.System.Net.IPEndPoint, Swift.Int32) throws -> dotnet.System.Net.IPEndPoint) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle, Swift.Int32) -> NonnullHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, servicePoint : NonnullHandle, remoteEndPoint : NonnullHandle, retryCount : Swift.Int32) -> NonnullHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback(dotnet.System.Net.ServicePoint(hndl: servicePoint), dotnet.System.Net.IPEndPoint(hndl: remoteEndPoint), retryCount);
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, servicePoint : NonnullHandle, remoteEndPoint : NonnullHandle, retryCount : Swift.Int32) -> NonnullHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle, Swift.Int32) -> NonnullHandle;
            return f(thrown, servicePoint, remoteEndPoint, retryCount);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_BindIPEndPoint_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.IPEndPoint Invoke(System.Net.ServicePoint, System.Net.IPEndPoint, System.Int32)
// docid: M:System.Net.BindIPEndPoint.Invoke(System.Net.ServicePoint,System.Net.IPEndPoint,System.Int32)
    public func callAsFunction(servicePoint : dotnet.System.Net.ServicePoint, remoteEndPoint : dotnet.System.Net.IPEndPoint, retryCount : Swift.Int32) throws -> dotnet.System.Net.IPEndPoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_BindIPEndPoint_IPEndPoint__Invoke_0__3__ServicePoint_IPEndPoint_i32(&__thrown, self.get_handle(), servicePoint.get_handle(), remoteEndPoint.get_handle(), retryCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPEndPoint(hndl : __return);
        }
    }
} // BindIPEndPoint


// type: System.Net.SecurityProtocolType
    /**
    Specifies the security protocols that are supported by the Schannel security package.

    */
public struct SecurityProtocolType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_SecurityProtocolType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.SecurityProtocolType SystemDefault
    /**
    Allows the operating system to choose the best protocol to use, and to block protocols that are not secure. Unless your app has a specific reason not to, you should use this value.

    */
    public static var SystemDefault : dotnet.System.Net.SecurityProtocolType {
        get {
        let __return = dotnet.System.Net.SecurityProtocolType(val: System_Net_SecurityProtocolType_get_SystemDefault());
            return __return;
        }
    }
    // static field: System.Net.SecurityProtocolType Ssl3
    /**
    Specifies the Secure Socket Layer (SSL) 3.0 security protocol. SSL 3.0 has been superseded by the Transport Layer Security (TLS) protocol and is provided for backward compatibility only.

    */
    public static var Ssl3 : dotnet.System.Net.SecurityProtocolType {
        get {
        let __return = dotnet.System.Net.SecurityProtocolType(val: System_Net_SecurityProtocolType_get_Ssl3());
            return __return;
        }
    }
    // static field: System.Net.SecurityProtocolType Tls
    /**
    Specifies the Transport Layer Security (TLS) 1.0 security protocol. The TLS 1.0 protocol is defined in IETF RFC 2246.

    */
    public static var Tls : dotnet.System.Net.SecurityProtocolType {
        get {
        let __return = dotnet.System.Net.SecurityProtocolType(val: System_Net_SecurityProtocolType_get_Tls());
            return __return;
        }
    }
    // static field: System.Net.SecurityProtocolType Tls11
    /**
    Specifies the Transport Layer Security (TLS) 1.1 security protocol. The TLS 1.1 protocol is defined in IETF RFC 4346. On Windows systems, this value is supported starting with Windows 7.

    */
    public static var Tls11 : dotnet.System.Net.SecurityProtocolType {
        get {
        let __return = dotnet.System.Net.SecurityProtocolType(val: System_Net_SecurityProtocolType_get_Tls11());
            return __return;
        }
    }
    // static field: System.Net.SecurityProtocolType Tls12
    /**
    Specifies the Transport Layer Security (TLS) 1.2 security protocol. The TLS 1.2 protocol is defined in IETF RFC 5246. On Windows systems, this value is supported starting with Windows 7.

    */
    public static var Tls12 : dotnet.System.Net.SecurityProtocolType {
        get {
        let __return = dotnet.System.Net.SecurityProtocolType(val: System_Net_SecurityProtocolType_get_Tls12());
            return __return;
        }
    }
    // static field: System.Net.SecurityProtocolType Tls13
    /**
    Specifies the TLS 1.3 security protocol. The TLS protocol is defined in IETF RFC 8446.

    */
    public static var Tls13 : dotnet.System.Net.SecurityProtocolType {
        get {
        let __return = dotnet.System.Net.SecurityProtocolType(val: System_Net_SecurityProtocolType_get_Tls13());
            return __return;
        }
    }
} // SecurityProtocolType


// type: System.Net.ServicePoint
    /**
    Provides connection management for HTTP connections.

    */
open class ServicePoint
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_ServicePoint_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool CloseConnectionGroup(System.String)
// docid: M:System.Net.ServicePoint.CloseConnectionGroup(System.String)
    /**
    Removes the specified connection group from this  object.

    - Parameter connectionGroupName: The name of the connection group that contains the connections to close and remove from this service point.
    - Returns: A  value that indicates whether the connection group was closed.

    */
    open func CloseConnectionGroup(connectionGroupName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_bool__CloseConnectionGroup_0__1__String(&__thrown, self.get_handle(), connectionGroupName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void SetTcpKeepAlive(bool, System.Int32, System.Int32)
// docid: M:System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
    /**
    Enables or disables the keep-alive option on a TCP connection.

    - Parameter enabled: If set to true, then the TCP keep-alive option on a TCP connection will be enabled using the specified  and  values.  
  
 If set to false, then the TCP keep-alive option is disabled and the remaining parameters are ignored.  
  
 The default value is false.
    - Parameter keepAliveTime: Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.  
  
 The value must be greater than 0.  If a value of less than or equal to zero is passed an  is thrown.
    - Parameter keepAliveInterval: Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.  
  
 The value must be greater than 0.  If a value of less than or equal to zero is passed an  is thrown.
    */
    open func SetTcpKeepAlive(enabled : Bool, keepAliveTime : Swift.Int32, keepAliveInterval : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePoint_void__SetTcpKeepAlive_0__3__bool_i32_i32(&__thrown, self.get_handle(), Swift.Int32(enabled ? 1 : 0), keepAliveTime, keepAliveInterval);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_Address()
// docid: M:System.Net.ServicePoint.get_Address
    open func get_Address() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_Uri__get_Address_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.BindIPEndPoint get_BindIPEndPointDelegate()
// docid: M:System.Net.ServicePoint.get_BindIPEndPointDelegate
    open func get_BindIPEndPointDelegate() throws -> Optional<dotnet.System.Net.BindIPEndPoint> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_BindIPEndPoint__get_BindIPEndPointDelegate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.BindIPEndPoint(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BindIPEndPointDelegate(System.Net.BindIPEndPoint)
// docid: M:System.Net.ServicePoint.set_BindIPEndPointDelegate(System.Net.BindIPEndPoint)
    open func set_BindIPEndPointDelegate(value : Optional<dotnet.System.Net.BindIPEndPoint>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePoint_void__set_BindIPEndPointDelegate_0__1__BindIPEndPoint(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_BindIPEndPointDelegate(value : @escaping (dotnet.System.Net.ServicePoint, dotnet.System.Net.IPEndPoint, Swift.Int32) throws -> dotnet.System.Net.IPEndPoint) throws {
        let del_value = try dotnet.System.Net.BindIPEndPoint(value);
        return try set_BindIPEndPointDelegate(value: del_value);
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509Certificate get_Certificate()
// docid: M:System.Net.ServicePoint.get_Certificate
    open func get_Certificate() throws -> Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_X509Certificate__get_Certificate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.X509Certificates.X509Certificate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509Certificate get_ClientCertificate()
// docid: M:System.Net.ServicePoint.get_ClientCertificate
    open func get_ClientCertificate() throws -> Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_X509Certificate__get_ClientCertificate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.X509Certificates.X509Certificate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_ConnectionLeaseTimeout()
// docid: M:System.Net.ServicePoint.get_ConnectionLeaseTimeout
    open func get_ConnectionLeaseTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_i32__get_ConnectionLeaseTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ConnectionLeaseTimeout(System.Int32)
// docid: M:System.Net.ServicePoint.set_ConnectionLeaseTimeout(System.Int32)
    open func set_ConnectionLeaseTimeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePoint_void__set_ConnectionLeaseTimeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ConnectionLimit()
// docid: M:System.Net.ServicePoint.get_ConnectionLimit
    open func get_ConnectionLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_i32__get_ConnectionLimit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ConnectionLimit(System.Int32)
// docid: M:System.Net.ServicePoint.set_ConnectionLimit(System.Int32)
    open func set_ConnectionLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePoint_void__set_ConnectionLimit_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ConnectionName()
// docid: M:System.Net.ServicePoint.get_ConnectionName
    open func get_ConnectionName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_String__get_ConnectionName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_CurrentConnections()
// docid: M:System.Net.ServicePoint.get_CurrentConnections
    open func get_CurrentConnections() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_i32__get_CurrentConnections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_Expect100Continue()
// docid: M:System.Net.ServicePoint.get_Expect100Continue
    open func get_Expect100Continue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_bool__get_Expect100Continue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Expect100Continue(bool)
// docid: M:System.Net.ServicePoint.set_Expect100Continue(System.Boolean)
    open func set_Expect100Continue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePoint_void__set_Expect100Continue_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.DateTime get_IdleSince()
// docid: M:System.Net.ServicePoint.get_IdleSince
    open func get_IdleSince() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_DateTime__get_IdleSince_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxIdleTime()
// docid: M:System.Net.ServicePoint.get_MaxIdleTime
    open func get_MaxIdleTime() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_i32__get_MaxIdleTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxIdleTime(System.Int32)
// docid: M:System.Net.ServicePoint.set_MaxIdleTime(System.Int32)
    open func set_MaxIdleTime(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePoint_void__set_MaxIdleTime_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Version get_ProtocolVersion()
// docid: M:System.Net.ServicePoint.get_ProtocolVersion
    open func get_ProtocolVersion() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_Version__get_ProtocolVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_ReceiveBufferSize()
// docid: M:System.Net.ServicePoint.get_ReceiveBufferSize
    open func get_ReceiveBufferSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_i32__get_ReceiveBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ReceiveBufferSize(System.Int32)
// docid: M:System.Net.ServicePoint.set_ReceiveBufferSize(System.Int32)
    open func set_ReceiveBufferSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePoint_void__set_ReceiveBufferSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SupportsPipelining()
// docid: M:System.Net.ServicePoint.get_SupportsPipelining
    open func get_SupportsPipelining() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_bool__get_SupportsPipelining_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_UseNagleAlgorithm()
// docid: M:System.Net.ServicePoint.get_UseNagleAlgorithm
    open func get_UseNagleAlgorithm() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePoint_bool__get_UseNagleAlgorithm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseNagleAlgorithm(bool)
// docid: M:System.Net.ServicePoint.set_UseNagleAlgorithm(System.Boolean)
    open func set_UseNagleAlgorithm(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePoint_void__set_UseNagleAlgorithm_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the Uniform Resource Identifier (URI) of the server that this  object connects to.

    */
    open var Address : dotnet.System.Uri {
        get {
            return try! get_Address();
        }
    }
    /**
    Specifies the delegate to associate a local  with a .

    */
    open var BindIPEndPointDelegate : Optional<dotnet.System.Net.BindIPEndPoint> {
        get {
            return try! get_BindIPEndPointDelegate();
        }
        set(v) {
            return try! set_BindIPEndPointDelegate(value: v!);
        }
    }
    /**
    Gets the certificate received for this  object.

    */
    open var Certificate : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate> {
        get {
            return try! get_Certificate();
        }
    }
    /**
    Gets the last client certificate sent to the server.

    */
    open var ClientCertificate : Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate> {
        get {
            return try! get_ClientCertificate();
        }
    }
    /**
    Gets or sets the number of milliseconds after which an active  connection is closed.

    */
    open var ConnectionLeaseTimeout : Swift.Int32 {
        get {
            return try! get_ConnectionLeaseTimeout();
        }
        set(v) {
            return try! set_ConnectionLeaseTimeout(value: v);
        }
    }
    /**
    Gets or sets the maximum number of connections allowed on this  object.

    */
    open var ConnectionLimit : Swift.Int32 {
        get {
            return try! get_ConnectionLimit();
        }
        set(v) {
            return try! set_ConnectionLimit(value: v);
        }
    }
    /**
    Gets the connection name.

    */
    open var ConnectionName : dotnet.System.String {
        get {
            return try! get_ConnectionName();
        }
    }
    /**
    Gets the number of open connections associated with this  object.

    */
    open var CurrentConnections : Swift.Int32 {
        get {
            return try! get_CurrentConnections();
        }
    }
    /**
    Gets or sets a  value that determines whether 100-Continue behavior is used.

    */
    open var Expect100Continue : Bool {
        get {
            return try! get_Expect100Continue();
        }
        set(v) {
            return try! set_Expect100Continue(value: v);
        }
    }
    /**
    Gets the date and time that the  object was last connected to a host.

    */
    open var IdleSince : dotnet.System.DateTime {
        get {
            return try! get_IdleSince();
        }
    }
    /**
    Gets or sets the amount of time a connection associated with the  object can remain idle before the connection is closed.

    */
    open var MaxIdleTime : Swift.Int32 {
        get {
            return try! get_MaxIdleTime();
        }
        set(v) {
            return try! set_MaxIdleTime(value: v);
        }
    }
    /**
    Gets the version of the HTTP protocol that the  object uses.

    */
    open var ProtocolVersion : dotnet.System.Version {
        get {
            return try! get_ProtocolVersion();
        }
    }
    /**
    Gets or sets the size of the receiving buffer for the socket used by this .

    */
    open var ReceiveBufferSize : Swift.Int32 {
        get {
            return try! get_ReceiveBufferSize();
        }
        set(v) {
            return try! set_ReceiveBufferSize(value: v);
        }
    }
    /**
    Indicates whether the  object supports pipelined connections.

    */
    open var SupportsPipelining : Bool {
        get {
            return try! get_SupportsPipelining();
        }
    }
    /**
    Gets or sets a  value that determines whether the Nagle algorithm is used on connections managed by this  object.

    */
    open var UseNagleAlgorithm : Bool {
        get {
            return try! get_UseNagleAlgorithm();
        }
        set(v) {
            return try! set_UseNagleAlgorithm(value: v);
        }
    }
} // ServicePoint


// type: System.Net.ServicePointManager
    /**
    Manages the collection of  objects.

    */
open class ServicePointManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_ServicePointManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 DefaultNonPersistentConnectionLimit
    /**
    The default number of non-persistent connections (4) allowed on a  object connected to an HTTP/1.0 or later server. This field is constant but is no longer used in the .NET Framework 2.0.

    */
    open class var DefaultNonPersistentConnectionLimit : Swift.Int32 {
        get {
        let __return = System_Net_ServicePointManager_get_DefaultNonPersistentConnectionLimit();
            return __return;
        }
    }
    // static field: System.Int32 DefaultPersistentConnectionLimit
    /**
    The default number of persistent connections (2) allowed on a  object connected to an HTTP/1.1 or later server. This field is constant and is used to initialize the  property if the value of the  property has not been set either directly or through configuration.

    */
    open class var DefaultPersistentConnectionLimit : Swift.Int32 {
        get {
        let __return = System_Net_ServicePointManager_get_DefaultPersistentConnectionLimit();
            return __return;
        }
    }
    // System.Net.ServicePoint FindServicePoint(System.String, System.Net.IWebProxy)
// docid: M:System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
    /**
    Finds an existing  object or creates a new  object to manage communications with the specified Uniform Resource Identifier (URI).

    - Parameter uriString: The URI of the Internet resource to be contacted.
    - Parameter proxy: The proxy data for this request.
    - Returns: The  object that manages communications for the request.

    */
    open class func FindServicePoint(uriString : dotnet.System.String, proxy : Optional<dotnet.System.Net.IWebProxy>) throws -> dotnet.System.Net.ServicePoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_ServicePoint__FindServicePoint_0__2__String_IWebProxy(&__thrown, uriString.get_handle(), proxy?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.ServicePoint(hndl : __return);
        }
    }
    // System.Net.ServicePoint FindServicePoint(System.Uri)
// docid: M:System.Net.ServicePointManager.FindServicePoint(System.Uri)
    /**
    Finds an existing  object or creates a new  object to manage communications with the specified  object.

    - Parameter address: The  object of the Internet resource to contact.
    - Returns: The  object that manages communications for the request.

    */
    open class func FindServicePoint(address : dotnet.System.Uri) throws -> dotnet.System.Net.ServicePoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_ServicePoint__FindServicePoint_0__1__Uri(&__thrown, address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.ServicePoint(hndl : __return);
        }
    }
    // System.Net.ServicePoint FindServicePoint(System.Uri, System.Net.IWebProxy)
// docid: M:System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
    /**
    Finds an existing  object or creates a new  object to manage communications with the specified  object.

    - Parameter address: A  object that contains the address of the Internet resource to contact.
    - Parameter proxy: The proxy data for this request.
    - Returns: The  object that manages communications for the request.

    */
    open class func FindServicePoint(address : dotnet.System.Uri, proxy : Optional<dotnet.System.Net.IWebProxy>) throws -> dotnet.System.Net.ServicePoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_ServicePoint__FindServicePoint_0__2__Uri_IWebProxy(&__thrown, address.get_handle(), proxy?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.ServicePoint(hndl : __return);
        }
    }
    // void SetTcpKeepAlive(bool, System.Int32, System.Int32)
// docid: M:System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
    /**
    Enables or disables the keep-alive option on a TCP connection.

    - Parameter enabled: If set to true, then the TCP keep-alive option on a TCP connection will be enabled using the specified  and  values.  
  
 If set to false, then the TCP keep-alive option is disabled and the remaining parameters are ignored.  
  
 The default value is false.
    - Parameter keepAliveTime: Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.  
  
 The value must be greater than 0.  If a value of less than or equal to zero is passed an  is thrown.
    - Parameter keepAliveInterval: Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.  
  
 The value must be greater than 0.  If a value of less than or equal to zero is passed an  is thrown.
    */
    open class func SetTcpKeepAlive(enabled : Bool, keepAliveTime : Swift.Int32, keepAliveInterval : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__SetTcpKeepAlive_0__3__bool_i32_i32(&__thrown, Swift.Int32(enabled ? 1 : 0), keepAliveTime, keepAliveInterval);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CheckCertificateRevocationList()
// docid: M:System.Net.ServicePointManager.get_CheckCertificateRevocationList
    open class func get_CheckCertificateRevocationList() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_bool__get_CheckCertificateRevocationList_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CheckCertificateRevocationList(bool)
// docid: M:System.Net.ServicePointManager.set_CheckCertificateRevocationList(System.Boolean)
    open class func set_CheckCertificateRevocationList(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_CheckCertificateRevocationList_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_DefaultConnectionLimit()
// docid: M:System.Net.ServicePointManager.get_DefaultConnectionLimit
    open class func get_DefaultConnectionLimit() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_i32__get_DefaultConnectionLimit_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DefaultConnectionLimit(System.Int32)
// docid: M:System.Net.ServicePointManager.set_DefaultConnectionLimit(System.Int32)
    open class func set_DefaultConnectionLimit(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_DefaultConnectionLimit_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_DnsRefreshTimeout()
// docid: M:System.Net.ServicePointManager.get_DnsRefreshTimeout
    open class func get_DnsRefreshTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_i32__get_DnsRefreshTimeout_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DnsRefreshTimeout(System.Int32)
// docid: M:System.Net.ServicePointManager.set_DnsRefreshTimeout(System.Int32)
    open class func set_DnsRefreshTimeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_DnsRefreshTimeout_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableDnsRoundRobin()
// docid: M:System.Net.ServicePointManager.get_EnableDnsRoundRobin
    open class func get_EnableDnsRoundRobin() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_bool__get_EnableDnsRoundRobin_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableDnsRoundRobin(bool)
// docid: M:System.Net.ServicePointManager.set_EnableDnsRoundRobin(System.Boolean)
    open class func set_EnableDnsRoundRobin(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_EnableDnsRoundRobin_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Security.EncryptionPolicy get_EncryptionPolicy()
// docid: M:System.Net.ServicePointManager.get_EncryptionPolicy
    open class func get_EncryptionPolicy() throws -> dotnet.System.Net.Security.EncryptionPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_EncryptionPolicy__get_EncryptionPolicy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Security.EncryptionPolicy(val: __return);
        }
    }
    // [IsSpecialName] bool get_Expect100Continue()
// docid: M:System.Net.ServicePointManager.get_Expect100Continue
    open class func get_Expect100Continue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_bool__get_Expect100Continue_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Expect100Continue(bool)
// docid: M:System.Net.ServicePointManager.set_Expect100Continue(System.Boolean)
    open class func set_Expect100Continue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_Expect100Continue_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxServicePointIdleTime()
// docid: M:System.Net.ServicePointManager.get_MaxServicePointIdleTime
    open class func get_MaxServicePointIdleTime() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_i32__get_MaxServicePointIdleTime_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxServicePointIdleTime(System.Int32)
// docid: M:System.Net.ServicePointManager.set_MaxServicePointIdleTime(System.Int32)
    open class func set_MaxServicePointIdleTime(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_MaxServicePointIdleTime_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxServicePoints()
// docid: M:System.Net.ServicePointManager.get_MaxServicePoints
    open class func get_MaxServicePoints() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_i32__get_MaxServicePoints_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxServicePoints(System.Int32)
// docid: M:System.Net.ServicePointManager.set_MaxServicePoints(System.Int32)
    open class func set_MaxServicePoints(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_MaxServicePoints_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ReusePort()
// docid: M:System.Net.ServicePointManager.get_ReusePort
    open class func get_ReusePort() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_bool__get_ReusePort_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ReusePort(bool)
// docid: M:System.Net.ServicePointManager.set_ReusePort(System.Boolean)
    open class func set_ReusePort(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_ReusePort_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.SecurityProtocolType get_SecurityProtocol()
// docid: M:System.Net.ServicePointManager.get_SecurityProtocol
    open class func get_SecurityProtocol() throws -> dotnet.System.Net.SecurityProtocolType {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_SecurityProtocolType__get_SecurityProtocol_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.SecurityProtocolType(val: __return);
        }
    }
    // [IsSpecialName] void set_SecurityProtocol(System.Net.SecurityProtocolType)
// docid: M:System.Net.ServicePointManager.set_SecurityProtocol(System.Net.SecurityProtocolType)
    open class func set_SecurityProtocol(value : dotnet.System.Net.SecurityProtocolType) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_SecurityProtocol_0__1__SecurityProtocolType(&__thrown, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Security.RemoteCertificateValidationCallback get_ServerCertificateValidationCallback()
// docid: M:System.Net.ServicePointManager.get_ServerCertificateValidationCallback
    open class func get_ServerCertificateValidationCallback() throws -> Optional<dotnet.System.Net.Security.RemoteCertificateValidationCallback> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_RemoteCertificateValidationCallback__get_ServerCertificateValidationCallback_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Security.RemoteCertificateValidationCallback(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ServerCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)
// docid: M:System.Net.ServicePointManager.set_ServerCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)
    open class func set_ServerCertificateValidationCallback(value : Optional<dotnet.System.Net.Security.RemoteCertificateValidationCallback>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_ServerCertificateValidationCallback_0__1__RemoteCertificateValidationCallback(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func set_ServerCertificateValidationCallback(value : @escaping (dotnet.System.Object, Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate>, Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Chain>, dotnet.System.Net.Security.SslPolicyErrors) throws -> Bool) throws {
        let del_value = try dotnet.System.Net.Security.RemoteCertificateValidationCallback(value);
        return try set_ServerCertificateValidationCallback(value: del_value);
    }
    // [IsSpecialName] bool get_UseNagleAlgorithm()
// docid: M:System.Net.ServicePointManager.get_UseNagleAlgorithm
    open class func get_UseNagleAlgorithm() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ServicePointManager_bool__get_UseNagleAlgorithm_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseNagleAlgorithm(bool)
// docid: M:System.Net.ServicePointManager.set_UseNagleAlgorithm(System.Boolean)
    open class func set_UseNagleAlgorithm(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ServicePointManager_void__set_UseNagleAlgorithm_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a  value that indicates whether the certificate is checked against the certificate authority revocation list.

    */
    public static var CheckCertificateRevocationList : Bool {
        get {
            return try! get_CheckCertificateRevocationList();
        }
        set(v) {
            return try! set_CheckCertificateRevocationList(value: v);
        }
    }
    /**
    Gets or sets the maximum number of concurrent connections allowed by a  object.

    */
    public static var DefaultConnectionLimit : Swift.Int32 {
        get {
            return try! get_DefaultConnectionLimit();
        }
        set(v) {
            return try! set_DefaultConnectionLimit(value: v);
        }
    }
    /**
    Gets or sets a value that indicates how long a Domain Name Service (DNS) resolution is considered valid.

    */
    public static var DnsRefreshTimeout : Swift.Int32 {
        get {
            return try! get_DnsRefreshTimeout();
        }
        set(v) {
            return try! set_DnsRefreshTimeout(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether a Domain Name Service (DNS) resolution rotates among the applicable Internet Protocol (IP) addresses.

    */
    public static var EnableDnsRoundRobin : Bool {
        get {
            return try! get_EnableDnsRoundRobin();
        }
        set(v) {
            return try! set_EnableDnsRoundRobin(value: v);
        }
    }
    /**
    Gets the  for this  instance.

    */
    public static var EncryptionPolicy : dotnet.System.Net.Security.EncryptionPolicy {
        get {
            return try! get_EncryptionPolicy();
        }
    }
    /**
    Gets or sets a  value that determines whether 100-Continue behavior is used.

    */
    public static var Expect100Continue : Bool {
        get {
            return try! get_Expect100Continue();
        }
        set(v) {
            return try! set_Expect100Continue(value: v);
        }
    }
    /**
    Gets or sets the maximum idle time of a  object.

    */
    public static var MaxServicePointIdleTime : Swift.Int32 {
        get {
            return try! get_MaxServicePointIdleTime();
        }
        set(v) {
            return try! set_MaxServicePointIdleTime(value: v);
        }
    }
    /**
    Gets or sets the maximum number of  objects to maintain at any time.

    */
    public static var MaxServicePoints : Swift.Int32 {
        get {
            return try! get_MaxServicePoints();
        }
        set(v) {
            return try! set_MaxServicePoints(value: v);
        }
    }
    /**
    Setting this property value to  causes all outbound TCP connections from HttpWebRequest to use the native socket option SO_REUSE_UNICASTPORT on the socket. This causes the underlying outgoing ports to be shared. This is useful for scenarios where a large number of outgoing connections are made in a short time, and the app risks running out of ports.

    */
    public static var ReusePort : Bool {
        get {
            return try! get_ReusePort();
        }
        set(v) {
            return try! set_ReusePort(value: v);
        }
    }
    /**
    Gets or sets the security protocol used by the  objects managed by the  object.

    */
    public static var SecurityProtocol : dotnet.System.Net.SecurityProtocolType {
        get {
            return try! get_SecurityProtocol();
        }
        set(v) {
            return try! set_SecurityProtocol(value: v);
        }
    }
    /**
    Gets or sets the callback to validate a server certificate.

    */
    public static var ServerCertificateValidationCallback : Optional<dotnet.System.Net.Security.RemoteCertificateValidationCallback> {
        get {
            return try! get_ServerCertificateValidationCallback();
        }
        set(v) {
            return try! set_ServerCertificateValidationCallback(value: v!);
        }
    }
    /**
    Determines whether the Nagle algorithm is used by the service points managed by this  object.

    */
    public static var UseNagleAlgorithm : Bool {
        get {
            return try! get_UseNagleAlgorithm();
        }
        set(v) {
            return try! set_UseNagleAlgorithm(value: v);
        }
    }
} // ServicePointManager


}


