// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
extension System.Net {
// type: System.Net.DownloadDataCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class DownloadDataCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_DownloadDataCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Byte[] get_Result()
// docid: M:System.Net.DownloadDataCompletedEventArgs.get_Result
    open func get_Result() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_DownloadDataCompletedEventArgs_u8Array__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    /**
    Gets the data that is downloaded by a  method.

    */
    open var Result : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_Result();
        }
    }
} // DownloadDataCompletedEventArgs


// type: System.Net.DownloadDataCompletedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class DownloadDataCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_DownloadDataCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.DownloadDataCompletedEventArgs)
// docid: M:System.Net.DownloadDataCompletedEventHandler.Invoke(System.Object,System.Net.DownloadDataCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadDataCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadDataCompletedEventHandler_void__Invoke_0__2__Object_DownloadDataCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.DownloadDataCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.DownloadDataCompletedEventHandler.BeginInvoke(System.Object,System.Net.DownloadDataCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadDataCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_DownloadDataCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DownloadDataCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.DownloadDataCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadDataCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadDataCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.DownloadDataCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_DownloadDataCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.DownloadDataCompletedEventArgs)
// docid: M:System.Net.DownloadDataCompletedEventHandler.Invoke(System.Object,System.Net.DownloadDataCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadDataCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadDataCompletedEventHandler_void__Invoke_0__2__Object_DownloadDataCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DownloadDataCompletedEventHandler


// type: System.Net.DownloadProgressChangedEventArgs
    /**
    Provides data for the  event of a .

    */
open class DownloadProgressChangedEventArgs
    :
    dotnet.System.ComponentModel.ProgressChangedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_DownloadProgressChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_BytesReceived()
// docid: M:System.Net.DownloadProgressChangedEventArgs.get_BytesReceived
    open func get_BytesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_DownloadProgressChangedEventArgs_i64__get_BytesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TotalBytesToReceive()
// docid: M:System.Net.DownloadProgressChangedEventArgs.get_TotalBytesToReceive
    open func get_TotalBytesToReceive() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_DownloadProgressChangedEventArgs_i64__get_TotalBytesToReceive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of bytes received.

    */
    open var BytesReceived : Swift.Int64 {
        get {
            return try! get_BytesReceived();
        }
    }
    /**
    Gets the total number of bytes in a  data download operation.

    */
    open var TotalBytesToReceive : Swift.Int64 {
        get {
            return try! get_TotalBytesToReceive();
        }
    }
} // DownloadProgressChangedEventArgs


// type: System.Net.DownloadProgressChangedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class DownloadProgressChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_DownloadProgressChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.DownloadProgressChangedEventArgs)
// docid: M:System.Net.DownloadProgressChangedEventHandler.Invoke(System.Object,System.Net.DownloadProgressChangedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadProgressChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadProgressChangedEventHandler_void__Invoke_0__2__Object_DownloadProgressChangedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.DownloadProgressChangedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.DownloadProgressChangedEventHandler.BeginInvoke(System.Object,System.Net.DownloadProgressChangedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadProgressChangedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_DownloadProgressChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DownloadProgressChangedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.DownloadProgressChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadProgressChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadProgressChangedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.DownloadProgressChangedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_DownloadProgressChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.DownloadProgressChangedEventArgs)
// docid: M:System.Net.DownloadProgressChangedEventHandler.Invoke(System.Object,System.Net.DownloadProgressChangedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadProgressChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadProgressChangedEventHandler_void__Invoke_0__2__Object_DownloadProgressChangedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DownloadProgressChangedEventHandler


// type: System.Net.DownloadStringCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class DownloadStringCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_DownloadStringCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Result()
// docid: M:System.Net.DownloadStringCompletedEventArgs.get_Result
    open func get_Result() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_DownloadStringCompletedEventArgs_String__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the data that is downloaded by a  method.

    */
    open var Result : dotnet.System.String {
        get {
            return try! get_Result();
        }
    }
} // DownloadStringCompletedEventArgs


// type: System.Net.DownloadStringCompletedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class DownloadStringCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_DownloadStringCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.DownloadStringCompletedEventArgs)
// docid: M:System.Net.DownloadStringCompletedEventHandler.Invoke(System.Object,System.Net.DownloadStringCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadStringCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadStringCompletedEventHandler_void__Invoke_0__2__Object_DownloadStringCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.DownloadStringCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.DownloadStringCompletedEventHandler.BeginInvoke(System.Object,System.Net.DownloadStringCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadStringCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_DownloadStringCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DownloadStringCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.DownloadStringCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadStringCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadStringCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.DownloadStringCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_DownloadStringCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.DownloadStringCompletedEventArgs)
// docid: M:System.Net.DownloadStringCompletedEventHandler.Invoke(System.Object,System.Net.DownloadStringCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.DownloadStringCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_DownloadStringCompletedEventHandler_void__Invoke_0__2__Object_DownloadStringCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DownloadStringCompletedEventHandler


// type: System.Net.OpenReadCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class OpenReadCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_OpenReadCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.IO.Stream get_Result()
// docid: M:System.Net.OpenReadCompletedEventArgs.get_Result
    open func get_Result() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_OpenReadCompletedEventArgs_Stream__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    /**
    Gets a readable stream that contains data downloaded by a  method.

    */
    open var Result : dotnet.System.IO.Stream {
        get {
            return try! get_Result();
        }
    }
} // OpenReadCompletedEventArgs


// type: System.Net.OpenReadCompletedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class OpenReadCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_OpenReadCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.OpenReadCompletedEventArgs)
// docid: M:System.Net.OpenReadCompletedEventHandler.Invoke(System.Object,System.Net.OpenReadCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.OpenReadCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_OpenReadCompletedEventHandler_void__Invoke_0__2__Object_OpenReadCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.OpenReadCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.OpenReadCompletedEventHandler.BeginInvoke(System.Object,System.Net.OpenReadCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.OpenReadCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_OpenReadCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_OpenReadCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.OpenReadCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_OpenReadCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.OpenReadCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.OpenReadCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_OpenReadCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.OpenReadCompletedEventArgs)
// docid: M:System.Net.OpenReadCompletedEventHandler.Invoke(System.Object,System.Net.OpenReadCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.OpenReadCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_OpenReadCompletedEventHandler_void__Invoke_0__2__Object_OpenReadCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // OpenReadCompletedEventHandler


// type: System.Net.OpenWriteCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class OpenWriteCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_OpenWriteCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.IO.Stream get_Result()
// docid: M:System.Net.OpenWriteCompletedEventArgs.get_Result
    open func get_Result() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_OpenWriteCompletedEventArgs_Stream__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    /**
    Gets a writable stream that is used to send data to a server.

    */
    open var Result : dotnet.System.IO.Stream {
        get {
            return try! get_Result();
        }
    }
} // OpenWriteCompletedEventArgs


// type: System.Net.OpenWriteCompletedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class OpenWriteCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_OpenWriteCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.OpenWriteCompletedEventArgs)
// docid: M:System.Net.OpenWriteCompletedEventHandler.Invoke(System.Object,System.Net.OpenWriteCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.OpenWriteCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_OpenWriteCompletedEventHandler_void__Invoke_0__2__Object_OpenWriteCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.OpenWriteCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.OpenWriteCompletedEventHandler.BeginInvoke(System.Object,System.Net.OpenWriteCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.OpenWriteCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_OpenWriteCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_OpenWriteCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.OpenWriteCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_OpenWriteCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.OpenWriteCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.OpenWriteCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_OpenWriteCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.OpenWriteCompletedEventArgs)
// docid: M:System.Net.OpenWriteCompletedEventHandler.Invoke(System.Object,System.Net.OpenWriteCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.OpenWriteCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_OpenWriteCompletedEventHandler_void__Invoke_0__2__Object_OpenWriteCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // OpenWriteCompletedEventHandler


// type: System.Net.UploadDataCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class UploadDataCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadDataCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Byte[] get_Result()
// docid: M:System.Net.UploadDataCompletedEventArgs.get_Result
    open func get_Result() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadDataCompletedEventArgs_u8Array__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    /**
    Gets the server reply to a data upload operation started by calling an  method.

    */
    open var Result : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_Result();
        }
    }
} // UploadDataCompletedEventArgs


// type: System.Net.UploadDataCompletedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class UploadDataCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadDataCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.UploadDataCompletedEventArgs)
// docid: M:System.Net.UploadDataCompletedEventHandler.Invoke(System.Object,System.Net.UploadDataCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadDataCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadDataCompletedEventHandler_void__Invoke_0__2__Object_UploadDataCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.UploadDataCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.UploadDataCompletedEventHandler.BeginInvoke(System.Object,System.Net.UploadDataCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadDataCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadDataCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_UploadDataCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.UploadDataCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadDataCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.UploadDataCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.UploadDataCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_UploadDataCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.UploadDataCompletedEventArgs)
// docid: M:System.Net.UploadDataCompletedEventHandler.Invoke(System.Object,System.Net.UploadDataCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.UploadDataCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadDataCompletedEventHandler_void__Invoke_0__2__Object_UploadDataCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // UploadDataCompletedEventHandler


// type: System.Net.UploadFileCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class UploadFileCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadFileCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Byte[] get_Result()
// docid: M:System.Net.UploadFileCompletedEventArgs.get_Result
    open func get_Result() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadFileCompletedEventArgs_u8Array__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    /**
    Gets the server reply to a data upload operation that is started by calling an  method.

    */
    open var Result : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_Result();
        }
    }
} // UploadFileCompletedEventArgs


// type: System.Net.UploadFileCompletedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class UploadFileCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadFileCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.UploadFileCompletedEventArgs)
// docid: M:System.Net.UploadFileCompletedEventHandler.Invoke(System.Object,System.Net.UploadFileCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadFileCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadFileCompletedEventHandler_void__Invoke_0__2__Object_UploadFileCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.UploadFileCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.UploadFileCompletedEventHandler.BeginInvoke(System.Object,System.Net.UploadFileCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadFileCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadFileCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_UploadFileCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.UploadFileCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadFileCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.UploadFileCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.UploadFileCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_UploadFileCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.UploadFileCompletedEventArgs)
// docid: M:System.Net.UploadFileCompletedEventHandler.Invoke(System.Object,System.Net.UploadFileCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.UploadFileCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadFileCompletedEventHandler_void__Invoke_0__2__Object_UploadFileCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // UploadFileCompletedEventHandler


// type: System.Net.UploadProgressChangedEventArgs
    /**
    Provides data for the  event of a .

    */
open class UploadProgressChangedEventArgs
    :
    dotnet.System.ComponentModel.ProgressChangedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadProgressChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int64 get_BytesReceived()
// docid: M:System.Net.UploadProgressChangedEventArgs.get_BytesReceived
    open func get_BytesReceived() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadProgressChangedEventArgs_i64__get_BytesReceived_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_BytesSent()
// docid: M:System.Net.UploadProgressChangedEventArgs.get_BytesSent
    open func get_BytesSent() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadProgressChangedEventArgs_i64__get_BytesSent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TotalBytesToReceive()
// docid: M:System.Net.UploadProgressChangedEventArgs.get_TotalBytesToReceive
    open func get_TotalBytesToReceive() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadProgressChangedEventArgs_i64__get_TotalBytesToReceive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TotalBytesToSend()
// docid: M:System.Net.UploadProgressChangedEventArgs.get_TotalBytesToSend
    open func get_TotalBytesToSend() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadProgressChangedEventArgs_i64__get_TotalBytesToSend_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of bytes received.

    */
    open var BytesReceived : Swift.Int64 {
        get {
            return try! get_BytesReceived();
        }
    }
    /**
    Gets the number of bytes sent.

    */
    open var BytesSent : Swift.Int64 {
        get {
            return try! get_BytesSent();
        }
    }
    /**
    Gets the total number of bytes in a  data upload operation.

    */
    open var TotalBytesToReceive : Swift.Int64 {
        get {
            return try! get_TotalBytesToReceive();
        }
    }
    /**
    Gets the total number of bytes to send.

    */
    open var TotalBytesToSend : Swift.Int64 {
        get {
            return try! get_TotalBytesToSend();
        }
    }
} // UploadProgressChangedEventArgs


// type: System.Net.UploadProgressChangedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class UploadProgressChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadProgressChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.UploadProgressChangedEventArgs)
// docid: M:System.Net.UploadProgressChangedEventHandler.Invoke(System.Object,System.Net.UploadProgressChangedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadProgressChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadProgressChangedEventHandler_void__Invoke_0__2__Object_UploadProgressChangedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.UploadProgressChangedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.UploadProgressChangedEventHandler.BeginInvoke(System.Object,System.Net.UploadProgressChangedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadProgressChangedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadProgressChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_UploadProgressChangedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.UploadProgressChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadProgressChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.UploadProgressChangedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.UploadProgressChangedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_UploadProgressChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.UploadProgressChangedEventArgs)
// docid: M:System.Net.UploadProgressChangedEventHandler.Invoke(System.Object,System.Net.UploadProgressChangedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.UploadProgressChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadProgressChangedEventHandler_void__Invoke_0__2__Object_UploadProgressChangedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // UploadProgressChangedEventHandler


// type: System.Net.UploadStringCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class UploadStringCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadStringCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Result()
// docid: M:System.Net.UploadStringCompletedEventArgs.get_Result
    open func get_Result() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadStringCompletedEventArgs_String__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the server reply to a string upload operation that is started by calling an  method.

    */
    open var Result : dotnet.System.String {
        get {
            return try! get_Result();
        }
    }
} // UploadStringCompletedEventArgs


// type: System.Net.UploadStringCompletedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class UploadStringCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadStringCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.UploadStringCompletedEventArgs)
// docid: M:System.Net.UploadStringCompletedEventHandler.Invoke(System.Object,System.Net.UploadStringCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadStringCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadStringCompletedEventHandler_void__Invoke_0__2__Object_UploadStringCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.UploadStringCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.UploadStringCompletedEventHandler.BeginInvoke(System.Object,System.Net.UploadStringCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadStringCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadStringCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_UploadStringCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.UploadStringCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadStringCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.UploadStringCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.UploadStringCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_UploadStringCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.UploadStringCompletedEventArgs)
// docid: M:System.Net.UploadStringCompletedEventHandler.Invoke(System.Object,System.Net.UploadStringCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.UploadStringCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadStringCompletedEventHandler_void__Invoke_0__2__Object_UploadStringCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // UploadStringCompletedEventHandler


// type: System.Net.UploadValuesCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class UploadValuesCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadValuesCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Byte[] get_Result()
// docid: M:System.Net.UploadValuesCompletedEventArgs.get_Result
    open func get_Result() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadValuesCompletedEventArgs_u8Array__get_Result_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    /**
    Gets the server reply to a data upload operation started by calling an  method.

    */
    open var Result : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_Result();
        }
    }
} // UploadValuesCompletedEventArgs


// type: System.Net.UploadValuesCompletedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class UploadValuesCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_UploadValuesCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.UploadValuesCompletedEventArgs)
// docid: M:System.Net.UploadValuesCompletedEventHandler.Invoke(System.Object,System.Net.UploadValuesCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadValuesCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadValuesCompletedEventHandler_void__Invoke_0__2__Object_UploadValuesCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.UploadValuesCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.UploadValuesCompletedEventHandler.BeginInvoke(System.Object,System.Net.UploadValuesCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.UploadValuesCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_UploadValuesCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_UploadValuesCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.UploadValuesCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadValuesCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.UploadValuesCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.UploadValuesCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_UploadValuesCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.UploadValuesCompletedEventArgs)
// docid: M:System.Net.UploadValuesCompletedEventHandler.Invoke(System.Object,System.Net.UploadValuesCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.UploadValuesCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_UploadValuesCompletedEventHandler_void__Invoke_0__2__Object_UploadValuesCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // UploadValuesCompletedEventHandler


// type: System.Net.WebClient
    /**
    Provides common methods for sending data to and receiving data from a resource identified by a URI.

    */
open class WebClient
    :
    dotnet.System.ComponentModel.Component
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_WebClient_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.WebClient.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebClient_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CancelAsync()
// docid: M:System.Net.WebClient.CancelAsync
    /**
    Cancels a pending asynchronous operation.

    */
    open func CancelAsync() throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__CancelAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Byte[] DownloadData(System.String)
// docid: M:System.Net.WebClient.DownloadData(System.String)
    /**
    Downloads the resource as a  array from the URI specified.

    - Parameter address: The URI from which to download data.
    - Returns: A  array containing the downloaded resource.

    */
    open func DownloadData(address : dotnet.System.String) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__DownloadData_0__1__String(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] DownloadData(System.Uri)
// docid: M:System.Net.WebClient.DownloadData(System.Uri)
    /**
    Downloads the resource as a  array from the URI specified.

    - Parameter address: The URI represented by the  object, from which to download data.
    - Returns: A  array containing the downloaded resource.

    */
    open func DownloadData(address : dotnet.System.Uri) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__DownloadData_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // void DownloadDataAsync(System.Uri)
// docid: M:System.Net.WebClient.DownloadDataAsync(System.Uri)
    /**
    Downloads the resource as a  array from the URI specified as an asynchronous operation.

    - Parameter address: A  containing the URI to download.
    */
    open func DownloadDataAsync(address : dotnet.System.Uri) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__DownloadDataAsync_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DownloadDataAsync(System.Uri, System.Object)
// docid: M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)
    /**
    Downloads the resource as a  array from the URI specified as an asynchronous operation.

    - Parameter address: A  containing the URI to download.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func DownloadDataAsync(address : dotnet.System.Uri, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__DownloadDataAsync_0__2__Uri_Object(&__thrown, self.get_handle(), address.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> DownloadDataTaskAsync(System.String)
// docid: M:System.Net.WebClient.DownloadDataTaskAsync(System.String)
    /**
    Downloads the resource as a  array from the URI specified as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to download.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the downloaded resource.

    */
    open func DownloadDataTaskAsync(address : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___DownloadDataTaskAsync_0__1__String(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> DownloadDataTaskAsync(System.Uri)
// docid: M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)
    /**
    Downloads the resource as a  array from the URI specified as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to download.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the downloaded resource.

    */
    open func DownloadDataTaskAsync(address : dotnet.System.Uri) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___DownloadDataTaskAsync_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void DownloadFile(System.String, System.String)
// docid: M:System.Net.WebClient.DownloadFile(System.String,System.String)
    /**
    Downloads the resource with the specified URI to a local file.

    - Parameter address: The URI from which to download data.
    - Parameter fileName: The name of the local file that is to receive the data.
    */
    open func DownloadFile(address : dotnet.System.String, fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__DownloadFile_0__2__String_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DownloadFile(System.Uri, System.String)
// docid: M:System.Net.WebClient.DownloadFile(System.Uri,System.String)
    /**
    Downloads the resource with the specified URI to a local file.

    - Parameter address: The URI specified as a , from which to download data.
    - Parameter fileName: The name of the local file that is to receive the data.
    */
    open func DownloadFile(address : dotnet.System.Uri, fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__DownloadFile_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DownloadFileAsync(System.Uri, System.String)
// docid: M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)
    /**
    Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.

    - Parameter address: The URI of the resource to download.
    - Parameter fileName: The name of the file to be placed on the local computer.
    */
    open func DownloadFileAsync(address : dotnet.System.Uri, fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__DownloadFileAsync_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DownloadFileAsync(System.Uri, System.String, System.Object)
// docid: M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)
    /**
    Downloads, to a local file, the resource with the specified URI. This method does not block the calling thread.

    - Parameter address: The URI of the resource to download.
    - Parameter fileName: The name of the file to be placed on the local computer.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func DownloadFileAsync(address : dotnet.System.Uri, fileName : dotnet.System.String, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__DownloadFileAsync_0__3__Uri_String_Object(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task DownloadFileTaskAsync(System.String, System.String)
// docid: M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)
    /**
    Downloads the specified resource to a local file as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to download.
    - Parameter fileName: The name of the file to be placed on the local computer.
    - Returns: The task object representing the asynchronous operation.

    */
    open func DownloadFileTaskAsync(address : dotnet.System.String, fileName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Task__DownloadFileTaskAsync_0__2__String_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task DownloadFileTaskAsync(System.Uri, System.String)
// docid: M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)
    /**
    Downloads the specified resource to a local file as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to download.
    - Parameter fileName: The name of the file to be placed on the local computer.
    - Returns: The task object representing the asynchronous operation.

    */
    open func DownloadFileTaskAsync(address : dotnet.System.Uri, fileName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Task__DownloadFileTaskAsync_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.String DownloadString(System.String)
// docid: M:System.Net.WebClient.DownloadString(System.String)
    /**
    Downloads the requested resource as a . The resource to download is specified as a  containing the URI.

    - Parameter address: A  containing the URI to download.
    - Returns: A  containing the requested resource.

    */
    open func DownloadString(address : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_String__DownloadString_0__1__String(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String DownloadString(System.Uri)
// docid: M:System.Net.WebClient.DownloadString(System.Uri)
    /**
    Downloads the requested resource as a . The resource to download is specified as a .

    - Parameter address: A  object containing the URI to download.
    - Returns: A  containing the requested resource.

    */
    open func DownloadString(address : dotnet.System.Uri) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_String__DownloadString_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void DownloadStringAsync(System.Uri)
// docid: M:System.Net.WebClient.DownloadStringAsync(System.Uri)
    /**
    Downloads the resource specified as a . This method does not block the calling thread.

    - Parameter address: A  containing the URI to download.
    */
    open func DownloadStringAsync(address : dotnet.System.Uri) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__DownloadStringAsync_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DownloadStringAsync(System.Uri, System.Object)
// docid: M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)
    /**
    Downloads the specified string to the specified resource. This method does not block the calling thread.

    - Parameter address: A  containing the URI to download.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func DownloadStringAsync(address : dotnet.System.Uri, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__DownloadStringAsync_0__2__Uri_Object(&__thrown, self.get_handle(), address.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.String> DownloadStringTaskAsync(System.String)
// docid: M:System.Net.WebClient.DownloadStringTaskAsync(System.String)
    /**
    Downloads the resource as a  from the URI specified as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to download.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the downloaded resource.

    */
    open func DownloadStringTaskAsync(address : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_string___DownloadStringTaskAsync_0__1__String(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> DownloadStringTaskAsync(System.Uri)
// docid: M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)
    /**
    Downloads the resource as a  from the URI specified as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to download.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the downloaded resource.

    */
    open func DownloadStringTaskAsync(address : dotnet.System.Uri) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_string___DownloadStringTaskAsync_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.IO.Stream OpenRead(System.String)
// docid: M:System.Net.WebClient.OpenRead(System.String)
    /**
    Opens a readable stream for the data downloaded from a resource with the URI specified as a .

    - Parameter address: The URI specified as a  from which to download data.
    - Returns: A  used to read data from a resource.

    */
    open func OpenRead(address : dotnet.System.String) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Stream__OpenRead_0__1__String(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenRead(System.Uri)
// docid: M:System.Net.WebClient.OpenRead(System.Uri)
    /**
    Opens a readable stream for the data downloaded from a resource with the URI specified as a 

    - Parameter address: The URI specified as a  from which to download data.
    - Returns: A  used to read data from a resource.

    */
    open func OpenRead(address : dotnet.System.Uri) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Stream__OpenRead_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // void OpenReadAsync(System.Uri)
// docid: M:System.Net.WebClient.OpenReadAsync(System.Uri)
    /**
    Opens a readable stream containing the specified resource. This method does not block the calling thread.

    - Parameter address: The URI of the resource to retrieve.
    */
    open func OpenReadAsync(address : dotnet.System.Uri) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__OpenReadAsync_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OpenReadAsync(System.Uri, System.Object)
// docid: M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)
    /**
    Opens a readable stream containing the specified resource. This method does not block the calling thread.

    - Parameter address: The URI of the resource to retrieve.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func OpenReadAsync(address : dotnet.System.Uri, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__OpenReadAsync_0__2__Uri_Object(&__thrown, self.get_handle(), address.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> OpenReadTaskAsync(System.String)
// docid: M:System.Net.WebClient.OpenReadTaskAsync(System.String)
    /**
    Opens a readable stream containing the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to retrieve.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  used to read data from a resource.

    */
    open func OpenReadTaskAsync(address : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_System_IO_Stream___OpenReadTaskAsync_0__1__String(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> OpenReadTaskAsync(System.Uri)
// docid: M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)
    /**
    Opens a readable stream containing the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to retrieve.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  used to read data from a resource.

    */
    open func OpenReadTaskAsync(address : dotnet.System.Uri) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_System_IO_Stream___OpenReadTaskAsync_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.IO.Stream OpenWrite(System.String)
// docid: M:System.Net.WebClient.OpenWrite(System.String)
    /**
    Opens a stream for writing data to the specified resource.

    - Parameter address: The URI of the resource to receive the data.
    - Returns: A  used to write data to the resource.

    */
    open func OpenWrite(address : dotnet.System.String) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Stream__OpenWrite_0__1__String(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenWrite(System.String, System.String)
// docid: M:System.Net.WebClient.OpenWrite(System.String,System.String)
    /**
    Opens a stream for writing data to the specified resource, using the specified method.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - Returns: A  used to write data to the resource.

    */
    open func OpenWrite(address : dotnet.System.String, method : Optional<dotnet.System.String>) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Stream__OpenWrite_0__2__String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenWrite(System.Uri)
// docid: M:System.Net.WebClient.OpenWrite(System.Uri)
    /**
    Opens a stream for writing data to the specified resource.

    - Parameter address: The URI of the resource to receive the data.
    - Returns: A  used to write data to the resource.

    */
    open func OpenWrite(address : dotnet.System.Uri) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Stream__OpenWrite_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenWrite(System.Uri, System.String)
// docid: M:System.Net.WebClient.OpenWrite(System.Uri,System.String)
    /**
    Opens a stream for writing data to the specified resource, by using the specified method.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - Returns: A  used to write data to the resource.

    */
    open func OpenWrite(address : dotnet.System.Uri, method : Optional<dotnet.System.String>) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Stream__OpenWrite_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // void OpenWriteAsync(System.Uri)
// docid: M:System.Net.WebClient.OpenWriteAsync(System.Uri)
    /**
    Opens a stream for writing data to the specified resource. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the data.
    */
    open func OpenWriteAsync(address : dotnet.System.Uri) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__OpenWriteAsync_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OpenWriteAsync(System.Uri, System.String)
// docid: M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)
    /**
    Opens a stream for writing data to the specified resource. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    */
    open func OpenWriteAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__OpenWriteAsync_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OpenWriteAsync(System.Uri, System.String, System.Object)
// docid: M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)
    /**
    Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes
    */
    open func OpenWriteAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__OpenWriteAsync_0__3__Uri_String_Object(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync(System.String)
// docid: M:System.Net.WebClient.OpenWriteTaskAsync(System.String)
    /**
    Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the data.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  used to write data to the resource.

    */
    open func OpenWriteTaskAsync(address : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_System_IO_Stream___OpenWriteTaskAsync_0__1__String(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync(System.String, System.String)
// docid: M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)
    /**
    Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  used to write data to the resource.

    */
    open func OpenWriteTaskAsync(address : dotnet.System.String, method : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_System_IO_Stream___OpenWriteTaskAsync_0__2__String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync(System.Uri)
// docid: M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)
    /**
    Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the data.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  used to write data to the resource.

    */
    open func OpenWriteTaskAsync(address : dotnet.System.Uri) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_System_IO_Stream___OpenWriteTaskAsync_0__1__Uri(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> OpenWriteTaskAsync(System.Uri, System.String)
// docid: M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)
    /**
    Opens a stream for writing data to the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  used to write data to the resource.

    */
    open func OpenWriteTaskAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_System_IO_Stream___OpenWriteTaskAsync_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Byte[] UploadData(System.String, System.Byte[])
// docid: M:System.Net.WebClient.UploadData(System.String,System.Byte[])
    /**
    Uploads a data buffer to a resource identified by a URI.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter data: The data buffer to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadData(address : dotnet.System.String, data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadData_0__2__String_u8Array(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadData(System.String, System.String, System.Byte[])
// docid: M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])
    /**
    Uploads a data buffer to the specified resource, using the specified method.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The data buffer to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadData(address : dotnet.System.String, method : Optional<dotnet.System.String>, data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadData_0__3__String_String_u8Array(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadData(System.Uri, System.Byte[])
// docid: M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])
    /**
    Uploads a data buffer to a resource identified by a URI.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter data: The data buffer to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadData(address : dotnet.System.Uri, data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadData_0__2__Uri_u8Array(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadData(System.Uri, System.String, System.Byte[])
// docid: M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])
    /**
    Uploads a data buffer to the specified resource, using the specified method.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The HTTP method used to send the data to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The data buffer to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadData(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadData_0__3__Uri_String_u8Array(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // void UploadDataAsync(System.Uri, System.Byte[])
// docid: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])
    /**
    Uploads a data buffer to a resource identified by a URI, using the POST method. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter data: The data buffer to send to the resource.
    */
    open func UploadDataAsync(address : dotnet.System.Uri, data : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadDataAsync_0__2__Uri_u8Array(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UploadDataAsync(System.Uri, System.String, System.Byte[])
// docid: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])
    /**
    Uploads a data buffer to a resource identified by a URI, using the specified method. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter data: The data buffer to send to the resource.
    */
    open func UploadDataAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadDataAsync_0__3__Uri_String_u8Array(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UploadDataAsync(System.Uri, System.String, System.Byte[], System.Object)
// docid: M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)
    /**
    Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter data: The data buffer to send to the resource.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func UploadDataAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System_Arr<Swift.UInt8>, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadDataAsync_0__4__Uri_String_u8Array_Object(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadDataTaskAsync(System.String, System.Byte[])
// docid: M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])
    /**
    Uploads a data buffer that contains a  array to the URI specified as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter data: The data buffer to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the body of the response received from the resource when the data buffer was uploaded.

    */
    open func UploadDataTaskAsync(address : dotnet.System.String, data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadDataTaskAsync_0__2__String_u8Array(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadDataTaskAsync(System.String, System.String, System.Byte[])
// docid: M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])
    /**
    Uploads a data buffer that contains a  array to the URI specified as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter data: The data buffer to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the body of the response received from the resource when the data buffer was uploaded.

    */
    open func UploadDataTaskAsync(address : dotnet.System.String, method : Optional<dotnet.System.String>, data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadDataTaskAsync_0__3__String_String_u8Array(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadDataTaskAsync(System.Uri, System.Byte[])
// docid: M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])
    /**
    Uploads a data buffer that contains a  array to the URI specified as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter data: The data buffer to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the body of the response received from the resource when the data buffer was uploaded.

    */
    open func UploadDataTaskAsync(address : dotnet.System.Uri, data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadDataTaskAsync_0__2__Uri_u8Array(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadDataTaskAsync(System.Uri, System.String, System.Byte[])
// docid: M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])
    /**
    Uploads a data buffer that contains a  array to the URI specified as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the data.
    - Parameter method: The method used to send the data to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter data: The data buffer to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the body of the response received from the resource when the data buffer was uploaded.

    */
    open func UploadDataTaskAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadDataTaskAsync_0__3__Uri_String_u8Array(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Byte[] UploadFile(System.String, System.String)
// docid: M:System.Net.WebClient.UploadFile(System.String,System.String)
    /**
    Uploads the specified local file to a resource with the specified URI.

    - Parameter address: The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.
    - Parameter fileName: The file to send to the resource. For example, "samplefile.txt".
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadFile(address : dotnet.System.String, fileName : dotnet.System.String) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadFile_0__2__String_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadFile(System.String, System.String, System.String)
// docid: M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)
    /**
    Uploads the specified local file to the specified resource, using the specified method.

    - Parameter address: The URI of the resource to receive the file.
    - Parameter method: The method used to send the file to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter fileName: The file to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadFile(address : dotnet.System.String, method : Optional<dotnet.System.String>, fileName : dotnet.System.String) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadFile_0__3__String_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadFile(System.Uri, System.String)
// docid: M:System.Net.WebClient.UploadFile(System.Uri,System.String)
    /**
    Uploads the specified local file to a resource with the specified URI.

    - Parameter address: The URI of the resource to receive the file. For example, ftp://localhost/samplefile.txt.
    - Parameter fileName: The file to send to the resource. For example, "samplefile.txt".
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadFile(address : dotnet.System.Uri, fileName : dotnet.System.String) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadFile_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadFile(System.Uri, System.String, System.String)
// docid: M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)
    /**
    Uploads the specified local file to the specified resource, using the specified method.

    - Parameter address: The URI of the resource to receive the file.
    - Parameter method: The method used to send the file to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter fileName: The file to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadFile(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, fileName : dotnet.System.String) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadFile_0__3__Uri_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // void UploadFileAsync(System.Uri, System.String)
// docid: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)
    /**
    Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter fileName: The file to send to the resource.
    */
    open func UploadFileAsync(address : dotnet.System.Uri, fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadFileAsync_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UploadFileAsync(System.Uri, System.String, System.String)
// docid: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)
    /**
    Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter method: The method used to send the data to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter fileName: The file to send to the resource.
    */
    open func UploadFileAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadFileAsync_0__3__Uri_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UploadFileAsync(System.Uri, System.String, System.String, System.Object)
// docid: M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)
    /**
    Uploads the specified local file to the specified resource, using the POST method. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter method: The method used to send the data to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter fileName: The file to send to the resource.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func UploadFileAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, fileName : dotnet.System.String, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadFileAsync_0__4__Uri_String_String_Object(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, fileName.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadFileTaskAsync(System.String, System.String)
// docid: M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)
    /**
    Uploads the specified local file to a resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter fileName: The local file to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the body of the response received from the resource when the file was uploaded.

    */
    open func UploadFileTaskAsync(address : dotnet.System.String, fileName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadFileTaskAsync_0__2__String_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadFileTaskAsync(System.String, System.String, System.String)
// docid: M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)
    /**
    Uploads the specified local file to a resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter method: The method used to send the data to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter fileName: The local file to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the body of the response received from the resource when the file was uploaded.

    */
    open func UploadFileTaskAsync(address : dotnet.System.String, method : Optional<dotnet.System.String>, fileName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadFileTaskAsync_0__3__String_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadFileTaskAsync(System.Uri, System.String)
// docid: M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)
    /**
    Uploads the specified local file to a resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter fileName: The local file to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the body of the response received from the resource when the file was uploaded.

    */
    open func UploadFileTaskAsync(address : dotnet.System.Uri, fileName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadFileTaskAsync_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadFileTaskAsync(System.Uri, System.String, System.String)
// docid: M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)
    /**
    Uploads the specified local file to a resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter method: The method used to send the data to the resource. If , the default is POST for http and STOR for ftp.
    - Parameter fileName: The local file to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the body of the response received from the resource when the file was uploaded.

    */
    open func UploadFileTaskAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, fileName : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadFileTaskAsync_0__3__Uri_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.String UploadString(System.String, System.String)
// docid: M:System.Net.WebClient.UploadString(System.String,System.String)
    /**
    Uploads the specified string to the specified resource, using the POST method.

    - Parameter address: The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter data: The string to be uploaded.
    - Returns: A  containing the response sent by the server.

    */
    open func UploadString(address : dotnet.System.String, data : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_String__UploadString_0__2__String_String(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String UploadString(System.String, System.String, System.String)
// docid: M:System.Net.WebClient.UploadString(System.String,System.String,System.String)
    /**
    Uploads the specified string to the specified resource, using the specified method.

    - Parameter address: The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the  method.
    - Parameter method: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The string to be uploaded.
    - Returns: A  containing the response sent by the server.

    */
    open func UploadString(address : dotnet.System.String, method : Optional<dotnet.System.String>, data : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_String__UploadString_0__3__String_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String UploadString(System.Uri, System.String)
// docid: M:System.Net.WebClient.UploadString(System.Uri,System.String)
    /**
    Uploads the specified string to the specified resource, using the POST method.

    - Parameter address: The URI of the resource to receive the string. For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter data: The string to be uploaded.
    - Returns: A  containing the response sent by the server.

    */
    open func UploadString(address : dotnet.System.Uri, data : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_String__UploadString_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String UploadString(System.Uri, System.String, System.String)
// docid: M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)
    /**
    Uploads the specified string to the specified resource, using the specified method.

    - Parameter address: The URI of the resource to receive the string. This URI must identify a resource that can accept a request sent with the  method.
    - Parameter method: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The string to be uploaded.
    - Returns: A  containing the response sent by the server.

    */
    open func UploadString(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_String__UploadString_0__3__Uri_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void UploadStringAsync(System.Uri, System.String)
// docid: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)
    /**
    Uploads the specified string to the specified resource. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter data: The string to be uploaded.
    */
    open func UploadStringAsync(address : dotnet.System.Uri, data : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadStringAsync_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UploadStringAsync(System.Uri, System.String, System.String)
// docid: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)
    /**
    Uploads the specified string to the specified resource. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter method: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The string to be uploaded.
    */
    open func UploadStringAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadStringAsync_0__3__Uri_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UploadStringAsync(System.Uri, System.String, System.String, System.Object)
// docid: M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)
    /**
    Uploads the specified string to the specified resource. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter method: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The string to be uploaded.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func UploadStringAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System.String, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadStringAsync_0__4__Uri_String_String_Object(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.String> UploadStringTaskAsync(System.String, System.String)
// docid: M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)
    /**
    Uploads the specified string to the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter data: The string to be uploaded.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  containing the response sent by the server.

    */
    open func UploadStringTaskAsync(address : dotnet.System.String, data : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_string___UploadStringTaskAsync_0__2__String_String(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> UploadStringTaskAsync(System.String, System.String, System.String)
// docid: M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)
    /**
    Uploads the specified string to the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter method: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The string to be uploaded.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  containing the response sent by the server.

    */
    open func UploadStringTaskAsync(address : dotnet.System.String, method : Optional<dotnet.System.String>, data : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_string___UploadStringTaskAsync_0__3__String_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> UploadStringTaskAsync(System.Uri, System.String)
// docid: M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)
    /**
    Uploads the specified string to the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter data: The string to be uploaded.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  containing the response sent by the server.

    */
    open func UploadStringTaskAsync(address : dotnet.System.Uri, data : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_string___UploadStringTaskAsync_0__2__Uri_String(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.String> UploadStringTaskAsync(System.Uri, System.String, System.String)
// docid: M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)
    /**
    Uploads the specified string to the specified resource as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the string. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
    - Parameter method: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The string to be uploaded.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  containing the response sent by the server.

    */
    open func UploadStringTaskAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_string___UploadStringTaskAsync_0__3__Uri_String_String(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Byte[] UploadValues(System.String, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the specified name/value collection to the resource identified by the specified URI.

    - Parameter address: The URI of the resource to receive the collection.
    - Parameter data: The  to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadValues(address : dotnet.System.String, data : dotnet.System.Collections.Specialized.NameValueCollection) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadValues_0__2__String_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadValues(System.String, System.String, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.

    - Parameter address: The URI of the resource to receive the collection.
    - Parameter method: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The  to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadValues(address : dotnet.System.String, method : Optional<dotnet.System.String>, data : dotnet.System.Collections.Specialized.NameValueCollection) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadValues_0__3__String_String_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadValues(System.Uri, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the specified name/value collection to the resource identified by the specified URI.

    - Parameter address: The URI of the resource to receive the collection.
    - Parameter data: The  to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadValues(address : dotnet.System.Uri, data : dotnet.System.Collections.Specialized.NameValueCollection) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadValues_0__2__Uri_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] UploadValues(System.Uri, System.String, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.

    - Parameter address: The URI of the resource to receive the collection.
    - Parameter method: The HTTP method used to send the file to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The  to send to the resource.
    - Returns: A  array containing the body of the response from the resource.

    */
    open func UploadValues(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System.Collections.Specialized.NameValueCollection) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_u8Array__UploadValues_0__3__Uri_String_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // void UploadValuesAsync(System.Uri, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the data in the specified name/value collection to the resource identified by the specified URI. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the default method.
    - Parameter data: The  to send to the resource.
    */
    open func UploadValuesAsync(address : dotnet.System.Uri, data : dotnet.System.Collections.Specialized.NameValueCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadValuesAsync_0__2__Uri_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UploadValuesAsync(System.Uri, System.String, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread.

    - Parameter address: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the  method.
    - Parameter method: The method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The  to send to the resource.
    */
    open func UploadValuesAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System.Collections.Specialized.NameValueCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadValuesAsync_0__3__Uri_String_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UploadValuesAsync(System.Uri, System.String, System.Collections.Specialized.NameValueCollection, System.Object)
// docid: M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)
    /**
    Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method. This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.

    - Parameter address: The URI of the resource to receive the collection. This URI must identify a resource that can accept a request sent with the  method.
    - Parameter method: The HTTP method used to send the string to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The  to send to the resource.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func UploadValuesAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System.Collections.Specialized.NameValueCollection, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__UploadValuesAsync_0__4__Uri_String_NameValueCollection_Object(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadValuesTaskAsync(System.String, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the collection.
    - Parameter data: The  to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the response sent by the server.

    */
    open func UploadValuesTaskAsync(address : dotnet.System.String, data : dotnet.System.Collections.Specialized.NameValueCollection) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadValuesTaskAsync_0__2__String_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadValuesTaskAsync(System.String, System.String, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the collection.
    - Parameter method: The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The  to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the response sent by the server.

    */
    open func UploadValuesTaskAsync(address : dotnet.System.String, method : Optional<dotnet.System.String>, data : dotnet.System.Collections.Specialized.NameValueCollection) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadValuesTaskAsync_0__3__String_String_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadValuesTaskAsync(System.Uri, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the collection.
    - Parameter data: The  to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the response sent by the server.

    */
    open func UploadValuesTaskAsync(address : dotnet.System.Uri, data : dotnet.System.Collections.Specialized.NameValueCollection) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadValuesTaskAsync_0__2__Uri_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Byte[]> UploadValuesTaskAsync(System.Uri, System.String, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)
    /**
    Uploads the specified name/value collection to the resource identified by the specified URI as an asynchronous operation using a task object.

    - Parameter address: The URI of the resource to receive the collection.
    - Parameter method: The HTTP method used to send the collection to the resource. If null, the default is POST for http and STOR for ftp.
    - Parameter data: The  to send to the resource.
    - Returns: The task object representing the asynchronous operation. The  property on the task object returns a  array containing the response sent by the server.

    */
    open func UploadValuesTaskAsync(address : dotnet.System.Uri, method : Optional<dotnet.System.String>, data : dotnet.System.Collections.Specialized.NameValueCollection) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_System_Threading_Tasks_Task_u8Array___UploadValuesTaskAsync_0__3__Uri_String_NameValueCollection(&__thrown, self.get_handle(), address.get_handle(), method?.get_handle() ?? nil, data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_BaseAddress()
// docid: M:System.Net.WebClient.get_BaseAddress
    open func get_BaseAddress() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_String__get_BaseAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_BaseAddress(System.String)
// docid: M:System.Net.WebClient.set_BaseAddress(System.String)
    open func set_BaseAddress(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__set_BaseAddress_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Cache.RequestCachePolicy get_CachePolicy()
// docid: M:System.Net.WebClient.get_CachePolicy
    open func get_CachePolicy() throws -> Optional<dotnet.System.Net.Cache.RequestCachePolicy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_RequestCachePolicy__get_CachePolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Cache.RequestCachePolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CachePolicy(System.Net.Cache.RequestCachePolicy)
// docid: M:System.Net.WebClient.set_CachePolicy(System.Net.Cache.RequestCachePolicy)
    open func set_CachePolicy(value : Optional<dotnet.System.Net.Cache.RequestCachePolicy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__set_CachePolicy_0__1__RequestCachePolicy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_Credentials()
// docid: M:System.Net.WebClient.get_Credentials
    open func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_ICredentials__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Net.WebClient.set_Credentials(System.Net.ICredentials)
    open func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_Encoding()
// docid: M:System.Net.WebClient.get_Encoding
    open func get_Encoding() throws -> dotnet.System.Text.Encoding {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_Encoding__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoding(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Encoding(System.Text.Encoding)
// docid: M:System.Net.WebClient.set_Encoding(System.Text.Encoding)
    open func set_Encoding(value : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__set_Encoding_0__1__Encoding(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.WebClient.get_Headers
    open func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(System.Net.WebHeaderCollection)
// docid: M:System.Net.WebClient.set_Headers(System.Net.WebHeaderCollection)
    open func set_Headers(value : dotnet.System.Net.WebHeaderCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__set_Headers_0__1__WebHeaderCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsBusy()
// docid: M:System.Net.WebClient.get_IsBusy
    open func get_IsBusy() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_bool__get_IsBusy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_Proxy()
// docid: M:System.Net.WebClient.get_Proxy
    open func get_Proxy() throws -> Optional<dotnet.System.Net.IWebProxy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_IWebProxy__get_Proxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IWebProxy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Proxy(System.Net.IWebProxy)
// docid: M:System.Net.WebClient.set_Proxy(System.Net.IWebProxy)
    open func set_Proxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__set_Proxy_0__1__IWebProxy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.NameValueCollection get_QueryString()
// docid: M:System.Net.WebClient.get_QueryString
    open func get_QueryString() throws -> dotnet.System.Collections.Specialized.NameValueCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_NameValueCollection__get_QueryString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.NameValueCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_QueryString(System.Collections.Specialized.NameValueCollection)
// docid: M:System.Net.WebClient.set_QueryString(System.Collections.Specialized.NameValueCollection)
    open func set_QueryString(value : dotnet.System.Collections.Specialized.NameValueCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__set_QueryString_0__1__NameValueCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_ResponseHeaders()
// docid: M:System.Net.WebClient.get_ResponseHeaders
    open func get_ResponseHeaders() throws -> Optional<dotnet.System.Net.WebHeaderCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_WebHeaderCollection__get_ResponseHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.WebHeaderCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_UseDefaultCredentials()
// docid: M:System.Net.WebClient.get_UseDefaultCredentials
    open func get_UseDefaultCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebClient_bool__get_UseDefaultCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseDefaultCredentials(bool)
// docid: M:System.Net.WebClient.set_UseDefaultCredentials(System.Boolean)
    open func set_UseDefaultCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__set_UseDefaultCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_DownloadDataCompleted(System.Net.DownloadDataCompletedEventHandler)
// docid: M:System.Net.WebClient.add_DownloadDataCompleted(System.Net.DownloadDataCompletedEventHandler)
    open func add_DownloadDataCompleted(value : Optional<dotnet.System.Net.DownloadDataCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_DownloadDataCompleted_0__1__DownloadDataCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_DownloadDataCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadDataCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.DownloadDataCompletedEventHandler(value);
        return try add_DownloadDataCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_DownloadDataCompleted(System.Net.DownloadDataCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_DownloadDataCompleted(System.Net.DownloadDataCompletedEventHandler)
    open func remove_DownloadDataCompleted(value : Optional<dotnet.System.Net.DownloadDataCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_DownloadDataCompleted_0__1__DownloadDataCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_DownloadDataCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadDataCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.DownloadDataCompletedEventHandler(value);
        return try remove_DownloadDataCompleted(value: del_value);
    }
    // [IsSpecialName] void add_DownloadFileCompleted(System.ComponentModel.AsyncCompletedEventHandler)
// docid: M:System.Net.WebClient.add_DownloadFileCompleted(System.ComponentModel.AsyncCompletedEventHandler)
    open func add_DownloadFileCompleted(value : Optional<dotnet.System.ComponentModel.AsyncCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_DownloadFileCompleted_0__1__AsyncCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_DownloadFileCompleted(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.AsyncCompletedEventHandler(value);
        return try add_DownloadFileCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_DownloadFileCompleted(System.ComponentModel.AsyncCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_DownloadFileCompleted(System.ComponentModel.AsyncCompletedEventHandler)
    open func remove_DownloadFileCompleted(value : Optional<dotnet.System.ComponentModel.AsyncCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_DownloadFileCompleted_0__1__AsyncCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_DownloadFileCompleted(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.AsyncCompletedEventHandler(value);
        return try remove_DownloadFileCompleted(value: del_value);
    }
    // [IsSpecialName] void add_DownloadProgressChanged(System.Net.DownloadProgressChangedEventHandler)
// docid: M:System.Net.WebClient.add_DownloadProgressChanged(System.Net.DownloadProgressChangedEventHandler)
    open func add_DownloadProgressChanged(value : Optional<dotnet.System.Net.DownloadProgressChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_DownloadProgressChanged_0__1__DownloadProgressChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_DownloadProgressChanged(value : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadProgressChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.DownloadProgressChangedEventHandler(value);
        return try add_DownloadProgressChanged(value: del_value);
    }
    // [IsSpecialName] void remove_DownloadProgressChanged(System.Net.DownloadProgressChangedEventHandler)
// docid: M:System.Net.WebClient.remove_DownloadProgressChanged(System.Net.DownloadProgressChangedEventHandler)
    open func remove_DownloadProgressChanged(value : Optional<dotnet.System.Net.DownloadProgressChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_DownloadProgressChanged_0__1__DownloadProgressChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_DownloadProgressChanged(value : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadProgressChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.DownloadProgressChangedEventHandler(value);
        return try remove_DownloadProgressChanged(value: del_value);
    }
    // [IsSpecialName] void add_DownloadStringCompleted(System.Net.DownloadStringCompletedEventHandler)
// docid: M:System.Net.WebClient.add_DownloadStringCompleted(System.Net.DownloadStringCompletedEventHandler)
    open func add_DownloadStringCompleted(value : Optional<dotnet.System.Net.DownloadStringCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_DownloadStringCompleted_0__1__DownloadStringCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_DownloadStringCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadStringCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.DownloadStringCompletedEventHandler(value);
        return try add_DownloadStringCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_DownloadStringCompleted(System.Net.DownloadStringCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_DownloadStringCompleted(System.Net.DownloadStringCompletedEventHandler)
    open func remove_DownloadStringCompleted(value : Optional<dotnet.System.Net.DownloadStringCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_DownloadStringCompleted_0__1__DownloadStringCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_DownloadStringCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.DownloadStringCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.DownloadStringCompletedEventHandler(value);
        return try remove_DownloadStringCompleted(value: del_value);
    }
    // [IsSpecialName] void add_OpenReadCompleted(System.Net.OpenReadCompletedEventHandler)
// docid: M:System.Net.WebClient.add_OpenReadCompleted(System.Net.OpenReadCompletedEventHandler)
    open func add_OpenReadCompleted(value : Optional<dotnet.System.Net.OpenReadCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_OpenReadCompleted_0__1__OpenReadCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_OpenReadCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.OpenReadCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.OpenReadCompletedEventHandler(value);
        return try add_OpenReadCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_OpenReadCompleted(System.Net.OpenReadCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_OpenReadCompleted(System.Net.OpenReadCompletedEventHandler)
    open func remove_OpenReadCompleted(value : Optional<dotnet.System.Net.OpenReadCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_OpenReadCompleted_0__1__OpenReadCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_OpenReadCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.OpenReadCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.OpenReadCompletedEventHandler(value);
        return try remove_OpenReadCompleted(value: del_value);
    }
    // [IsSpecialName] void add_OpenWriteCompleted(System.Net.OpenWriteCompletedEventHandler)
// docid: M:System.Net.WebClient.add_OpenWriteCompleted(System.Net.OpenWriteCompletedEventHandler)
    open func add_OpenWriteCompleted(value : Optional<dotnet.System.Net.OpenWriteCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_OpenWriteCompleted_0__1__OpenWriteCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_OpenWriteCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.OpenWriteCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.OpenWriteCompletedEventHandler(value);
        return try add_OpenWriteCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_OpenWriteCompleted(System.Net.OpenWriteCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_OpenWriteCompleted(System.Net.OpenWriteCompletedEventHandler)
    open func remove_OpenWriteCompleted(value : Optional<dotnet.System.Net.OpenWriteCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_OpenWriteCompleted_0__1__OpenWriteCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_OpenWriteCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.OpenWriteCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.OpenWriteCompletedEventHandler(value);
        return try remove_OpenWriteCompleted(value: del_value);
    }
    // [IsSpecialName] void add_UploadDataCompleted(System.Net.UploadDataCompletedEventHandler)
// docid: M:System.Net.WebClient.add_UploadDataCompleted(System.Net.UploadDataCompletedEventHandler)
    open func add_UploadDataCompleted(value : Optional<dotnet.System.Net.UploadDataCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_UploadDataCompleted_0__1__UploadDataCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UploadDataCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadDataCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadDataCompletedEventHandler(value);
        return try add_UploadDataCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_UploadDataCompleted(System.Net.UploadDataCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_UploadDataCompleted(System.Net.UploadDataCompletedEventHandler)
    open func remove_UploadDataCompleted(value : Optional<dotnet.System.Net.UploadDataCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_UploadDataCompleted_0__1__UploadDataCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UploadDataCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadDataCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadDataCompletedEventHandler(value);
        return try remove_UploadDataCompleted(value: del_value);
    }
    // [IsSpecialName] void add_UploadFileCompleted(System.Net.UploadFileCompletedEventHandler)
// docid: M:System.Net.WebClient.add_UploadFileCompleted(System.Net.UploadFileCompletedEventHandler)
    open func add_UploadFileCompleted(value : Optional<dotnet.System.Net.UploadFileCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_UploadFileCompleted_0__1__UploadFileCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UploadFileCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadFileCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadFileCompletedEventHandler(value);
        return try add_UploadFileCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_UploadFileCompleted(System.Net.UploadFileCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_UploadFileCompleted(System.Net.UploadFileCompletedEventHandler)
    open func remove_UploadFileCompleted(value : Optional<dotnet.System.Net.UploadFileCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_UploadFileCompleted_0__1__UploadFileCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UploadFileCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadFileCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadFileCompletedEventHandler(value);
        return try remove_UploadFileCompleted(value: del_value);
    }
    // [IsSpecialName] void add_UploadProgressChanged(System.Net.UploadProgressChangedEventHandler)
// docid: M:System.Net.WebClient.add_UploadProgressChanged(System.Net.UploadProgressChangedEventHandler)
    open func add_UploadProgressChanged(value : Optional<dotnet.System.Net.UploadProgressChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_UploadProgressChanged_0__1__UploadProgressChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UploadProgressChanged(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadProgressChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadProgressChangedEventHandler(value);
        return try add_UploadProgressChanged(value: del_value);
    }
    // [IsSpecialName] void remove_UploadProgressChanged(System.Net.UploadProgressChangedEventHandler)
// docid: M:System.Net.WebClient.remove_UploadProgressChanged(System.Net.UploadProgressChangedEventHandler)
    open func remove_UploadProgressChanged(value : Optional<dotnet.System.Net.UploadProgressChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_UploadProgressChanged_0__1__UploadProgressChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UploadProgressChanged(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadProgressChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadProgressChangedEventHandler(value);
        return try remove_UploadProgressChanged(value: del_value);
    }
    // [IsSpecialName] void add_UploadStringCompleted(System.Net.UploadStringCompletedEventHandler)
// docid: M:System.Net.WebClient.add_UploadStringCompleted(System.Net.UploadStringCompletedEventHandler)
    open func add_UploadStringCompleted(value : Optional<dotnet.System.Net.UploadStringCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_UploadStringCompleted_0__1__UploadStringCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UploadStringCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadStringCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadStringCompletedEventHandler(value);
        return try add_UploadStringCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_UploadStringCompleted(System.Net.UploadStringCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_UploadStringCompleted(System.Net.UploadStringCompletedEventHandler)
    open func remove_UploadStringCompleted(value : Optional<dotnet.System.Net.UploadStringCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_UploadStringCompleted_0__1__UploadStringCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UploadStringCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadStringCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadStringCompletedEventHandler(value);
        return try remove_UploadStringCompleted(value: del_value);
    }
    // [IsSpecialName] void add_UploadValuesCompleted(System.Net.UploadValuesCompletedEventHandler)
// docid: M:System.Net.WebClient.add_UploadValuesCompleted(System.Net.UploadValuesCompletedEventHandler)
    open func add_UploadValuesCompleted(value : Optional<dotnet.System.Net.UploadValuesCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__add_UploadValuesCompleted_0__1__UploadValuesCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_UploadValuesCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadValuesCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadValuesCompletedEventHandler(value);
        return try add_UploadValuesCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_UploadValuesCompleted(System.Net.UploadValuesCompletedEventHandler)
// docid: M:System.Net.WebClient.remove_UploadValuesCompleted(System.Net.UploadValuesCompletedEventHandler)
    open func remove_UploadValuesCompleted(value : Optional<dotnet.System.Net.UploadValuesCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebClient_void__remove_UploadValuesCompleted_0__1__UploadValuesCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_UploadValuesCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.UploadValuesCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.UploadValuesCompletedEventHandler(value);
        return try remove_UploadValuesCompleted(value: del_value);
    }
    /**
    Gets or sets the base URI for requests made by a .

    */
    open var BaseAddress : dotnet.System.String {
        get {
            return try! get_BaseAddress();
        }
        set(v) {
            return try! set_BaseAddress(value: v);
        }
    }
    /**
    Gets or sets the application's cache policy for any resources obtained by this WebClient instance using  objects.

    */
    open var CachePolicy : Optional<dotnet.System.Net.Cache.RequestCachePolicy> {
        get {
            return try! get_CachePolicy();
        }
        set(v) {
            return try! set_CachePolicy(value: v!);
        }
    }
    /**
    Gets or sets the network credentials that are sent to the host and used to authenticate the request.

    */
    open var Credentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
    /**
    Gets or sets the  used to upload and download strings.

    */
    open var Encoding : dotnet.System.Text.Encoding {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v);
        }
    }
    /**
    Gets or sets a collection of header name/value pairs associated with the request.

    */
    open var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v);
        }
    }
    /**
    Gets whether a Web request is in progress.

    */
    open var IsBusy : Bool {
        get {
            return try! get_IsBusy();
        }
    }
    /**
    Gets or sets the proxy used by this  object.

    */
    open var Proxy : Optional<dotnet.System.Net.IWebProxy> {
        get {
            return try! get_Proxy();
        }
        set(v) {
            return try! set_Proxy(value: v!);
        }
    }
    /**
    Gets or sets a collection of query name/value pairs associated with the request.

    */
    open var QueryString : dotnet.System.Collections.Specialized.NameValueCollection {
        get {
            return try! get_QueryString();
        }
        set(v) {
            return try! set_QueryString(value: v);
        }
    }
    /**
    Gets a collection of header name/value pairs associated with the response.

    */
    open var ResponseHeaders : Optional<dotnet.System.Net.WebHeaderCollection> {
        get {
            return try! get_ResponseHeaders();
        }
    }
    /**
    Gets or sets a  value that controls whether the  are sent with requests.

    */
    open var UseDefaultCredentials : Bool {
        get {
            return try! get_UseDefaultCredentials();
        }
        set(v) {
            return try! set_UseDefaultCredentials(value: v);
        }
    }
} // WebClient


// type: System.Net.WriteStreamClosedEventArgs
    /**
    Provides data for the  event.

    */
open class WriteStreamClosedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_WriteStreamClosedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.WriteStreamClosedEventArgs.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WriteStreamClosedEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // WriteStreamClosedEventArgs


// type: System.Net.WriteStreamClosedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class WriteStreamClosedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_WriteStreamClosedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.WriteStreamClosedEventArgs)
// docid: M:System.Net.WriteStreamClosedEventHandler.Invoke(System.Object,System.Net.WriteStreamClosedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.WriteStreamClosedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WriteStreamClosedEventHandler_void__Invoke_0__2__Object_WriteStreamClosedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.WriteStreamClosedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.WriteStreamClosedEventHandler.BeginInvoke(System.Object,System.Net.WriteStreamClosedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.WriteStreamClosedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WriteStreamClosedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_WriteStreamClosedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.WriteStreamClosedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WriteStreamClosedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.WriteStreamClosedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.WriteStreamClosedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_WriteStreamClosedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.WriteStreamClosedEventArgs)
// docid: M:System.Net.WriteStreamClosedEventHandler.Invoke(System.Object,System.Net.WriteStreamClosedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.WriteStreamClosedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WriteStreamClosedEventHandler_void__Invoke_0__2__Object_WriteStreamClosedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // WriteStreamClosedEventHandler


}


