// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Diagnostics
extension System.Diagnostics {
// type: System.Diagnostics.Activity
    /**
    Represents an operation with context to be used for logging.

    */
open class Activity
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Activity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Activity.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter operationName: The name of the operation.
    */
    public init(operationName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Activity_ctor_0__1__String(&__thrown, operationName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Diagnostics.Activity AddBaggage(System.String, System.String)
// docid: M:System.Diagnostics.Activity.AddBaggage(System.String,System.String)
    /**
    Updates the  to have a new baggage item with the specified key and value.

    - Parameter key: The baggage key.
    - Parameter value: The baggage value.
    - Returns: 
         for convenient chaining.

    */
    open func AddBaggage(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__AddBaggage_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity AddEvent(System.Diagnostics.ActivityEvent)
// docid: M:System.Diagnostics.Activity.AddEvent(System.Diagnostics.ActivityEvent)
    /**
    Adds the specified activity event to the events list.

    - Parameter e: The activity event to add.
    - Returns: 
         for convenient chaining.

    */
    open func AddEvent(e : dotnet.System.Diagnostics.ActivityEvent) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__AddEvent_0__1__ActivityEvent(&__thrown, self.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity AddTag(System.String, System.String)
// docid: M:System.Diagnostics.Activity.AddTag(System.String,System.String)
    /**
    Updates the  to have a new tag with the provided  and .

    - Parameter key: The tag key.
    - Parameter value: The tag value.
    - Returns: 
         for convenient chaining.

    */
    open func AddTag(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__AddTag_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity AddTag(System.String, System.Object)
// docid: M:System.Diagnostics.Activity.AddTag(System.String,System.Object)
    /**
    Updates the activity to have a tag with an additional  and .

    - Parameter key: The tag key name.
    - Parameter value: The tag value mapped to the input key.
    - Returns: 
         for convenient chaining.

    */
    open func AddTag(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__AddTag_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity SetTag(System.String, System.Object)
// docid: M:System.Diagnostics.Activity.SetTag(System.String,System.Object)
    /**
    Adds or update the activity tag with the input key and value.

    - Parameter key: The tag key name.
    - Parameter value: The tag value mapped to the input key.
    - Returns: 
         for convenient chaining.

    */
    open func SetTag(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__SetTag_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity SetBaggage(System.String, System.String)
// docid: M:System.Diagnostics.Activity.SetBaggage(System.String,System.String)
    open func SetBaggage(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__SetBaggage_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.String GetBaggageItem(System.String)
// docid: M:System.Diagnostics.Activity.GetBaggageItem(System.String)
    /**
    Returns the value of a key-value pair added to the activity with .

    - Parameter key: The baggage key.
    - Returns: The value of the key-value-pair item if it exists, or  if it does not exist.

    */
    open func GetBaggageItem(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_String__GetBaggageItem_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetTagItem(System.String)
// docid: M:System.Diagnostics.Activity.GetTagItem(System.String)
    open func GetTagItem(key : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Object__GetTagItem_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Activity SetEndTime(System.DateTime)
// docid: M:System.Diagnostics.Activity.SetEndTime(System.DateTime)
    /**
    Updates the  to set its  as the difference between  and the specified stop time.

    - Parameter endTimeUtc: The UTC stop time.
    - Returns: 
         for convenient chaining.

    */
    open func SetEndTime(endTimeUtc : dotnet.System.DateTime) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__SetEndTime_0__1__DateTime(&__thrown, self.get_handle(), endTimeUtc.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity SetIdFormat(System.Diagnostics.ActivityIdFormat)
// docid: M:System.Diagnostics.Activity.SetIdFormat(System.Diagnostics.ActivityIdFormat)
    /**
    Sets the ID format on this  before it is started.

    - Parameter format: One of the enumeration values that specifies the format of the  property.
    - Returns: 
         for convenient chaining.

    */
    open func SetIdFormat(format : dotnet.System.Diagnostics.ActivityIdFormat) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__SetIdFormat_0__1__ActivityIdFormat(&__thrown, self.get_handle(), format.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) System.Diagnostics.Activity SetParentId(System.Diagnostics.ActivityTraceId, System.Diagnostics.ActivitySpanId, System.Diagnostics.ActivityTraceFlags)
    // System.Diagnostics.Activity SetParentId(System.String)
// docid: M:System.Diagnostics.Activity.SetParentId(System.String)
    /**
    Updates this  to indicate that the  with an ID of  caused this .

    - Parameter parentId: The ID of the parent operation.
    - Returns: 
         for convenient chaining.

    */
    open func SetParentId(parentId : dotnet.System.String) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__SetParentId_0__1__String(&__thrown, self.get_handle(), parentId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity SetStartTime(System.DateTime)
// docid: M:System.Diagnostics.Activity.SetStartTime(System.DateTime)
    /**
    Sets the start time of this .

    - Parameter startTimeUtc: The  start time in UTC.
    - Returns: 
         for convenient chaining.

    */
    open func SetStartTime(startTimeUtc : dotnet.System.DateTime) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__SetStartTime_0__1__DateTime(&__thrown, self.get_handle(), startTimeUtc.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity SetStatus(System.Diagnostics.ActivityStatusCode, System.String)
// docid: M:System.Diagnostics.Activity.SetStatus(System.Diagnostics.ActivityStatusCode,System.String)
    open func SetStatus(code : dotnet.System.Diagnostics.ActivityStatusCode, description : Optional<dotnet.System.String> = nil) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__SetStatus_0__2__ActivityStatusCode_String(&__thrown, self.get_handle(), code.get_value(), description?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // System.Diagnostics.Activity Start()
// docid: M:System.Diagnostics.Activity.Start
    /**
    Starts the activity.

    - Returns: 
         for convenient chaining.

    */
    open func Start() throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__Start_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // void Stop()
// docid: M:System.Diagnostics.Activity.Stop
    /**
    Stops the activity.

    */
    open func Stop() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__Stop_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Activity.Dispose
    /**
    Stops the activity if it is already started and notifies any event listeners. Nothing will happen otherwise.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCustomProperty(System.String, System.Object)
// docid: M:System.Diagnostics.Activity.SetCustomProperty(System.String,System.Object)
    /**
    Attaches any custom object to this activity. If the specified  was previously associated with another object, the property will be updated to be associated with the new  instead. It is recommended to use a unique property name to avoid conflicts with anyone using the same value.

    - Parameter propertyName: The name to associate the value with.
    - Parameter propertyValue: The object to attach and map to the property name.
    */
    open func SetCustomProperty(propertyName : dotnet.System.String, propertyValue : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__SetCustomProperty_0__2__String_Object(&__thrown, self.get_handle(), propertyName.get_handle(), propertyValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetCustomProperty(System.String)
// docid: M:System.Diagnostics.Activity.GetCustomProperty(System.String)
    /**
    Returns the object mapped to the specified property name.

    - Parameter propertyName: The name associated to the object.
    - Returns: The object mapped to the property name, if one is found; otherwise, .

    */
    open func GetCustomProperty(propertyName : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Object__GetCustomProperty_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityTraceFlags get_ActivityTraceFlags()
// docid: M:System.Diagnostics.Activity.get_ActivityTraceFlags
    open func get_ActivityTraceFlags() throws -> dotnet.System.Diagnostics.ActivityTraceFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivityTraceFlags__get_ActivityTraceFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityTraceFlags(val: __return);
        }
    }
    // [IsSpecialName] void set_ActivityTraceFlags(System.Diagnostics.ActivityTraceFlags)
// docid: M:System.Diagnostics.Activity.set_ActivityTraceFlags(System.Diagnostics.ActivityTraceFlags)
    open func set_ActivityTraceFlags(value : dotnet.System.Diagnostics.ActivityTraceFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__set_ActivityTraceFlags_0__1__ActivityTraceFlags(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>> get_Baggage()
// docid: M:System.Diagnostics.Activity.get_Baggage
    open func get_Baggage() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____get_Baggage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Activity get_Current()
// docid: M:System.Diagnostics.Activity.get_Current
    open class func get_Current() throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__get_Current_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Current(System.Diagnostics.Activity)
// docid: M:System.Diagnostics.Activity.set_Current(System.Diagnostics.Activity)
    open class func set_Current(value : Optional<dotnet.System.Diagnostics.Activity>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__set_Current_0__1__Activity(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityIdFormat get_DefaultIdFormat()
// docid: M:System.Diagnostics.Activity.get_DefaultIdFormat
    open class func get_DefaultIdFormat() throws -> dotnet.System.Diagnostics.ActivityIdFormat {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivityIdFormat__get_DefaultIdFormat_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityIdFormat(val: __return);
        }
    }
    // [IsSpecialName] void set_DefaultIdFormat(System.Diagnostics.ActivityIdFormat)
// docid: M:System.Diagnostics.Activity.set_DefaultIdFormat(System.Diagnostics.ActivityIdFormat)
    open class func set_DefaultIdFormat(value : dotnet.System.Diagnostics.ActivityIdFormat) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__set_DefaultIdFormat_0__1__ActivityIdFormat(&__thrown, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_Duration()
// docid: M:System.Diagnostics.Activity.get_Duration
    open func get_Duration() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_TimeSpan__get_Duration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ForceDefaultIdFormat()
// docid: M:System.Diagnostics.Activity.get_ForceDefaultIdFormat
    open class func get_ForceDefaultIdFormat() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_bool__get_ForceDefaultIdFormat_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ForceDefaultIdFormat(bool)
// docid: M:System.Diagnostics.Activity.set_ForceDefaultIdFormat(System.Boolean)
    open class func set_ForceDefaultIdFormat(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__set_ForceDefaultIdFormat_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Id()
// docid: M:System.Diagnostics.Activity.get_Id
    open func get_Id() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_String__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsAllDataRequested()
// docid: M:System.Diagnostics.Activity.get_IsAllDataRequested
    open func get_IsAllDataRequested() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_bool__get_IsAllDataRequested_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsAllDataRequested(bool)
// docid: M:System.Diagnostics.Activity.set_IsAllDataRequested(System.Boolean)
    open func set_IsAllDataRequested(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__set_IsAllDataRequested_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityIdFormat get_IdFormat()
// docid: M:System.Diagnostics.Activity.get_IdFormat
    open func get_IdFormat() throws -> dotnet.System.Diagnostics.ActivityIdFormat {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivityIdFormat__get_IdFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityIdFormat(val: __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityKind get_Kind()
// docid: M:System.Diagnostics.Activity.get_Kind
    open func get_Kind() throws -> dotnet.System.Diagnostics.ActivityKind {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivityKind__get_Kind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityKind(val: __return);
        }
    }
    // [IsSpecialName] System.String get_OperationName()
// docid: M:System.Diagnostics.Activity.get_OperationName
    open func get_OperationName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_String__get_OperationName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Activity.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DisplayName(System.String)
// docid: M:System.Diagnostics.Activity.set_DisplayName(System.String)
    open func set_DisplayName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__set_DisplayName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivitySource get_Source()
// docid: M:System.Diagnostics.Activity.get_Source
    open func get_Source() throws -> dotnet.System.Diagnostics.ActivitySource {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivitySource__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivitySource(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.Activity get_Parent()
// docid: M:System.Diagnostics.Activity.get_Parent
    open func get_Parent() throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_Activity__get_Parent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ParentId()
// docid: M:System.Diagnostics.Activity.get_ParentId
    open func get_ParentId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_String__get_ParentId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivitySpanId get_ParentSpanId()
// docid: M:System.Diagnostics.Activity.get_ParentSpanId
    open func get_ParentSpanId() throws -> dotnet.System.Diagnostics.ActivitySpanId {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivitySpanId__get_ParentSpanId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivitySpanId(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Recorded()
// docid: M:System.Diagnostics.Activity.get_Recorded
    open func get_Recorded() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_bool__get_Recorded_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_RootId()
// docid: M:System.Diagnostics.Activity.get_RootId
    open func get_RootId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_String__get_RootId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivitySpanId get_SpanId()
// docid: M:System.Diagnostics.Activity.get_SpanId
    open func get_SpanId() throws -> dotnet.System.Diagnostics.ActivitySpanId {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivitySpanId__get_SpanId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivitySpanId(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTime get_StartTimeUtc()
// docid: M:System.Diagnostics.Activity.get_StartTimeUtc
    open func get_StartTimeUtc() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_DateTime__get_StartTimeUtc_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityStatusCode get_Status()
// docid: M:System.Diagnostics.Activity.get_Status
    open func get_Status() throws -> dotnet.System.Diagnostics.ActivityStatusCode {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivityStatusCode__get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityStatusCode(val: __return);
        }
    }
    // [IsSpecialName] System.String get_StatusDescription()
// docid: M:System.Diagnostics.Activity.get_StatusDescription
    open func get_StatusDescription() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_String__get_StatusDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>> get_Tags()
// docid: M:System.Diagnostics.Activity.get_Tags
    open func get_Tags() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>> get_TagObjects()
// docid: M:System.Diagnostics.Activity.get_TagObjects
    open func get_TagObjects() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object____get_TagObjects_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Diagnostics.ActivityEvent> get_Events()
// docid: M:System.Diagnostics.Activity.get_Events
    open func get_Events() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityEvent> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_System_Collections_Generic_IEnumerable_System_Diagnostics_ActivityEvent___get_Events_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Diagnostics.ActivityLink> get_Links()
// docid: M:System.Diagnostics.Activity.get_Links
    open func get_Links() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_System_Collections_Generic_IEnumerable_System_Diagnostics_ActivityLink___get_Links_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityTraceId get_TraceId()
// docid: M:System.Diagnostics.Activity.get_TraceId
    open func get_TraceId() throws -> dotnet.System.Diagnostics.ActivityTraceId {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivityTraceId__get_TraceId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityTraceId(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TraceStateString()
// docid: M:System.Diagnostics.Activity.get_TraceStateString
    open func get_TraceStateString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_String__get_TraceStateString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TraceStateString(System.String)
// docid: M:System.Diagnostics.Activity.set_TraceStateString(System.String)
    open func set_TraceStateString(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__set_TraceStateString_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.Diagnostics.ActivityTraceId> get_TraceIdGenerator()
// docid: M:System.Diagnostics.Activity.get_TraceIdGenerator
    open class func get_TraceIdGenerator() throws -> Optional<dotnet.System.Func_1<dotnet.System.Diagnostics.ActivityTraceId>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_System_Func_System_Diagnostics_ActivityTraceId___get_TraceIdGenerator_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TraceIdGenerator(System.Func<System.Diagnostics.ActivityTraceId>)
// docid: M:System.Diagnostics.Activity.set_TraceIdGenerator(System.Func{System.Diagnostics.ActivityTraceId})
    open class func set_TraceIdGenerator(value : Optional<dotnet.System.Func_1<dotnet.System.Diagnostics.ActivityTraceId>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Activity_void__set_TraceIdGenerator_0__1__System_Func_System_Diagnostics_ActivityTraceId_(&__thrown, (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func set_TraceIdGenerator(value : @escaping () throws -> dotnet.System.Diagnostics.ActivityTraceId) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System.Diagnostics.ActivityTraceId>(value);
        return try set_TraceIdGenerator(value: del_value);
    }
    // [IsSpecialName] System.Diagnostics.ActivityContext get_Context()
// docid: M:System.Diagnostics.Activity.get_Context
    open func get_Context() throws -> dotnet.System.Diagnostics.ActivityContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Activity_ActivityContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityContext(hndl : __return);
        }
    }
    /**
    Gets the flags (defined by the W3C ID specification) associated with the activity.

    */
    open var ActivityTraceFlags : dotnet.System.Diagnostics.ActivityTraceFlags {
        get {
            return try! get_ActivityTraceFlags();
        }
        set(v) {
            return try! set_ActivityTraceFlags(value: v);
        }
    }
    /**
    Gets a collection of key/value pairs that represents information that is passed to children of this .

    */
    open var Baggage : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_Baggage();
        }
    }
    /**
    Gets the context of the activity. Context becomes valid only if the activity has been started.

    */
    open var Context : dotnet.System.Diagnostics.ActivityContext {
        get {
            return try! get_Context();
        }
    }
    /**
    Gets or sets the current operation () for the current thread.  This flows across async calls.

    */
    public static var Current : Optional<dotnet.System.Diagnostics.Activity> {
        get {
            return try! get_Current();
        }
        set(v) {
            return try! set_Current(value: v!);
        }
    }
    /**
    Gets or sets the default ID format for the .

    */
    public static var DefaultIdFormat : dotnet.System.Diagnostics.ActivityIdFormat {
        get {
            return try! get_DefaultIdFormat();
        }
        set(v) {
            return try! set_DefaultIdFormat(value: v);
        }
    }
    /**
    Gets or sets the display name of the activity.

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
        set(v) {
            return try! set_DisplayName(value: v);
        }
    }
    /**
    Gets the duration of the operation.

    */
    open var Duration : dotnet.System.TimeSpan {
        get {
            return try! get_Duration();
        }
    }
    /**
    Gets the list of all the activity events attached to this activity.

    */
    open var Events : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityEvent> {
        get {
            return try! get_Events();
        }
    }
    /**
    Gets or sets a valud that detrmines if the  is always used to define the default ID format.

    */
    public static var ForceDefaultIdFormat : Bool {
        get {
            return try! get_ForceDefaultIdFormat();
        }
        set(v) {
            return try! set_ForceDefaultIdFormat(value: v);
        }
    }
    /**
    Gets an identifier that is specific to a particular request.

    */
    open var Id : Optional<dotnet.System.String> {
        get {
            return try! get_Id();
        }
    }
    /**
    Gets the format for the .

    */
    open var IdFormat : dotnet.System.Diagnostics.ActivityIdFormat {
        get {
            return try! get_IdFormat();
        }
    }
    /**
    Indicates if the this activity should be populated with all the propagation information, as well as all the other properties such as links, tags and events.

    */
    open var IsAllDataRequested : Bool {
        get {
            return try! get_IsAllDataRequested();
        }
        set(v) {
            return try! set_IsAllDataRequested(value: v);
        }
    }
    /**
    Gets the relationship between the activity, its parents, and its children in a trace.

    */
    open var Kind : dotnet.System.Diagnostics.ActivityKind {
        get {
            return try! get_Kind();
        }
    }
    /**
    Gets the list of all the activity links attached to this activity.

    */
    open var Links : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink> {
        get {
            return try! get_Links();
        }
    }
    /**
    Gets the operation name.

    */
    open var OperationName : dotnet.System.String {
        get {
            return try! get_OperationName();
        }
    }
    /**
    Gets the parent  that created this activity.

    */
    open var Parent : Optional<dotnet.System.Diagnostics.Activity> {
        get {
            return try! get_Parent();
        }
    }
    /**
    Gets the ID of this activity's parent.

    */
    open var ParentId : Optional<dotnet.System.String> {
        get {
            return try! get_ParentId();
        }
    }
    /**
    Gets the parent's .

    */
    open var ParentSpanId : dotnet.System.Diagnostics.ActivitySpanId {
        get {
            return try! get_ParentSpanId();
        }
    }
    /**
    Gets a value that indicates whether the W3CIdFlags.Recorded flag is set.

    */
    open var Recorded : Bool {
        get {
            return try! get_Recorded();
        }
    }
    /**
    Gets the root ID of this .

    */
    open var RootId : Optional<dotnet.System.String> {
        get {
            return try! get_RootId();
        }
    }
    /**
    Get the activity source associated with this activity.

    */
    open var Source : dotnet.System.Diagnostics.ActivitySource {
        get {
            return try! get_Source();
        }
    }
    /**
    Gets the SPAN part of the .

    */
    open var SpanId : dotnet.System.Diagnostics.ActivitySpanId {
        get {
            return try! get_SpanId();
        }
    }
    /**
    Gets the time when the operation started.

    */
    open var StartTimeUtc : dotnet.System.DateTime {
        get {
            return try! get_StartTimeUtc();
        }
    }
    open var Status : dotnet.System.Diagnostics.ActivityStatusCode {
        get {
            return try! get_Status();
        }
    }
    open var StatusDescription : Optional<dotnet.System.String> {
        get {
            return try! get_StatusDescription();
        }
    }
    /**
    Returns the list of tags representing information to log along with the activity. This information is not passed on to the children of this activity.

    */
    open var TagObjects : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_TagObjects();
        }
    }
    /**
    Gets a collection of key/value pairs that represent information that will be logged along with the  to the logging system.

    */
    open var Tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>> {
        get {
            return try! get_Tags();
        }
    }
    /**
    Gets the TraceId part of the .

    */
    open var TraceId : dotnet.System.Diagnostics.ActivityTraceId {
        get {
            return try! get_TraceId();
        }
    }
    public static var TraceIdGenerator : Optional<dotnet.System.Func_1<dotnet.System.Diagnostics.ActivityTraceId>> {
        get {
            return try! get_TraceIdGenerator();
        }
        set(v) {
            return try! set_TraceIdGenerator(value: v!);
        }
    }
    /**
    Gets the W3C  header.

    */
    open var TraceStateString : Optional<dotnet.System.String> {
        get {
            return try! get_TraceStateString();
        }
        set(v) {
            return try! set_TraceStateString(value: v!);
        }
    }
} // Activity


// type: System.Diagnostics.ActivityContext
// boxed value type
    /**
    A representation that conforms to the W3C TraceContext specification. It contains two identifiers: a TraceId and a SpanId,  along with a set of common TraceFlags and system-specific TraceState values.

    */
public final class ActivityContext
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Indicates if the activity context was propagated from a remote parent.

    */
    public var IsRemote : Bool {
        get {
            return try! get_IsRemote();
        }
    }
    /**
    The Id of the request as known by the caller.

    */
    public var SpanId : dotnet.System.Diagnostics.ActivitySpanId {
        get {
            return try! get_SpanId();
        }
    }
    /**
    The flags defined by the W3C standard along with the ID for the activity.

    */
    public var TraceFlags : dotnet.System.Diagnostics.ActivityTraceFlags {
        get {
            return try! get_TraceFlags();
        }
    }
    /**
    The trace identifier.

    */
    public var TraceId : dotnet.System.Diagnostics.ActivityTraceId {
        get {
            return try! get_TraceId();
        }
    }
    /**
    Holds the W3C 'tracestate' header.

    */
    public var TraceState : Optional<dotnet.System.String> {
        get {
            return try! get_TraceState();
        }
    }
// TODO COPE ctor (span) .ctor(System.Diagnostics.ActivityTraceId, System.Diagnostics.ActivitySpanId, System.Diagnostics.ActivityTraceFlags, System.String, bool)
    public override init() {
        let h = System_Diagnostics_ActivityContext_implicit_ctor();
            super.init(hndl: h);
    }
    // bool TryParse(System.String, System.String, ref System.Diagnostics.ActivityContext)
// docid: M:System.Diagnostics.ActivityContext.TryParse(System.String,System.String,System.Diagnostics.ActivityContext@)
    /**
    Tries to parse the W3C trace context headers to an  object.

    - Parameter traceParent: The W3C trace parent header.
    - Parameter traceState: The W3C trace state.
    - Parameter context: When this method returns , the  object created from the parsing operation.
    - Returns: 
         if the parsing was successful;  otherwise.

    */
    public class func TryParse(traceParent : Optional<dotnet.System.String>, traceState : Optional<dotnet.System.String>, context : inout dotnet.System.Diagnostics.ActivityContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_context = context.get_handle();
        let __return = System_Diagnostics_ActivityContext_bool__TryParse_0__3__String_String_outActivityContext(&__thrown, traceParent?.get_handle() ?? nil, traceState?.get_handle() ?? nil, &_tmp_out_context);
        let _tmp2_context = dotnet.System.Diagnostics.ActivityContext(hndl: _tmp_out_context);
            context = _tmp2_context;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Diagnostics.ActivityContext Parse(System.String, System.String)
// docid: M:System.Diagnostics.ActivityContext.Parse(System.String,System.String)
    /**
    Parses a W3C trace context headers to an  object.

    - Parameter traceParent: The W3C trace parent header.
    - Parameter traceState: The trace state.
    - Returns: The  object created from the parsing operation.

    */
    public class func Parse(traceParent : dotnet.System.String, traceState : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.ActivityContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_ActivityContext__Parse_0__2__String_String(&__thrown, traceParent.get_handle(), traceState?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityContext(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Diagnostics.ActivityContext, System.Diagnostics.ActivityContext)
// docid: M:System.Diagnostics.ActivityContext.op_Equality(System.Diagnostics.ActivityContext,System.Diagnostics.ActivityContext)
    /**
    Determines whether two specified  values are equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are equal; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Diagnostics.ActivityContext, right : dotnet.System.Diagnostics.ActivityContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_bool__op_Equality_0__2__ActivityContext_ActivityContext(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Diagnostics.ActivityContext, System.Diagnostics.ActivityContext)
// docid: M:System.Diagnostics.ActivityContext.op_Inequality(System.Diagnostics.ActivityContext,System.Diagnostics.ActivityContext)
    /**
    Determines whether two specified  values are not equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Diagnostics.ActivityContext, right : dotnet.System.Diagnostics.ActivityContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_bool__op_Inequality_0__2__ActivityContext_ActivityContext(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Diagnostics.ActivityContext)
// docid: M:System.Diagnostics.ActivityContext.Equals(System.Diagnostics.ActivityContext)
    /**
    Indicates whether the current object is equal to another object of the same type.

    - Parameter value: The object to compare to this instance.
    - Returns: 
         if the current object is equal to the  parameter; otherwise, .

    */
    public func Equals(value : dotnet.System.Diagnostics.ActivityContext) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_bool__Equals_0__1__ActivityContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Diagnostics.ActivityContext.Equals(System.Object)
    /**
    Determines whether this instance and a specified  object have the same value.

    - Parameter obj: The object to compare to this instance.
    - Returns: 
         if the current object is equal to the  parameter; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Diagnostics.ActivityContext.GetHashCode
    /**
    Provides a hash function for the current  that's suitable for hashing algorithms and data structures, such as hash tables.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityTraceId get_TraceId()
// docid: M:System.Diagnostics.ActivityContext.get_TraceId
    public func get_TraceId() throws -> dotnet.System.Diagnostics.ActivityTraceId {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_ActivityTraceId__get_TraceId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityTraceId(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivitySpanId get_SpanId()
// docid: M:System.Diagnostics.ActivityContext.get_SpanId
    public func get_SpanId() throws -> dotnet.System.Diagnostics.ActivitySpanId {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_ActivitySpanId__get_SpanId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivitySpanId(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityTraceFlags get_TraceFlags()
// docid: M:System.Diagnostics.ActivityContext.get_TraceFlags
    public func get_TraceFlags() throws -> dotnet.System.Diagnostics.ActivityTraceFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_ActivityTraceFlags__get_TraceFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityTraceFlags(val: __return);
        }
    }
    // [IsSpecialName] System.String get_TraceState()
// docid: M:System.Diagnostics.ActivityContext.get_TraceState
    public func get_TraceState() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_String__get_TraceState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IsRemote()
// docid: M:System.Diagnostics.ActivityContext.get_IsRemote
    public func get_IsRemote() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityContext_bool__get_IsRemote_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ActivityContext


// type: System.Diagnostics.ActivityCreationOptions`1
// boxed value type
    /**
    Encapsulates all the information that is sent to the activity listener, to make decisions about the creation of the activity instance, as well as its state.

The possible generic type parameters are  or .

    */
public final class ActivityCreationOptions_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityCreationOptions_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the activity kind which the activity will be created with.

    */
    public var Kind : dotnet.System.Diagnostics.ActivityKind {
        get {
            return try! get_Kind();
        }
    }
    /**
    Gets the enumeration of activity links that the activity will be created with.

    */
    public var Links : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink>> {
        get {
            return try! get_Links();
        }
    }
    /**
    Gets the name to use as OperationName of the activity that will get created.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the parent context or parent Id that the activity will get created with.

    */
    public var Parent : T {
        get {
            return try! get_Parent();
        }
    }
    /**
    Gets the collection that is used to add more tags during the sampling process. The added tags are also added to the created Activity if it is decided that it should be created by the  callbacks.

    */
    public var SamplingTags : dotnet.System.Diagnostics.ActivityTagsCollection {
        get {
            return try! get_SamplingTags();
        }
    }
    /**
    Gets the activity source that creates the activity.

    */
    public var Source : dotnet.System.Diagnostics.ActivitySource {
        get {
            return try! get_Source();
        }
    }
    /**
    Gets the tags that the activity will be created with.

    */
    public var Tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> {
        get {
            return try! get_Tags();
        }
    }
    /**
    Gets the trace Id to use in the Activity object if it is decided that it should be created by  callbacks.

    */
    public var TraceId : dotnet.System.Diagnostics.ActivityTraceId {
        get {
            return try! get_TraceId();
        }
    }
    public override init() {
        let h = System_Diagnostics_ActivityCreationOptions_1_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Diagnostics.ActivitySource get_Source()
// docid: M:System.Diagnostics.ActivityCreationOptions`1.get_Source
    public func get_Source() throws -> dotnet.System.Diagnostics.ActivitySource {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityCreationOptions_1_ActivitySource__get_Source_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivitySource(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.ActivityCreationOptions`1.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityCreationOptions_1_String__get_Name_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityKind get_Kind()
// docid: M:System.Diagnostics.ActivityCreationOptions`1.get_Kind
    public func get_Kind() throws -> dotnet.System.Diagnostics.ActivityKind {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityCreationOptions_1_ActivityKind__get_Kind_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityKind(val: __return);
        }
    }
    // [IsSpecialName] T get_Parent()
// docid: M:System.Diagnostics.ActivityCreationOptions`1.get_Parent
    public func get_Parent() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityCreationOptions_1_T__get_Parent_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>> get_Tags()
// docid: M:System.Diagnostics.ActivityCreationOptions`1.get_Tags
    public func get_Tags() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityCreationOptions_1_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object____get_Tags_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Diagnostics.ActivityLink> get_Links()
// docid: M:System.Diagnostics.ActivityCreationOptions`1.get_Links
    public func get_Links() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityCreationOptions_1_System_Collections_Generic_IEnumerable_System_Diagnostics_ActivityLink___get_Links_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityTagsCollection get_SamplingTags()
// docid: M:System.Diagnostics.ActivityCreationOptions`1.get_SamplingTags
    public func get_SamplingTags() throws -> dotnet.System.Diagnostics.ActivityTagsCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityCreationOptions_1_ActivityTagsCollection__get_SamplingTags_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityTagsCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityTraceId get_TraceId()
// docid: M:System.Diagnostics.ActivityCreationOptions`1.get_TraceId
    public func get_TraceId() throws -> dotnet.System.Diagnostics.ActivityTraceId {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityCreationOptions_1_ActivityTraceId__get_TraceId_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityTraceId(hndl : __return);
        }
    }
} // ActivityCreationOptions_1


// type: System.Diagnostics.ActivityEvent
// boxed value type
    /**
    Represents an event containing a name and a timestamp, as well as an optional list of tags.

    */
public final class ActivityEvent
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityEvent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the activity event name.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the collection of tags associated with the event.

    */
    public var Tags : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>> {
        get {
            return try! get_Tags();
        }
    }
    /**
    Gets the activity event timestamp.

    */
    public var Timestamp : dotnet.System.DateTimeOffset {
        get {
            return try! get_Timestamp();
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.ActivityEvent.#ctor(System.String)
    /**
    Initializes a new activity event instance using the specified name and the current time as the event timestamp.

    - Parameter name: The event name.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ActivityEvent_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.DateTimeOffset, System.Diagnostics.ActivityTagsCollection)
// docid: M:System.Diagnostics.ActivityEvent.#ctor(System.String,System.DateTimeOffset,System.Diagnostics.ActivityTagsCollection)
    /**
    Initializes a new activity event instance using the specified name, timestamp and tags.

    - Parameter name: The event name.
    - Parameter timestamp: The event timestamp. Timestamp must only be used for the events that happened in the past, not at the moment of this call.
    - Parameter tags: The event tags.
    */
    public init(name : dotnet.System.String, timestamp : dotnet.System.DateTimeOffset, tags : Optional<dotnet.System.Diagnostics.ActivityTagsCollection>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ActivityEvent_ctor_0__3__String_DateTimeOffset_ActivityTagsCollection(&__thrown, name.get_handle(), timestamp.get_handle(), tags?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Diagnostics_ActivityEvent_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.ActivityEvent.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityEvent_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTimeOffset get_Timestamp()
// docid: M:System.Diagnostics.ActivityEvent.get_Timestamp
    public func get_Timestamp() throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityEvent_DateTimeOffset__get_Timestamp_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>> get_Tags()
// docid: M:System.Diagnostics.ActivityEvent.get_Tags
    public func get_Tags() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityEvent_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object____get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // ActivityEvent


// type: System.Diagnostics.ActivityIdFormat
    /**
    Specifies the format of the  property.

    */
public struct ActivityIdFormat : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityIdFormat_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ActivityIdFormat Unknown
    /**
    An unknown format.

    */
    public static var Unknown : dotnet.System.Diagnostics.ActivityIdFormat {
        get {
        let __return = dotnet.System.Diagnostics.ActivityIdFormat(val: System_Diagnostics_ActivityIdFormat_get_Unknown());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityIdFormat Hierarchical
    /**
    The hierarchical format.

    */
    public static var Hierarchical : dotnet.System.Diagnostics.ActivityIdFormat {
        get {
        let __return = dotnet.System.Diagnostics.ActivityIdFormat(val: System_Diagnostics_ActivityIdFormat_get_Hierarchical());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityIdFormat W3C
    /**
    The W3C format.

    */
    public static var W3C : dotnet.System.Diagnostics.ActivityIdFormat {
        get {
        let __return = dotnet.System.Diagnostics.ActivityIdFormat(val: System_Diagnostics_ActivityIdFormat_get_W3C());
            return __return;
        }
    }
} // ActivityIdFormat


// type: System.Diagnostics.ActivityKind
    /**
    Describes the relationship between the activity, its parents and its children in a trace.

    */
public struct ActivityKind : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityKind_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ActivityKind Internal
    /**
    Internal operation within an application, as opposed to operations with remote parents or children. This is the default value.

    */
    public static var Internal : dotnet.System.Diagnostics.ActivityKind {
        get {
        let __return = dotnet.System.Diagnostics.ActivityKind(val: System_Diagnostics_ActivityKind_get_Internal());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityKind Server
    /**
    Requests incoming from external component.

    */
    public static var Server : dotnet.System.Diagnostics.ActivityKind {
        get {
        let __return = dotnet.System.Diagnostics.ActivityKind(val: System_Diagnostics_ActivityKind_get_Server());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityKind Client
    /**
    Outgoing request to the external component.

    */
    public static var Client : dotnet.System.Diagnostics.ActivityKind {
        get {
        let __return = dotnet.System.Diagnostics.ActivityKind(val: System_Diagnostics_ActivityKind_get_Client());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityKind Producer
    /**
    Output provided to external components.

    */
    public static var Producer : dotnet.System.Diagnostics.ActivityKind {
        get {
        let __return = dotnet.System.Diagnostics.ActivityKind(val: System_Diagnostics_ActivityKind_get_Producer());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityKind Consumer
    /**
    Output received from an external component.

    */
    public static var Consumer : dotnet.System.Diagnostics.ActivityKind {
        get {
        let __return = dotnet.System.Diagnostics.ActivityKind(val: System_Diagnostics_ActivityKind_get_Consumer());
            return __return;
        }
    }
} // ActivityKind


// type: System.Diagnostics.ActivityLink
// boxed value type
    /**
    Activities may be linked to zero or more activity context instances that are causally related.

Activity links can point to activity contexts inside a single trace or across different traces.

Activity links can be used to represent batched operations where an activity was initiated by multiple initiating activities, each representing a single incoming item being processed in the batch.

    */
public final class ActivityLink
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityLink_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Retrieves the activity context inside this activity link.

    */
    public var Context : dotnet.System.Diagnostics.ActivityContext {
        get {
            return try! get_Context();
        }
    }
    /**
    Retrieves the key-value pair enumeration of tags attached to the activity context.

    */
    public var Tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> {
        get {
            return try! get_Tags();
        }
    }
    // .ctor(System.Diagnostics.ActivityContext, System.Diagnostics.ActivityTagsCollection)
// docid: M:System.Diagnostics.ActivityLink.#ctor(System.Diagnostics.ActivityContext,System.Diagnostics.ActivityTagsCollection)
    /**
    Constructs a new activity link, which can be linked to an activity.

    - Parameter context: The trace activity context.
    - Parameter tags: The key-value pair list of tags associated to the activity context.
    */
    public init(context : dotnet.System.Diagnostics.ActivityContext, tags : Optional<dotnet.System.Diagnostics.ActivityTagsCollection>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ActivityLink_ctor_0__2__ActivityContext_ActivityTagsCollection(&__thrown, context.get_handle(), tags?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Diagnostics_ActivityLink_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.Diagnostics.ActivityLink.Equals(System.Object)
    /**
    Indicates whether the current activity link is equal to another object.

    - Parameter obj: The object to compare.
    - Returns: 
         if the current activity link is equal to ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityLink_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Diagnostics.ActivityLink)
// docid: M:System.Diagnostics.ActivityLink.Equals(System.Diagnostics.ActivityLink)
    /**
    Indicates whether the current activity link is equal to another activity link.

    - Parameter value: The activity link to compare.
    - Returns: 
         if the current activity link is equal to ; otherwise, .

    */
    public func Equals(value : dotnet.System.Diagnostics.ActivityLink) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityLink_bool__Equals_0__1__ActivityLink(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Diagnostics.ActivityLink, System.Diagnostics.ActivityLink)
// docid: M:System.Diagnostics.ActivityLink.op_Equality(System.Diagnostics.ActivityLink,System.Diagnostics.ActivityLink)
    /**
    Determines whether two specified  values are equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are equal; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Diagnostics.ActivityLink, right : dotnet.System.Diagnostics.ActivityLink) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityLink_bool__op_Equality_0__2__ActivityLink_ActivityLink(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Diagnostics.ActivityLink, System.Diagnostics.ActivityLink)
// docid: M:System.Diagnostics.ActivityLink.op_Inequality(System.Diagnostics.ActivityLink,System.Diagnostics.ActivityLink)
    /**
    Determines whether two specified  values are not equal.

    - Parameter left: The first value to compare.
    - Parameter right: The second value to compare.
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Diagnostics.ActivityLink, right : dotnet.System.Diagnostics.ActivityLink) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityLink_bool__op_Inequality_0__2__ActivityLink_ActivityLink(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Diagnostics.ActivityLink.GetHashCode
    /**
    Provides a hash function for the current  that's suitable for hashing algorithms and data structures, such as hash tables.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityLink_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ActivityContext get_Context()
// docid: M:System.Diagnostics.ActivityLink.get_Context
    public func get_Context() throws -> dotnet.System.Diagnostics.ActivityContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityLink_ActivityContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityContext(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>> get_Tags()
// docid: M:System.Diagnostics.ActivityLink.get_Tags
    public func get_Tags() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityLink_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object____get_Tags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ActivityLink


// type: System.Diagnostics.ActivityListener
    /**
    Allows listening to the start and stop activity events and gives the opportunity to decide creating an activity for sampling scenarios.

    */
public final class ActivityListener
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.ActivityListener.#ctor
    /**
    Construct a new activity listener object to start listeneing to the activity events.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ActivityListener_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.ActivityListener.Dispose
    /**
    Unregisters this activity listener object from listening to activity events.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityListener_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<System.Diagnostics.Activity> get_ActivityStarted()
// docid: M:System.Diagnostics.ActivityListener.get_ActivityStarted
    public func get_ActivityStarted() throws -> Optional<dotnet.System.Action_1<dotnet.System.Diagnostics.Activity>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityListener_System_Action_System_Diagnostics_Activity___get_ActivityStarted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActivityStarted(System.Action<System.Diagnostics.Activity>)
// docid: M:System.Diagnostics.ActivityListener.set_ActivityStarted(System.Action{System.Diagnostics.Activity})
    public func set_ActivityStarted(value : Optional<dotnet.System.Action_1<dotnet.System.Diagnostics.Activity>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityListener_void__set_ActivityStarted_0__1__System_Action_System_Diagnostics_Activity_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ActivityStarted(value : @escaping (Optional<dotnet.System.Diagnostics.Activity>) throws -> Void) throws {
        let del_value = try dotnet.System.Action_1<dotnet.System.Diagnostics.Activity>(value);
        return try set_ActivityStarted(value: del_value);
    }
    // [IsSpecialName] System.Action<System.Diagnostics.Activity> get_ActivityStopped()
// docid: M:System.Diagnostics.ActivityListener.get_ActivityStopped
    public func get_ActivityStopped() throws -> Optional<dotnet.System.Action_1<dotnet.System.Diagnostics.Activity>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityListener_System_Action_System_Diagnostics_Activity___get_ActivityStopped_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ActivityStopped(System.Action<System.Diagnostics.Activity>)
// docid: M:System.Diagnostics.ActivityListener.set_ActivityStopped(System.Action{System.Diagnostics.Activity})
    public func set_ActivityStopped(value : Optional<dotnet.System.Action_1<dotnet.System.Diagnostics.Activity>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityListener_void__set_ActivityStopped_0__1__System_Action_System_Diagnostics_Activity_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ActivityStopped(value : @escaping (Optional<dotnet.System.Diagnostics.Activity>) throws -> Void) throws {
        let del_value = try dotnet.System.Action_1<dotnet.System.Diagnostics.Activity>(value);
        return try set_ActivityStopped(value: del_value);
    }
    // [IsSpecialName] System.Func<System.Diagnostics.ActivitySource,bool> get_ShouldListenTo()
// docid: M:System.Diagnostics.ActivityListener.get_ShouldListenTo
    public func get_ShouldListenTo() throws -> Optional<dotnet.System.Func_2<dotnet.System.Diagnostics.ActivitySource,Bool>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityListener_System_Func_System_Diagnostics_ActivitySource_bool___get_ShouldListenTo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ShouldListenTo(System.Func<System.Diagnostics.ActivitySource,bool>)
// docid: M:System.Diagnostics.ActivityListener.set_ShouldListenTo(System.Func{System.Diagnostics.ActivitySource,System.Boolean})
    public func set_ShouldListenTo(value : Optional<dotnet.System.Func_2<dotnet.System.Diagnostics.ActivitySource,Bool>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityListener_void__set_ShouldListenTo_0__1__System_Func_System_Diagnostics_ActivitySource_bool_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ShouldListenTo(value : @escaping (Optional<dotnet.System.Diagnostics.ActivitySource>) throws -> Bool) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System.Diagnostics.ActivitySource,Swift.Bool>(value);
        return try set_ShouldListenTo(value: del_value);
    }
    // [IsSpecialName] System.Diagnostics.SampleActivity<System.String> get_SampleUsingParentId()
// docid: M:System.Diagnostics.ActivityListener.get_SampleUsingParentId
    public func get_SampleUsingParentId() throws -> Optional<dotnet.System.Diagnostics.SampleActivity_1<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityListener_System_Diagnostics_SampleActivity_string___get_SampleUsingParentId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.SampleActivity_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SampleUsingParentId(System.Diagnostics.SampleActivity<System.String>)
// docid: M:System.Diagnostics.ActivityListener.set_SampleUsingParentId(System.Diagnostics.SampleActivity{System.String})
    public func set_SampleUsingParentId(value : Optional<dotnet.System.Diagnostics.SampleActivity_1<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityListener_void__set_SampleUsingParentId_0__1__System_Diagnostics_SampleActivity_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.SampleActivity<System.Diagnostics.ActivityContext> get_Sample()
// docid: M:System.Diagnostics.ActivityListener.get_Sample
    public func get_Sample() throws -> Optional<dotnet.System.Diagnostics.SampleActivity_1<dotnet.System.Diagnostics.ActivityContext>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityListener_System_Diagnostics_SampleActivity_System_Diagnostics_ActivityContext___get_Sample_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.SampleActivity_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Sample(System.Diagnostics.SampleActivity<System.Diagnostics.ActivityContext>)
// docid: M:System.Diagnostics.ActivityListener.set_Sample(System.Diagnostics.SampleActivity{System.Diagnostics.ActivityContext})
    public func set_Sample(value : Optional<dotnet.System.Diagnostics.SampleActivity_1<dotnet.System.Diagnostics.ActivityContext>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityListener_void__set_Sample_0__1__System_Diagnostics_SampleActivity_System_Diagnostics_ActivityContext_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the callback used to listen to the activity start event.

    */
    public var ActivityStarted : Optional<dotnet.System.Action_1<dotnet.System.Diagnostics.Activity>> {
        get {
            return try! get_ActivityStarted();
        }
        set(v) {
            return try! set_ActivityStarted(value: v!);
        }
    }
    /**
    Gets or sets the callback used to listen to the activity stop event.

    */
    public var ActivityStopped : Optional<dotnet.System.Action_1<dotnet.System.Diagnostics.Activity>> {
        get {
            return try! get_ActivityStopped();
        }
        set(v) {
            return try! set_ActivityStopped(value: v!);
        }
    }
    /**
    Gets or sets the callback that is used to decide if creating  objects with a specific data state is allowed.

    */
    public var Sample : Optional<dotnet.System.Diagnostics.SampleActivity_1<dotnet.System.Diagnostics.ActivityContext>> {
        get {
            return try! get_Sample();
        }
        set(v) {
            return try! set_Sample(value: v!);
        }
    }
    /**
    Gets or sets the callback that is used to decide if creating  objects with a specific data state is allowed.

    */
    public var SampleUsingParentId : Optional<dotnet.System.Diagnostics.SampleActivity_1<dotnet.System.String>> {
        get {
            return try! get_SampleUsingParentId();
        }
        set(v) {
            return try! set_SampleUsingParentId(value: v!);
        }
    }
    /**
    Gets or sets the callback that allows deciding if activity object events that were created using the activity source object should be listened or not.

    */
    public var ShouldListenTo : Optional<dotnet.System.Func_2<dotnet.System.Diagnostics.ActivitySource,Bool>> {
        get {
            return try! get_ShouldListenTo();
        }
        set(v) {
            return try! set_ShouldListenTo(value: v!);
        }
    }
} // ActivityListener


// type: System.Diagnostics.ActivitySamplingResult
    /**
    Enumeration values used by  to indicate the amount of data to collect for the related . Requesting more data causes a greater performance overhead.

    */
public struct ActivitySamplingResult : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivitySamplingResult_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ActivitySamplingResult None
    /**
    The activity object does not need to be created.

    */
    public static var None : dotnet.System.Diagnostics.ActivitySamplingResult {
        get {
        let __return = dotnet.System.Diagnostics.ActivitySamplingResult(val: System_Diagnostics_ActivitySamplingResult_get_None());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivitySamplingResult PropagationData
    /**
    The activity object needs to be created. It will have a Name, a Source, an Id and Baggage. Other properties are unnecessary and will be ignored by this listener.

    */
    public static var PropagationData : dotnet.System.Diagnostics.ActivitySamplingResult {
        get {
        let __return = dotnet.System.Diagnostics.ActivitySamplingResult(val: System_Diagnostics_ActivitySamplingResult_get_PropagationData());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivitySamplingResult AllData
    /**
    The activity object should be populated with all the propagation information and also all other properties such as Links, Tags, and Events. Using this value causes  to return .

    */
    public static var AllData : dotnet.System.Diagnostics.ActivitySamplingResult {
        get {
        let __return = dotnet.System.Diagnostics.ActivitySamplingResult(val: System_Diagnostics_ActivitySamplingResult_get_AllData());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivitySamplingResult AllDataAndRecorded
    /**
    The activity object should be populated the same as the  case. Additionally, Activity.Recorded is set to . For activities using the W3C trace ids, this sets a flag bit in the ID that will be propagated downstream requesting that the trace is recorded everywhere.

    */
    public static var AllDataAndRecorded : dotnet.System.Diagnostics.ActivitySamplingResult {
        get {
        let __return = dotnet.System.Diagnostics.ActivitySamplingResult(val: System_Diagnostics_ActivitySamplingResult_get_AllDataAndRecorded());
            return __return;
        }
    }
} // ActivitySamplingResult


// type: System.Diagnostics.ActivitySource
    /**
    Provides APIs to create and start  objects and to register  objects to listen to the  events.

    */
public final class ActivitySource
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivitySource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.ActivitySource.#ctor(System.String,System.String)
    /**
    Constructs an activity source object with the specified .

    - Parameter name: The name of the activity source object.
    - Parameter version: The version of the component publishing the tracing info.
    */
    public init(name : dotnet.System.String, version : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ActivitySource_ctor_0__2__String_String(&__thrown, name.get_handle(), version?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool HasListeners()
// docid: M:System.Diagnostics.ActivitySource.HasListeners
    /**
    Checks if there are any listeners for this activity source.

    - Returns: 
         if there is a listener registered for this activity source; otherwise, .

    */
    public func HasListeners() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_bool__HasListeners_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Diagnostics.Activity CreateActivity(System.String, System.Diagnostics.ActivityKind)
// docid: M:System.Diagnostics.ActivitySource.CreateActivity(System.String,System.Diagnostics.ActivityKind)
    public func CreateActivity(name : dotnet.System.String, kind : dotnet.System.Diagnostics.ActivityKind) throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_Activity__CreateActivity_0__2__String_ActivityKind(&__thrown, self.get_handle(), name.get_handle(), kind.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Activity CreateActivity(System.String, System.Diagnostics.ActivityKind, System.Diagnostics.ActivityContext, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Collections.Generic.IEnumerable<System.Diagnostics.ActivityLink>, System.Diagnostics.ActivityIdFormat)
// docid: M:System.Diagnostics.ActivitySource.CreateActivity(System.String,System.Diagnostics.ActivityKind,System.Diagnostics.ActivityContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Diagnostics.ActivityLink},System.Diagnostics.ActivityIdFormat)
    public func CreateActivity(name : dotnet.System.String, kind : dotnet.System.Diagnostics.ActivityKind, parentContext : dotnet.System.Diagnostics.ActivityContext, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> = nil, links : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink>> = nil, idFormat : dotnet.System.Diagnostics.ActivityIdFormat/* TODO default enum */) throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_Activity__CreateActivity_0__6__String_ActivityKind_ActivityContext_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object___System_Collections_Generic_IEnumerable_System_Diagnostics_ActivityLink__ActivityIdFormat(&__thrown, self.get_handle(), name.get_handle(), kind.get_value(), parentContext.get_handle(), (tags?.get_handle()), (links?.get_handle()), idFormat.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Activity CreateActivity(System.String, System.Diagnostics.ActivityKind, System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Collections.Generic.IEnumerable<System.Diagnostics.ActivityLink>, System.Diagnostics.ActivityIdFormat)
// docid: M:System.Diagnostics.ActivitySource.CreateActivity(System.String,System.Diagnostics.ActivityKind,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Diagnostics.ActivityLink},System.Diagnostics.ActivityIdFormat)
    public func CreateActivity(name : dotnet.System.String, kind : dotnet.System.Diagnostics.ActivityKind, parentId : dotnet.System.String, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> = nil, links : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink>> = nil, idFormat : dotnet.System.Diagnostics.ActivityIdFormat/* TODO default enum */) throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_Activity__CreateActivity_0__6__String_ActivityKind_String_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object___System_Collections_Generic_IEnumerable_System_Diagnostics_ActivityLink__ActivityIdFormat(&__thrown, self.get_handle(), name.get_handle(), kind.get_value(), parentId.get_handle(), (tags?.get_handle()), (links?.get_handle()), idFormat.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Activity StartActivity(System.String, System.Diagnostics.ActivityKind)
// docid: M:System.Diagnostics.ActivitySource.StartActivity(System.String,System.Diagnostics.ActivityKind)
    /**
    Creates a new activity if there are active listeners for it, using the specified name and activity kind.

    - Parameter name: The operation name of the activity.
    - Parameter kind: The activity kind.
    - Returns: The created activity object, if it had active listeners, or  if it has no event listeners.

    */
    public func StartActivity(name : dotnet.System.String, kind : dotnet.System.Diagnostics.ActivityKind/* TODO default enum */) throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_Activity__StartActivity_0__2__String_ActivityKind(&__thrown, self.get_handle(), name.get_handle(), kind.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Activity StartActivity(System.String, System.Diagnostics.ActivityKind, System.Diagnostics.ActivityContext, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Collections.Generic.IEnumerable<System.Diagnostics.ActivityLink>, System.DateTimeOffset)
// docid: M:System.Diagnostics.ActivitySource.StartActivity(System.String,System.Diagnostics.ActivityKind,System.Diagnostics.ActivityContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Diagnostics.ActivityLink},System.DateTimeOffset)
    /**
    Creates a new activity if there are active listeners for it, using the specified name, activity kind, parent activity context, tags, optional activity link and optional start time.

    - Parameter name: The operation name of the activity.
    - Parameter kind: The activity kind.
    - Parameter parentContext: The parent  object to initialize the created activity object with.
    - Parameter tags: The optional tags list to initialize the created activity object with.
    - Parameter links: The optional  list to initialize the created activity object with.
    - Parameter startTime: The optional start timestamp to set on the created activity object.
    - Returns: The created activity object, if it had active listeners, or  if it has no event listeners.

    */
    public func StartActivity(name : dotnet.System.String, kind : dotnet.System.Diagnostics.ActivityKind, parentContext : dotnet.System.Diagnostics.ActivityContext, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> = nil, links : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink>> = nil, startTime : dotnet.System.DateTimeOffset/* TODO default valuetype */) throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_Activity__StartActivity_0__6__String_ActivityKind_ActivityContext_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object___System_Collections_Generic_IEnumerable_System_Diagnostics_ActivityLink__DateTimeOffset(&__thrown, self.get_handle(), name.get_handle(), kind.get_value(), parentContext.get_handle(), (tags?.get_handle()), (links?.get_handle()), startTime.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Activity StartActivity(System.String, System.Diagnostics.ActivityKind, System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Collections.Generic.IEnumerable<System.Diagnostics.ActivityLink>, System.DateTimeOffset)
// docid: M:System.Diagnostics.ActivitySource.StartActivity(System.String,System.Diagnostics.ActivityKind,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Diagnostics.ActivityLink},System.DateTimeOffset)
    /**
    Creates a new activity if there are active listeners for it, using the specified name, activity kind, parent Id, tags, optional activity links and optional start time.

    - Parameter name: The operation name of the activity.
    - Parameter kind: The activity kind.
    - Parameter parentId: The parent Id to initialize the created activity object with.
    - Parameter tags: The optional tags list to initialize the created activity object with.
    - Parameter links: The optional  list to initialize the created activity object with.
    - Parameter startTime: The optional start timestamp to set on the created activity object.
    - Returns: The created activity object, if it had active listeners, or  if it has no event listeners.

    */
    public func StartActivity(name : dotnet.System.String, kind : dotnet.System.Diagnostics.ActivityKind, parentId : dotnet.System.String, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> = nil, links : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink>> = nil, startTime : dotnet.System.DateTimeOffset/* TODO default valuetype */) throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_Activity__StartActivity_0__6__String_ActivityKind_String_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object___System_Collections_Generic_IEnumerable_System_Diagnostics_ActivityLink__DateTimeOffset(&__thrown, self.get_handle(), name.get_handle(), kind.get_value(), parentId.get_handle(), (tags?.get_handle()), (links?.get_handle()), startTime.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Activity StartActivity(System.Diagnostics.ActivityKind, System.Diagnostics.ActivityContext, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Collections.Generic.IEnumerable<System.Diagnostics.ActivityLink>, System.DateTimeOffset, System.String)
// docid: M:System.Diagnostics.ActivitySource.StartActivity(System.Diagnostics.ActivityKind,System.Diagnostics.ActivityContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Diagnostics.ActivityLink},System.DateTimeOffset,System.String)
    public func StartActivity(kind : dotnet.System.Diagnostics.ActivityKind, parentContext : dotnet.System.Diagnostics.ActivityContext/* TODO default valuetype */, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>> = nil, links : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.ActivityLink>> = nil, startTime : dotnet.System.DateTimeOffset/* TODO default valuetype */, name : dotnet.System.String) throws -> Optional<dotnet.System.Diagnostics.Activity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_Activity__StartActivity_0__6__ActivityKind_ActivityContext_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object___System_Collections_Generic_IEnumerable_System_Diagnostics_ActivityLink__DateTimeOffset_String(&__thrown, self.get_handle(), kind.get_value(), parentContext.get_handle(), (tags?.get_handle()), (links?.get_handle()), startTime.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Activity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void AddActivityListener(System.Diagnostics.ActivityListener)
// docid: M:System.Diagnostics.ActivitySource.AddActivityListener(System.Diagnostics.ActivityListener)
    /**
    Adds a listener to the activity starting and stopping events.

    - Parameter listener: The activity listener object to use for listening to the activity events.
    */
    public class func AddActivityListener(listener : dotnet.System.Diagnostics.ActivityListener) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivitySource_void__AddActivityListener_0__1__ActivityListener(&__thrown, listener.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.ActivitySource.Dispose
    /**
    Disposes the activity source object, removes the current instance from the global list, and empties the listeners list.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivitySource_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.ActivitySource.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Version()
// docid: M:System.Diagnostics.ActivitySource.get_Version
    public func get_Version() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySource_String__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Returns the activity source name.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Returns the activity source version.

    */
    public var Version : Optional<dotnet.System.String> {
        get {
            return try! get_Version();
        }
    }
} // ActivitySource


// type: System.Diagnostics.ActivitySpanId
// boxed value type
    /**
    Represents a  formatted based on a W3C standard.

    */
public final class ActivitySpanId
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivitySpanId_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Diagnostics_ActivitySpanId_implicit_ctor();
            super.init(hndl: h);
    }
// TODO COPE (write_all_methods) (span) void CopyTo(System.Span<System.Byte>)
// TODO COPE (write_all_methods) (span) System.Diagnostics.ActivitySpanId CreateFromBytes(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) System.Diagnostics.ActivitySpanId CreateFromString(System.ReadOnlySpan<System.Char>)
// TODO COPE (write_all_methods) (span) System.Diagnostics.ActivitySpanId CreateFromUtf8String(System.ReadOnlySpan<System.Byte>)
    // System.Diagnostics.ActivitySpanId CreateRandom()
// docid: M:System.Diagnostics.ActivitySpanId.CreateRandom
    /**
    Creates a new  based on a random number (that is very likely to be unique).

    - Returns: The new span ID.

    */
    public class func CreateRandom() throws -> dotnet.System.Diagnostics.ActivitySpanId {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySpanId_ActivitySpanId__CreateRandom_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivitySpanId(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) bool Equals(System.Diagnostics.ActivitySpanId)
    // bool Equals(System.Object)
// docid: M:System.Diagnostics.ActivitySpanId.Equals(System.Object)
    /**
    the current instance and a specified object, which also must be an  instance, have the same value.

    - Parameter obj: The object to compare.
    - Returns: 
         if  is an instance of  and has the same hex value as the current instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySpanId_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Diagnostics.ActivitySpanId.GetHashCode
    /**
    Returns the hash code of the SpanId.

    - Returns: The hash code of the SpanId.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySpanId_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) [IsSpecialName] bool op_Equality(System.Diagnostics.ActivitySpanId, System.Diagnostics.ActivitySpanId)
// TODO COPE (write_all_methods) (span) [IsSpecialName] bool op_Inequality(System.Diagnostics.ActivitySpanId, System.Diagnostics.ActivitySpanId)
    // System.String ToHexString()
// docid: M:System.Diagnostics.ActivitySpanId.ToHexString
    /**
    Returns a 16-character hexadecimal string that represents this span ID.

    - Returns: The 16-character hexadecimal string representation of this span ID.

    */
    public func ToHexString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySpanId_String__ToHexString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Diagnostics.ActivitySpanId.ToString
    /**
    Returns a 16-character hexadecimal string that represents this span ID.

    - Returns: The 16-character hexadecimal string representation of this span ID.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivitySpanId_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // ActivitySpanId


// type: System.Diagnostics.ActivityStatusCode
public struct ActivityStatusCode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityStatusCode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ActivityStatusCode Unset
    public static var Unset : dotnet.System.Diagnostics.ActivityStatusCode {
        get {
        let __return = dotnet.System.Diagnostics.ActivityStatusCode(val: System_Diagnostics_ActivityStatusCode_get_Unset());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityStatusCode Ok
    public static var Ok : dotnet.System.Diagnostics.ActivityStatusCode {
        get {
        let __return = dotnet.System.Diagnostics.ActivityStatusCode(val: System_Diagnostics_ActivityStatusCode_get_Ok());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityStatusCode Error
    public static var Error : dotnet.System.Diagnostics.ActivityStatusCode {
        get {
        let __return = dotnet.System.Diagnostics.ActivityStatusCode(val: System_Diagnostics_ActivityStatusCode_get_Error());
            return __return;
        }
    }
} // ActivityStatusCode


// type: System.Diagnostics.ActivityTagsCollection
    /**
    ActivityTagsCollection is a collection class used to store tracing tags.

This collection will be used with classes like  and .

This collection behaves as follows:
- The collection items will be ordered according to how they are added.
- Don't allow duplication of items with the same key.
- When using the indexer to store an item in the collection:
    - If the item has a key that previously existed in the collection and the value is , the collection item matching the key will be removed from the collection.
    - If the item has a key that previously existed in the collection and the value is not , the new item value will replace the old value stored in the collection.
    - Otherwise, the item will be added to the collection.
- Add method will add a new item to the collection if an item doesn't already exist with the same key. Otherwise, it will throw an exception.

    */
open class ActivityTagsCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityTagsCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.ActivityTagsCollection.#ctor
    /**
    Create a new instance of the collection.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ActivityTagsCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>)
// docid: M:System.Diagnostics.ActivityTagsCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
    /**
    Create a new instance of the collection and store the input list items in the collection.

    - Parameter list: Initial list to store in the collection.
    */
    public init(list : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ActivityTagsCollection_ctor_0__1__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object__(&__thrown, list.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.String, System.Object)
// docid: M:System.Diagnostics.ActivityTagsCollection.Add(System.String,System.Object)
    /**
    Adds a tag with the provided key and value to the collection. This collection doesn't allow adding two tags with the same key.

    - Parameter key: The tag key.
    - Parameter value: The tag value.
    */
    open /* method final */ func Add(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityTagsCollection_void__Add_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.ActivityTagsCollection.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    /**
    Adds an item to the collection

    - Parameter item: Key and value pair of the tag to add to the collection.
    */
    open /* method final */ func Add(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityTagsCollection_void__Add_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Diagnostics.ActivityTagsCollection.Clear
    /**
    Removes all items from the collection.

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityTagsCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.ActivityTagsCollection.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    /**
    Determines whether the  contains a specific value.

    - Parameter item: The object to locate in the .
    - Returns: 
         if  is found in the ; otherwise, .

    */
    open /* method final */ func Contains(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:System.Diagnostics.ActivityTagsCollection.ContainsKey(System.String)
    /**
    Determines whether the collection contains an element with the specified key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the collection contains tag with that key.  otherwise.

    */
    open /* method final */ func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Collections.Generic.KeyValuePair<System.String,System.Object>[], System.Int32)
// docid: M:System.Diagnostics.ActivityTagsCollection.CopyTo(System.Collections.Generic.KeyValuePair`2[],System.Int32)
    open /* method final */ func CopyTo(array : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityTagsCollection_void__CopyTo_0__2__System_Collections_Generic_KeyValuePair_string_object_Array_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(System.String)
// docid: M:System.Diagnostics.ActivityTagsCollection.Remove(System.String)
    /**
    Removes the tag with the specified key from the collection.

    - Parameter key: The tag key.
    - Returns: 
         if the item existed and removed.  otherwise.

    */
    open /* method final */ func Remove(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_bool__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.ActivityTagsCollection.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    /**
    Removes the first occurrence of a specific item from the collection.

    - Parameter item: The tag key value pair to remove.
    - Returns: 
         if item was successfully removed from the collection; otherwise, . This method also returns  if item is not found in the original collection.

    */
    open /* method final */ func Remove(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_bool__Remove_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(System.String, ref System.Object)
// docid: M:System.Diagnostics.ActivityTagsCollection.TryGetValue(System.String,System.Object@)
    /**
    Gets the value associated with the specified key.

    - Parameter key: The tag key.
    - Parameter value: The tag value.
    - Returns: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.

    */
    open /* method final */ func TryGetValue(key : dotnet.System.String, value : inout dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Diagnostics_ActivityTagsCollection_bool__TryGetValue_0__2__String_outObject(&__thrown, self.get_handle(), key.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Object(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Diagnostics.ActivityTagsCollection.Enumerator GetEnumerator()
// docid: M:System.Diagnostics.ActivityTagsCollection.GetEnumerator
    /**
    Returns an enumerator that iterates through the collection.

    - Returns: An enumerator for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Diagnostics.ActivityTagsCollection_Enumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_ActivityTagsCollection_Enumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityTagsCollection_Enumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.String> get_Keys()
// docid: M:System.Diagnostics.ActivityTagsCollection.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_System_Collections_Generic_ICollection_string___get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.ICollection<System.Object> get_Values()
// docid: M:System.Diagnostics.ActivityTagsCollection.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_System_Collections_Generic_ICollection_object___get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.ICollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Diagnostics.ActivityTagsCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Diagnostics.ActivityTagsCollection.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.String)
// docid: M:System.Diagnostics.ActivityTagsCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_Object__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Object)
// docid: M:System.Diagnostics.ActivityTagsCollection.set_Item(System.String,System.Object)
    open /* method final */ func set_Item(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityTagsCollection_void__set_Item_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of elements contained in the collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether the collection is read-only. This always returns .

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Get the list of the keys of all stored tags.

    */
    public var Keys : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.String> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Get the list of the values of all stored tags.

    */
    public var Values : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Object> {
        get {
            return try! get_Values();
        }
    }
} // ActivityTagsCollection


// type: System.Diagnostics.ActivityTagsCollection+Enumerator
// boxed value type
    /**
    Enumerates the elements of an .

    */
public final class ActivityTagsCollection_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityTagsCollection_Enumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element in the collection at the current position of the enumerator.

    */
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Diagnostics_ActivityTagsCollection_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Diagnostics.ActivityTagsCollection.Enumerator.Dispose
    /**
    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ActivityTagsCollection_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Diagnostics.ActivityTagsCollection.Enumerator.MoveNext
    /**
    Advances the enumerator to the next element of the collection.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,System.Object> get_Current()
// docid: M:System.Diagnostics.ActivityTagsCollection.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTagsCollection_Enumerator_System_Collections_Generic_KeyValuePair_string_object___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // ActivityTagsCollection_Enumerator


// type: System.Diagnostics.ActivityTraceFlags
    /**
    Specifies flags defined by the W3C standard that are associated with an activity.

    */
public struct ActivityTraceFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityTraceFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ActivityTraceFlags None
    /**
    The activity has not been marked.

    */
    public static var None : dotnet.System.Diagnostics.ActivityTraceFlags {
        get {
        let __return = dotnet.System.Diagnostics.ActivityTraceFlags(val: System_Diagnostics_ActivityTraceFlags_get_None());
            return __return;
        }
    }
    // static field: System.Diagnostics.ActivityTraceFlags Recorded
    /**
    The activity (or more likely its parents) has been marked as useful to record.

    */
    public static var Recorded : dotnet.System.Diagnostics.ActivityTraceFlags {
        get {
        let __return = dotnet.System.Diagnostics.ActivityTraceFlags(val: System_Diagnostics_ActivityTraceFlags_get_Recorded());
            return __return;
        }
    }
} // ActivityTraceFlags


// type: System.Diagnostics.ActivityTraceId
// boxed value type
    /**
    Represents a  whose format is based on a W3C standard.

    */
public final class ActivityTraceId
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ActivityTraceId_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Diagnostics_ActivityTraceId_implicit_ctor();
            super.init(hndl: h);
    }
// TODO COPE (write_all_methods) (span) void CopyTo(System.Span<System.Byte>)
// TODO COPE (write_all_methods) (span) System.Diagnostics.ActivityTraceId CreateFromBytes(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) System.Diagnostics.ActivityTraceId CreateFromString(System.ReadOnlySpan<System.Char>)
// TODO COPE (write_all_methods) (span) System.Diagnostics.ActivityTraceId CreateFromUtf8String(System.ReadOnlySpan<System.Byte>)
    // System.Diagnostics.ActivityTraceId CreateRandom()
// docid: M:System.Diagnostics.ActivityTraceId.CreateRandom
    /**
    Creates a new  based on a random number (that is very likely to be unique).

    - Returns: The new span ID.

    */
    public class func CreateRandom() throws -> dotnet.System.Diagnostics.ActivityTraceId {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTraceId_ActivityTraceId__CreateRandom_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ActivityTraceId(hndl : __return);
        }
    }
    // bool Equals(System.Diagnostics.ActivityTraceId)
// docid: M:System.Diagnostics.ActivityTraceId.Equals(System.Diagnostics.ActivityTraceId)
    /**
    Determines whether the current instance and a specified  are equal.

    - Parameter traceId: The instance to compare.
    - Returns: 
         if  has the same hex value as the current instance; otherwise, .

    */
    public func Equals(traceId : dotnet.System.Diagnostics.ActivityTraceId) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTraceId_bool__Equals_0__1__ActivityTraceId(&__thrown, self.get_handle(), traceId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Diagnostics.ActivityTraceId.Equals(System.Object)
    /**
    Determines whether this instance and a specified object, which must also be an  instance, have the same value.

    - Parameter obj: The object to compare.
    - Returns: 
         if  is an instance of  and has the same hex value as the current instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTraceId_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Diagnostics.ActivityTraceId.GetHashCode
    /**
    Returns the hash code of the TraceId.

    - Returns: The hash code of the TraceId.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTraceId_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Diagnostics.ActivityTraceId, System.Diagnostics.ActivityTraceId)
// docid: M:System.Diagnostics.ActivityTraceId.op_Equality(System.Diagnostics.ActivityTraceId,System.Diagnostics.ActivityTraceId)
    /**
    Determines whether two specified  instances have the same value.

    - Parameter traceId1: The first instance to compare.
    - Parameter traceId2: The second instance to compare.
    - Returns: 
         if the TraceId of  is the same as the TraceId of ; otherwise, .

    */
    public class func op_Equality(traceId1 : dotnet.System.Diagnostics.ActivityTraceId, traceId2 : dotnet.System.Diagnostics.ActivityTraceId) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTraceId_bool__op_Equality_0__2__ActivityTraceId_ActivityTraceId(&__thrown, traceId1.get_handle(), traceId2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Diagnostics.ActivityTraceId, System.Diagnostics.ActivityTraceId)
// docid: M:System.Diagnostics.ActivityTraceId.op_Inequality(System.Diagnostics.ActivityTraceId,System.Diagnostics.ActivityTraceId)
    /**
    Determines whether two specified  instances have the same value.

    - Parameter traceId1: The first instance to compare.
    - Parameter traceId2: The second instance to compare.
    - Returns: 
         if the TraceId of  is different from the TraceId of ; otherwise, .

    */
    public class func op_Inequality(traceId1 : dotnet.System.Diagnostics.ActivityTraceId, traceId2 : dotnet.System.Diagnostics.ActivityTraceId) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTraceId_bool__op_Inequality_0__2__ActivityTraceId_ActivityTraceId(&__thrown, traceId1.get_handle(), traceId2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToHexString()
// docid: M:System.Diagnostics.ActivityTraceId.ToHexString
    /**
    Returns a 16-character hexadecimal string that represents this span ID.

    - Returns: The 32-character hexadecimal string representation of this trace ID.

    */
    public func ToHexString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTraceId_String__ToHexString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Diagnostics.ActivityTraceId.ToString
    /**
    Returns a 32-character hexadecimal string that represents this trace ID.

    - Returns: The 32-character hexadecimal string representation of this trace ID.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ActivityTraceId_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // ActivityTraceId


// type: System.Diagnostics.DiagnosticListener
    /**
    Provides an implementation of the abstract  class that represents a named place to which a source sends its information (events).

    */
open class DiagnosticListener
    :
    dotnet.System.Diagnostics.DiagnosticSource,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DiagnosticListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.DiagnosticListener.#ctor(System.String)
    /**
    Creates a new .

    - Parameter name: The name of this .
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DiagnosticListener_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.DiagnosticListener.Dispose
    /**
    Disposes the NotificationListeners.

    */
    open func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DiagnosticListener_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool IsEnabled()
// docid: M:System.Diagnostics.DiagnosticListener.IsEnabled
    /**
    Determines whether there are any registered subscribers.

    - Returns: 
         if there are any registered subscribers,  otherwise.

    */
    open func IsEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_bool__IsEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEnabled(System.String)
// docid: M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)
    /**
    Checks whether the  is enabled.

    - Parameter name: The name of the event to check.
    - Returns: 
         if notifications are enabled; otherwise, .

    */
    open override func IsEnabled(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_bool__IsEnabled_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEnabled(System.String, System.Object, System.Object)
// docid: M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String,System.Object,System.Object)
    /**
    Checks if any subscriber to the diagnostic events is interested in receiving events with this name. Subscribers indicate their interest using a delegate provided in .

    - Parameter name: The name of the event to check.
    - Parameter arg1: The object that represents a context.
    - Parameter arg2: The object that represents a context.
    - Returns: 
         if it is enabled,  otherwise.

    */
    open override func IsEnabled(name : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_bool__IsEnabled_0__3__String_Object_Object(&__thrown, self.get_handle(), name.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.IDisposable Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>)
// docid: M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
    /**
    Adds a subscriber.

    - Parameter observer: A subscriber.
    - Returns: A reference to an interface that allows the listener to stop receiving notifications before the  has finished sending them.

    */
    open func Subscribe(observer : dotnet.System.IObserver_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_IDisposable__Subscribe_0__1__System_IObserver_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object__(&__thrown, self.get_handle(), observer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.IDisposable Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Func<System.String,System.Object,System.Object,bool>)
// docid: M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean})
    /**
    Adds a subscriber, and optionally filters events based on their name and up to two context objects.

    - Parameter observer: A subscriber.
    - Parameter isEnabled: A delegate that filters events based on their name and up to two context objects (which can be ), or  to if an event filter is not desirable.
    - Returns: A reference to an interface that allows the listener to stop receiving notifications before the  has finished sending them.

    */
    open func Subscribe(observer : dotnet.System.IObserver_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, isEnabled : Optional<dotnet.System.Func_4<dotnet.System.String,dotnet.System.Object,dotnet.System.Object,Bool>>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_IDisposable__Subscribe_0__2__System_IObserver_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object___System_Func_string_object_object_bool_(&__thrown, self.get_handle(), observer.get_handle(), (isEnabled?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // delegate closure overload
    open func Subscribe(observer : dotnet.System.IObserver_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, isEnabled : @escaping (Optional<dotnet.System.String>, Optional<dotnet.System.Object>, Optional<dotnet.System.Object>) throws -> Bool) throws -> dotnet.System.IDisposable {
        let del_isEnabled = try dotnet.System.Func_4<dotnet.System.String,dotnet.System.Object,dotnet.System.Object,Swift.Bool>(isEnabled);
        return try Subscribe(observer: observer, isEnabled: del_isEnabled);
    }
    // System.IDisposable Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Predicate<System.String>)
// docid: M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})
    /**
    Adds a subscriber, and optionally filters events based on their name.

    - Parameter observer: A subscriber.
    - Parameter isEnabled: A delegate that filters events based on their name (). The delegate should return  if the event is enabled.
    - Returns: A reference to an interface that allows the listener to stop receiving notifications before the  has finished sending them.

    */
    open func Subscribe(observer : dotnet.System.IObserver_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, isEnabled : Optional<dotnet.System.Predicate_1<dotnet.System.String>>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_IDisposable__Subscribe_0__2__System_IObserver_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object___System_Predicate_string_(&__thrown, self.get_handle(), observer.get_handle(), (isEnabled?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // delegate closure overload
    open func Subscribe(observer : dotnet.System.IObserver_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, isEnabled : @escaping (Optional<dotnet.System.String>) throws -> Bool) throws -> dotnet.System.IDisposable {
        let del_isEnabled = try dotnet.System.Predicate_1<dotnet.System.String>(isEnabled);
        return try Subscribe(observer: observer, isEnabled: del_isEnabled);
    }
    // System.String ToString()
// docid: M:System.Diagnostics.DiagnosticListener.ToString
    /**
    Returns a string with the name of this DiagnosticListener.

    - Returns: The name of this DiagnosticListener.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Write(System.String, System.Object)
// docid: M:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)
    /**
    Logs a notification.

    - Parameter name: The name of the event to log.
    - Parameter value: An object that represents the payload for the event.
    */
    open override func Write(name : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DiagnosticListener_void__Write_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActivityExport(System.Diagnostics.Activity, System.Object)
// docid: M:System.Diagnostics.DiagnosticListener.OnActivityExport(System.Diagnostics.Activity,System.Object)
    /**
    Invokes the OnActivityExport method of all the subscribers.

    - Parameter activity: The activity affected by an external event.
    - Parameter payload: An object that represents the outgoing request.
    */
    open override func OnActivityExport(activity : dotnet.System.Diagnostics.Activity, payload : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DiagnosticListener_void__OnActivityExport_0__2__Activity_Object(&__thrown, self.get_handle(), activity.get_handle(), payload?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActivityImport(System.Diagnostics.Activity, System.Object)
// docid: M:System.Diagnostics.DiagnosticListener.OnActivityImport(System.Diagnostics.Activity,System.Object)
    /**
    Invokes the OnActivityImport method of all the subscribers.

    - Parameter activity: The activity affected by an external event.
    - Parameter payload: An object that represents the incoming request.
    */
    open override func OnActivityImport(activity : dotnet.System.Diagnostics.Activity, payload : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DiagnosticListener_void__OnActivityImport_0__2__Activity_Object(&__thrown, self.get_handle(), activity.get_handle(), payload?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<System.String,System.Object>>, System.Func<System.String,System.Object,System.Object,bool>, System.Action<System.Diagnostics.Activity,System.Object>, System.Action<System.Diagnostics.Activity,System.Object>)
// docid: M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Func{System.String,System.Object,System.Object,System.Boolean},System.Action{System.Diagnostics.Activity,System.Object},System.Action{System.Diagnostics.Activity,System.Object})
    /**
    Adds a subscriber, optionally filters events based on their name and up to two context objects, and specifies methods to call when providers import or export activites from outside the process.

    - Parameter observer: A subscriber.
    - Parameter isEnabled: A delegate that filters events based on their name and up to two context objects (which can be ), or  if an event filter is not desirable.
    - Parameter onActivityImport: An action delegate that receives the activity affected by an external event and an object that represents the incoming request.
    - Parameter onActivityExport: An action delegate that receives the activity affected by an external event and an object that represents the outgoing request.
    - Returns: A reference to an interface that allows the listener to stop receiving notifications before the  has finished sending them.

    */
    open func Subscribe(observer : dotnet.System.IObserver_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, isEnabled : Optional<dotnet.System.Func_4<dotnet.System.String,dotnet.System.Object,dotnet.System.Object,Bool>>, onActivityImport : Optional<dotnet.System.Action_2<dotnet.System.Diagnostics.Activity,dotnet.System.Object>> = nil, onActivityExport : Optional<dotnet.System.Action_2<dotnet.System.Diagnostics.Activity,dotnet.System.Object>> = nil) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_IDisposable__Subscribe_0__4__System_IObserver_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object___System_Func_string_object_object_bool__System_Action_System_Diagnostics_Activity_object__System_Action_System_Diagnostics_Activity_object_(&__thrown, self.get_handle(), observer.get_handle(), (isEnabled?.get_handle()), (onActivityImport?.get_handle()), (onActivityExport?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // delegate closure overload
    open func Subscribe(observer : dotnet.System.IObserver_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, isEnabled : @escaping (Optional<dotnet.System.String>, Optional<dotnet.System.Object>, Optional<dotnet.System.Object>) throws -> Bool, onActivityImport : @escaping (Optional<dotnet.System.Diagnostics.Activity>, Optional<dotnet.System.Object>) throws -> Void, onActivityExport : @escaping (Optional<dotnet.System.Diagnostics.Activity>, Optional<dotnet.System.Object>) throws -> Void) throws -> dotnet.System.IDisposable {
        let del_isEnabled = try dotnet.System.Func_4<dotnet.System.String,dotnet.System.Object,dotnet.System.Object,Swift.Bool>(isEnabled);
        let del_onActivityImport = try dotnet.System.Action_2<dotnet.System.Diagnostics.Activity,dotnet.System.Object>(onActivityImport);
        let del_onActivityExport = try dotnet.System.Action_2<dotnet.System.Diagnostics.Activity,dotnet.System.Object>(onActivityExport);
        return try Subscribe(observer: observer, isEnabled: del_isEnabled, onActivityImport: del_onActivityImport, onActivityExport: del_onActivityExport);
    }
    // [IsSpecialName] System.IObservable<System.Diagnostics.DiagnosticListener> get_AllListeners()
// docid: M:System.Diagnostics.DiagnosticListener.get_AllListeners
    open class func get_AllListeners() throws -> dotnet.System.IObservable_1<dotnet.System.Diagnostics.DiagnosticListener> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_System_IObservable_System_Diagnostics_DiagnosticListener___get_AllListeners_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IObservable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.DiagnosticListener.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticListener_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the collection of listeners for this .

    */
    public static var AllListeners : dotnet.System.IObservable_1<dotnet.System.Diagnostics.DiagnosticListener> {
        get {
            return try! get_AllListeners();
        }
    }
    /**
    Gets the name of this .

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // DiagnosticListener


// type: System.Diagnostics.DiagnosticSource
    /**
    An abstract class that allows code to be instrumented for production-time logging of rich data payloads for consumption within the process that was instrumented.

    */
open class DiagnosticSource
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DiagnosticSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool IsEnabled(System.String)
// docid: M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)
    /**
    Verifies if the notification event is enabled.

    - Parameter name: The name of the event being written.
    - Returns: 
         if the notification event is enabled,  otherwise.

    */
    open func IsEnabled(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticSource_bool__IsEnabled_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEnabled(System.String, System.Object, System.Object)
// docid: M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)
    /**
    Verifies it the notification event is enabled.

    - Parameter name: The name of the event being written.
    - Parameter arg1: An object that represents the additional context for IsEnabled. Consumers should expect to receive  which may indicate that producer called pure IsEnabled(string) to check if consumer wants to get notifications for such events at all. Based on that, producer may call IsEnabled(string, object, object) again with non- context.
    - Parameter arg2: Optional. An object that represents the additional context for IsEnabled.  by default. Consumers should expect to receive  which may indicate that producer called pure IsEnabled(string) or producer passed all necessary context in .
    - Returns: 
         if the notification event is enabled,  otherwise.

    */
    open func IsEnabled(name : dotnet.System.String, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object> = nil) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticSource_bool__IsEnabled_0__3__String_Object_Object(&__thrown, self.get_handle(), name.get_handle(), arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Write(System.String, System.Object)
// docid: M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)
    /**
    Provides a generic way of logging complex payloads.

    - Parameter name: The name of the event being written.
    - Parameter value: An object that represents the value being passed as a payload for the event. This is often an anonymous type which contains several sub-values.
    */
    open func Write(name : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DiagnosticSource_void__Write_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActivityExport(System.Diagnostics.Activity, System.Object)
// docid: M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)
    /**
    Transfers state from an activity to some event or operation, such as an outgoing HTTP request, that will occur outside the process.

    - Parameter activity: The activity affected by an external event.
    - Parameter payload: An object that represents the outgoing request.
    */
    open func OnActivityExport(activity : dotnet.System.Diagnostics.Activity, payload : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DiagnosticSource_void__OnActivityExport_0__2__Activity_Object(&__thrown, self.get_handle(), activity.get_handle(), payload?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnActivityImport(System.Diagnostics.Activity, System.Object)
// docid: M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)
    /**
    Transfers state to an activity from some event or operation, such as an incoming request, that occurred outside the process.

    - Parameter activity: The activity affected by an external event.
    - Parameter payload: A payload that represents the incoming request.
    */
    open func OnActivityImport(activity : dotnet.System.Diagnostics.Activity, payload : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DiagnosticSource_void__OnActivityImport_0__2__Activity_Object(&__thrown, self.get_handle(), activity.get_handle(), payload?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Diagnostics.Activity StartActivity(System.Diagnostics.Activity, System.Object)
// docid: M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)
    /**
    Starts an  and writes a start event.

    - Parameter activity: The  to be started.
    - Parameter args: An object that represent the value being passed as a payload for the event.
    - Returns: The started activity for convenient chaining.

    */
    open func StartActivity(activity : dotnet.System.Diagnostics.Activity, args : Optional<dotnet.System.Object>) throws -> dotnet.System.Diagnostics.Activity {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DiagnosticSource_Activity__StartActivity_0__2__Activity_Object(&__thrown, self.get_handle(), activity.get_handle(), args?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Activity(hndl : __return);
        }
    }
    // void StopActivity(System.Diagnostics.Activity, System.Object)
// docid: M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)
    /**
    Stops the given , maintains the global  activity, and notifies consumers that the  was stopped.

    - Parameter activity: The activity to be stopped.
    - Parameter args: An object that represents the value passed as a payload for the event.
    */
    open func StopActivity(activity : dotnet.System.Diagnostics.Activity, args : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DiagnosticSource_void__StopActivity_0__2__Activity_Object(&__thrown, self.get_handle(), activity.get_handle(), args?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DiagnosticSource


// type: System.Diagnostics.DistributedContextPropagator
open class DistributedContextPropagator
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DistributedContextPropagator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Inject(System.Diagnostics.Activity, System.Object, System.Diagnostics.DistributedContextPropagator.PropagatorSetterCallback)
// docid: M:System.Diagnostics.DistributedContextPropagator.Inject(System.Diagnostics.Activity,System.Object,System.Diagnostics.DistributedContextPropagator.PropagatorSetterCallback)
    open func Inject(activity : Optional<dotnet.System.Diagnostics.Activity>, carrier : Optional<dotnet.System.Object>, setter : Optional<dotnet.System.Diagnostics.DistributedContextPropagator_PropagatorSetterCallback>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DistributedContextPropagator_void__Inject_0__3__Activity_Object_DistributedContextPropagator_PropagatorSetterCallback(&__thrown, self.get_handle(), activity?.get_handle() ?? nil, carrier?.get_handle() ?? nil, setter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func Inject(activity : Optional<dotnet.System.Diagnostics.Activity>, carrier : Optional<dotnet.System.Object>, setter : @escaping (Optional<dotnet.System.Object>, dotnet.System.String, dotnet.System.String) throws -> Void) throws {
        let del_setter = try dotnet.System.Diagnostics.DistributedContextPropagator_PropagatorSetterCallback(setter);
        return try Inject(activity: activity, carrier: carrier, setter: del_setter);
    }
    // void ExtractTraceIdAndState(System.Object, System.Diagnostics.DistributedContextPropagator.PropagatorGetterCallback, ref System.String, ref System.String)
// docid: M:System.Diagnostics.DistributedContextPropagator.ExtractTraceIdAndState(System.Object,System.Diagnostics.DistributedContextPropagator.PropagatorGetterCallback,System.String@,System.String@)
    open func ExtractTraceIdAndState(carrier : Optional<dotnet.System.Object>, getter : Optional<dotnet.System.Diagnostics.DistributedContextPropagator_PropagatorGetterCallback>, traceId : inout dotnet.System.String, traceState : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_traceId = traceId.get_handle();
            var _tmp_out_traceState = traceState.get_handle();
        System_Diagnostics_DistributedContextPropagator_void__ExtractTraceIdAndState_0__4__Object_DistributedContextPropagator_PropagatorGetterCallback_outString_outString(&__thrown, self.get_handle(), carrier?.get_handle() ?? nil, getter?.get_handle() ?? nil, &_tmp_out_traceId, &_tmp_out_traceState);
        let _tmp2_traceId = dotnet.System.String(hndl: _tmp_out_traceId);
            traceId = _tmp2_traceId;
        let _tmp2_traceState = dotnet.System.String(hndl: _tmp_out_traceState);
            traceState = _tmp2_traceState;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>> ExtractBaggage(System.Object, System.Diagnostics.DistributedContextPropagator.PropagatorGetterCallback)
// docid: M:System.Diagnostics.DistributedContextPropagator.ExtractBaggage(System.Object,System.Diagnostics.DistributedContextPropagator.PropagatorGetterCallback)
    open func ExtractBaggage(carrier : Optional<dotnet.System.Object>, getter : Optional<dotnet.System.Diagnostics.DistributedContextPropagator_PropagatorGetterCallback>) throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.String>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DistributedContextPropagator_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_string____ExtractBaggage_0__2__Object_DistributedContextPropagator_PropagatorGetterCallback(&__thrown, self.get_handle(), carrier?.get_handle() ?? nil, getter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.DistributedContextPropagator CreateDefaultPropagator()
// docid: M:System.Diagnostics.DistributedContextPropagator.CreateDefaultPropagator
    open class func CreateDefaultPropagator() throws -> dotnet.System.Diagnostics.DistributedContextPropagator {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DistributedContextPropagator_DistributedContextPropagator__CreateDefaultPropagator_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.DistributedContextPropagator(hndl : __return);
        }
    }
    // System.Diagnostics.DistributedContextPropagator CreatePassThroughPropagator()
// docid: M:System.Diagnostics.DistributedContextPropagator.CreatePassThroughPropagator
    open class func CreatePassThroughPropagator() throws -> dotnet.System.Diagnostics.DistributedContextPropagator {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DistributedContextPropagator_DistributedContextPropagator__CreatePassThroughPropagator_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.DistributedContextPropagator(hndl : __return);
        }
    }
    // System.Diagnostics.DistributedContextPropagator CreateNoOutputPropagator()
// docid: M:System.Diagnostics.DistributedContextPropagator.CreateNoOutputPropagator
    open class func CreateNoOutputPropagator() throws -> dotnet.System.Diagnostics.DistributedContextPropagator {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DistributedContextPropagator_DistributedContextPropagator__CreateNoOutputPropagator_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.DistributedContextPropagator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IReadOnlyCollection<System.String> get_Fields()
// docid: M:System.Diagnostics.DistributedContextPropagator.get_Fields
    open func get_Fields() throws -> dotnet.System.Collections.Generic.IReadOnlyCollection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DistributedContextPropagator_System_Collections_Generic_IReadOnlyCollection_string___get_Fields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.DistributedContextPropagator get_Current()
// docid: M:System.Diagnostics.DistributedContextPropagator.get_Current
    open class func get_Current() throws -> dotnet.System.Diagnostics.DistributedContextPropagator {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DistributedContextPropagator_DistributedContextPropagator__get_Current_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.DistributedContextPropagator(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Current(System.Diagnostics.DistributedContextPropagator)
// docid: M:System.Diagnostics.DistributedContextPropagator.set_Current(System.Diagnostics.DistributedContextPropagator)
    open class func set_Current(value : dotnet.System.Diagnostics.DistributedContextPropagator) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DistributedContextPropagator_void__set_Current_0__1__DistributedContextPropagator(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public static var Current : dotnet.System.Diagnostics.DistributedContextPropagator {
        get {
            return try! get_Current();
        }
        set(v) {
            return try! set_Current(value: v);
        }
    }
    open var Fields : dotnet.System.Collections.Generic.IReadOnlyCollection_1<dotnet.System.String> {
        get {
            return try! get_Fields();
        }
    }
} // DistributedContextPropagator


// type: System.Diagnostics.DistributedContextPropagator+PropagatorGetterCallback
public final class DistributedContextPropagator_PropagatorGetterCallback
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DistributedContextPropagator_PropagatorGetterCallback_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // DistributedContextPropagator_PropagatorGetterCallback


// type: System.Diagnostics.DistributedContextPropagator+PropagatorSetterCallback
public final class DistributedContextPropagator_PropagatorSetterCallback
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DistributedContextPropagator_PropagatorSetterCallback_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.String, System.String)
// docid: M:System.Diagnostics.DistributedContextPropagator.PropagatorSetterCallback.Invoke(System.Object,System.String,System.String)
    public func Invoke(carrier : Optional<dotnet.System.Object>, fieldName : dotnet.System.String, fieldValue : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DistributedContextPropagator_PropagatorSetterCallback_void__Invoke_0__3__Object_String_String(&__thrown, self.get_handle(), carrier?.get_handle() ?? nil, fieldName.get_handle(), fieldValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.String, System.String, System.AsyncCallback, System.Object)
// docid: M:System.Diagnostics.DistributedContextPropagator.PropagatorSetterCallback.BeginInvoke(System.Object,System.String,System.String,System.AsyncCallback,System.Object)
    public func BeginInvoke(carrier : Optional<dotnet.System.Object>, fieldName : dotnet.System.String, fieldValue : dotnet.System.String, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DistributedContextPropagator_PropagatorSetterCallback_IAsyncResult__BeginInvoke_0__5__Object_String_String_AsyncCallback_Object(&__thrown, self.get_handle(), carrier?.get_handle() ?? nil, fieldName.get_handle(), fieldValue.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Diagnostics.DistributedContextPropagator.PropagatorSetterCallback.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DistributedContextPropagator_PropagatorSetterCallback_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.String, dotnet.System.String) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, carrier : NullableHandle, fieldName : NonnullHandle, fieldValue : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((carrier != nil) ? (dotnet.System.Object(hndl: carrier!)) : nil, dotnet.System.String(hndl: fieldName), dotnet.System.String(hndl: fieldValue));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, carrier : NullableHandle, fieldName : NonnullHandle, fieldValue : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, carrier, fieldName, fieldValue);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DistributedContextPropagator_PropagatorSetterCallback_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.String, System.String)
// docid: M:System.Diagnostics.DistributedContextPropagator.PropagatorSetterCallback.Invoke(System.Object,System.String,System.String)
    public func callAsFunction(carrier : Optional<dotnet.System.Object>, fieldName : dotnet.System.String, fieldValue : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DistributedContextPropagator_PropagatorSetterCallback_void__Invoke_0__3__Object_String_String(&__thrown, self.get_handle(), carrier?.get_handle() ?? nil, fieldName.get_handle(), fieldValue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DistributedContextPropagator_PropagatorSetterCallback


// type: System.Diagnostics.SampleActivity`1
    /**
    A delegate that defines the signature of the  callbacks used in the sampling process.

    */
public final class SampleActivity_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_SampleActivity_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // SampleActivity_1


// type: System.Diagnostics.TagList
// boxed value type
public final class TagList
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TagList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    public override init() {
        let h = System_Diagnostics_TagList_implicit_ctor();
            super.init(hndl: h);
    }
    // void Add(System.String, System.Object)
// docid: M:System.Diagnostics.TagList.Add(System.String,System.Object)
    public func Add(key : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_void__Add_0__2__String_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.TagList.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Add(tag : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_void__Add_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), tag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Insert(System.Int32, System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.TagList.Insert(System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Insert(index : Swift.Int32, item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_void__Insert_0__2__i32_System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), index, item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Diagnostics.TagList.RemoveAt(System.Int32)
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Diagnostics.TagList.Clear
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.TagList.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Contains(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_bool__Contains_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Collections.Generic.KeyValuePair<System.String,System.Object>[], System.Int32)
// docid: M:System.Diagnostics.TagList.CopyTo(System.Collections.Generic.KeyValuePair`2[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_void__CopyTo_0__2__System_Collections_Generic_KeyValuePair_string_object_Array_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.TagList.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Remove(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_bool__Remove_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>> GetEnumerator()
// docid: M:System.Diagnostics.TagList.GetEnumerator
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object____GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.TagList.IndexOf(System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func IndexOf(item : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_i32__IndexOf_0__1__System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), item.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Diagnostics.TagList.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Diagnostics.TagList.get_IsReadOnly
    public func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,System.Object> get_Item(System.Int32)
// docid: M:System.Diagnostics.TagList.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_System_Collections_Generic_KeyValuePair_string_object___get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.TagList.set_Item(System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func set_Item(index : Swift.Int32, value : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_void__set_Item_0__2__i32_System_Collections_Generic_KeyValuePair_string_object_(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // TagList


// type: System.Diagnostics.TagList+Enumerator
// boxed value type
public final class TagList_Enumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TagList_Enumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Current : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Diagnostics_TagList_Enumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Diagnostics.TagList.Enumerator.Dispose
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_Enumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool MoveNext()
// docid: M:System.Diagnostics.TagList.Enumerator.MoveNext
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_Enumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Diagnostics.TagList.Enumerator.Reset
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TagList_Enumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.KeyValuePair<System.String,System.Object> get_Current()
// docid: M:System.Diagnostics.TagList.Enumerator.get_Current
    public func get_Current() throws -> dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TagList_Enumerator_System_Collections_Generic_KeyValuePair_string_object___get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.KeyValuePair_2(hndl : __return);
        }
    }
} // TagList_Enumerator


}
// System.Diagnostics.Metrics
extension System.Diagnostics.Metrics {
// type: System.Diagnostics.Metrics.Counter`1
public final class Counter_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Diagnostics.Metrics.Instrument_1<T>
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_Counter_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(T)
// docid: M:System.Diagnostics.Metrics.Counter`1.Add(`0)
    public func Add(delta : T) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Counter_1_void__Add_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), delta.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Add(delta : T, tag : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Counter_1_void__Add_0__2__T_System_Collections_Generic_KeyValuePair_string_object_(T.get_type_handle(), &__thrown, self.get_handle(), delta.to_gval(), tag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>, System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Add(delta : T, tag1 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>, tag2 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Counter_1_void__Add_0__3__T_System_Collections_Generic_KeyValuePair_string_object__System_Collections_Generic_KeyValuePair_string_object_(T.get_type_handle(), &__thrown, self.get_handle(), delta.to_gval(), tag1.get_handle(), tag2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>, System.Collections.Generic.KeyValuePair<System.String,System.Object>, System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Add(delta : T, tag1 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>, tag2 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>, tag3 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Counter_1_void__Add_0__4__T_System_Collections_Generic_KeyValuePair_string_object__System_Collections_Generic_KeyValuePair_string_object__System_Collections_Generic_KeyValuePair_string_object_(T.get_type_handle(), &__thrown, self.get_handle(), delta.to_gval(), tag1.get_handle(), tag2.get_handle(), tag3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>[])
// docid: M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.Collections.Generic.KeyValuePair`2[])
    public func Add(delta : T, tags : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Counter_1_void__Add_0__2__T_System_Collections_Generic_KeyValuePair_string_object_Array(T.get_type_handle(), &__thrown, self.get_handle(), delta.to_gval(), tags.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(T, ref System.Diagnostics.TagList)
// docid: M:System.Diagnostics.Metrics.Counter`1.Add(`0,System.Diagnostics.TagList@)
    public func Add(delta : T, tagList : inout dotnet.System.Diagnostics.TagList) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_in_tagList = tagList.get_handle();
        System_Diagnostics_Metrics_Counter_1_void__Add_0__2__T_inTagList(T.get_type_handle(), &__thrown, self.get_handle(), delta.to_gval(), &_tmp_in_tagList);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Counter_1


// type: System.Diagnostics.Metrics.Histogram`1
public final class Histogram_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Diagnostics.Metrics.Instrument_1<T>
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_Histogram_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Record(T)
// docid: M:System.Diagnostics.Metrics.Histogram`1.Record(`0)
    public func Record(value : T) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Histogram_1_void__Record_0__1__T(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Record(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Record(value : T, tag : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Histogram_1_void__Record_0__2__T_System_Collections_Generic_KeyValuePair_string_object_(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), tag.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Record(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>, System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Record(value : T, tag1 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>, tag2 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Histogram_1_void__Record_0__3__T_System_Collections_Generic_KeyValuePair_string_object__System_Collections_Generic_KeyValuePair_string_object_(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), tag1.get_handle(), tag2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Record(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>, System.Collections.Generic.KeyValuePair<System.String,System.Object>, System.Collections.Generic.KeyValuePair<System.String,System.Object>)
// docid: M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System.Object})
    public func Record(value : T, tag1 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>, tag2 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>, tag3 : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Histogram_1_void__Record_0__4__T_System_Collections_Generic_KeyValuePair_string_object__System_Collections_Generic_KeyValuePair_string_object__System_Collections_Generic_KeyValuePair_string_object_(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), tag1.get_handle(), tag2.get_handle(), tag3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Record(T, ref System.Diagnostics.TagList)
// docid: M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.Diagnostics.TagList@)
    public func Record(value : T, tagList : inout dotnet.System.Diagnostics.TagList) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_in_tagList = tagList.get_handle();
        System_Diagnostics_Metrics_Histogram_1_void__Record_0__2__T_inTagList(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), &_tmp_in_tagList);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Record(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>[])
// docid: M:System.Diagnostics.Metrics.Histogram`1.Record(`0,System.Collections.Generic.KeyValuePair`2[])
    public func Record(value : T, tags : dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Histogram_1_void__Record_0__2__T_System_Collections_Generic_KeyValuePair_string_object_Array(T.get_type_handle(), &__thrown, self.get_handle(), value.to_gval(), tags.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Histogram_1


// type: System.Diagnostics.Metrics.Instrument
open class Instrument
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_Instrument_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.Diagnostics.Metrics.Instrument.get_Description
    open func get_Description() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Instrument_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_Enabled()
// docid: M:System.Diagnostics.Metrics.Instrument.get_Enabled
    open func get_Enabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Instrument_bool__get_Enabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsObservable()
// docid: M:System.Diagnostics.Metrics.Instrument.get_IsObservable
    open func get_IsObservable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Instrument_bool__get_IsObservable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Diagnostics.Metrics.Meter get_Meter()
// docid: M:System.Diagnostics.Metrics.Instrument.get_Meter
    open func get_Meter() throws -> dotnet.System.Diagnostics.Metrics.Meter {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Instrument_Meter__get_Meter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Metrics.Meter(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Metrics.Instrument.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Instrument_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Unit()
// docid: M:System.Diagnostics.Metrics.Instrument.get_Unit
    open func get_Unit() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Instrument_String__get_Unit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var Description : Optional<dotnet.System.String> {
        get {
            return try! get_Description();
        }
    }
    open var Enabled : Bool {
        get {
            return try! get_Enabled();
        }
    }
    open var IsObservable : Bool {
        get {
            return try! get_IsObservable();
        }
    }
    open var Meter : dotnet.System.Diagnostics.Metrics.Meter {
        get {
            return try! get_Meter();
        }
    }
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    open var Unit : Optional<dotnet.System.String> {
        get {
            return try! get_Unit();
        }
    }
} // Instrument


// type: System.Diagnostics.Metrics.Instrument`1
open class Instrument_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Diagnostics.Metrics.Instrument
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_Instrument_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // Instrument_1


// type: System.Diagnostics.Metrics.MeasurementCallback`1
public final class MeasurementCallback_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_MeasurementCallback_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Diagnostics.Metrics.MeasurementCallback`1.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_MeasurementCallback_1_void__EndInvoke_0__1__IAsyncResult(T.get_type_handle(), &__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MeasurementCallback_1


// type: System.Diagnostics.Metrics.Measurement`1
// boxed value type
public final class Measurement_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_Measurement_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var Value : T {
        get {
            return try! get_Value();
        }
    }
    // .ctor(T)
// docid: M:System.Diagnostics.Metrics.Measurement`1.#ctor(`0)
    public init(value : T) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Metrics_Measurement_1_ctor_0__1__T(T.get_type_handle(), &__thrown, value.to_gval());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(T, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>)
// docid: M:System.Diagnostics.Metrics.Measurement`1.#ctor(`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
    public init(value : T, tags : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Metrics_Measurement_1_ctor_0__2__T_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_object__(T.get_type_handle(), &__thrown, value.to_gval(), (tags?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(T, System.Collections.Generic.KeyValuePair<System.String,System.Object>[])
// docid: M:System.Diagnostics.Metrics.Measurement`1.#ctor(`0,System.Collections.Generic.KeyValuePair`2[])
    public init(value : T, tags : Optional<dotnet.System_Arr<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Object>>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Metrics_Measurement_1_ctor_0__2__T_System_Collections_Generic_KeyValuePair_string_object_Array(T.get_type_handle(), &__thrown, value.to_gval(), (tags?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Diagnostics_Metrics_Measurement_1_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
    // [IsSpecialName] T get_Value()
// docid: M:System.Diagnostics.Metrics.Measurement`1.get_Value
    public func get_Value() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Measurement_1_T__get_Value_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // Measurement_1


// type: System.Diagnostics.Metrics.Meter
open class Meter
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_Meter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.Metrics.Meter.#ctor(System.String)
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Metrics_Meter_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.Metrics.Meter.#ctor(System.String,System.String)
    public init(name : dotnet.System.String, version : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Metrics_Meter_ctor_0__2__String_String(&__thrown, name.get_handle(), version?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Diagnostics.Metrics.Counter<T> CreateCounter<T>(System.String, System.String, System.String)
// TODO COPE (write_all_methods) (unused generic param) System.Diagnostics.Metrics.Histogram<T> CreateHistogram<T>(System.String, System.String, System.String)
    // System.Diagnostics.Metrics.ObservableCounter<T> CreateObservableCounter<T>(System.String, System.Func<T>, System.String, System.String)
// docid: M:System.Diagnostics.Metrics.Meter.CreateObservableCounter``1(System.String,System.Func{``0},System.String,System.String)
    open func CreateObservableCounter<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValue : dotnet.System.Func_1<UT>, unit : Optional<dotnet.System.String> = nil, description : Optional<dotnet.System.String> = nil) throws -> dotnet.System.Diagnostics.Metrics.ObservableCounter_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Meter_System_Diagnostics_Metrics_ObservableCounter_UT___CreateObservableCounter_1__4__String_System_Func_UT__String_String(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), observeValue.get_handle(), unit?.get_handle() ?? nil, description?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Metrics.ObservableCounter_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func CreateObservableCounter<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValue : @escaping () throws -> UT, unit : Optional<dotnet.System.String>, description : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Metrics.ObservableCounter_1<UT> {
        let del_observeValue = try dotnet.System.Func_1<UT>(observeValue);
        return try CreateObservableCounter(name: name, observeValue: del_observeValue, unit: unit, description: description);
    }
    // System.Diagnostics.Metrics.ObservableCounter<T> CreateObservableCounter<T>(System.String, System.Func<System.Diagnostics.Metrics.Measurement<T>>, System.String, System.String)
// docid: M:System.Diagnostics.Metrics.Meter.CreateObservableCounter``1(System.String,System.Func{System.Diagnostics.Metrics.Measurement{``0}},System.String,System.String)
    open func CreateObservableCounter<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValue : dotnet.System.Func_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>, unit : Optional<dotnet.System.String> = nil, description : Optional<dotnet.System.String> = nil) throws -> dotnet.System.Diagnostics.Metrics.ObservableCounter_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Meter_System_Diagnostics_Metrics_ObservableCounter_UT___CreateObservableCounter_1__4__String_System_Func_System_Diagnostics_Metrics_System_Diagnostics_Metrics_Measurement_UT___String_String(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), observeValue.get_handle(), unit?.get_handle() ?? nil, description?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Metrics.ObservableCounter_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func CreateObservableCounter<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValue : @escaping () throws -> dotnet.System.Diagnostics.Metrics.Measurement_1<UT>, unit : Optional<dotnet.System.String>, description : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Metrics.ObservableCounter_1<UT> {
        let del_observeValue = try dotnet.System.Func_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>(observeValue);
        return try CreateObservableCounter(name: name, observeValue: del_observeValue, unit: unit, description: description);
    }
    // System.Diagnostics.Metrics.ObservableCounter<T> CreateObservableCounter<T>(System.String, System.Func<System.Collections.Generic.IEnumerable<System.Diagnostics.Metrics.Measurement<T>>>, System.String, System.String)
// docid: M:System.Diagnostics.Metrics.Meter.CreateObservableCounter``1(System.String,System.Func{System.Collections.Generic.IEnumerable{System.Diagnostics.Metrics.Measurement{``0}}},System.String,System.String)
    open func CreateObservableCounter<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValues : dotnet.System.Func_1<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>>, unit : Optional<dotnet.System.String> = nil, description : Optional<dotnet.System.String> = nil) throws -> dotnet.System.Diagnostics.Metrics.ObservableCounter_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Meter_System_Diagnostics_Metrics_ObservableCounter_UT___CreateObservableCounter_1__4__String_System_Func_System_Collections_Generic_System_Collections_Generic_IEnumerable_System_Diagnostics_Metrics_System_Diagnostics_Metrics_Measurement_UT____String_String(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), observeValues.get_handle(), unit?.get_handle() ?? nil, description?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Metrics.ObservableCounter_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func CreateObservableCounter<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValues : @escaping () throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>, unit : Optional<dotnet.System.String>, description : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Metrics.ObservableCounter_1<UT> {
        let del_observeValues = try dotnet.System.Func_1<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>>(observeValues);
        return try CreateObservableCounter(name: name, observeValues: del_observeValues, unit: unit, description: description);
    }
    // System.Diagnostics.Metrics.ObservableGauge<T> CreateObservableGauge<T>(System.String, System.Func<T>, System.String, System.String)
// docid: M:System.Diagnostics.Metrics.Meter.CreateObservableGauge``1(System.String,System.Func{``0},System.String,System.String)
    open func CreateObservableGauge<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValue : dotnet.System.Func_1<UT>, unit : Optional<dotnet.System.String> = nil, description : Optional<dotnet.System.String> = nil) throws -> dotnet.System.Diagnostics.Metrics.ObservableGauge_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Meter_System_Diagnostics_Metrics_ObservableGauge_UT___CreateObservableGauge_1__4__String_System_Func_UT__String_String(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), observeValue.get_handle(), unit?.get_handle() ?? nil, description?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Metrics.ObservableGauge_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func CreateObservableGauge<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValue : @escaping () throws -> UT, unit : Optional<dotnet.System.String>, description : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Metrics.ObservableGauge_1<UT> {
        let del_observeValue = try dotnet.System.Func_1<UT>(observeValue);
        return try CreateObservableGauge(name: name, observeValue: del_observeValue, unit: unit, description: description);
    }
    // System.Diagnostics.Metrics.ObservableGauge<T> CreateObservableGauge<T>(System.String, System.Func<System.Diagnostics.Metrics.Measurement<T>>, System.String, System.String)
// docid: M:System.Diagnostics.Metrics.Meter.CreateObservableGauge``1(System.String,System.Func{System.Diagnostics.Metrics.Measurement{``0}},System.String,System.String)
    open func CreateObservableGauge<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValue : dotnet.System.Func_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>, unit : Optional<dotnet.System.String> = nil, description : Optional<dotnet.System.String> = nil) throws -> dotnet.System.Diagnostics.Metrics.ObservableGauge_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Meter_System_Diagnostics_Metrics_ObservableGauge_UT___CreateObservableGauge_1__4__String_System_Func_System_Diagnostics_Metrics_System_Diagnostics_Metrics_Measurement_UT___String_String(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), observeValue.get_handle(), unit?.get_handle() ?? nil, description?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Metrics.ObservableGauge_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func CreateObservableGauge<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValue : @escaping () throws -> dotnet.System.Diagnostics.Metrics.Measurement_1<UT>, unit : Optional<dotnet.System.String>, description : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Metrics.ObservableGauge_1<UT> {
        let del_observeValue = try dotnet.System.Func_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>(observeValue);
        return try CreateObservableGauge(name: name, observeValue: del_observeValue, unit: unit, description: description);
    }
    // System.Diagnostics.Metrics.ObservableGauge<T> CreateObservableGauge<T>(System.String, System.Func<System.Collections.Generic.IEnumerable<System.Diagnostics.Metrics.Measurement<T>>>, System.String, System.String)
// docid: M:System.Diagnostics.Metrics.Meter.CreateObservableGauge``1(System.String,System.Func{System.Collections.Generic.IEnumerable{System.Diagnostics.Metrics.Measurement{``0}}},System.String,System.String)
    open func CreateObservableGauge<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValues : dotnet.System.Func_1<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>>, unit : Optional<dotnet.System.String> = nil, description : Optional<dotnet.System.String> = nil) throws -> dotnet.System.Diagnostics.Metrics.ObservableGauge_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Meter_System_Diagnostics_Metrics_ObservableGauge_UT___CreateObservableGauge_1__4__String_System_Func_System_Collections_Generic_System_Collections_Generic_IEnumerable_System_Diagnostics_Metrics_System_Diagnostics_Metrics_Measurement_UT____String_String(UT.get_type_handle(), &__thrown, self.get_handle(), name.get_handle(), observeValues.get_handle(), unit?.get_handle() ?? nil, description?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Metrics.ObservableGauge_1(hndl : __return);
        }
    }
    // delegate closure overload
    open func CreateObservableGauge<UT : SGBridgeGenericValue>(name : dotnet.System.String, observeValues : @escaping () throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>, unit : Optional<dotnet.System.String>, description : Optional<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Metrics.ObservableGauge_1<UT> {
        let del_observeValues = try dotnet.System.Func_1<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Diagnostics.Metrics.Measurement_1<UT>>>(observeValues);
        return try CreateObservableGauge(name: name, observeValues: del_observeValues, unit: unit, description: description);
    }
    // void Dispose()
// docid: M:System.Diagnostics.Metrics.Meter.Dispose
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_Meter_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.Metrics.Meter.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Meter_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Version()
// docid: M:System.Diagnostics.Metrics.Meter.get_Version
    open func get_Version() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_Meter_String__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    open var Version : Optional<dotnet.System.String> {
        get {
            return try! get_Version();
        }
    }
} // Meter


// type: System.Diagnostics.Metrics.MeterListener
public final class MeterListener
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_MeterListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Metrics.MeterListener.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Metrics_MeterListener_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object DisableMeasurementEvents(System.Diagnostics.Metrics.Instrument)
// docid: M:System.Diagnostics.Metrics.MeterListener.DisableMeasurementEvents(System.Diagnostics.Metrics.Instrument)
    public func DisableMeasurementEvents(instrument : dotnet.System.Diagnostics.Metrics.Instrument) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_MeterListener_Object__DisableMeasurementEvents_0__1__Instrument(&__thrown, self.get_handle(), instrument.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.Metrics.MeterListener.Dispose
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_MeterListener_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EnableMeasurementEvents(System.Diagnostics.Metrics.Instrument, System.Object)
// docid: M:System.Diagnostics.Metrics.MeterListener.EnableMeasurementEvents(System.Diagnostics.Metrics.Instrument,System.Object)
    public func EnableMeasurementEvents(instrument : dotnet.System.Diagnostics.Metrics.Instrument, state : Optional<dotnet.System.Object> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_MeterListener_void__EnableMeasurementEvents_0__2__Instrument_Object(&__thrown, self.get_handle(), instrument.get_handle(), state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RecordObservableInstruments()
// docid: M:System.Diagnostics.Metrics.MeterListener.RecordObservableInstruments
    public func RecordObservableInstruments() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_MeterListener_void__RecordObservableInstruments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetMeasurementEventCallback<T>(System.Diagnostics.Metrics.MeasurementCallback<T>)
// docid: M:System.Diagnostics.Metrics.MeterListener.SetMeasurementEventCallback``1(System.Diagnostics.Metrics.MeasurementCallback{``0})
    public func SetMeasurementEventCallback<UT : SGBridgeGenericValue>(measurementCallback : dotnet.System.Diagnostics.Metrics.MeasurementCallback_1<UT>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_MeterListener_void__SetMeasurementEventCallback_1__1__System_Diagnostics_Metrics_MeasurementCallback_UT_(UT.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Start()
// docid: M:System.Diagnostics.Metrics.MeterListener.Start
    public func Start() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_MeterListener_void__Start_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Action<System.Diagnostics.Metrics.Instrument,System.Diagnostics.Metrics.MeterListener> get_InstrumentPublished()
// docid: M:System.Diagnostics.Metrics.MeterListener.get_InstrumentPublished
    public func get_InstrumentPublished() throws -> Optional<dotnet.System.Action_2<dotnet.System.Diagnostics.Metrics.Instrument,dotnet.System.Diagnostics.Metrics.MeterListener>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_MeterListener_System_Action_System_Diagnostics_Metrics_Instrument_System_Diagnostics_Metrics_MeterListener___get_InstrumentPublished_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_InstrumentPublished(System.Action<System.Diagnostics.Metrics.Instrument,System.Diagnostics.Metrics.MeterListener>)
// docid: M:System.Diagnostics.Metrics.MeterListener.set_InstrumentPublished(System.Action{System.Diagnostics.Metrics.Instrument,System.Diagnostics.Metrics.MeterListener})
    public func set_InstrumentPublished(value : Optional<dotnet.System.Action_2<dotnet.System.Diagnostics.Metrics.Instrument,dotnet.System.Diagnostics.Metrics.MeterListener>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_MeterListener_void__set_InstrumentPublished_0__1__System_Action_System_Diagnostics_Metrics_Instrument_System_Diagnostics_Metrics_MeterListener_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_InstrumentPublished(value : @escaping (Optional<dotnet.System.Diagnostics.Metrics.Instrument>, Optional<dotnet.System.Diagnostics.Metrics.MeterListener>) throws -> Void) throws {
        let del_value = try dotnet.System.Action_2<dotnet.System.Diagnostics.Metrics.Instrument,dotnet.System.Diagnostics.Metrics.MeterListener>(value);
        return try set_InstrumentPublished(value: del_value);
    }
    // [IsSpecialName] System.Action<System.Diagnostics.Metrics.Instrument,System.Object> get_MeasurementsCompleted()
// docid: M:System.Diagnostics.Metrics.MeterListener.get_MeasurementsCompleted
    public func get_MeasurementsCompleted() throws -> Optional<dotnet.System.Action_2<dotnet.System.Diagnostics.Metrics.Instrument,dotnet.System.Object>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_MeterListener_System_Action_System_Diagnostics_Metrics_Instrument_object___get_MeasurementsCompleted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MeasurementsCompleted(System.Action<System.Diagnostics.Metrics.Instrument,System.Object>)
// docid: M:System.Diagnostics.Metrics.MeterListener.set_MeasurementsCompleted(System.Action{System.Diagnostics.Metrics.Instrument,System.Object})
    public func set_MeasurementsCompleted(value : Optional<dotnet.System.Action_2<dotnet.System.Diagnostics.Metrics.Instrument,dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Metrics_MeterListener_void__set_MeasurementsCompleted_0__1__System_Action_System_Diagnostics_Metrics_Instrument_object_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_MeasurementsCompleted(value : @escaping (Optional<dotnet.System.Diagnostics.Metrics.Instrument>, Optional<dotnet.System.Object>) throws -> Void) throws {
        let del_value = try dotnet.System.Action_2<dotnet.System.Diagnostics.Metrics.Instrument,dotnet.System.Object>(value);
        return try set_MeasurementsCompleted(value: del_value);
    }
    public var InstrumentPublished : Optional<dotnet.System.Action_2<dotnet.System.Diagnostics.Metrics.Instrument,dotnet.System.Diagnostics.Metrics.MeterListener>> {
        get {
            return try! get_InstrumentPublished();
        }
        set(v) {
            return try! set_InstrumentPublished(value: v!);
        }
    }
    public var MeasurementsCompleted : Optional<dotnet.System.Action_2<dotnet.System.Diagnostics.Metrics.Instrument,dotnet.System.Object>> {
        get {
            return try! get_MeasurementsCompleted();
        }
        set(v) {
            return try! set_MeasurementsCompleted(value: v!);
        }
    }
} // MeterListener


// type: System.Diagnostics.Metrics.ObservableCounter`1
public final class ObservableCounter_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Diagnostics.Metrics.ObservableInstrument_1<T>
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_ObservableCounter_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // ObservableCounter_1


// type: System.Diagnostics.Metrics.ObservableGauge`1
public final class ObservableGauge_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Diagnostics.Metrics.ObservableInstrument_1<T>
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_ObservableGauge_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // ObservableGauge_1


// type: System.Diagnostics.Metrics.ObservableInstrument`1
open class ObservableInstrument_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Diagnostics.Metrics.Instrument
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Metrics_ObservableInstrument_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_IsObservable()
// docid: M:System.Diagnostics.Metrics.ObservableInstrument`1.get_IsObservable
    open override func get_IsObservable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Metrics_ObservableInstrument_1_bool__get_IsObservable_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    open override var IsObservable : Bool {
        get {
            return try! get_IsObservable();
        }
    }
} // ObservableInstrument_1


}



