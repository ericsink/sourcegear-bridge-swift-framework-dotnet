// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
// System.Net.Mail
extension System.Net.Mail {
// type: System.Net.Mail.AlternateView
    /**
    Represents the format to view an email message.

    */
open class AlternateView
    :
    dotnet.System.Net.Mail.AttachmentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_AlternateView_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream)
// docid: M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream)
    /**
    Initializes a new instance of  with the specified .

    - Parameter contentStream: A stream that contains the content for this view.
    */
    public init(contentStream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_AlternateView_ctor_0__1__Stream(&__thrown, contentStream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.Net.Mime.ContentType)
    /**
    Initializes a new instance of  with the specified  and .

    - Parameter contentStream: A stream that contains the content for this attachment.
    - Parameter contentType: The type of the content.
    */
    public init(contentStream : dotnet.System.IO.Stream, contentType : Optional<dotnet.System.Net.Mime.ContentType>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_AlternateView_ctor_0__2__Stream_ContentType(&__thrown, contentStream.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.String)
// docid: M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.String)
    /**
    Initializes a new instance of  with the specified  and media type.

    - Parameter contentStream: A stream that contains the content for this attachment.
    - Parameter mediaType: The MIME media type of the content.
    */
    public init(contentStream : dotnet.System.IO.Stream, mediaType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_AlternateView_ctor_0__2__Stream_String(&__thrown, contentStream.get_handle(), mediaType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mail.AlternateView.#ctor(System.String)
    /**
    Initializes a new instance of  with the specified file name.

    - Parameter fileName: The name of the file that contains the content for this alternate view.
    */
    public init(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_AlternateView_ctor_0__1__String(&__thrown, fileName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.AlternateView.#ctor(System.String,System.Net.Mime.ContentType)
    /**
    Initializes a new instance of  with the specified file name and content type.

    - Parameter fileName: The name of the file that contains the content for this alternate view.
    - Parameter contentType: The type of the content.
    */
    public init(fileName : dotnet.System.String, contentType : Optional<dotnet.System.Net.Mime.ContentType>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_AlternateView_ctor_0__2__String_ContentType(&__thrown, fileName.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Mail.AlternateView.#ctor(System.String,System.String)
    /**
    Initializes a new instance of  with the specified file name and media type.

    - Parameter fileName: The name of the file that contains the content for this alternate view.
    - Parameter mediaType: The MIME media type of the content.
    */
    public init(fileName : dotnet.System.String, mediaType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_AlternateView_ctor_0__2__String_String(&__thrown, fileName.get_handle(), mediaType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.Mail.AlternateView CreateAlternateViewFromString(System.String)
// docid: M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String)
    /**
    Creates a  of an email message using the content specified in a .

    - Parameter content: The  that contains the content of the email message.
    - Returns: An  object that represents an alternate view of an email message.

    */
    open class func CreateAlternateViewFromString(content : dotnet.System.String) throws -> dotnet.System.Net.Mail.AlternateView {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AlternateView_AlternateView__CreateAlternateViewFromString_0__1__String(&__thrown, content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.AlternateView(hndl : __return);
        }
    }
    // System.Net.Mail.AlternateView CreateAlternateViewFromString(System.String, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Net.Mime.ContentType)
    /**
    Creates an  of an email message using the content specified in a  and the specified MIME media type of the content.

    - Parameter content: A  that contains the content for this attachment.
    - Parameter contentType: A  that describes the data in .
    - Returns: An  object that represents an alternate view of an email message.

    */
    open class func CreateAlternateViewFromString(content : dotnet.System.String, contentType : Optional<dotnet.System.Net.Mime.ContentType>) throws -> dotnet.System.Net.Mail.AlternateView {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AlternateView_AlternateView__CreateAlternateViewFromString_0__2__String_ContentType(&__thrown, content.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.AlternateView(hndl : __return);
        }
    }
    // System.Net.Mail.AlternateView CreateAlternateViewFromString(System.String, System.Text.Encoding, System.String)
// docid: M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Text.Encoding,System.String)
    /**
    Creates an  of an email message using the content specified in a , the specified text encoding, and MIME media type of the content.

    - Parameter content: A  that contains the content for this attachment.
    - Parameter contentEncoding: An . This value can be .
    - Parameter mediaType: The MIME media type of the content.
    - Returns: An  object that represents an alternate view of an email message.

    */
    open class func CreateAlternateViewFromString(content : dotnet.System.String, contentEncoding : Optional<dotnet.System.Text.Encoding>, mediaType : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Mail.AlternateView {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AlternateView_AlternateView__CreateAlternateViewFromString_0__3__String_Encoding_String(&__thrown, content.get_handle(), contentEncoding?.get_handle() ?? nil, mediaType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.AlternateView(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_BaseUri()
// docid: M:System.Net.Mail.AlternateView.get_BaseUri
    open func get_BaseUri() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AlternateView_Uri__get_BaseUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BaseUri(System.Uri)
// docid: M:System.Net.Mail.AlternateView.set_BaseUri(System.Uri)
    open func set_BaseUri(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_AlternateView_void__set_BaseUri_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.LinkedResourceCollection get_LinkedResources()
// docid: M:System.Net.Mail.AlternateView.get_LinkedResources
    open func get_LinkedResources() throws -> dotnet.System.Net.Mail.LinkedResourceCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AlternateView_LinkedResourceCollection__get_LinkedResources_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.LinkedResourceCollection(hndl : __return);
        }
    }
    /**
    Gets or sets the base URI to use for resolving relative URIs in the .

    */
    open var BaseUri : Optional<dotnet.System.Uri> {
        get {
            return try! get_BaseUri();
        }
        set(v) {
            return try! set_BaseUri(value: v!);
        }
    }
    /**
    Gets the set of embedded resources referred to by this attachment.

    */
    open var LinkedResources : dotnet.System.Net.Mail.LinkedResourceCollection {
        get {
            return try! get_LinkedResources();
        }
    }
} // AlternateView


// type: System.Net.Mail.AlternateViewCollection
    /**
    Represents a collection of  objects.

    */
public final class AlternateViewCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.Net.Mail.AlternateView>,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_AlternateViewCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:System.Net.Mail.AlternateViewCollection.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_AlternateViewCollection_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // AlternateViewCollection


// type: System.Net.Mail.Attachment
    /**
    Represents an attachment to an email.

    */
open class Attachment
    :
    dotnet.System.Net.Mail.AttachmentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_Attachment_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.Net.Mime.ContentType)
    /**
    Initializes a new instance of the  class with the specified stream and content type.

    - Parameter contentStream: A readable  that contains the content for this attachment.
    - Parameter contentType: A  that describes the data in .
    */
    public init(contentStream : dotnet.System.IO.Stream, contentType : dotnet.System.Net.Mime.ContentType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_Attachment_ctor_0__2__Stream_ContentType(&__thrown, contentStream.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.String)
// docid: M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String)
    /**
    Initializes a new instance of the  class with the specified stream and name.

    - Parameter contentStream: A readable  that contains the content for this attachment.
    - Parameter name: A  that contains the value for the  property of the  associated with this attachment. This value can be .
    */
    public init(contentStream : dotnet.System.IO.Stream, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_Attachment_ctor_0__2__Stream_String(&__thrown, contentStream.get_handle(), name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.String, System.String)
// docid: M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified stream, name, and MIME type information.

    - Parameter contentStream: A readable  that contains the content for this attachment.
    - Parameter name: A  that contains the value for the  property of the  associated with this attachment. This value can be .
    - Parameter mediaType: A  that contains the MIME Content-Header information for this attachment. This value can be .
    */
    public init(contentStream : dotnet.System.IO.Stream, name : Optional<dotnet.System.String>, mediaType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_Attachment_ctor_0__3__Stream_String_String(&__thrown, contentStream.get_handle(), name?.get_handle() ?? nil, mediaType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mail.Attachment.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified content string.

    - Parameter fileName: A  that contains a file path to use to create this attachment.
    */
    public init(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_Attachment_ctor_0__1__String(&__thrown, fileName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.Attachment.#ctor(System.String,System.Net.Mime.ContentType)
    /**
    Initializes a new instance of the  class with the specified content string and .

    - Parameter fileName: A  that contains a file path to use to create this attachment.
    - Parameter contentType: A  that describes the data in .
    */
    public init(fileName : dotnet.System.String, contentType : dotnet.System.Net.Mime.ContentType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_Attachment_ctor_0__2__String_ContentType(&__thrown, fileName.get_handle(), contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Mail.Attachment.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified content string and MIME type information.

    - Parameter fileName: A  that contains the content for this attachment.
    - Parameter mediaType: A  that contains the MIME Content-Header information for this attachment. This value can be .
    */
    public init(fileName : dotnet.System.String, mediaType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_Attachment_ctor_0__2__String_String(&__thrown, fileName.get_handle(), mediaType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.Mail.Attachment CreateAttachmentFromString(System.String, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.Net.Mime.ContentType)
    /**
    Creates a mail attachment using the content from the specified string, and the specified .

    - Parameter content: A  that contains the content for this attachment.
    - Parameter contentType: A  object that represents the Multipurpose Internet Mail Exchange (MIME) protocol Content-Type header to be used.
    - Returns: An object of type .

    */
    open class func CreateAttachmentFromString(content : dotnet.System.String, contentType : dotnet.System.Net.Mime.ContentType) throws -> dotnet.System.Net.Mail.Attachment {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_Attachment_Attachment__CreateAttachmentFromString_0__2__String_ContentType(&__thrown, content.get_handle(), contentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.Attachment(hndl : __return);
        }
    }
    // System.Net.Mail.Attachment CreateAttachmentFromString(System.String, System.String)
// docid: M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.String)
    /**
    Creates a mail attachment using the content from the specified string, and the specified MIME content type name.

    - Parameter content: A  that contains the content for this attachment.
    - Parameter name: The MIME content type name value in the content type associated with this attachment.
    - Returns: An object of type .

    */
    open class func CreateAttachmentFromString(content : dotnet.System.String, name : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Mail.Attachment {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_Attachment_Attachment__CreateAttachmentFromString_0__2__String_String(&__thrown, content.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.Attachment(hndl : __return);
        }
    }
    // System.Net.Mail.Attachment CreateAttachmentFromString(System.String, System.String, System.Text.Encoding, System.String)
// docid: M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.String,System.Text.Encoding,System.String)
    /**
    Creates a mail attachment using the content from the specified string, the specified MIME content type name, character encoding, and MIME header information for the attachment.

    - Parameter content: A  that contains the content for this attachment.
    - Parameter name: The MIME content type name value in the content type associated with this attachment.
    - Parameter contentEncoding: An . This value can be .
    - Parameter mediaType: A  that contains the MIME Content-Header information for this attachment. This value can be .
    - Returns: An object of type .

    */
    open class func CreateAttachmentFromString(content : dotnet.System.String, name : Optional<dotnet.System.String>, contentEncoding : Optional<dotnet.System.Text.Encoding>, mediaType : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Mail.Attachment {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_Attachment_Attachment__CreateAttachmentFromString_0__4__String_String_Encoding_String(&__thrown, content.get_handle(), name?.get_handle() ?? nil, contentEncoding?.get_handle() ?? nil, mediaType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.Attachment(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Mime.ContentDisposition get_ContentDisposition()
// docid: M:System.Net.Mail.Attachment.get_ContentDisposition
    open func get_ContentDisposition() throws -> Optional<dotnet.System.Net.Mime.ContentDisposition> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_Attachment_ContentDisposition__get_ContentDisposition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Mime.ContentDisposition(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Net.Mail.Attachment.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_Attachment_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Net.Mail.Attachment.set_Name(System.String)
    open func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_Attachment_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_NameEncoding()
// docid: M:System.Net.Mail.Attachment.get_NameEncoding
    open func get_NameEncoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_Attachment_Encoding__get_NameEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NameEncoding(System.Text.Encoding)
// docid: M:System.Net.Mail.Attachment.set_NameEncoding(System.Text.Encoding)
    open func set_NameEncoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_Attachment_void__set_NameEncoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the MIME content disposition for this attachment.

    */
    open var ContentDisposition : Optional<dotnet.System.Net.Mime.ContentDisposition> {
        get {
            return try! get_ContentDisposition();
        }
    }
    /**
    Gets or sets the MIME content type name value in the content type associated with this attachment.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Specifies the encoding for the .

    */
    open var NameEncoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_NameEncoding();
        }
        set(v) {
            return try! set_NameEncoding(value: v!);
        }
    }
} // Attachment


// type: System.Net.Mail.AttachmentBase
    /**
    Base class that represents an email attachment. Classes , , and  derive from this class.

    */
open class AttachmentBase
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_AttachmentBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:System.Net.Mail.AttachmentBase.Dispose
    /**
    Releases the resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_AttachmentBase_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentId()
// docid: M:System.Net.Mail.AttachmentBase.get_ContentId
    open func get_ContentId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AttachmentBase_String__get_ContentId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentId(System.String)
// docid: M:System.Net.Mail.AttachmentBase.set_ContentId(System.String)
    open func set_ContentId(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_AttachmentBase_void__set_ContentId_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.Stream get_ContentStream()
// docid: M:System.Net.Mail.AttachmentBase.get_ContentStream
    open func get_ContentStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AttachmentBase_Stream__get_ContentStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Mime.ContentType get_ContentType()
// docid: M:System.Net.Mail.AttachmentBase.get_ContentType
    open func get_ContentType() throws -> dotnet.System.Net.Mime.ContentType {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AttachmentBase_ContentType__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mime.ContentType(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentType(System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.AttachmentBase.set_ContentType(System.Net.Mime.ContentType)
    open func set_ContentType(value : dotnet.System.Net.Mime.ContentType) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_AttachmentBase_void__set_ContentType_0__1__ContentType(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mime.TransferEncoding get_TransferEncoding()
// docid: M:System.Net.Mail.AttachmentBase.get_TransferEncoding
    open func get_TransferEncoding() throws -> dotnet.System.Net.Mime.TransferEncoding {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_AttachmentBase_TransferEncoding__get_TransferEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mime.TransferEncoding(val: __return);
        }
    }
    // [IsSpecialName] void set_TransferEncoding(System.Net.Mime.TransferEncoding)
// docid: M:System.Net.Mail.AttachmentBase.set_TransferEncoding(System.Net.Mime.TransferEncoding)
    open func set_TransferEncoding(value : dotnet.System.Net.Mime.TransferEncoding) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_AttachmentBase_void__set_TransferEncoding_0__1__TransferEncoding(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the MIME content ID for this attachment.

    */
    open var ContentId : dotnet.System.String {
        get {
            return try! get_ContentId();
        }
        set(v) {
            return try! set_ContentId(value: v);
        }
    }
    /**
    Gets the content stream of this attachment.

    */
    open var ContentStream : dotnet.System.IO.Stream {
        get {
            return try! get_ContentStream();
        }
    }
    /**
    Gets the content type of this attachment.

    */
    open var ContentType : dotnet.System.Net.Mime.ContentType {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v);
        }
    }
    /**
    Gets or sets the encoding of this attachment.

    */
    open var TransferEncoding : dotnet.System.Net.Mime.TransferEncoding {
        get {
            return try! get_TransferEncoding();
        }
        set(v) {
            return try! set_TransferEncoding(value: v);
        }
    }
} // AttachmentBase


// type: System.Net.Mail.AttachmentCollection
    /**
    Stores attachments to be sent as part of an email message.

    */
public final class AttachmentCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.Net.Mail.Attachment>,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_AttachmentCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:System.Net.Mail.AttachmentCollection.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_AttachmentCollection_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // AttachmentCollection


// type: System.Net.Mail.DeliveryNotificationOptions
    /**
    Describes the delivery notification options for email.

    */
public struct DeliveryNotificationOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Mail_DeliveryNotificationOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Mail.DeliveryNotificationOptions None
    /**
    No notification information will be sent. The mail server will utilize its configured behavior to determine whether it should generate a delivery notification.

    */
    public static var None : dotnet.System.Net.Mail.DeliveryNotificationOptions {
        get {
        let __return = dotnet.System.Net.Mail.DeliveryNotificationOptions(val: System_Net_Mail_DeliveryNotificationOptions_get_None());
            return __return;
        }
    }
    // static field: System.Net.Mail.DeliveryNotificationOptions OnSuccess
    /**
    Notify if the delivery is successful.

    */
    public static var OnSuccess : dotnet.System.Net.Mail.DeliveryNotificationOptions {
        get {
        let __return = dotnet.System.Net.Mail.DeliveryNotificationOptions(val: System_Net_Mail_DeliveryNotificationOptions_get_OnSuccess());
            return __return;
        }
    }
    // static field: System.Net.Mail.DeliveryNotificationOptions OnFailure
    /**
    Notify if the delivery is unsuccessful.

    */
    public static var OnFailure : dotnet.System.Net.Mail.DeliveryNotificationOptions {
        get {
        let __return = dotnet.System.Net.Mail.DeliveryNotificationOptions(val: System_Net_Mail_DeliveryNotificationOptions_get_OnFailure());
            return __return;
        }
    }
    // static field: System.Net.Mail.DeliveryNotificationOptions Delay
    /**
    Notify if the delivery is delayed.

    */
    public static var Delay : dotnet.System.Net.Mail.DeliveryNotificationOptions {
        get {
        let __return = dotnet.System.Net.Mail.DeliveryNotificationOptions(val: System_Net_Mail_DeliveryNotificationOptions_get_Delay());
            return __return;
        }
    }
    // static field: System.Net.Mail.DeliveryNotificationOptions Never
    /**
    A notification should not be generated under any circumstances.

    */
    public static var Never : dotnet.System.Net.Mail.DeliveryNotificationOptions {
        get {
        let __return = dotnet.System.Net.Mail.DeliveryNotificationOptions(val: System_Net_Mail_DeliveryNotificationOptions_get_Never());
            return __return;
        }
    }
} // DeliveryNotificationOptions


// type: System.Net.Mail.LinkedResource
    /**
    Represents an embedded external resource in an email attachment, such as an image in an HTML attachment.

    */
open class LinkedResource
    :
    dotnet.System.Net.Mail.AttachmentBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_LinkedResource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream)
// docid: M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream)
    /**
    Initializes a new instance of  using the supplied .

    - Parameter contentStream: A stream that contains the content for this embedded resource.
    */
    public init(contentStream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_LinkedResource_ctor_0__1__Stream(&__thrown, contentStream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.Net.Mime.ContentType)
    /**
    Initializes a new instance of  with the values supplied by  and .

    - Parameter contentStream: A stream that contains the content for this embedded resource.
    - Parameter contentType: The type of the content.
    */
    public init(contentStream : dotnet.System.IO.Stream, contentType : Optional<dotnet.System.Net.Mime.ContentType>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_LinkedResource_ctor_0__2__Stream_ContentType(&__thrown, contentStream.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.String)
// docid: M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.String)
    /**
    Initializes a new instance of  with the specified  and media type.

    - Parameter contentStream: A stream that contains the content for this embedded resource.
    - Parameter mediaType: The MIME media type of the content.
    */
    public init(contentStream : dotnet.System.IO.Stream, mediaType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_LinkedResource_ctor_0__2__Stream_String(&__thrown, contentStream.get_handle(), mediaType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mail.LinkedResource.#ctor(System.String)
    /**
    Initializes a new instance of  using the specified file name.

    - Parameter fileName: The file name holding the content for this embedded resource.
    */
    public init(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_LinkedResource_ctor_0__1__String(&__thrown, fileName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.LinkedResource.#ctor(System.String,System.Net.Mime.ContentType)
    /**
    Initializes a new instance of  with the specified file name and content type.

    - Parameter fileName: The file name that holds the content for this embedded resource.
    - Parameter contentType: The type of the content.
    */
    public init(fileName : dotnet.System.String, contentType : Optional<dotnet.System.Net.Mime.ContentType>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_LinkedResource_ctor_0__2__String_ContentType(&__thrown, fileName.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Mail.LinkedResource.#ctor(System.String,System.String)
    /**
    Initializes a new instance of  with the specified file name and media type.

    - Parameter fileName: The file name that holds the content for this embedded resource.
    - Parameter mediaType: The MIME media type of the content.
    */
    public init(fileName : dotnet.System.String, mediaType : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_LinkedResource_ctor_0__2__String_String(&__thrown, fileName.get_handle(), mediaType?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.Mail.LinkedResource CreateLinkedResourceFromString(System.String)
// docid: M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String)
    /**
    Creates a  object from a string to be included in an email attachment as an embedded resource. The default media type is plain text, and the default content type is ASCII.

    - Parameter content: A string that contains the embedded resource to be included in the email attachment.
    - Returns: A  object that contains the embedded resource to be included in the email attachment.

    */
    open class func CreateLinkedResourceFromString(content : dotnet.System.String) throws -> dotnet.System.Net.Mail.LinkedResource {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_LinkedResource_LinkedResource__CreateLinkedResourceFromString_0__1__String(&__thrown, content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.LinkedResource(hndl : __return);
        }
    }
    // System.Net.Mail.LinkedResource CreateLinkedResourceFromString(System.String, System.Net.Mime.ContentType)
// docid: M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Net.Mime.ContentType)
    /**
    Creates a  object from a string to be included in an email attachment as an embedded resource, with the specified content type, and media type as plain text.

    - Parameter content: A string that contains the embedded resource to be included in the email attachment.
    - Parameter contentType: The type of the content.
    - Returns: A  object that contains the embedded resource to be included in the email attachment.

    */
    open class func CreateLinkedResourceFromString(content : dotnet.System.String, contentType : Optional<dotnet.System.Net.Mime.ContentType>) throws -> dotnet.System.Net.Mail.LinkedResource {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_LinkedResource_LinkedResource__CreateLinkedResourceFromString_0__2__String_ContentType(&__thrown, content.get_handle(), contentType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.LinkedResource(hndl : __return);
        }
    }
    // System.Net.Mail.LinkedResource CreateLinkedResourceFromString(System.String, System.Text.Encoding, System.String)
// docid: M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Text.Encoding,System.String)
    /**
    Creates a  object from a string to be included in an email attachment as an embedded resource, with the specified content type, and media type.

    - Parameter content: A string that contains the embedded resource to be included in the email attachment.
    - Parameter contentEncoding: The type of the content.
    - Parameter mediaType: The MIME media type of the content.
    - Returns: A  object that contains the embedded resource to be included in the email attachment.

    */
    open class func CreateLinkedResourceFromString(content : dotnet.System.String, contentEncoding : Optional<dotnet.System.Text.Encoding>, mediaType : Optional<dotnet.System.String>) throws -> dotnet.System.Net.Mail.LinkedResource {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_LinkedResource_LinkedResource__CreateLinkedResourceFromString_0__3__String_Encoding_String(&__thrown, content.get_handle(), contentEncoding?.get_handle() ?? nil, mediaType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.LinkedResource(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_ContentLink()
// docid: M:System.Net.Mail.LinkedResource.get_ContentLink
    open func get_ContentLink() throws -> Optional<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_LinkedResource_Uri__get_ContentLink_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Uri(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentLink(System.Uri)
// docid: M:System.Net.Mail.LinkedResource.set_ContentLink(System.Uri)
    open func set_ContentLink(value : Optional<dotnet.System.Uri>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_LinkedResource_void__set_ContentLink_0__1__Uri(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a URI that the resource must match.

    */
    open var ContentLink : Optional<dotnet.System.Uri> {
        get {
            return try! get_ContentLink();
        }
        set(v) {
            return try! set_ContentLink(value: v!);
        }
    }
} // LinkedResource


// type: System.Net.Mail.LinkedResourceCollection
    /**
    Stores linked resources to be sent as part of an email message.

    */
public final class LinkedResourceCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.Net.Mail.LinkedResource>,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_LinkedResourceCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:System.Net.Mail.LinkedResourceCollection.Dispose
    /**
    Releases all resources used by the .

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_LinkedResourceCollection_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // LinkedResourceCollection


// type: System.Net.Mail.MailAddress
    /**
    Represents the address of an electronic mail sender or recipient.

    */
open class MailAddress
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_MailAddress_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Mail.MailAddress.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified address.

    - Parameter address: A  that contains an email address.
    */
    public init(address : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_MailAddress_ctor_0__1__String(&__thrown, address.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Mail.MailAddress.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class using the specified address and display name.

    - Parameter address: A  that contains an email address.
    - Parameter displayName: A  that contains the display name associated with . This parameter can be .
    */
    public init(address : dotnet.System.String, displayName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_MailAddress_ctor_0__2__String_String(&__thrown, address.get_handle(), displayName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Text.Encoding)
// docid: M:System.Net.Mail.MailAddress.#ctor(System.String,System.String,System.Text.Encoding)
    /**
    Initializes a new instance of the  class using the specified address, display name, and encoding.

    - Parameter address: A  that contains an email address.
    - Parameter displayName: A  that contains the display name associated with .
    - Parameter displayNameEncoding: The  that defines the character set used for .
    */
    public init(address : dotnet.System.String, displayName : Optional<dotnet.System.String>, displayNameEncoding : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_MailAddress_ctor_0__3__String_String_Encoding(&__thrown, address.get_handle(), displayName?.get_handle() ?? nil, displayNameEncoding?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Mail.MailAddress.Equals(System.Object)
    /**
    Compares two mail addresses.

    - Parameter value: A  instance to compare to the current instance.
    - Returns: 
         if the two mail addresses are equal; otherwise, .

    */
    open func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailAddress_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Mail.MailAddress.GetHashCode
    /**
    Returns a hash value for a mail address.

    - Returns: An integer hash value.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailAddress_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool TryCreate(System.String, ref System.Net.Mail.MailAddress)
// docid: M:System.Net.Mail.MailAddress.TryCreate(System.String,System.Net.Mail.MailAddress@)
    /**
    Creates a new . Does not throw an exception if the object cannot be created.

    - Parameter address: An email address.
    - Parameter result: When this method returns, contains the email address object  if parsing succeeded.
    - Returns: 
         if the  was successfully created; otherwise, .

    */
    open class func TryCreate(address : dotnet.System.String, result : inout dotnet.System.Net.Mail.MailAddress) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Net_Mail_MailAddress_bool__TryCreate_0__2__String_outMailAddress(&__thrown, address.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Net.Mail.MailAddress(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryCreate(System.String, System.String, ref System.Net.Mail.MailAddress)
// docid: M:System.Net.Mail.MailAddress.TryCreate(System.String,System.String,System.Net.Mail.MailAddress@)
    /**
    Create a new . Does not throw an exception if the object cannot be created.

    - Parameter address: An email address.
    - Parameter displayName: The display name associated with the address. This parameter can be .
    - Parameter result: When this method returns, contains the email address object if parsing succeeded.
    - Returns: 
         if the  was successfully created; otherwise, .

    */
    open class func TryCreate(address : dotnet.System.String, displayName : Optional<dotnet.System.String>, result : inout dotnet.System.Net.Mail.MailAddress) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Net_Mail_MailAddress_bool__TryCreate_0__3__String_String_outMailAddress(&__thrown, address.get_handle(), displayName?.get_handle() ?? nil, &_tmp_out_result);
        let _tmp2_result = dotnet.System.Net.Mail.MailAddress(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryCreate(System.String, System.String, System.Text.Encoding, ref System.Net.Mail.MailAddress)
// docid: M:System.Net.Mail.MailAddress.TryCreate(System.String,System.String,System.Text.Encoding,System.Net.Mail.MailAddress@)
    /**
    Create a new . Does not throw an exception if the object cannot be created.

    - Parameter address: An email address.
    - Parameter displayName: The display name associated with address. This parameter can be .
    - Parameter displayNameEncoding: The encoding that defines the character set used for .
    - Parameter result: When this method returns, contains the email address object if parsing succeeded.
    - Returns: 
         if the  was successfully created; otherwise, .

    */
    open class func TryCreate(address : dotnet.System.String, displayName : Optional<dotnet.System.String>, displayNameEncoding : Optional<dotnet.System.Text.Encoding>, result : inout dotnet.System.Net.Mail.MailAddress) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Net_Mail_MailAddress_bool__TryCreate_0__4__String_String_Encoding_outMailAddress(&__thrown, address.get_handle(), displayName?.get_handle() ?? nil, displayNameEncoding?.get_handle() ?? nil, &_tmp_out_result);
        let _tmp2_result = dotnet.System.Net.Mail.MailAddress(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Mail.MailAddress.ToString
    /**
    Returns a string representation of this instance.

    - Returns: A  that contains the contents of this .

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailAddress_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Address()
// docid: M:System.Net.Mail.MailAddress.get_Address
    open func get_Address() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailAddress_String__get_Address_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Net.Mail.MailAddress.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailAddress_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:System.Net.Mail.MailAddress.get_Host
    open func get_Host() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailAddress_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_User()
// docid: M:System.Net.Mail.MailAddress.get_User
    open func get_User() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailAddress_String__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the email address specified when this instance was created.

    */
    open var Address : dotnet.System.String {
        get {
            return try! get_Address();
        }
    }
    /**
    Gets the display name composed from the display name and address information specified when this instance was created.

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    Gets the host portion of the address specified when this instance was created.

    */
    open var Host : dotnet.System.String {
        get {
            return try! get_Host();
        }
    }
    /**
    Gets the user information from the address specified when this instance was created.

    */
    open var User : dotnet.System.String {
        get {
            return try! get_User();
        }
    }
} // MailAddress


// type: System.Net.Mail.MailAddressCollection
    /**
    Store email addresses that are associated with an email message.

    */
open class MailAddressCollection
    :
    dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.Net.Mail.MailAddress>
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_MailAddressCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Mail.MailAddressCollection.#ctor
    /**
    Initializes an empty instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_MailAddressCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.String)
// docid: M:System.Net.Mail.MailAddressCollection.Add(System.String)
    /**
    Add a list of email addresses to the collection.

    - Parameter addresses: The email addresses to add to the . Multiple email addresses must be separated with a comma character (",").
    */
    open func Add(addresses : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailAddressCollection_void__Add_0__1__String(&__thrown, self.get_handle(), addresses.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Mail.MailAddressCollection.ToString
    /**
    Returns a string representation of the email addresses in this  object.

    - Returns: A  containing the email addresses in this collection.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailAddressCollection_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // MailAddressCollection


// type: System.Net.Mail.MailMessage
    /**
    Represents an email message that can be sent using the  class.

    */
open class MailMessage
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_MailMessage_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Mail.MailMessage.#ctor
    /**
    Initializes an empty instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_MailMessage_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Mail.MailAddress, System.Net.Mail.MailAddress)
// docid: M:System.Net.Mail.MailMessage.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)
    /**
    Initializes a new instance of the  class by using the specified  class objects.

    - Parameter from: A  that contains the address of the sender of the email message.
    - Parameter to: A  that contains the address of the recipient of the email message.
    */
    public init(from : dotnet.System.Net.Mail.MailAddress, to : dotnet.System.Net.Mail.MailAddress) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_MailMessage_ctor_0__2__MailAddress_MailAddress(&__thrown, from.get_handle(), to.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Net.Mail.MailMessage.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class by using the specified  class objects.

    - Parameter from: A  that contains the address of the sender of the email message.
    - Parameter to: A  that contains the addresses of the recipients of the email message. Multiple email addresses must be separated with a comma character (",").
    */
    public init(from : dotnet.System.String, to : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_MailMessage_ctor_0__2__String_String(&__thrown, from.get_handle(), to.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String)
// docid: M:System.Net.Mail.MailMessage.#ctor(System.String,System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter from: A  that contains the address of the sender of the email message.
    - Parameter to: A  that contains the addresses of the recipients of the email message. Multiple email addresses must be separated with a comma character (",").
    - Parameter subject: A  that contains the subject text.
    - Parameter body: A  that contains the message body.
    */
    public init(from : dotnet.System.String, to : dotnet.System.String, subject : Optional<dotnet.System.String>, body : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_MailMessage_ctor_0__4__String_String_String_String(&__thrown, from.get_handle(), to.get_handle(), subject?.get_handle() ?? nil, body?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Net.Mail.MailMessage.Dispose
    /**
    Releases all resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.AlternateViewCollection get_AlternateViews()
// docid: M:System.Net.Mail.MailMessage.get_AlternateViews
    open func get_AlternateViews() throws -> dotnet.System.Net.Mail.AlternateViewCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_AlternateViewCollection__get_AlternateViews_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.AlternateViewCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Mail.AttachmentCollection get_Attachments()
// docid: M:System.Net.Mail.MailMessage.get_Attachments
    open func get_Attachments() throws -> dotnet.System.Net.Mail.AttachmentCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_AttachmentCollection__get_Attachments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.AttachmentCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Mail.MailAddressCollection get_Bcc()
// docid: M:System.Net.Mail.MailMessage.get_Bcc
    open func get_Bcc() throws -> dotnet.System.Net.Mail.MailAddressCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_MailAddressCollection__get_Bcc_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.MailAddressCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Body()
// docid: M:System.Net.Mail.MailMessage.get_Body
    open func get_Body() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_String__get_Body_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Body(System.String)
// docid: M:System.Net.Mail.MailMessage.set_Body(System.String)
    open func set_Body(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_Body_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_BodyEncoding()
// docid: M:System.Net.Mail.MailMessage.get_BodyEncoding
    open func get_BodyEncoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_Encoding__get_BodyEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_BodyEncoding(System.Text.Encoding)
// docid: M:System.Net.Mail.MailMessage.set_BodyEncoding(System.Text.Encoding)
    open func set_BodyEncoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_BodyEncoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mime.TransferEncoding get_BodyTransferEncoding()
// docid: M:System.Net.Mail.MailMessage.get_BodyTransferEncoding
    open func get_BodyTransferEncoding() throws -> dotnet.System.Net.Mime.TransferEncoding {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_TransferEncoding__get_BodyTransferEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mime.TransferEncoding(val: __return);
        }
    }
    // [IsSpecialName] void set_BodyTransferEncoding(System.Net.Mime.TransferEncoding)
// docid: M:System.Net.Mail.MailMessage.set_BodyTransferEncoding(System.Net.Mime.TransferEncoding)
    open func set_BodyTransferEncoding(value : dotnet.System.Net.Mime.TransferEncoding) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_BodyTransferEncoding_0__1__TransferEncoding(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.MailAddressCollection get_CC()
// docid: M:System.Net.Mail.MailMessage.get_CC
    open func get_CC() throws -> dotnet.System.Net.Mail.MailAddressCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_MailAddressCollection__get_CC_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.MailAddressCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Mail.DeliveryNotificationOptions get_DeliveryNotificationOptions()
// docid: M:System.Net.Mail.MailMessage.get_DeliveryNotificationOptions
    open func get_DeliveryNotificationOptions() throws -> dotnet.System.Net.Mail.DeliveryNotificationOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_DeliveryNotificationOptions__get_DeliveryNotificationOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.DeliveryNotificationOptions(val: __return);
        }
    }
    // [IsSpecialName] void set_DeliveryNotificationOptions(System.Net.Mail.DeliveryNotificationOptions)
// docid: M:System.Net.Mail.MailMessage.set_DeliveryNotificationOptions(System.Net.Mail.DeliveryNotificationOptions)
    open func set_DeliveryNotificationOptions(value : dotnet.System.Net.Mail.DeliveryNotificationOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_DeliveryNotificationOptions_0__1__DeliveryNotificationOptions(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.MailAddress get_From()
// docid: M:System.Net.Mail.MailMessage.get_From
    open func get_From() throws -> Optional<dotnet.System.Net.Mail.MailAddress> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_MailAddress__get_From_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Mail.MailAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_From(System.Net.Mail.MailAddress)
// docid: M:System.Net.Mail.MailMessage.set_From(System.Net.Mail.MailAddress)
    open func set_From(value : Optional<dotnet.System.Net.Mail.MailAddress>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_From_0__1__MailAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.NameValueCollection get_Headers()
// docid: M:System.Net.Mail.MailMessage.get_Headers
    open func get_Headers() throws -> dotnet.System.Collections.Specialized.NameValueCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_NameValueCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.NameValueCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Encoding get_HeadersEncoding()
// docid: M:System.Net.Mail.MailMessage.get_HeadersEncoding
    open func get_HeadersEncoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_Encoding__get_HeadersEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_HeadersEncoding(System.Text.Encoding)
// docid: M:System.Net.Mail.MailMessage.set_HeadersEncoding(System.Text.Encoding)
    open func set_HeadersEncoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_HeadersEncoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsBodyHtml()
// docid: M:System.Net.Mail.MailMessage.get_IsBodyHtml
    open func get_IsBodyHtml() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_bool__get_IsBodyHtml_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsBodyHtml(bool)
// docid: M:System.Net.Mail.MailMessage.set_IsBodyHtml(System.Boolean)
    open func set_IsBodyHtml(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_IsBodyHtml_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.MailPriority get_Priority()
// docid: M:System.Net.Mail.MailMessage.get_Priority
    open func get_Priority() throws -> dotnet.System.Net.Mail.MailPriority {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_MailPriority__get_Priority_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.MailPriority(val: __return);
        }
    }
    // [IsSpecialName] void set_Priority(System.Net.Mail.MailPriority)
// docid: M:System.Net.Mail.MailMessage.set_Priority(System.Net.Mail.MailPriority)
    open func set_Priority(value : dotnet.System.Net.Mail.MailPriority) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_Priority_0__1__MailPriority(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.MailAddress get_ReplyTo()
// docid: M:System.Net.Mail.MailMessage.get_ReplyTo
    open func get_ReplyTo() throws -> Optional<dotnet.System.Net.Mail.MailAddress> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_MailAddress__get_ReplyTo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Mail.MailAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ReplyTo(System.Net.Mail.MailAddress)
// docid: M:System.Net.Mail.MailMessage.set_ReplyTo(System.Net.Mail.MailAddress)
    open func set_ReplyTo(value : Optional<dotnet.System.Net.Mail.MailAddress>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_ReplyTo_0__1__MailAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.MailAddressCollection get_ReplyToList()
// docid: M:System.Net.Mail.MailMessage.get_ReplyToList
    open func get_ReplyToList() throws -> dotnet.System.Net.Mail.MailAddressCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_MailAddressCollection__get_ReplyToList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.MailAddressCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Mail.MailAddress get_Sender()
// docid: M:System.Net.Mail.MailMessage.get_Sender
    open func get_Sender() throws -> Optional<dotnet.System.Net.Mail.MailAddress> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_MailAddress__get_Sender_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Mail.MailAddress(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Sender(System.Net.Mail.MailAddress)
// docid: M:System.Net.Mail.MailMessage.set_Sender(System.Net.Mail.MailAddress)
    open func set_Sender(value : Optional<dotnet.System.Net.Mail.MailAddress>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_Sender_0__1__MailAddress(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Subject()
// docid: M:System.Net.Mail.MailMessage.get_Subject
    open func get_Subject() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_String__get_Subject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Subject(System.String)
// docid: M:System.Net.Mail.MailMessage.set_Subject(System.String)
    open func set_Subject(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_Subject_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_SubjectEncoding()
// docid: M:System.Net.Mail.MailMessage.get_SubjectEncoding
    open func get_SubjectEncoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_Encoding__get_SubjectEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SubjectEncoding(System.Text.Encoding)
// docid: M:System.Net.Mail.MailMessage.set_SubjectEncoding(System.Text.Encoding)
    open func set_SubjectEncoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_MailMessage_void__set_SubjectEncoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.MailAddressCollection get_To()
// docid: M:System.Net.Mail.MailMessage.get_To
    open func get_To() throws -> dotnet.System.Net.Mail.MailAddressCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_MailMessage_MailAddressCollection__get_To_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.MailAddressCollection(hndl : __return);
        }
    }
    /**
    Gets the attachment collection used to store alternate forms of the message body.

    */
    open var AlternateViews : dotnet.System.Net.Mail.AlternateViewCollection {
        get {
            return try! get_AlternateViews();
        }
    }
    /**
    Gets the attachment collection used to store data attached to this email message.

    */
    open var Attachments : dotnet.System.Net.Mail.AttachmentCollection {
        get {
            return try! get_Attachments();
        }
    }
    /**
    Gets the address collection that contains the blind carbon copy (BCC) recipients for this email message.

    */
    open var Bcc : dotnet.System.Net.Mail.MailAddressCollection {
        get {
            return try! get_Bcc();
        }
    }
    /**
    Gets or sets the message body.

    */
    open var Body : dotnet.System.String {
        get {
            return try! get_Body();
        }
        set(v) {
            return try! set_Body(value: v);
        }
    }
    /**
    Gets or sets the encoding used to encode the message body.

    */
    open var BodyEncoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_BodyEncoding();
        }
        set(v) {
            return try! set_BodyEncoding(value: v!);
        }
    }
    /**
    Gets or sets the transfer encoding used to encode the message body.

    */
    open var BodyTransferEncoding : dotnet.System.Net.Mime.TransferEncoding {
        get {
            return try! get_BodyTransferEncoding();
        }
        set(v) {
            return try! set_BodyTransferEncoding(value: v);
        }
    }
    /**
    Gets the address collection that contains the carbon copy (CC) recipients for this email message.

    */
    open var CC : dotnet.System.Net.Mail.MailAddressCollection {
        get {
            return try! get_CC();
        }
    }
    /**
    Gets or sets the delivery notifications for this email message.

    */
    open var DeliveryNotificationOptions : dotnet.System.Net.Mail.DeliveryNotificationOptions {
        get {
            return try! get_DeliveryNotificationOptions();
        }
        set(v) {
            return try! set_DeliveryNotificationOptions(value: v);
        }
    }
    /**
    Gets or sets the from address for this email message.

    */
    open var From : Optional<dotnet.System.Net.Mail.MailAddress> {
        get {
            return try! get_From();
        }
        set(v) {
            return try! set_From(value: v!);
        }
    }
    /**
    Gets the email headers that are transmitted with this email message.

    */
    open var Headers : dotnet.System.Collections.Specialized.NameValueCollection {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets or sets the encoding used for the user-defined custom headers for this email message.

    */
    open var HeadersEncoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_HeadersEncoding();
        }
        set(v) {
            return try! set_HeadersEncoding(value: v!);
        }
    }
    /**
    Gets or sets a value indicating whether the mail message body is in HTML.

    */
    open var IsBodyHtml : Bool {
        get {
            return try! get_IsBodyHtml();
        }
        set(v) {
            return try! set_IsBodyHtml(value: v);
        }
    }
    /**
    Gets or sets the priority of this email message.

    */
    open var Priority : dotnet.System.Net.Mail.MailPriority {
        get {
            return try! get_Priority();
        }
        set(v) {
            return try! set_Priority(value: v);
        }
    }
    /**
    Gets or sets the ReplyTo address for the mail message.

    */
    open var ReplyTo : Optional<dotnet.System.Net.Mail.MailAddress> {
        get {
            return try! get_ReplyTo();
        }
        set(v) {
            return try! set_ReplyTo(value: v!);
        }
    }
    /**
    Gets the list of addresses to reply to for the mail message.

    */
    open var ReplyToList : dotnet.System.Net.Mail.MailAddressCollection {
        get {
            return try! get_ReplyToList();
        }
    }
    /**
    Gets or sets the sender's address for this email message.

    */
    open var Sender : Optional<dotnet.System.Net.Mail.MailAddress> {
        get {
            return try! get_Sender();
        }
        set(v) {
            return try! set_Sender(value: v!);
        }
    }
    /**
    Gets or sets the subject line for this email message.

    */
    open var Subject : dotnet.System.String {
        get {
            return try! get_Subject();
        }
        set(v) {
            return try! set_Subject(value: v);
        }
    }
    /**
    Gets or sets the encoding used for the subject content for this email message.

    */
    open var SubjectEncoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_SubjectEncoding();
        }
        set(v) {
            return try! set_SubjectEncoding(value: v!);
        }
    }
    /**
    Gets the address collection that contains the recipients of this email message.

    */
    open var To : dotnet.System.Net.Mail.MailAddressCollection {
        get {
            return try! get_To();
        }
    }
} // MailMessage


// type: System.Net.Mail.MailPriority
    /**
    Specifies the priority of a .

    */
public struct MailPriority : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Mail_MailPriority_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Mail.MailPriority Normal
    /**
    The email has normal priority.

    */
    public static var Normal : dotnet.System.Net.Mail.MailPriority {
        get {
        let __return = dotnet.System.Net.Mail.MailPriority(val: System_Net_Mail_MailPriority_get_Normal());
            return __return;
        }
    }
    // static field: System.Net.Mail.MailPriority Low
    /**
    The email has low priority.

    */
    public static var Low : dotnet.System.Net.Mail.MailPriority {
        get {
        let __return = dotnet.System.Net.Mail.MailPriority(val: System_Net_Mail_MailPriority_get_Low());
            return __return;
        }
    }
    // static field: System.Net.Mail.MailPriority High
    /**
    The email has high priority.

    */
    public static var High : dotnet.System.Net.Mail.MailPriority {
        get {
        let __return = dotnet.System.Net.Mail.MailPriority(val: System_Net_Mail_MailPriority_get_High());
            return __return;
        }
    }
} // MailPriority


// type: System.Net.Mail.SendCompletedEventHandler
    /**
    Represents the method that will handle the  event.

    */
public final class SendCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_SendCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs)
// docid: M:System.Net.Mail.SendCompletedEventHandler.Invoke(System.Object,System.ComponentModel.AsyncCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SendCompletedEventHandler_void__Invoke_0__2__Object_AsyncCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.Mail.SendCompletedEventHandler.BeginInvoke(System.Object,System.ComponentModel.AsyncCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.ComponentModel.AsyncCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SendCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_AsyncCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.Mail.SendCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SendCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.ComponentModel.AsyncCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SendCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.AsyncCompletedEventArgs)
// docid: M:System.Net.Mail.SendCompletedEventHandler.Invoke(System.Object,System.ComponentModel.AsyncCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SendCompletedEventHandler_void__Invoke_0__2__Object_AsyncCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // SendCompletedEventHandler


// type: System.Net.Mail.SmtpClient
    /**
    Allows applications to send email by using the Simple Mail Transfer Protocol (SMTP). The SmtpClient type is now obsolete.

    */
open class SmtpClient
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_SmtpClient_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Mail.SmtpClient.#ctor
    /**
    Initializes a new instance of the  class by using configuration file settings.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpClient_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mail.SmtpClient.#ctor(System.String)
    /**
    Initializes a new instance of the  class that sends email by using the specified SMTP server.

    - Parameter host: A  that contains the name or IP address of the host computer used for SMTP transactions.
    */
    public init(host : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpClient_ctor_0__1__String(&__thrown, host?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32)
// docid: M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)
    /**
    Initializes a new instance of the  class that sends email by using the specified SMTP server and port.

    - Parameter host: A  that contains the name or IP address of the host used for SMTP transactions.
    - Parameter port: An  greater than zero that contains the port to be used on .
    */
    public init(host : Optional<dotnet.System.String>, port : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpClient_ctor_0__2__String_i32(&__thrown, host?.get_handle() ?? nil, port);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Net.Mail.SmtpClient.Dispose
    /**
    Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, and releases all resources used by the current instance of the  class.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Send(System.Net.Mail.MailMessage)
// docid: M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)
    /**
    Sends the specified message to an SMTP server for delivery.

    - Parameter message: A  that contains the message to send.
    */
    open func Send(message : dotnet.System.Net.Mail.MailMessage) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__Send_0__1__MailMessage(&__thrown, self.get_handle(), message.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Send(System.String, System.String, System.String, System.String)
// docid: M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)
    /**
    Sends the specified email message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using  objects.

    - Parameter from: A  that contains the address information of the message sender.
    - Parameter recipients: A  that contains the addresses that the message is sent to.
    - Parameter subject: A  that contains the subject line for the message.
    - Parameter body: A  that contains the message body.
    */
    open func Send(from : dotnet.System.String, recipients : dotnet.System.String, subject : Optional<dotnet.System.String>, body : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__Send_0__4__String_String_String_String(&__thrown, self.get_handle(), from.get_handle(), recipients.get_handle(), subject?.get_handle() ?? nil, body?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.Net.Mail.MailMessage, System.Object)
// docid: M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)
    /**
    Sends the specified email message to an SMTP server for delivery. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes.

    - Parameter message: A  that contains the message to send.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(message : dotnet.System.Net.Mail.MailMessage, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__SendAsync_0__2__MailMessage_Object(&__thrown, self.get_handle(), message.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.String, System.String, System.String, System.String, System.Object)
// docid: M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)
    /**
    Sends an email message to an SMTP server for delivery. The message sender, recipients, subject, and message body are specified using  objects. This method does not block the calling thread and allows the caller to pass an object to the method that is invoked when the operation completes.

    - Parameter from: A  that contains the address information of the message sender.
    - Parameter recipients: A  that contains the address that the message is sent to.
    - Parameter subject: A  that contains the subject line for the message.
    - Parameter body: A  that contains the message body.
    - Parameter userToken: A user-defined object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(from : dotnet.System.String, recipients : dotnet.System.String, subject : Optional<dotnet.System.String>, body : Optional<dotnet.System.String>, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__SendAsync_0__5__String_String_String_String_Object(&__thrown, self.get_handle(), from.get_handle(), recipients.get_handle(), subject?.get_handle() ?? nil, body?.get_handle() ?? nil, userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsyncCancel()
// docid: M:System.Net.Mail.SmtpClient.SendAsyncCancel
    /**
    Cancels an asynchronous operation to send an email message.

    */
    open func SendAsyncCancel() throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__SendAsyncCancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SendMailAsync(System.Net.Mail.MailMessage)
// docid: M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage)
    /**
    Sends the specified message to an SMTP server for delivery as an asynchronous operation.

    - Parameter message: A  that contains the message to send.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendMailAsync(message : dotnet.System.Net.Mail.MailMessage) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_Task__SendMailAsync_0__1__MailMessage(&__thrown, self.get_handle(), message.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SendMailAsync(System.String, System.String, System.String, System.String)
// docid: M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String)
    /**
    Sends the specified message to an SMTP server for delivery as an asynchronous operation. The message sender, recipients, subject, and message body are specified using  objects.

    - Parameter from: A  that contains the address information of the message sender.
    - Parameter recipients: A  that contains the addresses that the message is sent to.
    - Parameter subject: A  that contains the subject line for the message.
    - Parameter body: A  that contains the message body.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendMailAsync(from : dotnet.System.String, recipients : dotnet.System.String, subject : Optional<dotnet.System.String>, body : Optional<dotnet.System.String>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_Task__SendMailAsync_0__4__String_String_String_String(&__thrown, self.get_handle(), from.get_handle(), recipients.get_handle(), subject?.get_handle() ?? nil, body?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SendMailAsync(System.Net.Mail.MailMessage, System.Threading.CancellationToken)
// docid: M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage,System.Threading.CancellationToken)
    /**
    Sends the specified message to an SMTP server for delivery as an asynchronous operation.

    - Parameter message: The message to send.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendMailAsync(message : dotnet.System.Net.Mail.MailMessage, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_Task__SendMailAsync_0__2__MailMessage_CancellationToken(&__thrown, self.get_handle(), message.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SendMailAsync(System.String, System.String, System.String, System.String, System.Threading.CancellationToken)
// docid: M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
    /**
    Sends the specified message to an SMTP server for delivery as an asynchronous operation, using the specified sender, recipients, subject, and body strings.

    - Parameter from: The address information of the message sender.
    - Parameter recipients: The addresses that the message is sent to.
    - Parameter subject: The subject line for the message.
    - Parameter body: The message body.
    - Parameter cancellationToken: The cancellation token to cancel the operation.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendMailAsync(from : dotnet.System.String, recipients : dotnet.System.String, subject : Optional<dotnet.System.String>, body : Optional<dotnet.System.String>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_Task__SendMailAsync_0__5__String_String_String_String_CancellationToken(&__thrown, self.get_handle(), from.get_handle(), recipients.get_handle(), subject?.get_handle() ?? nil, body?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
// docid: M:System.Net.Mail.SmtpClient.get_ClientCertificates
    open func get_ClientCertificates() throws -> dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_X509CertificateCollection__get_ClientCertificates_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.ICredentialsByHost get_Credentials()
// docid: M:System.Net.Mail.SmtpClient.get_Credentials
    open func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentialsByHost> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_ICredentialsByHost__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentialsByHost(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentialsByHost)
// docid: M:System.Net.Mail.SmtpClient.set_Credentials(System.Net.ICredentialsByHost)
    open func set_Credentials(value : Optional<dotnet.System.Net.ICredentialsByHost>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_Credentials_0__1__ICredentialsByHost(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.SmtpDeliveryFormat get_DeliveryFormat()
// docid: M:System.Net.Mail.SmtpClient.get_DeliveryFormat
    open func get_DeliveryFormat() throws -> dotnet.System.Net.Mail.SmtpDeliveryFormat {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_SmtpDeliveryFormat__get_DeliveryFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.SmtpDeliveryFormat(val: __return);
        }
    }
    // [IsSpecialName] void set_DeliveryFormat(System.Net.Mail.SmtpDeliveryFormat)
// docid: M:System.Net.Mail.SmtpClient.set_DeliveryFormat(System.Net.Mail.SmtpDeliveryFormat)
    open func set_DeliveryFormat(value : dotnet.System.Net.Mail.SmtpDeliveryFormat) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_DeliveryFormat_0__1__SmtpDeliveryFormat(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.SmtpDeliveryMethod get_DeliveryMethod()
// docid: M:System.Net.Mail.SmtpClient.get_DeliveryMethod
    open func get_DeliveryMethod() throws -> dotnet.System.Net.Mail.SmtpDeliveryMethod {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_SmtpDeliveryMethod__get_DeliveryMethod_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.SmtpDeliveryMethod(val: __return);
        }
    }
    // [IsSpecialName] void set_DeliveryMethod(System.Net.Mail.SmtpDeliveryMethod)
// docid: M:System.Net.Mail.SmtpClient.set_DeliveryMethod(System.Net.Mail.SmtpDeliveryMethod)
    open func set_DeliveryMethod(value : dotnet.System.Net.Mail.SmtpDeliveryMethod) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_DeliveryMethod_0__1__SmtpDeliveryMethod(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableSsl()
// docid: M:System.Net.Mail.SmtpClient.get_EnableSsl
    open func get_EnableSsl() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_bool__get_EnableSsl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableSsl(bool)
// docid: M:System.Net.Mail.SmtpClient.set_EnableSsl(System.Boolean)
    open func set_EnableSsl(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_EnableSsl_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:System.Net.Mail.SmtpClient.get_Host
    open func get_Host() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Host(System.String)
// docid: M:System.Net.Mail.SmtpClient.set_Host(System.String)
    open func set_Host(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_Host_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PickupDirectoryLocation()
// docid: M:System.Net.Mail.SmtpClient.get_PickupDirectoryLocation
    open func get_PickupDirectoryLocation() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_String__get_PickupDirectoryLocation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PickupDirectoryLocation(System.String)
// docid: M:System.Net.Mail.SmtpClient.set_PickupDirectoryLocation(System.String)
    open func set_PickupDirectoryLocation(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_PickupDirectoryLocation_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Port()
// docid: M:System.Net.Mail.SmtpClient.get_Port
    open func get_Port() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_i32__get_Port_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Port(System.Int32)
// docid: M:System.Net.Mail.SmtpClient.set_Port(System.Int32)
    open func set_Port(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_Port_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ServicePoint get_ServicePoint()
// docid: M:System.Net.Mail.SmtpClient.get_ServicePoint
    open func get_ServicePoint() throws -> dotnet.System.Net.ServicePoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_ServicePoint__get_ServicePoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.ServicePoint(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TargetName()
// docid: M:System.Net.Mail.SmtpClient.get_TargetName
    open func get_TargetName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_String__get_TargetName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TargetName(System.String)
// docid: M:System.Net.Mail.SmtpClient.set_TargetName(System.String)
    open func set_TargetName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_TargetName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Timeout()
// docid: M:System.Net.Mail.SmtpClient.get_Timeout
    open func get_Timeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_i32__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Timeout(System.Int32)
// docid: M:System.Net.Mail.SmtpClient.set_Timeout(System.Int32)
    open func set_Timeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_Timeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseDefaultCredentials()
// docid: M:System.Net.Mail.SmtpClient.get_UseDefaultCredentials
    open func get_UseDefaultCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpClient_bool__get_UseDefaultCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseDefaultCredentials(bool)
// docid: M:System.Net.Mail.SmtpClient.set_UseDefaultCredentials(System.Boolean)
    open func set_UseDefaultCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__set_UseDefaultCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_SendCompleted(System.Net.Mail.SendCompletedEventHandler)
// docid: M:System.Net.Mail.SmtpClient.add_SendCompleted(System.Net.Mail.SendCompletedEventHandler)
    open func add_SendCompleted(value : Optional<dotnet.System.Net.Mail.SendCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__add_SendCompleted_0__1__SendCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_SendCompleted(value : @escaping (dotnet.System.Object, dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.Mail.SendCompletedEventHandler(value);
        return try add_SendCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_SendCompleted(System.Net.Mail.SendCompletedEventHandler)
// docid: M:System.Net.Mail.SmtpClient.remove_SendCompleted(System.Net.Mail.SendCompletedEventHandler)
    open func remove_SendCompleted(value : Optional<dotnet.System.Net.Mail.SendCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpClient_void__remove_SendCompleted_0__1__SendCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_SendCompleted(value : @escaping (dotnet.System.Object, dotnet.System.ComponentModel.AsyncCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.Mail.SendCompletedEventHandler(value);
        return try remove_SendCompleted(value: del_value);
    }
    /**
    Specify which certificates should be used to establish the Secure Sockets Layer (SSL) connection.

    */
    open var ClientCertificates : dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection {
        get {
            return try! get_ClientCertificates();
        }
    }
    /**
    Gets or sets the credentials used to authenticate the sender.

    */
    open var Credentials : Optional<dotnet.System.Net.ICredentialsByHost> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
    /**
    Gets or sets the delivery format used by  to send email.

    */
    open var DeliveryFormat : dotnet.System.Net.Mail.SmtpDeliveryFormat {
        get {
            return try! get_DeliveryFormat();
        }
        set(v) {
            return try! set_DeliveryFormat(value: v);
        }
    }
    /**
    Specifies how outgoing email messages will be handled.

    */
    open var DeliveryMethod : dotnet.System.Net.Mail.SmtpDeliveryMethod {
        get {
            return try! get_DeliveryMethod();
        }
        set(v) {
            return try! set_DeliveryMethod(value: v);
        }
    }
    /**
    Specify whether the  uses Secure Sockets Layer (SSL) to encrypt the connection.

    */
    open var EnableSsl : Bool {
        get {
            return try! get_EnableSsl();
        }
        set(v) {
            return try! set_EnableSsl(value: v);
        }
    }
    /**
    Gets or sets the name or IP address of the host used for SMTP transactions.

    */
    open var Host : Optional<dotnet.System.String> {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v!);
        }
    }
    /**
    Gets or sets the folder where applications save mail messages to be processed by the local SMTP server.

    */
    open var PickupDirectoryLocation : Optional<dotnet.System.String> {
        get {
            return try! get_PickupDirectoryLocation();
        }
        set(v) {
            return try! set_PickupDirectoryLocation(value: v!);
        }
    }
    /**
    Gets or sets the port used for SMTP transactions.

    */
    open var Port : Swift.Int32 {
        get {
            return try! get_Port();
        }
        set(v) {
            return try! set_Port(value: v);
        }
    }
    /**
    Gets the network connection used to transmit the email message.

    */
    open var ServicePoint : dotnet.System.Net.ServicePoint {
        get {
            return try! get_ServicePoint();
        }
    }
    /**
    Gets or sets the Service Provider Name (SPN) to use for authentication when using extended protection.

    */
    open var TargetName : Optional<dotnet.System.String> {
        get {
            return try! get_TargetName();
        }
        set(v) {
            return try! set_TargetName(value: v!);
        }
    }
    /**
    Gets or sets a value that specifies the amount of time after which a synchronous  call times out.

    */
    open var Timeout : Swift.Int32 {
        get {
            return try! get_Timeout();
        }
        set(v) {
            return try! set_Timeout(value: v);
        }
    }
    /**
    Gets or sets a  value that controls whether the  are sent with requests.

    */
    open var UseDefaultCredentials : Bool {
        get {
            return try! get_UseDefaultCredentials();
        }
        set(v) {
            return try! set_UseDefaultCredentials(value: v);
        }
    }
} // SmtpClient


// type: System.Net.Mail.SmtpDeliveryFormat
    /**
    The delivery format to use for sending outgoing email using the Simple Mail Transport Protocol (SMTP).

    */
public struct SmtpDeliveryFormat : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Mail_SmtpDeliveryFormat_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Mail.SmtpDeliveryFormat SevenBit
    /**
    A delivery format using 7-bit ASCII.  
  
 The traditional delivery format used in the Simple Mail Transport Protocol (SMTP) for mail messages.

    */
    public static var SevenBit : dotnet.System.Net.Mail.SmtpDeliveryFormat {
        get {
        let __return = dotnet.System.Net.Mail.SmtpDeliveryFormat(val: System_Net_Mail_SmtpDeliveryFormat_get_SevenBit());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpDeliveryFormat International
    /**
    A delivery format where non-ASCII characters in the envelope and header fields used in the Simple Mail Transport Protocol (SMTP) for mail messages are encoded with UTF-8 characters.  
  
 The extensions to support international email are defined in IETF RFC 6530, 6531, and 6532.

    */
    public static var International : dotnet.System.Net.Mail.SmtpDeliveryFormat {
        get {
        let __return = dotnet.System.Net.Mail.SmtpDeliveryFormat(val: System_Net_Mail_SmtpDeliveryFormat_get_International());
            return __return;
        }
    }
} // SmtpDeliveryFormat


// type: System.Net.Mail.SmtpDeliveryMethod
    /**
    Specifies how email messages are delivered.

    */
public struct SmtpDeliveryMethod : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Mail_SmtpDeliveryMethod_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Mail.SmtpDeliveryMethod Network
    /**
    Email is sent through the network to an SMTP server.

    */
    public static var Network : dotnet.System.Net.Mail.SmtpDeliveryMethod {
        get {
        let __return = dotnet.System.Net.Mail.SmtpDeliveryMethod(val: System_Net_Mail_SmtpDeliveryMethod_get_Network());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpDeliveryMethod SpecifiedPickupDirectory
    /**
    Email is copied to the directory specified by the  property for delivery by an external application.

    */
    public static var SpecifiedPickupDirectory : dotnet.System.Net.Mail.SmtpDeliveryMethod {
        get {
        let __return = dotnet.System.Net.Mail.SmtpDeliveryMethod(val: System_Net_Mail_SmtpDeliveryMethod_get_SpecifiedPickupDirectory());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpDeliveryMethod PickupDirectoryFromIis
    /**
    Email is copied to the pickup directory used by a local Internet Information Services (IIS) for delivery.

    */
    public static var PickupDirectoryFromIis : dotnet.System.Net.Mail.SmtpDeliveryMethod {
        get {
        let __return = dotnet.System.Net.Mail.SmtpDeliveryMethod(val: System_Net_Mail_SmtpDeliveryMethod_get_PickupDirectoryFromIis());
            return __return;
        }
    }
} // SmtpDeliveryMethod


// type: System.Net.Mail.SmtpException
    /**
    Represents the exception that is thrown when the  is not able to complete a  or  operation.

    */
open class SmtpException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_SmtpException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Mail.SmtpException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Mail.SmtpStatusCode)
// docid: M:System.Net.Mail.SmtpException.#ctor(System.Net.Mail.SmtpStatusCode)
    /**
    Initializes a new instance of the  class with the specified status code.

    - Parameter statusCode: An  value.
    */
    public init(statusCode : dotnet.System.Net.Mail.SmtpStatusCode) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpException_ctor_0__1__SmtpStatusCode(&__thrown, statusCode.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Mail.SmtpStatusCode, System.String)
// docid: M:System.Net.Mail.SmtpException.#ctor(System.Net.Mail.SmtpStatusCode,System.String)
    /**
    Initializes a new instance of the  class with the specified status code and error message.

    - Parameter statusCode: An  value.
    - Parameter message: A  that describes the error that occurred.
    */
    public init(statusCode : dotnet.System.Net.Mail.SmtpStatusCode, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpException_ctor_0__2__SmtpStatusCode_String(&__thrown, statusCode.get_value(), message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mail.SmtpException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified error message.

    - Parameter message: A  that describes the error that occurred.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Net.Mail.SmtpException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified error message and inner exception.

    - Parameter message: A  that describes the error that occurred.
    - Parameter innerException: The exception that is the cause of the current exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Net.Mail.SmtpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates a  instance with the data needed to serialize the .

    - Parameter serializationInfo: The  to populate with data.
    - Parameter streamingContext: A  that specifies the destination for this serialization.
    */
    open func GetObjectData(serializationInfo : dotnet.System.Runtime.Serialization.SerializationInfo, streamingContext : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), serializationInfo.get_handle(), streamingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.SmtpStatusCode get_StatusCode()
// docid: M:System.Net.Mail.SmtpException.get_StatusCode
    open func get_StatusCode() throws -> dotnet.System.Net.Mail.SmtpStatusCode {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpException_SmtpStatusCode__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Mail.SmtpStatusCode(val: __return);
        }
    }
    // [IsSpecialName] void set_StatusCode(System.Net.Mail.SmtpStatusCode)
// docid: M:System.Net.Mail.SmtpException.set_StatusCode(System.Net.Mail.SmtpStatusCode)
    open func set_StatusCode(value : dotnet.System.Net.Mail.SmtpStatusCode) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpException_void__set_StatusCode_0__1__SmtpStatusCode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the status code returned by an SMTP server when an email message is transmitted.

    */
    open var StatusCode : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
            return try! get_StatusCode();
        }
        set(v) {
            return try! set_StatusCode(value: v);
        }
    }
} // SmtpException


// type: System.Net.Mail.SmtpFailedRecipientException
    /**
    Represents the exception that is thrown when the  is not able to complete a  or  operation to a particular recipient.

    */
open class SmtpFailedRecipientException
    :
    dotnet.System.Net.Mail.SmtpException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_SmtpFailedRecipientException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Mail.SmtpFailedRecipientException.#ctor
    /**
    Initializes an empty instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Mail.SmtpStatusCode, System.String)
// docid: M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Net.Mail.SmtpStatusCode,System.String)
    /**
    Initializes a new instance of the  class with the specified status code and email address.

    - Parameter statusCode: An  value.
    - Parameter failedRecipient: A  that contains the email address.
    */
    public init(statusCode : dotnet.System.Net.Mail.SmtpStatusCode, failedRecipient : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientException_ctor_0__2__SmtpStatusCode_String(&__thrown, statusCode.get_value(), failedRecipient?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Net.Mail.SmtpStatusCode, System.String, System.String)
// docid: M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Net.Mail.SmtpStatusCode,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified status code, email address, and server response.

    - Parameter statusCode: An  value.
    - Parameter failedRecipient: A  that contains the email address.
    - Parameter serverResponse: A  that contains the server response.
    */
    public init(statusCode : dotnet.System.Net.Mail.SmtpStatusCode, failedRecipient : Optional<dotnet.System.String>, serverResponse : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientException_ctor_0__3__SmtpStatusCode_String_String(&__thrown, statusCode.get_value(), failedRecipient?.get_handle() ?? nil, serverResponse?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified error message.

    - Parameter message: A  that contains the error message.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified error message and inner exception.

    - Parameter message: A  that describes the error that occurred.
    - Parameter innerException: The exception that is the cause of the current exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Exception)
// docid: M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String,System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified error message, email address, and inner exception.

    - Parameter message: A  that describes the error that occurred.
    - Parameter failedRecipient: A  that contains the email address.
    - Parameter innerException: The exception that is the cause of the current exception.
    */
    public init(message : Optional<dotnet.System.String>, failedRecipient : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientException_ctor_0__3__String_String_Exception(&__thrown, message?.get_handle() ?? nil, failedRecipient?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Net.Mail.SmtpFailedRecipientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates a  instance with the data that is needed to serialize the .

    - Parameter serializationInfo: The  to populate with data.
    - Parameter streamingContext: A  that specifies the destination for this serialization.
    */
    open override func GetObjectData(serializationInfo : dotnet.System.Runtime.Serialization.SerializationInfo, streamingContext : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpFailedRecipientException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), serializationInfo.get_handle(), streamingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FailedRecipient()
// docid: M:System.Net.Mail.SmtpFailedRecipientException.get_FailedRecipient
    open func get_FailedRecipient() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpFailedRecipientException_String__get_FailedRecipient_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Indicates the email address with delivery difficulties.

    */
    open var FailedRecipient : Optional<dotnet.System.String> {
        get {
            return try! get_FailedRecipient();
        }
    }
} // SmtpFailedRecipientException


// type: System.Net.Mail.SmtpFailedRecipientsException
    /**
    The exception that is thrown when email is sent using an  and cannot be delivered to all recipients.

    */
open class SmtpFailedRecipientsException
    :
    dotnet.System.Net.Mail.SmtpFailedRecipientException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mail_SmtpFailedRecipientsException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Mail.SmtpFailedRecipientsException.#ctor
    /**
    Initializes an empty instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientsException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified .

    - Parameter message: The exception message.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientsException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified  and inner .

    - Parameter message: The exception message.
    - Parameter innerException: The inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientsException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Net.Mail.SmtpFailedRecipientException[])
// docid: M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Net.Mail.SmtpFailedRecipientException[])
    /**
    Initializes a new instance of the  class with the specified  and array of type .

    - Parameter message: The exception message.
    - Parameter innerExceptions: The array of recipients with delivery errors.
    */
    public init(message : Optional<dotnet.System.String>, innerExceptions : dotnet.System_Arr<dotnet.System.Net.Mail.SmtpFailedRecipientException>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mail_SmtpFailedRecipientsException_ctor_0__2__String_SmtpFailedRecipientExceptionArray(&__thrown, message?.get_handle() ?? nil, innerExceptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Net.Mail.SmtpFailedRecipientsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates a  instance with the data that is needed to serialize the .

    - Parameter serializationInfo: The  to be used.
    - Parameter streamingContext: The  to be used.
    */
    open override func GetObjectData(serializationInfo : dotnet.System.Runtime.Serialization.SerializationInfo, streamingContext : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mail_SmtpFailedRecipientsException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), serializationInfo.get_handle(), streamingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Mail.SmtpFailedRecipientException[] get_InnerExceptions()
// docid: M:System.Net.Mail.SmtpFailedRecipientsException.get_InnerExceptions
    open func get_InnerExceptions() throws -> dotnet.System_Arr<dotnet.System.Net.Mail.SmtpFailedRecipientException> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mail_SmtpFailedRecipientsException_SmtpFailedRecipientExceptionArray__get_InnerExceptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Net.Mail.SmtpFailedRecipientException>(hndl : __return);
        }
    }
    /**
    Gets one or more s that indicate the email recipients with SMTP delivery errors.

    */
    open var InnerExceptions : dotnet.System_Arr<dotnet.System.Net.Mail.SmtpFailedRecipientException> {
        get {
            return try! get_InnerExceptions();
        }
    }
} // SmtpFailedRecipientsException


// type: System.Net.Mail.SmtpStatusCode
    /**
    Specifies the outcome of sending email by using the  class.

    */
public struct SmtpStatusCode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Mail_SmtpStatusCode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Mail.SmtpStatusCode GeneralFailure
    /**
    The transaction could not occur. You receive this error when the specified SMTP host cannot be found.

    */
    public static var GeneralFailure : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_GeneralFailure());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode SystemStatus
    /**
    A system status or system Help reply.

    */
    public static var SystemStatus : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_SystemStatus());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode HelpMessage
    /**
    A Help message was returned by the service.

    */
    public static var HelpMessage : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_HelpMessage());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode ServiceReady
    /**
    The SMTP service is ready.

    */
    public static var ServiceReady : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_ServiceReady());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode ServiceClosingTransmissionChannel
    /**
    The SMTP service is closing the transmission channel.

    */
    public static var ServiceClosingTransmissionChannel : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_ServiceClosingTransmissionChannel());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode Ok
    /**
    The email was successfully sent to the SMTP service.

    */
    public static var Ok : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_Ok());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode UserNotLocalWillForward
    /**
    The user mailbox is not located on the receiving server; the server forwards the email.

    */
    public static var UserNotLocalWillForward : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_UserNotLocalWillForward());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode CannotVerifyUserWillAttemptDelivery
    /**
    The specified user is not local, but the receiving SMTP service accepted the message and attempted to deliver it. This status code is defined in RFC 1123, which is available at https://www.ietf.org.

    */
    public static var CannotVerifyUserWillAttemptDelivery : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_CannotVerifyUserWillAttemptDelivery());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode StartMailInput
    /**
    The SMTP service is ready to receive the email content.

    */
    public static var StartMailInput : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_StartMailInput());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode ServiceNotAvailable
    /**
    The SMTP service is not available; the server is closing the transmission channel.

    */
    public static var ServiceNotAvailable : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_ServiceNotAvailable());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode MailboxBusy
    /**
    The destination mailbox is in use.

    */
    public static var MailboxBusy : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_MailboxBusy());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode LocalErrorInProcessing
    /**
    The SMTP service cannot complete the request. This error can occur if the client's IP address cannot be resolved (that is, a reverse lookup failed). You can also receive this error if the client domain has been identified as an open relay or source for unsolicited email (spam). For details, see RFC 2505, which is available at https://www.ietf.org.

    */
    public static var LocalErrorInProcessing : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_LocalErrorInProcessing());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode InsufficientStorage
    /**
    The SMTP service does not have sufficient storage to complete the request.

    */
    public static var InsufficientStorage : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_InsufficientStorage());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode ClientNotPermitted
    /**
    The client was not authenticated or is not allowed to send mail using the specified SMTP host.

    */
    public static var ClientNotPermitted : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_ClientNotPermitted());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode CommandUnrecognized
    /**
    The SMTP service does not recognize the specified command.

    */
    public static var CommandUnrecognized : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_CommandUnrecognized());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode SyntaxError
    /**
    The syntax used to specify a command or parameter is incorrect.

    */
    public static var SyntaxError : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_SyntaxError());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode CommandNotImplemented
    /**
    The SMTP service does not implement the specified command.

    */
    public static var CommandNotImplemented : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_CommandNotImplemented());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode BadCommandSequence
    /**
    The commands were sent in the incorrect sequence.

    */
    public static var BadCommandSequence : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_BadCommandSequence());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode CommandParameterNotImplemented
    /**
    The SMTP service does not implement the specified command parameter.

    */
    public static var CommandParameterNotImplemented : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_CommandParameterNotImplemented());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode MustIssueStartTlsFirst
    /**
    The SMTP server is configured to accept only TLS connections, and the SMTP client is attempting to connect by using a non-TLS connection. The solution is for the user to set EnableSsl=true on the SMTP Client.

    */
    public static var MustIssueStartTlsFirst : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_MustIssueStartTlsFirst());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode MailboxUnavailable
    /**
    The destination mailbox was not found or could not be accessed.

    */
    public static var MailboxUnavailable : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_MailboxUnavailable());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode UserNotLocalTryAlternatePath
    /**
    The user mailbox is not located on the receiving server. You should resend using the supplied address information.

    */
    public static var UserNotLocalTryAlternatePath : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_UserNotLocalTryAlternatePath());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode ExceededStorageAllocation
    /**
    The message is too large to be stored in the destination mailbox.

    */
    public static var ExceededStorageAllocation : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_ExceededStorageAllocation());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode MailboxNameNotAllowed
    /**
    The syntax used to specify the destination mailbox is incorrect.

    */
    public static var MailboxNameNotAllowed : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_MailboxNameNotAllowed());
            return __return;
        }
    }
    // static field: System.Net.Mail.SmtpStatusCode TransactionFailed
    /**
    The transaction failed.

    */
    public static var TransactionFailed : dotnet.System.Net.Mail.SmtpStatusCode {
        get {
        let __return = dotnet.System.Net.Mail.SmtpStatusCode(val: System_Net_Mail_SmtpStatusCode_get_TransactionFailed());
            return __return;
        }
    }
} // SmtpStatusCode


}

// System.Net.Mime
extension System.Net.Mime {
// type: System.Net.Mime.ContentDisposition
    /**
    Represents a MIME protocol Content-Disposition header.

    */
open class ContentDisposition
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mime_ContentDisposition_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Mime.ContentDisposition.#ctor
    /**
    Initializes a new instance of the  class with a  of .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mime_ContentDisposition_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mime.ContentDisposition.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified disposition information.

    - Parameter disposition: A  value that contains the disposition.
    */
    public init(disposition : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mime_ContentDisposition_ctor_0__1__String(&__thrown, disposition.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Mime.ContentDisposition.Equals(System.Object)
    /**
    Determines whether the content-disposition header of the specified  object is equal to the content-disposition header of this object.

    - Parameter rparam: The  object to compare with this object.
    - Returns: 
         if the content-disposition headers are the same; otherwise .

    */
    open func Equals(rparam : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_bool__Equals_0__1__Object(&__thrown, self.get_handle(), rparam?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Mime.ContentDisposition.GetHashCode
    /**
    Determines the hash code of the specified  object.

    - Returns: An integer hash value.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Mime.ContentDisposition.ToString
    /**
    Returns a  representation of this instance.

    - Returns: A  that contains the property values for this instance.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTime get_CreationDate()
// docid: M:System.Net.Mime.ContentDisposition.get_CreationDate
    open func get_CreationDate() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_DateTime__get_CreationDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CreationDate(System.DateTime)
// docid: M:System.Net.Mime.ContentDisposition.set_CreationDate(System.DateTime)
    open func set_CreationDate(value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentDisposition_void__set_CreationDate_0__1__DateTime(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_DispositionType()
// docid: M:System.Net.Mime.ContentDisposition.get_DispositionType
    open func get_DispositionType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_String__get_DispositionType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_DispositionType(System.String)
// docid: M:System.Net.Mime.ContentDisposition.set_DispositionType(System.String)
    open func set_DispositionType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentDisposition_void__set_DispositionType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:System.Net.Mime.ContentDisposition.get_FileName
    open func get_FileName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FileName(System.String)
// docid: M:System.Net.Mime.ContentDisposition.set_FileName(System.String)
    open func set_FileName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentDisposition_void__set_FileName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Inline()
// docid: M:System.Net.Mime.ContentDisposition.get_Inline
    open func get_Inline() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_bool__get_Inline_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Inline(bool)
// docid: M:System.Net.Mime.ContentDisposition.set_Inline(System.Boolean)
    open func set_Inline(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentDisposition_void__set_Inline_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.DateTime get_ModificationDate()
// docid: M:System.Net.Mime.ContentDisposition.get_ModificationDate
    open func get_ModificationDate() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_DateTime__get_ModificationDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ModificationDate(System.DateTime)
// docid: M:System.Net.Mime.ContentDisposition.set_ModificationDate(System.DateTime)
    open func set_ModificationDate(value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentDisposition_void__set_ModificationDate_0__1__DateTime(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.StringDictionary get_Parameters()
// docid: M:System.Net.Mime.ContentDisposition.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Specialized.StringDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_StringDictionary__get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTime get_ReadDate()
// docid: M:System.Net.Mime.ContentDisposition.get_ReadDate
    open func get_ReadDate() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_DateTime__get_ReadDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ReadDate(System.DateTime)
// docid: M:System.Net.Mime.ContentDisposition.set_ReadDate(System.DateTime)
    open func set_ReadDate(value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentDisposition_void__set_ReadDate_0__1__DateTime(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_Size()
// docid: M:System.Net.Mime.ContentDisposition.get_Size
    open func get_Size() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentDisposition_i64__get_Size_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Size(System.Int64)
// docid: M:System.Net.Mime.ContentDisposition.set_Size(System.Int64)
    open func set_Size(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentDisposition_void__set_Size_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the creation date for a file attachment.

    */
    open var CreationDate : dotnet.System.DateTime {
        get {
            return try! get_CreationDate();
        }
        set(v) {
            return try! set_CreationDate(value: v);
        }
    }
    /**
    Gets or sets the disposition type for an email attachment.

    */
    open var DispositionType : dotnet.System.String {
        get {
            return try! get_DispositionType();
        }
        set(v) {
            return try! set_DispositionType(value: v);
        }
    }
    /**
    Gets or sets the suggested file name for an email attachment.

    */
    open var FileName : Optional<dotnet.System.String> {
        get {
            return try! get_FileName();
        }
        set(v) {
            return try! set_FileName(value: v!);
        }
    }
    /**
    Gets or sets a  value that determines the disposition type (Inline or Attachment) for an email attachment.

    */
    open var Inline : Bool {
        get {
            return try! get_Inline();
        }
        set(v) {
            return try! set_Inline(value: v);
        }
    }
    /**
    Gets or sets the modification date for a file attachment.

    */
    open var ModificationDate : dotnet.System.DateTime {
        get {
            return try! get_ModificationDate();
        }
        set(v) {
            return try! set_ModificationDate(value: v);
        }
    }
    /**
    Gets the parameters included in the Content-Disposition header represented by this instance.

    */
    open var Parameters : dotnet.System.Collections.Specialized.StringDictionary {
        get {
            return try! get_Parameters();
        }
    }
    /**
    Gets or sets the read date for a file attachment.

    */
    open var ReadDate : dotnet.System.DateTime {
        get {
            return try! get_ReadDate();
        }
        set(v) {
            return try! set_ReadDate(value: v);
        }
    }
    /**
    Gets or sets the size of a file attachment.

    */
    open var Size : Swift.Int64 {
        get {
            return try! get_Size();
        }
        set(v) {
            return try! set_Size(value: v);
        }
    }
} // ContentDisposition


// type: System.Net.Mime.ContentType
    /**
    Represents a MIME protocol Content-Type header.

    */
open class ContentType
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Mime_ContentType_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Mime.ContentType.#ctor
    /**
    Initializes a new default instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mime_ContentType_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.Mime.ContentType.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified string.

    - Parameter contentType: A , for example, "text/plain; charset=us-ascii", that contains the MIME media type, subtype, and optional parameters.
    */
    public init(contentType : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Mime_ContentType_ctor_0__1__String(&__thrown, contentType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Net.Mime.ContentType.Equals(System.Object)
    /**
    Determines whether the content-type header of the specified  object is equal to the content-type header of this object.

    - Parameter rparam: The  object to compare with this object.
    - Returns: 
         if the content-type headers are the same; otherwise .

    */
    open func Equals(rparam : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentType_bool__Equals_0__1__Object(&__thrown, self.get_handle(), rparam?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Net.Mime.ContentType.GetHashCode
    /**
    Determines the hash code of the specified  object.

    - Returns: An integer hash value.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentType_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Net.Mime.ContentType.ToString
    /**
    Returns a string representation of this  object.

    - Returns: A  that contains the current settings for this .

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentType_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Boundary()
// docid: M:System.Net.Mime.ContentType.get_Boundary
    open func get_Boundary() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentType_String__get_Boundary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Boundary(System.String)
// docid: M:System.Net.Mime.ContentType.set_Boundary(System.String)
    open func set_Boundary(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentType_void__set_Boundary_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_CharSet()
// docid: M:System.Net.Mime.ContentType.get_CharSet
    open func get_CharSet() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentType_String__get_CharSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CharSet(System.String)
// docid: M:System.Net.Mime.ContentType.set_CharSet(System.String)
    open func set_CharSet(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentType_void__set_CharSet_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MediaType()
// docid: M:System.Net.Mime.ContentType.get_MediaType
    open func get_MediaType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentType_String__get_MediaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_MediaType(System.String)
// docid: M:System.Net.Mime.ContentType.set_MediaType(System.String)
    open func set_MediaType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentType_void__set_MediaType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Net.Mime.ContentType.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentType_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Net.Mime.ContentType.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Mime_ContentType_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.StringDictionary get_Parameters()
// docid: M:System.Net.Mime.ContentType.get_Parameters
    open func get_Parameters() throws -> dotnet.System.Collections.Specialized.StringDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Mime_ContentType_StringDictionary__get_Parameters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringDictionary(hndl : __return);
        }
    }
    /**
    Gets or sets the value of the boundary parameter included in the Content-Type header represented by this instance.

    */
    open var Boundary : Optional<dotnet.System.String> {
        get {
            return try! get_Boundary();
        }
        set(v) {
            return try! set_Boundary(value: v!);
        }
    }
    /**
    Gets or sets the value of the charset parameter included in the Content-Type header represented by this instance.

    */
    open var CharSet : Optional<dotnet.System.String> {
        get {
            return try! get_CharSet();
        }
        set(v) {
            return try! set_CharSet(value: v!);
        }
    }
    /**
    Gets or sets the media type value included in the Content-Type header represented by this instance.

    */
    open var MediaType : dotnet.System.String {
        get {
            return try! get_MediaType();
        }
        set(v) {
            return try! set_MediaType(value: v);
        }
    }
    /**
    Gets or sets the value of the name parameter included in the Content-Type header represented by this instance.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    Gets the dictionary that contains the parameters included in the Content-Type header represented by this instance.

    */
    open var Parameters : dotnet.System.Collections.Specialized.StringDictionary {
        get {
            return try! get_Parameters();
        }
    }
} // ContentType


// type: System.Net.Mime.DispositionTypeNames
public struct DispositionTypeNames {
    // static field: System.String Attachment
    /**
    Specifies that the attachment is to be displayed as a file attached to the email message.

    */
    public static var Attachment : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_DispositionTypeNames_get_Attachment());
            return __return;
        }
    }
    // static field: System.String Inline
    /**
    Specifies that the attachment is to be displayed as part of the email message body.

    */
    public static var Inline : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_DispositionTypeNames_get_Inline());
            return __return;
        }
    }
} // DispositionTypeNames


// type: System.Net.Mime.MediaTypeNames
public struct MediaTypeNames {
} // MediaTypeNames


// type: System.Net.Mime.MediaTypeNames+Application
public struct MediaTypeNames_Application {
    // static field: System.String Json
    /**
    Specifies that the  data is in JSON format.

    */
    public static var Json : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Application_get_Json());
            return __return;
        }
    }
    // static field: System.String Octet
    /**
    Specifies that the  data is not interpreted.

    */
    public static var Octet : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Application_get_Octet());
            return __return;
        }
    }
    // static field: System.String Pdf
    /**
    Specifies that the  data is in Portable Document Format (PDF).

    */
    public static var Pdf : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Application_get_Pdf());
            return __return;
        }
    }
    // static field: System.String Rtf
    /**
    Specifies that the  data is in Rich Text Format (RTF).

    */
    public static var Rtf : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Application_get_Rtf());
            return __return;
        }
    }
    // static field: System.String Soap
    /**
    Specifies that the  data is a SOAP document.

    */
    public static var Soap : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Application_get_Soap());
            return __return;
        }
    }
    // static field: System.String Xml
    /**
    Specifies that the  data is in XML format.

    */
    public static var Xml : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Application_get_Xml());
            return __return;
        }
    }
    // static field: System.String Zip
    /**
    Specifies that the  data is compressed.

    */
    public static var Zip : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Application_get_Zip());
            return __return;
        }
    }
} // MediaTypeNames_Application


// type: System.Net.Mime.MediaTypeNames+Image
public struct MediaTypeNames_Image {
    // static field: System.String Gif
    /**
    Specifies that the  data is in Graphics Interchange Format (GIF).

    */
    public static var Gif : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Image_get_Gif());
            return __return;
        }
    }
    // static field: System.String Jpeg
    /**
    Specifies that the  data is in Joint Photographic Experts Group (JPEG) format.

    */
    public static var Jpeg : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Image_get_Jpeg());
            return __return;
        }
    }
    // static field: System.String Tiff
    /**
    Specifies that the  data is in Tagged Image File Format (TIFF).

    */
    public static var Tiff : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Image_get_Tiff());
            return __return;
        }
    }
} // MediaTypeNames_Image


// type: System.Net.Mime.MediaTypeNames+Text
public struct MediaTypeNames_Text {
    // static field: System.String Html
    /**
    Specifies that the  data is in HTML format.

    */
    public static var Html : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Text_get_Html());
            return __return;
        }
    }
    // static field: System.String Plain
    /**
    Specifies that the  data is in plain text format.

    */
    public static var Plain : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Text_get_Plain());
            return __return;
        }
    }
    // static field: System.String RichText
    /**
    Specifies that the  data is in Rich Text Format (RTF).

    */
    public static var RichText : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Text_get_RichText());
            return __return;
        }
    }
    // static field: System.String Xml
    /**
    Specifies that the  data is in XML format.

    */
    public static var Xml : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_Mime_MediaTypeNames_Text_get_Xml());
            return __return;
        }
    }
} // MediaTypeNames_Text


// type: System.Net.Mime.TransferEncoding
    /**
    Specifies the Content-Transfer-Encoding header information for an email message attachment.

    */
public struct TransferEncoding : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Mime_TransferEncoding_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Mime.TransferEncoding Unknown
    /**
    Indicates that the transfer encoding is unknown.

    */
    public static var Unknown : dotnet.System.Net.Mime.TransferEncoding {
        get {
        let __return = dotnet.System.Net.Mime.TransferEncoding(val: System_Net_Mime_TransferEncoding_get_Unknown());
            return __return;
        }
    }
    // static field: System.Net.Mime.TransferEncoding QuotedPrintable
    /**
    Encodes data that consists of printable characters in the US-ASCII character set. See RFC 2406 Section 6.7.

    */
    public static var QuotedPrintable : dotnet.System.Net.Mime.TransferEncoding {
        get {
        let __return = dotnet.System.Net.Mime.TransferEncoding(val: System_Net_Mime_TransferEncoding_get_QuotedPrintable());
            return __return;
        }
    }
    // static field: System.Net.Mime.TransferEncoding Base64
    /**
    Encodes stream-based data. See RFC 2406 Section 6.8.

    */
    public static var Base64 : dotnet.System.Net.Mime.TransferEncoding {
        get {
        let __return = dotnet.System.Net.Mime.TransferEncoding(val: System_Net_Mime_TransferEncoding_get_Base64());
            return __return;
        }
    }
    // static field: System.Net.Mime.TransferEncoding SevenBit
    /**
    Used for data that is not encoded. The data is in 7-bit US-ASCII characters with a total line length of no longer than 1000 characters. See RFC2406 Section 2.7.

    */
    public static var SevenBit : dotnet.System.Net.Mime.TransferEncoding {
        get {
        let __return = dotnet.System.Net.Mime.TransferEncoding(val: System_Net_Mime_TransferEncoding_get_SevenBit());
            return __return;
        }
    }
    // static field: System.Net.Mime.TransferEncoding EightBit
    /**
    The data is in 8-bit characters that may represent international characters with a total line length of no longer than 1000 8-bit characters. For more information about this 8-bit MIME transport extension, see IETF RFC 6152.

    */
    public static var EightBit : dotnet.System.Net.Mime.TransferEncoding {
        get {
        let __return = dotnet.System.Net.Mime.TransferEncoding(val: System_Net_Mime_TransferEncoding_get_EightBit());
            return __return;
        }
    }
} // TransferEncoding


}



