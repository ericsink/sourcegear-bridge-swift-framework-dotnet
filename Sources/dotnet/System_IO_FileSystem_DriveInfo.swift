// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.IO
extension System.IO {
// type: System.IO.DriveInfo
    /**
    Provides access to information on a drive.

    */
public final class DriveInfo
    :
    dotnet.System.Object,
    System_Runtime_Serialization_ISerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_IO_DriveInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.IO.DriveInfo.#ctor(System.String)
    /**
    Provides access to information on the specified drive.

    - Parameter driveName: A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z'. A null value is not valid.
    */
    public init(driveName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_DriveInfo_ctor_0__1__String(&__thrown, driveName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.IO.DriveInfo[] GetDrives()
// docid: M:System.IO.DriveInfo.GetDrives
    /**
    Retrieves the drive names of all logical drives on a computer.

    - Returns: An array of type  that represents the logical drives on a computer.

    */
    public class func GetDrives() throws -> dotnet.System_Arr<dotnet.System.IO.DriveInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_DriveInfoArray__GetDrives_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.IO.DriveInfo>(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.IO.DriveInfo.ToString
    /**
    Returns a drive name as a string.

    - Returns: The name of the drive.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_AvailableFreeSpace()
// docid: M:System.IO.DriveInfo.get_AvailableFreeSpace
    public func get_AvailableFreeSpace() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_i64__get_AvailableFreeSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_DriveFormat()
// docid: M:System.IO.DriveInfo.get_DriveFormat
    public func get_DriveFormat() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_String__get_DriveFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.DriveType get_DriveType()
// docid: M:System.IO.DriveInfo.get_DriveType
    public func get_DriveType() throws -> dotnet.System.IO.DriveType {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_DriveType__get_DriveType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.DriveType(val: __return);
        }
    }
    // [IsSpecialName] bool get_IsReady()
// docid: M:System.IO.DriveInfo.get_IsReady
    public func get_IsReady() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_bool__get_IsReady_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.IO.DriveInfo.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.DirectoryInfo get_RootDirectory()
// docid: M:System.IO.DriveInfo.get_RootDirectory
    public func get_RootDirectory() throws -> dotnet.System.IO.DirectoryInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_DirectoryInfo__get_RootDirectory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.DirectoryInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_TotalFreeSpace()
// docid: M:System.IO.DriveInfo.get_TotalFreeSpace
    public func get_TotalFreeSpace() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_i64__get_TotalFreeSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_TotalSize()
// docid: M:System.IO.DriveInfo.get_TotalSize
    public func get_TotalSize() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_i64__get_TotalSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_VolumeLabel()
// docid: M:System.IO.DriveInfo.get_VolumeLabel
    public func get_VolumeLabel() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_DriveInfo_String__get_VolumeLabel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_VolumeLabel(System.String)
// docid: M:System.IO.DriveInfo.set_VolumeLabel(System.String)
    public func set_VolumeLabel(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_IO_DriveInfo_void__set_VolumeLabel_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Indicates the amount of available free space on a drive, in bytes.

    */
    public var AvailableFreeSpace : Swift.Int64 {
        get {
            return try! get_AvailableFreeSpace();
        }
    }
    /**
    Gets the name of the file system, such as NTFS or FAT32.

    */
    public var DriveFormat : dotnet.System.String {
        get {
            return try! get_DriveFormat();
        }
    }
    /**
    Gets the drive type, such as CD-ROM, removable, network, or fixed.

    */
    public var DriveType : dotnet.System.IO.DriveType {
        get {
            return try! get_DriveType();
        }
    }
    /**
    Gets a value that indicates whether a drive is ready.

    */
    public var IsReady : Bool {
        get {
            return try! get_IsReady();
        }
    }
    /**
    Gets the name of a drive, such as C:\.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the root directory of a drive.

    */
    public var RootDirectory : dotnet.System.IO.DirectoryInfo {
        get {
            return try! get_RootDirectory();
        }
    }
    /**
    Gets the total amount of free space available on a drive, in bytes.

    */
    public var TotalFreeSpace : Swift.Int64 {
        get {
            return try! get_TotalFreeSpace();
        }
    }
    /**
    Gets the total size of storage space on a drive, in bytes.

    */
    public var TotalSize : Swift.Int64 {
        get {
            return try! get_TotalSize();
        }
    }
    /**
    Gets or sets the volume label of a drive.

    */
    public var VolumeLabel : dotnet.System.String {
        get {
            return try! get_VolumeLabel();
        }
        set(v) {
            return try! set_VolumeLabel(value: v);
        }
    }
} // DriveInfo


// type: System.IO.DriveNotFoundException
    /**
    The exception that is thrown when trying to access a drive or share that is not available.

    */
open class DriveNotFoundException
    :
    dotnet.System.IO.IOException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_IO_DriveNotFoundException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.IO.DriveNotFoundException.#ctor
    /**
    Initializes a new instance of the  class with its message string set to a system-supplied message and its HRESULT set to COR_E_DIRECTORYNOTFOUND.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_DriveNotFoundException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.IO.DriveNotFoundException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified message string and the HRESULT set to COR_E_DIRECTORYNOTFOUND.

    - Parameter message: A  object that describes the error. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_DriveNotFoundException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.IO.DriveNotFoundException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter innerException: The exception that is the cause of the current exception. If the  parameter is not , the current exception is raised in a  block that handles the inner exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_DriveNotFoundException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DriveNotFoundException


// type: System.IO.DriveType
    /**
    Defines constants for drive types, including CDRom, Fixed, Network, NoRootDirectory, Ram, Removable, and Unknown.

    */
public struct DriveType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_IO_DriveType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.IO.DriveType Unknown
    /**
    The type of drive is unknown.

    */
    public static var Unknown : dotnet.System.IO.DriveType {
        get {
        let __return = dotnet.System.IO.DriveType(val: System_IO_DriveType_get_Unknown());
            return __return;
        }
    }
    // static field: System.IO.DriveType NoRootDirectory
    /**
    The drive does not have a root directory.

    */
    public static var NoRootDirectory : dotnet.System.IO.DriveType {
        get {
        let __return = dotnet.System.IO.DriveType(val: System_IO_DriveType_get_NoRootDirectory());
            return __return;
        }
    }
    // static field: System.IO.DriveType Removable
    /**
    The drive is a removable storage device, such as a USB flash drive.

    */
    public static var Removable : dotnet.System.IO.DriveType {
        get {
        let __return = dotnet.System.IO.DriveType(val: System_IO_DriveType_get_Removable());
            return __return;
        }
    }
    // static field: System.IO.DriveType Fixed
    /**
    The drive is a fixed disk.

    */
    public static var Fixed : dotnet.System.IO.DriveType {
        get {
        let __return = dotnet.System.IO.DriveType(val: System_IO_DriveType_get_Fixed());
            return __return;
        }
    }
    // static field: System.IO.DriveType Network
    /**
    The drive is a network drive.

    */
    public static var Network : dotnet.System.IO.DriveType {
        get {
        let __return = dotnet.System.IO.DriveType(val: System_IO_DriveType_get_Network());
            return __return;
        }
    }
    // static field: System.IO.DriveType CDRom
    /**
    The drive is an optical disc device, such as a CD or DVD-ROM.

    */
    public static var CDRom : dotnet.System.IO.DriveType {
        get {
        let __return = dotnet.System.IO.DriveType(val: System_IO_DriveType_get_CDRom());
            return __return;
        }
    }
    // static field: System.IO.DriveType Ram
    /**
    The drive is a RAM disk.

    */
    public static var Ram : dotnet.System.IO.DriveType {
        get {
        let __return = dotnet.System.IO.DriveType(val: System_IO_DriveType_get_Ram());
            return __return;
        }
    }
} // DriveType


}


