// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

extension Swift.UInt64 : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_UInt64_get_type_handle(); }
    public func to_gval() -> GVal { return self; }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(gval); }
}

extension Swift.UInt32 : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_UInt32_get_type_handle(); }
    public func to_gval() -> GVal { return GVal(self); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(Swift.UInt32(truncatingIfNeeded: gval)); }
}

extension Swift.UInt16 : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_UInt16_get_type_handle(); }
    public func to_gval() -> GVal { return GVal(self); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(Swift.UInt16(truncatingIfNeeded: gval)); }
}

extension Swift.UInt8 : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_Byte_get_type_handle(); }
    public func to_gval() -> GVal { return GVal(self); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(Swift.UInt8(truncatingIfNeeded: gval)); }
}

extension Swift.Int64 : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_Int64_get_type_handle(); }
    public func to_gval() -> GVal { return GVal(bitPattern: self); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(bitPattern: gval); }
}

// signed types < 64 bits are zero extended.  in other
// words, use bitPattern to switch between the signed
// and unsigned of the same size, and then zero-extend
// or truncate.
extension Swift.Int32 : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_Int32_get_type_handle(); }
    public func to_gval() -> GVal { return GVal(Swift.UInt32(bitPattern: self)); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(Swift.Int32(bitPattern: Swift.UInt32(truncatingIfNeeded: gval))); }
}

extension Swift.Int16 : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_Int16_get_type_handle(); }
    public func to_gval() -> GVal { return GVal(Swift.UInt16(bitPattern: self)); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(Swift.Int16(bitPattern: Swift.UInt16(truncatingIfNeeded: gval))); }
}

extension Swift.Int8 : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_SByte_get_type_handle(); }
    public func to_gval() -> GVal { return GVal(Swift.UInt8(bitPattern: self)); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(Swift.Int8(bitPattern: Swift.UInt8(truncatingIfNeeded: gval))); }
}

extension Swift.Bool : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_Boolean_get_type_handle(); }
    public func to_gval() -> GVal { return self ? 1 : 0; }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(gval == 0 ? true : false); }
}

extension Swift.Float : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_Single_get_type_handle(); }
    public func to_gval() -> GVal { return GVal(self.bitPattern); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(bitPattern: Swift.UInt32(truncatingIfNeeded: gval)); }
}

extension Swift.Double : SGBridgeGenericValue {
    public static func get_type_handle() -> TypeHandle { return System_Double_get_type_handle(); }
    public func to_gval() -> GVal { return self.bitPattern; }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.init(bitPattern: gval); }
}

