// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Collections
// System.Collections.ObjectModel
extension System.Collections.ObjectModel {
// type: System.Collections.ObjectModel.KeyedCollection`2
    /**
    Provides the abstract base class for a collection whose keys are embedded in the values.

    */
open class KeyedCollection_2<TKey : SGBridgeGenericValue,TItem : SGBridgeGenericValue>
    :
    dotnet.System.Collections.ObjectModel.Collection_1<TItem>
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_ObjectModel_KeyedCollection_2_get_type_handle(TKey.get_type_handle(),TItem.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Contains(TKey)
// docid: M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
    /**
    Determines whether the collection contains an element with the specified key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the  contains an element with the specified key; otherwise, .

    */
    open func Contains(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_KeyedCollection_2_bool__Contains_0__1__TKey(TKey.get_type_handle(), TItem.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(TKey)
// docid: M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
    /**
    Removes the element with the specified key from the .

    - Parameter key: The key of the element to remove.
    - Returns: 
         if the element is successfully removed; otherwise, .  This method also returns  if  is not found in the .

    */
    open func Remove(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_KeyedCollection_2_bool__Remove_0__1__TKey(TKey.get_type_handle(), TItem.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValue(TKey, ref TItem)
// docid: M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)
    /**
    Tries to get an item from the collection using the specified key.

    - Parameter key: The key of the item to search in the collection.
    - Parameter item: When this method returns , the item from the collection that matches the provided key; when this method returns , the  value for the type of the collection.
    - Returns: 
         if an item for the specified key was found in the collection; otherwise, .

    */
    open func TryGetValue(key : TKey, item : inout TItem) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Collections_ObjectModel_KeyedCollection_2_bool__TryGetValue_0__2__TKey_outTItem(TKey.get_type_handle(), TItem.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_item);
            let _tmp2_item = TItem(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEqualityComparer<TKey> get_Comparer()
// docid: M:System.Collections.ObjectModel.KeyedCollection`2.get_Comparer
    open func get_Comparer() throws -> dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_KeyedCollection_2_System_Collections_Generic_IEqualityComparer_TKey___get_Comparer_0__0(TKey.get_type_handle(), TItem.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEqualityComparer_1(hndl : __return);
        }
    }
    // [IsSpecialName] TItem get_Item(TKey)
// docid: M:System.Collections.ObjectModel.KeyedCollection`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : TKey) throws -> TItem {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_KeyedCollection_2_TItem__get_Item_0__1__TKey(TKey.get_type_handle(), TItem.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TItem(gval: __return);
        }
    }
    /**
    Gets the generic equality comparer that is used to determine equality of keys in the collection.

    */
    open var Comparer : dotnet.System.Collections.Generic.IEqualityComparer_1<TKey> {
        get {
            return try! get_Comparer();
        }
    }
} // KeyedCollection_2


// type: System.Collections.ObjectModel.ObservableCollection`1
    /**
    Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.

    */
open class ObservableCollection_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Collections.ObjectModel.Collection_1<T>,
    System_Collections_Specialized_INotifyCollectionChanged,
    System_ComponentModel_INotifyPropertyChanged
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_ObjectModel_ObservableCollection_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.ObjectModel.ObservableCollection`1.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_ObjectModel_ObservableCollection_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection.

    - Parameter collection: The collection from which the elements are copied.
    */
    public init(collection : dotnet.System.Collections.Generic.IEnumerable_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_ObjectModel_ObservableCollection_1_ctor_0__1__System_Collections_Generic_IEnumerable_T_(T.get_type_handle(), &__thrown, collection.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.List<T>)
// docid: M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})
    /**
    Initializes a new instance of the  class that contains elements copied from the specified list.

    - Parameter list: The list from which the elements are copied.
    */
    public init(list : dotnet.System.Collections.Generic.List_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_ObjectModel_ObservableCollection_1_ctor_0__1__System_Collections_Generic_List_T_(T.get_type_handle(), &__thrown, list.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Move(System.Int32, System.Int32)
// docid: M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)
    /**
    Moves the item at the specified index to a new location in the collection.

    - Parameter oldIndex: The zero-based index specifying the location of the item to be moved.
    - Parameter newIndex: The zero-based index specifying the new location of the item.
    */
    open func Move(oldIndex : Swift.Int32, newIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_ObjectModel_ObservableCollection_1_void__Move_0__2__i32_i32(T.get_type_handle(), &__thrown, self.get_handle(), oldIndex, newIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)
// docid: M:System.Collections.ObjectModel.ObservableCollection`1.add_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)
    open func add_CollectionChanged(value : Optional<dotnet.System.Collections.Specialized.NotifyCollectionChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_ObjectModel_ObservableCollection_1_void__add_CollectionChanged_0__1__NotifyCollectionChangedEventHandler(T.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Collections.Specialized.NotifyCollectionChangedEventHandler(value);
        return try add_CollectionChanged(value: del_value);
    }
    // [IsSpecialName] void remove_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)
// docid: M:System.Collections.ObjectModel.ObservableCollection`1.remove_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)
    open func remove_CollectionChanged(value : Optional<dotnet.System.Collections.Specialized.NotifyCollectionChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_ObjectModel_ObservableCollection_1_void__remove_CollectionChanged_0__1__NotifyCollectionChangedEventHandler(T.get_type_handle(), &__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Collections.Specialized.NotifyCollectionChangedEventHandler(value);
        return try remove_CollectionChanged(value: del_value);
    }
} // ObservableCollection_1


// type: System.Collections.ObjectModel.ReadOnlyDictionary`2
    /**
    Represents a read-only, generic collection of key/value pairs.

    */
open class ReadOnlyDictionary_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection,
    System_Collections_IDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_ObjectModel_ReadOnlyDictionary_2_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IDictionary<TKey,TValue>)
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
    /**
    Initializes a new instance of the  class that is a wrapper around the specified dictionary.

    - Parameter dictionary: The dictionary to wrap.
    */
    public init(dictionary : dotnet.System.Collections.Generic.IDictionary_2<TKey,TValue>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_ObjectModel_ReadOnlyDictionary_2_ctor_0__1__System_Collections_Generic_IDictionary_TKey_TValue_(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, dictionary.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ContainsKey(TKey)
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)
    /**
    Determines whether the dictionary contains an element that has the specified key.

    - Parameter key: The key to locate in the dictionary.
    - Returns: 
         if the dictionary contains an element that has the specified key; otherwise, .

    */
    open /* method final */ func ContainsKey(key : TKey) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_bool__ContainsKey_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator()
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An enumerator that can be used to iterate through the collection.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<TKey,TValue>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_TKey_TValue____GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool TryGetValue(TKey, ref TValue)
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)
    /**
    Retrieves the value that is associated with the specified key.

    - Parameter key: The key whose value will be retrieved.
    - Parameter value: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the  parameter. This parameter is passed uninitialized.
    - Returns: 
         if the object that implements  contains an element with the specified key; otherwise, .

    */
    open /* method final */ func TryGetValue(key : TKey, value : inout TValue) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.to_gval();
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_bool__TryGetValue_0__2__TKey_outTValue(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval(), &_tmp_out_value);
            let _tmp2_value = TValue(gval: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>.KeyCollection get_Keys()
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyDictionary_KeyCollection_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_System_Collections_ObjectModel_ReadOnlyDictionary_TKey_TValue__System_Collections_ObjectModel_KeyCollection_TKey_TValue___get_Keys_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyDictionary_KeyCollection_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>.ValueCollection get_Values()
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.get_Values
    open func get_Values() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyDictionary_ValueCollection_2<TKey,TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_System_Collections_ObjectModel_ReadOnlyDictionary_TKey_TValue__System_Collections_ObjectModel_ValueCollection_TKey_TValue___get_Values_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyDictionary_ValueCollection_2(hndl : __return);
        }
    }
    // [IsSpecialName] TValue get_Item(TKey)
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.get_Item(`0)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : TKey) throws -> TValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_TValue__get_Item_0__1__TKey(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), key.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TValue(gval: __return);
        }
    }
    /**
    Gets the number of items in the dictionary.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a key collection that contains the keys of the dictionary.

    */
    open var Keys : dotnet.System.Collections.ObjectModel.ReadOnlyDictionary_KeyCollection_2<TKey,TValue> {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets a collection that contains the values in the dictionary.

    */
    open var Values : dotnet.System.Collections.ObjectModel.ReadOnlyDictionary_ValueCollection_2<TKey,TValue> {
        get {
            return try! get_Values();
        }
    }
} // ReadOnlyDictionary_2


// type: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection
    /**
    Represents a read-only collection of the keys of a  object.

    */
public final class ReadOnlyDictionary_KeyCollection_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_ObjectModel_ReadOnlyDictionary_2_KeyCollection_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void CopyTo(TKey[], System.Int32)
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(System.Collections.ObjectModel.TKey[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<TKey>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_ObjectModel_ReadOnlyDictionary_2_KeyCollection_void__CopyTo_0__2__TKeyArray_i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<TKey> GetEnumerator()
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator
    /**
    Returns an enumerator that iterates through the collection.

    - Returns: An enumerator that can be used to iterate through the collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<TKey> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_KeyCollection_System_Collections_Generic_IEnumerator_TKey___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_KeyCollection_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements in the collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // ReadOnlyDictionary_KeyCollection_2


// type: System.Collections.ObjectModel.ReadOnlyDictionary`2+ValueCollection
    /**
    Represents a read-only collection of the values of a  object.

    */
public final class ReadOnlyDictionary_ValueCollection_2<TKey : SGBridgeGenericValue,TValue : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_ICollection
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_ObjectModel_ReadOnlyDictionary_2_ValueCollection_get_type_handle(TKey.get_type_handle(),TValue.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void CopyTo(TValue[], System.Int32)
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(System.Collections.ObjectModel.TValue[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<TValue>, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_ObjectModel_ReadOnlyDictionary_2_ValueCollection_void__CopyTo_0__2__TValueArray_i32(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<TValue> GetEnumerator()
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator
    /**
    Returns an enumerator that iterates through the collection.

    - Returns: An enumerator that can be used to iterate through the collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<TValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_ValueCollection_System_Collections_Generic_IEnumerator_TValue___GetEnumerator_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ObjectModel_ReadOnlyDictionary_2_ValueCollection_i32__get_Count_0__0(TKey.get_type_handle(), TValue.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements in the collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // ReadOnlyDictionary_ValueCollection_2


// type: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    /**
    Represents a read-only .

    */
open class ReadOnlyObservableCollection_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<T>,
    System_Collections_Specialized_INotifyCollectionChanged,
    System_ComponentModel_INotifyPropertyChanged
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_ObjectModel_ReadOnlyObservableCollection_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.ObjectModel.ObservableCollection<T>)
// docid: M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})
    /**
    Initializes a new instance of the  class that serves as a wrapper around the specified .

    - Parameter list: The  with which to create this instance of the  class.
    */
    public init(list : dotnet.System.Collections.ObjectModel.ObservableCollection_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_ObjectModel_ReadOnlyObservableCollection_1_ctor_0__1__System_Collections_ObjectModel_ObservableCollection_T_(T.get_type_handle(), &__thrown, list.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ReadOnlyObservableCollection_1


}

// System.Collections.Specialized
extension System.Collections.Specialized {
// type: System.Collections.Specialized.INotifyCollectionChanged
    /**
    Notifies listeners of dynamic changes, such as when an item is added and removed or the whole list is cleared.

    */
open class INotifyCollectionChanged
    :
    SGBridgeGenericValue,
    System_Collections_Specialized_INotifyCollectionChanged
{
    open class func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_INotifyCollectionChanged_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] void add_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)
// docid: M:System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)
    open func add_CollectionChanged(value : Optional<dotnet.System.Collections.Specialized.NotifyCollectionChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_INotifyCollectionChanged_void__add_CollectionChanged_0__1__NotifyCollectionChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Collections.Specialized.NotifyCollectionChangedEventHandler(value);
        return try add_CollectionChanged(value: del_value);
    }
    // [IsSpecialName] void remove_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)
// docid: M:System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)
    open func remove_CollectionChanged(value : Optional<dotnet.System.Collections.Specialized.NotifyCollectionChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_INotifyCollectionChanged_void__remove_CollectionChanged_0__1__NotifyCollectionChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_CollectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Collections.Specialized.NotifyCollectionChangedEventHandler(value);
        return try remove_CollectionChanged(value: del_value);
    }
} // INotifyCollectionChanged


// type: System.Collections.Specialized.NotifyCollectionChangedAction
    /**
    Describes the action that caused a  event.

    */
public struct NotifyCollectionChangedAction : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_NotifyCollectionChangedAction_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Collections.Specialized.NotifyCollectionChangedAction Add
    /**
    An item was added to the collection.

    */
    public static var Add : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction {
        get {
        let __return = dotnet.System.Collections.Specialized.NotifyCollectionChangedAction(val: System_Collections_Specialized_NotifyCollectionChangedAction_get_Add());
            return __return;
        }
    }
    // static field: System.Collections.Specialized.NotifyCollectionChangedAction Remove
    /**
    An item was removed from the collection.

    */
    public static var Remove : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction {
        get {
        let __return = dotnet.System.Collections.Specialized.NotifyCollectionChangedAction(val: System_Collections_Specialized_NotifyCollectionChangedAction_get_Remove());
            return __return;
        }
    }
    // static field: System.Collections.Specialized.NotifyCollectionChangedAction Replace
    /**
    An item was replaced in the collection.

    */
    public static var Replace : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction {
        get {
        let __return = dotnet.System.Collections.Specialized.NotifyCollectionChangedAction(val: System_Collections_Specialized_NotifyCollectionChangedAction_get_Replace());
            return __return;
        }
    }
    // static field: System.Collections.Specialized.NotifyCollectionChangedAction Move
    /**
    An item was moved within the collection.

    */
    public static var Move : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction {
        get {
        let __return = dotnet.System.Collections.Specialized.NotifyCollectionChangedAction(val: System_Collections_Specialized_NotifyCollectionChangedAction_get_Move());
            return __return;
        }
    }
    // static field: System.Collections.Specialized.NotifyCollectionChangedAction Reset
    /**
    The contents of the collection changed dramatically.

    */
    public static var Reset : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction {
        get {
        let __return = dotnet.System.Collections.Specialized.NotifyCollectionChangedAction(val: System_Collections_Specialized_NotifyCollectionChangedAction_get_Reset());
            return __return;
        }
    }
} // NotifyCollectionChangedAction


// type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    /**
    Provides data for the  event.

    */
open class NotifyCollectionChangedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_NotifyCollectionChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)
    /**
    Initializes a new instance of the  class that describes a  change.

    - Parameter action: The action that caused the event. This must be set to .
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__1__NotifyCollectionChangedAction(&__thrown, action.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)
    /**
    Initializes a new instance of the  class that describes a multi-item change.

    - Parameter action: The action that caused the event. This can be set to , , or .
    - Parameter changedItems: The items that are affected by the change.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, changedItems : Optional<dotnet.System.Collections.IList>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__2__NotifyCollectionChangedAction_IList(&__thrown, action.get_value(), changedItems?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)
    /**
    Initializes a new instance of the  class that describes a multi-item  change.

    - Parameter action: The action that caused the event. This can only be set to .
    - Parameter newItems: The new items that are replacing the original items.
    - Parameter oldItems: The original items that are replaced.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, newItems : dotnet.System.Collections.IList, oldItems : dotnet.System.Collections.IList) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__3__NotifyCollectionChangedAction_IList_IList(&__thrown, action.get_value(), newItems.get_handle(), oldItems.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList, System.Int32)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)
    /**
    Initializes a new instance of the  class that describes a multi-item  change.

    - Parameter action: The action that caused the event. This can only be set to .
    - Parameter newItems: The new items that are replacing the original items.
    - Parameter oldItems: The original items that are replaced.
    - Parameter startingIndex: The index of the first item of the items that are being replaced.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, newItems : dotnet.System.Collections.IList, oldItems : dotnet.System.Collections.IList, startingIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__4__NotifyCollectionChangedAction_IList_IList_i32(&__thrown, action.get_value(), newItems.get_handle(), oldItems.get_handle(), startingIndex);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Int32)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)
    /**
    Initializes a new instance of the  class that describes a multi-item change or a  change.

    - Parameter action: The action that caused the event. This can be set to , , or .
    - Parameter changedItems: The items affected by the change.
    - Parameter startingIndex: The index where the change occurred.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, changedItems : Optional<dotnet.System.Collections.IList>, startingIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__3__NotifyCollectionChangedAction_IList_i32(&__thrown, action.get_value(), changedItems?.get_handle() ?? nil, startingIndex);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Int32, System.Int32)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class that describes a multi-item  change.

    - Parameter action: The action that caused the event. This can only be set to .
    - Parameter changedItems: The items affected by the change.
    - Parameter index: The new index for the changed items.
    - Parameter oldIndex: The old index for the changed items.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, changedItems : Optional<dotnet.System.Collections.IList>, index : Swift.Int32, oldIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__4__NotifyCollectionChangedAction_IList_i32_i32(&__thrown, action.get_value(), changedItems?.get_handle() ?? nil, index, oldIndex);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)
    /**
    Initializes a new instance of the  class that describes a one-item change.

    - Parameter action: The action that caused the event. This can be set to , , or .
    - Parameter changedItem: The item that is affected by the change.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, changedItem : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__2__NotifyCollectionChangedAction_Object(&__thrown, action.get_value(), changedItem?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)
    /**
    Initializes a new instance of the  class that describes a one-item change.

    - Parameter action: The action that caused the event. This can be set to , , or .
    - Parameter changedItem: The item that is affected by the change.
    - Parameter index: The index where the change occurred.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, changedItem : Optional<dotnet.System.Object>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__3__NotifyCollectionChangedAction_Object_i32(&__thrown, action.get_value(), changedItem?.get_handle() ?? nil, index);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32, System.Int32)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class that describes a one-item  change.

    - Parameter action: The action that caused the event. This can only be set to .
    - Parameter changedItem: The item affected by the change.
    - Parameter index: The new index for the changed item.
    - Parameter oldIndex: The old index for the changed item.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, changedItem : Optional<dotnet.System.Object>, index : Swift.Int32, oldIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__4__NotifyCollectionChangedAction_Object_i32_i32(&__thrown, action.get_value(), changedItem?.get_handle() ?? nil, index, oldIndex);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)
    /**
    Initializes a new instance of the  class that describes a one-item  change.

    - Parameter action: The action that caused the event. This can only be set to .
    - Parameter newItem: The new item that is replacing the original item.
    - Parameter oldItem: The original item that is replaced.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, newItem : Optional<dotnet.System.Object>, oldItem : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__3__NotifyCollectionChangedAction_Object_Object(&__thrown, action.get_value(), newItem?.get_handle() ?? nil, oldItem?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object, System.Int32)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)
    /**
    Initializes a new instance of the  class that describes a one-item  change.

    - Parameter action: The action that caused the event. This can be set to .
    - Parameter newItem: The new item that is replacing the original item.
    - Parameter oldItem: The original item that is replaced.
    - Parameter index: The index of the item being replaced.
    */
    public init(action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction, newItem : Optional<dotnet.System.Object>, oldItem : Optional<dotnet.System.Object>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventArgs_ctor_0__4__NotifyCollectionChangedAction_Object_Object_i32(&__thrown, action.get_value(), newItem?.get_handle() ?? nil, oldItem?.get_handle() ?? nil, index);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.Specialized.NotifyCollectionChangedAction get_Action()
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.get_Action
    open func get_Action() throws -> dotnet.System.Collections.Specialized.NotifyCollectionChangedAction {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NotifyCollectionChangedEventArgs_NotifyCollectionChangedAction__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.NotifyCollectionChangedAction(val: __return);
        }
    }
    // [IsSpecialName] System.Collections.IList get_NewItems()
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.get_NewItems
    open func get_NewItems() throws -> Optional<dotnet.System.Collections.IList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NotifyCollectionChangedEventArgs_IList__get_NewItems_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_NewStartingIndex()
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.get_NewStartingIndex
    open func get_NewStartingIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NotifyCollectionChangedEventArgs_i32__get_NewStartingIndex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.IList get_OldItems()
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.get_OldItems
    open func get_OldItems() throws -> Optional<dotnet.System.Collections.IList> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NotifyCollectionChangedEventArgs_IList__get_OldItems_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IList(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_OldStartingIndex()
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.get_OldStartingIndex
    open func get_OldStartingIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NotifyCollectionChangedEventArgs_i32__get_OldStartingIndex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the action that caused the event.

    */
    open var Action : dotnet.System.Collections.Specialized.NotifyCollectionChangedAction {
        get {
            return try! get_Action();
        }
    }
    /**
    Gets the list of new items involved in the change.

    */
    open var NewItems : Optional<dotnet.System.Collections.IList> {
        get {
            return try! get_NewItems();
        }
    }
    /**
    Gets the index at which the change occurred.

    */
    open var NewStartingIndex : Swift.Int32 {
        get {
            return try! get_NewStartingIndex();
        }
    }
    /**
    Gets the list of items affected by a , Remove, or Move action.

    */
    open var OldItems : Optional<dotnet.System.Collections.IList> {
        get {
            return try! get_OldItems();
        }
    }
    /**
    Gets the index at which a , Remove, or Replace action occurred.

    */
    open var OldStartingIndex : Swift.Int32 {
        get {
            return try! get_OldStartingIndex();
        }
    }
} // NotifyCollectionChangedEventArgs


// type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    /**
    Represents the method that handles the  event.

    */
public final class NotifyCollectionChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_NotifyCollectionChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventHandler.Invoke(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NotifyCollectionChangedEventHandler_void__Invoke_0__2__Object_NotifyCollectionChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventHandler.BeginInvoke(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NotifyCollectionChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_NotifyCollectionChangedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NotifyCollectionChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NotifyCollectionChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)
// docid: M:System.Collections.Specialized.NotifyCollectionChangedEventHandler.Invoke(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.Collections.Specialized.NotifyCollectionChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NotifyCollectionChangedEventHandler_void__Invoke_0__2__Object_NotifyCollectionChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // NotifyCollectionChangedEventHandler


}


// System.ComponentModel
extension System.ComponentModel {
// type: System.ComponentModel.DataErrorsChangedEventArgs
    /**
    Provides data for the  event.

    */
open class DataErrorsChangedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataErrorsChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter propertyName: The name of the property that has an error.   or  if the error is object-level.
    */
    public init(propertyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataErrorsChangedEventArgs_ctor_0__1__String(&__thrown, propertyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_PropertyName()
// docid: M:System.ComponentModel.DataErrorsChangedEventArgs.get_PropertyName
    open func get_PropertyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataErrorsChangedEventArgs_String__get_PropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the property that has an error.

    */
    open var PropertyName : Optional<dotnet.System.String> {
        get {
            return try! get_PropertyName();
        }
    }
} // DataErrorsChangedEventArgs


// type: System.ComponentModel.INotifyDataErrorInfo
    /**
    Defines members that data entity classes can implement to provide custom synchronous and asynchronous validation support.

    */
open class INotifyDataErrorInfo
    :
    SGBridgeGenericValue,
    System_ComponentModel_INotifyDataErrorInfo
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_INotifyDataErrorInfo_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.IEnumerable GetErrors(System.String)
// docid: M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)
    /**
    Gets the validation errors for a specified property or for the entire entity.

    - Parameter propertyName: The name of the property to retrieve validation errors for; or  or , to retrieve entity-level errors.
    - Returns: The validation errors for the property or entity.

    */
    open func GetErrors(propertyName : Optional<dotnet.System.String>) throws -> dotnet.System.Collections.IEnumerable {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_INotifyDataErrorInfo_IEnumerable__GetErrors_0__1__String(&__thrown, self.get_handle(), propertyName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerable(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_HasErrors()
// docid: M:System.ComponentModel.INotifyDataErrorInfo.get_HasErrors
    open func get_HasErrors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_INotifyDataErrorInfo_bool__get_HasErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void add_ErrorsChanged(System.EventHandler<System.ComponentModel.DataErrorsChangedEventArgs>)
// docid: M:System.ComponentModel.INotifyDataErrorInfo.add_ErrorsChanged(System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})
    open func add_ErrorsChanged(value : Optional<dotnet.System.EventHandler_1<dotnet.System.ComponentModel.DataErrorsChangedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_INotifyDataErrorInfo_void__add_ErrorsChanged_0__1__System_EventHandler_System_ComponentModel_DataErrorsChangedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ErrorsChanged(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.ComponentModel.DataErrorsChangedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.ComponentModel.DataErrorsChangedEventArgs>(value);
        return try add_ErrorsChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ErrorsChanged(System.EventHandler<System.ComponentModel.DataErrorsChangedEventArgs>)
// docid: M:System.ComponentModel.INotifyDataErrorInfo.remove_ErrorsChanged(System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})
    open func remove_ErrorsChanged(value : Optional<dotnet.System.EventHandler_1<dotnet.System.ComponentModel.DataErrorsChangedEventArgs>>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_INotifyDataErrorInfo_void__remove_ErrorsChanged_0__1__System_EventHandler_System_ComponentModel_DataErrorsChangedEventArgs_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ErrorsChanged(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.ComponentModel.DataErrorsChangedEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.ComponentModel.DataErrorsChangedEventArgs>(value);
        return try remove_ErrorsChanged(value: del_value);
    }
} // INotifyDataErrorInfo


// type: System.ComponentModel.INotifyPropertyChanged
    /**
    Notifies clients that a property value has changed.

    */
open class INotifyPropertyChanged
    :
    SGBridgeGenericValue,
    System_ComponentModel_INotifyPropertyChanged
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_INotifyPropertyChanged_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)
// docid: M:System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)
    open func add_PropertyChanged(value : Optional<dotnet.System.ComponentModel.PropertyChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_INotifyPropertyChanged_void__add_PropertyChanged_0__1__PropertyChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_PropertyChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.PropertyChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.PropertyChangedEventHandler(value);
        return try add_PropertyChanged(value: del_value);
    }
    // [IsSpecialName] void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)
// docid: M:System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler)
    open func remove_PropertyChanged(value : Optional<dotnet.System.ComponentModel.PropertyChangedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_INotifyPropertyChanged_void__remove_PropertyChanged_0__1__PropertyChangedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_PropertyChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.PropertyChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.PropertyChangedEventHandler(value);
        return try remove_PropertyChanged(value: del_value);
    }
} // INotifyPropertyChanged


// type: System.ComponentModel.INotifyPropertyChanging
    /**
    Notifies clients that a property value is changing.

    */
open class INotifyPropertyChanging
    :
    SGBridgeGenericValue,
    System_ComponentModel_INotifyPropertyChanging
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_INotifyPropertyChanging_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] void add_PropertyChanging(System.ComponentModel.PropertyChangingEventHandler)
// docid: M:System.ComponentModel.INotifyPropertyChanging.add_PropertyChanging(System.ComponentModel.PropertyChangingEventHandler)
    open func add_PropertyChanging(value : Optional<dotnet.System.ComponentModel.PropertyChangingEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_INotifyPropertyChanging_void__add_PropertyChanging_0__1__PropertyChangingEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_PropertyChanging(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.PropertyChangingEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.PropertyChangingEventHandler(value);
        return try add_PropertyChanging(value: del_value);
    }
    // [IsSpecialName] void remove_PropertyChanging(System.ComponentModel.PropertyChangingEventHandler)
// docid: M:System.ComponentModel.INotifyPropertyChanging.remove_PropertyChanging(System.ComponentModel.PropertyChangingEventHandler)
    open func remove_PropertyChanging(value : Optional<dotnet.System.ComponentModel.PropertyChangingEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_INotifyPropertyChanging_void__remove_PropertyChanging_0__1__PropertyChangingEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_PropertyChanging(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.PropertyChangingEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.PropertyChangingEventHandler(value);
        return try remove_PropertyChanging(value: del_value);
    }
} // INotifyPropertyChanging


// type: System.ComponentModel.PropertyChangedEventArgs
    /**
    Provides data for the  event.

    */
open class PropertyChangedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PropertyChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter propertyName: The name of the property that changed.
    */
    public init(propertyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyChangedEventArgs_ctor_0__1__String(&__thrown, propertyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_PropertyName()
// docid: M:System.ComponentModel.PropertyChangedEventArgs.get_PropertyName
    open func get_PropertyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyChangedEventArgs_String__get_PropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the property that changed.

    */
    open var PropertyName : Optional<dotnet.System.String> {
        get {
            return try! get_PropertyName();
        }
    }
} // PropertyChangedEventArgs


// type: System.ComponentModel.PropertyChangedEventHandler
    /**
    Represents the method that will handle the  event raised when a property is changed on a component.

    */
public final class PropertyChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PropertyChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.PropertyChangedEventArgs)
// docid: M:System.ComponentModel.PropertyChangedEventHandler.Invoke(System.Object,System.ComponentModel.PropertyChangedEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.PropertyChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyChangedEventHandler_void__Invoke_0__2__Object_PropertyChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.PropertyChangedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.PropertyChangedEventHandler.BeginInvoke(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.PropertyChangedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_PropertyChangedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.PropertyChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.PropertyChangedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.PropertyChangedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.PropertyChangedEventArgs)
// docid: M:System.ComponentModel.PropertyChangedEventHandler.Invoke(System.Object,System.ComponentModel.PropertyChangedEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.PropertyChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyChangedEventHandler_void__Invoke_0__2__Object_PropertyChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PropertyChangedEventHandler


// type: System.ComponentModel.PropertyChangingEventArgs
    /**
    Provides data for the  event.

    */
open class PropertyChangingEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PropertyChangingEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter propertyName: The name of the property whose value is changing.
    */
    public init(propertyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyChangingEventArgs_ctor_0__1__String(&__thrown, propertyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_PropertyName()
// docid: M:System.ComponentModel.PropertyChangingEventArgs.get_PropertyName
    open func get_PropertyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyChangingEventArgs_String__get_PropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the property whose value is changing.

    */
    open var PropertyName : Optional<dotnet.System.String> {
        get {
            return try! get_PropertyName();
        }
    }
} // PropertyChangingEventArgs


// type: System.ComponentModel.PropertyChangingEventHandler
    /**
    Represents the method that will handle the  event of an  interface.

    */
public final class PropertyChangingEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PropertyChangingEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.PropertyChangingEventArgs)
// docid: M:System.ComponentModel.PropertyChangingEventHandler.Invoke(System.Object,System.ComponentModel.PropertyChangingEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.PropertyChangingEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyChangingEventHandler_void__Invoke_0__2__Object_PropertyChangingEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.PropertyChangingEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.PropertyChangingEventHandler.BeginInvoke(System.Object,System.ComponentModel.PropertyChangingEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.PropertyChangingEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyChangingEventHandler_IAsyncResult__BeginInvoke_0__4__Object_PropertyChangingEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.PropertyChangingEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyChangingEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.PropertyChangingEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.PropertyChangingEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyChangingEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.PropertyChangingEventArgs)
// docid: M:System.ComponentModel.PropertyChangingEventHandler.Invoke(System.Object,System.ComponentModel.PropertyChangingEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.PropertyChangingEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyChangingEventHandler_void__Invoke_0__2__Object_PropertyChangingEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PropertyChangingEventHandler


// type: System.ComponentModel.TypeConverterAttribute
    /**
    Specifies what type to use as a converter for the object this attribute is bound to.

    */
public final class TypeConverterAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_TypeConverterAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.TypeConverterAttribute Default
    /**
    Specifies the type to use as a converter for the object this attribute is bound to.

    */
    public class var Default : dotnet.System.ComponentModel.TypeConverterAttribute {
        get {
        let __return = dotnet.System.ComponentModel.TypeConverterAttribute(hndl: System_ComponentModel_TypeConverterAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.TypeConverterAttribute.#ctor
    /**
    Initializes a new instance of the  class with the default type converter, which is an empty string ("").

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_TypeConverterAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class, using the specified type name as the data converter for the object this attribute is bound to.

    - Parameter typeName: The fully qualified name of the class to use for data conversion for the object this attribute is bound to.
    */
    public init(typeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_TypeConverterAttribute_ctor_0__1__String(&__thrown, typeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class, using the specified type as the data converter for the object this attribute is bound to.

    - Parameter type: A  that represents the type of the converter class to use for data conversion for the object this attribute is bound to.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_TypeConverterAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverterAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.TypeConverterAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverterAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ConverterTypeName()
// docid: M:System.ComponentModel.TypeConverterAttribute.get_ConverterTypeName
    public func get_ConverterTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverterAttribute_String__get_ConverterTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the fully qualified type name of the  to use as a converter for the object this attribute is bound to.

    */
    public var ConverterTypeName : dotnet.System.String {
        get {
            return try! get_ConverterTypeName();
        }
    }
} // TypeConverterAttribute


// type: System.ComponentModel.TypeDescriptionProviderAttribute
    /**
    Specifies the custom type description provider for a class. This class cannot be inherited.

    */
public final class TypeDescriptionProviderAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_TypeDescriptionProviderAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified type name.

    - Parameter typeName: The qualified name of the type.
    */
    public init(typeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_TypeDescriptionProviderAttribute_ctor_0__1__String(&__thrown, typeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class using the specified type.

    - Parameter type: The type to store in the attribute.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_TypeDescriptionProviderAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_TypeName()
// docid: M:System.ComponentModel.TypeDescriptionProviderAttribute.get_TypeName
    public func get_TypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProviderAttribute_String__get_TypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the type name for the type description provider.

    */
    public var TypeName : dotnet.System.String {
        get {
            return try! get_TypeName();
        }
    }
} // TypeDescriptionProviderAttribute


}

// System.Reflection
extension System.Reflection {
// type: System.Reflection.ICustomTypeProvider
    /**
    Represents an object that provides a custom type.

    */
open class ICustomTypeProvider
    :
    SGBridgeGenericValue,
    System_Reflection_ICustomTypeProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_Reflection_ICustomTypeProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Type GetCustomType()
// docid: M:System.Reflection.ICustomTypeProvider.GetCustomType
    /**
    Gets the custom type provided by this object.

    - Returns: The custom type.

    */
    open func GetCustomType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Reflection_ICustomTypeProvider_Type__GetCustomType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
} // ICustomTypeProvider


}

// System.Windows
// System.Windows.Input
extension System.Windows.Input {
// type: System.Windows.Input.ICommand
    /**
    Defines a command.

    */
open class ICommand
    :
    SGBridgeGenericValue,
    System_Windows_Input_ICommand
{
    open class func get_type_handle() -> TypeHandle {
        return System_Windows_Input_ICommand_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool CanExecute(System.Object)
// docid: M:System.Windows.Input.ICommand.CanExecute(System.Object)
    /**
    Defines the method that determines whether the command can execute in its current state.

    - Parameter parameter: Data used by the command.  If the command does not require data to be passed, this object can be set to .
    - Returns: 
         if this command can be executed; otherwise, .

    */
    open func CanExecute(parameter : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Windows_Input_ICommand_bool__CanExecute_0__1__Object(&__thrown, self.get_handle(), parameter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Execute(System.Object)
// docid: M:System.Windows.Input.ICommand.Execute(System.Object)
    /**
    Defines the method to be called when the command is invoked.

    - Parameter parameter: Data used by the command.  If the command does not require data to be passed, this object can be set to .
    */
    open func Execute(parameter : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Windows_Input_ICommand_void__Execute_0__1__Object(&__thrown, self.get_handle(), parameter?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_CanExecuteChanged(System.EventHandler)
// docid: M:System.Windows.Input.ICommand.add_CanExecuteChanged(System.EventHandler)
    open func add_CanExecuteChanged(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Windows_Input_ICommand_void__add_CanExecuteChanged_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_CanExecuteChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_CanExecuteChanged(value: del_value);
    }
    // [IsSpecialName] void remove_CanExecuteChanged(System.EventHandler)
// docid: M:System.Windows.Input.ICommand.remove_CanExecuteChanged(System.EventHandler)
    open func remove_CanExecuteChanged(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Windows_Input_ICommand_void__remove_CanExecuteChanged_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_CanExecuteChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_CanExecuteChanged(value: del_value);
    }
} // ICommand


}

// System.Windows.Markup
extension System.Windows.Markup {
// type: System.Windows.Markup.ValueSerializerAttribute
    /**
    Identifies the  class that a type or property should use when it is serialized.

    */
public final class ValueSerializerAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Windows_Markup_ValueSerializerAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class, using an assembly qualified type name string.

    - Parameter valueSerializerTypeName: The assembly qualified type name string for the  class to use.
    */
    public init(valueSerializerTypeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Windows_Markup_ValueSerializerAttribute_ctor_0__1__String(&__thrown, valueSerializerTypeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class, using the specified type.

    - Parameter valueSerializerType: A type that represents the type of the  class.
    */
    public init(valueSerializerType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Windows_Markup_ValueSerializerAttribute_ctor_0__1__Type(&__thrown, valueSerializerType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_ValueSerializerType()
// docid: M:System.Windows.Markup.ValueSerializerAttribute.get_ValueSerializerType
    public func get_ValueSerializerType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Windows_Markup_ValueSerializerAttribute_Type__get_ValueSerializerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ValueSerializerTypeName()
// docid: M:System.Windows.Markup.ValueSerializerAttribute.get_ValueSerializerTypeName
    public func get_ValueSerializerTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Windows_Markup_ValueSerializerAttribute_String__get_ValueSerializerTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the type of the  class reported by this attribute.

    */
    public var ValueSerializerType : dotnet.System.Type_ {
        get {
            return try! get_ValueSerializerType();
        }
    }
    /**
    Gets the assembly qualified name of the  type for this type or property.

    */
    public var ValueSerializerTypeName : dotnet.System.String {
        get {
            return try! get_ValueSerializerTypeName();
        }
    }
} // ValueSerializerAttribute


}



public protocol System_Collections_Specialized_INotifyCollectionChanged
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_INotifyDataErrorInfo
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_INotifyPropertyChanged
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_INotifyPropertyChanging
    :
    SGBridgeGetHandle
{
}

public protocol System_Reflection_ICustomTypeProvider
    :
    SGBridgeGetHandle
{
}

public protocol System_Windows_Input_ICommand
    :
    SGBridgeGetHandle
{
}

