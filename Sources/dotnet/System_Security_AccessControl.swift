// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Security
// System.Security.AccessControl
extension System.Security.AccessControl {
// type: System.Security.AccessControl.AccessControlActions
    /**
    Specifies the actions that are permitted for securable objects.

    */
public struct AccessControlActions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AccessControlActions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.AccessControlActions None
    /**
    Specifies no access.

    */
    public static var None : dotnet.System.Security.AccessControl.AccessControlActions {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlActions(val: System_Security_AccessControl_AccessControlActions_get_None());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlActions View
    /**
    Specifies read-only access.

    */
    public static var View : dotnet.System.Security.AccessControl.AccessControlActions {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlActions(val: System_Security_AccessControl_AccessControlActions_get_View());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlActions Change
    /**
    Specifies write-only access.

    */
    public static var Change : dotnet.System.Security.AccessControl.AccessControlActions {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlActions(val: System_Security_AccessControl_AccessControlActions_get_Change());
            return __return;
        }
    }
} // AccessControlActions


// type: System.Security.AccessControl.AccessControlModification
    /**
    Specifies the type of access control modification to perform. This enumeration is used by methods of the  class and its descendents.

    */
public struct AccessControlModification : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AccessControlModification_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.AccessControlModification Add
    /**
    Add the specified authorization rule to the access control list (ACL).

    */
    public static var Add : dotnet.System.Security.AccessControl.AccessControlModification {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlModification(val: System_Security_AccessControl_AccessControlModification_get_Add());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlModification Set
    /**
    Remove all authorization rules from the ACL, then add the specified authorization rule to the ACL.

    */
    public static var Set : dotnet.System.Security.AccessControl.AccessControlModification {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlModification(val: System_Security_AccessControl_AccessControlModification_get_Set());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlModification Reset
    /**
    Remove authorization rules that contain the same SID as the specified authorization rule from the ACL, and then add the specified authorization rule to the ACL.

    */
    public static var Reset : dotnet.System.Security.AccessControl.AccessControlModification {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlModification(val: System_Security_AccessControl_AccessControlModification_get_Reset());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlModification Remove
    /**
    Remove authorization rules that contain the same security identifier (SID) and access mask as the specified authorization rule from the ACL.

    */
    public static var Remove : dotnet.System.Security.AccessControl.AccessControlModification {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlModification(val: System_Security_AccessControl_AccessControlModification_get_Remove());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlModification RemoveAll
    /**
    Remove authorization rules that contain the same SID as the specified authorization rule from the ACL.

    */
    public static var RemoveAll : dotnet.System.Security.AccessControl.AccessControlModification {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlModification(val: System_Security_AccessControl_AccessControlModification_get_RemoveAll());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlModification RemoveSpecific
    /**
    Remove authorization rules that exactly match the specified authorization rule from the ACL.

    */
    public static var RemoveSpecific : dotnet.System.Security.AccessControl.AccessControlModification {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlModification(val: System_Security_AccessControl_AccessControlModification_get_RemoveSpecific());
            return __return;
        }
    }
} // AccessControlModification


// type: System.Security.AccessControl.AccessControlSections
    /**
    Specifies which sections of a security descriptor to save or load.

    */
public struct AccessControlSections : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AccessControlSections_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.AccessControlSections None
    /**
    No sections.

    */
    public static var None : dotnet.System.Security.AccessControl.AccessControlSections {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlSections(val: System_Security_AccessControl_AccessControlSections_get_None());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlSections Audit
    /**
    The system access control list (SACL).

    */
    public static var Audit : dotnet.System.Security.AccessControl.AccessControlSections {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlSections(val: System_Security_AccessControl_AccessControlSections_get_Audit());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlSections Access
    /**
    The discretionary access control list (DACL).

    */
    public static var Access : dotnet.System.Security.AccessControl.AccessControlSections {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlSections(val: System_Security_AccessControl_AccessControlSections_get_Access());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlSections Owner
    /**
    The owner.

    */
    public static var Owner : dotnet.System.Security.AccessControl.AccessControlSections {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlSections(val: System_Security_AccessControl_AccessControlSections_get_Owner());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlSections Group
    /**
    The primary group.

    */
    public static var Group : dotnet.System.Security.AccessControl.AccessControlSections {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlSections(val: System_Security_AccessControl_AccessControlSections_get_Group());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlSections All
    /**
    The entire security descriptor.

    */
    public static var All : dotnet.System.Security.AccessControl.AccessControlSections {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlSections(val: System_Security_AccessControl_AccessControlSections_get_All());
            return __return;
        }
    }
} // AccessControlSections


// type: System.Security.AccessControl.AccessControlType
    /**
    Specifies whether an  object is used to allow or deny access. These values are not flags, and they cannot be combined.

    */
public struct AccessControlType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AccessControlType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.AccessControlType Allow
    /**
    The  object is used to allow access to a secured object.

    */
    public static var Allow : dotnet.System.Security.AccessControl.AccessControlType {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlType(val: System_Security_AccessControl_AccessControlType_get_Allow());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AccessControlType Deny
    /**
    The  object is used to deny access to a secured object.

    */
    public static var Deny : dotnet.System.Security.AccessControl.AccessControlType {
        get {
        let __return = dotnet.System.Security.AccessControl.AccessControlType(val: System_Security_AccessControl_AccessControlType_get_Deny());
            return __return;
        }
    }
} // AccessControlType


// type: System.Security.AccessControl.AccessRule
    /**
    Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An  object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.

    */
open class AccessRule
    :
    dotnet.System.Security.AccessControl.AuthorizationRule
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AccessRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Security.AccessControl.AccessControlType get_AccessControlType()
// docid: M:System.Security.AccessControl.AccessRule.get_AccessControlType
    open func get_AccessControlType() throws -> dotnet.System.Security.AccessControl.AccessControlType {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AccessRule_AccessControlType__get_AccessControlType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AccessControlType(val: __return);
        }
    }
    /**
    Gets the  value associated with this  object.

    */
    open var AccessControlType : dotnet.System.Security.AccessControl.AccessControlType {
        get {
            return try! get_AccessControlType();
        }
    }
} // AccessRule


// type: System.Security.AccessControl.AccessRule`1
    /**
    Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.

    */
open class AccessRule_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Security.AccessControl.AccessRule
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AccessRule_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the AccessRule'1 class by using the specified values.

    - Parameter identity: The identity to which the access rule applies.
    - Parameter rights: The rights of the access rule.
    - Parameter type: The valid access control type.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, rights : T, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AccessRule_1_ctor_0__3__IdentityReference_T_AccessControlType(T.get_type_handle(), &__thrown, identity.get_handle(), rights.to_gval(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the AccessRule'1 class by using the specified values.

    - Parameter identity: The identity to which the access rule applies.
    - Parameter rights: The rights of the access rule.
    - Parameter inheritanceFlags: The inheritance properties of the access rule.
    - Parameter propagationFlags: Whether inherited access rules are automatically propagated. The propagation flags are ignored if  is set to .
    - Parameter type: The valid access control type.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, rights : T, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AccessRule_1_ctor_0__5__IdentityReference_T_InheritanceFlags_PropagationFlags_AccessControlType(T.get_type_handle(), &__thrown, identity.get_handle(), rights.to_gval(), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, T, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the AccessRule'1 class by using the specified values.

    - Parameter identity: The identity to which the access rule applies.
    - Parameter rights: The rights of the access rule.
    - Parameter type: The valid access control type.
    */
    public init(identity : dotnet.System.String, rights : T, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AccessRule_1_ctor_0__3__String_T_AccessControlType(T.get_type_handle(), &__thrown, identity.get_handle(), rights.to_gval(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the AccessRule'1 class by using the specified values.

    - Parameter identity: The identity to which the access rule applies.
    - Parameter rights: The rights of the access rule.
    - Parameter inheritanceFlags: The inheritance properties of the access rule.
    - Parameter propagationFlags: Whether inherited access rules are automatically propagated. The propagation flags are ignored if  is set to .
    - Parameter type: The valid access control type.
    */
    public init(identity : dotnet.System.String, rights : T, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AccessRule_1_ctor_0__5__String_T_InheritanceFlags_PropagationFlags_AccessControlType(T.get_type_handle(), &__thrown, identity.get_handle(), rights.to_gval(), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] T get_Rights()
// docid: M:System.Security.AccessControl.AccessRule`1.get_Rights
    open func get_Rights() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AccessRule_1_T__get_Rights_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    /**
    Gets the rights of the current instance.

    */
    open var Rights : T {
        get {
            return try! get_Rights();
        }
    }
} // AccessRule_1


// type: System.Security.AccessControl.AceEnumerator
    /**
    Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).

    */
public final class AceEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AceEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool MoveNext()
// docid: M:System.Security.AccessControl.AceEnumerator.MoveNext
    /**
    Advances the enumerator to the next element of the  collection.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AceEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Security.AccessControl.AceEnumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the  collection.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_AceEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.GenericAce get_Current()
// docid: M:System.Security.AccessControl.AceEnumerator.get_Current
    public func get_Current() throws -> dotnet.System.Security.AccessControl.GenericAce {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AceEnumerator_GenericAce__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.GenericAce(hndl : __return);
        }
    }
    /**
    Gets the current element in the  collection. This property gets the type-friendly version of the object.

    */
    public var Current : dotnet.System.Security.AccessControl.GenericAce {
        get {
            return try! get_Current();
        }
    }
} // AceEnumerator


// type: System.Security.AccessControl.AceFlags
    /**
    Specifies the inheritance and auditing behavior of an access control entry (ACE).

    */
public struct AceFlags : SGBridgeGenericValue {
    let v : Swift.UInt8;
    public init(val: Swift.UInt8) { self.v = val; }
    public func get_value() -> Swift.UInt8 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AceFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.UInt8(gval); }
    // static field: System.Security.AccessControl.AceFlags None
    /**
    No ACE flags are set.

    */
    public static var None : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_None());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags ObjectInherit
    /**
    The access mask is propagated onto child leaf objects.

    */
    public static var ObjectInherit : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_ObjectInherit());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags ContainerInherit
    /**
    The access mask is propagated to child container objects.

    */
    public static var ContainerInherit : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_ContainerInherit());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags NoPropagateInherit
    /**
    The access checks do not apply to the object; they only apply to its children.

    */
    public static var NoPropagateInherit : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_NoPropagateInherit());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags InheritOnly
    /**
    The access mask is propagated only to child objects. This includes both container and leaf child objects.

    */
    public static var InheritOnly : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_InheritOnly());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags InheritanceFlags
    /**
    A logical  of , , , and .

    */
    public static var InheritanceFlags : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_InheritanceFlags());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags Inherited
    /**
    An ACE is inherited from a parent container rather than being explicitly set for an object.

    */
    public static var Inherited : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_Inherited());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags SuccessfulAccess
    /**
    Successful access attempts are audited.

    */
    public static var SuccessfulAccess : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_SuccessfulAccess());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags FailedAccess
    /**
    Failed access attempts are audited.

    */
    public static var FailedAccess : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_FailedAccess());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceFlags AuditFlags
    /**
    All access attempts are audited.

    */
    public static var AuditFlags : dotnet.System.Security.AccessControl.AceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AceFlags(val: System_Security_AccessControl_AceFlags_get_AuditFlags());
            return __return;
        }
    }
} // AceFlags


// type: System.Security.AccessControl.AceQualifier
    /**
    Specifies the function of an access control entry (ACE).

    */
public struct AceQualifier : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AceQualifier_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.AceQualifier AccessAllowed
    /**
    Allow access.

    */
    public static var AccessAllowed : dotnet.System.Security.AccessControl.AceQualifier {
        get {
        let __return = dotnet.System.Security.AccessControl.AceQualifier(val: System_Security_AccessControl_AceQualifier_get_AccessAllowed());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceQualifier AccessDenied
    /**
    Deny access.

    */
    public static var AccessDenied : dotnet.System.Security.AccessControl.AceQualifier {
        get {
        let __return = dotnet.System.Security.AccessControl.AceQualifier(val: System_Security_AccessControl_AceQualifier_get_AccessDenied());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceQualifier SystemAudit
    /**
    Cause a system audit.

    */
    public static var SystemAudit : dotnet.System.Security.AccessControl.AceQualifier {
        get {
        let __return = dotnet.System.Security.AccessControl.AceQualifier(val: System_Security_AccessControl_AceQualifier_get_SystemAudit());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceQualifier SystemAlarm
    /**
    Cause a system alarm.

    */
    public static var SystemAlarm : dotnet.System.Security.AccessControl.AceQualifier {
        get {
        let __return = dotnet.System.Security.AccessControl.AceQualifier(val: System_Security_AccessControl_AceQualifier_get_SystemAlarm());
            return __return;
        }
    }
} // AceQualifier


// type: System.Security.AccessControl.AceType
    /**
    Defines the available access control entry (ACE) types.

    */
public struct AceType : SGBridgeGenericValue {
    let v : Swift.UInt8;
    public init(val: Swift.UInt8) { self.v = val; }
    public func get_value() -> Swift.UInt8 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AceType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.UInt8(gval); }
    // static field: System.Security.AccessControl.AceType AccessAllowed
    /**
    Allows access to an object for a specific trustee identified by an  object.

    */
    public static var AccessAllowed : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessAllowed());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType AccessDenied
    /**
    Denies access to an object for a specific trustee identified by an  object.

    */
    public static var AccessDenied : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessDenied());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType SystemAudit
    /**
    Causes an audit message to be logged when a specified trustee attempts to gain access to an object. The trustee is identified by an  object.

    */
    public static var SystemAudit : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_SystemAudit());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType SystemAlarm
    /**
    Reserved for future use.

    */
    public static var SystemAlarm : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_SystemAlarm());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType AccessAllowedCompound
    /**
    Defined but never used. Included here for completeness.

    */
    public static var AccessAllowedCompound : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessAllowedCompound());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType AccessAllowedObject
    /**
    Allows access to an object, property set, or property. The ACE contains a set of access rights, a GUID that identifies the type of object, and an  object that identifies the trustee to whom the system will grant access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects.

    */
    public static var AccessAllowedObject : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessAllowedObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType AccessDeniedObject
    /**
    Denies access to an object, property set, or property. The ACE contains a set of access rights, a GUID that identifies the type of object, and an  object that identifies the trustee to whom the system will grant access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects.

    */
    public static var AccessDeniedObject : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessDeniedObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType SystemAuditObject
    /**
    Causes an audit message to be logged when a specified trustee attempts to gain access to an object or subobjects such as property sets or properties. The ACE contains a set of access rights, a GUID that identifies the type of object or subobject, and an  object that identifies the trustee for whom the system will audit access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects.

    */
    public static var SystemAuditObject : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_SystemAuditObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType SystemAlarmObject
    /**
    Reserved for future use.

    */
    public static var SystemAlarmObject : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_SystemAlarmObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType AccessAllowedCallback
    /**
    Allows access to an object for a specific trustee identified by an  object. This ACE type may contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.

    */
    public static var AccessAllowedCallback : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessAllowedCallback());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType AccessDeniedCallback
    /**
    Denies access to an object for a specific trustee identified by an  object. This ACE type can contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.

    */
    public static var AccessDeniedCallback : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessDeniedCallback());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType AccessAllowedCallbackObject
    /**
    Allows access to an object, property set, or property. The ACE contains a set of access rights, a GUID that identifies the type of object, and an  object that identifies the trustee to whom the system will grant access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects. This ACE type may contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.

    */
    public static var AccessAllowedCallbackObject : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessAllowedCallbackObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType AccessDeniedCallbackObject
    /**
    Denies access to an object, property set, or property. The ACE contains a set of access rights, a GUID that identifies the type of object, and an  object that identifies the trustee to whom the system will grant access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects. This ACE type can contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.

    */
    public static var AccessDeniedCallbackObject : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_AccessDeniedCallbackObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType SystemAuditCallback
    /**
    Causes an audit message to be logged when a specified trustee attempts to gain access to an object. The trustee is identified by an  object. This ACE type can contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.

    */
    public static var SystemAuditCallback : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_SystemAuditCallback());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType SystemAlarmCallback
    /**
    Reserved for future use.

    */
    public static var SystemAlarmCallback : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_SystemAlarmCallback());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType SystemAuditCallbackObject
    /**
    Causes an audit message to be logged when a specified trustee attempts to gain access to an object or subobjects such as property sets or properties. The ACE contains a set of access rights, a GUID that identifies the type of object or subobject, and an  object that identifies the trustee for whom the system will audit access. The ACE also contains a GUID and a set of flags that control inheritance of the ACE by child objects. This ACE type can contain optional callback data. The callback data is a resource manager-specific BLOB that is not interpreted.

    */
    public static var SystemAuditCallbackObject : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_SystemAuditCallbackObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType MaxDefinedAceType
    /**
    Tracks the maximum defined ACE type in the enumeration.

    */
    public static var MaxDefinedAceType : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_MaxDefinedAceType());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AceType SystemAlarmCallbackObject
    /**
    Reserved for future use.

    */
    public static var SystemAlarmCallbackObject : dotnet.System.Security.AccessControl.AceType {
        get {
        let __return = dotnet.System.Security.AccessControl.AceType(val: System_Security_AccessControl_AceType_get_SystemAlarmCallbackObject());
            return __return;
        }
    }
} // AceType


// type: System.Security.AccessControl.AuditFlags
    /**
    Specifies the conditions for auditing attempts to access a securable object.

    */
public struct AuditFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AuditFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.AuditFlags None
    /**
    No access attempts are to be audited.

    */
    public static var None : dotnet.System.Security.AccessControl.AuditFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AuditFlags(val: System_Security_AccessControl_AuditFlags_get_None());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AuditFlags Success
    /**
    Successful access attempts are to be audited.

    */
    public static var Success : dotnet.System.Security.AccessControl.AuditFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AuditFlags(val: System_Security_AccessControl_AuditFlags_get_Success());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.AuditFlags Failure
    /**
    Failed access attempts are to be audited.

    */
    public static var Failure : dotnet.System.Security.AccessControl.AuditFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.AuditFlags(val: System_Security_AccessControl_AuditFlags_get_Failure());
            return __return;
        }
    }
} // AuditFlags


// type: System.Security.AccessControl.AuditRule
    /**
    Represents a combination of a user's identity and an access mask. An  object also contains information about how the rule is inherited by child objects, how that inheritance is propagated, and for what conditions it is audited.

    */
open class AuditRule
    :
    dotnet.System.Security.AccessControl.AuthorizationRule
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AuditRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Security.AccessControl.AuditFlags get_AuditFlags()
// docid: M:System.Security.AccessControl.AuditRule.get_AuditFlags
    open func get_AuditFlags() throws -> dotnet.System.Security.AccessControl.AuditFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AuditRule_AuditFlags__get_AuditFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuditFlags(val: __return);
        }
    }
    /**
    Gets the audit flags for this audit rule.

    */
    open var AuditFlags : dotnet.System.Security.AccessControl.AuditFlags {
        get {
            return try! get_AuditFlags();
        }
    }
} // AuditRule


// type: System.Security.AccessControl.AuditRule`1
    /**
    Represents a combination of a user's identity and an access mask.

    */
open class AuditRule_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Security.AccessControl.AuditRule
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AuditRule_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class by using the specified values.

    - Parameter identity: The identity to which this audit rule applies.
    - Parameter rights: The rights of the audit rule.
    - Parameter flags: The conditions for which the rule is audited.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, rights : T, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AuditRule_1_ctor_0__3__IdentityReference_T_AuditFlags(T.get_type_handle(), &__thrown, identity.get_handle(), rights.to_gval(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class by using the specified values.

    - Parameter identity: The identity to which the audit rule applies.
    - Parameter rights: The rights of the audit rule.
    - Parameter inheritanceFlags: The inheritance properties of the audit rule.
    - Parameter propagationFlags: Whether inherited audit rules are automatically propagated.
    - Parameter flags: The conditions for which the rule is audited.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, rights : T, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AuditRule_1_ctor_0__5__IdentityReference_T_InheritanceFlags_PropagationFlags_AuditFlags(T.get_type_handle(), &__thrown, identity.get_handle(), rights.to_gval(), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, T, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class by using the specified values.

    - Parameter identity: The identity to which the audit rule applies.
    - Parameter rights: The rights of the audit rule.
    - Parameter flags: The properties of the audit rule.
    */
    public init(identity : dotnet.System.String, rights : T, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AuditRule_1_ctor_0__3__String_T_AuditFlags(T.get_type_handle(), &__thrown, identity.get_handle(), rights.to_gval(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class by using the specified values.

    - Parameter identity: The identity to which the audit rule applies.
    - Parameter rights: The rights of the audit rule.
    - Parameter inheritanceFlags: The inheritance properties of the audit rule.
    - Parameter propagationFlags: Whether inherited audit rules are automatically propagated.
    - Parameter flags: The conditions for which the rule is audited.
    */
    public init(identity : dotnet.System.String, rights : T, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AuditRule_1_ctor_0__5__String_T_InheritanceFlags_PropagationFlags_AuditFlags(T.get_type_handle(), &__thrown, identity.get_handle(), rights.to_gval(), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] T get_Rights()
// docid: M:System.Security.AccessControl.AuditRule`1.get_Rights
    open func get_Rights() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AuditRule_1_T__get_Rights_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    /**
    Gets the rights of the audit rule.

    */
    open var Rights : T {
        get {
            return try! get_Rights();
        }
    }
} // AuditRule_1


// type: System.Security.AccessControl.AuthorizationRule
    /**
    Determines access to securable objects. The derived classes  and  offer specializations for access and audit functionality.

    */
open class AuthorizationRule
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AuthorizationRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Security.Principal.IdentityReference get_IdentityReference()
// docid: M:System.Security.AccessControl.AuthorizationRule.get_IdentityReference
    open func get_IdentityReference() throws -> dotnet.System.Security.Principal.IdentityReference {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AuthorizationRule_IdentityReference__get_IdentityReference_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IdentityReference(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.InheritanceFlags get_InheritanceFlags()
// docid: M:System.Security.AccessControl.AuthorizationRule.get_InheritanceFlags
    open func get_InheritanceFlags() throws -> dotnet.System.Security.AccessControl.InheritanceFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AuthorizationRule_InheritanceFlags__get_InheritanceFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.InheritanceFlags(val: __return);
        }
    }
    // [IsSpecialName] bool get_IsInherited()
// docid: M:System.Security.AccessControl.AuthorizationRule.get_IsInherited
    open func get_IsInherited() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AuthorizationRule_bool__get_IsInherited_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.PropagationFlags get_PropagationFlags()
// docid: M:System.Security.AccessControl.AuthorizationRule.get_PropagationFlags
    open func get_PropagationFlags() throws -> dotnet.System.Security.AccessControl.PropagationFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AuthorizationRule_PropagationFlags__get_PropagationFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.PropagationFlags(val: __return);
        }
    }
    /**
    Gets the  to which this rule applies.

    */
    open var IdentityReference : dotnet.System.Security.Principal.IdentityReference {
        get {
            return try! get_IdentityReference();
        }
    }
    /**
    Gets the value of flags that determine how this rule is inherited by child objects.

    */
    open var InheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags {
        get {
            return try! get_InheritanceFlags();
        }
    }
    /**
    Gets a value indicating whether this rule is explicitly set or is inherited from a parent container object.

    */
    open var IsInherited : Bool {
        get {
            return try! get_IsInherited();
        }
    }
    /**
    Gets the value of the propagation flags, which determine how inheritance of this rule is propagated to child objects. This property is significant only when the value of the  enumeration is not .

    */
    open var PropagationFlags : dotnet.System.Security.AccessControl.PropagationFlags {
        get {
            return try! get_PropagationFlags();
        }
    }
} // AuthorizationRule


// type: System.Security.AccessControl.AuthorizationRuleCollection
    /**
    Represents a collection of  objects.

    */
public final class AuthorizationRuleCollection
    :
    dotnet.System.Collections.ReadOnlyCollectionBase
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_AuthorizationRuleCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.AccessControl.AuthorizationRuleCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_AuthorizationRuleCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddRule(System.Security.AccessControl.AuthorizationRule)
// docid: M:System.Security.AccessControl.AuthorizationRuleCollection.AddRule(System.Security.AccessControl.AuthorizationRule)
    /**
    Adds an  object to the collection.

    - Parameter rule: The  object to add to the collection.
    */
    public func AddRule(rule : Optional<dotnet.System.Security.AccessControl.AuthorizationRule>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_AuthorizationRuleCollection_void__AddRule_0__1__AuthorizationRule(&__thrown, self.get_handle(), rule?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Security.AccessControl.AuthorizationRule[], System.Int32)
// docid: M:System.Security.AccessControl.AuthorizationRuleCollection.CopyTo(System.Security.AccessControl.AuthorizationRule[],System.Int32)
    /**
    Copies the contents of the collection to an array.

    - Parameter rules: An array to which to copy the contents of the collection.
    - Parameter index: The zero-based index from which to begin copying.
    */
    public func CopyTo(rules : dotnet.System_Arr<dotnet.System.Security.AccessControl.AuthorizationRule>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_AuthorizationRuleCollection_void__CopyTo_0__2__AuthorizationRuleArray_i32(&__thrown, self.get_handle(), rules.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.AuthorizationRule get_Item(System.Int32)
// docid: M:System.Security.AccessControl.AuthorizationRuleCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Security.AccessControl.AuthorizationRule> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_AuthorizationRuleCollection_AuthorizationRule__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.AccessControl.AuthorizationRule(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // AuthorizationRuleCollection


// type: System.Security.AccessControl.CommonAce
    /**
    Represents an access control entry (ACE).

    */
public final class CommonAce
    :
    dotnet.System.Security.AccessControl.QualifiedAce
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_CommonAce_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, bool, System.Byte[])
// docid: M:System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])
    /**
    Initializes a new instance of the  class.

    - Parameter flags: Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new access control entry (ACE).
    - Parameter qualifier: The use of the new ACE.
    - Parameter accessMask: The access mask for the ACE.
    - Parameter sid: The  associated with the new ACE.
    - Parameter isCallback: 
         to specify that the new ACE is a callback type ACE.
    - Parameter opaque: Opaque data associated with the new ACE. Opaque data is allowed only for callback ACE types. The length of this array must not be greater than the return value of the  method.
    */
    public init(flags : dotnet.System.Security.AccessControl.AceFlags, qualifier : dotnet.System.Security.AccessControl.AceQualifier, accessMask : Swift.Int32, sid : dotnet.System.Security.Principal.SecurityIdentifier, isCallback : Bool, opaque : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_CommonAce_ctor_0__6__AceFlags_AceQualifier_i32_SecurityIdentifier_bool_u8Array(&__thrown, flags.get_value(), qualifier.get_value(), accessMask, sid.get_handle(), Swift.Int32(isCallback ? 1 : 0), (opaque?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Marshals the contents of the  object into the specified byte array beginning at the specified offset.

    - Parameter binaryForm: The byte array into which the contents of the  object is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    public override func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonAce_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 MaxOpaqueLength(bool)
// docid: M:System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
    /**
    Gets the maximum allowed length of an opaque data BLOB for callback access control entries (ACEs).

    - Parameter isCallback: 
         to specify that the  object is a callback ACE type.
    - Returns: The allowed length of an opaque data BLOB.

    */
    public class func MaxOpaqueLength(isCallback : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAce_i32__MaxOpaqueLength_0__1__bool(&__thrown, Swift.Int32(isCallback ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.CommonAce.get_BinaryLength
    public override func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAce_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. Use this length with the  method before marshaling the ACL into a binary array.

    */
    public override var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
} // CommonAce


// type: System.Security.AccessControl.CommonAcl
    /**
    Represents an access control list (ACL) and is the base class for the  and  classes.

    */
open class CommonAcl
    :
    dotnet.System.Security.AccessControl.GenericAcl
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_CommonAcl_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Marshals the contents of the  object into the specified byte array beginning at the specified offset.

    - Parameter binaryForm: The byte array into which the contents of the  is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    open /* method final */ override func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonAcl_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Purge(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)
    /**
    Removes all access control entries (ACEs) contained by this  object that are associated with the specified  object.

    - Parameter sid: The  object to check for.
    */
    open func Purge(sid : dotnet.System.Security.Principal.SecurityIdentifier) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonAcl_void__Purge_0__1__SecurityIdentifier(&__thrown, self.get_handle(), sid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveInheritedAces()
// docid: M:System.Security.AccessControl.CommonAcl.RemoveInheritedAces
    /**
    Removes all inherited access control entries (ACEs) from this  object.

    */
    open func RemoveInheritedAces() throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonAcl_void__RemoveInheritedAces_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.CommonAcl.get_BinaryLength
    open /* method final */ override func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAcl_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.AccessControl.CommonAcl.get_Count
    open /* method final */ override func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAcl_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsCanonical()
// docid: M:System.Security.AccessControl.CommonAcl.get_IsCanonical
    open func get_IsCanonical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAcl_bool__get_IsCanonical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsContainer()
// docid: M:System.Security.AccessControl.CommonAcl.get_IsContainer
    open func get_IsContainer() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAcl_bool__get_IsContainer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDS()
// docid: M:System.Security.AccessControl.CommonAcl.get_IsDS
    open func get_IsDS() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAcl_bool__get_IsDS_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Byte get_Revision()
// docid: M:System.Security.AccessControl.CommonAcl.get_Revision
    open /* method final */ override func get_Revision() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAcl_u8__get_Revision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.GenericAce get_Item(System.Int32)
// docid: M:System.Security.AccessControl.CommonAcl.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//    GenericAcl : [IsSpecialName] System.Security.AccessControl.GenericAce get_Item(System.Int32) -- GenericAcl -- 100663458
//EARLY true
//matches :
//    GenericAcl : [IsSpecialName] System.Security.AccessControl.GenericAce get_Item(System.Int32)
    open /* method final */ override func get_Item(index : Swift.Int32) throws -> dotnet.System.Security.AccessControl.GenericAce {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonAcl_GenericAce__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.GenericAce(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Security.AccessControl.GenericAce)
// docid: M:System.Security.AccessControl.CommonAcl.set_Item(System.Int32,System.Security.AccessControl.GenericAce)
    open /* method final */ override func set_Item(index : Swift.Int32, value : dotnet.System.Security.AccessControl.GenericAce) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonAcl_void__set_Item_0__2__i32_GenericAce(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. This length should be used before marshaling the access control list (ACL) into a binary array by using the  method.

    */
    public override var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Gets the number of access control entries (ACEs) in the current  object.

    */
    public override var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a Boolean value that specifies whether the access control entries (ACEs) in the current  object are in canonical order.

    */
    open var IsCanonical : Bool {
        get {
            return try! get_IsCanonical();
        }
    }
    /**
    Sets whether the  object is a container.

    */
    open var IsContainer : Bool {
        get {
            return try! get_IsContainer();
        }
    }
    /**
    Sets whether the current  object is a directory object access control list (ACL).

    */
    open var IsDS : Bool {
        get {
            return try! get_IsDS();
        }
    }
    /**
    Gets the revision level of the .

    */
    public override var Revision : Swift.UInt8 {
        get {
            return try! get_Revision();
        }
    }
} // CommonAcl


// type: System.Security.AccessControl.CommonObjectSecurity
    /**
    Controls access to objects without direct manipulation of access control lists (ACLs). This class is the abstract base class for the  class.

    */
open class CommonObjectSecurity
    :
    dotnet.System.Security.AccessControl.ObjectSecurity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_CommonObjectSecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules(bool, bool, System.Type)
// docid: M:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
    /**
    Gets a collection of the access rules associated with the specified security identifier.

    - Parameter includeExplicit: 
         to include access rules explicitly set for the object.
    - Parameter includeInherited: 
         to include inherited access rules.
    - Parameter targetType: Specifies whether the security identifier for which to retrieve access rules is of type  or type . The value of this parameter must be a type that can be translated to  the  type.
    - Returns: The collection of access rules associated with the specified  object.

    */
    open func GetAccessRules(includeExplicit : Bool, includeInherited : Bool, targetType : dotnet.System.Type_) throws -> dotnet.System.Security.AccessControl.AuthorizationRuleCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonObjectSecurity_AuthorizationRuleCollection__GetAccessRules_0__3__bool_bool_Type(&__thrown, self.get_handle(), Swift.Int32(includeExplicit ? 1 : 0), Swift.Int32(includeInherited ? 1 : 0), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuthorizationRuleCollection(hndl : __return);
        }
    }
    // System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules(bool, bool, System.Type)
// docid: M:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
    /**
    Gets a collection of the audit rules associated with the specified security identifier.

    - Parameter includeExplicit: 
         to include audit rules explicitly set for the object.
    - Parameter includeInherited: 
         to include inherited audit rules.
    - Parameter targetType: The security identifier for which to retrieve audit rules. This must be an object that can be cast as a  object.
    - Returns: The collection of audit rules associated with the specified  object.

    */
    open func GetAuditRules(includeExplicit : Bool, includeInherited : Bool, targetType : dotnet.System.Type_) throws -> dotnet.System.Security.AccessControl.AuthorizationRuleCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonObjectSecurity_AuthorizationRuleCollection__GetAuditRules_0__3__bool_bool_Type(&__thrown, self.get_handle(), Swift.Int32(includeExplicit ? 1 : 0), Swift.Int32(includeInherited ? 1 : 0), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuthorizationRuleCollection(hndl : __return);
        }
    }
} // CommonObjectSecurity


// type: System.Security.AccessControl.CommonSecurityDescriptor
    /**
    Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).

    */
public final class CommonSecurityDescriptor
    :
    dotnet.System.Security.AccessControl.GenericSecurityDescriptor
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_CommonSecurityDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool, bool, System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
    /**
    Initializes a new instance of the  class from the specified array of byte values.

    - Parameter isContainer: 
         if the new security descriptor is associated with a container object.
    - Parameter isDS: 
         if the new security descriptor is associated with a directory object.
    - Parameter binaryForm: The array of byte values from which to create the new  object.
    - Parameter offset: The offset in the  array at which to begin copying.
    */
    public init(isContainer : Bool, isDS : Bool, binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_CommonSecurityDescriptor_ctor_0__4__bool_bool_u8Array_i32(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), binaryForm.get_handle(), offset);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, System.Security.AccessControl.ControlFlags, System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.SystemAcl, System.Security.AccessControl.DiscretionaryAcl)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
    /**
    Initializes a new instance of the  class from the specified information.

    - Parameter isContainer: 
         if the new security descriptor is associated with a container object.
    - Parameter isDS: 
         if the new security descriptor is associated with a directory object.
    - Parameter flags: Flags that specify behavior of the new  object.
    - Parameter owner: The owner for the new  object.
    - Parameter group: The primary group for the new  object.
    - Parameter systemAcl: The System Access Control List (SACL) for the new  object.
    - Parameter discretionaryAcl: The Discretionary Access Control List (DACL) for the new  object.
    */
    public init(isContainer : Bool, isDS : Bool, flags : dotnet.System.Security.AccessControl.ControlFlags, owner : Optional<dotnet.System.Security.Principal.SecurityIdentifier>, group : Optional<dotnet.System.Security.Principal.SecurityIdentifier>, systemAcl : Optional<dotnet.System.Security.AccessControl.SystemAcl>, discretionaryAcl : Optional<dotnet.System.Security.AccessControl.DiscretionaryAcl>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_CommonSecurityDescriptor_ctor_0__7__bool_bool_ControlFlags_SecurityIdentifier_SecurityIdentifier_SystemAcl_DiscretionaryAcl(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), flags.get_value(), owner?.get_handle() ?? nil, group?.get_handle() ?? nil, systemAcl?.get_handle() ?? nil, discretionaryAcl?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, System.Security.AccessControl.RawSecurityDescriptor)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
    /**
    Initializes a new instance of the  class from the specified  object.

    - Parameter isContainer: 
         if the new security descriptor is associated with a container object.
    - Parameter isDS: 
         if the new security descriptor is associated with a directory object.
    - Parameter rawSecurityDescriptor: The  object from which to create the new  object.
    */
    public init(isContainer : Bool, isDS : Bool, rawSecurityDescriptor : dotnet.System.Security.AccessControl.RawSecurityDescriptor) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_CommonSecurityDescriptor_ctor_0__3__bool_bool_RawSecurityDescriptor(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), rawSecurityDescriptor.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, System.String)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
    /**
    Initializes a new instance of the  class from the specified Security Descriptor Definition Language (SDDL) string.

    - Parameter isContainer: 
         if the new security descriptor is associated with a container object.
    - Parameter isDS: 
         if the new security descriptor is associated with a directory object.
    - Parameter sddlForm: The SDDL string from which to create the new  object.
    */
    public init(isContainer : Bool, isDS : Bool, sddlForm : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_CommonSecurityDescriptor_ctor_0__3__bool_bool_String(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), sddlForm.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddDiscretionaryAcl(System.Byte, System.Int32)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
    /**
    Sets the  property for this  instance and sets the  flag.

    - Parameter revision: The revision level of the new  object.
    - Parameter trusted: The number of Access Control Entries (ACEs) this  object can contain. This number is to be used only as a hint.
    */
    public func AddDiscretionaryAcl(revision : Swift.UInt8, trusted : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__AddDiscretionaryAcl_0__2__u8_i32(&__thrown, self.get_handle(), revision, trusted);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddSystemAcl(System.Byte, System.Int32)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
    /**
    Sets the  property for this  instance and sets the  flag.

    - Parameter revision: The revision level of the new  object.
    - Parameter trusted: The number of Access Control Entries (ACEs) this  object can contain. This number should only be used as a hint.
    */
    public func AddSystemAcl(revision : Swift.UInt8, trusted : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__AddSystemAcl_0__2__u8_i32(&__thrown, self.get_handle(), revision, trusted);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
    /**
    Removes all access rules for the specified security identifier from the Discretionary Access Control List (DACL) associated with this  object.

    - Parameter sid: The security identifier for which to remove access rules.
    */
    public func PurgeAccessControl(sid : dotnet.System.Security.Principal.SecurityIdentifier) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__PurgeAccessControl_0__1__SecurityIdentifier(&__thrown, self.get_handle(), sid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PurgeAudit(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
    /**
    Removes all audit rules for the specified security identifier from the System Access Control List (SACL) associated with this  object.

    - Parameter sid: The security identifier for which to remove audit rules.
    */
    public func PurgeAudit(sid : dotnet.System.Security.Principal.SecurityIdentifier) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__PurgeAudit_0__1__SecurityIdentifier(&__thrown, self.get_handle(), sid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetDiscretionaryAclProtection(bool, bool)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
    /**
    Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this  object. DACLs that are protected do not inherit access rules from parent containers.

    - Parameter isProtected: 
         to protect the DACL from inheritance.
    - Parameter preserveInheritance: 
         to keep inherited access rules in the DACL;  to remove inherited access rules from the DACL.
    */
    public func SetDiscretionaryAclProtection(isProtected : Bool, preserveInheritance : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__SetDiscretionaryAclProtection_0__2__bool_bool(&__thrown, self.get_handle(), Swift.Int32(isProtected ? 1 : 0), Swift.Int32(preserveInheritance ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSystemAclProtection(bool, bool)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
    /**
    Sets the inheritance protection for the System Access Control List (SACL) associated with this  object. SACLs that are protected do not inherit audit rules from parent containers.

    - Parameter isProtected: 
         to protect the SACL from inheritance.
    - Parameter preserveInheritance: 
         to keep inherited audit rules in the SACL;  to remove inherited audit rules from the SACL.
    */
    public func SetSystemAclProtection(isProtected : Bool, preserveInheritance : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__SetSystemAclProtection_0__2__bool_bool(&__thrown, self.get_handle(), Swift.Int32(isProtected ? 1 : 0), Swift.Int32(preserveInheritance ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.ControlFlags get_ControlFlags()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_ControlFlags
    public override func get_ControlFlags() throws -> dotnet.System.Security.AccessControl.ControlFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_ControlFlags__get_ControlFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.ControlFlags(val: __return);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.DiscretionaryAcl get_DiscretionaryAcl()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_DiscretionaryAcl
    public func get_DiscretionaryAcl() throws -> Optional<dotnet.System.Security.AccessControl.DiscretionaryAcl> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_DiscretionaryAcl__get_DiscretionaryAcl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.AccessControl.DiscretionaryAcl(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DiscretionaryAcl(System.Security.AccessControl.DiscretionaryAcl)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.set_DiscretionaryAcl(System.Security.AccessControl.DiscretionaryAcl)
    public func set_DiscretionaryAcl(value : Optional<dotnet.System.Security.AccessControl.DiscretionaryAcl>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__set_DiscretionaryAcl_0__1__DiscretionaryAcl(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_Group()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_Group
    public override func get_Group() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_SecurityIdentifier__get_Group_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Group(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.set_Group(System.Security.Principal.SecurityIdentifier)
    public override func set_Group(value : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__set_Group_0__1__SecurityIdentifier(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsContainer()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_IsContainer
    public func get_IsContainer() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_bool__get_IsContainer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDiscretionaryAclCanonical()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_IsDiscretionaryAclCanonical
    public func get_IsDiscretionaryAclCanonical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_bool__get_IsDiscretionaryAclCanonical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDS()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_IsDS
    public func get_IsDS() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_bool__get_IsDS_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSystemAclCanonical()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_IsSystemAclCanonical
    public func get_IsSystemAclCanonical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_bool__get_IsSystemAclCanonical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_Owner()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_Owner
    public override func get_Owner() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_SecurityIdentifier__get_Owner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Owner(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.set_Owner(System.Security.Principal.SecurityIdentifier)
    public override func set_Owner(value : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__set_Owner_0__1__SecurityIdentifier(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.SystemAcl get_SystemAcl()
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.get_SystemAcl
    public func get_SystemAcl() throws -> Optional<dotnet.System.Security.AccessControl.SystemAcl> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CommonSecurityDescriptor_SystemAcl__get_SystemAcl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.AccessControl.SystemAcl(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SystemAcl(System.Security.AccessControl.SystemAcl)
// docid: M:System.Security.AccessControl.CommonSecurityDescriptor.set_SystemAcl(System.Security.AccessControl.SystemAcl)
    public func set_SystemAcl(value : Optional<dotnet.System.Security.AccessControl.SystemAcl>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CommonSecurityDescriptor_void__set_SystemAcl_0__1__SystemAcl(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets values that specify behavior of the  object.

    */
    public override var ControlFlags : dotnet.System.Security.AccessControl.ControlFlags {
        get {
            return try! get_ControlFlags();
        }
    }
    /**
    Gets or sets the discretionary access control list (DACL) for this  object. The DACL contains access rules.

    */
    public var DiscretionaryAcl : Optional<dotnet.System.Security.AccessControl.DiscretionaryAcl> {
        get {
            return try! get_DiscretionaryAcl();
        }
        set(v) {
            return try! set_DiscretionaryAcl(value: v!);
        }
    }
    /**
    Gets or sets the primary group for this  object.

    */
    public override var Group : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_Group();
        }
        set(v) {
            return try! set_Group(value: v!);
        }
    }
    /**
    Gets a Boolean value that specifies whether the object associated with this  object is a container object.

    */
    public var IsContainer : Bool {
        get {
            return try! get_IsContainer();
        }
    }
    /**
    Gets a Boolean value that specifies whether the object associated with this  object is a directory object.

    */
    public var IsDS : Bool {
        get {
            return try! get_IsDS();
        }
    }
    /**
    Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this  object is in canonical order.

    */
    public var IsDiscretionaryAclCanonical : Bool {
        get {
            return try! get_IsDiscretionaryAclCanonical();
        }
    }
    /**
    Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this  object is in canonical order.

    */
    public var IsSystemAclCanonical : Bool {
        get {
            return try! get_IsSystemAclCanonical();
        }
    }
    /**
    Gets or sets the owner of the object associated with this  object.

    */
    public override var Owner : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_Owner();
        }
        set(v) {
            return try! set_Owner(value: v!);
        }
    }
    /**
    Gets or sets the System Access Control List (SACL) for this  object. The SACL contains audit rules.

    */
    public var SystemAcl : Optional<dotnet.System.Security.AccessControl.SystemAcl> {
        get {
            return try! get_SystemAcl();
        }
        set(v) {
            return try! set_SystemAcl(value: v!);
        }
    }
} // CommonSecurityDescriptor


// type: System.Security.AccessControl.CompoundAce
    /**
    Represents a compound Access Control Entry (ACE).

    */
public final class CompoundAce
    :
    dotnet.System.Security.AccessControl.KnownAce
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_CompoundAce_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.AccessControl.AceFlags, System.Int32, System.Security.AccessControl.CompoundAceType, System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)
    /**
    Initializes a new instance of the  class.

    - Parameter flags: Contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).
    - Parameter accessMask: The access mask for the ACE.
    - Parameter compoundAceType: A value from the  enumeration.
    - Parameter sid: The  associated with the new ACE.
    */
    public init(flags : dotnet.System.Security.AccessControl.AceFlags, accessMask : Swift.Int32, compoundAceType : dotnet.System.Security.AccessControl.CompoundAceType, sid : dotnet.System.Security.Principal.SecurityIdentifier) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_CompoundAce_ctor_0__4__AceFlags_i32_CompoundAceType_SecurityIdentifier(&__thrown, flags.get_value(), accessMask, compoundAceType.get_value(), sid.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Marshals the contents of the  object into the specified byte array beginning at the specified offset.

    - Parameter binaryForm: The byte array into which the contents of the  is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    public override func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CompoundAce_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.CompoundAce.get_BinaryLength
    public override func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CompoundAce_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.CompoundAceType get_CompoundAceType()
// docid: M:System.Security.AccessControl.CompoundAce.get_CompoundAceType
    public func get_CompoundAceType() throws -> dotnet.System.Security.AccessControl.CompoundAceType {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CompoundAce_CompoundAceType__get_CompoundAceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.CompoundAceType(val: __return);
        }
    }
    // [IsSpecialName] void set_CompoundAceType(System.Security.AccessControl.CompoundAceType)
// docid: M:System.Security.AccessControl.CompoundAce.set_CompoundAceType(System.Security.AccessControl.CompoundAceType)
    public func set_CompoundAceType(value : dotnet.System.Security.AccessControl.CompoundAceType) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CompoundAce_void__set_CompoundAceType_0__1__CompoundAceType(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. This length should be used before marshaling the ACL into a binary array with the  method.

    */
    public override var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Gets or sets the type of this  object.

    */
    public var CompoundAceType : dotnet.System.Security.AccessControl.CompoundAceType {
        get {
            return try! get_CompoundAceType();
        }
        set(v) {
            return try! set_CompoundAceType(value: v);
        }
    }
} // CompoundAce


// type: System.Security.AccessControl.CompoundAceType
    /**
    Specifies the type of a  object.

    */
public struct CompoundAceType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_CompoundAceType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.CompoundAceType Impersonation
    /**
    The  object is used for impersonation.

    */
    public static var Impersonation : dotnet.System.Security.AccessControl.CompoundAceType {
        get {
        let __return = dotnet.System.Security.AccessControl.CompoundAceType(val: System_Security_AccessControl_CompoundAceType_get_Impersonation());
            return __return;
        }
    }
} // CompoundAceType


// type: System.Security.AccessControl.ControlFlags
    /**
    These flags affect the security descriptor behavior.

    */
public struct ControlFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_ControlFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.ControlFlags None
    /**
    No control flags.

    */
    public static var None : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_None());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags OwnerDefaulted
    /**
    Specifies that the owner  was obtained by a defaulting mechanism. Set by resource managers only; should not be set by callers.

    */
    public static var OwnerDefaulted : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_OwnerDefaulted());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags GroupDefaulted
    /**
    Specifies that the group  was obtained by a defaulting mechanism. Set by resource managers only; should not be set by callers.

    */
    public static var GroupDefaulted : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_GroupDefaulted());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags DiscretionaryAclPresent
    /**
    Specifies that the DACL is not . Set by resource managers or users.

    */
    public static var DiscretionaryAclPresent : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_DiscretionaryAclPresent());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags DiscretionaryAclDefaulted
    /**
    Specifies that the DACL was obtained by a defaulting mechanism. Set by resource managers only.

    */
    public static var DiscretionaryAclDefaulted : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_DiscretionaryAclDefaulted());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags SystemAclPresent
    /**
    Specifies that the SACL is not . Set by resource managers or users.

    */
    public static var SystemAclPresent : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_SystemAclPresent());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags SystemAclDefaulted
    /**
    Specifies that the SACL was obtained by a defaulting mechanism. Set by resource managers only.

    */
    public static var SystemAclDefaulted : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_SystemAclDefaulted());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags DiscretionaryAclUntrusted
    /**
    Ignored.

    */
    public static var DiscretionaryAclUntrusted : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_DiscretionaryAclUntrusted());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags ServerSecurity
    /**
    Ignored.

    */
    public static var ServerSecurity : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_ServerSecurity());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags DiscretionaryAclAutoInheritRequired
    /**
    Ignored.

    */
    public static var DiscretionaryAclAutoInheritRequired : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_DiscretionaryAclAutoInheritRequired());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags SystemAclAutoInheritRequired
    /**
    Ignored.

    */
    public static var SystemAclAutoInheritRequired : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_SystemAclAutoInheritRequired());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags DiscretionaryAclAutoInherited
    /**
    Specifies that the Discretionary Access Control List (DACL) has been automatically inherited from the parent. Set by resource managers only.

    */
    public static var DiscretionaryAclAutoInherited : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_DiscretionaryAclAutoInherited());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags SystemAclAutoInherited
    /**
    Specifies that the System Access Control List (SACL) has been automatically inherited from the parent. Set by resource managers only.

    */
    public static var SystemAclAutoInherited : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_SystemAclAutoInherited());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags DiscretionaryAclProtected
    /**
    Specifies that the resource manager prevents auto-inheritance. Set by resource managers or users.

    */
    public static var DiscretionaryAclProtected : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_DiscretionaryAclProtected());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags SystemAclProtected
    /**
    Specifies that the resource manager prevents auto-inheritance. Set by resource managers or users.

    */
    public static var SystemAclProtected : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_SystemAclProtected());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags RMControlValid
    /**
    Specifies that the contents of the Reserved field are valid.

    */
    public static var RMControlValid : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_RMControlValid());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ControlFlags SelfRelative
    /**
    Specifies that the security descriptor binary representation is in the self-relative format.  This flag is always set.

    */
    public static var SelfRelative : dotnet.System.Security.AccessControl.ControlFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ControlFlags(val: System_Security_AccessControl_ControlFlags_get_SelfRelative());
            return __return;
        }
    }
} // ControlFlags


// type: System.Security.AccessControl.CustomAce
    /**
    Represents an Access Control Entry (ACE) that is not defined by one of the members of the  enumeration.

    */
public final class CustomAce
    :
    dotnet.System.Security.AccessControl.GenericAce
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_CustomAce_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 MaxOpaqueLength
    /**
    Returns the maximum allowed length of an opaque data blob for this  object.

    */
    public class var MaxOpaqueLength : Swift.Int32 {
        get {
        let __return = System_Security_AccessControl_CustomAce_get_MaxOpaqueLength();
            return __return;
        }
    }
    // .ctor(System.Security.AccessControl.AceType, System.Security.AccessControl.AceFlags, System.Byte[])
// docid: M:System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])
    /**
    Initializes a new instance of the  class.

    - Parameter type: Type of the new Access Control Entry (ACE). This value must be greater than .
    - Parameter flags: Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new ACE.
    - Parameter opaque: An array of byte values that contains the data for the new ACE. This value can be . The length of this array must not be greater than the value of the  field, and must be a multiple of four.
    */
    public init(type : dotnet.System.Security.AccessControl.AceType, flags : dotnet.System.Security.AccessControl.AceFlags, opaque : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_CustomAce_ctor_0__3__AceType_AceFlags_u8Array(&__thrown, type.get_value(), flags.get_value(), (opaque?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Marshals the contents of the  object into the specified byte array beginning at the specified offset.

    - Parameter binaryForm: The byte array into which the contents of the  is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    public override func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CustomAce_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Byte[] GetOpaque()
// docid: M:System.Security.AccessControl.CustomAce.GetOpaque
    /**
    Returns the opaque data associated with this  object.

    - Returns: An array of byte values that represents the opaque data associated with this  object.

    */
    public func GetOpaque() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CustomAce_u8Array__GetOpaque_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetOpaque(System.Byte[])
// docid: M:System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
    /**
    Sets the opaque callback data associated with this  object.

    - Parameter opaque: An array of byte values that represents the opaque callback data for this  object.
    */
    public func SetOpaque(opaque : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_CustomAce_void__SetOpaque_0__1__u8Array(&__thrown, self.get_handle(), (opaque?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.CustomAce.get_BinaryLength
    public override func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CustomAce_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_OpaqueLength()
// docid: M:System.Security.AccessControl.CustomAce.get_OpaqueLength
    public func get_OpaqueLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_CustomAce_i32__get_OpaqueLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. This length should be used before marshaling the ACL into a binary array with the  method.

    */
    public override var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Gets the length of the opaque data associated with this  object.

    */
    public var OpaqueLength : Swift.Int32 {
        get {
            return try! get_OpaqueLength();
        }
    }
} // CustomAce


// type: System.Security.AccessControl.DiscretionaryAcl
    /**
    Represents a Discretionary Access Control List (DACL).

    */
public final class DiscretionaryAcl
    :
    dotnet.System.Security.AccessControl.CommonAcl
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_DiscretionaryAcl_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool, bool, System.Byte, System.Int32)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter isContainer: 
         if the new  object is a container.
    - Parameter isDS: 
         if the new  object is a directory object Access Control List (ACL).
    - Parameter revision: The revision level of the new  object.
    - Parameter capacity: The number of Access Control Entries (ACEs) this  object can contain. This number is to be used only as a hint.
    */
    public init(isContainer : Bool, isDS : Bool, revision : Swift.UInt8, capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_DiscretionaryAcl_ctor_0__4__bool_bool_u8_i32(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), revision, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, System.Int32)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Int32)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter isContainer: 
         if the new  object is a container.
    - Parameter isDS: 
         if the new  object is a directory object Access Control List (ACL).
    - Parameter capacity: The number of Access Control Entries (ACEs) this  object can contain. This number is to be used only as a hint.
    */
    public init(isContainer : Bool, isDS : Bool, capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_DiscretionaryAcl_ctor_0__3__bool_bool_i32(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, System.Security.AccessControl.RawAcl)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)
    /**
    Initializes a new instance of the  class with the specified values from the specified  object.

    - Parameter isContainer: 
         if the new  object is a container.
    - Parameter isDS: 
         if the new  object is a directory object Access Control List (ACL).
    - Parameter rawAcl: The underlying  object for the new  object. Specify  to create an empty ACL.
    */
    public init(isContainer : Bool, isDS : Bool, rawAcl : Optional<dotnet.System.Security.AccessControl.RawAcl>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_DiscretionaryAcl_ctor_0__3__bool_bool_RawAcl(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), rawAcl?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
    /**
    Adds an Access Control Entry (ACE) with the specified settings to the current  object.

    - Parameter accessType: The type of access control (allow or deny) to add.
    - Parameter sid: The  for which to add an ACE.
    - Parameter accessMask: The access rule for the new ACE.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the new ACE.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the new ACE.
    */
    public func AddAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__AddAccess_0__5__AccessControlType_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
    /**
    Adds an Access Control Entry (ACE) with the specified settings to the current  object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type for the new ACE.

    - Parameter accessType: The type of access control (allow or deny) to add.
    - Parameter sid: The  for which to add an ACE.
    - Parameter accessMask: The access rule for the new ACE.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the new ACE.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the new ACE.
    - Parameter objectFlags: Flags that specify if the  and  parameters contain non- values.
    - Parameter objectType: The identity of the class of objects to which the new ACE applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the new ACE.
    */
    public func AddAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, objectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__AddAccess_0__8__AccessControlType_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags_ObjectAceFlags_Guid_Guid(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value(), objectFlags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAccessRule)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
    /**
    Adds an Access Control Entry (ACE) with the specified settings to the current  object.

    - Parameter accessType: The type of access control (allow or deny) to add.
    - Parameter sid: The  for which to add an ACE.
    - Parameter rule: The  for the new access.
    */
    public func AddAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, rule : dotnet.System.Security.AccessControl.ObjectAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__AddAccess_0__3__AccessControlType_SecurityIdentifier_ObjectAccessRule(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool RemoveAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
    /**
    Removes the specified access control rule from the current  object.

    - Parameter accessType: The type of access control (allow or deny) to remove.
    - Parameter sid: The  for which to remove an access control rule.
    - Parameter accessMask: The access mask for the rule to be removed.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the rule to be removed.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the rule to be removed.
    - Returns: 
         if this method successfully removes the specified access; otherwise, .

    */
    public func RemoveAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_DiscretionaryAcl_bool__RemoveAccess_0__5__AccessControlType_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool RemoveAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
    /**
    Removes the specified access control rule from the current  object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.

    - Parameter accessType: The type of access control (allow or deny) to remove.
    - Parameter sid: The  for which to remove an access control rule.
    - Parameter accessMask: The access mask for the access control rule to be removed.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the access control rule to be removed.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the access control rule to be removed.
    - Parameter objectFlags: Flags that specify if the  and  parameters contain non- values.
    - Parameter objectType: The identity of the class of objects to which the removed access control rule applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the removed access control rule.
    - Returns: 
         if this method successfully removes the specified access; otherwise, .

    */
    public func RemoveAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, objectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_DiscretionaryAcl_bool__RemoveAccess_0__8__AccessControlType_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags_ObjectAceFlags_Guid_Guid(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value(), objectFlags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool RemoveAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAccessRule)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
    /**
    Removes the specified access control rule from the current  object.

    - Parameter accessType: The type of access control (allow or deny) to remove.
    - Parameter sid: The  for which to remove an access control rule.
    - Parameter rule: The  for which to remove access.
    - Returns: Returns .

    */
    public func RemoveAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, rule : dotnet.System.Security.AccessControl.ObjectAccessRule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_DiscretionaryAcl_bool__RemoveAccess_0__3__AccessControlType_SecurityIdentifier_ObjectAccessRule(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAccessSpecific(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
    /**
    Removes the specified Access Control Entry (ACE) from the current  object.

    - Parameter accessType: The type of access control (allow or deny) to remove.
    - Parameter sid: The  for which to remove an ACE.
    - Parameter accessMask: The access mask for the ACE to be removed.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the ACE to be removed.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the ACE to be removed.
    */
    public func RemoveAccessSpecific(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__RemoveAccessSpecific_0__5__AccessControlType_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAccessSpecific(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
    /**
    Removes the specified Access Control Entry (ACE) from the current  object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type for the ACE to be removed.

    - Parameter accessType: The type of access control (allow or deny) to remove.
    - Parameter sid: The  for which to remove an ACE.
    - Parameter accessMask: The access mask for the ACE to be removed.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the ACE to be removed.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the ACE to be removed.
    - Parameter objectFlags: Flags that specify if the  and  parameters contain non- values.
    - Parameter objectType: The identity of the class of objects to which the removed ACE applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the removed ACE.
    */
    public func RemoveAccessSpecific(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, objectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__RemoveAccessSpecific_0__8__AccessControlType_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags_ObjectAceFlags_Guid_Guid(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value(), objectFlags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAccessSpecific(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAccessRule)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
    /**
    Removes the specified Access Control Entry (ACE) from the current  object.

    - Parameter accessType: The type of access control (allow or deny) to remove.
    - Parameter sid: The  for which to remove an ACE.
    - Parameter rule: The  for which to remove access.
    */
    public func RemoveAccessSpecific(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, rule : dotnet.System.Security.AccessControl.ObjectAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__RemoveAccessSpecific_0__3__AccessControlType_SecurityIdentifier_ObjectAccessRule(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
    /**
    Sets the specified access control for the specified  object.

    - Parameter accessType: The type of access control (allow or deny) to set.
    - Parameter sid: The  for which to set an ACE.
    - Parameter accessMask: The access rule for the new ACE.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the new ACE.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the new ACE.
    */
    public func SetAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__SetAccess_0__5__AccessControlType_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
    /**
    Sets the specified access control for the specified  object.

    - Parameter accessType: The type of access control (allow or deny) to set.
    - Parameter sid: The  for which to set an ACE.
    - Parameter accessMask: The access rule for the new ACE.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the new ACE.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the new ACE.
    - Parameter objectFlags: Flags that specify if the  and  parameters contain non- values.
    - Parameter objectType: The identity of the class of objects to which the new ACE applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the new ACE.
    */
    public func SetAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, objectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__SetAccess_0__8__AccessControlType_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags_ObjectAceFlags_Guid_Guid(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value(), objectFlags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAccessRule)
// docid: M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
    /**
    Sets the specified access control for the specified  object.

    - Parameter accessType: The type of access control (allow or deny) to set.
    - Parameter sid: The  for which to set an ACE.
    - Parameter rule: The  for which to set access.
    */
    public func SetAccess(accessType : dotnet.System.Security.AccessControl.AccessControlType, sid : dotnet.System.Security.Principal.SecurityIdentifier, rule : dotnet.System.Security.AccessControl.ObjectAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_DiscretionaryAcl_void__SetAccess_0__3__AccessControlType_SecurityIdentifier_ObjectAccessRule(&__thrown, self.get_handle(), accessType.get_value(), sid.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DiscretionaryAcl


// type: System.Security.AccessControl.GenericAce
    /**
    Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.

    */
open class GenericAce
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_GenericAce_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Security.AccessControl.GenericAce Copy()
// docid: M:System.Security.AccessControl.GenericAce.Copy
    /**
    Creates a deep copy of this Access Control Entry (ACE).

    - Returns: The  object that this method creates.

    */
    open func Copy() throws -> dotnet.System.Security.AccessControl.GenericAce {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_GenericAce__Copy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.GenericAce(hndl : __return);
        }
    }
    // System.Security.AccessControl.GenericAce CreateFromBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    /**
    Creates a  object from the specified binary data.

    - Parameter binaryForm: The binary data from which to create the new  object.
    - Parameter offset: The offset at which to begin unmarshaling.
    - Returns: The  object this method creates.

    */
    open class func CreateFromBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws -> dotnet.System.Security.AccessControl.GenericAce {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_GenericAce__CreateFromBinaryForm_0__2__u8Array_i32(&__thrown, binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.GenericAce(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Security.AccessControl.GenericAce.Equals(System.Object)
    /**
    Determines whether the specified  object is equal to the current  object.

    - Parameter o: The  object to compare to the current  object.
    - Returns: 
         if the specified  object is equal to the current  object; otherwise, .

    */
    open /* method final */ func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Marshals the contents of the  object into the specified byte array beginning at the specified offset.

    - Parameter binaryForm: The byte array into which the contents of the  is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    open func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_GenericAce_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Security.AccessControl.GenericAce.GetHashCode
    /**
    Serves as a hash function for the  class. The   method is suitable for use in hashing algorithms and data structures like a hash table.

    - Returns: A hash code for the current  object.

    */
    open /* method final */ override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Security.AccessControl.GenericAce, System.Security.AccessControl.GenericAce)
// docid: M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
    /**
    Determines whether the specified  objects are considered equal.

    - Parameter left: The first  object to compare.
    - Parameter right: The second  to compare.
    - Returns: 
         if the two  objects are equal; otherwise, .

    */
    open class func op_Equality(left : Optional<dotnet.System.Security.AccessControl.GenericAce>, right : Optional<dotnet.System.Security.AccessControl.GenericAce>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_bool__op_Equality_0__2__GenericAce_GenericAce(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Security.AccessControl.GenericAce, System.Security.AccessControl.GenericAce)
// docid: M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
    /**
    Determines whether the specified  objects are considered unequal.

    - Parameter left: The first  object to compare.
    - Parameter right: The second  to compare.
    - Returns: 
         if the two  objects are unequal; otherwise, .

    */
    open class func op_Inequality(left : Optional<dotnet.System.Security.AccessControl.GenericAce>, right : Optional<dotnet.System.Security.AccessControl.GenericAce>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_bool__op_Inequality_0__2__GenericAce_GenericAce(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.AceFlags get_AceFlags()
// docid: M:System.Security.AccessControl.GenericAce.get_AceFlags
    open func get_AceFlags() throws -> dotnet.System.Security.AccessControl.AceFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_AceFlags__get_AceFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AceFlags(val: __return);
        }
    }
    // [IsSpecialName] void set_AceFlags(System.Security.AccessControl.AceFlags)
// docid: M:System.Security.AccessControl.GenericAce.set_AceFlags(System.Security.AccessControl.AceFlags)
    open func set_AceFlags(value : dotnet.System.Security.AccessControl.AceFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_GenericAce_void__set_AceFlags_0__1__AceFlags(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.AceType get_AceType()
// docid: M:System.Security.AccessControl.GenericAce.get_AceType
    open func get_AceType() throws -> dotnet.System.Security.AccessControl.AceType {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_AceType__get_AceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AceType(val: __return);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.AuditFlags get_AuditFlags()
// docid: M:System.Security.AccessControl.GenericAce.get_AuditFlags
    open func get_AuditFlags() throws -> dotnet.System.Security.AccessControl.AuditFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_AuditFlags__get_AuditFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuditFlags(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.GenericAce.get_BinaryLength
    open func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.InheritanceFlags get_InheritanceFlags()
// docid: M:System.Security.AccessControl.GenericAce.get_InheritanceFlags
    open func get_InheritanceFlags() throws -> dotnet.System.Security.AccessControl.InheritanceFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_InheritanceFlags__get_InheritanceFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.InheritanceFlags(val: __return);
        }
    }
    // [IsSpecialName] bool get_IsInherited()
// docid: M:System.Security.AccessControl.GenericAce.get_IsInherited
    open func get_IsInherited() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_bool__get_IsInherited_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.PropagationFlags get_PropagationFlags()
// docid: M:System.Security.AccessControl.GenericAce.get_PropagationFlags
    open func get_PropagationFlags() throws -> dotnet.System.Security.AccessControl.PropagationFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAce_PropagationFlags__get_PropagationFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.PropagationFlags(val: __return);
        }
    }
    /**
    Gets or sets the  associated with this  object.

    */
    open var AceFlags : dotnet.System.Security.AccessControl.AceFlags {
        get {
            return try! get_AceFlags();
        }
        set(v) {
            return try! set_AceFlags(value: v);
        }
    }
    /**
    Gets the type of this Access Control Entry (ACE).

    */
    open var AceType : dotnet.System.Security.AccessControl.AceType {
        get {
            return try! get_AceType();
        }
    }
    /**
    Gets the audit information associated with this Access Control Entry (ACE).

    */
    open var AuditFlags : dotnet.System.Security.AccessControl.AuditFlags {
        get {
            return try! get_AuditFlags();
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. This length should be used before marshaling the ACL into a binary array with the  method.

    */
    open var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Gets flags that specify the inheritance properties of this Access Control Entry (ACE).

    */
    open var InheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags {
        get {
            return try! get_InheritanceFlags();
        }
    }
    /**
    Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.

    */
    open var IsInherited : Bool {
        get {
            return try! get_IsInherited();
        }
    }
    /**
    Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).

    */
    open var PropagationFlags : dotnet.System.Security.AccessControl.PropagationFlags {
        get {
            return try! get_PropagationFlags();
        }
    }
} // GenericAce


// type: System.Security.AccessControl.GenericAcl
    /**
    Represents an access control list (ACL) and is the base class for the , , , and  classes.

    */
open class GenericAcl
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_GenericAcl_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Byte AclRevision
    /**
    The revision level of the current . This value is returned by the  property for Access Control Lists (ACLs) that are not associated with Directory Services objects.

    */
    open class var AclRevision : Swift.UInt8 {
        get {
        let __return = System_Security_AccessControl_GenericAcl_get_AclRevision();
            return __return;
        }
    }
    // static field: System.Byte AclRevisionDS
    /**
    The revision level of the current . This value is returned by the  property for Access Control Lists (ACLs) that are associated with Directory Services objects.

    */
    open class var AclRevisionDS : Swift.UInt8 {
        get {
        let __return = System_Security_AccessControl_GenericAcl_get_AclRevisionDS();
            return __return;
        }
    }
    // static field: System.Int32 MaxBinaryLength
    /**
    The maximum allowed binary length of a  object.

    */
    open class var MaxBinaryLength : Swift.Int32 {
        get {
        let __return = System_Security_AccessControl_GenericAcl_get_MaxBinaryLength();
            return __return;
        }
    }
    // void CopyTo(System.Security.AccessControl.GenericAce[], System.Int32)
// docid: M:System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
    /**
    Copies each  of the current  into the specified array.

    - Parameter array: The array into which copies of the  objects contained by the current  are placed.
    - Parameter index: The zero-based index of  where the copying begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Security.AccessControl.GenericAce>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_GenericAcl_void__CopyTo_0__2__GenericAceArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Marshals the contents of the  object into the specified byte array beginning at the specified offset.

    - Parameter binaryForm: The byte array into which the contents of the  is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    open func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_GenericAcl_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.AccessControl.AceEnumerator GetEnumerator()
// docid: M:System.Security.AccessControl.GenericAcl.GetEnumerator
    /**
    Retrieves an object that you can use to iterate through the access control entries (ACEs) in an access control list (ACL).

    - Returns: An enumerator object.

    */
    open func GetEnumerator() throws -> dotnet.System.Security.AccessControl.AceEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAcl_AceEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AceEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.GenericAcl.get_BinaryLength
    open func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAcl_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.AccessControl.GenericAcl.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAcl_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Security.AccessControl.GenericAcl.get_IsSynchronized
    open /* method final */ func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAcl_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Byte get_Revision()
// docid: M:System.Security.AccessControl.GenericAcl.get_Revision
    open func get_Revision() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAcl_u8__get_Revision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Security.AccessControl.GenericAcl.get_SyncRoot
    open func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAcl_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.GenericAce get_Item(System.Int32)
// docid: M:System.Security.AccessControl.GenericAcl.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Security.AccessControl.GenericAce {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericAcl_GenericAce__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.GenericAce(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Security.AccessControl.GenericAce)
// docid: M:System.Security.AccessControl.GenericAcl.set_Item(System.Int32,System.Security.AccessControl.GenericAce)
    open func set_Item(index : Swift.Int32, value : dotnet.System.Security.AccessControl.GenericAce) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_GenericAcl_void__set_Item_0__2__i32_GenericAce(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. This length should be used before marshaling the ACL into a binary array with the  method.

    */
    open var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Gets the number of access control entries (ACEs) in the current  object.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    This property is always set to . It is implemented only because it is required for the implementation of the  interface.

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets the revision level of the .

    */
    open var Revision : Swift.UInt8 {
        get {
            return try! get_Revision();
        }
    }
    /**
    This property always returns . It is implemented only because it is required for the implementation of the  interface.

    */
    open var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // GenericAcl


// type: System.Security.AccessControl.GenericSecurityDescriptor
    /**
    Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).

    */
open class GenericSecurityDescriptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_GenericSecurityDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Returns an array of byte values that represents the information contained in this  object.

    - Parameter binaryForm: The byte array into which the contents of the  is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    open func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_GenericSecurityDescriptor_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetSddlForm(System.Security.AccessControl.AccessControlSections)
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
    /**
    Returns the Security Descriptor Definition Language (SDDL) representation of the specified sections of the security descriptor that this  object represents.

    - Parameter includeSections: Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.
    - Returns: The SDDL representation of the specified sections of the security descriptor associated with this  object.

    */
    open func GetSddlForm(includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericSecurityDescriptor_String__GetSddlForm_0__1__AccessControlSections(&__thrown, self.get_handle(), includeSections.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsSddlConversionSupported()
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
    /**
    Returns a boolean value that specifies whether the security descriptor associated with this   object can be converted to the Security Descriptor Definition Language (SDDL) format.

    - Returns: 
         if the security descriptor associated with this   object can be converted to the Security Descriptor Definition Language (SDDL) format; otherwise, .

    */
    open class func IsSddlConversionSupported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericSecurityDescriptor_bool__IsSddlConversionSupported_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.get_BinaryLength
    open func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericSecurityDescriptor_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.ControlFlags get_ControlFlags()
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.get_ControlFlags
    open func get_ControlFlags() throws -> dotnet.System.Security.AccessControl.ControlFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericSecurityDescriptor_ControlFlags__get_ControlFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.ControlFlags(val: __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_Group()
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.get_Group
    open func get_Group() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericSecurityDescriptor_SecurityIdentifier__get_Group_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Group(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.set_Group(System.Security.Principal.SecurityIdentifier)
    open func set_Group(value : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_GenericSecurityDescriptor_void__set_Group_0__1__SecurityIdentifier(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_Owner()
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.get_Owner
    open func get_Owner() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericSecurityDescriptor_SecurityIdentifier__get_Owner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Owner(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.set_Owner(System.Security.Principal.SecurityIdentifier)
    open func set_Owner(value : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_GenericSecurityDescriptor_void__set_Owner_0__1__SecurityIdentifier(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte get_Revision()
// docid: M:System.Security.AccessControl.GenericSecurityDescriptor.get_Revision
    open class func get_Revision() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_GenericSecurityDescriptor_u8__get_Revision_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. This length should be used before marshaling the ACL into a binary array with the  method.

    */
    open var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Gets values that specify behavior of the  object.

    */
    open var ControlFlags : dotnet.System.Security.AccessControl.ControlFlags {
        get {
            return try! get_ControlFlags();
        }
    }
    /**
    Gets or sets the primary group for this  object.

    */
    open var Group : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_Group();
        }
        set(v) {
            return try! set_Group(value: v!);
        }
    }
    /**
    Gets or sets the owner of the object associated with this  object.

    */
    open var Owner : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_Owner();
        }
        set(v) {
            return try! set_Owner(value: v!);
        }
    }
    /**
    Gets the revision level of the  object.

    */
    public static var Revision : Swift.UInt8 {
        get {
            return try! get_Revision();
        }
    }
} // GenericSecurityDescriptor


// type: System.Security.AccessControl.InheritanceFlags
    /**
    Inheritance flags specify the semantics of inheritance for access control entries (ACEs).

    */
public struct InheritanceFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_InheritanceFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.InheritanceFlags None
    /**
    The ACE is not inherited by child objects.

    */
    public static var None : dotnet.System.Security.AccessControl.InheritanceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.InheritanceFlags(val: System_Security_AccessControl_InheritanceFlags_get_None());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.InheritanceFlags ContainerInherit
    /**
    The ACE is inherited by child container objects.

    */
    public static var ContainerInherit : dotnet.System.Security.AccessControl.InheritanceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.InheritanceFlags(val: System_Security_AccessControl_InheritanceFlags_get_ContainerInherit());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.InheritanceFlags ObjectInherit
    /**
    The ACE is inherited by child leaf objects.

    */
    public static var ObjectInherit : dotnet.System.Security.AccessControl.InheritanceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.InheritanceFlags(val: System_Security_AccessControl_InheritanceFlags_get_ObjectInherit());
            return __return;
        }
    }
} // InheritanceFlags


// type: System.Security.AccessControl.KnownAce
    /**
    Encapsulates all Access Control Entry (ACE) types currently defined by Microsoft Corporation. All  objects contain a 32-bit access mask and a  object.

    */
open class KnownAce
    :
    dotnet.System.Security.AccessControl.GenericAce
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_KnownAce_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Int32 get_AccessMask()
// docid: M:System.Security.AccessControl.KnownAce.get_AccessMask
    open func get_AccessMask() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_KnownAce_i32__get_AccessMask_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_AccessMask(System.Int32)
// docid: M:System.Security.AccessControl.KnownAce.set_AccessMask(System.Int32)
    open func set_AccessMask(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_KnownAce_void__set_AccessMask_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_SecurityIdentifier()
// docid: M:System.Security.AccessControl.KnownAce.get_SecurityIdentifier
    open func get_SecurityIdentifier() throws -> dotnet.System.Security.Principal.SecurityIdentifier {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_KnownAce_SecurityIdentifier__get_SecurityIdentifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SecurityIdentifier(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.KnownAce.set_SecurityIdentifier(System.Security.Principal.SecurityIdentifier)
    open func set_SecurityIdentifier(value : dotnet.System.Security.Principal.SecurityIdentifier) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_KnownAce_void__set_SecurityIdentifier_0__1__SecurityIdentifier(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the access mask for this  object.

    */
    open var AccessMask : Swift.Int32 {
        get {
            return try! get_AccessMask();
        }
        set(v) {
            return try! set_AccessMask(value: v);
        }
    }
    /**
    Gets or sets the  object associated with this  object.

    */
    open var SecurityIdentifier : dotnet.System.Security.Principal.SecurityIdentifier {
        get {
            return try! get_SecurityIdentifier();
        }
        set(v) {
            return try! set_SecurityIdentifier(value: v);
        }
    }
} // KnownAce


// type: System.Security.AccessControl.NativeObjectSecurity
    /**
    Provides the ability to control access to native objects without direct manipulation of Access Control Lists (ACLs). Native object types are defined by the  enumeration.

    */
open class NativeObjectSecurity
    :
    dotnet.System.Security.AccessControl.CommonObjectSecurity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_NativeObjectSecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // NativeObjectSecurity


// type: System.Security.AccessControl.ObjectAccessRule
    /**
    Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An  object also contains information about the type of object to which the rule applies, the type of child object that can inherit the rule, how the rule is inherited by child objects, and how that inheritance is propagated.

    */
open class ObjectAccessRule
    :
    dotnet.System.Security.AccessControl.AccessRule
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_ObjectAccessRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Guid get_InheritedObjectType()
// docid: M:System.Security.AccessControl.ObjectAccessRule.get_InheritedObjectType
    open func get_InheritedObjectType() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAccessRule_Guid__get_InheritedObjectType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.ObjectAceFlags get_ObjectFlags()
// docid: M:System.Security.AccessControl.ObjectAccessRule.get_ObjectFlags
    open func get_ObjectFlags() throws -> dotnet.System.Security.AccessControl.ObjectAceFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAccessRule_ObjectAceFlags__get_ObjectFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.ObjectAceFlags(val: __return);
        }
    }
    // [IsSpecialName] System.Guid get_ObjectType()
// docid: M:System.Security.AccessControl.ObjectAccessRule.get_ObjectType
    open func get_ObjectType() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAccessRule_Guid__get_ObjectType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    /**
    Gets the type of child object that can inherit the  object.

    */
    open var InheritedObjectType : dotnet.System.Guid {
        get {
            return try! get_InheritedObjectType();
        }
    }
    /**
    Gets flags that specify if the  and  properties of the  object contain valid values.

    */
    open var ObjectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags {
        get {
            return try! get_ObjectFlags();
        }
    }
    /**
    Gets the type of object to which the  applies.

    */
    open var ObjectType : dotnet.System.Guid {
        get {
            return try! get_ObjectType();
        }
    }
} // ObjectAccessRule


// type: System.Security.AccessControl.ObjectAce
    /**
    Controls access to Directory Services objects. This class represents an Access Control Entry (ACE) associated with a directory object.

    */
public final class ObjectAce
    :
    dotnet.System.Security.AccessControl.QualifiedAce
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_ObjectAce_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid, bool, System.Byte[])
// docid: M:System.Security.AccessControl.ObjectAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])
    /**
    Initiates a new instance of the  class.

    - Parameter aceFlags: The inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).
    - Parameter qualifier: The use of the new ACE.
    - Parameter accessMask: The access mask for the ACE.
    - Parameter sid: The  associated with the new ACE.
    - Parameter flags: Whether the  and  parameters contain valid object GUIDs.
    - Parameter type: A GUID that identifies the object type to which the new ACE applies.
    - Parameter inheritedType: A GUID that identifies the object type that can inherit the new ACE.
    - Parameter isCallback: 
         if the new ACE is a callback type ACE.
    - Parameter opaque: Opaque data associated with the new ACE. This is allowed only for callback ACE types. The length of this array must not be greater than the return value of the  method.
    */
    public init(aceFlags : dotnet.System.Security.AccessControl.AceFlags, qualifier : dotnet.System.Security.AccessControl.AceQualifier, accessMask : Swift.Int32, sid : dotnet.System.Security.Principal.SecurityIdentifier, flags : dotnet.System.Security.AccessControl.ObjectAceFlags, type : dotnet.System.Guid, inheritedType : dotnet.System.Guid, isCallback : Bool, opaque : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_ObjectAce_ctor_0__9__AceFlags_AceQualifier_i32_SecurityIdentifier_ObjectAceFlags_Guid_Guid_bool_u8Array(&__thrown, aceFlags.get_value(), qualifier.get_value(), accessMask, sid.get_handle(), flags.get_value(), type.get_handle(), inheritedType.get_handle(), Swift.Int32(isCallback ? 1 : 0), (opaque?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Marshals the contents of the  object into the specified byte array beginning at the specified offset.

    - Parameter binaryForm: The byte array into which the contents of the  is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    public override func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectAce_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 MaxOpaqueLength(bool)
// docid: M:System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)
    /**
    Returns the maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).

    - Parameter isCallback: True if the  is a callback ACE type.
    - Returns: The maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).

    */
    public class func MaxOpaqueLength(isCallback : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAce_i32__MaxOpaqueLength_0__1__bool(&__thrown, Swift.Int32(isCallback ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.ObjectAce.get_BinaryLength
    public override func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAce_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Guid get_InheritedObjectAceType()
// docid: M:System.Security.AccessControl.ObjectAce.get_InheritedObjectAceType
    public func get_InheritedObjectAceType() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAce_Guid__get_InheritedObjectAceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InheritedObjectAceType(System.Guid)
// docid: M:System.Security.AccessControl.ObjectAce.set_InheritedObjectAceType(System.Guid)
    public func set_InheritedObjectAceType(value : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectAce_void__set_InheritedObjectAceType_0__1__Guid(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.ObjectAceFlags get_ObjectAceFlags()
// docid: M:System.Security.AccessControl.ObjectAce.get_ObjectAceFlags
    public func get_ObjectAceFlags() throws -> dotnet.System.Security.AccessControl.ObjectAceFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAce_ObjectAceFlags__get_ObjectAceFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.ObjectAceFlags(val: __return);
        }
    }
    // [IsSpecialName] void set_ObjectAceFlags(System.Security.AccessControl.ObjectAceFlags)
// docid: M:System.Security.AccessControl.ObjectAce.set_ObjectAceFlags(System.Security.AccessControl.ObjectAceFlags)
    public func set_ObjectAceFlags(value : dotnet.System.Security.AccessControl.ObjectAceFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectAce_void__set_ObjectAceFlags_0__1__ObjectAceFlags(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Guid get_ObjectAceType()
// docid: M:System.Security.AccessControl.ObjectAce.get_ObjectAceType
    public func get_ObjectAceType() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAce_Guid__get_ObjectAceType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ObjectAceType(System.Guid)
// docid: M:System.Security.AccessControl.ObjectAce.set_ObjectAceType(System.Guid)
    public func set_ObjectAceType(value : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectAce_void__set_ObjectAceType_0__1__Guid(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. This length should be used before marshaling the ACL into a binary array with the  method.

    */
    public override var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Gets or sets the GUID of the object type that can inherit the Access Control Entry (ACE) that this  object represents.

    */
    public var InheritedObjectAceType : dotnet.System.Guid {
        get {
            return try! get_InheritedObjectAceType();
        }
        set(v) {
            return try! set_InheritedObjectAceType(value: v);
        }
    }
    /**
    Gets or sets flags that specify whether the  and  properties contain values that identify valid object types.

    */
    public var ObjectAceFlags : dotnet.System.Security.AccessControl.ObjectAceFlags {
        get {
            return try! get_ObjectAceFlags();
        }
        set(v) {
            return try! set_ObjectAceFlags(value: v);
        }
    }
    /**
    Gets or sets the GUID of the object type associated with this  object.

    */
    public var ObjectAceType : dotnet.System.Guid {
        get {
            return try! get_ObjectAceType();
        }
        set(v) {
            return try! set_ObjectAceType(value: v);
        }
    }
} // ObjectAce


// type: System.Security.AccessControl.ObjectAceFlags
    /**
    Specifies the presence of object types for Access Control Entries (ACEs).

    */
public struct ObjectAceFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_ObjectAceFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.ObjectAceFlags None
    /**
    No object types are present.

    */
    public static var None : dotnet.System.Security.AccessControl.ObjectAceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ObjectAceFlags(val: System_Security_AccessControl_ObjectAceFlags_get_None());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ObjectAceFlags ObjectAceTypePresent
    /**
    The type of object that is associated with the ACE is present.

    */
    public static var ObjectAceTypePresent : dotnet.System.Security.AccessControl.ObjectAceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ObjectAceFlags(val: System_Security_AccessControl_ObjectAceFlags_get_ObjectAceTypePresent());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ObjectAceFlags InheritedObjectAceTypePresent
    /**
    The type of object that can inherit the ACE.

    */
    public static var InheritedObjectAceTypePresent : dotnet.System.Security.AccessControl.ObjectAceFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.ObjectAceFlags(val: System_Security_AccessControl_ObjectAceFlags_get_InheritedObjectAceTypePresent());
            return __return;
        }
    }
} // ObjectAceFlags


// type: System.Security.AccessControl.ObjectAuditRule
    /**
    Represents a combination of a user's identity, an access mask, and audit conditions. An  object also contains information about the type of object to which the rule applies, the type of child object that can inherit the rule, how the rule is inherited by child objects, and how that inheritance is propagated.

    */
open class ObjectAuditRule
    :
    dotnet.System.Security.AccessControl.AuditRule
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_ObjectAuditRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Guid get_InheritedObjectType()
// docid: M:System.Security.AccessControl.ObjectAuditRule.get_InheritedObjectType
    open func get_InheritedObjectType() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAuditRule_Guid__get_InheritedObjectType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.ObjectAceFlags get_ObjectFlags()
// docid: M:System.Security.AccessControl.ObjectAuditRule.get_ObjectFlags
    open func get_ObjectFlags() throws -> dotnet.System.Security.AccessControl.ObjectAceFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAuditRule_ObjectAceFlags__get_ObjectFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.ObjectAceFlags(val: __return);
        }
    }
    // [IsSpecialName] System.Guid get_ObjectType()
// docid: M:System.Security.AccessControl.ObjectAuditRule.get_ObjectType
    open func get_ObjectType() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectAuditRule_Guid__get_ObjectType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    /**
    Gets the type of child object that can inherit the  object.

    */
    open var InheritedObjectType : dotnet.System.Guid {
        get {
            return try! get_InheritedObjectType();
        }
    }
    /**
    
         and  properties of the  object contain valid values.

    */
    open var ObjectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags {
        get {
            return try! get_ObjectFlags();
        }
    }
    /**
    Gets the type of object to which the  applies.

    */
    open var ObjectType : dotnet.System.Guid {
        get {
            return try! get_ObjectType();
        }
    }
} // ObjectAuditRule


// type: System.Security.AccessControl.ObjectSecurity
    /**
    Provides the ability to control access to objects without direct manipulation of Access Control Lists (ACLs). This class is the abstract base class for the  and  classes.

    */
open class ObjectSecurity
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_ObjectSecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter identityReference: The identity to which the access rule applies.  It must be an object that can be cast as a .
    - Parameter accessMask: The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.
    - Parameter isInherited: true if this rule is inherited from a parent container.
    - Parameter inheritanceFlags: Specifies the inheritance properties of the access rule.
    - Parameter propagationFlags: Specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if  is set to .
    - Parameter type: Specifies the valid access control type.
    - Returns: The  object that this method creates.

    */
    open func AccessRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws -> dotnet.System.Security.AccessControl.AccessRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_AccessRule__AccessRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AccessControlType(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AccessRule(hndl : __return);
        }
    }
    // System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter identityReference: The identity to which the audit rule applies.  It must be an object that can be cast as a .
    - Parameter accessMask: The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.
    - Parameter isInherited: 
         if this rule is inherited from a parent container.
    - Parameter inheritanceFlags: Specifies the inheritance properties of the audit rule.
    - Parameter propagationFlags: Specifies whether inherited audit rules are automatically propagated. The propagation flags are ignored if  is set to .
    - Parameter flags: Specifies the conditions for which the rule is audited.
    - Returns: The  object that this method creates.

    */
    open func AuditRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws -> dotnet.System.Security.AccessControl.AuditRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_AuditRule__AuditRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AuditFlags(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuditRule(hndl : __return);
        }
    }
    // System.Security.Principal.IdentityReference GetGroup(System.Type)
// docid: M:System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
    /**
    Gets the primary group associated with the specified owner.

    - Parameter targetType: The owner for which to get the primary group.
    - Returns: The primary group associated with the specified owner.

    */
    open func GetGroup(targetType : dotnet.System.Type_) throws -> Optional<dotnet.System.Security.Principal.IdentityReference> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_IdentityReference__GetGroup_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.IdentityReference(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Security.Principal.IdentityReference GetOwner(System.Type)
// docid: M:System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
    /**
    Gets the owner associated with the specified primary group.

    - Parameter targetType: The primary group for which to get the owner.
    - Returns: The owner associated with the specified group.

    */
    open func GetOwner(targetType : dotnet.System.Type_) throws -> Optional<dotnet.System.Security.Principal.IdentityReference> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_IdentityReference__GetOwner_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.IdentityReference(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] GetSecurityDescriptorBinaryForm()
// docid: M:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
    /**
    Returns an array of byte values that represents the security descriptor information for this  object.

    - Returns: An array of byte values that represents the security descriptor for this  object. This method returns  if there is no security information in this  object.

    */
    open func GetSecurityDescriptorBinaryForm() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_u8Array__GetSecurityDescriptorBinaryForm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.String GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
// docid: M:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
    /**
    Returns the Security Descriptor Definition Language (SDDL) representation of the specified sections of the security descriptor associated with this  object.

    - Parameter includeSections: Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.
    - Returns: The SDDL representation of the specified sections of the security descriptor associated with this  object.

    */
    open func GetSecurityDescriptorSddlForm(includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_String__GetSecurityDescriptorSddlForm_0__1__AccessControlSections(&__thrown, self.get_handle(), includeSections.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsSddlConversionSupported()
// docid: M:System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
    /**
    Returns a Boolean value that specifies whether the security descriptor associated with this   object can be converted to the Security Descriptor Definition Language (SDDL) format.

    - Returns: 
         if the security descriptor associated with this   object can be converted to the Security Descriptor Definition Language (SDDL) format; otherwise, .

    */
    open class func IsSddlConversionSupported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_bool__IsSddlConversionSupported_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ModifyAccessRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, ref bool)
// docid: M:System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
    /**
    Applies the specified modification to the Discretionary Access Control List (DACL) associated with this  object.

    - Parameter modification: The modification to apply to the DACL.
    - Parameter rule: The access rule to modify.
    - Parameter modified: 
         if the DACL is actually modified; otherwise, .
    - Returns: 
         if the DACL is successfully modified; otherwise, .

    */
    open func ModifyAccessRule(modification : dotnet.System.Security.AccessControl.AccessControlModification, rule : dotnet.System.Security.AccessControl.AccessRule, modified : inout Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_modified = Swift.Int32(modified ? 1 : 0);
        let __return = System_Security_AccessControl_ObjectSecurity_bool__ModifyAccessRule_0__3__AccessControlModification_AccessRule_outbool(&__thrown, self.get_handle(), modification.get_value(), rule.get_handle(), &_tmp_out_modified);
        let _tmp2_modified = (_tmp_out_modified) != 0;
            modified = _tmp2_modified;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ModifyAuditRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, ref bool)
// docid: M:System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
    /**
    Applies the specified modification to the System Access Control List (SACL) associated with this  object.

    - Parameter modification: The modification to apply to the SACL.
    - Parameter rule: The audit rule to modify.
    - Parameter modified: 
         if the SACL is successfully modified; otherwise, .
    - Returns: 
         if the SACL is successfully modified; otherwise, .

    */
    open func ModifyAuditRule(modification : dotnet.System.Security.AccessControl.AccessControlModification, rule : dotnet.System.Security.AccessControl.AuditRule, modified : inout Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_modified = Swift.Int32(modified ? 1 : 0);
        let __return = System_Security_AccessControl_ObjectSecurity_bool__ModifyAuditRule_0__3__AccessControlModification_AuditRule_outbool(&__thrown, self.get_handle(), modification.get_value(), rule.get_handle(), &_tmp_out_modified);
        let _tmp2_modified = (_tmp_out_modified) != 0;
            modified = _tmp2_modified;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void PurgeAccessRules(System.Security.Principal.IdentityReference)
// docid: M:System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
    /**
    Removes all access rules associated with the specified .

    - Parameter identity: The  for which to remove all access rules.
    */
    open func PurgeAccessRules(identity : dotnet.System.Security.Principal.IdentityReference) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__PurgeAccessRules_0__1__IdentityReference(&__thrown, self.get_handle(), identity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PurgeAuditRules(System.Security.Principal.IdentityReference)
// docid: M:System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
    /**
    Removes all audit rules associated with the specified .

    - Parameter identity: The  for which to remove all audit rules.
    */
    open func PurgeAuditRules(identity : dotnet.System.Security.Principal.IdentityReference) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__PurgeAuditRules_0__1__IdentityReference(&__thrown, self.get_handle(), identity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccessRuleProtection(bool, bool)
// docid: M:System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
    /**
    Sets or removes protection of the access rules associated with this  object. Protected access rules cannot be modified by parent objects through inheritance.

    - Parameter isProtected: 
         to protect the access rules associated with this  object from inheritance;  to allow inheritance.
    - Parameter preserveInheritance: 
         to preserve inherited access rules;  to remove inherited access rules. This parameter is ignored if  is .
    */
    open func SetAccessRuleProtection(isProtected : Bool, preserveInheritance : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__SetAccessRuleProtection_0__2__bool_bool(&__thrown, self.get_handle(), Swift.Int32(isProtected ? 1 : 0), Swift.Int32(preserveInheritance ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAuditRuleProtection(bool, bool)
// docid: M:System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
    /**
    Sets or removes protection of the audit rules associated with this  object. Protected audit rules cannot be modified by parent objects through inheritance.

    - Parameter isProtected: 
         to protect the audit rules associated with this  object from inheritance;  to allow inheritance.
    - Parameter preserveInheritance: 
         to preserve inherited audit rules;  to remove inherited audit rules. This parameter is ignored if  is .
    */
    open func SetAuditRuleProtection(isProtected : Bool, preserveInheritance : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__SetAuditRuleProtection_0__2__bool_bool(&__thrown, self.get_handle(), Swift.Int32(isProtected ? 1 : 0), Swift.Int32(preserveInheritance ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetGroup(System.Security.Principal.IdentityReference)
// docid: M:System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
    /**
    Sets the primary group for the security descriptor associated with this  object.

    - Parameter identity: The primary group to set.
    */
    open func SetGroup(identity : dotnet.System.Security.Principal.IdentityReference) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__SetGroup_0__1__IdentityReference(&__thrown, self.get_handle(), identity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetOwner(System.Security.Principal.IdentityReference)
// docid: M:System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
    /**
    Sets the owner for the security descriptor associated with this  object.

    - Parameter identity: The owner to set.
    */
    open func SetOwner(identity : dotnet.System.Security.Principal.IdentityReference) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__SetOwner_0__1__IdentityReference(&__thrown, self.get_handle(), identity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSecurityDescriptorBinaryForm(System.Byte[])
// docid: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
    /**
    Sets the security descriptor for this  object from the specified array of byte values.

    - Parameter binaryForm: The array of bytes from which to set the security descriptor.
    */
    open func SetSecurityDescriptorBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__SetSecurityDescriptorBinaryForm_0__1__u8Array(&__thrown, self.get_handle(), binaryForm.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSecurityDescriptorBinaryForm(System.Byte[], System.Security.AccessControl.AccessControlSections)
// docid: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
    /**
    Sets the specified sections of the security descriptor for this  object from the specified array of byte values.

    - Parameter binaryForm: The array of bytes from which to set the security descriptor.
    - Parameter includeSections: The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.
    */
    open func SetSecurityDescriptorBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__SetSecurityDescriptorBinaryForm_0__2__u8Array_AccessControlSections(&__thrown, self.get_handle(), binaryForm.get_handle(), includeSections.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSecurityDescriptorSddlForm(System.String)
// docid: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
    /**
    Sets the security descriptor for this  object from the specified Security Descriptor Definition Language (SDDL) string.

    - Parameter sddlForm: The SDDL string from which to set the security descriptor.
    */
    open func SetSecurityDescriptorSddlForm(sddlForm : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__SetSecurityDescriptorSddlForm_0__1__String(&__thrown, self.get_handle(), sddlForm.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSecurityDescriptorSddlForm(System.String, System.Security.AccessControl.AccessControlSections)
// docid: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
    /**
    Sets the specified sections of the security descriptor for this  object from the specified Security Descriptor Definition Language (SDDL) string.

    - Parameter sddlForm: The SDDL string from which to set the security descriptor.
    - Parameter includeSections: The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.
    */
    open func SetSecurityDescriptorSddlForm(sddlForm : dotnet.System.String, includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_void__SetSecurityDescriptorSddlForm_0__2__String_AccessControlSections(&__thrown, self.get_handle(), sddlForm.get_handle(), includeSections.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_AccessRightType()
// docid: M:System.Security.AccessControl.ObjectSecurity.get_AccessRightType
    open func get_AccessRightType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_Type__get_AccessRightType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AccessRuleType()
// docid: M:System.Security.AccessControl.ObjectSecurity.get_AccessRuleType
    open func get_AccessRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_Type__get_AccessRuleType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_AreAccessRulesCanonical()
// docid: M:System.Security.AccessControl.ObjectSecurity.get_AreAccessRulesCanonical
    open func get_AreAccessRulesCanonical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_bool__get_AreAccessRulesCanonical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AreAccessRulesProtected()
// docid: M:System.Security.AccessControl.ObjectSecurity.get_AreAccessRulesProtected
    open func get_AreAccessRulesProtected() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_bool__get_AreAccessRulesProtected_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AreAuditRulesCanonical()
// docid: M:System.Security.AccessControl.ObjectSecurity.get_AreAuditRulesCanonical
    open func get_AreAuditRulesCanonical() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_bool__get_AreAuditRulesCanonical_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AreAuditRulesProtected()
// docid: M:System.Security.AccessControl.ObjectSecurity.get_AreAuditRulesProtected
    open func get_AreAuditRulesProtected() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_bool__get_AreAuditRulesProtected_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_AuditRuleType()
// docid: M:System.Security.AccessControl.ObjectSecurity.get_AuditRuleType
    open func get_AuditRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_Type__get_AuditRuleType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the  of the securable object associated with this  object.

    */
    open var AccessRightType : dotnet.System.Type_ {
        get {
            return try! get_AccessRightType();
        }
    }
    /**
    Gets the  of the object associated with the access rules of this  object. The  object must be an object that can be cast as a  object.

    */
    open var AccessRuleType : dotnet.System.Type_ {
        get {
            return try! get_AccessRuleType();
        }
    }
    /**
    Gets a Boolean value that specifies whether the access rules associated with this  object are in canonical order.

    */
    open var AreAccessRulesCanonical : Bool {
        get {
            return try! get_AreAccessRulesCanonical();
        }
    }
    /**
    Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this  object is protected.

    */
    open var AreAccessRulesProtected : Bool {
        get {
            return try! get_AreAccessRulesProtected();
        }
    }
    /**
    Gets a Boolean value that specifies whether the audit rules associated with this  object are in canonical order.

    */
    open var AreAuditRulesCanonical : Bool {
        get {
            return try! get_AreAuditRulesCanonical();
        }
    }
    /**
    Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this  object is protected.

    */
    open var AreAuditRulesProtected : Bool {
        get {
            return try! get_AreAuditRulesProtected();
        }
    }
    /**
    Gets the  object associated with the audit rules of this  object. The  object must be an object that can be cast as a  object.

    */
    open var AuditRuleType : dotnet.System.Type_ {
        get {
            return try! get_AuditRuleType();
        }
    }
} // ObjectSecurity


// type: System.Security.AccessControl.ObjectSecurity`1
    /**
    Provides the ability to control access to objects without direct manipulation of Access Control Lists (ACLs); also grants the ability to type-cast access rights.

    */
open class ObjectSecurity_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Security.AccessControl.NativeObjectSecurity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_ObjectSecurity_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the ObjectAccessRule class that represents a new access control rule for the associated security object.

    - Parameter identityReference: Represents a user account.
    - Parameter accessMask: The access type.
    - Parameter isInherited: 
         if the access rule is inherited; otherwise, .
    - Parameter inheritanceFlags: Specifies how to propagate access masks to child objects.
    - Parameter propagationFlags: Specifies how to propagate Access Control Entries (ACEs) to child objects.
    - Parameter type: Specifies whether access is allowed or denied.
    - Returns: Represents a new access control rule for the specified user, with the specified access rights, access control, and flags.

    */
    open override func AccessRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws -> dotnet.System.Security.AccessControl.AccessRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_1_AccessRule__AccessRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AccessControlType(T.get_type_handle(), &__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AccessRule(hndl : __return);
        }
    }
    // void AddAccessRule(System.Security.AccessControl.AccessRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.AddAccessRule(System.Security.AccessControl.AccessRule{`0})
    /**
    Adds the specified access rule to the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object.

    - Parameter rule: The rule to add.
    */
    open func AddAccessRule(rule : dotnet.System.Security.AccessControl.AccessRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__AddAccessRule_0__1__System_Security_AccessControl_AccessRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAuditRule(System.Security.AccessControl.AuditRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.AddAuditRule(System.Security.AccessControl.AuditRule{`0})
    /**
    Adds the specified audit rule to the System Access Control List (SACL) associated with this ObjectSecurity`1 object.

    - Parameter rule: The audit rule to add.
    */
    open func AddAuditRule(rule : dotnet.System.Security.AccessControl.AuditRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__AddAuditRule_0__1__System_Security_AccessControl_AuditRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class representing the specified audit rule for the specified user.

    - Parameter identityReference: Represents a user account.
    - Parameter accessMask: An integer that specifies an access type.
    - Parameter isInherited: 
         if the access rule is inherited; otherwise, .
    - Parameter inheritanceFlags: Specifies how to propagate access masks to child objects.
    - Parameter propagationFlags: Specifies how to propagate Access Control Entries (ACEs) to child objects.
    - Parameter flags: Describes the type of auditing to perform.
    - Returns: The specified audit rule for the specified user.

    */
    open override func AuditRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws -> dotnet.System.Security.AccessControl.AuditRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_1_AuditRule__AuditRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AuditFlags(T.get_type_handle(), &__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuditRule(hndl : __return);
        }
    }
    // bool RemoveAccessRule(System.Security.AccessControl.AccessRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.RemoveAccessRule(System.Security.AccessControl.AccessRule{`0})
    /**
    Removes access rules that contain the same security identifier and access mask as the specified access rule from the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object.

    - Parameter rule: The rule to remove.
    - Returns: 
         if the access rule was successfully removed; otherwise, .

    */
    open func RemoveAccessRule(rule : dotnet.System.Security.AccessControl.AccessRule_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_1_bool__RemoveAccessRule_0__1__System_Security_AccessControl_AccessRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAccessRuleAll(System.Security.AccessControl.AccessRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule{`0})
    /**
    Removes all access rules that have the same security identifier as the specified access rule from the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object.

    - Parameter rule: The access rule to remove.
    */
    open func RemoveAccessRuleAll(rule : dotnet.System.Security.AccessControl.AccessRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__RemoveAccessRuleAll_0__1__System_Security_AccessControl_AccessRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule{`0})
    /**
    Removes all access rules that exactly match the specified access rule from the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object.

    - Parameter rule: The access rule to remove.
    */
    open func RemoveAccessRuleSpecific(rule : dotnet.System.Security.AccessControl.AccessRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__RemoveAccessRuleSpecific_0__1__System_Security_AccessControl_AccessRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool RemoveAuditRule(System.Security.AccessControl.AuditRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.RemoveAuditRule(System.Security.AccessControl.AuditRule{`0})
    /**
    Removes audit rules that contain the same security identifier and access mask as the specified audit rule from the System Access Control List (SACL) associated with this ObjectSecurity`1 object.

    - Parameter rule: The audit rule to remove
    - Returns: 
         if the object was removed; otherwise, .

    */
    open func RemoveAuditRule(rule : dotnet.System.Security.AccessControl.AuditRule_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_1_bool__RemoveAuditRule_0__1__System_Security_AccessControl_AuditRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAuditRuleAll(System.Security.AccessControl.AuditRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule{`0})
    /**
    Removes all audit rules that have the same security identifier as the specified audit rule from the System Access Control List (SACL) associated with this ObjectSecurity`1 object.

    - Parameter rule: The audit rule to remove.
    */
    open func RemoveAuditRuleAll(rule : dotnet.System.Security.AccessControl.AuditRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__RemoveAuditRuleAll_0__1__System_Security_AccessControl_AuditRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule{`0})
    /**
    Removes all audit rules that exactly match the specified audit rule from the System Access Control List (SACL) associated with this ObjectSecurity`1 object.

    - Parameter rule: The audit rule to remove.
    */
    open func RemoveAuditRuleSpecific(rule : dotnet.System.Security.AccessControl.AuditRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__RemoveAuditRuleSpecific_0__1__System_Security_AccessControl_AuditRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ResetAccessRule(System.Security.AccessControl.AccessRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.ResetAccessRule(System.Security.AccessControl.AccessRule{`0})
    /**
    Removes all access rules in the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object and then adds the specified access rule.

    - Parameter rule: The access rule to reset.
    */
    open func ResetAccessRule(rule : dotnet.System.Security.AccessControl.AccessRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__ResetAccessRule_0__1__System_Security_AccessControl_AccessRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccessRule(System.Security.AccessControl.AccessRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.SetAccessRule(System.Security.AccessControl.AccessRule{`0})
    /**
    Removes all access rules that contain the same security identifier and qualifier as the specified access rule in the Discretionary Access Control List (DACL) associated with this ObjectSecurity`1 object and then adds the specified access rule.

    - Parameter rule: The access rule to set.
    */
    open func SetAccessRule(rule : dotnet.System.Security.AccessControl.AccessRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__SetAccessRule_0__1__System_Security_AccessControl_AccessRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAuditRule(System.Security.AccessControl.AuditRule<T>)
// docid: M:System.Security.AccessControl.ObjectSecurity`1.SetAuditRule(System.Security.AccessControl.AuditRule{`0})
    /**
    Removes all audit rules that contain the same security identifier and qualifier as the specified audit rule in the System Access Control List (SACL) associated with this ObjectSecurity`1 object and then adds the specified audit rule.

    - Parameter rule: The audit rule to set.
    */
    open func SetAuditRule(rule : dotnet.System.Security.AccessControl.AuditRule_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_ObjectSecurity_1_void__SetAuditRule_0__1__System_Security_AccessControl_AuditRule_T_(T.get_type_handle(), &__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_AccessRightType()
// docid: M:System.Security.AccessControl.ObjectSecurity`1.get_AccessRightType
    open override func get_AccessRightType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_1_Type__get_AccessRightType_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AccessRuleType()
// docid: M:System.Security.AccessControl.ObjectSecurity`1.get_AccessRuleType
    open override func get_AccessRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_1_Type__get_AccessRuleType_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AuditRuleType()
// docid: M:System.Security.AccessControl.ObjectSecurity`1.get_AuditRuleType
    open override func get_AuditRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_ObjectSecurity_1_Type__get_AuditRuleType_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the Type of the securable object associated with this ObjectSecurity`1 object.

    */
    open override var AccessRightType : dotnet.System.Type_ {
        get {
            return try! get_AccessRightType();
        }
    }
    /**
    Gets the Type of the object associated with the access rules of this ObjectSecurity`1 object.

    */
    open override var AccessRuleType : dotnet.System.Type_ {
        get {
            return try! get_AccessRuleType();
        }
    }
    /**
    Gets the Type object associated with the audit rules of this ObjectSecurity`1 object.

    */
    open override var AuditRuleType : dotnet.System.Type_ {
        get {
            return try! get_AuditRuleType();
        }
    }
} // ObjectSecurity_1


// type: System.Security.AccessControl.PrivilegeNotHeldException
    /**
    The exception that is thrown when a method in the  namespace attempts to enable a privilege that it does not have.

    */
public final class PrivilegeNotHeldException
    :
    dotnet.System.UnauthorizedAccessException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_PrivilegeNotHeldException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_PrivilegeNotHeldException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using the specified privilege.

    - Parameter privilege: The privilege that is not enabled.
    */
    public init(privilege : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_PrivilegeNotHeldException_ctor_0__1__String(&__thrown, privilege?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class by using the specified exception.

    - Parameter privilege: The privilege that is not enabled.
    - Parameter inner: The exception that is the cause of the current exception. If the innerException parameter is not a null reference ( in Visual Basic), the current exception is raised in a  block that handles the inner exception.
    */
    public init(privilege : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_PrivilegeNotHeldException_ctor_0__2__String_Exception(&__thrown, privilege?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Sets the  parameter with information about the exception.

    - Parameter info: The  that holds the serialized object data about the exception being thrown.
    - Parameter context: The  that contains contextual information about the source or destination.
    */
    public override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_PrivilegeNotHeldException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PrivilegeName()
// docid: M:System.Security.AccessControl.PrivilegeNotHeldException.get_PrivilegeName
    public func get_PrivilegeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_PrivilegeNotHeldException_String__get_PrivilegeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the privilege that is not enabled.

    */
    public var PrivilegeName : Optional<dotnet.System.String> {
        get {
            return try! get_PrivilegeName();
        }
    }
} // PrivilegeNotHeldException


// type: System.Security.AccessControl.PropagationFlags
    /**
    Specifies how Access Control Entries (ACEs) are propagated to child objects.  These flags are significant only if inheritance flags are present.

    */
public struct PropagationFlags : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_PropagationFlags_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.PropagationFlags None
    /**
    Specifies that no inheritance flags are set.

    */
    public static var None : dotnet.System.Security.AccessControl.PropagationFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.PropagationFlags(val: System_Security_AccessControl_PropagationFlags_get_None());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.PropagationFlags NoPropagateInherit
    /**
    Specifies that the ACE is not propagated to child objects.

    */
    public static var NoPropagateInherit : dotnet.System.Security.AccessControl.PropagationFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.PropagationFlags(val: System_Security_AccessControl_PropagationFlags_get_NoPropagateInherit());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.PropagationFlags InheritOnly
    /**
    Specifies that the ACE is propagated only to child objects. This includes both container and leaf child objects.

    */
    public static var InheritOnly : dotnet.System.Security.AccessControl.PropagationFlags {
        get {
        let __return = dotnet.System.Security.AccessControl.PropagationFlags(val: System_Security_AccessControl_PropagationFlags_get_InheritOnly());
            return __return;
        }
    }
} // PropagationFlags


// type: System.Security.AccessControl.QualifiedAce
    /**
    Represents an Access Control Entry (ACE) that contains a qualifier. The qualifier, represented by an  object, specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms. The  class is the abstract base class for the  and  classes.

    */
open class QualifiedAce
    :
    dotnet.System.Security.AccessControl.KnownAce
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_QualifiedAce_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Byte[] GetOpaque()
// docid: M:System.Security.AccessControl.QualifiedAce.GetOpaque
    /**
    Returns the opaque callback data associated with this  object.

    - Returns: An array of byte values that represents the opaque callback data associated with this  object.

    */
    open func GetOpaque() throws -> Optional<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_QualifiedAce_u8Array__GetOpaque_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<Swift.UInt8>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetOpaque(System.Byte[])
// docid: M:System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
    /**
    Sets the opaque callback data associated with this  object.

    - Parameter opaque: An array of byte values that represents the opaque callback data for this  object.
    */
    open func SetOpaque(opaque : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_QualifiedAce_void__SetOpaque_0__1__u8Array(&__thrown, self.get_handle(), (opaque?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.AceQualifier get_AceQualifier()
// docid: M:System.Security.AccessControl.QualifiedAce.get_AceQualifier
    open func get_AceQualifier() throws -> dotnet.System.Security.AccessControl.AceQualifier {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_QualifiedAce_AceQualifier__get_AceQualifier_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AceQualifier(val: __return);
        }
    }
    // [IsSpecialName] bool get_IsCallback()
// docid: M:System.Security.AccessControl.QualifiedAce.get_IsCallback
    open func get_IsCallback() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_QualifiedAce_bool__get_IsCallback_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_OpaqueLength()
// docid: M:System.Security.AccessControl.QualifiedAce.get_OpaqueLength
    open func get_OpaqueLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_QualifiedAce_i32__get_OpaqueLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets a value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.

    */
    open var AceQualifier : dotnet.System.Security.AccessControl.AceQualifier {
        get {
            return try! get_AceQualifier();
        }
    }
    /**
    Specifies whether this  object contains callback data.

    */
    open var IsCallback : Bool {
        get {
            return try! get_IsCallback();
        }
    }
    /**
    Gets the length of the opaque callback data associated with this  object. This property is valid only for callback Access Control Entries (ACEs).

    */
    open var OpaqueLength : Swift.Int32 {
        get {
            return try! get_OpaqueLength();
        }
    }
} // QualifiedAce


// type: System.Security.AccessControl.RawAcl
    /**
    Represents an Access Control List (ACL).

    */
public final class RawAcl
    :
    dotnet.System.Security.AccessControl.GenericAcl
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_RawAcl_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Byte, System.Int32)
// docid: M:System.Security.AccessControl.RawAcl.#ctor(System.Byte,System.Int32)
    /**
    Initializes a new instance of the  class with the specified revision level.

    - Parameter revision: The revision level of the new Access Control List (ACL).
    - Parameter capacity: The number of Access Control Entries (ACEs) this  object can contain. This number is to be used only as a hint.
    */
    public init(revision : Swift.UInt8, capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RawAcl_ctor_0__2__u8_i32(&__thrown, revision, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.RawAcl.#ctor(System.Byte[],System.Int32)
    /**
    Initializes a new instance of the  class from the specified binary form.

    - Parameter binaryForm: An array of byte values that represent an Access Control List (ACL).
    - Parameter offset: The offset in the  parameter at which to begin unmarshaling data.
    */
    public init(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RawAcl_ctor_0__2__u8Array_i32(&__thrown, binaryForm.get_handle(), offset);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Marshals the contents of the  object into the specified byte array beginning at the specified offset.

    - Parameter binaryForm: The byte array into which the contents of the  is marshaled.
    - Parameter offset: The offset at which to start marshaling.
    */
    public override func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawAcl_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InsertAce(System.Int32, System.Security.AccessControl.GenericAce)
// docid: M:System.Security.AccessControl.RawAcl.InsertAce(System.Int32,System.Security.AccessControl.GenericAce)
    /**
    Inserts the specified Access Control Entry (ACE) at the specified index.

    - Parameter index: The position at which to add the new ACE. Specify the value of the  property to insert an ACE at the end of the  object.
    - Parameter ace: The ACE to insert.
    */
    public func InsertAce(index : Swift.Int32, ace : dotnet.System.Security.AccessControl.GenericAce) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawAcl_void__InsertAce_0__2__i32_GenericAce(&__thrown, self.get_handle(), index, ace.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAce(System.Int32)
// docid: M:System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)
    /**
    Removes the Access Control Entry (ACE) at the specified location.

    - Parameter index: The zero-based index of the ACE to remove.
    */
    public func RemoveAce(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawAcl_void__RemoveAce_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.AccessControl.RawAcl.get_BinaryLength
    public override func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawAcl_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.AccessControl.RawAcl.get_Count
    public override func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawAcl_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Byte get_Revision()
// docid: M:System.Security.AccessControl.RawAcl.get_Revision
    public override func get_Revision() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawAcl_u8__get_Revision_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.GenericAce get_Item(System.Int32)
// docid: M:System.Security.AccessControl.RawAcl.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//    GenericAcl : [IsSpecialName] System.Security.AccessControl.GenericAce get_Item(System.Int32) -- GenericAcl -- 100663458
//EARLY true
//matches :
//    GenericAcl : [IsSpecialName] System.Security.AccessControl.GenericAce get_Item(System.Int32)
    public override func get_Item(index : Swift.Int32) throws -> dotnet.System.Security.AccessControl.GenericAce {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawAcl_GenericAce__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.GenericAce(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Security.AccessControl.GenericAce)
// docid: M:System.Security.AccessControl.RawAcl.set_Item(System.Int32,System.Security.AccessControl.GenericAce)
    public override func set_Item(index : Swift.Int32, value : dotnet.System.Security.AccessControl.GenericAce) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawAcl_void__set_Item_0__2__i32_GenericAce(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the length, in bytes, of the binary representation of the current  object. This length should be used before marshaling the ACL into a binary array with the  method.

    */
    public override var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Gets the number of access control entries (ACEs) in the current  object.

    */
    public override var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets the revision level of the .

    */
    public override var Revision : Swift.UInt8 {
        get {
            return try! get_Revision();
        }
    }
} // RawAcl


// type: System.Security.AccessControl.RawSecurityDescriptor
    /**
    Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).

    */
public final class RawSecurityDescriptor
    :
    dotnet.System.Security.AccessControl.GenericSecurityDescriptor
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_RawSecurityDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Byte[], System.Int32)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Byte[],System.Int32)
    /**
    Initializes a new instance of the  class from the specified array of byte values.

    - Parameter binaryForm: The array of byte values from which to create the new  object.
    - Parameter offset: The offset in the   array at which to begin copying.
    */
    public init(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RawSecurityDescriptor_ctor_0__2__u8Array_i32(&__thrown, binaryForm.get_handle(), offset);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.AccessControl.ControlFlags, System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.RawAcl, System.Security.AccessControl.RawAcl)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter flags: Flags that specify behavior of the new  object.
    - Parameter owner: The owner for the new  object.
    - Parameter group: The primary group for the new  object.
    - Parameter systemAcl: The System Access Control List (SACL) for the new  object.
    - Parameter discretionaryAcl: The Discretionary Access Control List (DACL) for the new  object.
    */
    public init(flags : dotnet.System.Security.AccessControl.ControlFlags, owner : Optional<dotnet.System.Security.Principal.SecurityIdentifier>, group : Optional<dotnet.System.Security.Principal.SecurityIdentifier>, systemAcl : Optional<dotnet.System.Security.AccessControl.RawAcl>, discretionaryAcl : Optional<dotnet.System.Security.AccessControl.RawAcl>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RawSecurityDescriptor_ctor_0__5__ControlFlags_SecurityIdentifier_SecurityIdentifier_RawAcl_RawAcl(&__thrown, flags.get_value(), owner?.get_handle() ?? nil, group?.get_handle() ?? nil, systemAcl?.get_handle() ?? nil, discretionaryAcl?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.String)
    /**
    Initializes a new instance of the  class from the specified Security Descriptor Definition Language (SDDL) string.

    - Parameter sddlForm: The SDDL string from which to create the new  object.
    */
    public init(sddlForm : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RawSecurityDescriptor_ctor_0__1__String(&__thrown, sddlForm.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void SetFlags(System.Security.AccessControl.ControlFlags)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)
    /**
    Sets the  property of this  object to the specified value.

    - Parameter flags: One or more values of the  enumeration combined with a logical OR operation.
    */
    public func SetFlags(flags : dotnet.System.Security.AccessControl.ControlFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawSecurityDescriptor_void__SetFlags_0__1__ControlFlags(&__thrown, self.get_handle(), flags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.ControlFlags get_ControlFlags()
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.get_ControlFlags
    public override func get_ControlFlags() throws -> dotnet.System.Security.AccessControl.ControlFlags {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawSecurityDescriptor_ControlFlags__get_ControlFlags_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.ControlFlags(val: __return);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.RawAcl get_DiscretionaryAcl()
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.get_DiscretionaryAcl
    public func get_DiscretionaryAcl() throws -> Optional<dotnet.System.Security.AccessControl.RawAcl> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawSecurityDescriptor_RawAcl__get_DiscretionaryAcl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.AccessControl.RawAcl(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DiscretionaryAcl(System.Security.AccessControl.RawAcl)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.set_DiscretionaryAcl(System.Security.AccessControl.RawAcl)
    public func set_DiscretionaryAcl(value : Optional<dotnet.System.Security.AccessControl.RawAcl>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawSecurityDescriptor_void__set_DiscretionaryAcl_0__1__RawAcl(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_Group()
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.get_Group
    public override func get_Group() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawSecurityDescriptor_SecurityIdentifier__get_Group_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Group(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.set_Group(System.Security.Principal.SecurityIdentifier)
    public override func set_Group(value : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawSecurityDescriptor_void__set_Group_0__1__SecurityIdentifier(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_Owner()
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.get_Owner
    public override func get_Owner() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawSecurityDescriptor_SecurityIdentifier__get_Owner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Owner(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.set_Owner(System.Security.Principal.SecurityIdentifier)
    public override func set_Owner(value : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawSecurityDescriptor_void__set_Owner_0__1__SecurityIdentifier(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte get_ResourceManagerControl()
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.get_ResourceManagerControl
    public func get_ResourceManagerControl() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawSecurityDescriptor_u8__get_ResourceManagerControl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ResourceManagerControl(System.Byte)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.set_ResourceManagerControl(System.Byte)
    public func set_ResourceManagerControl(value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawSecurityDescriptor_void__set_ResourceManagerControl_0__1__u8(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.AccessControl.RawAcl get_SystemAcl()
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.get_SystemAcl
    public func get_SystemAcl() throws -> Optional<dotnet.System.Security.AccessControl.RawAcl> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RawSecurityDescriptor_RawAcl__get_SystemAcl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.AccessControl.RawAcl(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SystemAcl(System.Security.AccessControl.RawAcl)
// docid: M:System.Security.AccessControl.RawSecurityDescriptor.set_SystemAcl(System.Security.AccessControl.RawAcl)
    public func set_SystemAcl(value : Optional<dotnet.System.Security.AccessControl.RawAcl>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RawSecurityDescriptor_void__set_SystemAcl_0__1__RawAcl(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets values that specify behavior of the  object.

    */
    public override var ControlFlags : dotnet.System.Security.AccessControl.ControlFlags {
        get {
            return try! get_ControlFlags();
        }
    }
    /**
    Gets or sets the Discretionary Access Control List (DACL) for this  object. The DACL contains access rules.

    */
    public var DiscretionaryAcl : Optional<dotnet.System.Security.AccessControl.RawAcl> {
        get {
            return try! get_DiscretionaryAcl();
        }
        set(v) {
            return try! set_DiscretionaryAcl(value: v!);
        }
    }
    /**
    Gets or sets the primary group for this  object.

    */
    public override var Group : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_Group();
        }
        set(v) {
            return try! set_Group(value: v!);
        }
    }
    /**
    Gets or sets the owner of the object associated with this  object.

    */
    public override var Owner : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_Owner();
        }
        set(v) {
            return try! set_Owner(value: v!);
        }
    }
    /**
    Gets or sets a byte value that represents the resource manager control bits associated with this  object.

    */
    public var ResourceManagerControl : Swift.UInt8 {
        get {
            return try! get_ResourceManagerControl();
        }
        set(v) {
            return try! set_ResourceManagerControl(value: v);
        }
    }
    /**
    Gets or sets the System Access Control List (SACL) for this  object. The SACL contains audit rules.

    */
    public var SystemAcl : Optional<dotnet.System.Security.AccessControl.RawAcl> {
        get {
            return try! get_SystemAcl();
        }
        set(v) {
            return try! set_SystemAcl(value: v!);
        }
    }
} // RawSecurityDescriptor


// type: System.Security.AccessControl.ResourceType
    /**
    Specifies the defined native object types.

    */
public struct ResourceType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_ResourceType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.ResourceType Unknown
    /**
    An unknown object type.

    */
    public static var Unknown : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_Unknown());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType FileObject
    /**
    A file or directory.

    */
    public static var FileObject : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_FileObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType Service
    /**
    A Windows service.

    */
    public static var Service : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_Service());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType Printer
    /**
    A printer.

    */
    public static var Printer : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_Printer());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType RegistryKey
    /**
    A registry key.

    */
    public static var RegistryKey : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_RegistryKey());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType LMShare
    /**
    A network share.

    */
    public static var LMShare : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_LMShare());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType KernelObject
    /**
    A local kernel object.

    */
    public static var KernelObject : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_KernelObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType WindowObject
    /**
    A window station or desktop object on the local computer.

    */
    public static var WindowObject : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_WindowObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType DSObject
    /**
    A directory service (DS) object or a property set or property of a directory service object.

    */
    public static var DSObject : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_DSObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType DSObjectAll
    /**
    A directory service object and all of its property sets and properties.

    */
    public static var DSObjectAll : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_DSObjectAll());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType ProviderDefined
    /**
    An object defined by a provider.

    */
    public static var ProviderDefined : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_ProviderDefined());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType WmiGuidObject
    /**
    A Windows Management Instrumentation (WMI) object.

    */
    public static var WmiGuidObject : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_WmiGuidObject());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.ResourceType RegistryWow6432Key
    /**
    An object for a registry entry under WOW64.

    */
    public static var RegistryWow6432Key : dotnet.System.Security.AccessControl.ResourceType {
        get {
        let __return = dotnet.System.Security.AccessControl.ResourceType(val: System_Security_AccessControl_ResourceType_get_RegistryWow6432Key());
            return __return;
        }
    }
} // ResourceType


// type: System.Security.AccessControl.SecurityInfos
    /**
    Specifies the section of a security descriptor to be queried or set.

    */
public struct SecurityInfos : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_SecurityInfos_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.SecurityInfos Owner
    /**
    Specifies the owner identifier.

    */
    public static var Owner : dotnet.System.Security.AccessControl.SecurityInfos {
        get {
        let __return = dotnet.System.Security.AccessControl.SecurityInfos(val: System_Security_AccessControl_SecurityInfos_get_Owner());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.SecurityInfos Group
    /**
    Specifies the primary group identifier.

    */
    public static var Group : dotnet.System.Security.AccessControl.SecurityInfos {
        get {
        let __return = dotnet.System.Security.AccessControl.SecurityInfos(val: System_Security_AccessControl_SecurityInfos_get_Group());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.SecurityInfos DiscretionaryAcl
    /**
    Specifies the discretionary access control list (DACL).

    */
    public static var DiscretionaryAcl : dotnet.System.Security.AccessControl.SecurityInfos {
        get {
        let __return = dotnet.System.Security.AccessControl.SecurityInfos(val: System_Security_AccessControl_SecurityInfos_get_DiscretionaryAcl());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.SecurityInfos SystemAcl
    /**
    Specifies the system access control list (SACL).

    */
    public static var SystemAcl : dotnet.System.Security.AccessControl.SecurityInfos {
        get {
        let __return = dotnet.System.Security.AccessControl.SecurityInfos(val: System_Security_AccessControl_SecurityInfos_get_SystemAcl());
            return __return;
        }
    }
} // SecurityInfos


// type: System.Security.AccessControl.SystemAcl
    /**
    Represents a System Access Control List (SACL).

    */
public final class SystemAcl
    :
    dotnet.System.Security.AccessControl.CommonAcl
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_SystemAcl_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool, bool, System.Byte, System.Int32)
// docid: M:System.Security.AccessControl.SystemAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter isContainer: 
         if the new  object is a container.
    - Parameter isDS: 
         if the new  object is a directory object Access Control List (ACL).
    - Parameter revision: The revision level of the new  object.
    - Parameter capacity: The number of Access Control Entries (ACEs) this  object can contain. This number is to be used only as a hint.
    */
    public init(isContainer : Bool, isDS : Bool, revision : Swift.UInt8, capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_SystemAcl_ctor_0__4__bool_bool_u8_i32(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), revision, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, System.Int32)
// docid: M:System.Security.AccessControl.SystemAcl.#ctor(System.Boolean,System.Boolean,System.Int32)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter isContainer: 
         if the new  object is a container.
    - Parameter isDS: 
         if the new  object is a directory object Access Control List (ACL).
    - Parameter capacity: The number of Access Control Entries (ACEs) this  object can contain. This number is to be used only as a hint.
    */
    public init(isContainer : Bool, isDS : Bool, capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_SystemAcl_ctor_0__3__bool_bool_i32(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, System.Security.AccessControl.RawAcl)
// docid: M:System.Security.AccessControl.SystemAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)
    /**
    Initializes a new instance of the  class with the specified values from the specified  object.

    - Parameter isContainer: 
         if the new  object is a container.
    - Parameter isDS: 
         if the new  object is a directory object Access Control List (ACL).
    - Parameter rawAcl: The underlying  object for the new  object. Specify  to create an empty ACL.
    */
    public init(isContainer : Bool, isDS : Bool, rawAcl : dotnet.System.Security.AccessControl.RawAcl) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_SystemAcl_ctor_0__3__bool_bool_RawAcl(&__thrown, Swift.Int32(isContainer ? 1 : 0), Swift.Int32(isDS ? 1 : 0), rawAcl.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddAudit(System.Security.AccessControl.AuditFlags, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
// docid: M:System.Security.AccessControl.SystemAcl.AddAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
    /**
    Adds an audit rule to the current  object.

    - Parameter auditFlags: The type of audit rule to add.
    - Parameter sid: The  for which to add an audit rule.
    - Parameter accessMask: The access mask for the new audit rule.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the new audit rule.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the new audit rule.
    */
    public func AddAudit(auditFlags : dotnet.System.Security.AccessControl.AuditFlags, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__AddAudit_0__5__AuditFlags_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags(&__thrown, self.get_handle(), auditFlags.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAudit(System.Security.AccessControl.AuditFlags, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.SystemAcl.AddAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
    /**
    Adds an audit rule with the specified settings to the current  object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type for the new audit rule.

    - Parameter auditFlags: The type of audit rule to add.
    - Parameter sid: The  for which to add an audit rule.
    - Parameter accessMask: The access mask for the new audit rule.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the new audit rule.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the new audit rule.
    - Parameter objectFlags: Flags that specify if the  and  parameters contain non- values.
    - Parameter objectType: The identity of the class of objects to which the new audit rule applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the new audit rule.
    */
    public func AddAudit(auditFlags : dotnet.System.Security.AccessControl.AuditFlags, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, objectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__AddAudit_0__8__AuditFlags_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags_ObjectAceFlags_Guid_Guid(&__thrown, self.get_handle(), auditFlags.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value(), objectFlags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAudit(System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAuditRule)
// docid: M:System.Security.AccessControl.SystemAcl.AddAudit(System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAuditRule)
    /**
    Adds an audit rule to the current  object.

    - Parameter sid: The  for which to add an audit rule.
    - Parameter rule: The  for the new audit rule.
    */
    public func AddAudit(sid : dotnet.System.Security.Principal.SecurityIdentifier, rule : dotnet.System.Security.AccessControl.ObjectAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__AddAudit_0__2__SecurityIdentifier_ObjectAuditRule(&__thrown, self.get_handle(), sid.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool RemoveAudit(System.Security.AccessControl.AuditFlags, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
// docid: M:System.Security.AccessControl.SystemAcl.RemoveAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
    /**
    Removes the specified audit rule from the current  object.

    - Parameter auditFlags: The type of audit rule to remove.
    - Parameter sid: The  for which to remove an audit rule.
    - Parameter accessMask: The access mask for the rule to be removed.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the rule to be removed.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the rule to be removed.
    - Returns: 
         if this method successfully removes the specified audit rule; otherwise, .

    */
    public func RemoveAudit(auditFlags : dotnet.System.Security.AccessControl.AuditFlags, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_SystemAcl_bool__RemoveAudit_0__5__AuditFlags_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags(&__thrown, self.get_handle(), auditFlags.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool RemoveAudit(System.Security.AccessControl.AuditFlags, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.SystemAcl.RemoveAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
    /**
    Removes the specified audit rule from the current  object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.

    - Parameter auditFlags: The type of audit rule to remove.
    - Parameter sid: The  for which to remove an audit rule.
    - Parameter accessMask: The access mask for the rule to be removed.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the rule to be removed.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the rule to be removed.
    - Parameter objectFlags: Flags that specify if the  and  parameters contain non- values.
    - Parameter objectType: The identity of the class of objects to which the removed audit control rule applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the removed audit rule.
    - Returns: 
         if this method successfully removes the specified audit rule; otherwise, .

    */
    public func RemoveAudit(auditFlags : dotnet.System.Security.AccessControl.AuditFlags, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, objectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_SystemAcl_bool__RemoveAudit_0__8__AuditFlags_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags_ObjectAceFlags_Guid_Guid(&__thrown, self.get_handle(), auditFlags.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value(), objectFlags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool RemoveAudit(System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAuditRule)
// docid: M:System.Security.AccessControl.SystemAcl.RemoveAudit(System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAuditRule)
    /**
    Removes the specified audit rule from the current  object.

    - Parameter sid: The  for which to remove an audit rule.
    - Parameter rule: The  for which to remove an audit rule.
    - Returns: 
         if this method successfully removes the specified audit rule; otherwise, .

    */
    public func RemoveAudit(sid : dotnet.System.Security.Principal.SecurityIdentifier, rule : dotnet.System.Security.AccessControl.ObjectAuditRule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_SystemAcl_bool__RemoveAudit_0__2__SecurityIdentifier_ObjectAuditRule(&__thrown, self.get_handle(), sid.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAuditSpecific(System.Security.AccessControl.AuditFlags, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
// docid: M:System.Security.AccessControl.SystemAcl.RemoveAuditSpecific(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
    /**
    Removes the specified audit rule from the current  object.

    - Parameter auditFlags: The type of audit rule to remove.
    - Parameter sid: The  for which to remove an audit rule.
    - Parameter accessMask: The access mask for the rule to be removed.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the rule to be removed.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the rule to be removed.
    */
    public func RemoveAuditSpecific(auditFlags : dotnet.System.Security.AccessControl.AuditFlags, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__RemoveAuditSpecific_0__5__AuditFlags_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags(&__thrown, self.get_handle(), auditFlags.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAuditSpecific(System.Security.AccessControl.AuditFlags, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.SystemAcl.RemoveAuditSpecific(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
    /**
    Removes the specified audit rule from the current  object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.

    - Parameter auditFlags: The type of audit rule to remove.
    - Parameter sid: The  for which to remove an audit rule.
    - Parameter accessMask: The access mask for the rule to be removed.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the rule to be removed.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the rule to be removed.
    - Parameter objectFlags: Flags that specify if the  and  parameters contain non- values.
    - Parameter objectType: The identity of the class of objects to which the removed audit control rule applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the removed audit rule.
    */
    public func RemoveAuditSpecific(auditFlags : dotnet.System.Security.AccessControl.AuditFlags, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, objectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__RemoveAuditSpecific_0__8__AuditFlags_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags_ObjectAceFlags_Guid_Guid(&__thrown, self.get_handle(), auditFlags.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value(), objectFlags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAuditSpecific(System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAuditRule)
// docid: M:System.Security.AccessControl.SystemAcl.RemoveAuditSpecific(System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAuditRule)
    /**
    Removes the specified audit rule from the current  object.

    - Parameter sid: The  for which to remove an audit rule.
    - Parameter rule: The  for the rule to be removed.
    */
    public func RemoveAuditSpecific(sid : dotnet.System.Security.Principal.SecurityIdentifier, rule : dotnet.System.Security.AccessControl.ObjectAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__RemoveAuditSpecific_0__2__SecurityIdentifier_ObjectAuditRule(&__thrown, self.get_handle(), sid.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAudit(System.Security.AccessControl.AuditFlags, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
// docid: M:System.Security.AccessControl.SystemAcl.SetAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
    /**
    Sets the specified audit rule for the specified  object.

    - Parameter auditFlags: The audit condition to set.
    - Parameter sid: The  for which to set an audit rule.
    - Parameter accessMask: The access mask for the new audit rule.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the new audit rule.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the new audit rule.
    */
    public func SetAudit(auditFlags : dotnet.System.Security.AccessControl.AuditFlags, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__SetAudit_0__5__AuditFlags_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags(&__thrown, self.get_handle(), auditFlags.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAudit(System.Security.AccessControl.AuditFlags, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)
// docid: M:System.Security.AccessControl.SystemAcl.SetAudit(System.Security.AccessControl.AuditFlags,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
    /**
    Sets the specified audit rule for the specified  object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.

    - Parameter auditFlags: The audit condition to set.
    - Parameter sid: The  for which to set an audit rule.
    - Parameter accessMask: The access mask for the new audit rule.
    - Parameter inheritanceFlags: Flags that specify the inheritance properties of the new audit rule.
    - Parameter propagationFlags: Flags that specify the inheritance propagation properties for the new audit rule.
    - Parameter objectFlags: Flags that specify if the  and  parameters contain non- values.
    - Parameter objectType: The identity of the class of objects to which the new audit rule applies.
    - Parameter inheritedObjectType: The identity of the class of child objects which can inherit the new audit rule.
    */
    public func SetAudit(auditFlags : dotnet.System.Security.AccessControl.AuditFlags, sid : dotnet.System.Security.Principal.SecurityIdentifier, accessMask : Swift.Int32, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, objectFlags : dotnet.System.Security.AccessControl.ObjectAceFlags, objectType : dotnet.System.Guid, inheritedObjectType : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__SetAudit_0__8__AuditFlags_SecurityIdentifier_i32_InheritanceFlags_PropagationFlags_ObjectAceFlags_Guid_Guid(&__thrown, self.get_handle(), auditFlags.get_value(), sid.get_handle(), accessMask, inheritanceFlags.get_value(), propagationFlags.get_value(), objectFlags.get_value(), objectType.get_handle(), inheritedObjectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAudit(System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAuditRule)
// docid: M:System.Security.AccessControl.SystemAcl.SetAudit(System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAuditRule)
    /**
    Sets the specified audit rule for the specified  object.

    - Parameter sid: The  for which to set an audit rule.
    - Parameter rule: The  for which to set an audit rule.
    */
    public func SetAudit(sid : dotnet.System.Security.Principal.SecurityIdentifier, rule : dotnet.System.Security.AccessControl.ObjectAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_SystemAcl_void__SetAudit_0__2__SecurityIdentifier_ObjectAuditRule(&__thrown, self.get_handle(), sid.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // SystemAcl


}

// System.Security.Policy
extension System.Security.Policy {
// type: System.Security.Policy.Evidence
public final class Evidence
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Policy_Evidence_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Policy.Evidence.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Policy_Evidence_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object[], System.Object[])
// docid: M:System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])
    public init(hostEvidence : dotnet.System_Arr<dotnet.System.Object>, assemblyEvidence : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Policy_Evidence_ctor_0__2__ObjectArray_ObjectArray(&__thrown, hostEvidence.get_handle(), assemblyEvidence.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Policy.Evidence)
// docid: M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)
    public init(evidence : dotnet.System.Security.Policy.Evidence) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Policy_Evidence_ctor_0__1__Evidence(&__thrown, evidence.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Policy.EvidenceBase[], System.Security.Policy.EvidenceBase[])
// docid: M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])
    public init(hostEvidence : dotnet.System_Arr<dotnet.System.Security.Policy.EvidenceBase>, assemblyEvidence : dotnet.System_Arr<dotnet.System.Security.Policy.EvidenceBase>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Policy_Evidence_ctor_0__2__EvidenceBaseArray_EvidenceBaseArray(&__thrown, hostEvidence.get_handle(), assemblyEvidence.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddAssembly(System.Object)
// docid: M:System.Security.Policy.Evidence.AddAssembly(System.Object)
    public func AddAssembly(id : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__AddAssembly_0__1__Object(&__thrown, self.get_handle(), id.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAssemblyEvidence<T>(T)
// docid: M:System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)
    public func AddAssemblyEvidence<UT : SGBridgeGenericValue>(evidence : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__AddAssemblyEvidence_1__1__UT(UT.get_type_handle(), &__thrown, self.get_handle(), evidence.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddHost(System.Object)
// docid: M:System.Security.Policy.Evidence.AddHost(System.Object)
    public func AddHost(id : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__AddHost_0__1__Object(&__thrown, self.get_handle(), id.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddHostEvidence<T>(T)
// docid: M:System.Security.Policy.Evidence.AddHostEvidence``1(``0)
    public func AddHostEvidence<UT : SGBridgeGenericValue>(evidence : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__AddHostEvidence_1__1__UT(UT.get_type_handle(), &__thrown, self.get_handle(), evidence.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Security.Policy.Evidence.Clear
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.Policy.Evidence Clone()
// docid: M:System.Security.Policy.Evidence.Clone
    public func Clone() throws -> Optional<dotnet.System.Security.Policy.Evidence> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_Evidence__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Policy.Evidence(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)
    public func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetAssemblyEnumerator()
// docid: M:System.Security.Policy.Evidence.GetAssemblyEnumerator
    public func GetAssemblyEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_IEnumerator__GetAssemblyEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T GetAssemblyEvidence<T>()
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Security.Policy.Evidence.GetEnumerator
    public func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Collections.IEnumerator GetHostEnumerator()
// docid: M:System.Security.Policy.Evidence.GetHostEnumerator
    public func GetHostEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_IEnumerator__GetHostEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T GetHostEvidence<T>()
    // void Merge(System.Security.Policy.Evidence)
// docid: M:System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)
    public func Merge(evidence : dotnet.System.Security.Policy.Evidence) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__Merge_0__1__Evidence(&__thrown, self.get_handle(), evidence.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveType(System.Type)
// docid: M:System.Security.Policy.Evidence.RemoveType(System.Type)
    public func RemoveType(t : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__RemoveType_0__1__Type(&__thrown, self.get_handle(), t.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Policy.Evidence.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Security.Policy.Evidence.get_IsReadOnly
    public func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Security.Policy.Evidence.get_IsSynchronized
    public func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Locked()
// docid: M:System.Security.Policy.Evidence.get_Locked
    public func get_Locked() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_bool__get_Locked_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Locked(bool)
// docid: M:System.Security.Policy.Evidence.set_Locked(System.Boolean)
    public func set_Locked(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Policy_Evidence_void__set_Locked_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Security.Policy.Evidence.get_SyncRoot
    public func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_Evidence_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    public var Locked : Bool {
        get {
            return try! get_Locked();
        }
        set(v) {
            return try! set_Locked(value: v);
        }
    }
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // Evidence


// type: System.Security.Policy.EvidenceBase
open class EvidenceBase
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Policy_EvidenceBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Security.Policy.EvidenceBase Clone()
// docid: M:System.Security.Policy.EvidenceBase.Clone
    open func Clone() throws -> Optional<dotnet.System.Security.Policy.EvidenceBase> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Policy_EvidenceBase_EvidenceBase__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Policy.EvidenceBase(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // EvidenceBase


}



