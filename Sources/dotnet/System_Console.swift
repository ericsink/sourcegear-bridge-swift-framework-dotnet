// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
extension System {
// type: System.Console
public struct Console {
    // void Beep()
// docid: M:System.Console.Beep
    /**
    Plays the sound of a beep through the console speaker.

    */
    public static func Beep() throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Beep_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Beep(System.Int32, System.Int32)
// docid: M:System.Console.Beep(System.Int32,System.Int32)
    /**
    Plays the sound of a beep of a specified frequency and duration through the console speaker.

    - Parameter frequency: The frequency of the beep, ranging from 37 to 32767 hertz.
    - Parameter duration: The duration of the beep measured in milliseconds.
    */
    public static func Beep(frequency : Swift.Int32, duration : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Beep_0__2__i32_i32(&__thrown, frequency, duration);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Console.Clear
    /**
    Clears the console buffer and corresponding console window of display information.

    */
    public static func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Clear_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ValueTuple<System.Int32,System.Int32> GetCursorPosition()
// docid: M:System.Console.GetCursorPosition
    /**
    Gets the position of the cursor.

    - Returns: The column and row position of the cursor.

    */
    public static func GetCursorPosition() throws -> dotnet.System.ValueTuple_2<Swift.Int32,Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_System_ValueTuple_i32_i32___GetCursorPosition_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ValueTuple_2(hndl : __return);
        }
    }
    // void MoveBufferArea(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
// docid: M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    /**
    Copies a specified source area of the screen buffer to a specified destination area.

    - Parameter sourceLeft: The leftmost column of the source area.
    - Parameter sourceTop: The topmost row of the source area.
    - Parameter sourceWidth: The number of columns in the source area.
    - Parameter sourceHeight: The number of rows in the source area.
    - Parameter targetLeft: The leftmost column of the destination area.
    - Parameter targetTop: The topmost row of the destination area.
    */
    public static func MoveBufferArea(sourceLeft : Swift.Int32, sourceTop : Swift.Int32, sourceWidth : Swift.Int32, sourceHeight : Swift.Int32, targetLeft : Swift.Int32, targetTop : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__MoveBufferArea_0__6__i32_i32_i32_i32_i32_i32(&__thrown, sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveBufferArea(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Char, System.ConsoleColor, System.ConsoleColor)
// docid: M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
    /**
    Copies a specified source area of the screen buffer to a specified destination area.

    - Parameter sourceLeft: The leftmost column of the source area.
    - Parameter sourceTop: The topmost row of the source area.
    - Parameter sourceWidth: The number of columns in the source area.
    - Parameter sourceHeight: The number of rows in the source area.
    - Parameter targetLeft: The leftmost column of the destination area.
    - Parameter targetTop: The topmost row of the destination area.
    - Parameter sourceChar: The character used to fill the source area.
    - Parameter sourceForeColor: The foreground color used to fill the source area.
    - Parameter sourceBackColor: The background color used to fill the source area.
    */
    public static func MoveBufferArea(sourceLeft : Swift.Int32, sourceTop : Swift.Int32, sourceWidth : Swift.Int32, sourceHeight : Swift.Int32, targetLeft : Swift.Int32, targetTop : Swift.Int32, sourceChar : dotnet.System.Char, sourceForeColor : dotnet.System.ConsoleColor, sourceBackColor : dotnet.System.ConsoleColor) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__MoveBufferArea_0__9__i32_i32_i32_i32_i32_i32_Char_ConsoleColor_ConsoleColor(&__thrown, sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop, sourceChar.get_value(), sourceForeColor.get_value(), sourceBackColor.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IO.Stream OpenStandardError()
// docid: M:System.Console.OpenStandardError
    /**
    Acquires the standard error stream.

    - Returns: The standard error stream.

    */
    public static func OpenStandardError() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_Stream__OpenStandardError_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenStandardError(System.Int32)
// docid: M:System.Console.OpenStandardError(System.Int32)
    /**
    Acquires the standard error stream, which is set to a specified buffer size.

    - Parameter bufferSize: The internal stream buffer size.
    - Returns: The standard error stream.

    */
    public static func OpenStandardError(bufferSize : Swift.Int32) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_Stream__OpenStandardError_0__1__i32(&__thrown, bufferSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenStandardInput()
// docid: M:System.Console.OpenStandardInput
    /**
    Acquires the standard input stream.

    - Returns: The standard input stream.

    */
    public static func OpenStandardInput() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_Stream__OpenStandardInput_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenStandardInput(System.Int32)
// docid: M:System.Console.OpenStandardInput(System.Int32)
    /**
    Acquires the standard input stream, which is set to a specified buffer size.

    - Parameter bufferSize: The internal stream buffer size.
    - Returns: The standard input stream.

    */
    public static func OpenStandardInput(bufferSize : Swift.Int32) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_Stream__OpenStandardInput_0__1__i32(&__thrown, bufferSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenStandardOutput()
// docid: M:System.Console.OpenStandardOutput
    /**
    Acquires the standard output stream.

    - Returns: The standard output stream.

    */
    public static func OpenStandardOutput() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_Stream__OpenStandardOutput_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream OpenStandardOutput(System.Int32)
// docid: M:System.Console.OpenStandardOutput(System.Int32)
    /**
    Acquires the standard output stream, which is set to a specified buffer size.

    - Parameter bufferSize: The internal stream buffer size.
    - Returns: The standard output stream.

    */
    public static func OpenStandardOutput(bufferSize : Swift.Int32) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_Stream__OpenStandardOutput_0__1__i32(&__thrown, bufferSize);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Int32 Read()
// docid: M:System.Console.Read
    /**
    Reads the next character from the standard input stream.

    - Returns: The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.

    */
    public static func Read() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__Read_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.ConsoleKeyInfo ReadKey()
// docid: M:System.Console.ReadKey
    /**
    Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.

    - Returns: An object that describes the  constant and Unicode character, if any, that correspond to the pressed console key. The  object also describes, in a bitwise combination of  values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.

    */
    public static func ReadKey() throws -> dotnet.System.ConsoleKeyInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_ConsoleKeyInfo__ReadKey_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ConsoleKeyInfo(hndl : __return);
        }
    }
    // System.ConsoleKeyInfo ReadKey(bool)
// docid: M:System.Console.ReadKey(System.Boolean)
    /**
    Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.

    - Parameter intercept: Determines whether to display the pressed key in the console window.  to not display the pressed key; otherwise, .
    - Returns: An object that describes the  constant and Unicode character, if any, that correspond to the pressed console key. The  object also describes, in a bitwise combination of  values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.

    */
    public static func ReadKey(intercept : Bool) throws -> dotnet.System.ConsoleKeyInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_ConsoleKeyInfo__ReadKey_0__1__bool(&__thrown, Swift.Int32(intercept ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ConsoleKeyInfo(hndl : __return);
        }
    }
    // System.String ReadLine()
// docid: M:System.Console.ReadLine
    /**
    Reads the next line of characters from the standard input stream.

    - Returns: The next line of characters from the input stream, or  if no more lines are available.

    */
    public static func ReadLine() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_String__ReadLine_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ResetColor()
// docid: M:System.Console.ResetColor
    /**
    Sets the foreground and background console colors to their defaults.

    */
    public static func ResetColor() throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__ResetColor_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetBufferSize(System.Int32, System.Int32)
// docid: M:System.Console.SetBufferSize(System.Int32,System.Int32)
    /**
    Sets the height and width of the screen buffer area to the specified values.

    - Parameter width: The width of the buffer area measured in columns.
    - Parameter height: The height of the buffer area measured in rows.
    */
    public static func SetBufferSize(width : Swift.Int32, height : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__SetBufferSize_0__2__i32_i32(&__thrown, width, height);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetCursorPosition(System.Int32, System.Int32)
// docid: M:System.Console.SetCursorPosition(System.Int32,System.Int32)
    /**
    Sets the position of the cursor.

    - Parameter left: The column position of the cursor. Columns are numbered from left to right starting at 0.
    - Parameter top: The row position of the cursor. Rows are numbered from top to bottom starting at 0.
    */
    public static func SetCursorPosition(left : Swift.Int32, top : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__SetCursorPosition_0__2__i32_i32(&__thrown, left, top);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetError(System.IO.TextWriter)
// docid: M:System.Console.SetError(System.IO.TextWriter)
    /**
    Sets the  property to the specified  object.

    - Parameter newError: A stream that is the new standard error output.
    */
    public static func SetError(newError : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__SetError_0__1__TextWriter(&__thrown, newError.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetIn(System.IO.TextReader)
// docid: M:System.Console.SetIn(System.IO.TextReader)
    /**
    Sets the  property to the specified  object.

    - Parameter newIn: A stream that is the new standard input.
    */
    public static func SetIn(newIn : dotnet.System.IO.TextReader) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__SetIn_0__1__TextReader(&__thrown, newIn.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetOut(System.IO.TextWriter)
// docid: M:System.Console.SetOut(System.IO.TextWriter)
    /**
    Sets the  property to target the  object.

    - Parameter newOut: A text writer to be used as the new standard output.
    */
    public static func SetOut(newOut : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__SetOut_0__1__TextWriter(&__thrown, newOut.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetWindowPosition(System.Int32, System.Int32)
// docid: M:System.Console.SetWindowPosition(System.Int32,System.Int32)
    /**
    Sets the position of the console window relative to the screen buffer.

    - Parameter left: The column position of the upper left  corner of the console window.
    - Parameter top: The row position of the upper left corner of the console window.
    */
    public static func SetWindowPosition(left : Swift.Int32, top : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__SetWindowPosition_0__2__i32_i32(&__thrown, left, top);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetWindowSize(System.Int32, System.Int32)
// docid: M:System.Console.SetWindowSize(System.Int32,System.Int32)
    /**
    Sets the height and width of the console window to the specified values.

    - Parameter width: The width of the console window measured in columns.
    - Parameter height: The height of the console window measured in rows.
    */
    public static func SetWindowSize(width : Swift.Int32, height : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__SetWindowSize_0__2__i32_i32(&__thrown, width, height);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(bool)
// docid: M:System.Console.Write(System.Boolean)
    /**
    Writes the text representation of the specified Boolean value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Char)
// docid: M:System.Console.Write(System.Char)
    /**
    Writes the specified Unicode character value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__Char(&__thrown, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Char[])
// docid: M:System.Console.Write(System.Char[])
    /**
    Writes the specified array of Unicode characters to the standard output stream.

    - Parameter buffer: A Unicode character array.
    */
    public static func Write(buffer : Optional<dotnet.System_Arr<dotnet.System.Char>>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__CharArray(&__thrown, (buffer?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Char[], System.Int32, System.Int32)
// docid: M:System.Console.Write(System.Char[],System.Int32,System.Int32)
    /**
    Writes the specified subarray of Unicode characters to the standard output stream.

    - Parameter buffer: An array of Unicode characters.
    - Parameter index: The starting position in .
    - Parameter count: The number of characters to write.
    */
    public static func Write(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__3__CharArray_i32_i32(&__thrown, buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Decimal)
// docid: M:System.Console.Write(System.Decimal)
    /**
    Writes the text representation of the specified  value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Double)
// docid: M:System.Console.Write(System.Double)
    /**
    Writes the text representation of the specified double-precision floating-point value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__f64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int32)
// docid: M:System.Console.Write(System.Int32)
    /**
    Writes the text representation of the specified 32-bit signed integer value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Int64)
// docid: M:System.Console.Write(System.Int64)
    /**
    Writes the text representation of the specified 64-bit signed integer value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__i64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Object)
// docid: M:System.Console.Write(System.Object)
    /**
    Writes the text representation of the specified object to the standard output stream.

    - Parameter value: The value to write, or .
    */
    public static func Write(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Single)
// docid: M:System.Console.Write(System.Single)
    /**
    Writes the text representation of the specified single-precision floating-point value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__f32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String)
// docid: M:System.Console.Write(System.String)
    /**
    Writes the specified string value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String, System.Object)
// docid: M:System.Console.Write(System.String,System.Object)
    /**
    Writes the text representation of the specified object to the standard output stream using the specified format information.

    - Parameter format: A composite format string.
    - Parameter arg0: An object to write using .
    */
    public static func Write(format : dotnet.System.String, arg0 : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__2__String_Object(&__thrown, format.get_handle(), arg0?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String, System.Object, System.Object)
// docid: M:System.Console.Write(System.String,System.Object,System.Object)
    /**
    Writes the text representation of the specified objects to the standard output stream using the specified format information.

    - Parameter format: A composite format string.
    - Parameter arg0: The first object to write using .
    - Parameter arg1: The second object to write using .
    */
    public static func Write(format : dotnet.System.String, arg0 : Optional<dotnet.System.Object>, arg1 : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__3__String_Object_Object(&__thrown, format.get_handle(), arg0?.get_handle() ?? nil, arg1?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String, System.Object, System.Object, System.Object)
// docid: M:System.Console.Write(System.String,System.Object,System.Object,System.Object)
    /**
    Writes the text representation of the specified objects to the standard output stream using the specified format information.

    - Parameter format: A composite format string.
    - Parameter arg0: The first object to write using .
    - Parameter arg1: The second object to write using .
    - Parameter arg2: The third object to write using .
    */
    public static func Write(format : dotnet.System.String, arg0 : Optional<dotnet.System.Object>, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__4__String_Object_Object_Object(&__thrown, format.get_handle(), arg0?.get_handle() ?? nil, arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String, System.Object[])
// docid: M:System.Console.Write(System.String,System.Object[])
    /**
    Writes the text representation of the specified array of objects to the standard output stream using the specified format information.

    - Parameter format: A composite format string.
    - Parameter arg: An array of objects to write using .
    */
    public static func Write(format : dotnet.System.String, arg : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__2__String_ObjectArray(&__thrown, format.get_handle(), (arg?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.UInt32)
// docid: M:System.Console.Write(System.UInt32)
    /**
    Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__u32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.UInt64)
// docid: M:System.Console.Write(System.UInt64)
    /**
    Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func Write(value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__Write_0__1__u64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine()
// docid: M:System.Console.WriteLine
    /**
    Writes the current line terminator to the standard output stream.

    */
    public static func WriteLine() throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(bool)
// docid: M:System.Console.WriteLine(System.Boolean)
    /**
    Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Char)
// docid: M:System.Console.WriteLine(System.Char)
    /**
    Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__Char(&__thrown, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Char[])
// docid: M:System.Console.WriteLine(System.Char[])
    /**
    Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.

    - Parameter buffer: A Unicode character array.
    */
    public static func WriteLine(buffer : Optional<dotnet.System_Arr<dotnet.System.Char>>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__CharArray(&__thrown, (buffer?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Char[], System.Int32, System.Int32)
// docid: M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
    /**
    Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.

    - Parameter buffer: An array of Unicode characters.
    - Parameter index: The starting position in .
    - Parameter count: The number of characters to write.
    */
    public static func WriteLine(buffer : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__3__CharArray_i32_i32(&__thrown, buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Decimal)
// docid: M:System.Console.WriteLine(System.Decimal)
    /**
    Writes the text representation of the specified  value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Double)
// docid: M:System.Console.WriteLine(System.Double)
    /**
    Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__f64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Int32)
// docid: M:System.Console.WriteLine(System.Int32)
    /**
    Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Int64)
// docid: M:System.Console.WriteLine(System.Int64)
    /**
    Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__i64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Object)
// docid: M:System.Console.WriteLine(System.Object)
    /**
    Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Single)
// docid: M:System.Console.WriteLine(System.Single)
    /**
    Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__f32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String)
// docid: M:System.Console.WriteLine(System.String)
    /**
    Writes the specified string value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String, System.Object)
// docid: M:System.Console.WriteLine(System.String,System.Object)
    /**
    Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.

    - Parameter format: A composite format string.
    - Parameter arg0: An object to write using .
    */
    public static func WriteLine(format : dotnet.System.String, arg0 : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__2__String_Object(&__thrown, format.get_handle(), arg0?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String, System.Object, System.Object)
// docid: M:System.Console.WriteLine(System.String,System.Object,System.Object)
    /**
    Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.

    - Parameter format: A composite format string.
    - Parameter arg0: The first object to write using .
    - Parameter arg1: The second object to write using .
    */
    public static func WriteLine(format : dotnet.System.String, arg0 : Optional<dotnet.System.Object>, arg1 : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__3__String_Object_Object(&__thrown, format.get_handle(), arg0?.get_handle() ?? nil, arg1?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String, System.Object, System.Object, System.Object)
// docid: M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
    /**
    Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.

    - Parameter format: A composite format string.
    - Parameter arg0: The first object to write using .
    - Parameter arg1: The second object to write using .
    - Parameter arg2: The third object to write using .
    */
    public static func WriteLine(format : dotnet.System.String, arg0 : Optional<dotnet.System.Object>, arg1 : Optional<dotnet.System.Object>, arg2 : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__4__String_Object_Object_Object(&__thrown, format.get_handle(), arg0?.get_handle() ?? nil, arg1?.get_handle() ?? nil, arg2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String, System.Object[])
// docid: M:System.Console.WriteLine(System.String,System.Object[])
    /**
    Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.

    - Parameter format: A composite format string.
    - Parameter arg: An array of objects to write using .
    */
    public static func WriteLine(format : dotnet.System.String, arg : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__2__String_ObjectArray(&__thrown, format.get_handle(), (arg?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.UInt32)
// docid: M:System.Console.WriteLine(System.UInt32)
    /**
    Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__u32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.UInt64)
// docid: M:System.Console.WriteLine(System.UInt64)
    /**
    Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.

    - Parameter value: The value to write.
    */
    public static func WriteLine(value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__WriteLine_0__1__u64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ConsoleColor get_BackgroundColor()
// docid: M:System.Console.get_BackgroundColor
    public static func get_BackgroundColor() throws -> dotnet.System.ConsoleColor {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_ConsoleColor__get_BackgroundColor_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ConsoleColor(val: __return);
        }
    }
    // [IsSpecialName] void set_BackgroundColor(System.ConsoleColor)
// docid: M:System.Console.set_BackgroundColor(System.ConsoleColor)
    public static func set_BackgroundColor(value : dotnet.System.ConsoleColor) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_BackgroundColor_0__1__ConsoleColor(&__thrown, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_BufferHeight()
// docid: M:System.Console.get_BufferHeight
    public static func get_BufferHeight() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_BufferHeight_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_BufferHeight(System.Int32)
// docid: M:System.Console.set_BufferHeight(System.Int32)
    public static func set_BufferHeight(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_BufferHeight_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_BufferWidth()
// docid: M:System.Console.get_BufferWidth
    public static func get_BufferWidth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_BufferWidth_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_BufferWidth(System.Int32)
// docid: M:System.Console.set_BufferWidth(System.Int32)
    public static func set_BufferWidth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_BufferWidth_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CapsLock()
// docid: M:System.Console.get_CapsLock
    public static func get_CapsLock() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_bool__get_CapsLock_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_CursorLeft()
// docid: M:System.Console.get_CursorLeft
    public static func get_CursorLeft() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_CursorLeft_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_CursorLeft(System.Int32)
// docid: M:System.Console.set_CursorLeft(System.Int32)
    public static func set_CursorLeft(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_CursorLeft_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_CursorSize()
// docid: M:System.Console.get_CursorSize
    public static func get_CursorSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_CursorSize_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_CursorSize(System.Int32)
// docid: M:System.Console.set_CursorSize(System.Int32)
    public static func set_CursorSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_CursorSize_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_CursorTop()
// docid: M:System.Console.get_CursorTop
    public static func get_CursorTop() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_CursorTop_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_CursorTop(System.Int32)
// docid: M:System.Console.set_CursorTop(System.Int32)
    public static func set_CursorTop(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_CursorTop_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CursorVisible()
// docid: M:System.Console.get_CursorVisible
    public static func get_CursorVisible() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_bool__get_CursorVisible_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CursorVisible(bool)
// docid: M:System.Console.set_CursorVisible(System.Boolean)
    public static func set_CursorVisible(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_CursorVisible_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.TextWriter get_Error()
// docid: M:System.Console.get_Error
    public static func get_Error() throws -> dotnet.System.IO.TextWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_TextWriter__get_Error_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextWriter(hndl : __return);
        }
    }
    // [IsSpecialName] System.ConsoleColor get_ForegroundColor()
// docid: M:System.Console.get_ForegroundColor
    public static func get_ForegroundColor() throws -> dotnet.System.ConsoleColor {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_ConsoleColor__get_ForegroundColor_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ConsoleColor(val: __return);
        }
    }
    // [IsSpecialName] void set_ForegroundColor(System.ConsoleColor)
// docid: M:System.Console.set_ForegroundColor(System.ConsoleColor)
    public static func set_ForegroundColor(value : dotnet.System.ConsoleColor) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_ForegroundColor_0__1__ConsoleColor(&__thrown, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.TextReader get_In()
// docid: M:System.Console.get_In
    public static func get_In() throws -> dotnet.System.IO.TextReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_TextReader__get_In_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextReader(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Encoding get_InputEncoding()
// docid: M:System.Console.get_InputEncoding
    public static func get_InputEncoding() throws -> dotnet.System.Text.Encoding {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_Encoding__get_InputEncoding_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoding(hndl : __return);
        }
    }
    // [IsSpecialName] void set_InputEncoding(System.Text.Encoding)
// docid: M:System.Console.set_InputEncoding(System.Text.Encoding)
    public static func set_InputEncoding(value : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_InputEncoding_0__1__Encoding(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsErrorRedirected()
// docid: M:System.Console.get_IsErrorRedirected
    public static func get_IsErrorRedirected() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_bool__get_IsErrorRedirected_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsInputRedirected()
// docid: M:System.Console.get_IsInputRedirected
    public static func get_IsInputRedirected() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_bool__get_IsInputRedirected_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsOutputRedirected()
// docid: M:System.Console.get_IsOutputRedirected
    public static func get_IsOutputRedirected() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_bool__get_IsOutputRedirected_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_KeyAvailable()
// docid: M:System.Console.get_KeyAvailable
    public static func get_KeyAvailable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_bool__get_KeyAvailable_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_LargestWindowHeight()
// docid: M:System.Console.get_LargestWindowHeight
    public static func get_LargestWindowHeight() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_LargestWindowHeight_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_LargestWindowWidth()
// docid: M:System.Console.get_LargestWindowWidth
    public static func get_LargestWindowWidth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_LargestWindowWidth_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_NumberLock()
// docid: M:System.Console.get_NumberLock
    public static func get_NumberLock() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_bool__get_NumberLock_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.IO.TextWriter get_Out()
// docid: M:System.Console.get_Out
    public static func get_Out() throws -> dotnet.System.IO.TextWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_TextWriter__get_Out_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.TextWriter(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Encoding get_OutputEncoding()
// docid: M:System.Console.get_OutputEncoding
    public static func get_OutputEncoding() throws -> dotnet.System.Text.Encoding {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_Encoding__get_OutputEncoding_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoding(hndl : __return);
        }
    }
    // [IsSpecialName] void set_OutputEncoding(System.Text.Encoding)
// docid: M:System.Console.set_OutputEncoding(System.Text.Encoding)
    public static func set_OutputEncoding(value : dotnet.System.Text.Encoding) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_OutputEncoding_0__1__Encoding(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Title()
// docid: M:System.Console.get_Title
    public static func get_Title() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_String__get_Title_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Title(System.String)
// docid: M:System.Console.set_Title(System.String)
    public static func set_Title(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_Title_0__1__String(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_TreatControlCAsInput()
// docid: M:System.Console.get_TreatControlCAsInput
    public static func get_TreatControlCAsInput() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_bool__get_TreatControlCAsInput_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_TreatControlCAsInput(bool)
// docid: M:System.Console.set_TreatControlCAsInput(System.Boolean)
    public static func set_TreatControlCAsInput(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_TreatControlCAsInput_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_WindowHeight()
// docid: M:System.Console.get_WindowHeight
    public static func get_WindowHeight() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_WindowHeight_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_WindowHeight(System.Int32)
// docid: M:System.Console.set_WindowHeight(System.Int32)
    public static func set_WindowHeight(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_WindowHeight_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_WindowLeft()
// docid: M:System.Console.get_WindowLeft
    public static func get_WindowLeft() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_WindowLeft_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_WindowLeft(System.Int32)
// docid: M:System.Console.set_WindowLeft(System.Int32)
    public static func set_WindowLeft(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_WindowLeft_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_WindowTop()
// docid: M:System.Console.get_WindowTop
    public static func get_WindowTop() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_WindowTop_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_WindowTop(System.Int32)
// docid: M:System.Console.set_WindowTop(System.Int32)
    public static func set_WindowTop(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_WindowTop_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_WindowWidth()
// docid: M:System.Console.get_WindowWidth
    public static func get_WindowWidth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Console_i32__get_WindowWidth_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_WindowWidth(System.Int32)
// docid: M:System.Console.set_WindowWidth(System.Int32)
    public static func set_WindowWidth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__set_WindowWidth_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_CancelKeyPress(System.ConsoleCancelEventHandler)
// docid: M:System.Console.add_CancelKeyPress(System.ConsoleCancelEventHandler)
    public static func add_CancelKeyPress(value : Optional<dotnet.System.ConsoleCancelEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__add_CancelKeyPress_0__1__ConsoleCancelEventHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func add_CancelKeyPress(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ConsoleCancelEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ConsoleCancelEventHandler(value);
        return try add_CancelKeyPress(value: del_value);
    }
    // [IsSpecialName] void remove_CancelKeyPress(System.ConsoleCancelEventHandler)
// docid: M:System.Console.remove_CancelKeyPress(System.ConsoleCancelEventHandler)
    public static func remove_CancelKeyPress(value : Optional<dotnet.System.ConsoleCancelEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Console_void__remove_CancelKeyPress_0__1__ConsoleCancelEventHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func remove_CancelKeyPress(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ConsoleCancelEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ConsoleCancelEventHandler(value);
        return try remove_CancelKeyPress(value: del_value);
    }
    /**
    Gets or sets the background color of the console.

    */
    public static var BackgroundColor : dotnet.System.ConsoleColor {
        get {
            return try! get_BackgroundColor();
        }
        set(v) {
            return try! set_BackgroundColor(value: v);
        }
    }
    /**
    Gets or sets the height of the buffer area.

    */
    public static var BufferHeight : Swift.Int32 {
        get {
            return try! get_BufferHeight();
        }
        set(v) {
            return try! set_BufferHeight(value: v);
        }
    }
    /**
    Gets or sets the width of the buffer area.

    */
    public static var BufferWidth : Swift.Int32 {
        get {
            return try! get_BufferWidth();
        }
        set(v) {
            return try! set_BufferWidth(value: v);
        }
    }
    /**
    Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.

    */
    public static var CapsLock : Bool {
        get {
            return try! get_CapsLock();
        }
    }
    /**
    Gets or sets the column position of the cursor within the buffer area.

    */
    public static var CursorLeft : Swift.Int32 {
        get {
            return try! get_CursorLeft();
        }
        set(v) {
            return try! set_CursorLeft(value: v);
        }
    }
    /**
    Gets or sets the height of the cursor within a character cell.

    */
    public static var CursorSize : Swift.Int32 {
        get {
            return try! get_CursorSize();
        }
        set(v) {
            return try! set_CursorSize(value: v);
        }
    }
    /**
    Gets or sets the row position of the cursor within the buffer area.

    */
    public static var CursorTop : Swift.Int32 {
        get {
            return try! get_CursorTop();
        }
        set(v) {
            return try! set_CursorTop(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the cursor is visible.

    */
    public static var CursorVisible : Bool {
        get {
            return try! get_CursorVisible();
        }
        set(v) {
            return try! set_CursorVisible(value: v);
        }
    }
    /**
    Gets the standard error output stream.

    */
    public static var Error : dotnet.System.IO.TextWriter {
        get {
            return try! get_Error();
        }
    }
    /**
    Gets or sets the foreground color of the console.

    */
    public static var ForegroundColor : dotnet.System.ConsoleColor {
        get {
            return try! get_ForegroundColor();
        }
        set(v) {
            return try! set_ForegroundColor(value: v);
        }
    }
    /**
    Gets the standard input stream.

    */
    public static var In : dotnet.System.IO.TextReader {
        get {
            return try! get_In();
        }
    }
    /**
    Gets or sets the encoding the console uses to read input.

    */
    public static var InputEncoding : dotnet.System.Text.Encoding {
        get {
            return try! get_InputEncoding();
        }
        set(v) {
            return try! set_InputEncoding(value: v);
        }
    }
    /**
    Gets a value that indicates whether the error output stream has been redirected from the standard error stream.

    */
    public static var IsErrorRedirected : Bool {
        get {
            return try! get_IsErrorRedirected();
        }
    }
    /**
    Gets a value that indicates whether input has been redirected from the standard input stream.

    */
    public static var IsInputRedirected : Bool {
        get {
            return try! get_IsInputRedirected();
        }
    }
    /**
    Gets a value that indicates whether output has been redirected from the standard output stream.

    */
    public static var IsOutputRedirected : Bool {
        get {
            return try! get_IsOutputRedirected();
        }
    }
    /**
    Gets a value indicating whether a key press is available in the input stream.

    */
    public static var KeyAvailable : Bool {
        get {
            return try! get_KeyAvailable();
        }
    }
    /**
    Gets the largest possible number of console window rows, based on the current font and screen resolution.

    */
    public static var LargestWindowHeight : Swift.Int32 {
        get {
            return try! get_LargestWindowHeight();
        }
    }
    /**
    Gets the largest possible number of console window columns, based on the current font and screen resolution.

    */
    public static var LargestWindowWidth : Swift.Int32 {
        get {
            return try! get_LargestWindowWidth();
        }
    }
    /**
    Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.

    */
    public static var NumberLock : Bool {
        get {
            return try! get_NumberLock();
        }
    }
    /**
    Gets the standard output stream.

    */
    public static var Out : dotnet.System.IO.TextWriter {
        get {
            return try! get_Out();
        }
    }
    /**
    Gets or sets the encoding the console uses to write output.

    */
    public static var OutputEncoding : dotnet.System.Text.Encoding {
        get {
            return try! get_OutputEncoding();
        }
        set(v) {
            return try! set_OutputEncoding(value: v);
        }
    }
    /**
    Gets or sets the title to display in the console title bar.

    */
    public static var Title : dotnet.System.String {
        get {
            return try! get_Title();
        }
        set(v) {
            return try! set_Title(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the combination of the  modifier key and  console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.

    */
    public static var TreatControlCAsInput : Bool {
        get {
            return try! get_TreatControlCAsInput();
        }
        set(v) {
            return try! set_TreatControlCAsInput(value: v);
        }
    }
    /**
    Gets or sets the height of the console window area.

    */
    public static var WindowHeight : Swift.Int32 {
        get {
            return try! get_WindowHeight();
        }
        set(v) {
            return try! set_WindowHeight(value: v);
        }
    }
    /**
    Gets or sets the leftmost position of the console window area relative to the screen buffer.

    */
    public static var WindowLeft : Swift.Int32 {
        get {
            return try! get_WindowLeft();
        }
        set(v) {
            return try! set_WindowLeft(value: v);
        }
    }
    /**
    Gets or sets the top position of the console window area relative to the screen buffer.

    */
    public static var WindowTop : Swift.Int32 {
        get {
            return try! get_WindowTop();
        }
        set(v) {
            return try! set_WindowTop(value: v);
        }
    }
    /**
    Gets or sets the width of the console window.

    */
    public static var WindowWidth : Swift.Int32 {
        get {
            return try! get_WindowWidth();
        }
        set(v) {
            return try! set_WindowWidth(value: v);
        }
    }
} // Console


// type: System.ConsoleCancelEventArgs
    /**
    Provides data for the  event. This class cannot be inherited.

    */
public final class ConsoleCancelEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ConsoleCancelEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] bool get_Cancel()
// docid: M:System.ConsoleCancelEventArgs.get_Cancel
    public func get_Cancel() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleCancelEventArgs_bool__get_Cancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Cancel(bool)
// docid: M:System.ConsoleCancelEventArgs.set_Cancel(System.Boolean)
    public func set_Cancel(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ConsoleCancelEventArgs_void__set_Cancel_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ConsoleSpecialKey get_SpecialKey()
// docid: M:System.ConsoleCancelEventArgs.get_SpecialKey
    public func get_SpecialKey() throws -> dotnet.System.ConsoleSpecialKey {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleCancelEventArgs_ConsoleSpecialKey__get_SpecialKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ConsoleSpecialKey(val: __return);
        }
    }
    /**
    Gets or sets a value that indicates whether simultaneously pressing the  modifier key and the  console key (Ctrl+C) or the Ctrl+Break keys terminates the current process. The default is , which terminates the current process.

    */
    public var Cancel : Bool {
        get {
            return try! get_Cancel();
        }
        set(v) {
            return try! set_Cancel(value: v);
        }
    }
    /**
    Gets the combination of modifier and console keys that interrupted the current process.

    */
    public var SpecialKey : dotnet.System.ConsoleSpecialKey {
        get {
            return try! get_SpecialKey();
        }
    }
} // ConsoleCancelEventArgs


// type: System.ConsoleCancelEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class ConsoleCancelEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ConsoleCancelEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ConsoleCancelEventArgs)
// docid: M:System.ConsoleCancelEventHandler.Invoke(System.Object,System.ConsoleCancelEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ConsoleCancelEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ConsoleCancelEventHandler_void__Invoke_0__2__Object_ConsoleCancelEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ConsoleCancelEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ConsoleCancelEventHandler.BeginInvoke(System.Object,System.ConsoleCancelEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ConsoleCancelEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleCancelEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ConsoleCancelEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ConsoleCancelEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ConsoleCancelEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ConsoleCancelEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ConsoleCancelEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ConsoleCancelEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ConsoleCancelEventArgs)
// docid: M:System.ConsoleCancelEventHandler.Invoke(System.Object,System.ConsoleCancelEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ConsoleCancelEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ConsoleCancelEventHandler_void__Invoke_0__2__Object_ConsoleCancelEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ConsoleCancelEventHandler


// type: System.ConsoleColor
    /**
    Specifies constants that define foreground and background colors for the console.

    */
public struct ConsoleColor : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ConsoleColor_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ConsoleColor Black
    /**
    The color black.

    */
    public static var Black : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_Black());
            return __return;
        }
    }
    // static field: System.ConsoleColor DarkBlue
    /**
    The color dark blue.

    */
    public static var DarkBlue : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_DarkBlue());
            return __return;
        }
    }
    // static field: System.ConsoleColor DarkGreen
    /**
    The color dark green.

    */
    public static var DarkGreen : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_DarkGreen());
            return __return;
        }
    }
    // static field: System.ConsoleColor DarkCyan
    /**
    The color dark cyan (dark blue-green).

    */
    public static var DarkCyan : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_DarkCyan());
            return __return;
        }
    }
    // static field: System.ConsoleColor DarkRed
    /**
    The color dark red.

    */
    public static var DarkRed : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_DarkRed());
            return __return;
        }
    }
    // static field: System.ConsoleColor DarkMagenta
    /**
    The color dark magenta (dark purplish-red).

    */
    public static var DarkMagenta : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_DarkMagenta());
            return __return;
        }
    }
    // static field: System.ConsoleColor DarkYellow
    /**
    The color dark yellow (ochre).

    */
    public static var DarkYellow : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_DarkYellow());
            return __return;
        }
    }
    // static field: System.ConsoleColor Gray
    /**
    The color gray.

    */
    public static var Gray : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_Gray());
            return __return;
        }
    }
    // static field: System.ConsoleColor DarkGray
    /**
    The color dark gray.

    */
    public static var DarkGray : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_DarkGray());
            return __return;
        }
    }
    // static field: System.ConsoleColor Blue
    /**
    The color blue.

    */
    public static var Blue : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_Blue());
            return __return;
        }
    }
    // static field: System.ConsoleColor Green
    /**
    The color green.

    */
    public static var Green : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_Green());
            return __return;
        }
    }
    // static field: System.ConsoleColor Cyan
    /**
    The color cyan (blue-green).

    */
    public static var Cyan : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_Cyan());
            return __return;
        }
    }
    // static field: System.ConsoleColor Red
    /**
    The color red.

    */
    public static var Red : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_Red());
            return __return;
        }
    }
    // static field: System.ConsoleColor Magenta
    /**
    The color magenta (purplish-red).

    */
    public static var Magenta : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_Magenta());
            return __return;
        }
    }
    // static field: System.ConsoleColor Yellow
    /**
    The color yellow.

    */
    public static var Yellow : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_Yellow());
            return __return;
        }
    }
    // static field: System.ConsoleColor White
    /**
    The color white.

    */
    public static var White : dotnet.System.ConsoleColor {
        get {
        let __return = dotnet.System.ConsoleColor(val: System_ConsoleColor_get_White());
            return __return;
        }
    }
} // ConsoleColor


// type: System.ConsoleKey
    /**
    Specifies the standard keys on a console.

    */
public struct ConsoleKey : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ConsoleKey_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ConsoleKey Backspace
    /**
    The BACKSPACE key.

    */
    public static var Backspace : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Backspace());
            return __return;
        }
    }
    // static field: System.ConsoleKey Tab
    /**
    The TAB key.

    */
    public static var Tab : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Tab());
            return __return;
        }
    }
    // static field: System.ConsoleKey Clear
    /**
    The CLEAR key.

    */
    public static var Clear : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Clear());
            return __return;
        }
    }
    // static field: System.ConsoleKey Enter
    /**
    The ENTER key.

    */
    public static var Enter : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Enter());
            return __return;
        }
    }
    // static field: System.ConsoleKey Pause
    /**
    The PAUSE key.

    */
    public static var Pause : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Pause());
            return __return;
        }
    }
    // static field: System.ConsoleKey Escape
    /**
    The ESC (ESCAPE) key.

    */
    public static var Escape : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Escape());
            return __return;
        }
    }
    // static field: System.ConsoleKey Spacebar
    /**
    The SPACEBAR key.

    */
    public static var Spacebar : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Spacebar());
            return __return;
        }
    }
    // static field: System.ConsoleKey PageUp
    /**
    The PAGE UP key.

    */
    public static var PageUp : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_PageUp());
            return __return;
        }
    }
    // static field: System.ConsoleKey PageDown
    /**
    The PAGE DOWN key.

    */
    public static var PageDown : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_PageDown());
            return __return;
        }
    }
    // static field: System.ConsoleKey End
    /**
    The END key.

    */
    public static var End : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_End());
            return __return;
        }
    }
    // static field: System.ConsoleKey Home
    /**
    The HOME key.

    */
    public static var Home : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Home());
            return __return;
        }
    }
    // static field: System.ConsoleKey LeftArrow
    /**
    The LEFT ARROW key.

    */
    public static var LeftArrow : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_LeftArrow());
            return __return;
        }
    }
    // static field: System.ConsoleKey UpArrow
    /**
    The UP ARROW key.

    */
    public static var UpArrow : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_UpArrow());
            return __return;
        }
    }
    // static field: System.ConsoleKey RightArrow
    /**
    The RIGHT ARROW key.

    */
    public static var RightArrow : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_RightArrow());
            return __return;
        }
    }
    // static field: System.ConsoleKey DownArrow
    /**
    The DOWN ARROW key.

    */
    public static var DownArrow : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_DownArrow());
            return __return;
        }
    }
    // static field: System.ConsoleKey Select
    /**
    The SELECT key.

    */
    public static var Select : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Select());
            return __return;
        }
    }
    // static field: System.ConsoleKey Print
    /**
    The PRINT key.

    */
    public static var Print : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Print());
            return __return;
        }
    }
    // static field: System.ConsoleKey Execute
    /**
    The EXECUTE key.

    */
    public static var Execute : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Execute());
            return __return;
        }
    }
    // static field: System.ConsoleKey PrintScreen
    /**
    The PRINT SCREEN key.

    */
    public static var PrintScreen : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_PrintScreen());
            return __return;
        }
    }
    // static field: System.ConsoleKey Insert
    /**
    The INS (INSERT) key.

    */
    public static var Insert : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Insert());
            return __return;
        }
    }
    // static field: System.ConsoleKey Delete
    /**
    The DEL (DELETE) key.

    */
    public static var Delete : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Delete());
            return __return;
        }
    }
    // static field: System.ConsoleKey Help
    /**
    The HELP key.

    */
    public static var Help : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Help());
            return __return;
        }
    }
    // static field: System.ConsoleKey D0
    /**
    The 0 key.

    */
    public static var D0 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D0());
            return __return;
        }
    }
    // static field: System.ConsoleKey D1
    /**
    The 1 key.

    */
    public static var D1 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D1());
            return __return;
        }
    }
    // static field: System.ConsoleKey D2
    /**
    The 2 key.

    */
    public static var D2 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D2());
            return __return;
        }
    }
    // static field: System.ConsoleKey D3
    /**
    The 3 key.

    */
    public static var D3 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D3());
            return __return;
        }
    }
    // static field: System.ConsoleKey D4
    /**
    The 4 key.

    */
    public static var D4 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D4());
            return __return;
        }
    }
    // static field: System.ConsoleKey D5
    /**
    The 5 key.

    */
    public static var D5 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D5());
            return __return;
        }
    }
    // static field: System.ConsoleKey D6
    /**
    The 6 key.

    */
    public static var D6 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D6());
            return __return;
        }
    }
    // static field: System.ConsoleKey D7
    /**
    The 7 key.

    */
    public static var D7 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D7());
            return __return;
        }
    }
    // static field: System.ConsoleKey D8
    /**
    The 8 key.

    */
    public static var D8 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D8());
            return __return;
        }
    }
    // static field: System.ConsoleKey D9
    /**
    The 9 key.

    */
    public static var D9 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D9());
            return __return;
        }
    }
    // static field: System.ConsoleKey A
    /**
    The A key.

    */
    public static var A : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_A());
            return __return;
        }
    }
    // static field: System.ConsoleKey B
    /**
    The B key.

    */
    public static var B : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_B());
            return __return;
        }
    }
    // static field: System.ConsoleKey C
    /**
    The C key.

    */
    public static var C : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_C());
            return __return;
        }
    }
    // static field: System.ConsoleKey D
    /**
    The D key.

    */
    public static var D : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_D());
            return __return;
        }
    }
    // static field: System.ConsoleKey E
    /**
    The E key.

    */
    public static var E : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_E());
            return __return;
        }
    }
    // static field: System.ConsoleKey F
    /**
    The F key.

    */
    public static var F : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F());
            return __return;
        }
    }
    // static field: System.ConsoleKey G
    /**
    The G key.

    */
    public static var G : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_G());
            return __return;
        }
    }
    // static field: System.ConsoleKey H
    /**
    The H key.

    */
    public static var H : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_H());
            return __return;
        }
    }
    // static field: System.ConsoleKey I
    /**
    The I key.

    */
    public static var I : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_I());
            return __return;
        }
    }
    // static field: System.ConsoleKey J
    /**
    The J key.

    */
    public static var J : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_J());
            return __return;
        }
    }
    // static field: System.ConsoleKey K
    /**
    The K key.

    */
    public static var K : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_K());
            return __return;
        }
    }
    // static field: System.ConsoleKey L
    /**
    The L key.

    */
    public static var L : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_L());
            return __return;
        }
    }
    // static field: System.ConsoleKey M
    /**
    The M key.

    */
    public static var M : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_M());
            return __return;
        }
    }
    // static field: System.ConsoleKey N
    /**
    The N key.

    */
    public static var N : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_N());
            return __return;
        }
    }
    // static field: System.ConsoleKey O
    /**
    The O key.

    */
    public static var O : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_O());
            return __return;
        }
    }
    // static field: System.ConsoleKey P
    /**
    The P key.

    */
    public static var P : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_P());
            return __return;
        }
    }
    // static field: System.ConsoleKey Q
    /**
    The Q key.

    */
    public static var Q : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Q());
            return __return;
        }
    }
    // static field: System.ConsoleKey R
    /**
    The R key.

    */
    public static var R : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_R());
            return __return;
        }
    }
    // static field: System.ConsoleKey S
    /**
    The S key.

    */
    public static var S : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_S());
            return __return;
        }
    }
    // static field: System.ConsoleKey T
    /**
    The T key.

    */
    public static var T : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_T());
            return __return;
        }
    }
    // static field: System.ConsoleKey U
    /**
    The U key.

    */
    public static var U : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_U());
            return __return;
        }
    }
    // static field: System.ConsoleKey V
    /**
    The V key.

    */
    public static var V : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_V());
            return __return;
        }
    }
    // static field: System.ConsoleKey W
    /**
    The W key.

    */
    public static var W : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_W());
            return __return;
        }
    }
    // static field: System.ConsoleKey X
    /**
    The X key.

    */
    public static var X : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_X());
            return __return;
        }
    }
    // static field: System.ConsoleKey Y
    /**
    The Y key.

    */
    public static var Y : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Y());
            return __return;
        }
    }
    // static field: System.ConsoleKey Z
    /**
    The Z key.

    */
    public static var Z : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Z());
            return __return;
        }
    }
    // static field: System.ConsoleKey LeftWindows
    /**
    The left Windows logo key (Microsoft Natural Keyboard).

    */
    public static var LeftWindows : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_LeftWindows());
            return __return;
        }
    }
    // static field: System.ConsoleKey RightWindows
    /**
    The right Windows logo key (Microsoft Natural Keyboard).

    */
    public static var RightWindows : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_RightWindows());
            return __return;
        }
    }
    // static field: System.ConsoleKey Applications
    /**
    The Application key (Microsoft Natural Keyboard).

    */
    public static var Applications : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Applications());
            return __return;
        }
    }
    // static field: System.ConsoleKey Sleep
    /**
    The Computer Sleep key.

    */
    public static var Sleep : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Sleep());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad0
    /**
    The 0 key on the numeric keypad.

    */
    public static var NumPad0 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad0());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad1
    /**
    The 1 key on the numeric keypad.

    */
    public static var NumPad1 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad1());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad2
    /**
    The 2 key on the numeric keypad.

    */
    public static var NumPad2 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad2());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad3
    /**
    The 3 key on the numeric keypad.

    */
    public static var NumPad3 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad3());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad4
    /**
    The 4 key on the numeric keypad.

    */
    public static var NumPad4 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad4());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad5
    /**
    The 5 key on the numeric keypad.

    */
    public static var NumPad5 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad5());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad6
    /**
    The 6 key on the numeric keypad.

    */
    public static var NumPad6 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad6());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad7
    /**
    The 7 key on the numeric keypad.

    */
    public static var NumPad7 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad7());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad8
    /**
    The 8 key on the numeric keypad.

    */
    public static var NumPad8 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad8());
            return __return;
        }
    }
    // static field: System.ConsoleKey NumPad9
    /**
    The 9 key on the numeric keypad.

    */
    public static var NumPad9 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NumPad9());
            return __return;
        }
    }
    // static field: System.ConsoleKey Multiply
    /**
    The Multiply key (the multiplication key on the numeric keypad).

    */
    public static var Multiply : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Multiply());
            return __return;
        }
    }
    // static field: System.ConsoleKey Add
    /**
    The Add key (the addition key on the numeric keypad).

    */
    public static var Add : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Add());
            return __return;
        }
    }
    // static field: System.ConsoleKey Separator
    /**
    The Separator key.

    */
    public static var Separator : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Separator());
            return __return;
        }
    }
    // static field: System.ConsoleKey Subtract
    /**
    The Subtract key (the subtraction key on the numeric keypad).

    */
    public static var Subtract : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Subtract());
            return __return;
        }
    }
    // static field: System.ConsoleKey Decimal
    /**
    The Decimal key (the decimal key on the numeric keypad).

    */
    public static var Decimal : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Decimal());
            return __return;
        }
    }
    // static field: System.ConsoleKey Divide
    /**
    The Divide key (the division key on the numeric keypad).

    */
    public static var Divide : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Divide());
            return __return;
        }
    }
    // static field: System.ConsoleKey F1
    /**
    The F1 key.

    */
    public static var F1 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F1());
            return __return;
        }
    }
    // static field: System.ConsoleKey F2
    /**
    The F2 key.

    */
    public static var F2 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F2());
            return __return;
        }
    }
    // static field: System.ConsoleKey F3
    /**
    The F3 key.

    */
    public static var F3 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F3());
            return __return;
        }
    }
    // static field: System.ConsoleKey F4
    /**
    The F4 key.

    */
    public static var F4 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F4());
            return __return;
        }
    }
    // static field: System.ConsoleKey F5
    /**
    The F5 key.

    */
    public static var F5 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F5());
            return __return;
        }
    }
    // static field: System.ConsoleKey F6
    /**
    The F6 key.

    */
    public static var F6 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F6());
            return __return;
        }
    }
    // static field: System.ConsoleKey F7
    /**
    The F7 key.

    */
    public static var F7 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F7());
            return __return;
        }
    }
    // static field: System.ConsoleKey F8
    /**
    The F8 key.

    */
    public static var F8 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F8());
            return __return;
        }
    }
    // static field: System.ConsoleKey F9
    /**
    The F9 key.

    */
    public static var F9 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F9());
            return __return;
        }
    }
    // static field: System.ConsoleKey F10
    /**
    The F10 key.

    */
    public static var F10 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F10());
            return __return;
        }
    }
    // static field: System.ConsoleKey F11
    /**
    The F11 key.

    */
    public static var F11 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F11());
            return __return;
        }
    }
    // static field: System.ConsoleKey F12
    /**
    The F12 key.

    */
    public static var F12 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F12());
            return __return;
        }
    }
    // static field: System.ConsoleKey F13
    /**
    The F13 key.

    */
    public static var F13 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F13());
            return __return;
        }
    }
    // static field: System.ConsoleKey F14
    /**
    The F14 key.

    */
    public static var F14 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F14());
            return __return;
        }
    }
    // static field: System.ConsoleKey F15
    /**
    The F15 key.

    */
    public static var F15 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F15());
            return __return;
        }
    }
    // static field: System.ConsoleKey F16
    /**
    The F16 key.

    */
    public static var F16 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F16());
            return __return;
        }
    }
    // static field: System.ConsoleKey F17
    /**
    The F17 key.

    */
    public static var F17 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F17());
            return __return;
        }
    }
    // static field: System.ConsoleKey F18
    /**
    The F18 key.

    */
    public static var F18 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F18());
            return __return;
        }
    }
    // static field: System.ConsoleKey F19
    /**
    The F19 key.

    */
    public static var F19 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F19());
            return __return;
        }
    }
    // static field: System.ConsoleKey F20
    /**
    The F20 key.

    */
    public static var F20 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F20());
            return __return;
        }
    }
    // static field: System.ConsoleKey F21
    /**
    The F21 key.

    */
    public static var F21 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F21());
            return __return;
        }
    }
    // static field: System.ConsoleKey F22
    /**
    The F22 key.

    */
    public static var F22 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F22());
            return __return;
        }
    }
    // static field: System.ConsoleKey F23
    /**
    The F23 key.

    */
    public static var F23 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F23());
            return __return;
        }
    }
    // static field: System.ConsoleKey F24
    /**
    The F24 key.

    */
    public static var F24 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_F24());
            return __return;
        }
    }
    // static field: System.ConsoleKey BrowserBack
    /**
    The Browser Back key.

    */
    public static var BrowserBack : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_BrowserBack());
            return __return;
        }
    }
    // static field: System.ConsoleKey BrowserForward
    /**
    The Browser Forward key.

    */
    public static var BrowserForward : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_BrowserForward());
            return __return;
        }
    }
    // static field: System.ConsoleKey BrowserRefresh
    /**
    The Browser Refresh key.

    */
    public static var BrowserRefresh : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_BrowserRefresh());
            return __return;
        }
    }
    // static field: System.ConsoleKey BrowserStop
    /**
    The Browser Stop key.

    */
    public static var BrowserStop : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_BrowserStop());
            return __return;
        }
    }
    // static field: System.ConsoleKey BrowserSearch
    /**
    The Browser Search key.

    */
    public static var BrowserSearch : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_BrowserSearch());
            return __return;
        }
    }
    // static field: System.ConsoleKey BrowserFavorites
    /**
    The Browser Favorites key.

    */
    public static var BrowserFavorites : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_BrowserFavorites());
            return __return;
        }
    }
    // static field: System.ConsoleKey BrowserHome
    /**
    The Browser Home key.

    */
    public static var BrowserHome : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_BrowserHome());
            return __return;
        }
    }
    // static field: System.ConsoleKey VolumeMute
    /**
    The Volume Mute key (Microsoft Natural Keyboard).

    */
    public static var VolumeMute : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_VolumeMute());
            return __return;
        }
    }
    // static field: System.ConsoleKey VolumeDown
    /**
    The Volume Down key (Microsoft Natural Keyboard).

    */
    public static var VolumeDown : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_VolumeDown());
            return __return;
        }
    }
    // static field: System.ConsoleKey VolumeUp
    /**
    The Volume Up key (Microsoft Natural Keyboard).

    */
    public static var VolumeUp : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_VolumeUp());
            return __return;
        }
    }
    // static field: System.ConsoleKey MediaNext
    /**
    The Media Next Track key.

    */
    public static var MediaNext : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_MediaNext());
            return __return;
        }
    }
    // static field: System.ConsoleKey MediaPrevious
    /**
    The Media Previous Track key.

    */
    public static var MediaPrevious : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_MediaPrevious());
            return __return;
        }
    }
    // static field: System.ConsoleKey MediaStop
    /**
    The Media Stop key.

    */
    public static var MediaStop : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_MediaStop());
            return __return;
        }
    }
    // static field: System.ConsoleKey MediaPlay
    /**
    The Media Play/Pause key.

    */
    public static var MediaPlay : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_MediaPlay());
            return __return;
        }
    }
    // static field: System.ConsoleKey LaunchMail
    /**
    The Start Mail key (Microsoft Natural Keyboard).

    */
    public static var LaunchMail : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_LaunchMail());
            return __return;
        }
    }
    // static field: System.ConsoleKey LaunchMediaSelect
    /**
    The Select Media key (Microsoft Natural Keyboard).

    */
    public static var LaunchMediaSelect : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_LaunchMediaSelect());
            return __return;
        }
    }
    // static field: System.ConsoleKey LaunchApp1
    /**
    The Start Application 1 key (Microsoft Natural Keyboard).

    */
    public static var LaunchApp1 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_LaunchApp1());
            return __return;
        }
    }
    // static field: System.ConsoleKey LaunchApp2
    /**
    The Start Application 2 key (Microsoft Natural Keyboard).

    */
    public static var LaunchApp2 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_LaunchApp2());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem1
    /**
    The OEM 1 key (OEM specific).

    */
    public static var Oem1 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem1());
            return __return;
        }
    }
    // static field: System.ConsoleKey OemPlus
    /**
    The OEM Plus key on any country/region keyboard.

    */
    public static var OemPlus : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_OemPlus());
            return __return;
        }
    }
    // static field: System.ConsoleKey OemComma
    /**
    The OEM Comma key on any country/region keyboard.

    */
    public static var OemComma : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_OemComma());
            return __return;
        }
    }
    // static field: System.ConsoleKey OemMinus
    /**
    The OEM Minus key on any country/region keyboard.

    */
    public static var OemMinus : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_OemMinus());
            return __return;
        }
    }
    // static field: System.ConsoleKey OemPeriod
    /**
    The OEM Period key on any country/region keyboard.

    */
    public static var OemPeriod : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_OemPeriod());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem2
    /**
    The OEM 2 key (OEM specific).

    */
    public static var Oem2 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem2());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem3
    /**
    The OEM 3 key (OEM specific).

    */
    public static var Oem3 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem3());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem4
    /**
    The OEM 4 key (OEM specific).

    */
    public static var Oem4 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem4());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem5
    /**
    The OEM 5 (OEM specific).

    */
    public static var Oem5 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem5());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem6
    /**
    The OEM 6 key (OEM specific).

    */
    public static var Oem6 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem6());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem7
    /**
    The OEM 7 key (OEM specific).

    */
    public static var Oem7 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem7());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem8
    /**
    The OEM 8 key (OEM specific).

    */
    public static var Oem8 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem8());
            return __return;
        }
    }
    // static field: System.ConsoleKey Oem102
    /**
    The OEM 102 key (OEM specific).

    */
    public static var Oem102 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Oem102());
            return __return;
        }
    }
    // static field: System.ConsoleKey Process
    /**
    The IME PROCESS key.

    */
    public static var Process : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Process());
            return __return;
        }
    }
    // static field: System.ConsoleKey Packet
    /**
    The PACKET key (used to pass Unicode characters with keystrokes).

    */
    public static var Packet : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Packet());
            return __return;
        }
    }
    // static field: System.ConsoleKey Attention
    /**
    The ATTN key.

    */
    public static var Attention : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Attention());
            return __return;
        }
    }
    // static field: System.ConsoleKey CrSel
    /**
    The CRSEL (CURSOR SELECT) key.

    */
    public static var CrSel : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_CrSel());
            return __return;
        }
    }
    // static field: System.ConsoleKey ExSel
    /**
    The EXSEL (EXTEND SELECTION) key.

    */
    public static var ExSel : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_ExSel());
            return __return;
        }
    }
    // static field: System.ConsoleKey EraseEndOfFile
    /**
    The ERASE EOF key.

    */
    public static var EraseEndOfFile : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_EraseEndOfFile());
            return __return;
        }
    }
    // static field: System.ConsoleKey Play
    /**
    The PLAY key.

    */
    public static var Play : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Play());
            return __return;
        }
    }
    // static field: System.ConsoleKey Zoom
    /**
    The ZOOM key.

    */
    public static var Zoom : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Zoom());
            return __return;
        }
    }
    // static field: System.ConsoleKey NoName
    /**
    A constant reserved for future use.

    */
    public static var NoName : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_NoName());
            return __return;
        }
    }
    // static field: System.ConsoleKey Pa1
    /**
    The PA1 key.

    */
    public static var Pa1 : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_Pa1());
            return __return;
        }
    }
    // static field: System.ConsoleKey OemClear
    /**
    The CLEAR key (OEM specific).

    */
    public static var OemClear : dotnet.System.ConsoleKey {
        get {
        let __return = dotnet.System.ConsoleKey(val: System_ConsoleKey_get_OemClear());
            return __return;
        }
    }
} // ConsoleKey


// type: System.ConsoleKeyInfo
// boxed value type
    /**
    Describes the console key that was pressed, including the character represented by the console key and the state of the SHIFT, ALT, and CTRL modifier keys.

    */
public final class ConsoleKeyInfo
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ConsoleKeyInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the console key represented by the current  object.

    */
    public var Key : dotnet.System.ConsoleKey {
        get {
            return try! get_Key();
        }
    }
    /**
    Gets the Unicode character represented by the current  object.

    */
    public var KeyChar : dotnet.System.Char {
        get {
            return try! get_KeyChar();
        }
    }
    /**
    Gets a bitwise combination of  values that specifies one or more modifier keys pressed simultaneously with the console key.

    */
    public var Modifiers : dotnet.System.ConsoleModifiers {
        get {
            return try! get_Modifiers();
        }
    }
    // .ctor(System.Char, System.ConsoleKey, bool, bool, bool)
// docid: M:System.ConsoleKeyInfo.#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  structure using the specified character, console key, and modifier keys.

    - Parameter keyChar: The Unicode character that corresponds to the  parameter.
    - Parameter key: The console key that corresponds to the  parameter.
    - Parameter shift: 
         to indicate that a SHIFT key was pressed; otherwise, .
    - Parameter alt: 
         to indicate that an ALT key was pressed; otherwise, .
    - Parameter control: 
         to indicate that a CTRL key was pressed; otherwise, .
    */
    public init(keyChar : dotnet.System.Char, key : dotnet.System.ConsoleKey, shift : Bool, alt : Bool, control : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ConsoleKeyInfo_ctor_0__5__Char_ConsoleKey_bool_bool_bool(&__thrown, keyChar.get_value(), key.get_value(), Swift.Int32(shift ? 1 : 0), Swift.Int32(alt ? 1 : 0), Swift.Int32(control ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_ConsoleKeyInfo_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.ConsoleKeyInfo)
// docid: M:System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo)
    /**
    Gets a value indicating whether the specified  object is equal to the current  object.

    - Parameter obj: An object to compare to the current  object.
    - Returns: 
         if  is equal to the current  object; otherwise, .

    */
    public func Equals(obj : dotnet.System.ConsoleKeyInfo) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleKeyInfo_bool__Equals_0__1__ConsoleKeyInfo(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ConsoleKeyInfo.Equals(System.Object)
    /**
    Gets a value indicating whether the specified object is equal to the current  object.

    - Parameter value: An object to compare to the current  object.
    - Returns: 
         if  is a  object and is equal to the current  object; otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleKeyInfo_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ConsoleKeyInfo.GetHashCode
    /**
    Returns the hash code for the current  object.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleKeyInfo_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.ConsoleKeyInfo, System.ConsoleKeyInfo)
// docid: M:System.ConsoleKeyInfo.op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)
    /**
    Indicates whether the specified  objects are equal.

    - Parameter a: The first object to compare.
    - Parameter b: The second object to compare.
    - Returns: 
         if  is equal to ; otherwise, .

    */
    public class func op_Equality(a : dotnet.System.ConsoleKeyInfo, b : dotnet.System.ConsoleKeyInfo) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleKeyInfo_bool__op_Equality_0__2__ConsoleKeyInfo_ConsoleKeyInfo(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.ConsoleKeyInfo, System.ConsoleKeyInfo)
// docid: M:System.ConsoleKeyInfo.op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)
    /**
    Indicates whether the specified  objects are not equal.

    - Parameter a: The first object to compare.
    - Parameter b: The second object to compare.
    - Returns: 
         if  is not equal to ; otherwise, .

    */
    public class func op_Inequality(a : dotnet.System.ConsoleKeyInfo, b : dotnet.System.ConsoleKeyInfo) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleKeyInfo_bool__op_Inequality_0__2__ConsoleKeyInfo_ConsoleKeyInfo(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ConsoleKey get_Key()
// docid: M:System.ConsoleKeyInfo.get_Key
    public func get_Key() throws -> dotnet.System.ConsoleKey {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleKeyInfo_ConsoleKey__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ConsoleKey(val: __return);
        }
    }
    // [IsSpecialName] System.Char get_KeyChar()
// docid: M:System.ConsoleKeyInfo.get_KeyChar
    public func get_KeyChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleKeyInfo_Char__get_KeyChar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] System.ConsoleModifiers get_Modifiers()
// docid: M:System.ConsoleKeyInfo.get_Modifiers
    public func get_Modifiers() throws -> dotnet.System.ConsoleModifiers {
        var __thrown : NullableHandle = nil;
        let __return = System_ConsoleKeyInfo_ConsoleModifiers__get_Modifiers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ConsoleModifiers(val: __return);
        }
    }
} // ConsoleKeyInfo


// type: System.ConsoleModifiers
    /**
    Represents the SHIFT, ALT, and CTRL modifier keys on a keyboard.

    */
public struct ConsoleModifiers : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ConsoleModifiers_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ConsoleModifiers Alt
    /**
    The left or right ALT modifier key.

    */
    public static var Alt : dotnet.System.ConsoleModifiers {
        get {
        let __return = dotnet.System.ConsoleModifiers(val: System_ConsoleModifiers_get_Alt());
            return __return;
        }
    }
    // static field: System.ConsoleModifiers Shift
    /**
    The left or right SHIFT modifier key.

    */
    public static var Shift : dotnet.System.ConsoleModifiers {
        get {
        let __return = dotnet.System.ConsoleModifiers(val: System_ConsoleModifiers_get_Shift());
            return __return;
        }
    }
    // static field: System.ConsoleModifiers Control
    /**
    The left or right CTRL modifier key.

    */
    public static var Control : dotnet.System.ConsoleModifiers {
        get {
        let __return = dotnet.System.ConsoleModifiers(val: System_ConsoleModifiers_get_Control());
            return __return;
        }
    }
} // ConsoleModifiers


// type: System.ConsoleSpecialKey
    /**
    Specifies combinations of modifier and console keys that can interrupt the current process.

    */
public struct ConsoleSpecialKey : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ConsoleSpecialKey_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ConsoleSpecialKey ControlC
    /**
    The  modifier key plus the  console key.

    */
    public static var ControlC : dotnet.System.ConsoleSpecialKey {
        get {
        let __return = dotnet.System.ConsoleSpecialKey(val: System_ConsoleSpecialKey_get_ControlC());
            return __return;
        }
    }
    // static field: System.ConsoleSpecialKey ControlBreak
    /**
    The  modifier key plus the BREAK console key.

    */
    public static var ControlBreak : dotnet.System.ConsoleSpecialKey {
        get {
        let __return = dotnet.System.ConsoleSpecialKey(val: System_ConsoleSpecialKey_get_ControlBreak());
            return __return;
        }
    }
} // ConsoleSpecialKey


}

