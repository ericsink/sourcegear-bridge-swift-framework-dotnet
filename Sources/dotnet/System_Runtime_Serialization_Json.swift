// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Runtime
// System.Runtime.Serialization
extension System.Runtime.Serialization {
// type: System.Runtime.Serialization.DateTimeFormat
    /**
    Specifies date-time format options.

    */
open class DateTimeFormat
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_DateTimeFormat_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the format string.

    - Parameter formatString: The format string.
    */
    public init(formatString : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DateTimeFormat_ctor_0__1__String(&__thrown, formatString.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.IFormatProvider)
// docid: M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String,System.IFormatProvider)
    /**
    Initializes a new instance of the  class using the format string and format provider.

    - Parameter formatString: The format sting.
    - Parameter formatProvider: The format provider.
    */
    public init(formatString : dotnet.System.String, formatProvider : dotnet.System.IFormatProvider) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DateTimeFormat_ctor_0__2__String_IFormatProvider(&__thrown, formatString.get_handle(), formatProvider.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Globalization.DateTimeStyles get_DateTimeStyles()
// docid: M:System.Runtime.Serialization.DateTimeFormat.get_DateTimeStyles
    open func get_DateTimeStyles() throws -> dotnet.System.Globalization.DateTimeStyles {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DateTimeFormat_DateTimeStyles__get_DateTimeStyles_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.DateTimeStyles(val: __return);
        }
    }
    // [IsSpecialName] void set_DateTimeStyles(System.Globalization.DateTimeStyles)
// docid: M:System.Runtime.Serialization.DateTimeFormat.set_DateTimeStyles(System.Globalization.DateTimeStyles)
    open func set_DateTimeStyles(value : dotnet.System.Globalization.DateTimeStyles) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DateTimeFormat_void__set_DateTimeStyles_0__1__DateTimeStyles(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IFormatProvider get_FormatProvider()
// docid: M:System.Runtime.Serialization.DateTimeFormat.get_FormatProvider
    open func get_FormatProvider() throws -> dotnet.System.IFormatProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DateTimeFormat_IFormatProvider__get_FormatProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IFormatProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FormatString()
// docid: M:System.Runtime.Serialization.DateTimeFormat.get_FormatString
    open func get_FormatString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DateTimeFormat_String__get_FormatString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the formatting options that customize string parsing for some date and time parsing methods.

    */
    open var DateTimeStyles : dotnet.System.Globalization.DateTimeStyles {
        get {
            return try! get_DateTimeStyles();
        }
        set(v) {
            return try! set_DateTimeStyles(value: v);
        }
    }
    /**
    Gets an object that controls formatting.

    */
    open var FormatProvider : dotnet.System.IFormatProvider {
        get {
            return try! get_FormatProvider();
        }
    }
    /**
    Gets the format strings to control the formatting produced when a date or time is represented as a string.

    */
    open var FormatString : dotnet.System.String {
        get {
            return try! get_FormatString();
        }
    }
} // DateTimeFormat


// type: System.Runtime.Serialization.EmitTypeInformation
    /**
    Specifies how often to emit type information.

    */
public struct EmitTypeInformation : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_EmitTypeInformation_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.Serialization.EmitTypeInformation AsNeeded
    /**
    As needed emit type information.

    */
    public static var AsNeeded : dotnet.System.Runtime.Serialization.EmitTypeInformation {
        get {
        let __return = dotnet.System.Runtime.Serialization.EmitTypeInformation(val: System_Runtime_Serialization_EmitTypeInformation_get_AsNeeded());
            return __return;
        }
    }
    // static field: System.Runtime.Serialization.EmitTypeInformation Always
    /**
    Always to emit type information.

    */
    public static var Always : dotnet.System.Runtime.Serialization.EmitTypeInformation {
        get {
        let __return = dotnet.System.Runtime.Serialization.EmitTypeInformation(val: System_Runtime_Serialization_EmitTypeInformation_get_Always());
            return __return;
        }
    }
    // static field: System.Runtime.Serialization.EmitTypeInformation Never
    /**
    Never to emit type information.

    */
    public static var Never : dotnet.System.Runtime.Serialization.EmitTypeInformation {
        get {
        let __return = dotnet.System.Runtime.Serialization.EmitTypeInformation(val: System_Runtime_Serialization_EmitTypeInformation_get_Never());
            return __return;
        }
    }
} // EmitTypeInformation


}
// System.Runtime.Serialization.Json
extension System.Runtime.Serialization.Json {
// type: System.Runtime.Serialization.Json.DataContractJsonSerializer
    /**
    Serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to objects. This class cannot be inherited.

    */
public final class DataContractJsonSerializer
    :
    dotnet.System.Runtime.Serialization.XmlObjectSerializer
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Json_DataContractJsonSerializer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type.

    - Parameter type: The type of the instances that is serialized or deserialized.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Json_DataContractJsonSerializer_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Collections.Generic.IEnumerable<System.Type>)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type, with a collection of known types that may be present in the object graph.

    - Parameter type: The type of the instances that are serialized or deserialized.
    - Parameter knownTypes: An  of  that contains the types that may be present in the object graph.
    */
    public init(type : dotnet.System.Type_, knownTypes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Json_DataContractJsonSerializer_ctor_0__2__Type_System_Collections_Generic_IEnumerable_System_Type_(&__thrown, type.get_handle(), (knownTypes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type and serializer settings.

    - Parameter type: The type of the instances that is serialized or deserialized.
    - Parameter settings: The serializer settings for the JSON serializer.
    */
    public init(type : dotnet.System.Type_, settings : Optional<dotnet.System.Runtime.Serialization.Json.DataContractJsonSerializerSettings>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Json_DataContractJsonSerializer_ctor_0__2__Type_DataContractJsonSerializerSettings(&__thrown, type.get_handle(), settings?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.String)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter.

    - Parameter type: The type of the instances that is serialized or deserialized.
    - Parameter rootName: The name of the XML element that encloses the content to serialize or deserialize.
    */
    public init(type : dotnet.System.Type_, rootName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Json_DataContractJsonSerializer_ctor_0__2__Type_String(&__thrown, type.get_handle(), rootName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.String, System.Collections.Generic.IEnumerable<System.Type>)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter, with a collection of known types that may be present in the object graph.

    - Parameter type: The type of the instances that is serialized or deserialized.
    - Parameter rootName: The name of the XML element that encloses the content to serialize or deserialize. The default is "root".
    - Parameter knownTypes: An  of  that contains the types that may be present in the object graph.
    */
    public init(type : dotnet.System.Type_, rootName : Optional<dotnet.System.String>, knownTypes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Json_DataContractJsonSerializer_ctor_0__3__Type_String_System_Collections_Generic_IEnumerable_System_Type_(&__thrown, type.get_handle(), rootName?.get_handle() ?? nil, (knownTypes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Xml.XmlDictionaryString)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter of type .

    - Parameter type: The type of the instances that is serialized or deserialized.
    - Parameter rootName: An  that contains the root element name of the content.
    */
    public init(type : dotnet.System.Type_, rootName : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Json_DataContractJsonSerializer_ctor_0__2__Type_XmlDictionaryString(&__thrown, type.get_handle(), rootName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Xml.XmlDictionaryString, System.Collections.Generic.IEnumerable<System.Type>)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter of type , with a collection of known types that may be present in the object graph.

    - Parameter type: The type of the instances that is serialized or deserialized.
    - Parameter rootName: An  that contains the root element name of the content.
    - Parameter knownTypes: An  of  that contains the types that may be present in the object graph.
    */
    public init(type : dotnet.System.Type_, rootName : Optional<dotnet.System.Xml.XmlDictionaryString>, knownTypes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Json_DataContractJsonSerializer_ctor_0__3__Type_XmlDictionaryString_System_Collections_Generic_IEnumerable_System_Type_(&__thrown, type.get_handle(), rootName?.get_handle() ?? nil, (knownTypes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsStartObject(System.Xml.XmlDictionaryReader)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)
    /**
    Gets a value that specifies whether the  is positioned over an XML element that represents an object the serializer can deserialize from.

    - Parameter reader: The  used to read the XML stream mapped from JSON.
    - Returns: 
         if the reader is positioned correctly; otherwise, .

    */
    public override func IsStartObject(reader : dotnet.System.Xml.XmlDictionaryReader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_bool__IsStartObject_0__1__XmlDictionaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartObject(System.Xml.XmlReader)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)
    /**
    Determines whether the  is positioned on an object that can be deserialized.

    - Parameter reader: The  used to read the XML stream.
    - Returns: 
         if the reader is positioned correctly; otherwise, .

    */
    public override func IsStartObject(reader : dotnet.System.Xml.XmlReader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_bool__IsStartObject_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ReadObject(System.IO.Stream)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
    /**
    Reads a document stream in the JSON (JavaScript Object Notation) format and returns the deserialized object.

    - Parameter stream: The  to be read.
    - Returns: The deserialized object.

    */
    public override func ReadObject(stream : dotnet.System.IO.Stream) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_Object__ReadObject_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlDictionaryReader)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)
    /**
    Reads the XML document mapped from JSON (JavaScript Object Notation) with an  and returns the deserialized object.

    - Parameter reader: An  used to read the XML document mapped from JSON.
    - Returns: The deserialized object.

    */
    public override func ReadObject(reader : dotnet.System.Xml.XmlDictionaryReader) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_Object__ReadObject_0__1__XmlDictionaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlDictionaryReader, bool)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)
    /**
    Reads the XML document mapped from JSON with an  and returns the deserialized object; it also enables you to specify whether the serializer should verify that it is positioned on an appropriate element before attempting to deserialize.

    - Parameter reader: An  used to read the XML document mapped from JSON.
    - Parameter verifyObjectName: 
         to check whether the enclosing XML element name and namespace correspond to the expected name and namespace; otherwise,  to skip the verification. The default is .
    - Returns: The deserialized object.

    */
    public override func ReadObject(reader : dotnet.System.Xml.XmlDictionaryReader, verifyObjectName : Bool) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_Object__ReadObject_0__2__XmlDictionaryReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(verifyObjectName ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlReader)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)
    /**
    Reads the XML document mapped from JSON (JavaScript Object Notation) with an  and returns the deserialized object.

    - Parameter reader: An  used to read the XML document mapped from JSON.
    - Returns: The deserialized object.

    */
    public override func ReadObject(reader : dotnet.System.Xml.XmlReader) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_Object__ReadObject_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlReader, bool)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)
    /**
    Reads an XML document mapped from JSON with an  and returns the deserialized object; it also enables you to specify whether the serializer should verify that it is positioned on an appropriate element before attempting to deserialize.

    - Parameter reader: An  used to read the XML document mapped from JSON.
    - Parameter verifyObjectName: 
         to check whether the enclosing XML element name and namespace correspond to the expected name and namespace; otherwise, , which skips the verification. The default is .
    - Returns: The deserialized object.

    */
    public override func ReadObject(reader : dotnet.System.Xml.XmlReader, verifyObjectName : Bool) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_Object__ReadObject_0__2__XmlReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(verifyObjectName ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteEndObject(System.Xml.XmlDictionaryWriter)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)
    /**
    Writes the closing XML element to an XML document, using an , which can be mapped to JavaScript Object Notation (JSON).

    - Parameter writer: An  used to write the XML document to map to JSON.
    */
    public override func WriteEndObject(writer : dotnet.System.Xml.XmlDictionaryWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteEndObject_0__1__XmlDictionaryWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndObject(System.Xml.XmlWriter)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)
    /**
    Writes the closing XML element to an XML document, using an , which can be mapped to JavaScript Object Notation (JSON).

    - Parameter writer: An  used to write the XML document mapped to JSON.
    */
    public override func WriteEndObject(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteEndObject_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObject(System.IO.Stream, System.Object)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)
    /**
    Serializes a specified object to JavaScript Object Notation (JSON) data and writes the resulting JSON to a stream.

    - Parameter stream: The  that is written to.
    - Parameter graph: The object that contains the data to write to the stream.
    */
    public override func WriteObject(stream : dotnet.System.IO.Stream, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteObject_0__2__Stream_Object(&__thrown, self.get_handle(), stream.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObject(System.Xml.XmlDictionaryWriter, System.Object)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)
    /**
    Serializes an object to XML that may be mapped to JavaScript Object Notation (JSON). Writes all the object data, including the starting XML element, content, and closing element, with an .

    - Parameter writer: The  used to write the XML document or stream to map to JSON.
    - Parameter graph: The object that contains the data to write.
    */
    public override func WriteObject(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteObject_0__2__XmlDictionaryWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObject(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)
    /**
    Serializes an object to XML that may be mapped to JavaScript Object Notation (JSON). Writes all the object data, including the starting XML element, content, and closing element, with an .

    - Parameter writer: The  used to write the XML document to map to JSON.
    - Parameter graph: The object that contains the data to write.
    */
    public override func WriteObject(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteObject_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObjectContent(System.Xml.XmlDictionaryWriter, System.Object)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)
    /**
    Writes the XML content that can be mapped to JavaScript Object Notation (JSON) using an .

    - Parameter writer: The  to write to.
    - Parameter graph: The object to write.
    */
    public override func WriteObjectContent(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteObjectContent_0__2__XmlDictionaryWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObjectContent(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)
    /**
    Writes the XML content that can be mapped to JavaScript Object Notation (JSON) using an .

    - Parameter writer: The  used to write to.
    - Parameter graph: The object to write.
    */
    public override func WriteObjectContent(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteObjectContent_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartObject(System.Xml.XmlDictionaryWriter, System.Object)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)
    /**
    Writes the opening XML element for serializing an object to XML that can be mapped to JavaScript Object Notation (JSON) using an .

    - Parameter writer: The  used to write the XML start element.
    - Parameter graph: The object to write.
    */
    public override func WriteStartObject(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteStartObject_0__2__XmlDictionaryWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartObject(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)
    /**
    Writes the opening XML element for serializing an object to XML that can be mapped to JavaScript Object Notation (JSON) using an .

    - Parameter writer: The  used to write the XML start element.
    - Parameter graph: The object to write.
    */
    public override func WriteStartObject(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializer_void__WriteStartObject_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.DateTimeFormat get_DateTimeFormat()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.get_DateTimeFormat
    public func get_DateTimeFormat() throws -> Optional<dotnet.System.Runtime.Serialization.DateTimeFormat> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_DateTimeFormat__get_DateTimeFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.DateTimeFormat(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.EmitTypeInformation get_EmitTypeInformation()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.get_EmitTypeInformation
    public func get_EmitTypeInformation() throws -> dotnet.System.Runtime.Serialization.EmitTypeInformation {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_EmitTypeInformation__get_EmitTypeInformation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.EmitTypeInformation(val: __return);
        }
    }
    // [IsSpecialName] bool get_IgnoreExtensionDataObject()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.get_IgnoreExtensionDataObject
    public func get_IgnoreExtensionDataObject() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_bool__get_IgnoreExtensionDataObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Type> get_KnownTypes()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.get_KnownTypes
    public func get_KnownTypes() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_System_Collections_ObjectModel_ReadOnlyCollection_System_Type___get_KnownTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxItemsInObjectGraph()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.get_MaxItemsInObjectGraph
    public func get_MaxItemsInObjectGraph() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_i32__get_MaxItemsInObjectGraph_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_SerializeReadOnlyTypes()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.get_SerializeReadOnlyTypes
    public func get_SerializeReadOnlyTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_bool__get_SerializeReadOnlyTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_UseSimpleDictionaryFormat()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.get_UseSimpleDictionaryFormat
    public func get_UseSimpleDictionaryFormat() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializer_bool__get_UseSimpleDictionaryFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the format of the date and time type items in object graph.

    */
    public var DateTimeFormat : Optional<dotnet.System.Runtime.Serialization.DateTimeFormat> {
        get {
            return try! get_DateTimeFormat();
        }
    }
    /**
    Gets or sets the data contract JSON serializer settings to emit type information.

    */
    public var EmitTypeInformation : dotnet.System.Runtime.Serialization.EmitTypeInformation {
        get {
            return try! get_EmitTypeInformation();
        }
    }
    /**
    Gets a value that specifies whether unknown data is ignored on deserialization and whether the  interface is ignored on serialization.

    */
    public var IgnoreExtensionDataObject : Bool {
        get {
            return try! get_IgnoreExtensionDataObject();
        }
    }
    /**
    Gets a collection of types that may be present in the object graph serialized using this instance of the .

    */
    public var KnownTypes : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Type_> {
        get {
            return try! get_KnownTypes();
        }
    }
    /**
    Gets the maximum number of items in an object graph that the serializer serializes or deserializes in one read or write call.

    */
    public var MaxItemsInObjectGraph : Swift.Int32 {
        get {
            return try! get_MaxItemsInObjectGraph();
        }
    }
    /**
    Gets or sets a value that specifies whether to serialize read only types.

    */
    public var SerializeReadOnlyTypes : Bool {
        get {
            return try! get_SerializeReadOnlyTypes();
        }
    }
    /**
    Gets a value that specifies whether to use a simple dictionary format.

    */
    public var UseSimpleDictionaryFormat : Bool {
        get {
            return try! get_UseSimpleDictionaryFormat();
        }
    }
} // DataContractJsonSerializer


// type: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings
    /**
    Specifies  settings.

    */
open class DataContractJsonSerializerSettings
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.DateTimeFormat get_DateTimeFormat()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.get_DateTimeFormat
    open func get_DateTimeFormat() throws -> Optional<dotnet.System.Runtime.Serialization.DateTimeFormat> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_DateTimeFormat__get_DateTimeFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.DateTimeFormat(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DateTimeFormat(System.Runtime.Serialization.DateTimeFormat)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.set_DateTimeFormat(System.Runtime.Serialization.DateTimeFormat)
    open func set_DateTimeFormat(value : Optional<dotnet.System.Runtime.Serialization.DateTimeFormat>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_void__set_DateTimeFormat_0__1__DateTimeFormat(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.EmitTypeInformation get_EmitTypeInformation()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.get_EmitTypeInformation
    open func get_EmitTypeInformation() throws -> dotnet.System.Runtime.Serialization.EmitTypeInformation {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_EmitTypeInformation__get_EmitTypeInformation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.EmitTypeInformation(val: __return);
        }
    }
    // [IsSpecialName] void set_EmitTypeInformation(System.Runtime.Serialization.EmitTypeInformation)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.set_EmitTypeInformation(System.Runtime.Serialization.EmitTypeInformation)
    open func set_EmitTypeInformation(value : dotnet.System.Runtime.Serialization.EmitTypeInformation) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_void__set_EmitTypeInformation_0__1__EmitTypeInformation(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreExtensionDataObject()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.get_IgnoreExtensionDataObject
    open func get_IgnoreExtensionDataObject() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_bool__get_IgnoreExtensionDataObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreExtensionDataObject(bool)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.set_IgnoreExtensionDataObject(System.Boolean)
    open func set_IgnoreExtensionDataObject(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_void__set_IgnoreExtensionDataObject_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Type> get_KnownTypes()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.get_KnownTypes
    open func get_KnownTypes() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_System_Collections_Generic_IEnumerable_System_Type___get_KnownTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_KnownTypes(System.Collections.Generic.IEnumerable<System.Type>)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.set_KnownTypes(System.Collections.Generic.IEnumerable{System.Type})
    open func set_KnownTypes(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_void__set_KnownTypes_0__1__System_Collections_Generic_IEnumerable_System_Type_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxItemsInObjectGraph()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.get_MaxItemsInObjectGraph
    open func get_MaxItemsInObjectGraph() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_i32__get_MaxItemsInObjectGraph_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxItemsInObjectGraph(System.Int32)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.set_MaxItemsInObjectGraph(System.Int32)
    open func set_MaxItemsInObjectGraph(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_void__set_MaxItemsInObjectGraph_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RootName()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.get_RootName
    open func get_RootName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_String__get_RootName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RootName(System.String)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.set_RootName(System.String)
    open func set_RootName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_void__set_RootName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SerializeReadOnlyTypes()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.get_SerializeReadOnlyTypes
    open func get_SerializeReadOnlyTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_bool__get_SerializeReadOnlyTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SerializeReadOnlyTypes(bool)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.set_SerializeReadOnlyTypes(System.Boolean)
    open func set_SerializeReadOnlyTypes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_void__set_SerializeReadOnlyTypes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseSimpleDictionaryFormat()
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.get_UseSimpleDictionaryFormat
    open func get_UseSimpleDictionaryFormat() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_bool__get_UseSimpleDictionaryFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseSimpleDictionaryFormat(bool)
// docid: M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.set_UseSimpleDictionaryFormat(System.Boolean)
    open func set_UseSimpleDictionaryFormat(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_DataContractJsonSerializerSettings_void__set_UseSimpleDictionaryFormat_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a DateTimeFormat that defines the culturally appropriate format of displaying dates and times.

    */
    open var DateTimeFormat : Optional<dotnet.System.Runtime.Serialization.DateTimeFormat> {
        get {
            return try! get_DateTimeFormat();
        }
        set(v) {
            return try! set_DateTimeFormat(value: v!);
        }
    }
    /**
    Gets or sets the data contract JSON serializer settings to emit type information.

    */
    open var EmitTypeInformation : dotnet.System.Runtime.Serialization.EmitTypeInformation {
        get {
            return try! get_EmitTypeInformation();
        }
        set(v) {
            return try! set_EmitTypeInformation(value: v);
        }
    }
    /**
    Gets or sets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.

    */
    open var IgnoreExtensionDataObject : Bool {
        get {
            return try! get_IgnoreExtensionDataObject();
        }
        set(v) {
            return try! set_IgnoreExtensionDataObject(value: v);
        }
    }
    /**
    Gets or sets a collection of types that may be present in the object graph serialized using this instance the DataContractJsonSerializerSettings.

    */
    open var KnownTypes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>> {
        get {
            return try! get_KnownTypes();
        }
        set(v) {
            return try! set_KnownTypes(value: v!);
        }
    }
    /**
    Gets or sets the maximum number of items in an object graph to serialize or deserialize.

    */
    open var MaxItemsInObjectGraph : Swift.Int32 {
        get {
            return try! get_MaxItemsInObjectGraph();
        }
        set(v) {
            return try! set_MaxItemsInObjectGraph(value: v);
        }
    }
    /**
    Gets or sets the root name of the selected object.

    */
    open var RootName : Optional<dotnet.System.String> {
        get {
            return try! get_RootName();
        }
        set(v) {
            return try! set_RootName(value: v!);
        }
    }
    /**
    Gets or sets a value that specifies whether to serialize read only types.

    */
    open var SerializeReadOnlyTypes : Bool {
        get {
            return try! get_SerializeReadOnlyTypes();
        }
        set(v) {
            return try! set_SerializeReadOnlyTypes(value: v);
        }
    }
    /**
    Gets or sets a value that specifies whether to use a simple dictionary format.

    */
    open var UseSimpleDictionaryFormat : Bool {
        get {
            return try! get_UseSimpleDictionaryFormat();
        }
        set(v) {
            return try! set_UseSimpleDictionaryFormat(value: v);
        }
    }
} // DataContractJsonSerializerSettings


// type: System.Runtime.Serialization.Json.IXmlJsonReaderInitializer
    /**
    Specifies the interface for initializing a JavaScript Object Notation (JSON) reader when reusing them to read from a particular stream or buffer.

    */
open class IXmlJsonReaderInitializer
    :
    SGBridgeGenericValue,
    System_Runtime_Serialization_Json_IXmlJsonReaderInitializer
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Json_IXmlJsonReaderInitializer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetInput(System.Byte[], System.Int32, System.Int32, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified buffer that contains JSON-encoded data.

    - Parameter buffer: The input  buffer array from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter encoding: The  used by the reader.
    - Parameter quotas: The  to apply.
    - Parameter onClose: The  delegate to call when the reader is closed.
    */
    open func SetInput(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_IXmlJsonReaderInitializer_void__SetInput_0__6__u8Array_i32_i32_Encoding_XmlDictionaryReaderQuotas_OnXmlDictionaryReaderClose(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, encoding?.get_handle() ?? nil, quotas.get_handle(), onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetInput(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try SetInput(buffer: buffer, offset: offset, count: count, encoding: encoding, quotas: quotas, onClose: del_onClose);
    }
    // void SetInput(System.IO.Stream, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified stream that contains JSON-encoded data.

    - Parameter stream: The input  from which to read.
    - Parameter encoding: The  used by the reader.
    - Parameter quotas: 
         to apply.
    - Parameter onClose: Delegate to call when the reader is closed.
    */
    open func SetInput(stream : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_IXmlJsonReaderInitializer_void__SetInput_0__4__Stream_Encoding_XmlDictionaryReaderQuotas_OnXmlDictionaryReaderClose(&__thrown, self.get_handle(), stream.get_handle(), encoding?.get_handle() ?? nil, quotas.get_handle(), onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetInput(stream : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try SetInput(stream: stream, encoding: encoding, quotas: quotas, onClose: del_onClose);
    }
} // IXmlJsonReaderInitializer


// type: System.Runtime.Serialization.Json.IXmlJsonWriterInitializer
    /**
    Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream.

    */
open class IXmlJsonWriterInitializer
    :
    SGBridgeGenericValue,
    System_Runtime_Serialization_Json_IXmlJsonWriterInitializer
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Json_IXmlJsonWriterInitializer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetOutput(System.IO.Stream, System.Text.Encoding, bool)
// docid: M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)
    /**
    Initializes (or reinitializes) a JavaScript Object Notation (JSON) writer to a specified output stream with specified character encoding.

    - Parameter stream: The output  to which the writer writes.
    - Parameter encoding: The  that specifies the character encoding of the output stream.
    - Parameter ownsStream: If , the output stream is closed by the writer when done; otherwise .
    */
    open func SetOutput(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, ownsStream : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Json_IXmlJsonWriterInitializer_void__SetOutput_0__3__Stream_Encoding_bool(&__thrown, self.get_handle(), stream.get_handle(), encoding.get_handle(), Swift.Int32(ownsStream ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IXmlJsonWriterInitializer


// type: System.Runtime.Serialization.Json.JsonReaderWriterFactory
public struct JsonReaderWriterFactory {
    // System.Xml.XmlDictionaryReader CreateJsonReader(System.Byte[], System.Int32, System.Int32, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Creates an  that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.

    - Parameter buffer: The input  buffer array from which to read.
    - Parameter offset: Starting position from which to read in .
    - Parameter count: Number of bytes that can be read from .
    - Parameter encoding: The  that specifies the character encoding used by the reader. If  is specified as the value, the reader attempts to auto-detect the encoding.
    - Parameter quotas: The  used to prevent Denial of Service attacks when reading untrusted data.
    - Parameter onClose: The  delegate to call when the reader is closed. The default value is .
    - Returns: An  that can read JavaScript Object Notation (JSON).

    */
    public static func CreateJsonReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryReader__CreateJsonReader_0__6__u8Array_i32_i32_Encoding_XmlDictionaryReaderQuotas_OnXmlDictionaryReaderClose(&__thrown, buffer.get_handle(), offset, count, encoding?.get_handle() ?? nil, quotas.get_handle(), onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateJsonReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws -> dotnet.System.Xml.XmlDictionaryReader {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try CreateJsonReader(buffer: buffer, offset: offset, count: count, encoding: encoding, quotas: quotas, onClose: del_onClose);
    }
    // System.Xml.XmlDictionaryReader CreateJsonReader(System.Byte[], System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an  that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.

    - Parameter buffer: The input  buffer array from which to read.
    - Parameter offset: Starting position from which to read in .
    - Parameter count: Number of bytes that can be read from .
    - Parameter quotas: The  used to prevent Denial of Service attacks when reading untrusted data.
    - Returns: An  that can read JavaScript Object Notation (JSON).

    */
    public static func CreateJsonReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryReader__CreateJsonReader_0__4__u8Array_i32_i32_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), offset, count, quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateJsonReader(System.Byte[], System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an  that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.

    - Parameter buffer: The input  buffer array from which to read.
    - Parameter quotas: The  used to prevent Denial of Service attacks when reading untrusted data.
    - Returns: An  that can process JavaScript Object Notation (JSON) data.

    */
    public static func CreateJsonReader(buffer : dotnet.System_Arr<Swift.UInt8>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryReader__CreateJsonReader_0__2__u8Array_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateJsonReader(System.IO.Stream, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Creates an  that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.

    - Parameter stream: The input  from which to read.
    - Parameter encoding: The  that specifies the character encoding used by the reader. If  is specified as the value, the reader attempts to auto-detect the encoding.
    - Parameter quotas: The  used to prevent Denial of Service attacks when reading untrusted data.
    - Parameter onClose: The  delegate to call when the reader is closed.
    - Returns: An  that can read JavaScript Object Notation (JSON).

    */
    public static func CreateJsonReader(stream : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryReader__CreateJsonReader_0__4__Stream_Encoding_XmlDictionaryReaderQuotas_OnXmlDictionaryReaderClose(&__thrown, stream.get_handle(), encoding?.get_handle() ?? nil, quotas.get_handle(), onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateJsonReader(stream : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws -> dotnet.System.Xml.XmlDictionaryReader {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try CreateJsonReader(stream: stream, encoding: encoding, quotas: quotas, onClose: del_onClose);
    }
    // System.Xml.XmlDictionaryReader CreateJsonReader(System.IO.Stream, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an  that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.

    - Parameter stream: The input  from which to read.
    - Parameter quotas: The  used to prevent Denial of Service attacks when reading untrusted data.
    - Returns: An  that can read JavaScript Object Notation (JSON).

    */
    public static func CreateJsonReader(stream : dotnet.System.IO.Stream, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryReader__CreateJsonReader_0__2__Stream_XmlDictionaryReaderQuotas(&__thrown, stream.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateJsonWriter(System.IO.Stream)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)
    /**
    Creates an  that writes data encoded with JSON to a stream.

    - Parameter stream: The output  for the JSON writer.
    - Returns: An  that writes data encoded with JSON to the stream based on an XML Infoset.

    */
    public static func CreateJsonWriter(stream : dotnet.System.IO.Stream) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryWriter__CreateJsonWriter_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateJsonWriter(System.IO.Stream, System.Text.Encoding)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)
    /**
    Creates an  that writes data encoded with JSON to a stream with a specified character encoding.

    - Parameter stream: The output  for the JSON writer.
    - Parameter encoding: The  that specifies the character encoding used by the writer. The default encoding is UTF-8.
    - Returns: An  that writes data encoded with JSON to the stream based on an XML Infoset.

    */
    public static func CreateJsonWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryWriter__CreateJsonWriter_0__2__Stream_Encoding(&__thrown, stream.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateJsonWriter(System.IO.Stream, System.Text.Encoding, bool)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)
    /**
    Creates an  that writes data encoded with JSON to a stream with a specified character encoding.

    - Parameter stream: The output  for the JSON writer.
    - Parameter encoding: The  that specifies the character encoding used by the writer. The default encoding is UTF-8.
    - Parameter ownsStream: If , the output stream is closed by the writer when done; otherwise . The default value is .
    - Returns: An  that writes data encoded with JSON to the stream based on an XML Infoset.

    */
    public static func CreateJsonWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, ownsStream : Bool) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryWriter__CreateJsonWriter_0__3__Stream_Encoding_bool(&__thrown, stream.get_handle(), encoding.get_handle(), Swift.Int32(ownsStream ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateJsonWriter(System.IO.Stream, System.Text.Encoding, bool, bool)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
    /**
    Creates an  that writes data encoded with JSON to a stream with a specified character.

    - Parameter stream: The output  for the JSON writer.
    - Parameter encoding: The  that specifies the character encoding used by the writer. The default encoding is UTF-8.
    - Parameter ownsStream: If , the output stream is closed by the writer when done; otherwise . The default value is .
    - Parameter indent: If , the output uses multiline format, indenting each level properly; otherwise, .
    - Returns: An  that writes data encoded with JSON to the stream based on an XML Infoset.

    */
    public static func CreateJsonWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, ownsStream : Bool, indent : Bool) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryWriter__CreateJsonWriter_0__4__Stream_Encoding_bool_bool(&__thrown, stream.get_handle(), encoding.get_handle(), Swift.Int32(ownsStream ? 1 : 0), Swift.Int32(indent ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateJsonWriter(System.IO.Stream, System.Text.Encoding, bool, bool, System.String)
// docid: M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)
    /**
    Creates an  that writes data encoded with JSON to a stream with a specified character.

    - Parameter stream: The output  for the JSON writer.
    - Parameter encoding: The  that specifies the character encoding used by the writer. The default encoding is UTF-8.
    - Parameter ownsStream: If , the output stream is closed by the writer when done; otherwise . The default value is .
    - Parameter indent: If , the output uses multiline format, indenting each level properly; otherwise, .
    - Parameter indentChars: The string used to indent each level.
    - Returns: An  that writes data encoded with JSON to the stream based on an XML Infoset.

    */
    public static func CreateJsonWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, ownsStream : Bool, indent : Bool, indentChars : Optional<dotnet.System.String>) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Json_JsonReaderWriterFactory_XmlDictionaryWriter__CreateJsonWriter_0__5__Stream_Encoding_bool_bool_String(&__thrown, stream.get_handle(), encoding.get_handle(), Swift.Int32(ownsStream ? 1 : 0), Swift.Int32(indent ? 1 : 0), indentChars?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
} // JsonReaderWriterFactory


}




public protocol System_Runtime_Serialization_Json_IXmlJsonReaderInitializer
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_Serialization_Json_IXmlJsonWriterInitializer
    :
    SGBridgeGetHandle
{
}

