// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Xml
// System.Xml.Linq
extension System.Xml.Linq {
// type: System.Xml.Linq.Extensions
public struct Extensions {
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
// docid: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    /**
    Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  that contains every element in the source collection, and the ancestors of every element in the source collection.

    */
    public static func AncestorsAndSelf(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___AncestorsAndSelf_0__1__System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
    /**
    Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching  are included in the collection.

    - Parameter source: An  of  that contains the source collection.
    - Parameter name: The  to match.
    - Returns: An  of  that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching  are included in the collection.

    */
    public static func AncestorsAndSelf(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement>, name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___AncestorsAndSelf_0__2__System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__XName(&__thrown, source.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns a collection of elements that contains the ancestors of every node in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  that contains the ancestors of every node in the source collection.

    */
    public static func Ancestors<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Ancestors_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
    /**
    Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching  are included in the collection.

    - Parameter source: An  of  that contains the source collection.
    - Parameter name: The  to match.
    - Returns: An  of  that contains the ancestors of every node in the source collection. Only elements that have a matching  are included in the collection.

    */
    public static func Ancestors<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>, name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Ancestors_1__2__System_Collections_Generic_IEnumerable_UT__XName(UT.get_type_handle(), &__thrown, source.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
// docid: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    /**
    Returns a collection of the attributes of every element in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  that contains the attributes of every element in the source collection.

    */
    public static func Attributes(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XAttribute___Attributes_0__1__System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
    /**
    Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching  are included in the collection.

    - Parameter source: An  of  that contains the source collection.
    - Parameter name: The  to match.
    - Returns: An  of  that contains a filtered collection of the attributes of every element in the source collection. Only elements that have a matching  are included in the collection.

    */
    public static func Attributes(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement>, name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XAttribute___Attributes_0__2__System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__XName(&__thrown, source.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
// docid: M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    /**
    Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  that contains every element in the source collection, and the descendant nodes of every element in the source collection.

    */
    public static func DescendantNodesAndSelf(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XNode___DescendantNodesAndSelf_0__1__System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodes<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns a collection of the descendant nodes of every document and element in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  of the descendant nodes of every document and element in the source collection.

    */
    public static func DescendantNodes<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XNode___DescendantNodes_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
// docid: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    /**
    Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  that contains every element in the source collection, and the descendent elements of every element in the source collection.

    */
    public static func DescendantsAndSelf(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___DescendantsAndSelf_0__1__System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
    /**
    Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching  are included in the collection.

    - Parameter source: An  of  that contains the source collection.
    - Parameter name: The  to match.
    - Returns: An  of  that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching  are included in the collection.

    */
    public static func DescendantsAndSelf(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement>, name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___DescendantsAndSelf_0__2__System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement__XName(&__thrown, source.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns a collection of elements that contains the descendant elements of every element and document in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  that contains the descendant elements of every element and document in the source collection.

    */
    public static func Descendants<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Descendants_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
    /**
    Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching  are included in the collection.

    - Parameter source: An  of  that contains the source collection.
    - Parameter name: The  to match.
    - Returns: An  of  that contains the descendant elements of every element and document in the source collection. Only elements that have a matching  are included in the collection.

    */
    public static func Descendants<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>, name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Descendants_1__2__System_Collections_Generic_IEnumerable_UT__XName(UT.get_type_handle(), &__thrown, source.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns a collection of the child elements of every element and document in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  of the child elements of every element or document in the source collection.

    */
    public static func Elements<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Elements_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
    /**
    Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching  are included in the collection.

    - Parameter source: An  of  that contains the source collection.
    - Parameter name: The  to match.
    - Returns: An  of  of the child elements of every element and document in the source collection. Only elements that have a matching  are included in the collection.

    */
    public static func Elements<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>, name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Elements_1__2__System_Collections_Generic_IEnumerable_UT__XName(UT.get_type_handle(), &__thrown, source.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<T> InDocumentOrder<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  that contains all nodes in the source collection, sorted in document order.

    */
    public static func InDocumentOrder<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_UT___InDocumentOrder_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> Nodes<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Returns a collection of the child nodes of every document and element in the source collection.

    - Parameter source: An  of  that contains the source collection.
    - Returns: An  of  of the child nodes of every document and element in the source collection.

    */
    public static func Nodes<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XNode___Nodes_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // void Remove(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>)
// docid: M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
    /**
    Removes every attribute in the source collection from its parent element.

    - Parameter source: An  of  that contains the source collection.
    */
    public static func Remove(source : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_Extensions_void__Remove_0__1__System_Collections_Generic_IEnumerable_System_Xml_Linq_XAttribute_(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove<T>(System.Collections.Generic.IEnumerable<T>)
// docid: M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})
    /**
    Removes every node in the source collection from its parent node.

    - Parameter source: An  of  that contains the source collection.
    */
    public static func Remove<UT : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UT>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_Extensions_void__Remove_1__1__System_Collections_Generic_IEnumerable_UT_(UT.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Extensions


// type: System.Xml.Linq.LoadOptions
    /**
    Specifies load options when parsing XML.

    */
public struct LoadOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_LoadOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Linq.LoadOptions None
    /**
    Does not preserve insignificant white space or load base URI and line information.

    */
    public static var None : dotnet.System.Xml.Linq.LoadOptions {
        get {
        let __return = dotnet.System.Xml.Linq.LoadOptions(val: System_Xml_Linq_LoadOptions_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Linq.LoadOptions PreserveWhitespace
    /**
    Preserves insignificant white space while parsing.

    */
    public static var PreserveWhitespace : dotnet.System.Xml.Linq.LoadOptions {
        get {
        let __return = dotnet.System.Xml.Linq.LoadOptions(val: System_Xml_Linq_LoadOptions_get_PreserveWhitespace());
            return __return;
        }
    }
    // static field: System.Xml.Linq.LoadOptions SetBaseUri
    /**
    Requests the base URI information from the , and makes it available via the  property.

    */
    public static var SetBaseUri : dotnet.System.Xml.Linq.LoadOptions {
        get {
        let __return = dotnet.System.Xml.Linq.LoadOptions(val: System_Xml_Linq_LoadOptions_get_SetBaseUri());
            return __return;
        }
    }
    // static field: System.Xml.Linq.LoadOptions SetLineInfo
    /**
    Requests the line information from the  and makes it available via properties on .

    */
    public static var SetLineInfo : dotnet.System.Xml.Linq.LoadOptions {
        get {
        let __return = dotnet.System.Xml.Linq.LoadOptions(val: System_Xml_Linq_LoadOptions_get_SetLineInfo());
            return __return;
        }
    }
} // LoadOptions


// type: System.Xml.Linq.ReaderOptions
    /**
    Specifies whether to omit duplicate namespaces when loading an  with an .

    */
public struct ReaderOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_ReaderOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Linq.ReaderOptions None
    /**
    No reader options specified.

    */
    public static var None : dotnet.System.Xml.Linq.ReaderOptions {
        get {
        let __return = dotnet.System.Xml.Linq.ReaderOptions(val: System_Xml_Linq_ReaderOptions_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Linq.ReaderOptions OmitDuplicateNamespaces
    /**
    Omit duplicate namespaces when loading the .

    */
    public static var OmitDuplicateNamespaces : dotnet.System.Xml.Linq.ReaderOptions {
        get {
        let __return = dotnet.System.Xml.Linq.ReaderOptions(val: System_Xml_Linq_ReaderOptions_get_OmitDuplicateNamespaces());
            return __return;
        }
    }
} // ReaderOptions


// type: System.Xml.Linq.SaveOptions
    /**
    Specifies serialization options.

    */
public struct SaveOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_SaveOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Linq.SaveOptions None
    /**
    Format (indent) the XML while serializing.

    */
    public static var None : dotnet.System.Xml.Linq.SaveOptions {
        get {
        let __return = dotnet.System.Xml.Linq.SaveOptions(val: System_Xml_Linq_SaveOptions_get_None());
            return __return;
        }
    }
    // static field: System.Xml.Linq.SaveOptions DisableFormatting
    /**
    Preserve all insignificant white space while serializing.

    */
    public static var DisableFormatting : dotnet.System.Xml.Linq.SaveOptions {
        get {
        let __return = dotnet.System.Xml.Linq.SaveOptions(val: System_Xml_Linq_SaveOptions_get_DisableFormatting());
            return __return;
        }
    }
    // static field: System.Xml.Linq.SaveOptions OmitDuplicateNamespaces
    /**
    Remove the duplicate namespace declarations while serializing.

    */
    public static var OmitDuplicateNamespaces : dotnet.System.Xml.Linq.SaveOptions {
        get {
        let __return = dotnet.System.Xml.Linq.SaveOptions(val: System_Xml_Linq_SaveOptions_get_OmitDuplicateNamespaces());
            return __return;
        }
    }
} // SaveOptions


// type: System.Xml.Linq.XAttribute
    /**
    Represents an XML attribute.

    */
open class XAttribute
    :
    dotnet.System.Xml.Linq.XObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)
    /**
    Initializes a new instance of the  class from another  object.

    - Parameter other: An  object to copy from.
    */
    public init(other : dotnet.System.Xml.Linq.XAttribute) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XAttribute_ctor_0__1__XAttribute(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XName, System.Object)
// docid: M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)
    /**
    Initializes a new instance of the  class from the specified name and value.

    - Parameter name: The  of the attribute.
    - Parameter value: An  containing the value of the attribute.
    */
    public init(name : dotnet.System.Xml.Linq.XName, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XAttribute_ctor_0__2__XName_Object(&__thrown, name.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_bool__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.DateTime op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_DateTime__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTimeOffset op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_DateTimeOffset__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // [IsSpecialName] System.Decimal op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_Decimal__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_f64__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Guid op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_Guid__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_i32__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_i64__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_bool___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_System_DateTimeOffset___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTime> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_System_DateTime___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTime(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Decimal> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<dotnet.System.Decimal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_System_Decimal___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Decimal(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Double> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_f64___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Double_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_System_Guid___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_i32___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_i64___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Single> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_f32___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Single_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_System_TimeSpan___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.UInt32> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<Swift.UInt32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_u32___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_UInt32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.UInt64> op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<Swift.UInt64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Nullable_u64___op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_UInt64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Single op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_f32__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : Optional<dotnet.System.Xml.Linq.XAttribute>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_String__op_Explicit_0__1__XAttribute(&__thrown, attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.TimeSpan op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_TimeSpan__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.UInt32 op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_u32__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.UInt64 op_Explicit(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)
    open class func op_Explicit(attribute : dotnet.System.Xml.Linq.XAttribute) throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_u64__op_Explicit_0__1__XAttribute(&__thrown, attribute.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Remove()
// docid: M:System.Xml.Linq.XAttribute.Remove
    /**
    Removes this attribute from its parent element.

    */
    open func Remove() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XAttribute_void__Remove_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.Object)
// docid: M:System.Xml.Linq.XAttribute.SetValue(System.Object)
    /**
    Sets the value of this attribute.

    - Parameter value: The value to assign to this attribute.
    */
    open func SetValue(value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XAttribute_void__SetValue_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Xml.Linq.XAttribute.ToString
    /**
    Converts the current  object to a string representation.

    - Returns: A  containing the XML text representation of an attribute and its value.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> get_EmptySequence()
// docid: M:System.Xml.Linq.XAttribute.get_EmptySequence
    open class func get_EmptySequence() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_System_Collections_Generic_IEnumerable_System_Xml_Linq_XAttribute___get_EmptySequence_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsNamespaceDeclaration()
// docid: M:System.Xml.Linq.XAttribute.get_IsNamespaceDeclaration
    open func get_IsNamespaceDeclaration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_bool__get_IsNamespaceDeclaration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Linq.XName get_Name()
// docid: M:System.Xml.Linq.XAttribute.get_Name
    open func get_Name() throws -> dotnet.System.Xml.Linq.XName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_XName__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XAttribute get_NextAttribute()
// docid: M:System.Xml.Linq.XAttribute.get_NextAttribute
    open func get_NextAttribute() throws -> Optional<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_XAttribute__get_NextAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XAttribute.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XAttribute get_PreviousAttribute()
// docid: M:System.Xml.Linq.XAttribute.get_PreviousAttribute
    open func get_PreviousAttribute() throws -> Optional<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_XAttribute__get_PreviousAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.Linq.XAttribute.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XAttribute_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.Linq.XAttribute.set_Value(System.String)
    open func set_Value(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XAttribute_void__set_Value_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets an empty collection of attributes.

    */
    public static var EmptySequence : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute> {
        get {
            return try! get_EmptySequence();
        }
    }
    /**
    Determines if this attribute is a namespace declaration.

    */
    open var IsNamespaceDeclaration : Bool {
        get {
            return try! get_IsNamespaceDeclaration();
        }
    }
    /**
    Gets the expanded name of this attribute.

    */
    open var Name : dotnet.System.Xml.Linq.XName {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the next attribute of the parent element.

    */
    open var NextAttribute : Optional<dotnet.System.Xml.Linq.XAttribute> {
        get {
            return try! get_NextAttribute();
        }
    }
    /**
    Gets the node type for this node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the previous attribute of the parent element.

    */
    open var PreviousAttribute : Optional<dotnet.System.Xml.Linq.XAttribute> {
        get {
            return try! get_PreviousAttribute();
        }
    }
    /**
    Gets or sets the value of this attribute.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // XAttribute


// type: System.Xml.Linq.XCData
    /**
    Represents a text node that contains CDATA.

    */
open class XCData
    :
    dotnet.System.Xml.Linq.XText
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XCData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Xml.Linq.XCData.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter value: A string that contains the value of the  node.
    */
    public override init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XCData_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XCData)
// docid: M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)
    /**
    Initializes a new instance of the  class.

    - Parameter other: The  node to copy from.
    */
    public init(other : dotnet.System.Xml.Linq.XCData) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XCData_ctor_0__1__XCData(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)
    /**
    Writes this CDATA object to an .

    - Parameter writer: An  into which this method will write.
    */
    open override func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XCData_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteToAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XCData.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Writes this  to the given .

    - Parameter writer: The writer to write this  to.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous write operation.

    */
    open override func WriteToAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XCData_Task__WriteToAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XCData.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XCData_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    /**
    Gets the node type for this node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
} // XCData


// type: System.Xml.Linq.XComment
    /**
    Represents an XML comment.

    */
open class XComment
    :
    dotnet.System.Xml.Linq.XNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XComment_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Xml.Linq.XComment.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified string content.

    - Parameter value: A string that contains the contents of the new  object.
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XComment_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XComment)
// docid: M:System.Xml.Linq.XComment.#ctor(System.Xml.Linq.XComment)
    /**
    Initializes a new instance of the  class from an existing comment node.

    - Parameter other: The  node to copy from.
    */
    public init(other : dotnet.System.Xml.Linq.XComment) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XComment_ctor_0__1__XComment(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XComment.WriteTo(System.Xml.XmlWriter)
    /**
    Write this comment to an .

    - Parameter writer: An  into which this method will write.
    */
    open override func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XComment_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteToAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XComment.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Writes this  to the specified .

    - Parameter writer: The writer to write this  to.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task that represents the asynchronous write operation.

    */
    open override func WriteToAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XComment_Task__WriteToAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XComment.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XComment_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.Linq.XComment.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XComment_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.Linq.XComment.set_Value(System.String)
    open func set_Value(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XComment_void__set_Value_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the node type for this node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets the string value of this comment.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // XComment


// type: System.Xml.Linq.XContainer
    /**
    Represents a node that can contain other nodes.

    */
open class XContainer
    :
    dotnet.System.Xml.Linq.XNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XContainer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Add(System.Object)
// docid: M:System.Xml.Linq.XContainer.Add(System.Object)
    /**
    Adds the specified content as children of this .

    - Parameter content: A content object containing simple content or a collection of content objects to be added.
    */
    open func Add(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XContainer_void__Add_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Object[])
// docid: M:System.Xml.Linq.XContainer.Add(System.Object[])
    /**
    Adds the specified content as children of this .

    - Parameter content: A parameter list of content objects.
    */
    open func Add(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XContainer_void__Add_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddFirst(System.Object)
// docid: M:System.Xml.Linq.XContainer.AddFirst(System.Object)
    /**
    Adds the specified content as the first children of this document or element.

    - Parameter content: A content object containing simple content or a collection of content objects to be added.
    */
    open func AddFirst(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XContainer_void__AddFirst_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddFirst(System.Object[])
// docid: M:System.Xml.Linq.XContainer.AddFirst(System.Object[])
    /**
    Adds the specified content as the first children of this document or element.

    - Parameter content: A parameter list of content objects.
    */
    open func AddFirst(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XContainer_void__AddFirst_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlWriter CreateWriter()
// docid: M:System.Xml.Linq.XContainer.CreateWriter
    /**
    Creates an  that can be used to add nodes to the .

    - Returns: An  that is ready to have content written to it.

    */
    open func CreateWriter() throws -> dotnet.System.Xml.XmlWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_XmlWriter__CreateWriter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlWriter(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodes()
// docid: M:System.Xml.Linq.XContainer.DescendantNodes
    /**
    Returns a collection of the descendant nodes for this document or element, in document order.

    - Returns: An  of  containing the descendant nodes of the , in document order.

    */
    open func DescendantNodes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_System_Collections_Generic_IEnumerable_System_Xml_Linq_XNode___DescendantNodes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants()
// docid: M:System.Xml.Linq.XContainer.Descendants
    /**
    Returns a collection of the descendant elements for this document or element, in document order.

    - Returns: An  of  containing the descendant elements of the .

    */
    open func Descendants() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Descendants_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)
    /**
    Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching  are included in the collection.

    - Parameter name: The  to match.
    - Returns: An  of  containing the descendant elements of the  that match the specified .

    */
    open func Descendants(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Descendants_0__1__XName(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Element(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)
    /**
    Gets the first (in document order) child element with the specified .

    - Parameter name: The  to match.
    - Returns: A  that matches the specified , or .

    */
    open func Element(name : dotnet.System.Xml.Linq.XName) throws -> Optional<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_XElement__Element_0__1__XName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements()
// docid: M:System.Xml.Linq.XContainer.Elements
    /**
    Returns a collection of the child elements of this element or document, in document order.

    - Returns: An  of  containing the child elements of this , in document order.

    */
    open func Elements() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Elements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)
    /**
    Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching  are included in the collection.

    - Parameter name: The  to match.
    - Returns: An  of  containing the children of the  that have a matching , in document order.

    */
    open func Elements(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Elements_0__1__XName(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> Nodes()
// docid: M:System.Xml.Linq.XContainer.Nodes
    /**
    Returns a collection of the child nodes of this element or document, in document order.

    - Returns: An  of  containing the contents of this , in document order.

    */
    open func Nodes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_System_Collections_Generic_IEnumerable_System_Xml_Linq_XNode___Nodes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // void RemoveNodes()
// docid: M:System.Xml.Linq.XContainer.RemoveNodes
    /**
    Removes the child nodes from this document or element.

    */
    open func RemoveNodes() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XContainer_void__RemoveNodes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceNodes(System.Object)
// docid: M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)
    /**
    Replaces the children nodes of this document or element with the specified content.

    - Parameter content: A content object containing simple content or a collection of content objects that replace the children nodes.
    */
    open func ReplaceNodes(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XContainer_void__ReplaceNodes_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceNodes(System.Object[])
// docid: M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])
    /**
    Replaces the children nodes of this document or element with the specified content.

    - Parameter content: A parameter list of content objects.
    */
    open func ReplaceNodes(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XContainer_void__ReplaceNodes_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNode get_FirstNode()
// docid: M:System.Xml.Linq.XContainer.get_FirstNode
    open func get_FirstNode() throws -> Optional<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_XNode__get_FirstNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNode get_LastNode()
// docid: M:System.Xml.Linq.XContainer.get_LastNode
    open func get_LastNode() throws -> Optional<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XContainer_XNode__get_LastNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the first child node of this node.

    */
    open var FirstNode : Optional<dotnet.System.Xml.Linq.XNode> {
        get {
            return try! get_FirstNode();
        }
    }
    /**
    Gets the last child node of this node.

    */
    open var LastNode : Optional<dotnet.System.Xml.Linq.XNode> {
        get {
            return try! get_LastNode();
        }
    }
} // XContainer


// type: System.Xml.Linq.XDeclaration
    /**
    Represents an XML declaration.

    */
open class XDeclaration
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XDeclaration_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.Xml.Linq.XDeclaration.#ctor(System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified version, encoding, and standalone status.

    - Parameter version: The version of the XML, usually "1.0".
    - Parameter encoding: The encoding for the XML document.
    - Parameter standalone: A string containing "yes" or "no" that specifies whether the XML is standalone or requires external entities to be resolved.
    */
    public init(version : Optional<dotnet.System.String>, encoding : Optional<dotnet.System.String>, standalone : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XDeclaration_ctor_0__3__String_String_String(&__thrown, version?.get_handle() ?? nil, encoding?.get_handle() ?? nil, standalone?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XDeclaration)
// docid: M:System.Xml.Linq.XDeclaration.#ctor(System.Xml.Linq.XDeclaration)
    /**
    Initializes a new instance of the  class from another  object.

    - Parameter other: The  used to initialize this  object.
    */
    public init(other : dotnet.System.Xml.Linq.XDeclaration) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XDeclaration_ctor_0__1__XDeclaration(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Xml.Linq.XDeclaration.ToString
    /**
    Provides the declaration as a formatted string.

    - Returns: A  that contains the formatted XML string.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDeclaration_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Encoding()
// docid: M:System.Xml.Linq.XDeclaration.get_Encoding
    open func get_Encoding() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDeclaration_String__get_Encoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Encoding(System.String)
// docid: M:System.Xml.Linq.XDeclaration.set_Encoding(System.String)
    open func set_Encoding(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDeclaration_void__set_Encoding_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Standalone()
// docid: M:System.Xml.Linq.XDeclaration.get_Standalone
    open func get_Standalone() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDeclaration_String__get_Standalone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Standalone(System.String)
// docid: M:System.Xml.Linq.XDeclaration.set_Standalone(System.String)
    open func set_Standalone(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDeclaration_void__set_Standalone_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Version()
// docid: M:System.Xml.Linq.XDeclaration.get_Version
    open func get_Version() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDeclaration_String__get_Version_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Version(System.String)
// docid: M:System.Xml.Linq.XDeclaration.set_Version(System.String)
    open func set_Version(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDeclaration_void__set_Version_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the encoding for this document.

    */
    open var Encoding : Optional<dotnet.System.String> {
        get {
            return try! get_Encoding();
        }
        set(v) {
            return try! set_Encoding(value: v!);
        }
    }
    /**
    Gets or sets the standalone property for this document.

    */
    open var Standalone : Optional<dotnet.System.String> {
        get {
            return try! get_Standalone();
        }
        set(v) {
            return try! set_Standalone(value: v!);
        }
    }
    /**
    Gets or sets the version property for this document.

    */
    open var Version : Optional<dotnet.System.String> {
        get {
            return try! get_Version();
        }
        set(v) {
            return try! set_Version(value: v!);
        }
    }
} // XDeclaration


// type: System.Xml.Linq.XDocument
    /**
    Represents an XML document. For the components and usage of an  object, see XDocument Class Overview.

    */
open class XDocument
    :
    dotnet.System.Xml.Linq.XContainer
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XDocument_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Linq.XDocument.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XDocument_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object[])
// docid: M:System.Xml.Linq.XDocument.#ctor(System.Object[])
    /**
    Initializes a new instance of the  class with the specified content.

    - Parameter content: A parameter list of content objects to add to this document.
    */
    public init(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XDocument_ctor_0__1__ObjectArray(&__thrown, content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XDeclaration, System.Object[])
// docid: M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])
    /**
    Initializes a new instance of the  class with the specified  and content.

    - Parameter declaration: An  for the document.
    - Parameter content: The content of the document.
    */
    public init(declaration : Optional<dotnet.System.Xml.Linq.XDeclaration>, content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XDocument_ctor_0__2__XDeclaration_ObjectArray(&__thrown, declaration?.get_handle() ?? nil, content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XDocument)
// docid: M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)
    /**
    Initializes a new instance of the  class from an existing  object.

    - Parameter other: The  object that will be copied.
    */
    public init(other : dotnet.System.Xml.Linq.XDocument) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XDocument_ctor_0__1__XDocument(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.Linq.XDocument Load(System.IO.Stream)
// docid: M:System.Xml.Linq.XDocument.Load(System.IO.Stream)
    /**
    Creates a new  instance by using the specified stream.

    - Parameter stream: The stream that contains the XML data.
    - Returns: An  object that reads the data that is contained in the stream.

    */
    open class func Load(stream : dotnet.System.IO.Stream) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Load_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Load(System.IO.Stream, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
    /**
    Creates a new  instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.

    - Parameter stream: The stream containing the XML data.
    - Parameter options: A  that specifies whether to load base URI and line information.
    - Returns: An  object that reads the data that is contained in the stream.

    */
    open class func Load(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Load_0__2__Stream_LoadOptions(&__thrown, stream.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Load(System.IO.TextReader)
// docid: M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)
    /**
    Creates a new  from a .

    - Parameter textReader: A  that contains the content for the .
    - Returns: An  that contains the contents of the specified .

    */
    open class func Load(textReader : dotnet.System.IO.TextReader) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Load_0__1__TextReader(&__thrown, textReader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Load(System.IO.TextReader, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
    /**
    Creates a new  from a , optionally preserving white space, setting the base URI, and retaining line information.

    - Parameter textReader: A  that contains the content for the .
    - Parameter options: A  that specifies white space behavior, and whether to load base URI and line information.
    - Returns: An  that contains the XML that was read from the specified .

    */
    open class func Load(textReader : dotnet.System.IO.TextReader, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Load_0__2__TextReader_LoadOptions(&__thrown, textReader.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Load(System.String)
// docid: M:System.Xml.Linq.XDocument.Load(System.String)
    /**
    Creates a new  from a file.

    - Parameter uri: A URI string that references the file to load into a new .
    - Returns: An  that contains the contents of the specified file.

    */
    open class func Load(uri : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Load_0__1__String(&__thrown, uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Load(System.String, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)
    /**
    Creates a new  from a file, optionally preserving white space, setting the base URI, and retaining line information.

    - Parameter uri: A URI string that references the file to load into a new .
    - Parameter options: A  that specifies white space behavior, and whether to load base URI and line information.
    - Returns: An  that contains the contents of the specified file.

    */
    open class func Load(uri : dotnet.System.String, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Load_0__2__String_LoadOptions(&__thrown, uri.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Load(System.Xml.XmlReader)
// docid: M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)
    /**
    Creates a new  from an .

    - Parameter reader: A  that contains the content for the .
    - Returns: An  that contains the contents of the specified .

    */
    open class func Load(reader : dotnet.System.Xml.XmlReader) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Load_0__1__XmlReader(&__thrown, reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Load(System.Xml.XmlReader, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
    /**
    Loads an  from an , optionally setting the base URI, and retaining line information.

    - Parameter reader: A  that will be read for the content of the .
    - Parameter options: A  that specifies whether to load base URI and line information.
    - Returns: An  that contains the XML that was read from the specified .

    */
    open class func Load(reader : dotnet.System.Xml.XmlReader, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Load_0__2__XmlReader_LoadOptions(&__thrown, reader.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Xml.Linq.XDocument> LoadAsync(System.IO.Stream, System.Xml.Linq.LoadOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
    /**
    Asynchronously creates a new  and initializes its underlying XML tree from the specified stream, optionally preserving white space.

    - Parameter stream: A stream containing the raw XML to read into the newly created .
    - Parameter options: A set of load options.
    - Parameter cancellationToken: A cancellation token.
    - Returns: A new XDocument containing the contents of the specified .

    */
    open class func LoadAsync(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.LoadOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Xml.Linq.XDocument> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_System_Threading_Tasks_Task_System_Xml_Linq_XDocument___LoadAsync_0__3__Stream_LoadOptions_CancellationToken(&__thrown, stream.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Xml.Linq.XDocument> LoadAsync(System.IO.TextReader, System.Xml.Linq.LoadOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
    /**
    Creates a new  and initializes its underlying XML tree using the specified  parameter, optionally preserving white space.

    - Parameter textReader: A reader that contains the raw XML to read into the newly created .
    - Parameter options: A set of load options.
    - Parameter cancellationToken: A cancellation token.
    - Returns: A new XDocument containing the contents of the specified .

    */
    open class func LoadAsync(textReader : dotnet.System.IO.TextReader, options : dotnet.System.Xml.Linq.LoadOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Xml.Linq.XDocument> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_System_Threading_Tasks_Task_System_Xml_Linq_XDocument___LoadAsync_0__3__TextReader_LoadOptions_CancellationToken(&__thrown, textReader.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Xml.Linq.XDocument> LoadAsync(System.Xml.XmlReader, System.Xml.Linq.LoadOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
    /**
    Creates a new  containing the contents of the specified .

    - Parameter reader: A reader containing the XML to be read into the new .
    - Parameter options: A set of load options.
    - Parameter cancellationToken: A cancellation token.
    - Returns: A new XDocument containing the contents of the specified .

    */
    open class func LoadAsync(reader : dotnet.System.Xml.XmlReader, options : dotnet.System.Xml.Linq.LoadOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Xml.Linq.XDocument> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_System_Threading_Tasks_Task_System_Xml_Linq_XDocument___LoadAsync_0__3__XmlReader_LoadOptions_CancellationToken(&__thrown, reader.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Parse(System.String)
// docid: M:System.Xml.Linq.XDocument.Parse(System.String)
    /**
    Creates a new  from a string.

    - Parameter text: A string that contains XML.
    - Returns: An  populated from the string that contains XML.

    */
    open class func Parse(text : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Parse_0__1__String(&__thrown, text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // System.Xml.Linq.XDocument Parse(System.String, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)
    /**
    Creates a new  from a string, optionally preserving white space, setting the base URI, and retaining line information.

    - Parameter text: A string that contains XML.
    - Parameter options: A  that specifies white space behavior, and whether to load base URI and line information.
    - Returns: An  populated from the string that contains XML.

    */
    open class func Parse(text : dotnet.System.String, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocument__Parse_0__2__String_LoadOptions(&__thrown, text.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XDocument(hndl : __return);
        }
    }
    // void Save(System.IO.Stream)
// docid: M:System.Xml.Linq.XDocument.Save(System.IO.Stream)
    /**
    Outputs this  to the specified .

    - Parameter stream: The stream to output this  to.
    */
    open func Save(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__Save_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.Stream, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
    /**
    Outputs this  to the specified , optionally specifying formatting behavior.

    - Parameter stream: The stream to output this  to.
    - Parameter options: A  that specifies formatting behavior.
    */
    open func Save(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__Save_0__2__Stream_SaveOptions(&__thrown, self.get_handle(), stream.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.TextWriter)
// docid: M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)
    /**
    Serialize this  to a .

    - Parameter textWriter: A  that the  will be written to.
    */
    open func Save(textWriter : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__Save_0__1__TextWriter(&__thrown, self.get_handle(), textWriter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.TextWriter, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
    /**
    Serialize this  to a , optionally disabling formatting.

    - Parameter textWriter: The  to output the XML to.
    - Parameter options: A  that specifies formatting behavior.
    */
    open func Save(textWriter : dotnet.System.IO.TextWriter, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__Save_0__2__TextWriter_SaveOptions(&__thrown, self.get_handle(), textWriter.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.String)
// docid: M:System.Xml.Linq.XDocument.Save(System.String)
    /**
    Serialize this  to a file, overwriting an existing file, if it exists.

    - Parameter fileName: A string that contains the name of the file.
    */
    open func Save(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__Save_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.String, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)
    /**
    Serialize this  to a file, optionally disabling formatting.

    - Parameter fileName: A string that contains the name of the file.
    - Parameter options: A  that specifies formatting behavior.
    */
    open func Save(fileName : dotnet.System.String, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__Save_0__2__String_SaveOptions(&__thrown, self.get_handle(), fileName.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)
    /**
    Serialize this  to an .

    - Parameter writer: A  that the  will be written to.
    */
    open func Save(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__Save_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SaveAsync(System.IO.Stream, System.Xml.Linq.SaveOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
    /**
    Output this  to a .

    - Parameter stream: The stream to write the XML to.
    - Parameter options: A set of load options.
    - Parameter cancellationToken: A cancellation token.
    - Returns: A task representing the asynchronous save operation.

    */
    open func SaveAsync(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.SaveOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_Task__SaveAsync_0__3__Stream_SaveOptions_CancellationToken(&__thrown, self.get_handle(), stream.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SaveAsync(System.IO.TextWriter, System.Xml.Linq.SaveOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
    /**
    Writes this  to a .

    - Parameter textWriter: The text writer to output the XML to.
    - Parameter options: A set of load options.
    - Parameter cancellationToken: A cancellation token.
    - Returns: A task representing the asynchronous save operation.

    */
    open func SaveAsync(textWriter : dotnet.System.IO.TextWriter, options : dotnet.System.Xml.Linq.SaveOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_Task__SaveAsync_0__3__TextWriter_SaveOptions_CancellationToken(&__thrown, self.get_handle(), textWriter.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SaveAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Writes this  to an .

    - Parameter writer: The writer to output the XML to.
    - Parameter cancellationToken: A cancellation token.
    - Returns: A task representing the asynchronous save operation.

    */
    open func SaveAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_Task__SaveAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)
    /**
    Write this document to an .

    - Parameter writer: An  into which this method will write.
    */
    open override func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteToAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Writes this XDocument's underlying XML tree to the specified .

    - Parameter writer: The writer to output the content of this .
    - Parameter cancellationToken: A cancellation token.
    - Returns: A task representing the asynchronous write operation.

    */
    open override func WriteToAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_Task__WriteToAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XDeclaration get_Declaration()
// docid: M:System.Xml.Linq.XDocument.get_Declaration
    open func get_Declaration() throws -> Optional<dotnet.System.Xml.Linq.XDeclaration> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDeclaration__get_Declaration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XDeclaration(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Declaration(System.Xml.Linq.XDeclaration)
// docid: M:System.Xml.Linq.XDocument.set_Declaration(System.Xml.Linq.XDeclaration)
    open func set_Declaration(value : Optional<dotnet.System.Xml.Linq.XDeclaration>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocument_void__set_Declaration_0__1__XDeclaration(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Linq.XDocumentType get_DocumentType()
// docid: M:System.Xml.Linq.XDocument.get_DocumentType
    open func get_DocumentType() throws -> Optional<dotnet.System.Xml.Linq.XDocumentType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XDocumentType__get_DocumentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XDocumentType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XDocument.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XElement get_Root()
// docid: M:System.Xml.Linq.XDocument.get_Root
    open func get_Root() throws -> Optional<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocument_XElement__get_Root_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets or sets the XML declaration for this document.

    */
    open var Declaration : Optional<dotnet.System.Xml.Linq.XDeclaration> {
        get {
            return try! get_Declaration();
        }
        set(v) {
            return try! set_Declaration(value: v!);
        }
    }
    /**
    Gets the Document Type Definition (DTD) for this document.

    */
    open var DocumentType : Optional<dotnet.System.Xml.Linq.XDocumentType> {
        get {
            return try! get_DocumentType();
        }
    }
    /**
    Gets the node type for this node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the root element of the XML Tree for this document.

    */
    open var Root : Optional<dotnet.System.Xml.Linq.XElement> {
        get {
            return try! get_Root();
        }
    }
} // XDocument


// type: System.Xml.Linq.XDocumentType
    /**
    Represents an XML Document Type Definition (DTD).

    */
open class XDocumentType
    :
    dotnet.System.Xml.Linq.XNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XDocumentType_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, System.String, System.String)
// docid: M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)
    /**
    Initializes an instance of the  class.

    - Parameter name: A  that contains the qualified name of the DTD, which is the same as the qualified name of the root element of the XML document.
    - Parameter publicId: A  that contains the public identifier of an external public DTD.
    - Parameter systemId: A  that contains the system identifier of an external private DTD.
    - Parameter internalSubset: A  that contains the internal subset for an internal DTD.
    */
    public init(name : dotnet.System.String, publicId : Optional<dotnet.System.String>, systemId : Optional<dotnet.System.String>, internalSubset : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XDocumentType_ctor_0__4__String_String_String_String(&__thrown, name.get_handle(), publicId?.get_handle() ?? nil, systemId?.get_handle() ?? nil, internalSubset?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XDocumentType)
// docid: M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)
    /**
    Initializes an instance of the  class from another  object.

    - Parameter other: An  object to copy from.
    */
    public init(other : dotnet.System.Xml.Linq.XDocumentType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XDocumentType_ctor_0__1__XDocumentType(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)
    /**
    Write this  to an .

    - Parameter writer: An  into which this method will write.
    */
    open override func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocumentType_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteToAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XDocumentType.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Writes this  to the specified .

    - Parameter writer: The writer to write this  to.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous write operation.

    */
    open override func WriteToAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocumentType_Task__WriteToAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_InternalSubset()
// docid: M:System.Xml.Linq.XDocumentType.get_InternalSubset
    open func get_InternalSubset() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocumentType_String__get_InternalSubset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_InternalSubset(System.String)
// docid: M:System.Xml.Linq.XDocumentType.set_InternalSubset(System.String)
    open func set_InternalSubset(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocumentType_void__set_InternalSubset_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Xml.Linq.XDocumentType.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocumentType_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Xml.Linq.XDocumentType.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocumentType_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XDocumentType.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocumentType_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_PublicId()
// docid: M:System.Xml.Linq.XDocumentType.get_PublicId
    open func get_PublicId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocumentType_String__get_PublicId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PublicId(System.String)
// docid: M:System.Xml.Linq.XDocumentType.set_PublicId(System.String)
    open func set_PublicId(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocumentType_void__set_PublicId_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SystemId()
// docid: M:System.Xml.Linq.XDocumentType.get_SystemId
    open func get_SystemId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XDocumentType_String__get_SystemId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SystemId(System.String)
// docid: M:System.Xml.Linq.XDocumentType.set_SystemId(System.String)
    open func set_SystemId(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XDocumentType_void__set_SystemId_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the internal subset for this Document Type Definition (DTD).

    */
    open var InternalSubset : Optional<dotnet.System.String> {
        get {
            return try! get_InternalSubset();
        }
        set(v) {
            return try! set_InternalSubset(value: v!);
        }
    }
    /**
    Gets or sets the name for this Document Type Definition (DTD).

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    Gets the node type for this node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets the public identifier for this Document Type Definition (DTD).

    */
    open var PublicId : Optional<dotnet.System.String> {
        get {
            return try! get_PublicId();
        }
        set(v) {
            return try! set_PublicId(value: v!);
        }
    }
    /**
    Gets or sets the system identifier for this Document Type Definition (DTD).

    */
    open var SystemId : Optional<dotnet.System.String> {
        get {
            return try! get_SystemId();
        }
        set(v) {
            return try! set_SystemId(value: v!);
        }
    }
} // XDocumentType


// type: System.Xml.Linq.XElement
    /**
    Represents an XML element.  See XElement Class Overview and the Remarks section on this page for usage information and examples.

    */
open class XElement
    :
    dotnet.System.Xml.Linq.XContainer,
    System_Xml_Serialization_IXmlSerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XElement_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)
    /**
    Initializes a new instance of the  class from another  object.

    - Parameter other: An  object to copy from.
    */
    public init(other : dotnet.System.Xml.Linq.XElement) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XElement_ctor_0__1__XElement(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)
    /**
    Initializes a new instance of the  class with the specified name.

    - Parameter name: An  that contains the name of the element.
    */
    public init(name : dotnet.System.Xml.Linq.XName) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XElement_ctor_0__1__XName(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XName, System.Object)
// docid: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)
    /**
    Initializes a new instance of the  class with the specified name and content.

    - Parameter name: An  that contains the element name.
    - Parameter content: The contents of the element.
    */
    public init(name : dotnet.System.Xml.Linq.XName, content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XElement_ctor_0__2__XName_Object(&__thrown, name.get_handle(), content?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XName, System.Object[])
// docid: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])
    /**
    Initializes a new instance of the  class with the specified name and content.

    - Parameter name: An  that contains the element name.
    - Parameter content: The initial content of the element.
    */
    public init(name : dotnet.System.Xml.Linq.XName, content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XElement_ctor_0__2__XName_ObjectArray(&__thrown, name.get_handle(), content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XStreamingElement)
// docid: M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)
    /**
    Initializes a new instance of the  class from an  object.

    - Parameter other: An  that contains unevaluated queries that will be iterated for the contents of this .
    */
    public init(other : dotnet.System.Xml.Linq.XStreamingElement) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XElement_ctor_0__1__XStreamingElement(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf()
// docid: M:System.Xml.Linq.XElement.AncestorsAndSelf
    /**
    Returns a collection of elements that contain this element, and the ancestors of this element.

    - Returns: An  of  of elements that contain this element, and the ancestors of this element.

    */
    open func AncestorsAndSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___AncestorsAndSelf_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)
    /**
    Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching  are included in the collection.

    - Parameter name: The  to match.
    - Returns: An  of  that contain this element, and the ancestors of this element. Only elements that have a matching  are included in the collection.

    */
    open func AncestorsAndSelf(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___AncestorsAndSelf_0__1__XName(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Xml.Linq.XAttribute Attribute(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)
    /**
    Returns the  of this  that has the specified .

    - Parameter name: The  of the  to get.
    - Returns: An  that has the specified ;  if there is no attribute with the specified name.

    */
    open func Attribute(name : dotnet.System.Xml.Linq.XName) throws -> Optional<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XAttribute__Attribute_0__1__XName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes()
// docid: M:System.Xml.Linq.XElement.Attributes
    /**
    Returns a collection of attributes of this element.

    - Returns: An  of  of attributes of this element.

    */
    open func Attributes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Collections_Generic_IEnumerable_System_Xml_Linq_XAttribute___Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)
    /**
    Returns a filtered collection of attributes of this element. Only attributes that have a matching  are included in the collection.

    - Parameter name: The  to match.
    - Returns: An  of  that contains the attributes of this element. Only attributes that have a matching  are included in the collection.

    */
    open func Attributes(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Collections_Generic_IEnumerable_System_Xml_Linq_XAttribute___Attributes_0__1__XName(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf()
// docid: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
    /**
    Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.

    - Returns: An  of  that contain this element, and all descendant nodes of this element, in document order.

    */
    open func DescendantNodesAndSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Collections_Generic_IEnumerable_System_Xml_Linq_XNode___DescendantNodesAndSelf_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf()
// docid: M:System.Xml.Linq.XElement.DescendantsAndSelf
    /**
    Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.

    - Returns: An  of  of elements that contain this element, and all descendant elements of this element, in document order.

    */
    open func DescendantsAndSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___DescendantsAndSelf_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)
    /**
    Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching  are included in the collection.

    - Parameter name: The  to match.
    - Returns: An  of  that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching  are included in the collection.

    */
    open func DescendantsAndSelf(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___DescendantsAndSelf_0__1__XName(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Xml.Linq.XNamespace GetDefaultNamespace()
// docid: M:System.Xml.Linq.XElement.GetDefaultNamespace
    /**
    Gets the default  of this .

    - Returns: An  that contains the default namespace of this .

    */
    open func GetDefaultNamespace() throws -> dotnet.System.Xml.Linq.XNamespace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XNamespace__GetDefaultNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNamespace(hndl : __return);
        }
    }
    // System.Xml.Linq.XNamespace GetNamespaceOfPrefix(System.String)
// docid: M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)
    /**
    Gets the namespace associated with a particular prefix for this .

    - Parameter prefix: A string that contains the namespace prefix to look up.
    - Returns: An  for the namespace associated with the prefix for this .

    */
    open func GetNamespaceOfPrefix(prefix : dotnet.System.String) throws -> Optional<dotnet.System.Xml.Linq.XNamespace> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XNamespace__GetNamespaceOfPrefix_0__1__String(&__thrown, self.get_handle(), prefix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XNamespace(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetPrefixOfNamespace(System.Xml.Linq.XNamespace)
// docid: M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)
    /**
    Gets the prefix associated with a namespace for this .

    - Parameter ns: An  to look up.
    - Returns: A  that contains the namespace prefix.

    */
    open func GetPrefixOfNamespace(ns : dotnet.System.Xml.Linq.XNamespace) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_String__GetPrefixOfNamespace_0__1__XNamespace(&__thrown, self.get_handle(), ns.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Linq.XElement Load(System.IO.Stream)
// docid: M:System.Xml.Linq.XElement.Load(System.IO.Stream)
    /**
    Creates a new  instance by using the specified stream.

    - Parameter stream: The stream that contains the XML data.
    - Returns: An  object used to read the data that is contained in the stream.

    */
    open class func Load(stream : dotnet.System.IO.Stream) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Load_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Load(System.IO.Stream, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)
    /**
    Creates a new  instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.

    - Parameter stream: The stream containing the XML data.
    - Parameter options: A  object that specifies whether to load base URI and line information.
    - Returns: An  object used to read the data that the stream contains.

    */
    open class func Load(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Load_0__2__Stream_LoadOptions(&__thrown, stream.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Load(System.IO.TextReader)
// docid: M:System.Xml.Linq.XElement.Load(System.IO.TextReader)
    /**
    Loads an  from a .

    - Parameter textReader: A  that will be read for the  content.
    - Returns: An  that contains the XML that was read from the specified .

    */
    open class func Load(textReader : dotnet.System.IO.TextReader) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Load_0__1__TextReader(&__thrown, textReader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Load(System.IO.TextReader, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)
    /**
    Loads an  from a , optionally preserving white space and retaining line information.

    - Parameter textReader: A  that will be read for the  content.
    - Parameter options: A  that specifies white space behavior, and whether to load base URI and line information.
    - Returns: An  that contains the XML that was read from the specified .

    */
    open class func Load(textReader : dotnet.System.IO.TextReader, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Load_0__2__TextReader_LoadOptions(&__thrown, textReader.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Load(System.String)
// docid: M:System.Xml.Linq.XElement.Load(System.String)
    /**
    Loads an  from a file.

    - Parameter uri: A URI string referencing the file to load into a new .
    - Returns: An  that contains the contents of the specified file.

    */
    open class func Load(uri : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Load_0__1__String(&__thrown, uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Load(System.String, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)
    /**
    Loads an  from a file, optionally preserving white space, setting the base URI, and retaining line information.

    - Parameter uri: A URI string referencing the file to load into an .
    - Parameter options: A  that specifies white space behavior, and whether to load base URI and line information.
    - Returns: An  that contains the contents of the specified file.

    */
    open class func Load(uri : dotnet.System.String, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Load_0__2__String_LoadOptions(&__thrown, uri.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Load(System.Xml.XmlReader)
// docid: M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)
    /**
    Loads an  from an .

    - Parameter reader: A  that will be read for the content of the .
    - Returns: An  that contains the XML that was read from the specified .

    */
    open class func Load(reader : dotnet.System.Xml.XmlReader) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Load_0__1__XmlReader(&__thrown, reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Load(System.Xml.XmlReader, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)
    /**
    Loads an  from an , optionally preserving white space, setting the base URI, and retaining line information.

    - Parameter reader: A  that will be read for the content of the .
    - Parameter options: A  that specifies white space behavior, and whether to load base URI and line information.
    - Returns: An  that contains the XML that was read from the specified .

    */
    open class func Load(reader : dotnet.System.Xml.XmlReader, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Load_0__2__XmlReader_LoadOptions(&__thrown, reader.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync(System.IO.Stream, System.Xml.Linq.LoadOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
    /**
    Asynchronously creates a new  and initializes its underlying XML tree using the specified stream, optionally preserving white space.

    - Parameter stream: The stream containing the raw XML to read.
    - Parameter options: A bitwise combination of the enumeration values that specify the load options to parse the XML.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A new  containing the contents of the specified stream.

    */
    open class func LoadAsync(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.LoadOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Threading_Tasks_Task_System_Xml_Linq_XElement___LoadAsync_0__3__Stream_LoadOptions_CancellationToken(&__thrown, stream.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync(System.IO.TextReader, System.Xml.Linq.LoadOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
    /**
    Asynchronously creates a new  and initializes its underlying XML tree using the specified text reader, optionally preserving white space.

    - Parameter textReader: A reader containing the raw XML to read.
    - Parameter options: A bitwise combination of the enumeration values that specify the load options to parse the XML.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A new  containing the contents of the specified reader.

    */
    open class func LoadAsync(textReader : dotnet.System.IO.TextReader, options : dotnet.System.Xml.Linq.LoadOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Threading_Tasks_Task_System_Xml_Linq_XElement___LoadAsync_0__3__TextReader_LoadOptions_CancellationToken(&__thrown, textReader.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Xml.Linq.XElement> LoadAsync(System.Xml.XmlReader, System.Xml.Linq.LoadOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)
    /**
    Asynchronously creates a new  and initializes its underlying XML tree using the specified XML reader, optionally preserving white space.

    - Parameter reader: A reader containing the XML to be read.
    - Parameter options: A bitwise combination of the enumeration values that specify the load options to parse the XML.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A new  containing the contents of the specified reader.

    */
    open class func LoadAsync(reader : dotnet.System.Xml.XmlReader, options : dotnet.System.Xml.Linq.LoadOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Threading_Tasks_Task_System_Xml_Linq_XElement___LoadAsync_0__3__XmlReader_LoadOptions_CancellationToken(&__thrown, reader.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_bool__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.DateTime op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_DateTime__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTimeOffset op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_DateTimeOffset__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // [IsSpecialName] System.Decimal op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_Decimal__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_f64__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Guid op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_Guid__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_i32__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_i64__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_bool___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_System_DateTimeOffset___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTime> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_System_DateTime___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTime(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Decimal> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<dotnet.System.Decimal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_System_Decimal___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Decimal(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Double> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_f64___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Double_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_System_Guid___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_i32___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_i64___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Single> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_f32___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Single_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.TimeSpan> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_System_TimeSpan___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.TimeSpan(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.UInt32> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<Swift.UInt32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_u32___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_UInt32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.UInt64> op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<Swift.UInt64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Nullable_u64___op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_UInt64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Single op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_f32__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : Optional<dotnet.System.Xml.Linq.XElement>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_String__op_Explicit_0__1__XElement(&__thrown, element?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.TimeSpan op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_TimeSpan__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.UInt32 op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_u32__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.UInt64 op_Explicit(System.Xml.Linq.XElement)
// docid: M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)
    open class func op_Explicit(element : dotnet.System.Xml.Linq.XElement) throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_u64__op_Explicit_0__1__XElement(&__thrown, element.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.Linq.XElement Parse(System.String)
// docid: M:System.Xml.Linq.XElement.Parse(System.String)
    /**
    Load an  from a string that contains XML.

    - Parameter text: A  that contains XML.
    - Returns: An  populated from the string that contains XML.

    */
    open class func Parse(text : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Parse_0__1__String(&__thrown, text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement Parse(System.String, System.Xml.Linq.LoadOptions)
// docid: M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)
    /**
    Load an  from a string that contains XML, optionally preserving white space and retaining line information.

    - Parameter text: A  that contains XML.
    - Parameter options: A  that specifies white space behavior, and whether to load base URI and line information.
    - Returns: An  populated from the string that contains XML.

    */
    open class func Parse(text : dotnet.System.String, options : dotnet.System.Xml.Linq.LoadOptions) throws -> dotnet.System.Xml.Linq.XElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XElement__Parse_0__2__String_LoadOptions(&__thrown, text.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XElement(hndl : __return);
        }
    }
    // void RemoveAll()
// docid: M:System.Xml.Linq.XElement.RemoveAll
    /**
    Removes nodes and attributes from this .

    */
    open func RemoveAll() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__RemoveAll_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAttributes()
// docid: M:System.Xml.Linq.XElement.RemoveAttributes
    /**
    Removes the attributes of this .

    */
    open func RemoveAttributes() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__RemoveAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceAll(System.Object)
// docid: M:System.Xml.Linq.XElement.ReplaceAll(System.Object)
    /**
    Replaces the child nodes and the attributes of this element with the specified content.

    - Parameter content: The content that will replace the child nodes and attributes of this element.
    */
    open func ReplaceAll(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__ReplaceAll_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceAll(System.Object[])
// docid: M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])
    /**
    Replaces the child nodes and the attributes of this element with the specified content.

    - Parameter content: A parameter list of content objects.
    */
    open func ReplaceAll(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__ReplaceAll_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceAttributes(System.Object)
// docid: M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)
    /**
    Replaces the attributes of this element with the specified content.

    - Parameter content: The content that will replace the attributes of this element.
    */
    open func ReplaceAttributes(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__ReplaceAttributes_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceAttributes(System.Object[])
// docid: M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])
    /**
    Replaces the attributes of this element with the specified content.

    - Parameter content: A parameter list of content objects.
    */
    open func ReplaceAttributes(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__ReplaceAttributes_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.Stream)
// docid: M:System.Xml.Linq.XElement.Save(System.IO.Stream)
    /**
    Outputs this  to the specified .

    - Parameter stream: The stream to output this  to.
    */
    open func Save(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__Save_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.Stream, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
    /**
    Outputs this  to the specified , optionally specifying formatting behavior.

    - Parameter stream: The stream to output this  to.
    - Parameter options: A  object that specifies formatting behavior.
    */
    open func Save(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__Save_0__2__Stream_SaveOptions(&__thrown, self.get_handle(), stream.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.TextWriter)
// docid: M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)
    /**
    Serialize this element to a .

    - Parameter textWriter: A  that the  will be written to.
    */
    open func Save(textWriter : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__Save_0__1__TextWriter(&__thrown, self.get_handle(), textWriter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.TextWriter, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
    /**
    Serialize this element to a , optionally disabling formatting.

    - Parameter textWriter: The  to output the XML to.
    - Parameter options: A  that specifies formatting behavior.
    */
    open func Save(textWriter : dotnet.System.IO.TextWriter, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__Save_0__2__TextWriter_SaveOptions(&__thrown, self.get_handle(), textWriter.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.String)
// docid: M:System.Xml.Linq.XElement.Save(System.String)
    /**
    Serialize this element to a file.

    - Parameter fileName: A  that contains the name of the file.
    */
    open func Save(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__Save_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.String, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)
    /**
    Serialize this element to a file, optionally disabling formatting.

    - Parameter fileName: A  that contains the name of the file.
    - Parameter options: A  that specifies formatting behavior.
    */
    open func Save(fileName : dotnet.System.String, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__Save_0__2__String_SaveOptions(&__thrown, self.get_handle(), fileName.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)
    /**
    Serialize this element to an .

    - Parameter writer: A  that the  will be written to.
    */
    open func Save(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__Save_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SaveAsync(System.IO.Stream, System.Xml.Linq.SaveOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
    /**
    Asynchronously outputs this  to a .

    - Parameter stream: The stream to output the XML to.
    - Parameter options: A bitwise combination of the enumeration values that specify the serialization options.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous save operation.

    */
    open func SaveAsync(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.SaveOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_Task__SaveAsync_0__3__Stream_SaveOptions_CancellationToken(&__thrown, self.get_handle(), stream.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SaveAsync(System.IO.TextWriter, System.Xml.Linq.SaveOptions, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)
    /**
    Asynchronously outputs this  to a .

    - Parameter textWriter: The writer to output the XML to.
    - Parameter options: A bitwise combination of the enumeration values that specify the serialization options.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous save operation.

    */
    open func SaveAsync(textWriter : dotnet.System.IO.TextWriter, options : dotnet.System.Xml.Linq.SaveOptions, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_Task__SaveAsync_0__3__TextWriter_SaveOptions_CancellationToken(&__thrown, self.get_handle(), textWriter.get_handle(), options.get_value(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SaveAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Asynchronously outputs this  to an .

    - Parameter writer: The writer to output the XML to.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous save operation.

    */
    open func SaveAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_Task__SaveAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void SetAttributeValue(System.Xml.Linq.XName, System.Object)
// docid: M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)
    /**
    Sets the value of an attribute, adds an attribute, or removes an attribute.

    - Parameter name: An  that contains the name of the attribute to change.
    - Parameter value: The value to assign to the attribute. The attribute is removed if the value is . Otherwise, the value is converted to its string representation and assigned to the  property of the attribute.
    */
    open func SetAttributeValue(name : dotnet.System.Xml.Linq.XName, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__SetAttributeValue_0__2__XName_Object(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetElementValue(System.Xml.Linq.XName, System.Object)
// docid: M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)
    /**
    Sets the value of a child element, adds a child element, or removes a child element.

    - Parameter name: An  that contains the name of the child element to change.
    - Parameter value: The value to assign to the child element. The child element is removed if the value is . Otherwise, the value is converted to its string representation and assigned to the  property of the child element.
    */
    open func SetElementValue(name : dotnet.System.Xml.Linq.XName, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__SetElementValue_0__2__XName_Object(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.Object)
// docid: M:System.Xml.Linq.XElement.SetValue(System.Object)
    /**
    Sets the value of this element.

    - Parameter value: The value to assign to this element. The value is converted to its string representation and assigned to the  property.
    */
    open func SetValue(value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__SetValue_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)
    /**
    Write this element to an .

    - Parameter writer: An  into which this method will write.
    */
    open override func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteToAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Asynchronously writes this  to the specified writer.

    - Parameter writer: The writer to write this  to.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous write operation.

    */
    open override func WriteToAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_Task__WriteToAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> get_EmptySequence()
// docid: M:System.Xml.Linq.XElement.get_EmptySequence
    open class func get_EmptySequence() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___get_EmptySequence_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XAttribute get_FirstAttribute()
// docid: M:System.Xml.Linq.XElement.get_FirstAttribute
    open func get_FirstAttribute() throws -> Optional<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XAttribute__get_FirstAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_HasAttributes()
// docid: M:System.Xml.Linq.XElement.get_HasAttributes
    open func get_HasAttributes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_bool__get_HasAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_HasElements()
// docid: M:System.Xml.Linq.XElement.get_HasElements
    open func get_HasElements() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_bool__get_HasElements_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.Xml.Linq.XElement.get_IsEmpty
    open func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Linq.XAttribute get_LastAttribute()
// docid: M:System.Xml.Linq.XElement.get_LastAttribute
    open func get_LastAttribute() throws -> Optional<dotnet.System.Xml.Linq.XAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XAttribute__get_LastAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XAttribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Linq.XName get_Name()
// docid: M:System.Xml.Linq.XElement.get_Name
    open func get_Name() throws -> dotnet.System.Xml.Linq.XName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XName__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XElement.set_Name(System.Xml.Linq.XName)
    open func set_Name(value : dotnet.System.Xml.Linq.XName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__set_Name_0__1__XName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XElement.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.Linq.XElement.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XElement_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.Linq.XElement.set_Value(System.String)
    open func set_Value(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XElement_void__set_Value_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets an empty collection of elements.

    */
    public static var EmptySequence : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        get {
            return try! get_EmptySequence();
        }
    }
    /**
    Gets the first attribute of this element.

    */
    open var FirstAttribute : Optional<dotnet.System.Xml.Linq.XAttribute> {
        get {
            return try! get_FirstAttribute();
        }
    }
    /**
    Gets a value indicating whether this element has at least one attribute.

    */
    open var HasAttributes : Bool {
        get {
            return try! get_HasAttributes();
        }
    }
    /**
    Gets a value indicating whether this element has at least one child element.

    */
    open var HasElements : Bool {
        get {
            return try! get_HasElements();
        }
    }
    /**
    Gets a value indicating whether this element contains no content.

    */
    open var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the last attribute of this element.

    */
    open var LastAttribute : Optional<dotnet.System.Xml.Linq.XAttribute> {
        get {
            return try! get_LastAttribute();
        }
    }
    /**
    Gets or sets the name of this element.

    */
    open var Name : dotnet.System.Xml.Linq.XName {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    Gets the node type for this node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets the concatenated text contents of this element.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // XElement


// type: System.Xml.Linq.XName
    /**
    Represents a name of an XML element or attribute.

    */
public final class XName
    :
    dotnet.System.Object,
    System_Runtime_Serialization_ISerializable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XName_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(System.Object)
// docid: M:System.Xml.Linq.XName.Equals(System.Object)
    /**
    Determines whether the specified  is equal to this .

    - Parameter obj: The  to compare to the current .
    - Returns: 
         if the specified  is equal to the current ; otherwise .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Xml.Linq.XName Get(System.String)
// docid: M:System.Xml.Linq.XName.Get(System.String)
    /**
    Gets an  object from an expanded name.

    - Parameter expandedName: A  that contains an expanded XML name in the format {namespace}localname.
    - Returns: An  object constructed from the expanded name.

    */
    public class func Get(expandedName : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_XName__Get_0__1__String(&__thrown, expandedName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XName(hndl : __return);
        }
    }
    // System.Xml.Linq.XName Get(System.String, System.String)
// docid: M:System.Xml.Linq.XName.Get(System.String,System.String)
    /**
    Gets an  object from a local name and a namespace.

    - Parameter localName: A local (unqualified) name.
    - Parameter namespaceName: An XML namespace.
    - Returns: An  object created from the specified local name and namespace.

    */
    public class func Get(localName : dotnet.System.String, namespaceName : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_XName__Get_0__2__String_String(&__thrown, localName.get_handle(), namespaceName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XName(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Xml.Linq.XName.GetHashCode
    /**
    Gets a hash code for this .

    - Returns: An  that contains the hash code for the .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Xml.Linq.XName, System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
    /**
    Returns a value indicating whether two instances of  are equal.

    - Parameter left: The first  to compare.
    - Parameter right: The second  to compare.
    - Returns: 
         if  and  are equal; otherwise .

    */
    public class func op_Equality(left : Optional<dotnet.System.Xml.Linq.XName>, right : Optional<dotnet.System.Xml.Linq.XName>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_bool__op_Equality_0__2__XName_XName(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Linq.XName op_Implicit(System.String)
// docid: M:System.Xml.Linq.XName.op_Implicit(System.String)
    public class func op_Implicit(expandedName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.Linq.XName> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_XName__op_Implicit_0__1__String(&__thrown, expandedName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XName(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Xml.Linq.XName, System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
    /**
    Returns a value indicating whether two instances of  are not equal.

    - Parameter left: The first  to compare.
    - Parameter right: The second  to compare.
    - Returns: 
         if  and  are not equal; otherwise .

    */
    public class func op_Inequality(left : Optional<dotnet.System.Xml.Linq.XName>, right : Optional<dotnet.System.Xml.Linq.XName>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_bool__op_Inequality_0__2__XName_XName(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Xml.Linq.XName.ToString
    /**
    Returns the expanded XML name in the format {namespace}localname.

    - Returns: A  that contains the expanded XML name in the format {namespace}localname.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_LocalName()
// docid: M:System.Xml.Linq.XName.get_LocalName
    public func get_LocalName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_String__get_LocalName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNamespace get_Namespace()
// docid: M:System.Xml.Linq.XName.get_Namespace
    public func get_Namespace() throws -> dotnet.System.Xml.Linq.XNamespace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_XNamespace__get_Namespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNamespace(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceName()
// docid: M:System.Xml.Linq.XName.get_NamespaceName
    public func get_NamespaceName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XName_String__get_NamespaceName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the local (unqualified) part of the name.

    */
    public var LocalName : dotnet.System.String {
        get {
            return try! get_LocalName();
        }
    }
    /**
    Gets the namespace part of the fully qualified name.

    */
    public var Namespace : dotnet.System.Xml.Linq.XNamespace {
        get {
            return try! get_Namespace();
        }
    }
    /**
    Returns the URI of the  for this .

    */
    public var NamespaceName : dotnet.System.String {
        get {
            return try! get_NamespaceName();
        }
    }
} // XName


// type: System.Xml.Linq.XNamespace
    /**
    Represents an XML namespace. This class cannot be inherited.

    */
public final class XNamespace
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XNamespace_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(System.Object)
// docid: M:System.Xml.Linq.XNamespace.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current .

    - Parameter obj: The  to compare to the current .
    - Returns: A  that indicates whether the specified  is equal to the current .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Xml.Linq.XNamespace Get(System.String)
// docid: M:System.Xml.Linq.XNamespace.Get(System.String)
    /**
    Gets an  for the specified Uniform Resource Identifier (URI).

    - Parameter namespaceName: A  that contains a namespace URI.
    - Returns: An  created from the specified URI.

    */
    public class func Get(namespaceName : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XNamespace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_XNamespace__Get_0__1__String(&__thrown, namespaceName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNamespace(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Xml.Linq.XNamespace.GetHashCode
    /**
    Gets a hash code for this .

    - Returns: An  that contains the hash code for the .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.Linq.XName GetName(System.String)
// docid: M:System.Xml.Linq.XNamespace.GetName(System.String)
    /**
    Returns an  object created from this  and the specified local name.

    - Parameter localName: A  that contains a local name.
    - Returns: An  created from this  and the specified local name.

    */
    public func GetName(localName : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_XName__GetName_0__1__String(&__thrown, self.get_handle(), localName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XName op_Addition(System.Xml.Linq.XNamespace, System.String)
// docid: M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)
    /**
    Combines an  object with a local name to create an .

    - Parameter ns: An  that contains the namespace.
    - Parameter localName: A  that contains the local name.
    - Returns: The new  constructed from the namespace and local name.

    */
    public class func op_Addition(ns : dotnet.System.Xml.Linq.XNamespace, localName : dotnet.System.String) throws -> dotnet.System.Xml.Linq.XName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_XName__op_Addition_0__2__XNamespace_String(&__thrown, ns.get_handle(), localName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XName(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Xml.Linq.XNamespace, System.Xml.Linq.XNamespace)
// docid: M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
    /**
    Returns a value indicating whether two instances of  are equal.

    - Parameter left: The first  to compare.
    - Parameter right: The second  to compare.
    - Returns: A  that indicates whether  and  are equal.

    */
    public class func op_Equality(left : Optional<dotnet.System.Xml.Linq.XNamespace>, right : Optional<dotnet.System.Xml.Linq.XNamespace>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_bool__op_Equality_0__2__XNamespace_XNamespace(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNamespace op_Implicit(System.String)
// docid: M:System.Xml.Linq.XNamespace.op_Implicit(System.String)
    public class func op_Implicit(namespaceName : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Xml.Linq.XNamespace> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_XNamespace__op_Implicit_0__1__String(&__thrown, namespaceName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XNamespace(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Xml.Linq.XNamespace, System.Xml.Linq.XNamespace)
// docid: M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
    /**
    Returns a value indicating whether two instances of  are not equal.

    - Parameter left: The first  to compare.
    - Parameter right: The second  to compare.
    - Returns: A  that indicates whether  and  are not equal.

    */
    public class func op_Inequality(left : Optional<dotnet.System.Xml.Linq.XNamespace>, right : Optional<dotnet.System.Xml.Linq.XNamespace>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_bool__op_Inequality_0__2__XNamespace_XNamespace(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Xml.Linq.XNamespace.ToString
    /**
    Returns the URI of this .

    - Returns: The URI of this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_NamespaceName()
// docid: M:System.Xml.Linq.XNamespace.get_NamespaceName
    public func get_NamespaceName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_String__get_NamespaceName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNamespace get_None()
// docid: M:System.Xml.Linq.XNamespace.get_None
    public class func get_None() throws -> dotnet.System.Xml.Linq.XNamespace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_XNamespace__get_None_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNamespace(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNamespace get_Xml()
// docid: M:System.Xml.Linq.XNamespace.get_Xml
    public class func get_Xml() throws -> dotnet.System.Xml.Linq.XNamespace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_XNamespace__get_Xml_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNamespace(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNamespace get_Xmlns()
// docid: M:System.Xml.Linq.XNamespace.get_Xmlns
    public class func get_Xmlns() throws -> dotnet.System.Xml.Linq.XNamespace {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNamespace_XNamespace__get_Xmlns_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNamespace(hndl : __return);
        }
    }
    /**
    Gets the Uniform Resource Identifier (URI) of this namespace.

    */
    public var NamespaceName : dotnet.System.String {
        get {
            return try! get_NamespaceName();
        }
    }
    /**
    Gets the  object that corresponds to no namespace.

    */
    public static var None : dotnet.System.Xml.Linq.XNamespace {
        get {
            return try! get_None();
        }
    }
    /**
    Gets the  object that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).

    */
    public static var Xml : dotnet.System.Xml.Linq.XNamespace {
        get {
            return try! get_Xml();
        }
    }
    /**
    Gets the  object that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).

    */
    public static var Xmlns : dotnet.System.Xml.Linq.XNamespace {
        get {
            return try! get_Xmlns();
        }
    }
} // XNamespace


// type: System.Xml.Linq.XNode
    /**
    Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.

    */
open class XNode
    :
    dotnet.System.Xml.Linq.XObject
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XNode_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddAfterSelf(System.Object)
// docid: M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)
    /**
    Adds the specified content immediately after this node.

    - Parameter content: A content object that contains simple content or a collection of content objects to be added after this node.
    */
    open func AddAfterSelf(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XNode_void__AddAfterSelf_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAfterSelf(System.Object[])
// docid: M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])
    /**
    Adds the specified content immediately after this node.

    - Parameter content: A parameter list of content objects.
    */
    open func AddAfterSelf(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XNode_void__AddAfterSelf_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddBeforeSelf(System.Object)
// docid: M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)
    /**
    Adds the specified content immediately before this node.

    - Parameter content: A content object that contains simple content or a collection of content objects to be added before this node.
    */
    open func AddBeforeSelf(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XNode_void__AddBeforeSelf_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddBeforeSelf(System.Object[])
// docid: M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])
    /**
    Adds the specified content immediately before this node.

    - Parameter content: A parameter list of content objects.
    */
    open func AddBeforeSelf(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XNode_void__AddBeforeSelf_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors()
// docid: M:System.Xml.Linq.XNode.Ancestors
    /**
    Returns a collection of the ancestor elements of this node.

    - Returns: An  of  of the ancestor elements of this node.

    */
    open func Ancestors() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Ancestors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)
    /**
    Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching  are included in the collection.

    - Parameter name: The  to match.
    - Returns: An  of  of the ancestor elements of this node. Only elements that have a matching  are included in the collection.  
  
 The nodes in the returned collection are in reverse document order.  
  
 This method uses deferred execution.

    */
    open func Ancestors(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___Ancestors_0__1__XName(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Int32 CompareDocumentOrder(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
// docid: M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    /**
    Compares two nodes to determine their relative XML document order.

    - Parameter n1: First  to compare.
    - Parameter n2: Second  to compare.
    - Returns: An  containing 0 if the nodes are equal; -1 if  is before ; 1 if  is after .

    */
    open class func CompareDocumentOrder(n1 : Optional<dotnet.System.Xml.Linq.XNode>, n2 : Optional<dotnet.System.Xml.Linq.XNode>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_i32__CompareDocumentOrder_0__2__XNode_XNode(&__thrown, n1?.get_handle() ?? nil, n2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Xml.XmlReader CreateReader()
// docid: M:System.Xml.Linq.XNode.CreateReader
    /**
    Creates an  for this node.

    - Returns: An  that can be used to read this node and its descendants.

    */
    open func CreateReader() throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_XmlReader__CreateReader_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // System.Xml.XmlReader CreateReader(System.Xml.Linq.ReaderOptions)
// docid: M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)
    /**
    Creates an  with the options specified by the  parameter.

    - Parameter readerOptions: A  object that specifies whether to omit duplicate namespaces.
    - Returns: An  object.

    */
    open func CreateReader(readerOptions : dotnet.System.Xml.Linq.ReaderOptions) throws -> dotnet.System.Xml.XmlReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_XmlReader__CreateReader_0__1__ReaderOptions(&__thrown, self.get_handle(), readerOptions.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlReader(hndl : __return);
        }
    }
    // bool DeepEquals(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
// docid: M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    /**
    Compares the values of two nodes, including the values of all descendant nodes.

    - Parameter n1: The first  to compare.
    - Parameter n2: The second  to compare.
    - Returns: 
         if the nodes are equal; otherwise .

    */
    open class func DeepEquals(n1 : Optional<dotnet.System.Xml.Linq.XNode>, n2 : Optional<dotnet.System.Xml.Linq.XNode>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_bool__DeepEquals_0__2__XNode_XNode(&__thrown, n1?.get_handle() ?? nil, n2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsAfterSelf()
// docid: M:System.Xml.Linq.XNode.ElementsAfterSelf
    /**
    Returns a collection of the sibling elements after this node, in document order.

    - Returns: An  of  of the sibling elements after this node, in document order.

    */
    open func ElementsAfterSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___ElementsAfterSelf_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsAfterSelf(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)
    /**
    Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching  are included in the collection.

    - Parameter name: The  to match.
    - Returns: An  of  of the sibling elements after this node, in document order. Only elements that have a matching  are included in the collection.

    */
    open func ElementsAfterSelf(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___ElementsAfterSelf_0__1__XName(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsBeforeSelf()
// docid: M:System.Xml.Linq.XNode.ElementsBeforeSelf
    /**
    Returns a collection of the sibling elements before this node, in document order.

    - Returns: An  of  of the sibling elements before this node, in document order.

    */
    open func ElementsBeforeSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___ElementsBeforeSelf_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsBeforeSelf(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)
    /**
    Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching  are included in the collection.

    - Parameter name: The  to match.
    - Returns: An  of  of the sibling elements before this node, in document order. Only elements that have a matching  are included in the collection.

    */
    open func ElementsBeforeSelf(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___ElementsBeforeSelf_0__1__XName(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // bool IsAfter(System.Xml.Linq.XNode)
// docid: M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)
    /**
    Determines if the current node appears after a specified node in terms of document order.

    - Parameter node: The  to compare for document order.
    - Returns: 
         if this node appears after the specified node; otherwise .

    */
    open func IsAfter(node : Optional<dotnet.System.Xml.Linq.XNode>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_bool__IsAfter_0__1__XNode(&__thrown, self.get_handle(), node?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsBefore(System.Xml.Linq.XNode)
// docid: M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)
    /**
    Determines if the current node appears before a specified node in terms of document order.

    - Parameter node: The  to compare for document order.
    - Returns: 
         if this node appears before the specified node; otherwise .

    */
    open func IsBefore(node : Optional<dotnet.System.Xml.Linq.XNode>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_bool__IsBefore_0__1__XNode(&__thrown, self.get_handle(), node?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> NodesAfterSelf()
// docid: M:System.Xml.Linq.XNode.NodesAfterSelf
    /**
    Returns a collection of the sibling nodes after this node, in document order.

    - Returns: An  of  of the sibling nodes after this node, in document order.

    */
    open func NodesAfterSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Collections_Generic_IEnumerable_System_Xml_Linq_XNode___NodesAfterSelf_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> NodesBeforeSelf()
// docid: M:System.Xml.Linq.XNode.NodesBeforeSelf
    /**
    Returns a collection of the sibling nodes before this node, in document order.

    - Returns: An  of  of the sibling nodes before this node, in document order.

    */
    open func NodesBeforeSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Collections_Generic_IEnumerable_System_Xml_Linq_XNode___NodesBeforeSelf_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Xml.Linq.XNode ReadFrom(System.Xml.XmlReader)
// docid: M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)
    /**
    Creates an  from an .

    - Parameter reader: An  positioned at the node to read into this .
    - Returns: An  that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type () of the first node encountered in the reader.

    */
    open class func ReadFrom(reader : dotnet.System.Xml.XmlReader) throws -> dotnet.System.Xml.Linq.XNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_XNode__ReadFrom_0__1__XmlReader(&__thrown, reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNode(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Xml.Linq.XNode> ReadFromAsync(System.Xml.XmlReader, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)
    /**
    Creates an  from an . The runtime type of the node is determined by the  of the first node encountered in the reader.

    - Parameter reader: A reader positioned at the node to read into this .
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: An XNode that contains the nodes read from the reader.

    */
    open class func ReadFromAsync(reader : dotnet.System.Xml.XmlReader, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_System_Threading_Tasks_Task_System_Xml_Linq_XNode___ReadFromAsync_0__2__XmlReader_CancellationToken(&__thrown, reader.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void Remove()
// docid: M:System.Xml.Linq.XNode.Remove
    /**
    Removes this node from its parent.

    */
    open func Remove() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XNode_void__Remove_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceWith(System.Object)
// docid: M:System.Xml.Linq.XNode.ReplaceWith(System.Object)
    /**
    Replaces this node with the specified content.

    - Parameter content: Content that replaces this node.
    */
    open func ReplaceWith(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XNode_void__ReplaceWith_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReplaceWith(System.Object[])
// docid: M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])
    /**
    Replaces this node with the specified content.

    - Parameter content: A parameter list of the new content.
    */
    open func ReplaceWith(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XNode_void__ReplaceWith_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Xml.Linq.XNode.ToString
    /**
    Returns the indented XML for this node.

    - Returns: A  containing the indented XML.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)
    /**
    Returns the XML for this node, optionally disabling formatting.

    - Parameter options: A  that specifies formatting behavior.
    - Returns: A  containing the XML.

    */
    open func ToString(options : dotnet.System.Xml.Linq.SaveOptions) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_String__ToString_0__1__SaveOptions(&__thrown, self.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)
    /**
    Writes this node to an .

    - Parameter writer: An  into which this method will write.
    */
    open func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XNode_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteToAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Writes the current node to an .

    - Parameter writer: The writer to write the current node into.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous write operation.

    */
    open func WriteToAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_Task__WriteToAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNodeDocumentOrderComparer get_DocumentOrderComparer()
// docid: M:System.Xml.Linq.XNode.get_DocumentOrderComparer
    open class func get_DocumentOrderComparer() throws -> dotnet.System.Xml.Linq.XNodeDocumentOrderComparer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_XNodeDocumentOrderComparer__get_DocumentOrderComparer_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNodeDocumentOrderComparer(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNodeEqualityComparer get_EqualityComparer()
// docid: M:System.Xml.Linq.XNode.get_EqualityComparer
    open class func get_EqualityComparer() throws -> dotnet.System.Xml.Linq.XNodeEqualityComparer {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_XNodeEqualityComparer__get_EqualityComparer_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XNodeEqualityComparer(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNode get_NextNode()
// docid: M:System.Xml.Linq.XNode.get_NextNode
    open func get_NextNode() throws -> Optional<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_XNode__get_NextNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.Linq.XNode get_PreviousNode()
// docid: M:System.Xml.Linq.XNode.get_PreviousNode
    open func get_PreviousNode() throws -> Optional<dotnet.System.Xml.Linq.XNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNode_XNode__get_PreviousNode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets a comparer that can compare the relative position of two nodes.

    */
    public static var DocumentOrderComparer : dotnet.System.Xml.Linq.XNodeDocumentOrderComparer {
        get {
            return try! get_DocumentOrderComparer();
        }
    }
    /**
    Gets a comparer that can compare two nodes for value equality.

    */
    public static var EqualityComparer : dotnet.System.Xml.Linq.XNodeEqualityComparer {
        get {
            return try! get_EqualityComparer();
        }
    }
    /**
    Gets the next sibling node of this node.

    */
    open var NextNode : Optional<dotnet.System.Xml.Linq.XNode> {
        get {
            return try! get_NextNode();
        }
    }
    /**
    Gets the previous sibling node of this node.

    */
    open var PreviousNode : Optional<dotnet.System.Xml.Linq.XNode> {
        get {
            return try! get_PreviousNode();
        }
    }
} // XNode


// type: System.Xml.Linq.XNodeDocumentOrderComparer
    /**
    Contains functionality to compare nodes for their document order. This class cannot be inherited.

    */
public final class XNodeDocumentOrderComparer
    :
    dotnet.System.Object,
    System_Collections_IComparer
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XNodeDocumentOrderComparer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XNodeDocumentOrderComparer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Compare(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
// docid: M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    /**
    Compares two nodes to determine their relative document order.

    - Parameter x: The first  to compare.
    - Parameter y: The second  to compare.
    - Returns: An  that contains 0 if the nodes are equal; -1 if  is before ; 1 if  is after .

    */
    public func Compare(x : Optional<dotnet.System.Xml.Linq.XNode>, y : Optional<dotnet.System.Xml.Linq.XNode>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNodeDocumentOrderComparer_i32__Compare_0__2__XNode_XNode(&__thrown, self.get_handle(), x?.get_handle() ?? nil, y?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // XNodeDocumentOrderComparer


// type: System.Xml.Linq.XNodeEqualityComparer
    /**
    Compares nodes to determine whether they are equal. This class cannot be inherited.

    */
public final class XNodeEqualityComparer
    :
    dotnet.System.Object,
    System_Collections_IEqualityComparer
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XNodeEqualityComparer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.Linq.XNodeEqualityComparer.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XNodeEqualityComparer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
// docid: M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
    /**
    Compares the values of two nodes.

    - Parameter x: The first  to compare.
    - Parameter y: The second  to compare.
    - Returns: A  indicating if the nodes are equal.

    */
    public func Equals(x : Optional<dotnet.System.Xml.Linq.XNode>, y : Optional<dotnet.System.Xml.Linq.XNode>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNodeEqualityComparer_bool__Equals_0__2__XNode_XNode(&__thrown, self.get_handle(), x?.get_handle() ?? nil, y?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode(System.Xml.Linq.XNode)
// docid: M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)
    /**
    Returns a hash code based on an .

    - Parameter obj: The  to hash.
    - Returns: A  that contains a value-based hash code for the node.

    */
    public func GetHashCode(obj : dotnet.System.Xml.Linq.XNode) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XNodeEqualityComparer_i32__GetHashCode_0__1__XNode(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // XNodeEqualityComparer


// type: System.Xml.Linq.XObject
    /**
    Represents a node or an attribute in an XML tree.

    */
open class XObject
    :
    dotnet.System.Object,
    System_Xml_IXmlLineInfo
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddAnnotation(System.Object)
// docid: M:System.Xml.Linq.XObject.AddAnnotation(System.Object)
    /**
    Adds an object to the annotation list of this .

    - Parameter annotation: An object that contains the annotation to add.
    */
    open func AddAnnotation(annotation : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XObject_void__AddAnnotation_0__1__Object(&__thrown, self.get_handle(), annotation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Annotation(System.Type)
// docid: M:System.Xml.Linq.XObject.Annotation(System.Type)
    /**
    Gets the first annotation object of the specified type from this .

    - Parameter type: The type of the annotation to retrieve.
    - Returns: The  that contains the first annotation object that matches the specified type, or  if no annotation is of the specified type.

    */
    open func Annotation(type : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XObject_Object__Annotation_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<System.Object> Annotations(System.Type)
// docid: M:System.Xml.Linq.XObject.Annotations(System.Type)
    /**
    Gets a collection of annotations of the specified type for this .

    - Parameter type: The type of the annotations to retrieve.
    - Returns: An  of  that contains the annotations that match the specified type for this .

    */
    open func Annotations(type : dotnet.System.Type_) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XObject_System_Collections_Generic_IEnumerable_object___Annotations_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IEnumerable<T> Annotations<T>()
// TODO COPE (write_all_methods) (unused generic param) T Annotation<T>()
    // void RemoveAnnotations(System.Type)
// docid: M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
    /**
    Removes the annotations of the specified type from this .

    - Parameter type: The type of annotations to remove.
    */
    open func RemoveAnnotations(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XObject_void__RemoveAnnotations_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void RemoveAnnotations<T>()
    // [IsSpecialName] System.String get_BaseUri()
// docid: M:System.Xml.Linq.XObject.get_BaseUri
    open func get_BaseUri() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XObject_String__get_BaseUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XDocument get_Document()
// docid: M:System.Xml.Linq.XObject.get_Document
    open func get_Document() throws -> Optional<dotnet.System.Xml.Linq.XDocument> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XObject_XDocument__get_Document_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XDocument(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XObject.get_NodeType
    open func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XObject_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XElement get_Parent()
// docid: M:System.Xml.Linq.XObject.get_Parent
    open func get_Parent() throws -> Optional<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XObject_XElement__get_Parent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void add_Changed(System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)
// docid: M:System.Xml.Linq.XObject.add_Changed(System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs})
    open func add_Changed(value : dotnet.System.EventHandler_1<dotnet.System.Xml.Linq.XObjectChangeEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XObject_void__add_Changed_0__1__System_EventHandler_System_Xml_Linq_XObjectChangeEventArgs_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Changed(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Xml.Linq.XObjectChangeEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Xml.Linq.XObjectChangeEventArgs>(value);
        return try add_Changed(value: del_value);
    }
    // [IsSpecialName] void remove_Changed(System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)
// docid: M:System.Xml.Linq.XObject.remove_Changed(System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs})
    open func remove_Changed(value : dotnet.System.EventHandler_1<dotnet.System.Xml.Linq.XObjectChangeEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XObject_void__remove_Changed_0__1__System_EventHandler_System_Xml_Linq_XObjectChangeEventArgs_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Changed(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Xml.Linq.XObjectChangeEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Xml.Linq.XObjectChangeEventArgs>(value);
        return try remove_Changed(value: del_value);
    }
    // [IsSpecialName] void add_Changing(System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)
// docid: M:System.Xml.Linq.XObject.add_Changing(System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs})
    open func add_Changing(value : dotnet.System.EventHandler_1<dotnet.System.Xml.Linq.XObjectChangeEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XObject_void__add_Changing_0__1__System_EventHandler_System_Xml_Linq_XObjectChangeEventArgs_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Changing(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Xml.Linq.XObjectChangeEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Xml.Linq.XObjectChangeEventArgs>(value);
        return try add_Changing(value: del_value);
    }
    // [IsSpecialName] void remove_Changing(System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>)
// docid: M:System.Xml.Linq.XObject.remove_Changing(System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs})
    open func remove_Changing(value : dotnet.System.EventHandler_1<dotnet.System.Xml.Linq.XObjectChangeEventArgs>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XObject_void__remove_Changing_0__1__System_EventHandler_System_Xml_Linq_XObjectChangeEventArgs_(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Changing(value : @escaping (Optional<dotnet.System.Object>, Optional<dotnet.System.Xml.Linq.XObjectChangeEventArgs>) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler_1<dotnet.System.Xml.Linq.XObjectChangeEventArgs>(value);
        return try remove_Changing(value: del_value);
    }
    /**
    Gets the base URI for this .

    */
    open var BaseUri : dotnet.System.String {
        get {
            return try! get_BaseUri();
        }
    }
    /**
    Gets the  for this .

    */
    open var Document : Optional<dotnet.System.Xml.Linq.XDocument> {
        get {
            return try! get_Document();
        }
    }
    /**
    Gets the node type for this .

    */
    open var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets the parent  of this .

    */
    open var Parent : Optional<dotnet.System.Xml.Linq.XElement> {
        get {
            return try! get_Parent();
        }
    }
} // XObject


// type: System.Xml.Linq.XObjectChange
    /**
    Specifies the event type when an event is raised for an .

    */
public struct XObjectChange : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XObjectChange_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.Linq.XObjectChange Add
    /**
    An  has been or will be added to an .

    */
    public static var Add : dotnet.System.Xml.Linq.XObjectChange {
        get {
        let __return = dotnet.System.Xml.Linq.XObjectChange(val: System_Xml_Linq_XObjectChange_get_Add());
            return __return;
        }
    }
    // static field: System.Xml.Linq.XObjectChange Remove
    /**
    An  has been or will be removed from an .

    */
    public static var Remove : dotnet.System.Xml.Linq.XObjectChange {
        get {
        let __return = dotnet.System.Xml.Linq.XObjectChange(val: System_Xml_Linq_XObjectChange_get_Remove());
            return __return;
        }
    }
    // static field: System.Xml.Linq.XObjectChange Name
    /**
    An  has been or will be renamed.

    */
    public static var Name : dotnet.System.Xml.Linq.XObjectChange {
        get {
        let __return = dotnet.System.Xml.Linq.XObjectChange(val: System_Xml_Linq_XObjectChange_get_Name());
            return __return;
        }
    }
    // static field: System.Xml.Linq.XObjectChange Value
    /**
    The value of an  has been or will be changed. In addition, a change in the serialization of an empty element (either from an empty tag to start/end tag pair or vice versa) raises this event.

    */
    public static var Value : dotnet.System.Xml.Linq.XObjectChange {
        get {
        let __return = dotnet.System.Xml.Linq.XObjectChange(val: System_Xml_Linq_XObjectChange_get_Value());
            return __return;
        }
    }
} // XObjectChange


// type: System.Xml.Linq.XObjectChangeEventArgs
    /**
    Provides data for the  and  events.

    */
open class XObjectChangeEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XObjectChangeEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Xml.Linq.XObjectChangeEventArgs Add
    /**
    Event argument for an  change event.

    */
    open class var Add : dotnet.System.Xml.Linq.XObjectChangeEventArgs {
        get {
        let __return = dotnet.System.Xml.Linq.XObjectChangeEventArgs(hndl: System_Xml_Linq_XObjectChangeEventArgs_get_Add());
            return __return;
        }
    }
    // static field: System.Xml.Linq.XObjectChangeEventArgs Name
    /**
    Event argument for a  change event.

    */
    open class var Name : dotnet.System.Xml.Linq.XObjectChangeEventArgs {
        get {
        let __return = dotnet.System.Xml.Linq.XObjectChangeEventArgs(hndl: System_Xml_Linq_XObjectChangeEventArgs_get_Name());
            return __return;
        }
    }
    // static field: System.Xml.Linq.XObjectChangeEventArgs Remove
    /**
    Event argument for a  change event.

    */
    open class var Remove : dotnet.System.Xml.Linq.XObjectChangeEventArgs {
        get {
        let __return = dotnet.System.Xml.Linq.XObjectChangeEventArgs(hndl: System_Xml_Linq_XObjectChangeEventArgs_get_Remove());
            return __return;
        }
    }
    // static field: System.Xml.Linq.XObjectChangeEventArgs Value
    /**
    Event argument for a  change event.

    */
    open class var Value : dotnet.System.Xml.Linq.XObjectChangeEventArgs {
        get {
        let __return = dotnet.System.Xml.Linq.XObjectChangeEventArgs(hndl: System_Xml_Linq_XObjectChangeEventArgs_get_Value());
            return __return;
        }
    }
    // .ctor(System.Xml.Linq.XObjectChange)
// docid: M:System.Xml.Linq.XObjectChangeEventArgs.#ctor(System.Xml.Linq.XObjectChange)
    /**
    Initializes a new instance of the  class.

    - Parameter objectChange: An  that contains the event arguments for LINQ to XML events.
    */
    public init(objectChange : dotnet.System.Xml.Linq.XObjectChange) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XObjectChangeEventArgs_ctor_0__1__XObjectChange(&__thrown, objectChange.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Xml.Linq.XObjectChange get_ObjectChange()
// docid: M:System.Xml.Linq.XObjectChangeEventArgs.get_ObjectChange
    open func get_ObjectChange() throws -> dotnet.System.Xml.Linq.XObjectChange {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XObjectChangeEventArgs_XObjectChange__get_ObjectChange_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XObjectChange(val: __return);
        }
    }
    /**
    Gets the type of change.

    */
    open var ObjectChange : dotnet.System.Xml.Linq.XObjectChange {
        get {
            return try! get_ObjectChange();
        }
    }
} // XObjectChangeEventArgs


// type: System.Xml.Linq.XProcessingInstruction
    /**
    Represents an XML processing instruction.

    */
open class XProcessingInstruction
    :
    dotnet.System.Xml.Linq.XNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XProcessingInstruction_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.Xml.Linq.XProcessingInstruction.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter target: A  containing the target application for this .
    - Parameter data: The string data for this .
    */
    public init(target : dotnet.System.String, data : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XProcessingInstruction_ctor_0__2__String_String(&__thrown, target.get_handle(), data.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XProcessingInstruction)
// docid: M:System.Xml.Linq.XProcessingInstruction.#ctor(System.Xml.Linq.XProcessingInstruction)
    /**
    Initializes a new instance of the  class.

    - Parameter other: The  node to copy from.
    */
    public init(other : dotnet.System.Xml.Linq.XProcessingInstruction) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XProcessingInstruction_ctor_0__1__XProcessingInstruction(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XProcessingInstruction.WriteTo(System.Xml.XmlWriter)
    /**
    Writes this processing instruction to an .

    - Parameter writer: The  to write this processing instruction to.
    */
    open override func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XProcessingInstruction_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteToAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XProcessingInstruction.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Writes this  to the specified .

    - Parameter writer: The writer to write this  to.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous write operation.

    */
    open override func WriteToAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XProcessingInstruction_Task__WriteToAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Data()
// docid: M:System.Xml.Linq.XProcessingInstruction.get_Data
    open func get_Data() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XProcessingInstruction_String__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Data(System.String)
// docid: M:System.Xml.Linq.XProcessingInstruction.set_Data(System.String)
    open func set_Data(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XProcessingInstruction_void__set_Data_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XProcessingInstruction.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XProcessingInstruction_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Target()
// docid: M:System.Xml.Linq.XProcessingInstruction.get_Target
    open func get_Target() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XProcessingInstruction_String__get_Target_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Target(System.String)
// docid: M:System.Xml.Linq.XProcessingInstruction.set_Target(System.String)
    open func set_Target(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XProcessingInstruction_void__set_Target_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the string value of this processing instruction.

    */
    open var Data : dotnet.System.String {
        get {
            return try! get_Data();
        }
        set(v) {
            return try! set_Data(value: v);
        }
    }
    /**
    Gets the node type for this node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets a string containing the target application for this processing instruction.

    */
    open var Target : dotnet.System.String {
        get {
            return try! get_Target();
        }
        set(v) {
            return try! set_Target(value: v);
        }
    }
} // XProcessingInstruction


// type: System.Xml.Linq.XStreamingElement
    /**
    Represents elements in an XML tree that supports deferred streaming output.

    */
open class XStreamingElement
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XStreamingElement_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)
    /**
    Initializes a new instance of the  class from the specified .

    - Parameter name: An  that contains the name of the element.
    */
    public init(name : dotnet.System.Xml.Linq.XName) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XStreamingElement_ctor_0__1__XName(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XName, System.Object)
// docid: M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)
    /**
    Initializes a new instance of the  class with the specified name and content.

    - Parameter name: An  that contains the element name.
    - Parameter content: The contents of the element.
    */
    public init(name : dotnet.System.Xml.Linq.XName, content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XStreamingElement_ctor_0__2__XName_Object(&__thrown, name.get_handle(), content?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XName, System.Object[])
// docid: M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])
    /**
    Initializes a new instance of the  class with the specified name and content.

    - Parameter name: An  that contains the element name.
    - Parameter content: The contents of the element.
    */
    public init(name : dotnet.System.Xml.Linq.XName, content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XStreamingElement_ctor_0__2__XName_ObjectArray(&__thrown, name.get_handle(), content.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Object)
// docid: M:System.Xml.Linq.XStreamingElement.Add(System.Object)
    /**
    Adds the specified content as children to this .

    - Parameter content: Content to be added to the streaming element.
    */
    open func Add(content : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Add_0__1__Object(&__thrown, self.get_handle(), content?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Object[])
// docid: M:System.Xml.Linq.XStreamingElement.Add(System.Object[])
    /**
    Adds the specified content as children to this .

    - Parameter content: Content to be added to the streaming element.
    */
    open func Add(content : dotnet.System_Arr<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Add_0__1__ObjectArray(&__thrown, self.get_handle(), content.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.Stream)
// docid: M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)
    /**
    Outputs this  to the specified .

    - Parameter stream: The stream to output this  to.
    */
    open func Save(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Save_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.Stream, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)
    /**
    Outputs this  to the specified , optionally specifying formatting behavior.

    - Parameter stream: The stream to output this  to.
    - Parameter options: A  object that specifies formatting behavior.
    */
    open func Save(stream : dotnet.System.IO.Stream, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Save_0__2__Stream_SaveOptions(&__thrown, self.get_handle(), stream.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.TextWriter)
// docid: M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)
    /**
    Serialize this streaming element to a .

    - Parameter textWriter: A  that the  will be written to.
    */
    open func Save(textWriter : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Save_0__1__TextWriter(&__thrown, self.get_handle(), textWriter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.TextWriter, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)
    /**
    Serialize this streaming element to a , optionally disabling formatting.

    - Parameter textWriter: The  to output the XML to.
    - Parameter options: A  that specifies formatting behavior.
    */
    open func Save(textWriter : dotnet.System.IO.TextWriter, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Save_0__2__TextWriter_SaveOptions(&__thrown, self.get_handle(), textWriter.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.String)
// docid: M:System.Xml.Linq.XStreamingElement.Save(System.String)
    /**
    Serialize this streaming element to a file.

    - Parameter fileName: A  that contains the name of the file.
    */
    open func Save(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Save_0__1__String(&__thrown, self.get_handle(), fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.String, System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)
    /**
    Serialize this streaming element to a file, optionally disabling formatting.

    - Parameter fileName: A  that contains the name of the file.
    - Parameter options: A  object that specifies formatting behavior.
    */
    open func Save(fileName : dotnet.System.String, options : dotnet.System.Xml.Linq.SaveOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Save_0__2__String_SaveOptions(&__thrown, self.get_handle(), fileName.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)
    /**
    Serialize this streaming element to an .

    - Parameter writer: A  that the  will be written to.
    */
    open func Save(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__Save_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.Xml.Linq.XStreamingElement.ToString
    /**
    Returns the formatted (indented) XML for this streaming element.

    - Returns: A  containing the indented XML.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XStreamingElement_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Xml.Linq.SaveOptions)
// docid: M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)
    /**
    Returns the XML for this streaming element, optionally disabling formatting.

    - Parameter options: A  that specifies formatting behavior.
    - Returns: A  containing the XML.

    */
    open func ToString(options : dotnet.System.Xml.Linq.SaveOptions) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XStreamingElement_String__ToString_0__1__SaveOptions(&__thrown, self.get_handle(), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)
    /**
    Writes this streaming element to an .

    - Parameter writer: An  into which this method will write.
    */
    open func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Linq.XName get_Name()
// docid: M:System.Xml.Linq.XStreamingElement.get_Name
    open func get_Name() throws -> dotnet.System.Xml.Linq.XName {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XStreamingElement_XName__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Linq.XName(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.Xml.Linq.XName)
// docid: M:System.Xml.Linq.XStreamingElement.set_Name(System.Xml.Linq.XName)
    open func set_Name(value : dotnet.System.Xml.Linq.XName) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XStreamingElement_void__set_Name_0__1__XName(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of this streaming element.

    */
    open var Name : dotnet.System.Xml.Linq.XName {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
} // XStreamingElement


// type: System.Xml.Linq.XText
    /**
    Represents a text node.

    */
open class XText
    :
    dotnet.System.Xml.Linq.XNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_Linq_XText_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Xml.Linq.XText.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter value: The  that contains the value of the  node.
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XText_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Linq.XText)
// docid: M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)
    /**
    Initializes a new instance of the  class from another  object.

    - Parameter other: The  node to copy from.
    */
    public init(other : dotnet.System.Xml.Linq.XText) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_Linq_XText_ctor_0__1__XText(&__thrown, other.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void WriteTo(System.Xml.XmlWriter)
// docid: M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)
    /**
    Writes this node to an .

    - Parameter writer: An  into which this method will write.
    */
    open override func WriteTo(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XText_void__WriteTo_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteToAsync(System.Xml.XmlWriter, System.Threading.CancellationToken)
// docid: M:System.Xml.Linq.XText.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)
    /**
    Asynchronously writes this  to the specified .

    - Parameter writer: The writer to write this  to.
    - Parameter cancellationToken: A token that can be used to request cancellation of the asynchronous operation.
    - Returns: A task representing the asynchronous write operation.

    */
    open override func WriteToAsync(writer : dotnet.System.Xml.XmlWriter, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XText_Task__WriteToAsync_0__2__XmlWriter_CancellationToken(&__thrown, self.get_handle(), writer.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlNodeType get_NodeType()
// docid: M:System.Xml.Linq.XText.get_NodeType
    open override func get_NodeType() throws -> dotnet.System.Xml.XmlNodeType {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XText_XmlNodeType__get_NodeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlNodeType(val: __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.Linq.XText.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Linq_XText_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Xml.Linq.XText.set_Value(System.String)
    open func set_Value(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Linq_XText_void__set_Value_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the node type for this node.

    */
    open override var NodeType : dotnet.System.Xml.XmlNodeType {
        get {
            return try! get_NodeType();
        }
    }
    /**
    Gets or sets the value of this node.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v);
        }
    }
} // XText


}

// System.Xml.Schema
extension System.Xml.Schema {
// type: System.Xml.Schema.Extensions
public struct Extensions {
    // System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(System.Xml.Linq.XAttribute)
// docid: M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)
    /**
    Gets the post-schema-validation infoset (PSVI) of a validated attribute.

    - Parameter source: An  that has been previously validated.
    - Returns: A  that contains the post-schema-validation infoset for an .

    */
    public static func GetSchemaInfo(source : dotnet.System.Xml.Linq.XAttribute) throws -> Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_Extensions_IXmlSchemaInfo__GetSchemaInfo_0__1__XAttribute(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(System.Xml.Linq.XElement)
// docid: M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)
    /**
    Gets the post-schema-validation infoset (PSVI) of a validated element.

    - Parameter source: An  that has been previously validated.
    - Returns: A  that contains the post-schema-validation infoset (PSVI) for an .

    */
    public static func GetSchemaInfo(source : dotnet.System.Xml.Linq.XElement) throws -> Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_Schema_Extensions_IXmlSchemaInfo__GetSchemaInfo_0__1__XElement(&__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.IXmlSchemaInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Validate(System.Xml.Linq.XAttribute, System.Xml.Schema.XmlSchemaObject, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
    /**
    This method validates that an  conforms to a specified  and an .

    - Parameter source: The  to validate.
    - Parameter partialValidationType: An  that specifies the sub-tree to validate.
    - Parameter schemas: An  to validate against.
    - Parameter validationEventHandler: A  for an event that occurs when the reader encounters validation errors. If , throws an exception upon validation errors.
    */
    public static func Validate(source : dotnet.System.Xml.Linq.XAttribute, partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_Extensions_void__Validate_0__4__XAttribute_XmlSchemaObject_XmlSchemaSet_ValidationEventHandler(&__thrown, source.get_handle(), partialValidationType.get_handle(), schemas.get_handle(), validationEventHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func Validate(source : dotnet.System.Xml.Linq.XAttribute, partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Validate(source: source, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: del_validationEventHandler);
    }
    // void Validate(System.Xml.Linq.XAttribute, System.Xml.Schema.XmlSchemaObject, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler, bool)
// docid: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
    /**
    Validates that an  conforms to a specified  and an , optionally populating the XML tree with the post-schema-validation infoset (PSVI).

    - Parameter source: The  to validate.
    - Parameter partialValidationType: An  that specifies the sub-tree to validate.
    - Parameter schemas: An  to validate against.
    - Parameter validationEventHandler: A  for an event that occurs when the reader encounters validation errors. If , throws an exception upon validation errors.
    - Parameter addSchemaInfo: A  indicating whether to populate the post-schema-validation infoset (PSVI).
    */
    public static func Validate(source : dotnet.System.Xml.Linq.XAttribute, partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, addSchemaInfo : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_Extensions_void__Validate_0__5__XAttribute_XmlSchemaObject_XmlSchemaSet_ValidationEventHandler_bool(&__thrown, source.get_handle(), partialValidationType.get_handle(), schemas.get_handle(), validationEventHandler?.get_handle() ?? nil, Swift.Int32(addSchemaInfo ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func Validate(source : dotnet.System.Xml.Linq.XAttribute, partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, addSchemaInfo : Bool) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Validate(source: source, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: del_validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
    // void Validate(System.Xml.Linq.XDocument, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
    /**
    This method validates that an  conforms to an XSD in an .

    - Parameter source: The  to validate.
    - Parameter schemas: An  to validate against.
    - Parameter validationEventHandler: A  for an event that occurs when the reader encounters validation errors. If , throws an exception upon validation errors.
    */
    public static func Validate(source : dotnet.System.Xml.Linq.XDocument, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_Extensions_void__Validate_0__3__XDocument_XmlSchemaSet_ValidationEventHandler(&__thrown, source.get_handle(), schemas.get_handle(), validationEventHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func Validate(source : dotnet.System.Xml.Linq.XDocument, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Validate(source: source, schemas: schemas, validationEventHandler: del_validationEventHandler);
    }
    // void Validate(System.Xml.Linq.XDocument, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler, bool)
// docid: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
    /**
    Validates that an  conforms to an XSD in an , optionally populating the XML tree with the post-schema-validation infoset (PSVI).

    - Parameter source: The  to validate.
    - Parameter schemas: An  to validate against.
    - Parameter validationEventHandler: A  for an event that occurs when the reader encounters validation errors. If , throws an exception upon validation errors.
    - Parameter addSchemaInfo: A  indicating whether to populate the post-schema-validation infoset (PSVI).
    */
    public static func Validate(source : dotnet.System.Xml.Linq.XDocument, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, addSchemaInfo : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_Extensions_void__Validate_0__4__XDocument_XmlSchemaSet_ValidationEventHandler_bool(&__thrown, source.get_handle(), schemas.get_handle(), validationEventHandler?.get_handle() ?? nil, Swift.Int32(addSchemaInfo ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func Validate(source : dotnet.System.Xml.Linq.XDocument, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, addSchemaInfo : Bool) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Validate(source: source, schemas: schemas, validationEventHandler: del_validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
    // void Validate(System.Xml.Linq.XElement, System.Xml.Schema.XmlSchemaObject, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler)
// docid: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
    /**
    This method validates that an  sub-tree conforms to a specified  and an .

    - Parameter source: The  to validate.
    - Parameter partialValidationType: An  that specifies the sub-tree to validate.
    - Parameter schemas: An  to validate against.
    - Parameter validationEventHandler: A  for an event that occurs when the reader encounters validation errors. If , throws an exception upon validation errors.
    */
    public static func Validate(source : dotnet.System.Xml.Linq.XElement, partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_Extensions_void__Validate_0__4__XElement_XmlSchemaObject_XmlSchemaSet_ValidationEventHandler(&__thrown, source.get_handle(), partialValidationType.get_handle(), schemas.get_handle(), validationEventHandler?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func Validate(source : dotnet.System.Xml.Linq.XElement, partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Validate(source: source, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: del_validationEventHandler);
    }
    // void Validate(System.Xml.Linq.XElement, System.Xml.Schema.XmlSchemaObject, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler, bool)
// docid: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
    /**
    Validates that an  sub-tree conforms to a specified  and an , optionally populating the XML tree with the post-schema-validation infoset (PSVI).

    - Parameter source: The  to validate.
    - Parameter partialValidationType: An  that specifies the sub-tree to validate.
    - Parameter schemas: An  to validate against.
    - Parameter validationEventHandler: A  for an event that occurs when the reader encounters validation errors. If , throws an exception upon validation errors.
    - Parameter addSchemaInfo: A  indicating whether to populate the post-schema-validation infoset (PSVI).
    */
    public static func Validate(source : dotnet.System.Xml.Linq.XElement, partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, addSchemaInfo : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_Schema_Extensions_void__Validate_0__5__XElement_XmlSchemaObject_XmlSchemaSet_ValidationEventHandler_bool(&__thrown, source.get_handle(), partialValidationType.get_handle(), schemas.get_handle(), validationEventHandler?.get_handle() ?? nil, Swift.Int32(addSchemaInfo ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public static func Validate(source : dotnet.System.Xml.Linq.XElement, partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, addSchemaInfo : Bool) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        return try Validate(source: source, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: del_validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
} // Extensions


}



// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func AncestorsAndSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> where T == dotnet.System.Xml.Linq.XElement {
        return try dotnet.System.Xml.Linq.Extensions.AncestorsAndSelf(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func AncestorsAndSelf(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> where T == dotnet.System.Xml.Linq.XElement {
        return try dotnet.System.Xml.Linq.Extensions.AncestorsAndSelf(source: self, name: name);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors<T>(System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Ancestors() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.Linq.Extensions.Ancestors(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Ancestors(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.Linq.Extensions.Ancestors(source: self, name: name);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Attributes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute> where T == dotnet.System.Xml.Linq.XElement {
        return try dotnet.System.Xml.Linq.Extensions.Attributes(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Attributes(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XAttribute> where T == dotnet.System.Xml.Linq.XElement {
        return try dotnet.System.Xml.Linq.Extensions.Attributes(source: self, name: name);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func DescendantNodesAndSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> where T == dotnet.System.Xml.Linq.XElement {
        return try dotnet.System.Xml.Linq.Extensions.DescendantNodesAndSelf(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodes<T>(System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func DescendantNodes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        return try dotnet.System.Xml.Linq.Extensions.DescendantNodes(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func DescendantsAndSelf() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> where T == dotnet.System.Xml.Linq.XElement {
        return try dotnet.System.Xml.Linq.Extensions.DescendantsAndSelf(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func DescendantsAndSelf(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> where T == dotnet.System.Xml.Linq.XElement {
        return try dotnet.System.Xml.Linq.Extensions.DescendantsAndSelf(source: self, name: name);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants<T>(System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Descendants() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.Linq.Extensions.Descendants(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Descendants(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.Linq.Extensions.Descendants(source: self, name: name);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements<T>(System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Elements() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.Linq.Extensions.Elements(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Elements(name : Optional<dotnet.System.Xml.Linq.XName>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.Linq.Extensions.Elements(source: self, name: name);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<T> InDocumentOrder<T>(System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func InDocumentOrder() throws -> dotnet.System.Collections.Generic.IEnumerable_1<T> {
        return try dotnet.System.Xml.Linq.Extensions.InDocumentOrder(source: self);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> Nodes<T>(System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Nodes() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XNode> {
        return try dotnet.System.Xml.Linq.Extensions.Nodes(source: self);
    }
}

// EXTENSION METHOD void Remove(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Remove() throws where T == dotnet.System.Xml.Linq.XAttribute {
        try dotnet.System.Xml.Linq.Extensions.Remove(source: self);
    }
}

// EXTENSION METHOD void Remove<T>(System.Collections.Generic.IEnumerable<T>)
extension dotnet.System.Collections.Generic.IEnumerable_1 {
    public func Remove() throws {
        try dotnet.System.Xml.Linq.Extensions.Remove(source: self);
    }
}

// EXTENSION METHOD System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(System.Xml.Linq.XAttribute)
extension dotnet.System.Xml.Linq.XAttribute {
    public func GetSchemaInfo() throws -> Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        return try dotnet.System.Xml.Schema.Extensions.GetSchemaInfo(source: self);
    }
}

// EXTENSION METHOD System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo(System.Xml.Linq.XElement)
extension dotnet.System.Xml.Linq.XElement {
    public func GetSchemaInfo() throws -> Optional<dotnet.System.Xml.Schema.IXmlSchemaInfo> {
        return try dotnet.System.Xml.Schema.Extensions.GetSchemaInfo(source: self);
    }
}

// EXTENSION METHOD void Validate(System.Xml.Linq.XAttribute, System.Xml.Schema.XmlSchemaObject, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler)
extension dotnet.System.Xml.Linq.XAttribute {
    public func Validate(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: validationEventHandler);
    }
    // delegate closure overload
    public func Validate(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: del_validationEventHandler);
    }
}

// EXTENSION METHOD void Validate(System.Xml.Linq.XAttribute, System.Xml.Schema.XmlSchemaObject, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler, bool)
extension dotnet.System.Xml.Linq.XAttribute {
    public func Validate(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, addSchemaInfo : Bool) throws {
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
    // delegate closure overload
    public func Validate(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, addSchemaInfo : Bool) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: del_validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
}

// EXTENSION METHOD void Validate(System.Xml.Linq.XDocument, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler)
extension dotnet.System.Xml.Linq.XDocument {
    public func Validate(schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, schemas: schemas, validationEventHandler: validationEventHandler);
    }
    // delegate closure overload
    public func Validate(schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, schemas: schemas, validationEventHandler: del_validationEventHandler);
    }
}

// EXTENSION METHOD void Validate(System.Xml.Linq.XDocument, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler, bool)
extension dotnet.System.Xml.Linq.XDocument {
    public func Validate(schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, addSchemaInfo : Bool) throws {
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, schemas: schemas, validationEventHandler: validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
    // delegate closure overload
    public func Validate(schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, addSchemaInfo : Bool) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, schemas: schemas, validationEventHandler: del_validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
}

// EXTENSION METHOD void Validate(System.Xml.Linq.XElement, System.Xml.Schema.XmlSchemaObject, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler)
extension dotnet.System.Xml.Linq.XElement {
    public func Validate(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>) throws {
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: validationEventHandler);
    }
    // delegate closure overload
    public func Validate(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: del_validationEventHandler);
    }
}

// EXTENSION METHOD void Validate(System.Xml.Linq.XElement, System.Xml.Schema.XmlSchemaObject, System.Xml.Schema.XmlSchemaSet, System.Xml.Schema.ValidationEventHandler, bool)
extension dotnet.System.Xml.Linq.XElement {
    public func Validate(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : Optional<dotnet.System.Xml.Schema.ValidationEventHandler>, addSchemaInfo : Bool) throws {
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
    // delegate closure overload
    public func Validate(partialValidationType : dotnet.System.Xml.Schema.XmlSchemaObject, schemas : dotnet.System.Xml.Schema.XmlSchemaSet, validationEventHandler : @escaping (Optional<dotnet.System.Object>, dotnet.System.Xml.Schema.ValidationEventArgs) throws -> Void, addSchemaInfo : Bool) throws {
        let del_validationEventHandler = try dotnet.System.Xml.Schema.ValidationEventHandler(validationEventHandler);
        try dotnet.System.Xml.Schema.Extensions.Validate(source: self, partialValidationType: partialValidationType, schemas: schemas, validationEventHandler: del_validationEventHandler, addSchemaInfo: addSchemaInfo);
    }
}

