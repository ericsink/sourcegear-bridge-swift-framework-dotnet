// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
extension System.Net {
// type: System.Net.AuthenticationManager
    /**
    Manages the authentication modules called during the client authentication process.

    */
open class AuthenticationManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_AuthenticationManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Net.Authorization Authenticate(System.String, System.Net.WebRequest, System.Net.ICredentials)
// docid: M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)
    /**
    Calls each registered authentication module to find the first module that can respond to the authentication request.

    - Parameter challenge: The challenge returned by the Internet resource.
    - Parameter request: The  that initiated the authentication challenge.
    - Parameter credentials: The  associated with this request.
    - Returns: An instance of the  class containing the result of the authorization attempt. If there is no authentication module to respond to the challenge, this method returns .

    */
    open class func Authenticate(challenge : dotnet.System.String, request : dotnet.System.Net.WebRequest, credentials : dotnet.System.Net.ICredentials) throws -> Optional<dotnet.System.Net.Authorization> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationManager_Authorization__Authenticate_0__3__String_WebRequest_ICredentials(&__thrown, challenge.get_handle(), request.get_handle(), credentials.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Authorization(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Net.Authorization PreAuthenticate(System.Net.WebRequest, System.Net.ICredentials)
// docid: M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)
    /**
    Preauthenticates a request.

    - Parameter request: A  to an Internet resource.
    - Parameter credentials: The  associated with the request.
    - Returns: An instance of the  class if the request can be preauthenticated; otherwise, . If  is , this method returns .

    */
    open class func PreAuthenticate(request : dotnet.System.Net.WebRequest, credentials : dotnet.System.Net.ICredentials) throws -> Optional<dotnet.System.Net.Authorization> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationManager_Authorization__PreAuthenticate_0__2__WebRequest_ICredentials(&__thrown, request.get_handle(), credentials.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Authorization(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Register(System.Net.IAuthenticationModule)
// docid: M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)
    /**
    Registers an authentication module with the authentication manager.

    - Parameter authenticationModule: The  to register with the authentication manager.
    */
    open class func Register(authenticationModule : dotnet.System.Net.IAuthenticationModule) throws {
        var __thrown : NullableHandle = nil;
        System_Net_AuthenticationManager_void__Register_0__1__IAuthenticationModule(&__thrown, authenticationModule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Unregister(System.Net.IAuthenticationModule)
// docid: M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)
    /**
    Removes the specified authentication module from the list of registered modules.

    - Parameter authenticationModule: The  to remove from the list of registered modules.
    */
    open class func Unregister(authenticationModule : dotnet.System.Net.IAuthenticationModule) throws {
        var __thrown : NullableHandle = nil;
        System_Net_AuthenticationManager_void__Unregister_0__1__IAuthenticationModule(&__thrown, authenticationModule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Unregister(System.String)
// docid: M:System.Net.AuthenticationManager.Unregister(System.String)
    /**
    Removes authentication modules with the specified authentication scheme from the list of registered modules.

    - Parameter authenticationScheme: The authentication scheme of the module to remove.
    */
    open class func Unregister(authenticationScheme : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_AuthenticationManager_void__Unregister_0__1__String(&__thrown, authenticationScheme.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentialPolicy get_CredentialPolicy()
// docid: M:System.Net.AuthenticationManager.get_CredentialPolicy
    open class func get_CredentialPolicy() throws -> Optional<dotnet.System.Net.ICredentialPolicy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationManager_ICredentialPolicy__get_CredentialPolicy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentialPolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CredentialPolicy(System.Net.ICredentialPolicy)
// docid: M:System.Net.AuthenticationManager.set_CredentialPolicy(System.Net.ICredentialPolicy)
    open class func set_CredentialPolicy(value : Optional<dotnet.System.Net.ICredentialPolicy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_AuthenticationManager_void__set_CredentialPolicy_0__1__ICredentialPolicy(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.StringDictionary get_CustomTargetNameDictionary()
// docid: M:System.Net.AuthenticationManager.get_CustomTargetNameDictionary
    open class func get_CustomTargetNameDictionary() throws -> dotnet.System.Collections.Specialized.StringDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationManager_StringDictionary__get_CustomTargetNameDictionary_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.IEnumerator get_RegisteredModules()
// docid: M:System.Net.AuthenticationManager.get_RegisteredModules
    open class func get_RegisteredModules() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_AuthenticationManager_IEnumerator__get_RegisteredModules_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    /**
    Gets or sets the credential policy to be used for resource requests made using the  class.

    */
    public static var CredentialPolicy : Optional<dotnet.System.Net.ICredentialPolicy> {
        get {
            return try! get_CredentialPolicy();
        }
        set(v) {
            return try! set_CredentialPolicy(value: v!);
        }
    }
    /**
    Gets the dictionary that contains Service Principal Names (SPNs) that are used to identify hosts during Kerberos authentication for requests made using  and its derived classes.

    */
    public static var CustomTargetNameDictionary : dotnet.System.Collections.Specialized.StringDictionary {
        get {
            return try! get_CustomTargetNameDictionary();
        }
    }
    /**
    Gets a list of authentication modules that are registered with the authentication manager.

    */
    public static var RegisteredModules : dotnet.System.Collections.IEnumerator {
        get {
            return try! get_RegisteredModules();
        }
    }
} // AuthenticationManager


// type: System.Net.Authorization
    /**
    Contains an authentication message for an Internet server.

    */
open class Authorization
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Authorization_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.Authorization.#ctor(System.String)
    /**
    Creates a new instance of the  class with the specified authorization message.

    - Parameter token: The encrypted authorization message expected by the server.
    */
    public init(token : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Authorization_ctor_0__1__String(&__thrown, token?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool)
// docid: M:System.Net.Authorization.#ctor(System.String,System.Boolean)
    /**
    Creates a new instance of the  class with the specified authorization message and completion status.

    - Parameter token: The encrypted authorization message expected by the server.
    - Parameter finished: The completion status of the authorization attempt.  if the authorization attempt is complete; otherwise, .
    */
    public init(token : Optional<dotnet.System.String>, finished : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Authorization_ctor_0__2__String_bool(&__thrown, token?.get_handle() ?? nil, Swift.Int32(finished ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool, System.String)
// docid: M:System.Net.Authorization.#ctor(System.String,System.Boolean,System.String)
    /**
    Creates a new instance of the  class with the specified authorization message, completion status, and connection group identifier.

    - Parameter token: The encrypted authorization message expected by the server.
    - Parameter finished: The completion status of the authorization attempt.  if the authorization attempt is complete; otherwise, .
    - Parameter connectionGroupId: A unique identifier that can be used to create private client-server connections that are bound only to this authentication scheme.
    */
    public init(token : Optional<dotnet.System.String>, finished : Bool, connectionGroupId : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Authorization_ctor_0__3__String_bool_String(&__thrown, token?.get_handle() ?? nil, Swift.Int32(finished ? 1 : 0), connectionGroupId?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Complete()
// docid: M:System.Net.Authorization.get_Complete
    open func get_Complete() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Authorization_bool__get_Complete_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_ConnectionGroupId()
// docid: M:System.Net.Authorization.get_ConnectionGroupId
    open func get_ConnectionGroupId() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Authorization_String__get_ConnectionGroupId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Net.Authorization.get_Message
    open func get_Message() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Authorization_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_MutuallyAuthenticated()
// docid: M:System.Net.Authorization.get_MutuallyAuthenticated
    open func get_MutuallyAuthenticated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Authorization_bool__get_MutuallyAuthenticated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_MutuallyAuthenticated(bool)
// docid: M:System.Net.Authorization.set_MutuallyAuthenticated(System.Boolean)
    open func set_MutuallyAuthenticated(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Authorization_void__set_MutuallyAuthenticated_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String[] get_ProtectionRealm()
// docid: M:System.Net.Authorization.get_ProtectionRealm
    open func get_ProtectionRealm() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Authorization_StringArray__get_ProtectionRealm_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ProtectionRealm(System.String[])
// docid: M:System.Net.Authorization.set_ProtectionRealm(System.String[])
    open func set_ProtectionRealm(value : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_Authorization_void__set_ProtectionRealm_0__1__StringArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the completion status of the authorization.

    */
    open var Complete : Bool {
        get {
            return try! get_Complete();
        }
    }
    /**
    Gets a unique identifier for user-specific connections.

    */
    open var ConnectionGroupId : Optional<dotnet.System.String> {
        get {
            return try! get_ConnectionGroupId();
        }
    }
    /**
    Gets the message returned to the server in response to an authentication challenge.

    */
    open var Message : Optional<dotnet.System.String> {
        get {
            return try! get_Message();
        }
    }
    /**
    Gets or sets a  value that indicates whether mutual authentication occurred.

    */
    open var MutuallyAuthenticated : Bool {
        get {
            return try! get_MutuallyAuthenticated();
        }
        set(v) {
            return try! set_MutuallyAuthenticated(value: v);
        }
    }
    /**
    Gets or sets the prefix for Uniform Resource Identifiers (URIs) that can be authenticated with the  property.

    */
    open var ProtectionRealm : Optional<dotnet.System_Arr<dotnet.System.String>> {
        get {
            return try! get_ProtectionRealm();
        }
        set(v) {
            return try! set_ProtectionRealm(value: v!);
        }
    }
} // Authorization


// type: System.Net.FileWebRequest
    /**
    Provides a file system implementation of the  class.

    */
open class FileWebRequest
    :
    dotnet.System.Net.WebRequest
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_FileWebRequest_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Abort()
// docid: M:System.Net.FileWebRequest.Abort
    /**
    Cancels a request to an Internet resource.

    */
    open override func Abort() throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginGetRequestStream(System.AsyncCallback, System.Object)
// docid: M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
    /**
    Begins an asynchronous request for a  object to use to write data.

    - Parameter callback: The  delegate.
    - Parameter state: An object that contains state information for this request.
    - Returns: An  that references the asynchronous request.

    */
    open override func BeginGetRequestStream(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_IAsyncResult__BeginGetRequestStream_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    open override func BeginGetRequestStream(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetRequestStream(callback: del_callback, state: state);
    }
    // System.IAsyncResult BeginGetResponse(System.AsyncCallback, System.Object)
// docid: M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
    /**
    Begins an asynchronous request for a file system resource.

    - Parameter callback: The  delegate.
    - Parameter state: An object that contains state information for this request.
    - Returns: An  that references the asynchronous request.

    */
    open override func BeginGetResponse(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_IAsyncResult__BeginGetResponse_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    open override func BeginGetResponse(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetResponse(callback: del_callback, state: state);
    }
    // System.IO.Stream EndGetRequestStream(System.IAsyncResult)
// docid: M:System.Net.FileWebRequest.EndGetRequestStream(System.IAsyncResult)
    /**
    Ends an asynchronous request for a  instance that the application uses to write data.

    - Parameter asyncResult: An  that references the pending request for a stream.
    - Returns: A  object that the application uses to write data.

    */
    open override func EndGetRequestStream(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_Stream__EndGetRequestStream_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Net.WebResponse EndGetResponse(System.IAsyncResult)
// docid: M:System.Net.FileWebRequest.EndGetResponse(System.IAsyncResult)
    /**
    Ends an asynchronous request for a file system resource.

    - Parameter asyncResult: An  that references the pending request for a response.
    - Returns: A  that contains the response from the file system resource.

    */
    open override func EndGetResponse(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.WebResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_WebResponse__EndGetResponse_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebResponse(hndl : __return);
        }
    }
    // System.IO.Stream GetRequestStream()
// docid: M:System.Net.FileWebRequest.GetRequestStream
    /**
    Returns a  object for writing data to the file system resource.

    - Returns: A  for writing data to the file system resource.

    */
    open override func GetRequestStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_Stream__GetRequestStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> GetRequestStreamAsync()
// docid: M:System.Net.FileWebRequest.GetRequestStreamAsync
    /**
    Returns a stream for writing data to the file system resource as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open override func GetRequestStreamAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_System_Threading_Tasks_Task_System_IO_Stream___GetRequestStreamAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Net.WebResponse GetResponse()
// docid: M:System.Net.FileWebRequest.GetResponse
    /**
    Returns a response to a file system request.

    - Returns: A  that contains the response from the file system resource.

    */
    open override func GetResponse() throws -> dotnet.System.Net.WebResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_WebResponse__GetResponse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebResponse(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.WebResponse> GetResponseAsync()
// docid: M:System.Net.FileWebRequest.GetResponseAsync
    /**
    Returns a response to a file system request as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open override func GetResponseAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.WebResponse> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_System_Threading_Tasks_Task_System_Net_WebResponse___GetResponseAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ConnectionGroupName()
// docid: M:System.Net.FileWebRequest.get_ConnectionGroupName
    open override func get_ConnectionGroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_String__get_ConnectionGroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ConnectionGroupName(System.String)
// docid: M:System.Net.FileWebRequest.set_ConnectionGroupName(System.String)
    open override func set_ConnectionGroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_ConnectionGroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength()
// docid: M:System.Net.FileWebRequest.get_ContentLength
    open override func get_ContentLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_i64__get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Int64)
// docid: M:System.Net.FileWebRequest.set_ContentLength(System.Int64)
    open override func set_ContentLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_ContentLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.FileWebRequest.get_ContentType
    open override func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:System.Net.FileWebRequest.set_ContentType(System.String)
    open override func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_Credentials()
// docid: M:System.Net.FileWebRequest.get_Credentials
    open override func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_ICredentials__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Net.FileWebRequest.set_Credentials(System.Net.ICredentials)
    open override func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.FileWebRequest.get_Headers
    open override func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:System.Net.FileWebRequest.get_Method
    open override func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Method(System.String)
// docid: M:System.Net.FileWebRequest.set_Method(System.String)
    open override func set_Method(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_Method_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreAuthenticate()
// docid: M:System.Net.FileWebRequest.get_PreAuthenticate
    open override func get_PreAuthenticate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_bool__get_PreAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreAuthenticate(bool)
// docid: M:System.Net.FileWebRequest.set_PreAuthenticate(System.Boolean)
    open override func set_PreAuthenticate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_PreAuthenticate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_Proxy()
// docid: M:System.Net.FileWebRequest.get_Proxy
    open override func get_Proxy() throws -> Optional<dotnet.System.Net.IWebProxy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_IWebProxy__get_Proxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IWebProxy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Proxy(System.Net.IWebProxy)
// docid: M:System.Net.FileWebRequest.set_Proxy(System.Net.IWebProxy)
    open override func set_Proxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_Proxy_0__1__IWebProxy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_RequestUri()
// docid: M:System.Net.FileWebRequest.get_RequestUri
    open override func get_RequestUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_Uri__get_RequestUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Timeout()
// docid: M:System.Net.FileWebRequest.get_Timeout
    open override func get_Timeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_i32__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Timeout(System.Int32)
// docid: M:System.Net.FileWebRequest.set_Timeout(System.Int32)
    open override func set_Timeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_Timeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseDefaultCredentials()
// docid: M:System.Net.FileWebRequest.get_UseDefaultCredentials
    open override func get_UseDefaultCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebRequest_bool__get_UseDefaultCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseDefaultCredentials(bool)
// docid: M:System.Net.FileWebRequest.set_UseDefaultCredentials(System.Boolean)
    open override func set_UseDefaultCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebRequest_void__set_UseDefaultCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the connection group for the request. This property is reserved for future use.

    */
    open override var ConnectionGroupName : Optional<dotnet.System.String> {
        get {
            return try! get_ConnectionGroupName();
        }
        set(v) {
            return try! set_ConnectionGroupName(value: v!);
        }
    }
    /**
    Gets or sets the content length of the data being sent.

    */
    open override var ContentLength : Swift.Int64 {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v);
        }
    }
    /**
    Gets or sets the content type of the data being sent. This property is reserved for future use.

    */
    open override var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    Gets or sets the credentials that are associated with this request. This property is reserved for future use.

    */
    open override var Credentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
// TODO COPE (is_override_mutable_with_readonly ) [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
    /**
    Gets or sets the protocol method used for the request. This property is reserved for future use.

    */
    open override var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
        set(v) {
            return try! set_Method(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to preauthenticate a request. This property is reserved for future use.

    */
    open override var PreAuthenticate : Bool {
        get {
            return try! get_PreAuthenticate();
        }
        set(v) {
            return try! set_PreAuthenticate(value: v);
        }
    }
    /**
    Gets or sets the network proxy to use for this request. This property is reserved for future use.

    */
    open override var Proxy : Optional<dotnet.System.Net.IWebProxy> {
        get {
            return try! get_Proxy();
        }
        set(v) {
            return try! set_Proxy(value: v!);
        }
    }
    /**
    Gets the Uniform Resource Identifier (URI) of the request.

    */
    open override var RequestUri : dotnet.System.Uri {
        get {
            return try! get_RequestUri();
        }
    }
    /**
    Gets or sets the length of time until the request times out.

    */
    open override var Timeout : Swift.Int32 {
        get {
            return try! get_Timeout();
        }
        set(v) {
            return try! set_Timeout(value: v);
        }
    }
    /**
    Always throws a .

    */
    open override var UseDefaultCredentials : Bool {
        get {
            return try! get_UseDefaultCredentials();
        }
        set(v) {
            return try! set_UseDefaultCredentials(value: v);
        }
    }
} // FileWebRequest


// type: System.Net.FileWebResponse
    /**
    Provides a file system implementation of the  class.

    */
open class FileWebResponse
    :
    dotnet.System.Net.WebResponse
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_FileWebResponse_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:System.Net.FileWebResponse.Close
    /**
    Closes the response stream.

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Net_FileWebResponse_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IO.Stream GetResponseStream()
// docid: M:System.Net.FileWebResponse.GetResponseStream
    /**
    Returns the data stream from the file system resource.

    - Returns: A  for reading data from the file system resource.

    */
    open override func GetResponseStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebResponse_Stream__GetResponseStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength()
// docid: M:System.Net.FileWebResponse.get_ContentLength
    open override func get_ContentLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebResponse_i64__get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.FileWebResponse.get_ContentType
    open override func get_ContentType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebResponse_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.FileWebResponse.get_Headers
    open override func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebResponse_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_ResponseUri()
// docid: M:System.Net.FileWebResponse.get_ResponseUri
    open override func get_ResponseUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebResponse_Uri__get_ResponseUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsHeaders()
// docid: M:System.Net.FileWebResponse.get_SupportsHeaders
    open override func get_SupportsHeaders() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FileWebResponse_bool__get_SupportsHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (is_override_mutable_with_readonly ) [IsSpecialName] System.Int64 get_ContentLength()
// TODO COPE (is_override_mutable_with_readonly ) [IsSpecialName] System.String get_ContentType()
    /**
    Gets a collection of header name/value pairs associated with the response.

    */
    open override var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets the URI of the file system resource that provided the response.

    */
    open override var ResponseUri : dotnet.System.Uri {
        get {
            return try! get_ResponseUri();
        }
    }
    /**
    Gets a value that indicates whether the  property is supported by the  instance.

    */
    open override var SupportsHeaders : Bool {
        get {
            return try! get_SupportsHeaders();
        }
    }
} // FileWebResponse


// type: System.Net.FtpStatusCode
    /**
    Specifies the status codes returned for a File Transfer Protocol (FTP) operation.

    */
public struct FtpStatusCode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_FtpStatusCode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.FtpStatusCode Undefined
    /**
    Included for completeness, this value is never returned by servers.

    */
    public static var Undefined : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_Undefined());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode RestartMarker
    /**
    Specifies that the response contains a restart marker reply. The text of the description that accompanies this status contains the user data stream marker and the server marker.

    */
    public static var RestartMarker : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_RestartMarker());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ServiceTemporarilyNotAvailable
    /**
    Specifies that the service is not available now; try your request later.

    */
    public static var ServiceTemporarilyNotAvailable : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ServiceTemporarilyNotAvailable());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode DataAlreadyOpen
    /**
    Specifies that the data connection is already open and the requested transfer is starting.

    */
    public static var DataAlreadyOpen : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_DataAlreadyOpen());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode OpeningData
    /**
    Specifies that the server is opening the data connection.

    */
    public static var OpeningData : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_OpeningData());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode CommandOK
    /**
    Specifies that the command completed successfully.

    */
    public static var CommandOK : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_CommandOK());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode CommandExtraneous
    /**
    Specifies that the command is not implemented by the server because it is not needed.

    */
    public static var CommandExtraneous : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_CommandExtraneous());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode DirectoryStatus
    /**
    Specifies the status of a directory.

    */
    public static var DirectoryStatus : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_DirectoryStatus());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode FileStatus
    /**
    Specifies the status of a file.

    */
    public static var FileStatus : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_FileStatus());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode SystemType
    /**
    Specifies the system type name using the system names published in the Assigned Numbers document published by the Internet Assigned Numbers Authority.

    */
    public static var SystemType : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_SystemType());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode SendUserCommand
    /**
    Specifies that the server is ready for a user login operation.

    */
    public static var SendUserCommand : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_SendUserCommand());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ClosingControl
    /**
    Specifies that the server is closing the control connection.

    */
    public static var ClosingControl : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ClosingControl());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ClosingData
    /**
    Specifies that the server is closing the data connection and that the requested file action was successful.

    */
    public static var ClosingData : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ClosingData());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode EnteringPassive
    /**
    Specifies that the server is entering passive mode.

    */
    public static var EnteringPassive : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_EnteringPassive());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode LoggedInProceed
    /**
    Specifies that the user is logged in and can send commands.

    */
    public static var LoggedInProceed : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_LoggedInProceed());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ServerWantsSecureSession
    /**
    Specifies that the server accepts the authentication mechanism specified by the client, and the exchange of security data is complete.

    */
    public static var ServerWantsSecureSession : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ServerWantsSecureSession());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode FileActionOK
    /**
    Specifies that the requested file action completed successfully.

    */
    public static var FileActionOK : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_FileActionOK());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode PathnameCreated
    /**
    Specifies that the requested path name was created.

    */
    public static var PathnameCreated : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_PathnameCreated());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode SendPasswordCommand
    /**
    Specifies that the server expects a password to be supplied.

    */
    public static var SendPasswordCommand : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_SendPasswordCommand());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode NeedLoginAccount
    /**
    Specifies that the server requires a login account to be supplied.

    */
    public static var NeedLoginAccount : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_NeedLoginAccount());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode FileCommandPending
    /**
    Specifies that the requested file action requires additional information.

    */
    public static var FileCommandPending : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_FileCommandPending());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ServiceNotAvailable
    /**
    Specifies that the service is not available.

    */
    public static var ServiceNotAvailable : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ServiceNotAvailable());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode CantOpenData
    /**
    Specifies that the data connection cannot be opened.

    */
    public static var CantOpenData : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_CantOpenData());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ConnectionClosed
    /**
    Specifies that the connection has been closed.

    */
    public static var ConnectionClosed : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ConnectionClosed());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ActionNotTakenFileUnavailableOrBusy
    /**
    Specifies that the requested action cannot be performed on the specified file because the file is not available or is being used.

    */
    public static var ActionNotTakenFileUnavailableOrBusy : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ActionNotTakenFileUnavailableOrBusy());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ActionAbortedLocalProcessingError
    /**
    Specifies that an error occurred that prevented the request action from completing.

    */
    public static var ActionAbortedLocalProcessingError : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ActionAbortedLocalProcessingError());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ActionNotTakenInsufficientSpace
    /**
    Specifies that the requested action cannot be performed because there is not enough space on the server.

    */
    public static var ActionNotTakenInsufficientSpace : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ActionNotTakenInsufficientSpace());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode CommandSyntaxError
    /**
    Specifies that the command has a syntax error or is not a command recognized by the server.

    */
    public static var CommandSyntaxError : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_CommandSyntaxError());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ArgumentSyntaxError
    /**
    Specifies that one or more command arguments has a syntax error.

    */
    public static var ArgumentSyntaxError : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ArgumentSyntaxError());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode CommandNotImplemented
    /**
    Specifies that the command is not implemented by the FTP server.

    */
    public static var CommandNotImplemented : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_CommandNotImplemented());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode BadCommandSequence
    /**
    Specifies that the sequence of commands is not in the correct order.

    */
    public static var BadCommandSequence : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_BadCommandSequence());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode NotLoggedIn
    /**
    Specifies that login information must be sent to the server.

    */
    public static var NotLoggedIn : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_NotLoggedIn());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode AccountNeeded
    /**
    Specifies that a user account on the server is required.

    */
    public static var AccountNeeded : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_AccountNeeded());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ActionNotTakenFileUnavailable
    /**
    Specifies that the requested action cannot be performed on the specified file because the file is not available.

    */
    public static var ActionNotTakenFileUnavailable : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ActionNotTakenFileUnavailable());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ActionAbortedUnknownPageType
    /**
    Specifies that the requested action cannot be taken because the specified page type is unknown. Page types are described in RFC 959 Section 3.1.2.3.

    */
    public static var ActionAbortedUnknownPageType : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ActionAbortedUnknownPageType());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode FileActionAborted
    /**
    Specifies that the requested action cannot be performed.

    */
    public static var FileActionAborted : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_FileActionAborted());
            return __return;
        }
    }
    // static field: System.Net.FtpStatusCode ActionNotTakenFilenameNotAllowed
    /**
    Specifies that the requested action cannot be performed on the specified file.

    */
    public static var ActionNotTakenFilenameNotAllowed : dotnet.System.Net.FtpStatusCode {
        get {
        let __return = dotnet.System.Net.FtpStatusCode(val: System_Net_FtpStatusCode_get_ActionNotTakenFilenameNotAllowed());
            return __return;
        }
    }
} // FtpStatusCode


// type: System.Net.FtpWebRequest
    /**
    Implements a File Transfer Protocol (FTP) client.

    */
public final class FtpWebRequest
    :
    dotnet.System.Net.WebRequest
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_FtpWebRequest_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Abort()
// docid: M:System.Net.FtpWebRequest.Abort
    /**
    Terminates an asynchronous FTP operation.

    */
    public override func Abort() throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginGetRequestStream(System.AsyncCallback, System.Object)
// docid: M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
    /**
    Begins asynchronously opening a request's content stream for writing.

    - Parameter callback: An  delegate that references the method to invoke when the operation is complete.
    - Parameter state: A user-defined object that contains information about the operation. This object is passed to the  delegate when the operation completes.
    - Returns: An  instance that indicates the status of the operation.

    */
    public override func BeginGetRequestStream(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_IAsyncResult__BeginGetRequestStream_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public override func BeginGetRequestStream(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetRequestStream(callback: del_callback, state: state);
    }
    // System.IAsyncResult BeginGetResponse(System.AsyncCallback, System.Object)
// docid: M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
    /**
    Begins sending a request and receiving a response from an FTP server asynchronously.

    - Parameter callback: An  delegate that references the method to invoke when the operation is complete.
    - Parameter state: A user-defined object that contains information about the operation. This object is passed to the  delegate when the operation completes.
    - Returns: An  instance that indicates the status of the operation.

    */
    public override func BeginGetResponse(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_IAsyncResult__BeginGetResponse_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    public override func BeginGetResponse(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetResponse(callback: del_callback, state: state);
    }
    // System.IO.Stream EndGetRequestStream(System.IAsyncResult)
// docid: M:System.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)
    /**
    Ends a pending asynchronous operation started with .

    - Parameter asyncResult: The  object that was returned when the operation started.
    - Returns: A writable  instance associated with this instance.

    */
    public override func EndGetRequestStream(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_Stream__EndGetRequestStream_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Net.WebResponse EndGetResponse(System.IAsyncResult)
// docid: M:System.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)
    /**
    Ends a pending asynchronous operation started with .

    - Parameter asyncResult: The  that was returned when the operation started.
    - Returns: A  reference that contains an  instance. This object contains the FTP server's response to the request.

    */
    public override func EndGetResponse(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.WebResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_WebResponse__EndGetResponse_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebResponse(hndl : __return);
        }
    }
    // System.IO.Stream GetRequestStream()
// docid: M:System.Net.FtpWebRequest.GetRequestStream
    /**
    Retrieves the stream used to upload data to an FTP server.

    - Returns: A writable  instance used to store data to be sent to the server by the current request.

    */
    public override func GetRequestStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_Stream__GetRequestStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Net.WebResponse GetResponse()
// docid: M:System.Net.FtpWebRequest.GetResponse
    /**
    Returns the FTP server response.

    - Returns: A  reference that contains an  instance. This object contains the FTP server's response to the request.

    */
    public override func GetResponse() throws -> dotnet.System.Net.WebResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_WebResponse__GetResponse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebResponse(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
// docid: M:System.Net.FtpWebRequest.get_ClientCertificates
    public func get_ClientCertificates() throws -> dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_X509CertificateCollection__get_ClientCertificates_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)
// docid: M:System.Net.FtpWebRequest.set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)
    public func set_ClientCertificates(value : dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_ClientCertificates_0__1__X509CertificateCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ConnectionGroupName()
// docid: M:System.Net.FtpWebRequest.get_ConnectionGroupName
    public override func get_ConnectionGroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_String__get_ConnectionGroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ConnectionGroupName(System.String)
// docid: M:System.Net.FtpWebRequest.set_ConnectionGroupName(System.String)
    public override func set_ConnectionGroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_ConnectionGroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength()
// docid: M:System.Net.FtpWebRequest.get_ContentLength
    public override func get_ContentLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_i64__get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Int64)
// docid: M:System.Net.FtpWebRequest.set_ContentLength(System.Int64)
    public override func set_ContentLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_ContentLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_ContentOffset()
// docid: M:System.Net.FtpWebRequest.get_ContentOffset
    public func get_ContentOffset() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_i64__get_ContentOffset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ContentOffset(System.Int64)
// docid: M:System.Net.FtpWebRequest.set_ContentOffset(System.Int64)
    public func set_ContentOffset(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_ContentOffset_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.FtpWebRequest.get_ContentType
    public override func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:System.Net.FtpWebRequest.set_ContentType(System.String)
    public override func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_Credentials()
// docid: M:System.Net.FtpWebRequest.get_Credentials
    public override func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_ICredentials__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Net.FtpWebRequest.set_Credentials(System.Net.ICredentials)
    public override func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Cache.RequestCachePolicy get_DefaultCachePolicy()
// docid: M:System.Net.FtpWebRequest.get_DefaultCachePolicy
    public class override func get_DefaultCachePolicy() throws -> Optional<dotnet.System.Net.Cache.RequestCachePolicy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_RequestCachePolicy__get_DefaultCachePolicy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Cache.RequestCachePolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy)
// docid: M:System.Net.FtpWebRequest.set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy)
    public class override func set_DefaultCachePolicy(value : Optional<dotnet.System.Net.Cache.RequestCachePolicy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_DefaultCachePolicy_0__1__RequestCachePolicy(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnableSsl()
// docid: M:System.Net.FtpWebRequest.get_EnableSsl
    public func get_EnableSsl() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_bool__get_EnableSsl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableSsl(bool)
// docid: M:System.Net.FtpWebRequest.set_EnableSsl(System.Boolean)
    public func set_EnableSsl(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_EnableSsl_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.FtpWebRequest.get_Headers
    public override func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(System.Net.WebHeaderCollection)
// docid: M:System.Net.FtpWebRequest.set_Headers(System.Net.WebHeaderCollection)
    public override func set_Headers(value : dotnet.System.Net.WebHeaderCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_Headers_0__1__WebHeaderCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_KeepAlive()
// docid: M:System.Net.FtpWebRequest.get_KeepAlive
    public func get_KeepAlive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_bool__get_KeepAlive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_KeepAlive(bool)
// docid: M:System.Net.FtpWebRequest.set_KeepAlive(System.Boolean)
    public func set_KeepAlive(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_KeepAlive_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:System.Net.FtpWebRequest.get_Method
    public override func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Method(System.String)
// docid: M:System.Net.FtpWebRequest.set_Method(System.String)
    public override func set_Method(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_Method_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreAuthenticate()
// docid: M:System.Net.FtpWebRequest.get_PreAuthenticate
    public override func get_PreAuthenticate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_bool__get_PreAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreAuthenticate(bool)
// docid: M:System.Net.FtpWebRequest.set_PreAuthenticate(System.Boolean)
    public override func set_PreAuthenticate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_PreAuthenticate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_Proxy()
// docid: M:System.Net.FtpWebRequest.get_Proxy
    public override func get_Proxy() throws -> Optional<dotnet.System.Net.IWebProxy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_IWebProxy__get_Proxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IWebProxy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Proxy(System.Net.IWebProxy)
// docid: M:System.Net.FtpWebRequest.set_Proxy(System.Net.IWebProxy)
    public override func set_Proxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_Proxy_0__1__IWebProxy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ReadWriteTimeout()
// docid: M:System.Net.FtpWebRequest.get_ReadWriteTimeout
    public func get_ReadWriteTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_i32__get_ReadWriteTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ReadWriteTimeout(System.Int32)
// docid: M:System.Net.FtpWebRequest.set_ReadWriteTimeout(System.Int32)
    public func set_ReadWriteTimeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_ReadWriteTimeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_RenameTo()
// docid: M:System.Net.FtpWebRequest.get_RenameTo
    public func get_RenameTo() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_String__get_RenameTo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RenameTo(System.String)
// docid: M:System.Net.FtpWebRequest.set_RenameTo(System.String)
    public func set_RenameTo(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_RenameTo_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_RequestUri()
// docid: M:System.Net.FtpWebRequest.get_RequestUri
    public override func get_RequestUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_Uri__get_RequestUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.ServicePoint get_ServicePoint()
// docid: M:System.Net.FtpWebRequest.get_ServicePoint
    public func get_ServicePoint() throws -> dotnet.System.Net.ServicePoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_ServicePoint__get_ServicePoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.ServicePoint(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Timeout()
// docid: M:System.Net.FtpWebRequest.get_Timeout
    public override func get_Timeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_i32__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Timeout(System.Int32)
// docid: M:System.Net.FtpWebRequest.set_Timeout(System.Int32)
    public override func set_Timeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_Timeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseBinary()
// docid: M:System.Net.FtpWebRequest.get_UseBinary
    public func get_UseBinary() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_bool__get_UseBinary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseBinary(bool)
// docid: M:System.Net.FtpWebRequest.set_UseBinary(System.Boolean)
    public func set_UseBinary(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_UseBinary_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseDefaultCredentials()
// docid: M:System.Net.FtpWebRequest.get_UseDefaultCredentials
    public override func get_UseDefaultCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_bool__get_UseDefaultCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseDefaultCredentials(bool)
// docid: M:System.Net.FtpWebRequest.set_UseDefaultCredentials(System.Boolean)
    public override func set_UseDefaultCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_UseDefaultCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UsePassive()
// docid: M:System.Net.FtpWebRequest.get_UsePassive
    public func get_UsePassive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebRequest_bool__get_UsePassive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UsePassive(bool)
// docid: M:System.Net.FtpWebRequest.set_UsePassive(System.Boolean)
    public func set_UsePassive(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebRequest_void__set_UsePassive_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the certificates used for establishing an encrypted connection to the FTP server.

    */
    public var ClientCertificates : dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection {
        get {
            return try! get_ClientCertificates();
        }
        set(v) {
            return try! set_ClientCertificates(value: v);
        }
    }
    /**
    Gets or sets the name of the connection group that contains the service point used to send the current request.

    */
    public override var ConnectionGroupName : Optional<dotnet.System.String> {
        get {
            return try! get_ConnectionGroupName();
        }
        set(v) {
            return try! set_ConnectionGroupName(value: v!);
        }
    }
    /**
    Gets or sets a value that is ignored by the  class.

    */
    public override var ContentLength : Swift.Int64 {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v);
        }
    }
    /**
    Gets or sets a byte offset into the file being downloaded by this request.

    */
    public var ContentOffset : Swift.Int64 {
        get {
            return try! get_ContentOffset();
        }
        set(v) {
            return try! set_ContentOffset(value: v);
        }
    }
    /**
    Always throws a .

    */
    public override var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    Gets or sets the credentials used to communicate with the FTP server.

    */
    public override var Credentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
// TODO COPE (static prop override) [IsSpecialName] System.Net.Cache.RequestCachePolicy get_DefaultCachePolicy()
    /**
    Gets or sets a  that specifies that an SSL connection should be used.

    */
    public var EnableSsl : Bool {
        get {
            return try! get_EnableSsl();
        }
        set(v) {
            return try! set_EnableSsl(value: v);
        }
    }
    /**
    Gets an empty  object.

    */
    public override var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v);
        }
    }
    /**
    Gets or sets a  value that specifies whether the control connection to the FTP server is closed after the request completes.

    */
    public var KeepAlive : Bool {
        get {
            return try! get_KeepAlive();
        }
        set(v) {
            return try! set_KeepAlive(value: v);
        }
    }
    /**
    Gets or sets the command to send to the FTP server.

    */
    public override var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
        set(v) {
            return try! set_Method(value: v);
        }
    }
    /**
    Always throws a .

    */
    public override var PreAuthenticate : Bool {
        get {
            return try! get_PreAuthenticate();
        }
        set(v) {
            return try! set_PreAuthenticate(value: v);
        }
    }
    /**
    Gets or sets the proxy used to communicate with the FTP server.

    */
    public override var Proxy : Optional<dotnet.System.Net.IWebProxy> {
        get {
            return try! get_Proxy();
        }
        set(v) {
            return try! set_Proxy(value: v!);
        }
    }
    /**
    Gets or sets a time-out when reading from or writing to a stream.

    */
    public var ReadWriteTimeout : Swift.Int32 {
        get {
            return try! get_ReadWriteTimeout();
        }
        set(v) {
            return try! set_ReadWriteTimeout(value: v);
        }
    }
    /**
    Gets or sets the new name of a file being renamed.

    */
    public var RenameTo : Optional<dotnet.System.String> {
        get {
            return try! get_RenameTo();
        }
        set(v) {
            return try! set_RenameTo(value: v!);
        }
    }
    /**
    Gets the URI requested by this instance.

    */
    public override var RequestUri : dotnet.System.Uri {
        get {
            return try! get_RequestUri();
        }
    }
    /**
    Gets the  object used to connect to the FTP server.

    */
    public var ServicePoint : dotnet.System.Net.ServicePoint {
        get {
            return try! get_ServicePoint();
        }
    }
    /**
    Gets or sets the number of milliseconds to wait for a request.

    */
    public override var Timeout : Swift.Int32 {
        get {
            return try! get_Timeout();
        }
        set(v) {
            return try! set_Timeout(value: v);
        }
    }
    /**
    Gets or sets a  value that specifies the data type for file transfers.

    */
    public var UseBinary : Bool {
        get {
            return try! get_UseBinary();
        }
        set(v) {
            return try! set_UseBinary(value: v);
        }
    }
    /**
    Always throws a .

    */
    public override var UseDefaultCredentials : Bool {
        get {
            return try! get_UseDefaultCredentials();
        }
        set(v) {
            return try! set_UseDefaultCredentials(value: v);
        }
    }
    /**
    Gets or sets the behavior of a client application's data transfer process.

    */
    public var UsePassive : Bool {
        get {
            return try! get_UsePassive();
        }
        set(v) {
            return try! set_UsePassive(value: v);
        }
    }
} // FtpWebRequest


// type: System.Net.FtpWebResponse
    /**
    Encapsulates a File Transfer Protocol (FTP) server's response to a request.

    */
open class FtpWebResponse
    :
    dotnet.System.Net.WebResponse
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_FtpWebResponse_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:System.Net.FtpWebResponse.Close
    /**
    Frees the resources held by the response.

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Net_FtpWebResponse_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IO.Stream GetResponseStream()
// docid: M:System.Net.FtpWebResponse.GetResponseStream
    /**
    Retrieves the stream that contains response data sent from an FTP server.

    - Returns: A readable  instance that contains data returned with the response; otherwise,  if no response data was returned by the server.

    */
    open override func GetResponseStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_Stream__GetResponseStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_BannerMessage()
// docid: M:System.Net.FtpWebResponse.get_BannerMessage
    open func get_BannerMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_String__get_BannerMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength()
// docid: M:System.Net.FtpWebResponse.get_ContentLength
    open override func get_ContentLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_i64__get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ExitMessage()
// docid: M:System.Net.FtpWebResponse.get_ExitMessage
    open func get_ExitMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_String__get_ExitMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.FtpWebResponse.get_Headers
    open override func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTime get_LastModified()
// docid: M:System.Net.FtpWebResponse.get_LastModified
    open func get_LastModified() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_DateTime__get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_ResponseUri()
// docid: M:System.Net.FtpWebResponse.get_ResponseUri
    open override func get_ResponseUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_Uri__get_ResponseUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.FtpStatusCode get_StatusCode()
// docid: M:System.Net.FtpWebResponse.get_StatusCode
    open func get_StatusCode() throws -> dotnet.System.Net.FtpStatusCode {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_FtpStatusCode__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.FtpStatusCode(val: __return);
        }
    }
    // [IsSpecialName] System.String get_StatusDescription()
// docid: M:System.Net.FtpWebResponse.get_StatusDescription
    open func get_StatusDescription() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_String__get_StatusDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_SupportsHeaders()
// docid: M:System.Net.FtpWebResponse.get_SupportsHeaders
    open override func get_SupportsHeaders() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_bool__get_SupportsHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_WelcomeMessage()
// docid: M:System.Net.FtpWebResponse.get_WelcomeMessage
    open func get_WelcomeMessage() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_FtpWebResponse_String__get_WelcomeMessage_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the message sent by the FTP server when a connection is established prior to logon.

    */
    open var BannerMessage : Optional<dotnet.System.String> {
        get {
            return try! get_BannerMessage();
        }
    }
// TODO COPE (is_override_mutable_with_readonly ) [IsSpecialName] System.Int64 get_ContentLength()
    /**
    Gets the message sent by the server when the FTP session is ending.

    */
    open var ExitMessage : Optional<dotnet.System.String> {
        get {
            return try! get_ExitMessage();
        }
    }
    /**
    Gets an empty  object.

    */
    open override var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets the date and time that a file on an FTP server was last modified.

    */
    open var LastModified : dotnet.System.DateTime {
        get {
            return try! get_LastModified();
        }
    }
    /**
    Gets the URI that sent the response to the request.

    */
    open override var ResponseUri : dotnet.System.Uri {
        get {
            return try! get_ResponseUri();
        }
    }
    /**
    Gets the most recent status code sent from the FTP server.

    */
    open var StatusCode : dotnet.System.Net.FtpStatusCode {
        get {
            return try! get_StatusCode();
        }
    }
    /**
    Gets text that describes a status code sent from the FTP server.

    */
    open var StatusDescription : Optional<dotnet.System.String> {
        get {
            return try! get_StatusDescription();
        }
    }
    /**
    Gets a value that indicates whether the  property is supported by the  instance.

    */
    open override var SupportsHeaders : Bool {
        get {
            return try! get_SupportsHeaders();
        }
    }
    /**
    Gets the message sent by the FTP server when authentication is complete.

    */
    open var WelcomeMessage : Optional<dotnet.System.String> {
        get {
            return try! get_WelcomeMessage();
        }
    }
} // FtpWebResponse


// type: System.Net.GlobalProxySelection
    /**
    Contains a global default proxy instance for all HTTP requests.

    */
open class GlobalProxySelection
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_GlobalProxySelection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.GlobalProxySelection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_GlobalProxySelection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.IWebProxy GetEmptyWebProxy()
// docid: M:System.Net.GlobalProxySelection.GetEmptyWebProxy
    /**
    Returns an empty proxy instance.

    - Returns: An  that contains no information.

    */
    open class func GetEmptyWebProxy() throws -> dotnet.System.Net.IWebProxy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_GlobalProxySelection_IWebProxy__GetEmptyWebProxy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IWebProxy(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_Select()
// docid: M:System.Net.GlobalProxySelection.get_Select
    open class func get_Select() throws -> dotnet.System.Net.IWebProxy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_GlobalProxySelection_IWebProxy__get_Select_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IWebProxy(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Select(System.Net.IWebProxy)
// docid: M:System.Net.GlobalProxySelection.set_Select(System.Net.IWebProxy)
    open class func set_Select(value : dotnet.System.Net.IWebProxy) throws {
        var __thrown : NullableHandle = nil;
        System_Net_GlobalProxySelection_void__set_Select_0__1__IWebProxy(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the global HTTP proxy.

    */
    public static var Select : dotnet.System.Net.IWebProxy {
        get {
            return try! get_Select();
        }
        set(v) {
            return try! set_Select(value: v);
        }
    }
} // GlobalProxySelection


// type: System.Net.HttpContinueDelegate
    /**
    Represents the method that notifies callers when a continue response is received by the client.

    */
public final class HttpContinueDelegate
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpContinueDelegate_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Int32, System.Net.WebHeaderCollection)
// docid: M:System.Net.HttpContinueDelegate.Invoke(System.Int32,System.Net.WebHeaderCollection)
    public func Invoke(StatusCode : Swift.Int32, httpHeaders : dotnet.System.Net.WebHeaderCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpContinueDelegate_void__Invoke_0__2__i32_WebHeaderCollection(&__thrown, self.get_handle(), StatusCode, httpHeaders.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Int32, System.Net.WebHeaderCollection, System.AsyncCallback, System.Object)
// docid: M:System.Net.HttpContinueDelegate.BeginInvoke(System.Int32,System.Net.WebHeaderCollection,System.AsyncCallback,System.Object)
    public func BeginInvoke(StatusCode : Swift.Int32, httpHeaders : dotnet.System.Net.WebHeaderCollection, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpContinueDelegate_IAsyncResult__BeginInvoke_0__4__i32_WebHeaderCollection_AsyncCallback_Object(&__thrown, self.get_handle(), StatusCode, httpHeaders.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.HttpContinueDelegate.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpContinueDelegate_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Swift.Int32, dotnet.System.Net.WebHeaderCollection) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, Swift.Int32, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, StatusCode : Swift.Int32, httpHeaders : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(StatusCode, dotnet.System.Net.WebHeaderCollection(hndl: httpHeaders));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, StatusCode : Swift.Int32, httpHeaders : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, Swift.Int32, NonnullHandle) -> Void;
            f(thrown, StatusCode, httpHeaders);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_HttpContinueDelegate_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Int32, System.Net.WebHeaderCollection)
// docid: M:System.Net.HttpContinueDelegate.Invoke(System.Int32,System.Net.WebHeaderCollection)
    public func callAsFunction(StatusCode : Swift.Int32, httpHeaders : dotnet.System.Net.WebHeaderCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpContinueDelegate_void__Invoke_0__2__i32_WebHeaderCollection(&__thrown, self.get_handle(), StatusCode, httpHeaders.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HttpContinueDelegate


// type: System.Net.HttpWebRequest
    /**
    Provides an HTTP-specific implementation of the  class.

    */
open class HttpWebRequest
    :
    dotnet.System.Net.WebRequest
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpWebRequest_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Abort()
// docid: M:System.Net.HttpWebRequest.Abort
    /**
    Cancels a request to an Internet resource.

    */
    open override func Abort() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Int32)
// docid: M:System.Net.HttpWebRequest.AddRange(System.Int32)
    /**
    Adds a byte range header to a request for a specific range from the beginning or end of the requested data.

    - Parameter range: The starting or ending point of the range.
    */
    open func AddRange(range : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__AddRange_0__1__i32(&__thrown, self.get_handle(), range);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Int32, System.Int32)
// docid: M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)
    /**
    Adds a byte range header to the request for a specified range.

    - Parameter from: The position at which to start sending data.
    - Parameter to: The position at which to stop sending data.
    */
    open func AddRange(from : Swift.Int32, to : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__AddRange_0__2__i32_i32(&__thrown, self.get_handle(), from, to);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Int64)
// docid: M:System.Net.HttpWebRequest.AddRange(System.Int64)
    /**
    Adds a byte range header to a request for a specific range from the beginning or end of the requested data.

    - Parameter range: The starting or ending point of the range.
    */
    open func AddRange(range : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__AddRange_0__1__i64(&__thrown, self.get_handle(), range);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Int64, System.Int64)
// docid: M:System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)
    /**
    Adds a byte range header to the request for a specified range.

    - Parameter from: The position at which to start sending data.
    - Parameter to: The position at which to stop sending data.
    */
    open func AddRange(from : Swift.Int64, to : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__AddRange_0__2__i64_i64(&__thrown, self.get_handle(), from, to);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.String, System.Int32)
// docid: M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)
    /**
    Adds a Range header to a request for a specific range from the beginning or end of the requested data.

    - Parameter rangeSpecifier: The description of the range.
    - Parameter range: The starting or ending point of the range.
    */
    open func AddRange(rangeSpecifier : dotnet.System.String, range : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__AddRange_0__2__String_i32(&__thrown, self.get_handle(), rangeSpecifier.get_handle(), range);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.String, System.Int32, System.Int32)
// docid: M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)
    /**
    Adds a range header to a request for a specified range.

    - Parameter rangeSpecifier: The description of the range.
    - Parameter from: The position at which to start sending data.
    - Parameter to: The position at which to stop sending data.
    */
    open func AddRange(rangeSpecifier : dotnet.System.String, from : Swift.Int32, to : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__AddRange_0__3__String_i32_i32(&__thrown, self.get_handle(), rangeSpecifier.get_handle(), from, to);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.String, System.Int64)
// docid: M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64)
    /**
    Adds a Range header to a request for a specific range from the beginning or end of the requested data.

    - Parameter rangeSpecifier: The description of the range.
    - Parameter range: The starting or ending point of the range.
    */
    open func AddRange(rangeSpecifier : dotnet.System.String, range : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__AddRange_0__2__String_i64(&__thrown, self.get_handle(), rangeSpecifier.get_handle(), range);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.String, System.Int64, System.Int64)
// docid: M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)
    /**
    Adds a range header to a request for a specified range.

    - Parameter rangeSpecifier: The description of the range.
    - Parameter from: The position at which to start sending data.
    - Parameter to: The position at which to stop sending data.
    */
    open func AddRange(rangeSpecifier : dotnet.System.String, from : Swift.Int64, to : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__AddRange_0__3__String_i64_i64(&__thrown, self.get_handle(), rangeSpecifier.get_handle(), from, to);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginGetRequestStream(System.AsyncCallback, System.Object)
// docid: M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
    /**
    Begins an asynchronous request for a  object to use to write data.

    - Parameter callback: The  delegate.
    - Parameter state: The state object for this request.
    - Returns: An  that references the asynchronous request.

    */
    open override func BeginGetRequestStream(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_IAsyncResult__BeginGetRequestStream_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    open override func BeginGetRequestStream(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetRequestStream(callback: del_callback, state: state);
    }
    // System.IAsyncResult BeginGetResponse(System.AsyncCallback, System.Object)
// docid: M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
    /**
    Begins an asynchronous request to an Internet resource.

    - Parameter callback: The  delegate
    - Parameter state: The state object for this request.
    - Returns: An  that references the asynchronous request for a response.

    */
    open override func BeginGetResponse(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_IAsyncResult__BeginGetResponse_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    open override func BeginGetResponse(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetResponse(callback: del_callback, state: state);
    }
    // System.IO.Stream EndGetRequestStream(System.IAsyncResult)
// docid: M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)
    /**
    Ends an asynchronous request for a  object to use to write data.

    - Parameter asyncResult: The pending request for a stream.
    - Returns: A  to use to write request data.

    */
    open override func EndGetRequestStream(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_Stream__EndGetRequestStream_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream EndGetRequestStream(System.IAsyncResult, ref System.Net.TransportContext)
// docid: M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)
    /**
    Ends an asynchronous request for a  object to use to write data and outputs the  associated with the stream.

    - Parameter asyncResult: The pending request for a stream.
    - Parameter context: The  for the .
    - Returns: A  to use to write request data.

    */
    open func EndGetRequestStream(asyncResult : dotnet.System.IAsyncResult, context : inout dotnet.System.Net.TransportContext) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
            var _tmp_out_context = context.get_handle();
        let __return = System_Net_HttpWebRequest_Stream__EndGetRequestStream_0__2__IAsyncResult_outTransportContext(&__thrown, self.get_handle(), asyncResult.get_handle(), &_tmp_out_context);
        let _tmp2_context = dotnet.System.Net.TransportContext(hndl: _tmp_out_context);
            context = _tmp2_context;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Net.WebResponse EndGetResponse(System.IAsyncResult)
// docid: M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)
    /**
    Ends an asynchronous request to an Internet resource.

    - Parameter asyncResult: The pending request for a response.
    - Returns: A  that contains the response from the Internet resource.

    */
    open override func EndGetResponse(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.WebResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_WebResponse__EndGetResponse_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebResponse(hndl : __return);
        }
    }
    // System.IO.Stream GetRequestStream()
// docid: M:System.Net.HttpWebRequest.GetRequestStream
    /**
    Gets a  object to use to write request data.

    - Returns: A  to use to write request data.

    */
    open override func GetRequestStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_Stream__GetRequestStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.IO.Stream GetRequestStream(ref System.Net.TransportContext)
// docid: M:System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)
    /**
    Gets a  object to use to write request data and outputs the  associated with the stream.

    - Parameter context: The  for the .
    - Returns: A  to use to write request data.

    */
    open func GetRequestStream(context : inout dotnet.System.Net.TransportContext) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
            var _tmp_out_context = context.get_handle();
        let __return = System_Net_HttpWebRequest_Stream__GetRequestStream_0__1__outTransportContext(&__thrown, self.get_handle(), &_tmp_out_context);
        let _tmp2_context = dotnet.System.Net.TransportContext(hndl: _tmp_out_context);
            context = _tmp2_context;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Net.WebResponse GetResponse()
// docid: M:System.Net.HttpWebRequest.GetResponse
    /**
    Returns a response from an Internet resource.

    - Returns: A  that contains the response from the Internet resource.

    */
    open override func GetResponse() throws -> dotnet.System.Net.WebResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_WebResponse__GetResponse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebResponse(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Accept()
// docid: M:System.Net.HttpWebRequest.get_Accept
    open func get_Accept() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_Accept_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Accept(System.String)
// docid: M:System.Net.HttpWebRequest.set_Accept(System.String)
    open func set_Accept(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Accept_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_Address()
// docid: M:System.Net.HttpWebRequest.get_Address
    open func get_Address() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_Uri__get_Address_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_AllowAutoRedirect()
// docid: M:System.Net.HttpWebRequest.get_AllowAutoRedirect
    open func get_AllowAutoRedirect() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_AllowAutoRedirect_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowAutoRedirect(bool)
// docid: M:System.Net.HttpWebRequest.set_AllowAutoRedirect(System.Boolean)
    open func set_AllowAutoRedirect(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_AllowAutoRedirect_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowReadStreamBuffering()
// docid: M:System.Net.HttpWebRequest.get_AllowReadStreamBuffering
    open func get_AllowReadStreamBuffering() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_AllowReadStreamBuffering_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowReadStreamBuffering(bool)
// docid: M:System.Net.HttpWebRequest.set_AllowReadStreamBuffering(System.Boolean)
    open func set_AllowReadStreamBuffering(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_AllowReadStreamBuffering_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowWriteStreamBuffering()
// docid: M:System.Net.HttpWebRequest.get_AllowWriteStreamBuffering
    open func get_AllowWriteStreamBuffering() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_AllowWriteStreamBuffering_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowWriteStreamBuffering(bool)
// docid: M:System.Net.HttpWebRequest.set_AllowWriteStreamBuffering(System.Boolean)
    open func set_AllowWriteStreamBuffering(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_AllowWriteStreamBuffering_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.DecompressionMethods get_AutomaticDecompression()
// docid: M:System.Net.HttpWebRequest.get_AutomaticDecompression
    open func get_AutomaticDecompression() throws -> dotnet.System.Net.DecompressionMethods {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_DecompressionMethods__get_AutomaticDecompression_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.DecompressionMethods(val: __return);
        }
    }
    // [IsSpecialName] void set_AutomaticDecompression(System.Net.DecompressionMethods)
// docid: M:System.Net.HttpWebRequest.set_AutomaticDecompression(System.Net.DecompressionMethods)
    open func set_AutomaticDecompression(value : dotnet.System.Net.DecompressionMethods) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_AutomaticDecompression_0__1__DecompressionMethods(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
// docid: M:System.Net.HttpWebRequest.get_ClientCertificates
    open func get_ClientCertificates() throws -> dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_X509CertificateCollection__get_ClientCertificates_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)
// docid: M:System.Net.HttpWebRequest.set_ClientCertificates(System.Security.Cryptography.X509Certificates.X509CertificateCollection)
    open func set_ClientCertificates(value : dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ClientCertificates_0__1__X509CertificateCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Connection()
// docid: M:System.Net.HttpWebRequest.get_Connection
    open func get_Connection() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_Connection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Connection(System.String)
// docid: M:System.Net.HttpWebRequest.set_Connection(System.String)
    open func set_Connection(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Connection_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ConnectionGroupName()
// docid: M:System.Net.HttpWebRequest.get_ConnectionGroupName
    open override func get_ConnectionGroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_ConnectionGroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ConnectionGroupName(System.String)
// docid: M:System.Net.HttpWebRequest.set_ConnectionGroupName(System.String)
    open override func set_ConnectionGroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ConnectionGroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength()
// docid: M:System.Net.HttpWebRequest.get_ContentLength
    open override func get_ContentLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_i64__get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Int64)
// docid: M:System.Net.HttpWebRequest.set_ContentLength(System.Int64)
    open override func set_ContentLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ContentLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.HttpWebRequest.get_ContentType
    open override func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:System.Net.HttpWebRequest.set_ContentType(System.String)
    open override func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.HttpContinueDelegate get_ContinueDelegate()
// docid: M:System.Net.HttpWebRequest.get_ContinueDelegate
    open func get_ContinueDelegate() throws -> Optional<dotnet.System.Net.HttpContinueDelegate> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_HttpContinueDelegate__get_ContinueDelegate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.HttpContinueDelegate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContinueDelegate(System.Net.HttpContinueDelegate)
// docid: M:System.Net.HttpWebRequest.set_ContinueDelegate(System.Net.HttpContinueDelegate)
    open func set_ContinueDelegate(value : Optional<dotnet.System.Net.HttpContinueDelegate>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ContinueDelegate_0__1__HttpContinueDelegate(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ContinueDelegate(value : @escaping (Swift.Int32, dotnet.System.Net.WebHeaderCollection) throws -> Void) throws {
        let del_value = try dotnet.System.Net.HttpContinueDelegate(value);
        return try set_ContinueDelegate(value: del_value);
    }
    // [IsSpecialName] System.Int32 get_ContinueTimeout()
// docid: M:System.Net.HttpWebRequest.get_ContinueTimeout
    open func get_ContinueTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_i32__get_ContinueTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ContinueTimeout(System.Int32)
// docid: M:System.Net.HttpWebRequest.set_ContinueTimeout(System.Int32)
    open func set_ContinueTimeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ContinueTimeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.CookieContainer get_CookieContainer()
// docid: M:System.Net.HttpWebRequest.get_CookieContainer
    open func get_CookieContainer() throws -> Optional<dotnet.System.Net.CookieContainer> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_CookieContainer__get_CookieContainer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.CookieContainer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CookieContainer(System.Net.CookieContainer)
// docid: M:System.Net.HttpWebRequest.set_CookieContainer(System.Net.CookieContainer)
    open func set_CookieContainer(value : Optional<dotnet.System.Net.CookieContainer>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_CookieContainer_0__1__CookieContainer(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_Credentials()
// docid: M:System.Net.HttpWebRequest.get_Credentials
    open override func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_ICredentials__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Net.HttpWebRequest.set_Credentials(System.Net.ICredentials)
    open override func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.DateTime get_Date()
// docid: M:System.Net.HttpWebRequest.get_Date
    open func get_Date() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_DateTime__get_Date_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Date(System.DateTime)
// docid: M:System.Net.HttpWebRequest.set_Date(System.DateTime)
    open func set_Date(value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Date_0__1__DateTime(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Cache.RequestCachePolicy get_DefaultCachePolicy()
// docid: M:System.Net.HttpWebRequest.get_DefaultCachePolicy
    open class override func get_DefaultCachePolicy() throws -> Optional<dotnet.System.Net.Cache.RequestCachePolicy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_RequestCachePolicy__get_DefaultCachePolicy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Cache.RequestCachePolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy)
// docid: M:System.Net.HttpWebRequest.set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy)
    open class override func set_DefaultCachePolicy(value : Optional<dotnet.System.Net.Cache.RequestCachePolicy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_DefaultCachePolicy_0__1__RequestCachePolicy(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_DefaultMaximumErrorResponseLength()
// docid: M:System.Net.HttpWebRequest.get_DefaultMaximumErrorResponseLength
    open class func get_DefaultMaximumErrorResponseLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_i32__get_DefaultMaximumErrorResponseLength_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DefaultMaximumErrorResponseLength(System.Int32)
// docid: M:System.Net.HttpWebRequest.set_DefaultMaximumErrorResponseLength(System.Int32)
    open class func set_DefaultMaximumErrorResponseLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_DefaultMaximumErrorResponseLength_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_DefaultMaximumResponseHeadersLength()
// docid: M:System.Net.HttpWebRequest.get_DefaultMaximumResponseHeadersLength
    open class func get_DefaultMaximumResponseHeadersLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_i32__get_DefaultMaximumResponseHeadersLength_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DefaultMaximumResponseHeadersLength(System.Int32)
// docid: M:System.Net.HttpWebRequest.set_DefaultMaximumResponseHeadersLength(System.Int32)
    open class func set_DefaultMaximumResponseHeadersLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_DefaultMaximumResponseHeadersLength_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Expect()
// docid: M:System.Net.HttpWebRequest.get_Expect
    open func get_Expect() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_Expect_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Expect(System.String)
// docid: M:System.Net.HttpWebRequest.set_Expect(System.String)
    open func set_Expect(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Expect_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HaveResponse()
// docid: M:System.Net.HttpWebRequest.get_HaveResponse
    open func get_HaveResponse() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_HaveResponse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.HttpWebRequest.get_Headers
    open override func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(System.Net.WebHeaderCollection)
// docid: M:System.Net.HttpWebRequest.set_Headers(System.Net.WebHeaderCollection)
    open override func set_Headers(value : dotnet.System.Net.WebHeaderCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Headers_0__1__WebHeaderCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Host()
// docid: M:System.Net.HttpWebRequest.get_Host
    open func get_Host() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_Host_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Host(System.String)
// docid: M:System.Net.HttpWebRequest.set_Host(System.String)
    open func set_Host(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Host_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.DateTime get_IfModifiedSince()
// docid: M:System.Net.HttpWebRequest.get_IfModifiedSince
    open func get_IfModifiedSince() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_DateTime__get_IfModifiedSince_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] void set_IfModifiedSince(System.DateTime)
// docid: M:System.Net.HttpWebRequest.set_IfModifiedSince(System.DateTime)
    open func set_IfModifiedSince(value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_IfModifiedSince_0__1__DateTime(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_KeepAlive()
// docid: M:System.Net.HttpWebRequest.get_KeepAlive
    open func get_KeepAlive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_KeepAlive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_KeepAlive(bool)
// docid: M:System.Net.HttpWebRequest.set_KeepAlive(System.Boolean)
    open func set_KeepAlive(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_KeepAlive_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumAutomaticRedirections()
// docid: M:System.Net.HttpWebRequest.get_MaximumAutomaticRedirections
    open func get_MaximumAutomaticRedirections() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_i32__get_MaximumAutomaticRedirections_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumAutomaticRedirections(System.Int32)
// docid: M:System.Net.HttpWebRequest.set_MaximumAutomaticRedirections(System.Int32)
    open func set_MaximumAutomaticRedirections(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_MaximumAutomaticRedirections_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaximumResponseHeadersLength()
// docid: M:System.Net.HttpWebRequest.get_MaximumResponseHeadersLength
    open func get_MaximumResponseHeadersLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_i32__get_MaximumResponseHeadersLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaximumResponseHeadersLength(System.Int32)
// docid: M:System.Net.HttpWebRequest.set_MaximumResponseHeadersLength(System.Int32)
    open func set_MaximumResponseHeadersLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_MaximumResponseHeadersLength_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_MediaType()
// docid: M:System.Net.HttpWebRequest.get_MediaType
    open func get_MediaType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_MediaType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_MediaType(System.String)
// docid: M:System.Net.HttpWebRequest.set_MediaType(System.String)
    open func set_MediaType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_MediaType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:System.Net.HttpWebRequest.get_Method
    open override func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Method(System.String)
// docid: M:System.Net.HttpWebRequest.set_Method(System.String)
    open override func set_Method(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Method_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Pipelined()
// docid: M:System.Net.HttpWebRequest.get_Pipelined
    open func get_Pipelined() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_Pipelined_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Pipelined(bool)
// docid: M:System.Net.HttpWebRequest.set_Pipelined(System.Boolean)
    open func set_Pipelined(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Pipelined_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreAuthenticate()
// docid: M:System.Net.HttpWebRequest.get_PreAuthenticate
    open override func get_PreAuthenticate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_PreAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreAuthenticate(bool)
// docid: M:System.Net.HttpWebRequest.set_PreAuthenticate(System.Boolean)
    open override func set_PreAuthenticate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_PreAuthenticate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Version get_ProtocolVersion()
// docid: M:System.Net.HttpWebRequest.get_ProtocolVersion
    open func get_ProtocolVersion() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_Version__get_ProtocolVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ProtocolVersion(System.Version)
// docid: M:System.Net.HttpWebRequest.set_ProtocolVersion(System.Version)
    open func set_ProtocolVersion(value : dotnet.System.Version) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ProtocolVersion_0__1__Version(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_Proxy()
// docid: M:System.Net.HttpWebRequest.get_Proxy
    open override func get_Proxy() throws -> Optional<dotnet.System.Net.IWebProxy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_IWebProxy__get_Proxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IWebProxy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Proxy(System.Net.IWebProxy)
// docid: M:System.Net.HttpWebRequest.set_Proxy(System.Net.IWebProxy)
    open override func set_Proxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Proxy_0__1__IWebProxy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ReadWriteTimeout()
// docid: M:System.Net.HttpWebRequest.get_ReadWriteTimeout
    open func get_ReadWriteTimeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_i32__get_ReadWriteTimeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ReadWriteTimeout(System.Int32)
// docid: M:System.Net.HttpWebRequest.set_ReadWriteTimeout(System.Int32)
    open func set_ReadWriteTimeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ReadWriteTimeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Referer()
// docid: M:System.Net.HttpWebRequest.get_Referer
    open func get_Referer() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_Referer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Referer(System.String)
// docid: M:System.Net.HttpWebRequest.set_Referer(System.String)
    open func set_Referer(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Referer_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_RequestUri()
// docid: M:System.Net.HttpWebRequest.get_RequestUri
    open override func get_RequestUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_Uri__get_RequestUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SendChunked()
// docid: M:System.Net.HttpWebRequest.get_SendChunked
    open func get_SendChunked() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_SendChunked_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SendChunked(bool)
// docid: M:System.Net.HttpWebRequest.set_SendChunked(System.Boolean)
    open func set_SendChunked(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_SendChunked_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Security.RemoteCertificateValidationCallback get_ServerCertificateValidationCallback()
// docid: M:System.Net.HttpWebRequest.get_ServerCertificateValidationCallback
    open func get_ServerCertificateValidationCallback() throws -> Optional<dotnet.System.Net.Security.RemoteCertificateValidationCallback> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_RemoteCertificateValidationCallback__get_ServerCertificateValidationCallback_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Security.RemoteCertificateValidationCallback(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ServerCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)
// docid: M:System.Net.HttpWebRequest.set_ServerCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)
    open func set_ServerCertificateValidationCallback(value : Optional<dotnet.System.Net.Security.RemoteCertificateValidationCallback>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_ServerCertificateValidationCallback_0__1__RemoteCertificateValidationCallback(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func set_ServerCertificateValidationCallback(value : @escaping (dotnet.System.Object, Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Certificate>, Optional<dotnet.System.Security.Cryptography.X509Certificates.X509Chain>, dotnet.System.Net.Security.SslPolicyErrors) throws -> Bool) throws {
        let del_value = try dotnet.System.Net.Security.RemoteCertificateValidationCallback(value);
        return try set_ServerCertificateValidationCallback(value: del_value);
    }
    // [IsSpecialName] System.Net.ServicePoint get_ServicePoint()
// docid: M:System.Net.HttpWebRequest.get_ServicePoint
    open func get_ServicePoint() throws -> dotnet.System.Net.ServicePoint {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_ServicePoint__get_ServicePoint_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.ServicePoint(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsCookieContainer()
// docid: M:System.Net.HttpWebRequest.get_SupportsCookieContainer
    open func get_SupportsCookieContainer() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_SupportsCookieContainer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Timeout()
// docid: M:System.Net.HttpWebRequest.get_Timeout
    open override func get_Timeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_i32__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Timeout(System.Int32)
// docid: M:System.Net.HttpWebRequest.set_Timeout(System.Int32)
    open override func set_Timeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_Timeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_TransferEncoding()
// docid: M:System.Net.HttpWebRequest.get_TransferEncoding
    open func get_TransferEncoding() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_TransferEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TransferEncoding(System.String)
// docid: M:System.Net.HttpWebRequest.set_TransferEncoding(System.String)
    open func set_TransferEncoding(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_TransferEncoding_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UnsafeAuthenticatedConnectionSharing()
// docid: M:System.Net.HttpWebRequest.get_UnsafeAuthenticatedConnectionSharing
    open func get_UnsafeAuthenticatedConnectionSharing() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_UnsafeAuthenticatedConnectionSharing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UnsafeAuthenticatedConnectionSharing(bool)
// docid: M:System.Net.HttpWebRequest.set_UnsafeAuthenticatedConnectionSharing(System.Boolean)
    open func set_UnsafeAuthenticatedConnectionSharing(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_UnsafeAuthenticatedConnectionSharing_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseDefaultCredentials()
// docid: M:System.Net.HttpWebRequest.get_UseDefaultCredentials
    open override func get_UseDefaultCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_bool__get_UseDefaultCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseDefaultCredentials(bool)
// docid: M:System.Net.HttpWebRequest.set_UseDefaultCredentials(System.Boolean)
    open override func set_UseDefaultCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_UseDefaultCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_UserAgent()
// docid: M:System.Net.HttpWebRequest.get_UserAgent
    open func get_UserAgent() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebRequest_String__get_UserAgent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_UserAgent(System.String)
// docid: M:System.Net.HttpWebRequest.set_UserAgent(System.String)
    open func set_UserAgent(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebRequest_void__set_UserAgent_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the value of the  HTTP header.

    */
    open var Accept : Optional<dotnet.System.String> {
        get {
            return try! get_Accept();
        }
        set(v) {
            return try! set_Accept(value: v!);
        }
    }
    /**
    Gets the Uniform Resource Identifier (URI) of the Internet resource that actually responds to the request.

    */
    open var Address : dotnet.System.Uri {
        get {
            return try! get_Address();
        }
    }
    /**
    Gets or sets a value that indicates whether the request should follow redirection responses.

    */
    open var AllowAutoRedirect : Bool {
        get {
            return try! get_AllowAutoRedirect();
        }
        set(v) {
            return try! set_AllowAutoRedirect(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to buffer the received from the Internet resource.

    */
    open var AllowReadStreamBuffering : Bool {
        get {
            return try! get_AllowReadStreamBuffering();
        }
        set(v) {
            return try! set_AllowReadStreamBuffering(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to buffer the data sent to the Internet resource.

    */
    open var AllowWriteStreamBuffering : Bool {
        get {
            return try! get_AllowWriteStreamBuffering();
        }
        set(v) {
            return try! set_AllowWriteStreamBuffering(value: v);
        }
    }
    /**
    Gets or sets the type of decompression that is used.

    */
    open var AutomaticDecompression : dotnet.System.Net.DecompressionMethods {
        get {
            return try! get_AutomaticDecompression();
        }
        set(v) {
            return try! set_AutomaticDecompression(value: v);
        }
    }
    /**
    Gets or sets the collection of security certificates that are associated with this request.

    */
    open var ClientCertificates : dotnet.System.Security.Cryptography.X509Certificates.X509CertificateCollection {
        get {
            return try! get_ClientCertificates();
        }
        set(v) {
            return try! set_ClientCertificates(value: v);
        }
    }
    /**
    Gets or sets the value of the  HTTP header.

    */
    open var Connection : Optional<dotnet.System.String> {
        get {
            return try! get_Connection();
        }
        set(v) {
            return try! set_Connection(value: v!);
        }
    }
    /**
    Gets or sets the name of the connection group for the request.

    */
    open override var ConnectionGroupName : Optional<dotnet.System.String> {
        get {
            return try! get_ConnectionGroupName();
        }
        set(v) {
            return try! set_ConnectionGroupName(value: v!);
        }
    }
    /**
    Gets or sets the  HTTP header.

    */
    open override var ContentLength : Swift.Int64 {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v);
        }
    }
    /**
    Gets or sets the value of the  HTTP header.

    */
    open override var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    Gets or sets the delegate method called when an HTTP 100-continue response is received from the Internet resource.

    */
    open var ContinueDelegate : Optional<dotnet.System.Net.HttpContinueDelegate> {
        get {
            return try! get_ContinueDelegate();
        }
        set(v) {
            return try! set_ContinueDelegate(value: v!);
        }
    }
    /**
    Gets or sets a timeout, in milliseconds, to wait until the 100-Continue is received from the server.

    */
    open var ContinueTimeout : Swift.Int32 {
        get {
            return try! get_ContinueTimeout();
        }
        set(v) {
            return try! set_ContinueTimeout(value: v);
        }
    }
    /**
    Gets or sets the cookies associated with the request.

    */
    open var CookieContainer : Optional<dotnet.System.Net.CookieContainer> {
        get {
            return try! get_CookieContainer();
        }
        set(v) {
            return try! set_CookieContainer(value: v!);
        }
    }
    /**
    Gets or sets authentication information for the request.

    */
    open override var Credentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
    /**
    Gets or sets the  HTTP header value to use in an HTTP request.

    */
    open var Date : dotnet.System.DateTime {
        get {
            return try! get_Date();
        }
        set(v) {
            return try! set_Date(value: v);
        }
    }
// TODO COPE (static prop override) [IsSpecialName] System.Net.Cache.RequestCachePolicy get_DefaultCachePolicy()
    /**
    Gets or sets the default maximum length of an HTTP error response.

    */
    public static var DefaultMaximumErrorResponseLength : Swift.Int32 {
        get {
            return try! get_DefaultMaximumErrorResponseLength();
        }
        set(v) {
            return try! set_DefaultMaximumErrorResponseLength(value: v);
        }
    }
    /**
    Gets or sets the default for the  property.

    */
    public static var DefaultMaximumResponseHeadersLength : Swift.Int32 {
        get {
            return try! get_DefaultMaximumResponseHeadersLength();
        }
        set(v) {
            return try! set_DefaultMaximumResponseHeadersLength(value: v);
        }
    }
    /**
    Gets or sets the value of the  HTTP header.

    */
    open var Expect : Optional<dotnet.System.String> {
        get {
            return try! get_Expect();
        }
        set(v) {
            return try! set_Expect(value: v!);
        }
    }
    /**
    Gets a value that indicates whether a response has been received from an Internet resource.

    */
    open var HaveResponse : Bool {
        get {
            return try! get_HaveResponse();
        }
    }
    /**
    Specifies a collection of the name/value pairs that make up the HTTP headers.

    */
    open override var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v);
        }
    }
    /**
    Gets or sets the Host header value to use in an HTTP request independent from the request URI.

    */
    open var Host : dotnet.System.String {
        get {
            return try! get_Host();
        }
        set(v) {
            return try! set_Host(value: v);
        }
    }
    /**
    Gets or sets the value of the If-Modified-Since HTTP header.

    */
    open var IfModifiedSince : dotnet.System.DateTime {
        get {
            return try! get_IfModifiedSince();
        }
        set(v) {
            return try! set_IfModifiedSince(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.

    */
    open var KeepAlive : Bool {
        get {
            return try! get_KeepAlive();
        }
        set(v) {
            return try! set_KeepAlive(value: v);
        }
    }
    /**
    Gets or sets the maximum number of redirects that the request follows.

    */
    open var MaximumAutomaticRedirections : Swift.Int32 {
        get {
            return try! get_MaximumAutomaticRedirections();
        }
        set(v) {
            return try! set_MaximumAutomaticRedirections(value: v);
        }
    }
    /**
    Gets or sets the maximum allowed length of the response headers.

    */
    open var MaximumResponseHeadersLength : Swift.Int32 {
        get {
            return try! get_MaximumResponseHeadersLength();
        }
        set(v) {
            return try! set_MaximumResponseHeadersLength(value: v);
        }
    }
    /**
    Gets or sets the media type of the request.

    */
    open var MediaType : Optional<dotnet.System.String> {
        get {
            return try! get_MediaType();
        }
        set(v) {
            return try! set_MediaType(value: v!);
        }
    }
    /**
    Gets or sets the method for the request.

    */
    open override var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
        set(v) {
            return try! set_Method(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to pipeline the request to the Internet resource.

    */
    open var Pipelined : Bool {
        get {
            return try! get_Pipelined();
        }
        set(v) {
            return try! set_Pipelined(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether to send an Authorization header with the request.

    */
    open override var PreAuthenticate : Bool {
        get {
            return try! get_PreAuthenticate();
        }
        set(v) {
            return try! set_PreAuthenticate(value: v);
        }
    }
    /**
    Gets or sets the version of HTTP to use for the request.

    */
    open var ProtocolVersion : dotnet.System.Version {
        get {
            return try! get_ProtocolVersion();
        }
        set(v) {
            return try! set_ProtocolVersion(value: v);
        }
    }
    /**
    Gets or sets proxy information for the request.

    */
    open override var Proxy : Optional<dotnet.System.Net.IWebProxy> {
        get {
            return try! get_Proxy();
        }
        set(v) {
            return try! set_Proxy(value: v!);
        }
    }
    /**
    Gets or sets a time-out in milliseconds when writing to or reading from a stream.

    */
    open var ReadWriteTimeout : Swift.Int32 {
        get {
            return try! get_ReadWriteTimeout();
        }
        set(v) {
            return try! set_ReadWriteTimeout(value: v);
        }
    }
    /**
    Gets or sets the value of the  HTTP header.

    */
    open var Referer : Optional<dotnet.System.String> {
        get {
            return try! get_Referer();
        }
        set(v) {
            return try! set_Referer(value: v!);
        }
    }
    /**
    Gets the original Uniform Resource Identifier (URI) of the request.

    */
    open override var RequestUri : dotnet.System.Uri {
        get {
            return try! get_RequestUri();
        }
    }
    /**
    Gets or sets a value that indicates whether to send data in segments to the Internet resource.

    */
    open var SendChunked : Bool {
        get {
            return try! get_SendChunked();
        }
        set(v) {
            return try! set_SendChunked(value: v);
        }
    }
    /**
    Gets or sets a callback function to validate the server certificate.

    */
    open var ServerCertificateValidationCallback : Optional<dotnet.System.Net.Security.RemoteCertificateValidationCallback> {
        get {
            return try! get_ServerCertificateValidationCallback();
        }
        set(v) {
            return try! set_ServerCertificateValidationCallback(value: v!);
        }
    }
    /**
    Gets the service point to use for the request.

    */
    open var ServicePoint : dotnet.System.Net.ServicePoint {
        get {
            return try! get_ServicePoint();
        }
    }
    /**
    Gets a value that indicates whether the request provides support for a .

    */
    open var SupportsCookieContainer : Bool {
        get {
            return try! get_SupportsCookieContainer();
        }
    }
    /**
    Gets or sets the time-out value in milliseconds for the  and  methods.

    */
    open override var Timeout : Swift.Int32 {
        get {
            return try! get_Timeout();
        }
        set(v) {
            return try! set_Timeout(value: v);
        }
    }
    /**
    Gets or sets the value of the  HTTP header.

    */
    open var TransferEncoding : Optional<dotnet.System.String> {
        get {
            return try! get_TransferEncoding();
        }
        set(v) {
            return try! set_TransferEncoding(value: v!);
        }
    }
    /**
    Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.

    */
    open var UnsafeAuthenticatedConnectionSharing : Bool {
        get {
            return try! get_UnsafeAuthenticatedConnectionSharing();
        }
        set(v) {
            return try! set_UnsafeAuthenticatedConnectionSharing(value: v);
        }
    }
    /**
    Gets or sets a  value that controls whether default credentials are sent with requests.

    */
    open override var UseDefaultCredentials : Bool {
        get {
            return try! get_UseDefaultCredentials();
        }
        set(v) {
            return try! set_UseDefaultCredentials(value: v);
        }
    }
    /**
    Gets or sets the value of the  HTTP header.

    */
    open var UserAgent : Optional<dotnet.System.String> {
        get {
            return try! get_UserAgent();
        }
        set(v) {
            return try! set_UserAgent(value: v!);
        }
    }
} // HttpWebRequest


// type: System.Net.HttpWebResponse
    /**
    Provides an HTTP-specific implementation of the  class.

    */
open class HttpWebResponse
    :
    dotnet.System.Net.WebResponse
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_HttpWebResponse_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.HttpWebResponse.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_HttpWebResponse_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Net.HttpWebResponse.Close
    /**
    Closes the response stream.

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebResponse_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetResponseHeader(System.String)
// docid: M:System.Net.HttpWebResponse.GetResponseHeader(System.String)
    /**
    Gets the contents of a header that was returned with the response.

    - Parameter headerName: The header value to return.
    - Returns: The contents of the specified header.

    */
    open func GetResponseHeader(headerName : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_String__GetResponseHeader_0__1__String(&__thrown, self.get_handle(), headerName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.IO.Stream GetResponseStream()
// docid: M:System.Net.HttpWebResponse.GetResponseStream
    /**
    Gets the stream that is used to read the body of the response from the server.

    - Returns: A  containing the body of the response.

    */
    open override func GetResponseStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_Stream__GetResponseStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_CharacterSet()
// docid: M:System.Net.HttpWebResponse.get_CharacterSet
    open func get_CharacterSet() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_String__get_CharacterSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ContentEncoding()
// docid: M:System.Net.HttpWebResponse.get_ContentEncoding
    open func get_ContentEncoding() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_String__get_ContentEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength()
// docid: M:System.Net.HttpWebResponse.get_ContentLength
    open override func get_ContentLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_i64__get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.HttpWebResponse.get_ContentType
    open override func get_ContentType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.CookieCollection get_Cookies()
// docid: M:System.Net.HttpWebResponse.get_Cookies
    open func get_Cookies() throws -> dotnet.System.Net.CookieCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_CookieCollection__get_Cookies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.CookieCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Cookies(System.Net.CookieCollection)
// docid: M:System.Net.HttpWebResponse.set_Cookies(System.Net.CookieCollection)
    open func set_Cookies(value : dotnet.System.Net.CookieCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_HttpWebResponse_void__set_Cookies_0__1__CookieCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.HttpWebResponse.get_Headers
    open override func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsMutuallyAuthenticated()
// docid: M:System.Net.HttpWebResponse.get_IsMutuallyAuthenticated
    open override func get_IsMutuallyAuthenticated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_bool__get_IsMutuallyAuthenticated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.DateTime get_LastModified()
// docid: M:System.Net.HttpWebResponse.get_LastModified
    open func get_LastModified() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_DateTime__get_LastModified_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:System.Net.HttpWebResponse.get_Method
    open func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Version get_ProtocolVersion()
// docid: M:System.Net.HttpWebResponse.get_ProtocolVersion
    open func get_ProtocolVersion() throws -> dotnet.System.Version {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_Version__get_ProtocolVersion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Version(hndl : __return);
        }
    }
    // [IsSpecialName] System.Uri get_ResponseUri()
// docid: M:System.Net.HttpWebResponse.get_ResponseUri
    open override func get_ResponseUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_Uri__get_ResponseUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Server()
// docid: M:System.Net.HttpWebResponse.get_Server
    open func get_Server() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_String__get_Server_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.HttpStatusCode get_StatusCode()
// docid: M:System.Net.HttpWebResponse.get_StatusCode
    open func get_StatusCode() throws -> dotnet.System.Net.HttpStatusCode {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_HttpStatusCode__get_StatusCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpStatusCode(val: __return);
        }
    }
    // [IsSpecialName] System.String get_StatusDescription()
// docid: M:System.Net.HttpWebResponse.get_StatusDescription
    open func get_StatusDescription() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_String__get_StatusDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsHeaders()
// docid: M:System.Net.HttpWebResponse.get_SupportsHeaders
    open override func get_SupportsHeaders() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_HttpWebResponse_bool__get_SupportsHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the character set of the response.

    */
    open var CharacterSet : Optional<dotnet.System.String> {
        get {
            return try! get_CharacterSet();
        }
    }
    /**
    Gets the method that is used to encode the body of the response.

    */
    open var ContentEncoding : dotnet.System.String {
        get {
            return try! get_ContentEncoding();
        }
    }
// TODO COPE (is_override_mutable_with_readonly ) [IsSpecialName] System.Int64 get_ContentLength()
// TODO COPE (is_override_mutable_with_readonly ) [IsSpecialName] System.String get_ContentType()
    /**
    Gets or sets the cookies that are associated with this response.

    */
    open var Cookies : dotnet.System.Net.CookieCollection {
        get {
            return try! get_Cookies();
        }
        set(v) {
            return try! set_Cookies(value: v);
        }
    }
    /**
    Gets the headers that are associated with this response from the server.

    */
    open override var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets a  value that indicates whether both client and server were authenticated.

    */
    open override var IsMutuallyAuthenticated : Bool {
        get {
            return try! get_IsMutuallyAuthenticated();
        }
    }
    /**
    Gets the last date and time that the contents of the response were modified.

    */
    open var LastModified : dotnet.System.DateTime {
        get {
            return try! get_LastModified();
        }
    }
    /**
    Gets the method that is used to return the response.

    */
    open var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
    }
    /**
    Gets the version of the HTTP protocol that is used in the response.

    */
    open var ProtocolVersion : dotnet.System.Version {
        get {
            return try! get_ProtocolVersion();
        }
    }
    /**
    Gets the URI of the Internet resource that responded to the request.

    */
    open override var ResponseUri : dotnet.System.Uri {
        get {
            return try! get_ResponseUri();
        }
    }
    /**
    Gets the name of the server that sent the response.

    */
    open var Server : dotnet.System.String {
        get {
            return try! get_Server();
        }
    }
    /**
    Gets the status of the response.

    */
    open var StatusCode : dotnet.System.Net.HttpStatusCode {
        get {
            return try! get_StatusCode();
        }
    }
    /**
    Gets the status description returned with the response.

    */
    open var StatusDescription : dotnet.System.String {
        get {
            return try! get_StatusDescription();
        }
    }
    /**
    Gets a value that indicates whether headers are supported.

    */
    open override var SupportsHeaders : Bool {
        get {
            return try! get_SupportsHeaders();
        }
    }
} // HttpWebResponse


// type: System.Net.IAuthenticationModule
    /**
    Provides the base authentication interface for Web client authentication modules.

    */
open class IAuthenticationModule
    :
    SGBridgeGenericValue,
    System_Net_IAuthenticationModule
{
    open class func get_type_handle() -> TypeHandle {
        return System_Net_IAuthenticationModule_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Net.Authorization Authenticate(System.String, System.Net.WebRequest, System.Net.ICredentials)
// docid: M:System.Net.IAuthenticationModule.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)
    /**
    Returns an instance of the  class in response to an authentication challenge from a server.

    - Parameter challenge: The authentication challenge sent by the server.
    - Parameter request: The  instance associated with the challenge.
    - Parameter credentials: The credentials associated with the challenge.
    - Returns: An  instance containing the authorization message for the request, or  if the challenge cannot be handled.

    */
    open func Authenticate(challenge : dotnet.System.String, request : dotnet.System.Net.WebRequest, credentials : dotnet.System.Net.ICredentials) throws -> Optional<dotnet.System.Net.Authorization> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IAuthenticationModule_Authorization__Authenticate_0__3__String_WebRequest_ICredentials(&__thrown, self.get_handle(), challenge.get_handle(), request.get_handle(), credentials.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Authorization(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Net.Authorization PreAuthenticate(System.Net.WebRequest, System.Net.ICredentials)
// docid: M:System.Net.IAuthenticationModule.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)
    /**
    Returns an instance of the  class for an authentication request to a server.

    - Parameter request: The  instance associated with the authentication request.
    - Parameter credentials: The credentials associated with the authentication request.
    - Returns: An  instance containing the authorization message for the request.

    */
    open func PreAuthenticate(request : dotnet.System.Net.WebRequest, credentials : dotnet.System.Net.ICredentials) throws -> Optional<dotnet.System.Net.Authorization> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IAuthenticationModule_Authorization__PreAuthenticate_0__2__WebRequest_ICredentials(&__thrown, self.get_handle(), request.get_handle(), credentials.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Authorization(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_AuthenticationType()
// docid: M:System.Net.IAuthenticationModule.get_AuthenticationType
    open func get_AuthenticationType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IAuthenticationModule_String__get_AuthenticationType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanPreAuthenticate()
// docid: M:System.Net.IAuthenticationModule.get_CanPreAuthenticate
    open func get_CanPreAuthenticate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IAuthenticationModule_bool__get_CanPreAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IAuthenticationModule


// type: System.Net.ICredentialPolicy
    /**
    Defines the credential policy to be used for resource requests that are made using  and its derived classes.

    */
open class ICredentialPolicy
    :
    SGBridgeGenericValue,
    System_Net_ICredentialPolicy
{
    open class func get_type_handle() -> TypeHandle {
        return System_Net_ICredentialPolicy_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool ShouldSendCredential(System.Uri, System.Net.WebRequest, System.Net.NetworkCredential, System.Net.IAuthenticationModule)
// docid: M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)
    /**
    Returns a  that indicates whether the client's credentials are sent with a resource request made using an instance of the  class.

    - Parameter challengeUri: The  that will receive the request.
    - Parameter request: The  that represents the resource being requested.
    - Parameter credential: The  that will be sent with the request if this method returns .
    - Parameter authenticationModule: The  that will conduct the authentication, if authentication is required.
    - Returns: 
         if the credentials are sent with the request; otherwise, .

    */
    open func ShouldSendCredential(challengeUri : dotnet.System.Uri, request : dotnet.System.Net.WebRequest, credential : dotnet.System.Net.NetworkCredential, authenticationModule : dotnet.System.Net.IAuthenticationModule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_ICredentialPolicy_bool__ShouldSendCredential_0__4__Uri_WebRequest_NetworkCredential_IAuthenticationModule(&__thrown, self.get_handle(), challengeUri.get_handle(), request.get_handle(), credential.get_handle(), authenticationModule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ICredentialPolicy


// type: System.Net.IWebRequestCreate
    /**
    Provides the base interface for creating  instances.

    */
open class IWebRequestCreate
    :
    SGBridgeGenericValue,
    System_Net_IWebRequestCreate
{
    open class func get_type_handle() -> TypeHandle {
        return System_Net_IWebRequestCreate_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Net.WebRequest Create(System.Uri)
// docid: M:System.Net.IWebRequestCreate.Create(System.Uri)
    /**
    Creates a  instance.

    - Parameter uri: The uniform resource identifier (URI) of the Web resource.
    - Returns: A  instance.

    */
    open func Create(uri : dotnet.System.Uri) throws -> dotnet.System.Net.WebRequest {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_IWebRequestCreate_WebRequest__Create_0__1__Uri(&__thrown, self.get_handle(), uri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebRequest(hndl : __return);
        }
    }
} // IWebRequestCreate


// type: System.Net.ProtocolViolationException
    /**
    The exception that is thrown when an error is made while using a network protocol.

    */
open class ProtocolViolationException
    :
    dotnet.System.InvalidOperationException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_ProtocolViolationException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.ProtocolViolationException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_ProtocolViolationException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.ProtocolViolationException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified message.

    - Parameter message: The error message string.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_ProtocolViolationException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Net.ProtocolViolationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates a  with the data required to serialize the target object.

    - Parameter serializationInfo: The  to populate with data.
    - Parameter streamingContext: A  that specifies the destination for this serialization.
    */
    open func GetObjectData(serializationInfo : dotnet.System.Runtime.Serialization.SerializationInfo, streamingContext : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Net_ProtocolViolationException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), serializationInfo.get_handle(), streamingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ProtocolViolationException


// type: System.Net.WebException
    /**
    The exception that is thrown when an error occurs while accessing the network through a pluggable protocol.

    */
open class WebException
    :
    dotnet.System.InvalidOperationException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_WebException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.WebException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Net.WebException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified error message.

    - Parameter message: The text of the error message.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Net.WebException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified error message and nested exception.

    - Parameter message: The text of the error message.
    - Parameter innerException: A nested exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception, System.Net.WebExceptionStatus, System.Net.WebResponse)
// docid: M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)
    /**
    Initializes a new instance of the  class with the specified error message, nested exception, status, and response.

    - Parameter message: The text of the error message.
    - Parameter innerException: A nested exception.
    - Parameter status: One of the  values.
    - Parameter response: A  instance that contains the response from the remote host.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>, status : dotnet.System.Net.WebExceptionStatus, response : Optional<dotnet.System.Net.WebResponse>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebException_ctor_0__4__String_Exception_WebExceptionStatus_WebResponse(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil, status.get_value(), response?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Net.WebExceptionStatus)
// docid: M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)
    /**
    Initializes a new instance of the  class with the specified error message and status.

    - Parameter message: The text of the error message.
    - Parameter status: One of the  values.
    */
    public init(message : Optional<dotnet.System.String>, status : dotnet.System.Net.WebExceptionStatus) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebException_ctor_0__2__String_WebExceptionStatus(&__thrown, message?.get_handle() ?? nil, status.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Net.WebException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates a  instance with the data needed to serialize the .

    - Parameter serializationInfo: The  to be used.
    - Parameter streamingContext: The  to be used.
    */
    open func GetObjectData(serializationInfo : dotnet.System.Runtime.Serialization.SerializationInfo, streamingContext : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), serializationInfo.get_handle(), streamingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebResponse get_Response()
// docid: M:System.Net.WebException.get_Response
    open func get_Response() throws -> Optional<dotnet.System.Net.WebResponse> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebException_WebResponse__get_Response_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.WebResponse(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Net.WebExceptionStatus get_Status()
// docid: M:System.Net.WebException.get_Status
    open func get_Status() throws -> dotnet.System.Net.WebExceptionStatus {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebException_WebExceptionStatus__get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebExceptionStatus(val: __return);
        }
    }
    /**
    Gets the response that the remote host returned.

    */
    open var Response : Optional<dotnet.System.Net.WebResponse> {
        get {
            return try! get_Response();
        }
    }
    /**
    Gets the status of the response.

    */
    open var Status : dotnet.System.Net.WebExceptionStatus {
        get {
            return try! get_Status();
        }
    }
} // WebException


// type: System.Net.WebExceptionStatus
    /**
    Defines status codes for the  class.

    */
public struct WebExceptionStatus : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_WebExceptionStatus_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.WebExceptionStatus Success
    /**
    No error was encountered.

    */
    public static var Success : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_Success());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus NameResolutionFailure
    /**
    The name resolver service could not resolve the host name.

    */
    public static var NameResolutionFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_NameResolutionFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus ConnectFailure
    /**
    The remote service point could not be contacted at the transport level.

    */
    public static var ConnectFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_ConnectFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus ReceiveFailure
    /**
    A complete response was not received from the remote server.

    */
    public static var ReceiveFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_ReceiveFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus SendFailure
    /**
    A complete request could not be sent to the remote server.

    */
    public static var SendFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_SendFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus PipelineFailure
    /**
    The request was a pipelined request and the connection was closed before the response was received.

    */
    public static var PipelineFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_PipelineFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus RequestCanceled
    /**
    The request was canceled, the  method was called, or an unclassifiable error occurred. This is the default value for .

    */
    public static var RequestCanceled : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_RequestCanceled());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus ProtocolError
    /**
    The response received from the server was complete but indicated a protocol-level error. For example, an HTTP protocol error such as 401 Access Denied would use this status.

    */
    public static var ProtocolError : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_ProtocolError());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus ConnectionClosed
    /**
    The connection was prematurely closed.

    */
    public static var ConnectionClosed : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_ConnectionClosed());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus TrustFailure
    /**
    A server certificate could not be validated.

    */
    public static var TrustFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_TrustFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus SecureChannelFailure
    /**
    An error occurred while establishing a connection using SSL.

    */
    public static var SecureChannelFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_SecureChannelFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus ServerProtocolViolation
    /**
    The server response was not a valid HTTP response.

    */
    public static var ServerProtocolViolation : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_ServerProtocolViolation());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus KeepAliveFailure
    /**
    The connection for a request that specifies the Keep-alive header was closed unexpectedly.

    */
    public static var KeepAliveFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_KeepAliveFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus Pending
    /**
    An internal asynchronous request is pending.

    */
    public static var Pending : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_Pending());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus Timeout
    /**
    No response was received during the time-out period for a request.

    */
    public static var Timeout : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_Timeout());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus ProxyNameResolutionFailure
    /**
    The name resolver service could not resolve the proxy host name.

    */
    public static var ProxyNameResolutionFailure : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_ProxyNameResolutionFailure());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus UnknownError
    /**
    An exception of unknown type has occurred.

    */
    public static var UnknownError : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_UnknownError());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus MessageLengthLimitExceeded
    /**
    A message was received that exceeded the specified limit when sending a request or receiving a response from the server.

    */
    public static var MessageLengthLimitExceeded : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_MessageLengthLimitExceeded());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus CacheEntryNotFound
    /**
    The specified cache entry was not found.

    */
    public static var CacheEntryNotFound : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_CacheEntryNotFound());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus RequestProhibitedByCachePolicy
    /**
    The request was not permitted by the cache policy. In general, this occurs when a request is not cacheable and the effective policy prohibits sending the request to the server. You might receive this status if a request method implies the presence of a request body, a request method requires direct interaction with the server, or a request contains a conditional header.

    */
    public static var RequestProhibitedByCachePolicy : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_RequestProhibitedByCachePolicy());
            return __return;
        }
    }
    // static field: System.Net.WebExceptionStatus RequestProhibitedByProxy
    /**
    This request was not permitted by the proxy.

    */
    public static var RequestProhibitedByProxy : dotnet.System.Net.WebExceptionStatus {
        get {
        let __return = dotnet.System.Net.WebExceptionStatus(val: System_Net_WebExceptionStatus_get_RequestProhibitedByProxy());
            return __return;
        }
    }
} // WebExceptionStatus


// type: System.Net.WebRequest
    /**
    Makes a request to a Uniform Resource Identifier (URI). This is an  class.

    */
open class WebRequest
    :
    dotnet.System.MarshalByRefObject,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_WebRequest_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Abort()
// docid: M:System.Net.WebRequest.Abort
    /**
    Aborts the request.

    */
    open func Abort() throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__Abort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginGetRequestStream(System.AsyncCallback, System.Object)
// docid: M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
    /**
    When overridden in a descendant class, provides an asynchronous version of the  method.

    - Parameter callback: The  delegate.
    - Parameter state: An object containing state information for this asynchronous request.
    - Returns: An  that references the asynchronous request.

    */
    open func BeginGetRequestStream(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_IAsyncResult__BeginGetRequestStream_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    open func BeginGetRequestStream(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetRequestStream(callback: del_callback, state: state);
    }
    // System.IAsyncResult BeginGetResponse(System.AsyncCallback, System.Object)
// docid: M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
    /**
    When overridden in a descendant class, begins an asynchronous request for an Internet resource.

    - Parameter callback: The  delegate.
    - Parameter state: An object containing state information for this asynchronous request.
    - Returns: An  that references the asynchronous request.

    */
    open func BeginGetResponse(callback : Optional<dotnet.System.AsyncCallback>, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_IAsyncResult__BeginGetResponse_0__2__AsyncCallback_Object(&__thrown, self.get_handle(), callback?.get_handle() ?? nil, state?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IAsyncResult(hndl : __return);
        }
    }
    // delegate closure overload
    open func BeginGetResponse(callback : @escaping (dotnet.System.IAsyncResult) throws -> Void, state : Optional<dotnet.System.Object>) throws -> dotnet.System.IAsyncResult {
        let del_callback = try dotnet.System.AsyncCallback(callback);
        return try BeginGetResponse(callback: del_callback, state: state);
    }
    // System.Net.WebRequest Create(System.String)
// docid: M:System.Net.WebRequest.Create(System.String)
    /**
    Initializes a new  instance for the specified URI scheme.

    - Parameter requestUriString: The URI that identifies the Internet resource.
    - Returns: A  descendant for the specific URI scheme.

    */
    open class func Create(requestUriString : dotnet.System.String) throws -> dotnet.System.Net.WebRequest {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_WebRequest__Create_0__1__String(&__thrown, requestUriString.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebRequest(hndl : __return);
        }
    }
    // System.Net.WebRequest Create(System.Uri)
// docid: M:System.Net.WebRequest.Create(System.Uri)
    /**
    Initializes a new  instance for the specified URI scheme.

    - Parameter requestUri: A  containing the URI of the requested resource.
    - Returns: A  descendant for the specified URI scheme.

    */
    open class func Create(requestUri : dotnet.System.Uri) throws -> dotnet.System.Net.WebRequest {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_WebRequest__Create_0__1__Uri(&__thrown, requestUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebRequest(hndl : __return);
        }
    }
    // System.Net.WebRequest CreateDefault(System.Uri)
// docid: M:System.Net.WebRequest.CreateDefault(System.Uri)
    /**
    Initializes a new  instance for the specified URI scheme.

    - Parameter requestUri: A  containing the URI of the requested resource.
    - Returns: A  descendant for the specified URI scheme.

    */
    open class func CreateDefault(requestUri : dotnet.System.Uri) throws -> dotnet.System.Net.WebRequest {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_WebRequest__CreateDefault_0__1__Uri(&__thrown, requestUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebRequest(hndl : __return);
        }
    }
    // System.Net.HttpWebRequest CreateHttp(System.String)
// docid: M:System.Net.WebRequest.CreateHttp(System.String)
    /**
    Initializes a new  instance for the specified URI string.

    - Parameter requestUriString: A URI string that identifies the Internet resource.
    - Returns: An  instance for the specific URI string.

    */
    open class func CreateHttp(requestUriString : dotnet.System.String) throws -> dotnet.System.Net.HttpWebRequest {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_HttpWebRequest__CreateHttp_0__1__String(&__thrown, requestUriString.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpWebRequest(hndl : __return);
        }
    }
    // System.Net.HttpWebRequest CreateHttp(System.Uri)
// docid: M:System.Net.WebRequest.CreateHttp(System.Uri)
    /**
    Initializes a new  instance for the specified URI.

    - Parameter requestUri: A URI that identifies the Internet resource.
    - Returns: An  instance for the specific URI string.

    */
    open class func CreateHttp(requestUri : dotnet.System.Uri) throws -> dotnet.System.Net.HttpWebRequest {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_HttpWebRequest__CreateHttp_0__1__Uri(&__thrown, requestUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.HttpWebRequest(hndl : __return);
        }
    }
    // System.IO.Stream EndGetRequestStream(System.IAsyncResult)
// docid: M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
    /**
    When overridden in a descendant class, returns a  for writing data to the Internet resource.

    - Parameter asyncResult: An  that references a pending request for a stream.
    - Returns: A  to write data to.

    */
    open func EndGetRequestStream(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_Stream__EndGetRequestStream_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Net.WebResponse EndGetResponse(System.IAsyncResult)
// docid: M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
    /**
    When overridden in a descendant class, returns a .

    - Parameter asyncResult: An  that references a pending request for a response.
    - Returns: A  that contains a response to the Internet request.

    */
    open func EndGetResponse(asyncResult : dotnet.System.IAsyncResult) throws -> dotnet.System.Net.WebResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_WebResponse__EndGetResponse_0__1__IAsyncResult(&__thrown, self.get_handle(), asyncResult.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebResponse(hndl : __return);
        }
    }
    // System.IO.Stream GetRequestStream()
// docid: M:System.Net.WebRequest.GetRequestStream
    /**
    When overridden in a descendant class, returns a  for writing data to the Internet resource.

    - Returns: A  for writing data to the Internet resource.

    */
    open func GetRequestStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_Stream__GetRequestStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.IO.Stream> GetRequestStreamAsync()
// docid: M:System.Net.WebRequest.GetRequestStreamAsync
    /**
    When overridden in a descendant class, returns a  for writing data to the Internet resource as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open func GetRequestStreamAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.IO.Stream> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_System_Threading_Tasks_Task_System_IO_Stream___GetRequestStreamAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Net.WebResponse GetResponse()
// docid: M:System.Net.WebRequest.GetResponse
    /**
    When overridden in a descendant class, returns a response to an Internet request.

    - Returns: A  containing the response to the Internet request.

    */
    open func GetResponse() throws -> dotnet.System.Net.WebResponse {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_WebResponse__GetResponse_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebResponse(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.WebResponse> GetResponseAsync()
// docid: M:System.Net.WebRequest.GetResponseAsync
    /**
    When overridden in a descendant class, returns a response to an Internet request as an asynchronous operation.

    - Returns: The task object representing the asynchronous operation.

    */
    open func GetResponseAsync() throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.WebResponse> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_System_Threading_Tasks_Task_System_Net_WebResponse___GetResponseAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Net.IWebProxy GetSystemWebProxy()
// docid: M:System.Net.WebRequest.GetSystemWebProxy
    /**
    Returns a proxy configured with the Internet Explorer settings of the currently impersonated user.

    - Returns: An  used by every call to instances of .

    */
    open class func GetSystemWebProxy() throws -> dotnet.System.Net.IWebProxy {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_IWebProxy__GetSystemWebProxy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IWebProxy(hndl : __return);
        }
    }
    // bool RegisterPrefix(System.String, System.Net.IWebRequestCreate)
// docid: M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
    /**
    Registers a  descendant for the specified URI.

    - Parameter prefix: The complete URI or URI prefix that the  descendant services.
    - Parameter creator: The create method that the  calls to create the  descendant.
    - Returns: 
         if registration is successful; otherwise, .

    */
    open class func RegisterPrefix(prefix : dotnet.System.String, creator : dotnet.System.Net.IWebRequestCreate) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_bool__RegisterPrefix_0__2__String_IWebRequestCreate(&__thrown, prefix.get_handle(), creator.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Net.Security.AuthenticationLevel get_AuthenticationLevel()
// docid: M:System.Net.WebRequest.get_AuthenticationLevel
    open func get_AuthenticationLevel() throws -> dotnet.System.Net.Security.AuthenticationLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_AuthenticationLevel__get_AuthenticationLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Security.AuthenticationLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_AuthenticationLevel(System.Net.Security.AuthenticationLevel)
// docid: M:System.Net.WebRequest.set_AuthenticationLevel(System.Net.Security.AuthenticationLevel)
    open func set_AuthenticationLevel(value : dotnet.System.Net.Security.AuthenticationLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_AuthenticationLevel_0__1__AuthenticationLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Cache.RequestCachePolicy get_CachePolicy()
// docid: M:System.Net.WebRequest.get_CachePolicy
    open func get_CachePolicy() throws -> Optional<dotnet.System.Net.Cache.RequestCachePolicy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_RequestCachePolicy__get_CachePolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Cache.RequestCachePolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_CachePolicy(System.Net.Cache.RequestCachePolicy)
// docid: M:System.Net.WebRequest.set_CachePolicy(System.Net.Cache.RequestCachePolicy)
    open func set_CachePolicy(value : Optional<dotnet.System.Net.Cache.RequestCachePolicy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_CachePolicy_0__1__RequestCachePolicy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ConnectionGroupName()
// docid: M:System.Net.WebRequest.get_ConnectionGroupName
    open func get_ConnectionGroupName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_String__get_ConnectionGroupName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ConnectionGroupName(System.String)
// docid: M:System.Net.WebRequest.set_ConnectionGroupName(System.String)
    open func set_ConnectionGroupName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_ConnectionGroupName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength()
// docid: M:System.Net.WebRequest.get_ContentLength
    open func get_ContentLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_i64__get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Int64)
// docid: M:System.Net.WebRequest.set_ContentLength(System.Int64)
    open func set_ContentLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_ContentLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.WebRequest.get_ContentType
    open func get_ContentType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:System.Net.WebRequest.set_ContentType(System.String)
    open func set_ContentType(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.ICredentials get_Credentials()
// docid: M:System.Net.WebRequest.get_Credentials
    open func get_Credentials() throws -> Optional<dotnet.System.Net.ICredentials> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_ICredentials__get_Credentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.ICredentials(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Credentials(System.Net.ICredentials)
// docid: M:System.Net.WebRequest.set_Credentials(System.Net.ICredentials)
    open func set_Credentials(value : Optional<dotnet.System.Net.ICredentials>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_Credentials_0__1__ICredentials(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.Cache.RequestCachePolicy get_DefaultCachePolicy()
// docid: M:System.Net.WebRequest.get_DefaultCachePolicy
    open class func get_DefaultCachePolicy() throws -> Optional<dotnet.System.Net.Cache.RequestCachePolicy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_RequestCachePolicy__get_DefaultCachePolicy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.Cache.RequestCachePolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy)
// docid: M:System.Net.WebRequest.set_DefaultCachePolicy(System.Net.Cache.RequestCachePolicy)
    open class func set_DefaultCachePolicy(value : Optional<dotnet.System.Net.Cache.RequestCachePolicy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_DefaultCachePolicy_0__1__RequestCachePolicy(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_DefaultWebProxy()
// docid: M:System.Net.WebRequest.get_DefaultWebProxy
    open class func get_DefaultWebProxy() throws -> Optional<dotnet.System.Net.IWebProxy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_IWebProxy__get_DefaultWebProxy_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IWebProxy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultWebProxy(System.Net.IWebProxy)
// docid: M:System.Net.WebRequest.set_DefaultWebProxy(System.Net.IWebProxy)
    open class func set_DefaultWebProxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_DefaultWebProxy_0__1__IWebProxy(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.WebRequest.get_Headers
    open func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Headers(System.Net.WebHeaderCollection)
// docid: M:System.Net.WebRequest.set_Headers(System.Net.WebHeaderCollection)
    open func set_Headers(value : dotnet.System.Net.WebHeaderCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_Headers_0__1__WebHeaderCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Principal.TokenImpersonationLevel get_ImpersonationLevel()
// docid: M:System.Net.WebRequest.get_ImpersonationLevel
    open func get_ImpersonationLevel() throws -> dotnet.System.Security.Principal.TokenImpersonationLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_TokenImpersonationLevel__get_ImpersonationLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.TokenImpersonationLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_ImpersonationLevel(System.Security.Principal.TokenImpersonationLevel)
// docid: M:System.Net.WebRequest.set_ImpersonationLevel(System.Security.Principal.TokenImpersonationLevel)
    open func set_ImpersonationLevel(value : dotnet.System.Security.Principal.TokenImpersonationLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_ImpersonationLevel_0__1__TokenImpersonationLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Method()
// docid: M:System.Net.WebRequest.get_Method
    open func get_Method() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_String__get_Method_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Method(System.String)
// docid: M:System.Net.WebRequest.set_Method(System.String)
    open func set_Method(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_Method_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreAuthenticate()
// docid: M:System.Net.WebRequest.get_PreAuthenticate
    open func get_PreAuthenticate() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_bool__get_PreAuthenticate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreAuthenticate(bool)
// docid: M:System.Net.WebRequest.set_PreAuthenticate(System.Boolean)
    open func set_PreAuthenticate(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_PreAuthenticate_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.IWebProxy get_Proxy()
// docid: M:System.Net.WebRequest.get_Proxy
    open func get_Proxy() throws -> Optional<dotnet.System.Net.IWebProxy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_IWebProxy__get_Proxy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.IWebProxy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Proxy(System.Net.IWebProxy)
// docid: M:System.Net.WebRequest.set_Proxy(System.Net.IWebProxy)
    open func set_Proxy(value : Optional<dotnet.System.Net.IWebProxy>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_Proxy_0__1__IWebProxy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Uri get_RequestUri()
// docid: M:System.Net.WebRequest.get_RequestUri
    open func get_RequestUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_Uri__get_RequestUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Timeout()
// docid: M:System.Net.WebRequest.get_Timeout
    open func get_Timeout() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_i32__get_Timeout_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Timeout(System.Int32)
// docid: M:System.Net.WebRequest.set_Timeout(System.Int32)
    open func set_Timeout(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_Timeout_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseDefaultCredentials()
// docid: M:System.Net.WebRequest.get_UseDefaultCredentials
    open func get_UseDefaultCredentials() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebRequest_bool__get_UseDefaultCredentials_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseDefaultCredentials(bool)
// docid: M:System.Net.WebRequest.set_UseDefaultCredentials(System.Boolean)
    open func set_UseDefaultCredentials(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebRequest_void__set_UseDefaultCredentials_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets values indicating the level of authentication and impersonation used for this request.

    */
    open var AuthenticationLevel : dotnet.System.Net.Security.AuthenticationLevel {
        get {
            return try! get_AuthenticationLevel();
        }
        set(v) {
            return try! set_AuthenticationLevel(value: v);
        }
    }
    /**
    Gets or sets the cache policy for this request.

    */
    open var CachePolicy : Optional<dotnet.System.Net.Cache.RequestCachePolicy> {
        get {
            return try! get_CachePolicy();
        }
        set(v) {
            return try! set_CachePolicy(value: v!);
        }
    }
    /**
    When overridden in a descendant class, gets or sets the name of the connection group for the request.

    */
    open var ConnectionGroupName : Optional<dotnet.System.String> {
        get {
            return try! get_ConnectionGroupName();
        }
        set(v) {
            return try! set_ConnectionGroupName(value: v!);
        }
    }
    /**
    When overridden in a descendant class, gets or sets the content length of the request data being sent.

    */
    open var ContentLength : Swift.Int64 {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v);
        }
    }
    /**
    When overridden in a descendant class, gets or sets the content type of the request data being sent.

    */
    open var ContentType : Optional<dotnet.System.String> {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v!);
        }
    }
    /**
    When overridden in a descendant class, gets or sets the network credentials used for authenticating the request with the Internet resource.

    */
    open var Credentials : Optional<dotnet.System.Net.ICredentials> {
        get {
            return try! get_Credentials();
        }
        set(v) {
            return try! set_Credentials(value: v!);
        }
    }
    /**
    Gets or sets the default cache policy for this request.

    */
    public static var DefaultCachePolicy : Optional<dotnet.System.Net.Cache.RequestCachePolicy> {
        get {
            return try! get_DefaultCachePolicy();
        }
        set(v) {
            return try! set_DefaultCachePolicy(value: v!);
        }
    }
    /**
    Gets or sets the global HTTP proxy.

    */
    public static var DefaultWebProxy : Optional<dotnet.System.Net.IWebProxy> {
        get {
            return try! get_DefaultWebProxy();
        }
        set(v) {
            return try! set_DefaultWebProxy(value: v!);
        }
    }
    /**
    When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request.

    */
    open var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
        set(v) {
            return try! set_Headers(value: v);
        }
    }
    /**
    Gets or sets the impersonation level for the current request.

    */
    open var ImpersonationLevel : dotnet.System.Security.Principal.TokenImpersonationLevel {
        get {
            return try! get_ImpersonationLevel();
        }
        set(v) {
            return try! set_ImpersonationLevel(value: v);
        }
    }
    /**
    When overridden in a descendant class, gets or sets the protocol method to use in this request.

    */
    open var Method : dotnet.System.String {
        get {
            return try! get_Method();
        }
        set(v) {
            return try! set_Method(value: v);
        }
    }
    /**
    When overridden in a descendant class, indicates whether to pre-authenticate the request.

    */
    open var PreAuthenticate : Bool {
        get {
            return try! get_PreAuthenticate();
        }
        set(v) {
            return try! set_PreAuthenticate(value: v);
        }
    }
    /**
    When overridden in a descendant class, gets or sets the network proxy to use to access this Internet resource.

    */
    open var Proxy : Optional<dotnet.System.Net.IWebProxy> {
        get {
            return try! get_Proxy();
        }
        set(v) {
            return try! set_Proxy(value: v!);
        }
    }
    /**
    When overridden in a descendant class, gets the URI of the Internet resource associated with the request.

    */
    open var RequestUri : dotnet.System.Uri {
        get {
            return try! get_RequestUri();
        }
    }
    /**
    Gets or sets the length of time, in milliseconds, before the request times out.

    */
    open var Timeout : Swift.Int32 {
        get {
            return try! get_Timeout();
        }
        set(v) {
            return try! set_Timeout(value: v);
        }
    }
    /**
    When overridden in a descendant class, gets or sets a  value that controls whether  are sent with requests.

    */
    open var UseDefaultCredentials : Bool {
        get {
            return try! get_UseDefaultCredentials();
        }
        set(v) {
            return try! set_UseDefaultCredentials(value: v);
        }
    }
} // WebRequest


// type: System.Net.WebRequestMethods
public struct WebRequestMethods {
} // WebRequestMethods


// type: System.Net.WebRequestMethods+File
public struct WebRequestMethods_File {
    // static field: System.String DownloadFile
    /**
    Represents the FILE GET protocol method that is used to retrieve a file from a specified location.

    */
    public static var DownloadFile : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_File_get_DownloadFile());
            return __return;
        }
    }
    // static field: System.String UploadFile
    /**
    Represents the FILE PUT protocol method that is used to copy a file to a specified location.

    */
    public static var UploadFile : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_File_get_UploadFile());
            return __return;
        }
    }
} // WebRequestMethods_File


// type: System.Net.WebRequestMethods+Ftp
public struct WebRequestMethods_Ftp {
    // static field: System.String AppendFile
    /**
    Represents the FTP APPE protocol method that is used to append a file to an existing file on an FTP server.

    */
    public static var AppendFile : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_AppendFile());
            return __return;
        }
    }
    // static field: System.String DeleteFile
    /**
    Represents the FTP DELE protocol method that is used to delete a file on an FTP server.

    */
    public static var DeleteFile : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_DeleteFile());
            return __return;
        }
    }
    // static field: System.String DownloadFile
    /**
    Represents the FTP RETR protocol method that is used to download a file from an FTP server.

    */
    public static var DownloadFile : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_DownloadFile());
            return __return;
        }
    }
    // static field: System.String GetDateTimestamp
    /**
    Represents the FTP MDTM protocol method that is used to retrieve the date-time stamp from a file on an FTP server.

    */
    public static var GetDateTimestamp : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_GetDateTimestamp());
            return __return;
        }
    }
    // static field: System.String GetFileSize
    /**
    Represents the FTP SIZE protocol method that is used to retrieve the size of a file on an FTP server.

    */
    public static var GetFileSize : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_GetFileSize());
            return __return;
        }
    }
    // static field: System.String ListDirectory
    /**
    Represents the FTP NLIST protocol method that gets a short listing of the files on an FTP server.

    */
    public static var ListDirectory : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_ListDirectory());
            return __return;
        }
    }
    // static field: System.String ListDirectoryDetails
    /**
    Represents the FTP LIST protocol method that gets a detailed listing of the files on an FTP server.

    */
    public static var ListDirectoryDetails : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_ListDirectoryDetails());
            return __return;
        }
    }
    // static field: System.String MakeDirectory
    /**
    Represents the FTP MKD protocol method creates a directory on an FTP server.

    */
    public static var MakeDirectory : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_MakeDirectory());
            return __return;
        }
    }
    // static field: System.String PrintWorkingDirectory
    /**
    Represents the FTP PWD protocol method that prints the name of the current working directory.

    */
    public static var PrintWorkingDirectory : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_PrintWorkingDirectory());
            return __return;
        }
    }
    // static field: System.String RemoveDirectory
    /**
    Represents the FTP RMD protocol method that removes a directory.

    */
    public static var RemoveDirectory : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_RemoveDirectory());
            return __return;
        }
    }
    // static field: System.String Rename
    /**
    Represents the FTP RENAME protocol method that renames a directory.

    */
    public static var Rename : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_Rename());
            return __return;
        }
    }
    // static field: System.String UploadFile
    /**
    Represents the FTP STOR protocol method that uploads a file to an FTP server.

    */
    public static var UploadFile : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_UploadFile());
            return __return;
        }
    }
    // static field: System.String UploadFileWithUniqueName
    /**
    Represents the FTP STOU protocol that uploads a file with a unique name to an FTP server.

    */
    public static var UploadFileWithUniqueName : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Ftp_get_UploadFileWithUniqueName());
            return __return;
        }
    }
} // WebRequestMethods_Ftp


// type: System.Net.WebRequestMethods+Http
public struct WebRequestMethods_Http {
    // static field: System.String Connect
    /**
    Represents the HTTP CONNECT protocol method that is used with a proxy that can dynamically switch to tunneling, as in the case of SSL tunneling.

    */
    public static var Connect : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Http_get_Connect());
            return __return;
        }
    }
    // static field: System.String Get
    /**
    Represents an HTTP GET protocol method.

    */
    public static var Get : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Http_get_Get());
            return __return;
        }
    }
    // static field: System.String Head
    /**
    Represents an HTTP HEAD protocol method. The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body.

    */
    public static var Head : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Http_get_Head());
            return __return;
        }
    }
    // static field: System.String MkCol
    /**
    Represents an HTTP MKCOL request that creates a new collection (such as a collection of pages) at the location specified by the request-Uniform Resource Identifier (URI).

    */
    public static var MkCol : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Http_get_MkCol());
            return __return;
        }
    }
    // static field: System.String Post
    /**
    Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI.

    */
    public static var Post : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Http_get_Post());
            return __return;
        }
    }
    // static field: System.String Put
    /**
    Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI.

    */
    public static var Put : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Net_WebRequestMethods_Http_get_Put());
            return __return;
        }
    }
} // WebRequestMethods_Http


// type: System.Net.WebResponse
    /**
    Provides a response from a Uniform Resource Identifier (URI). This is an  class.

    */
open class WebResponse
    :
    dotnet.System.MarshalByRefObject,
    System_IDisposable,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_WebResponse_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:System.Net.WebResponse.Close
    /**
    When overridden by a descendant class, closes the response stream.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebResponse_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Net.WebResponse.Dispose
    /**
    Releases the unmanaged resources used by the  object.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebResponse_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IO.Stream GetResponseStream()
// docid: M:System.Net.WebResponse.GetResponseStream
    /**
    When overridden in a descendant class, returns the data stream from the Internet resource.

    - Returns: An instance of the  class for reading data from the Internet resource.

    */
    open func GetResponseStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebResponse_Stream__GetResponseStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_ContentLength()
// docid: M:System.Net.WebResponse.get_ContentLength
    open func get_ContentLength() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebResponse_i64__get_ContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_ContentLength(System.Int64)
// docid: M:System.Net.WebResponse.set_ContentLength(System.Int64)
    open func set_ContentLength(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebResponse_void__set_ContentLength_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_ContentType()
// docid: M:System.Net.WebResponse.get_ContentType
    open func get_ContentType() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebResponse_String__get_ContentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ContentType(System.String)
// docid: M:System.Net.WebResponse.set_ContentType(System.String)
    open func set_ContentType(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebResponse_void__set_ContentType_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Net.WebHeaderCollection get_Headers()
// docid: M:System.Net.WebResponse.get_Headers
    open func get_Headers() throws -> dotnet.System.Net.WebHeaderCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebResponse_WebHeaderCollection__get_Headers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.WebHeaderCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsFromCache()
// docid: M:System.Net.WebResponse.get_IsFromCache
    open func get_IsFromCache() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebResponse_bool__get_IsFromCache_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsMutuallyAuthenticated()
// docid: M:System.Net.WebResponse.get_IsMutuallyAuthenticated
    open func get_IsMutuallyAuthenticated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebResponse_bool__get_IsMutuallyAuthenticated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Uri get_ResponseUri()
// docid: M:System.Net.WebResponse.get_ResponseUri
    open func get_ResponseUri() throws -> dotnet.System.Uri {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebResponse_Uri__get_ResponseUri_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Uri(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsHeaders()
// docid: M:System.Net.WebResponse.get_SupportsHeaders
    open func get_SupportsHeaders() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebResponse_bool__get_SupportsHeaders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    When overridden in a descendant class, gets or sets the content length of data being received.

    */
    open var ContentLength : Swift.Int64 {
        get {
            return try! get_ContentLength();
        }
        set(v) {
            return try! set_ContentLength(value: v);
        }
    }
    /**
    When overridden in a derived class, gets or sets the content type of the data being received.

    */
    open var ContentType : dotnet.System.String {
        get {
            return try! get_ContentType();
        }
        set(v) {
            return try! set_ContentType(value: v);
        }
    }
    /**
    When overridden in a derived class, gets a collection of header name-value pairs associated with this request.

    */
    open var Headers : dotnet.System.Net.WebHeaderCollection {
        get {
            return try! get_Headers();
        }
    }
    /**
    Gets a  value that indicates whether this response was obtained from the cache.

    */
    open var IsFromCache : Bool {
        get {
            return try! get_IsFromCache();
        }
    }
    /**
    Gets a  value that indicates whether mutual authentication occurred.

    */
    open var IsMutuallyAuthenticated : Bool {
        get {
            return try! get_IsMutuallyAuthenticated();
        }
    }
    /**
    When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.

    */
    open var ResponseUri : dotnet.System.Uri {
        get {
            return try! get_ResponseUri();
        }
    }
    /**
    Gets a value that indicates if headers are supported.

    */
    open var SupportsHeaders : Bool {
        get {
            return try! get_SupportsHeaders();
        }
    }
} // WebResponse


}
// System.Net.Cache
extension System.Net.Cache {
// type: System.Net.Cache.HttpCacheAgeControl
    /**
    Specifies the meaning of time values that control caching behavior for resources obtained using  objects.

    */
public struct HttpCacheAgeControl : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Cache_HttpCacheAgeControl_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Cache.HttpCacheAgeControl None
    /**
    For internal use only. The Framework will throw an  if you try to use this member.

    */
    public static var None : dotnet.System.Net.Cache.HttpCacheAgeControl {
        get {
        let __return = dotnet.System.Net.Cache.HttpCacheAgeControl(val: System_Net_Cache_HttpCacheAgeControl_get_None());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpCacheAgeControl MinFresh
    /**
    Content can be taken from the cache if the time remaining before expiration is greater than or equal to the time specified with this value.

    */
    public static var MinFresh : dotnet.System.Net.Cache.HttpCacheAgeControl {
        get {
        let __return = dotnet.System.Net.Cache.HttpCacheAgeControl(val: System_Net_Cache_HttpCacheAgeControl_get_MinFresh());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpCacheAgeControl MaxAge
    /**
    Content can be taken from the cache until it is older than the age specified with this value.

    */
    public static var MaxAge : dotnet.System.Net.Cache.HttpCacheAgeControl {
        get {
        let __return = dotnet.System.Net.Cache.HttpCacheAgeControl(val: System_Net_Cache_HttpCacheAgeControl_get_MaxAge());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpCacheAgeControl MaxAgeAndMinFresh
    /**
    
         and .

    */
    public static var MaxAgeAndMinFresh : dotnet.System.Net.Cache.HttpCacheAgeControl {
        get {
        let __return = dotnet.System.Net.Cache.HttpCacheAgeControl(val: System_Net_Cache_HttpCacheAgeControl_get_MaxAgeAndMinFresh());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpCacheAgeControl MaxStale
    /**
    Content can be taken from the cache after it has expired, until the time specified with this value elapses.

    */
    public static var MaxStale : dotnet.System.Net.Cache.HttpCacheAgeControl {
        get {
        let __return = dotnet.System.Net.Cache.HttpCacheAgeControl(val: System_Net_Cache_HttpCacheAgeControl_get_MaxStale());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpCacheAgeControl MaxAgeAndMaxStale
    /**
    
         and .

    */
    public static var MaxAgeAndMaxStale : dotnet.System.Net.Cache.HttpCacheAgeControl {
        get {
        let __return = dotnet.System.Net.Cache.HttpCacheAgeControl(val: System_Net_Cache_HttpCacheAgeControl_get_MaxAgeAndMaxStale());
            return __return;
        }
    }
} // HttpCacheAgeControl


// type: System.Net.Cache.HttpRequestCacheLevel
    /**
    Specifies caching behavior for resources obtained using the Hypertext Transfer protocol (HTTP).

    */
public struct HttpRequestCacheLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_Cache_HttpRequestCacheLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.Cache.HttpRequestCacheLevel Default
    /**
    Satisfies a request for a resource either by using the cached copy of the resource or by sending a request for the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache. This is the cache level that should be used by most applications.

    */
    public static var Default : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_Default());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpRequestCacheLevel BypassCache
    /**
    Satisfies a request by using the server. No entries are taken from caches, added to caches, or removed from caches between the client and server. No entries are taken from caches, added to caches, or removed from caches between the client and server. This is the default cache behavior specified in the machine configuration file that ships with the .NET Framework.

    */
    public static var BypassCache : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_BypassCache());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpRequestCacheLevel CacheOnly
    /**
    Satisfies a request using the locally cached resource; does not send a request for an item that is not in the cache. When this cache policy level is specified, a  exception is thrown if the item is not in the client cache.

    */
    public static var CacheOnly : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_CacheOnly());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpRequestCacheLevel CacheIfAvailable
    /**
    Satisfies a request for a resource from the cache if the resource is available; otherwise, sends a request for a resource to the server. If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.

    */
    public static var CacheIfAvailable : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_CacheIfAvailable());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpRequestCacheLevel Revalidate
    /**
    Compares the copy of the resource in the cache with the copy on the server. If the copy on the server is newer, it is used to satisfy the request and replaces the copy in the cache. If the copy in the cache is the same as the server copy, the cached copy is used. In the HTTP caching protocol, this is achieved using a conditional request.

    */
    public static var Revalidate : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_Revalidate());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpRequestCacheLevel Reload
    /**
    Satisfies a request by using the server. The response might be saved in the cache. In the HTTP caching protocol, this is achieved using the no-cache cache control directive and the no-cache  header.

    */
    public static var Reload : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_Reload());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpRequestCacheLevel NoCacheNoStore
    /**
    Never satisfies a request by using resources from the cache and does not cache resources. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource. In the HTTP caching protocol, this is achieved using the no-cache cache control directive.

    */
    public static var NoCacheNoStore : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_NoCacheNoStore());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpRequestCacheLevel CacheOrNextCacheOnly
    /**
    Satisfies a request for a resource either from the local computer's cache or a remote cache on the local area network. If the request cannot be satisfied, a  exception is thrown. In the HTTP caching protocol, this is achieved using the  cache control directive.

    */
    public static var CacheOrNextCacheOnly : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_CacheOrNextCacheOnly());
            return __return;
        }
    }
    // static field: System.Net.Cache.HttpRequestCacheLevel Refresh
    /**
    Satisfies a request by using the server or a cache other than the local cache. Before the request can be satisfied by an intermediate cache, that cache must revalidate its cached entry with the server. In the HTTP caching protocol, this is achieved using the max-age = 0 cache control directive and the no-cache  header.

    */
    public static var Refresh : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
        let __return = dotnet.System.Net.Cache.HttpRequestCacheLevel(val: System_Net_Cache_HttpRequestCacheLevel_get_Refresh());
            return __return;
        }
    }
} // HttpRequestCacheLevel


// type: System.Net.Cache.HttpRequestCachePolicy
    /**
    Defines an application's caching requirements for resources obtained by using  objects.

    */
open class HttpRequestCachePolicy
    :
    dotnet.System.Net.Cache.RequestCachePolicy
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_Cache_HttpRequestCachePolicy_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.Cache.HttpRequestCachePolicy.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Cache_HttpRequestCachePolicy_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.DateTime)
// docid: M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.DateTime)
    /**
    Initializes a new instance of the  class using the specified cache synchronization date.

    - Parameter cacheSyncDate: A  object that specifies the time when resources stored in the cache must be revalidated.
    */
    public init(cacheSyncDate : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Cache_HttpRequestCachePolicy_ctor_0__1__DateTime(&__thrown, cacheSyncDate.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.Net.Cache.HttpCacheAgeControl, System.TimeSpan)
// TODO COPE ctor (span) .ctor(System.Net.Cache.HttpCacheAgeControl, System.TimeSpan, System.TimeSpan)
// TODO COPE ctor (span) .ctor(System.Net.Cache.HttpCacheAgeControl, System.TimeSpan, System.TimeSpan, System.DateTime)
    // .ctor(System.Net.Cache.HttpRequestCacheLevel)
// docid: M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpRequestCacheLevel)
    /**
    Initializes a new instance of the  class using the specified cache policy.

    - Parameter level: An  value.
    */
    public init(level : dotnet.System.Net.Cache.HttpRequestCacheLevel) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_Cache_HttpRequestCachePolicy_ctor_0__1__HttpRequestCacheLevel(&__thrown, level.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Net.Cache.HttpRequestCachePolicy.ToString
    /**
    Returns a string representation of this instance.

    - Returns: A  value that contains the property values for this instance.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Cache_HttpRequestCachePolicy_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTime get_CacheSyncDate()
// docid: M:System.Net.Cache.HttpRequestCachePolicy.get_CacheSyncDate
    open func get_CacheSyncDate() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Cache_HttpRequestCachePolicy_DateTime__get_CacheSyncDate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.Cache.HttpRequestCacheLevel get_Level()
// docid: M:System.Net.Cache.HttpRequestCachePolicy.get_Level
    open func get_Level() throws -> dotnet.System.Net.Cache.HttpRequestCacheLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Cache_HttpRequestCachePolicy_HttpRequestCacheLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Cache.HttpRequestCacheLevel(val: __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_MaxAge()
// docid: M:System.Net.Cache.HttpRequestCachePolicy.get_MaxAge
    open func get_MaxAge() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Cache_HttpRequestCachePolicy_TimeSpan__get_MaxAge_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_MaxStale()
// docid: M:System.Net.Cache.HttpRequestCachePolicy.get_MaxStale
    open func get_MaxStale() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Cache_HttpRequestCachePolicy_TimeSpan__get_MaxStale_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_MinFresh()
// docid: M:System.Net.Cache.HttpRequestCachePolicy.get_MinFresh
    open func get_MinFresh() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Cache_HttpRequestCachePolicy_TimeSpan__get_MinFresh_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    /**
    Gets the cache synchronization date for this instance.

    */
    open var CacheSyncDate : dotnet.System.DateTime {
        get {
            return try! get_CacheSyncDate();
        }
    }
    /**
    Gets the  value that was specified when this instance was created.

    */
    open var Level : dotnet.System.Net.Cache.HttpRequestCacheLevel {
        get {
            return try! get_Level();
        }
    }
    /**
    Gets the maximum age permitted for a resource returned from the cache.

    */
    open var MaxAge : dotnet.System.TimeSpan {
        get {
            return try! get_MaxAge();
        }
    }
    /**
    Gets the maximum staleness value that is permitted for a resource returned from the cache.

    */
    open var MaxStale : dotnet.System.TimeSpan {
        get {
            return try! get_MaxStale();
        }
    }
    /**
    Gets the minimum freshness that is permitted for a resource returned from the cache.

    */
    open var MinFresh : dotnet.System.TimeSpan {
        get {
            return try! get_MinFresh();
        }
    }
} // HttpRequestCachePolicy


}



public protocol System_Net_IAuthenticationModule
    :
    SGBridgeGetHandle
{
}

public protocol System_Net_ICredentialPolicy
    :
    SGBridgeGetHandle
{
}

public protocol System_Net_IWebRequestCreate
    :
    SGBridgeGetHandle
{
}

