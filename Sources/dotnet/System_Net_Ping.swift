// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
// System.Net.NetworkInformation
extension System.Net.NetworkInformation {
// type: System.Net.NetworkInformation.IPStatus
    /**
    Reports the status of sending an Internet Control Message Protocol (ICMP) echo message to a computer.

    */
public struct IPStatus : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_IPStatus_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.NetworkInformation.IPStatus Unknown
    /**
    The ICMP echo request failed for an unknown reason.

    */
    public static var Unknown : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_Unknown());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus Success
    /**
    The ICMP echo request succeeded; an ICMP echo reply was received. When you get this status code, the other  properties contain valid data.

    */
    public static var Success : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_Success());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus DestinationNetworkUnreachable
    /**
    The ICMP echo request failed because the network that contains the destination computer is not reachable.

    */
    public static var DestinationNetworkUnreachable : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_DestinationNetworkUnreachable());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus DestinationHostUnreachable
    /**
    The ICMP echo request failed because the destination computer is not reachable.

    */
    public static var DestinationHostUnreachable : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_DestinationHostUnreachable());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus DestinationProhibited
    /**
    The ICMPv6 echo request failed because contact with the destination computer is administratively prohibited. This value applies only to IPv6.

    */
    public static var DestinationProhibited : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_DestinationProhibited());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus DestinationProtocolUnreachable
    /**
    The ICMP echo request failed because the destination computer that is specified in an ICMP echo message is not reachable, because it does not support the packet's protocol. This value applies only to IPv4. This value is described in IETF RFC 1812 as Communication Administratively Prohibited.

    */
    public static var DestinationProtocolUnreachable : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_DestinationProtocolUnreachable());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus DestinationPortUnreachable
    /**
    The ICMP echo request failed because the port on the destination computer is not available.

    */
    public static var DestinationPortUnreachable : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_DestinationPortUnreachable());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus NoResources
    /**
    The ICMP echo request failed because of insufficient network resources.

    */
    public static var NoResources : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_NoResources());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus BadOption
    /**
    The ICMP echo request failed because it contains an invalid option.

    */
    public static var BadOption : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_BadOption());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus HardwareError
    /**
    The ICMP echo request failed because of a hardware error.

    */
    public static var HardwareError : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_HardwareError());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus PacketTooBig
    /**
    The ICMP echo request failed because the packet containing the request is larger than the maximum transmission unit (MTU) of a node (router or gateway) located between the source and destination. The MTU defines the maximum size of a transmittable packet.

    */
    public static var PacketTooBig : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_PacketTooBig());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus TimedOut
    /**
    The ICMP echo Reply was not received within the allotted time. The default time allowed for replies is 5 seconds. You can change this value using the  or  methods that take a  parameter.

    */
    public static var TimedOut : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_TimedOut());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus BadRoute
    /**
    The ICMP echo request failed because there is no valid route between the source and destination computers.

    */
    public static var BadRoute : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_BadRoute());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus TtlExpired
    /**
    The ICMP echo request failed because its Time to Live (TTL) value reached zero, causing the forwarding node (router or gateway) to discard the packet.

    */
    public static var TtlExpired : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_TtlExpired());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus TtlReassemblyTimeExceeded
    /**
    The ICMP echo request failed because the packet was divided into fragments for transmission and all of the fragments were not received within the time allotted for reassembly. RFC 2460 specifies 60 seconds as the time limit within which all packet fragments must be received.

    */
    public static var TtlReassemblyTimeExceeded : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_TtlReassemblyTimeExceeded());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus ParameterProblem
    /**
    The ICMP echo request failed because a node (router or gateway) encountered problems while processing the packet header. This is the status if, for example, the header contains invalid field data or an unrecognized option.

    */
    public static var ParameterProblem : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_ParameterProblem());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus SourceQuench
    /**
    The ICMP echo request failed because the packet was discarded. This occurs when the source computer's output queue has insufficient storage space, or when packets arrive at the destination too quickly to be processed.

    */
    public static var SourceQuench : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_SourceQuench());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus BadDestination
    /**
    The ICMP echo request failed because the destination IP address cannot receive ICMP echo requests or should never appear in the destination address field of any IP datagram. For example, calling  and specifying IP address "000.0.0.0" returns this status.

    */
    public static var BadDestination : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_BadDestination());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus DestinationUnreachable
    /**
    The ICMP echo request failed because the destination computer that is specified in an ICMP echo message is not reachable; the exact cause of problem is unknown.

    */
    public static var DestinationUnreachable : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_DestinationUnreachable());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus TimeExceeded
    /**
    The ICMP echo request failed because its Time to Live (TTL) value reached zero, causing the forwarding node (router or gateway) to discard the packet.

    */
    public static var TimeExceeded : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_TimeExceeded());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus BadHeader
    /**
    The ICMP echo request failed because the header is invalid.

    */
    public static var BadHeader : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_BadHeader());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus UnrecognizedNextHeader
    /**
    The ICMP echo request failed because the Next Header field does not contain a recognized value. The Next Header field indicates the extension header type (if present) or the protocol above the IP layer, for example, TCP or UDP.

    */
    public static var UnrecognizedNextHeader : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_UnrecognizedNextHeader());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus IcmpError
    /**
    The ICMP echo request failed because of an ICMP protocol error.

    */
    public static var IcmpError : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_IcmpError());
            return __return;
        }
    }
    // static field: System.Net.NetworkInformation.IPStatus DestinationScopeMismatch
    /**
    The ICMP echo request failed because the source address and destination address that are specified in an ICMP echo message are not in the same scope. This is typically caused by a router forwarding a packet using an interface that is outside the scope of the source address. Address scopes (link-local, site-local, and global scope) determine where on the network an address is valid.

    */
    public static var DestinationScopeMismatch : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
        let __return = dotnet.System.Net.NetworkInformation.IPStatus(val: System_Net_NetworkInformation_IPStatus_get_DestinationScopeMismatch());
            return __return;
        }
    }
} // IPStatus


// type: System.Net.NetworkInformation.Ping
    /**
    Allows an application to determine whether a remote computer is accessible over the network.

    */
open class Ping
    :
    dotnet.System.ComponentModel.Component
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_Ping_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.NetworkInformation.Ping.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_Ping_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Net.NetworkInformation.PingReply Send(System.Net.IPAddress)
// docid: M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)
    /**
    Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified , and receive a corresponding ICMP echo reply message from that computer.

    - Parameter address: An  that identifies the computer that is the destination for the ICMP echo message.
    - Returns: A  object that provides information about the ICMP echo reply message, if one was received, or describes the reason for the failure if no message was received.

    */
    open func Send(address : dotnet.System.Net.IPAddress) throws -> dotnet.System.Net.NetworkInformation.PingReply {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_PingReply__Send_0__1__IPAddress(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PingReply(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.PingReply Send(System.Net.IPAddress, System.Int32)
// docid: M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)
    /**
    Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified , and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.

    - Parameter address: An  that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Returns: A  object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.

    */
    open func Send(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32) throws -> dotnet.System.Net.NetworkInformation.PingReply {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_PingReply__Send_0__2__IPAddress_i32(&__thrown, self.get_handle(), address.get_handle(), timeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PingReply(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.PingReply Send(System.Net.IPAddress, System.Int32, System.Byte[])
// docid: M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])
    /**
    Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified , and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.

    - Parameter address: An  that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Returns: A  object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return  if the packet exceeds the Maximum Transmission Unit (MTU).

    */
    open func Send(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Net.NetworkInformation.PingReply {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_PingReply__Send_0__3__IPAddress_i32_u8Array(&__thrown, self.get_handle(), address.get_handle(), timeout, buffer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PingReply(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.PingReply Send(System.Net.IPAddress, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)
// docid: M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
    /**
    Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified  and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.

    - Parameter address: An  that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Parameter options: A  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.
    - Returns: A  object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return  if the packet exceeds the Maximum Transmission Unit (MTU).

    */
    open func Send(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>, options : Optional<dotnet.System.Net.NetworkInformation.PingOptions>) throws -> dotnet.System.Net.NetworkInformation.PingReply {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_PingReply__Send_0__4__IPAddress_i32_u8Array_PingOptions(&__thrown, self.get_handle(), address.get_handle(), timeout, buffer.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PingReply(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.PingReply Send(System.String)
// docid: M:System.Net.NetworkInformation.Ping.Send(System.String)
    /**
    Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.

    - Parameter hostNameOrAddress: A  that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Returns: A  object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.

    */
    open func Send(hostNameOrAddress : dotnet.System.String) throws -> dotnet.System.Net.NetworkInformation.PingReply {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_PingReply__Send_0__1__String(&__thrown, self.get_handle(), hostNameOrAddress.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PingReply(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.PingReply Send(System.String, System.Int32)
// docid: M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)
    /**
    Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.

    - Parameter hostNameOrAddress: A  that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Returns: A  object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.

    */
    open func Send(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32) throws -> dotnet.System.Net.NetworkInformation.PingReply {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_PingReply__Send_0__2__String_i32(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PingReply(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.PingReply Send(System.String, System.Int32, System.Byte[])
// docid: M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])
    /**
    Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.

    - Parameter hostNameOrAddress: A  that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Returns: A  object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.

    */
    open func Send(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Net.NetworkInformation.PingReply {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_PingReply__Send_0__3__String_i32_u8Array(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout, buffer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PingReply(hndl : __return);
        }
    }
    // System.Net.NetworkInformation.PingReply Send(System.String, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)
// docid: M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
    /**
    Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.

    - Parameter hostNameOrAddress: A  that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Parameter options: A  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.
    - Returns: A  object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.

    */
    open func Send(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>, options : Optional<dotnet.System.Net.NetworkInformation.PingOptions>) throws -> dotnet.System.Net.NetworkInformation.PingReply {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_PingReply__Send_0__4__String_i32_u8Array_PingOptions(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout, buffer.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.PingReply(hndl : __return);
        }
    }
    // void SendAsync(System.Net.IPAddress, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions, System.Object)
// docid: M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)
    /**
    Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified , and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.

    - Parameter address: An  that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Parameter options: A  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.
    - Parameter userToken: An object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>, options : Optional<dotnet.System.Net.NetworkInformation.PingOptions>, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsync_0__5__IPAddress_i32_u8Array_PingOptions_Object(&__thrown, self.get_handle(), address.get_handle(), timeout, buffer.get_handle(), options?.get_handle() ?? nil, userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.Net.IPAddress, System.Int32, System.Byte[], System.Object)
// docid: M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)
    /**
    Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified , and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.

    - Parameter address: An  that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Parameter userToken: An object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsync_0__4__IPAddress_i32_u8Array_Object(&__thrown, self.get_handle(), address.get_handle(), timeout, buffer.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.Net.IPAddress, System.Int32, System.Object)
// docid: M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)
    /**
    Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified , and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.

    - Parameter address: An  that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter userToken: An object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsync_0__3__IPAddress_i32_Object(&__thrown, self.get_handle(), address.get_handle(), timeout, userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.Net.IPAddress, System.Object)
// docid: M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)
    /**
    Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified , and receive a corresponding ICMP echo reply message from that computer.

    - Parameter address: An  that identifies the computer that is the destination for the ICMP echo message.
    - Parameter userToken: An object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(address : dotnet.System.Net.IPAddress, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsync_0__2__IPAddress_Object(&__thrown, self.get_handle(), address.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.String, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions, System.Object)
// docid: M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)
    /**
    Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.

    - Parameter hostNameOrAddress: A  that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Parameter options: A  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.
    - Parameter userToken: An object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>, options : Optional<dotnet.System.Net.NetworkInformation.PingOptions>, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsync_0__5__String_i32_u8Array_PingOptions_Object(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout, buffer.get_handle(), options?.get_handle() ?? nil, userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.String, System.Int32, System.Byte[], System.Object)
// docid: M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)
    /**
    Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.

    - Parameter hostNameOrAddress: A  that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Parameter userToken: An object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsync_0__4__String_i32_u8Array_Object(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout, buffer.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.String, System.Int32, System.Object)
// docid: M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)
    /**
    Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.

    - Parameter hostNameOrAddress: A  that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: An  value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter userToken: An object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsync_0__3__String_i32_Object(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout, userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsync(System.String, System.Object)
// docid: M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)
    /**
    Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.

    - Parameter hostNameOrAddress: A  that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter userToken: An object that is passed to the method invoked when the asynchronous operation completes.
    */
    open func SendAsync(hostNameOrAddress : dotnet.System.String, userToken : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsync_0__2__String_Object(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), userToken?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SendAsyncCancel()
// docid: M:System.Net.NetworkInformation.Ping.SendAsyncCancel
    /**
    Cancels all pending asynchronous requests to send an Internet Control Message Protocol (ICMP) echo message and receives a corresponding ICMP echo reply message.

    */
    open func SendAsyncCancel() throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__SendAsyncCancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.Net.IPAddress)
// docid: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)
    /**
    Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified , and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.

    - Parameter address: An IP address that identifies the computer that is the destination for the ICMP echo message.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendPingAsync(address : dotnet.System.Net.IPAddress) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_System_Threading_Tasks_Task_System_Net_NetworkInformation_PingReply___SendPingAsync_0__1__IPAddress(&__thrown, self.get_handle(), address.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.Net.IPAddress, System.Int32)
// docid: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)
    /**
    Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified , and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.

    - Parameter address: An IP address that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendPingAsync(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_System_Threading_Tasks_Task_System_Net_NetworkInformation_PingReply___SendPingAsync_0__2__IPAddress_i32(&__thrown, self.get_handle(), address.get_handle(), timeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte[])
// docid: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])
    /**
    Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified , and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.

    - Parameter address: An IP address that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendPingAsync(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_System_Threading_Tasks_Task_System_Net_NetworkInformation_PingReply___SendPingAsync_0__3__IPAddress_i32_u8Array(&__thrown, self.get_handle(), address.get_handle(), timeout, buffer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)
// docid: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
    /**
    Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified , and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.

    - Parameter address: An IP address that identifies the computer that is the destination for the ICMP echo message.
    - Parameter timeout: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Parameter options: A  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendPingAsync(address : dotnet.System.Net.IPAddress, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>, options : Optional<dotnet.System.Net.NetworkInformation.PingOptions>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_System_Threading_Tasks_Task_System_Net_NetworkInformation_PingReply___SendPingAsync_0__4__IPAddress_i32_u8Array_PingOptions(&__thrown, self.get_handle(), address.get_handle(), timeout, buffer.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.String)
// docid: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)
    /**
    Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.

    - Parameter hostNameOrAddress: The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendPingAsync(hostNameOrAddress : dotnet.System.String) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_System_Threading_Tasks_Task_System_Net_NetworkInformation_PingReply___SendPingAsync_0__1__String(&__thrown, self.get_handle(), hostNameOrAddress.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.String, System.Int32)
// docid: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)
    /**
    Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.

    - Parameter hostNameOrAddress: The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendPingAsync(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_System_Threading_Tasks_Task_System_Net_NetworkInformation_PingReply___SendPingAsync_0__2__String_i32(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.String, System.Int32, System.Byte[])
// docid: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])
    /**
    Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.

    - Parameter hostNameOrAddress: The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendPingAsync(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_System_Threading_Tasks_Task_System_Net_NetworkInformation_PingReply___SendPingAsync_0__3__String_i32_u8Array(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout, buffer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.String, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)
// docid: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)
    /**
    Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.

    - Parameter hostNameOrAddress: The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.
    - Parameter timeout: The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.
    - Parameter buffer: A  array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.
    - Parameter options: A  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.
    - Returns: The task object representing the asynchronous operation.

    */
    open func SendPingAsync(hostNameOrAddress : dotnet.System.String, timeout : Swift.Int32, buffer : dotnet.System_Arr<Swift.UInt8>, options : Optional<dotnet.System.Net.NetworkInformation.PingOptions>) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_Ping_System_Threading_Tasks_Task_System_Net_NetworkInformation_PingReply___SendPingAsync_0__4__String_i32_u8Array_PingOptions(&__thrown, self.get_handle(), hostNameOrAddress.get_handle(), timeout, buffer.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // [IsSpecialName] void add_PingCompleted(System.Net.NetworkInformation.PingCompletedEventHandler)
// docid: M:System.Net.NetworkInformation.Ping.add_PingCompleted(System.Net.NetworkInformation.PingCompletedEventHandler)
    open func add_PingCompleted(value : Optional<dotnet.System.Net.NetworkInformation.PingCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__add_PingCompleted_0__1__PingCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_PingCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.NetworkInformation.PingCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.NetworkInformation.PingCompletedEventHandler(value);
        return try add_PingCompleted(value: del_value);
    }
    // [IsSpecialName] void remove_PingCompleted(System.Net.NetworkInformation.PingCompletedEventHandler)
// docid: M:System.Net.NetworkInformation.Ping.remove_PingCompleted(System.Net.NetworkInformation.PingCompletedEventHandler)
    open func remove_PingCompleted(value : Optional<dotnet.System.Net.NetworkInformation.PingCompletedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_Ping_void__remove_PingCompleted_0__1__PingCompletedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_PingCompleted(value : @escaping (dotnet.System.Object, dotnet.System.Net.NetworkInformation.PingCompletedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Net.NetworkInformation.PingCompletedEventHandler(value);
        return try remove_PingCompleted(value: del_value);
    }
} // Ping


// type: System.Net.NetworkInformation.PingCompletedEventArgs
    /**
    Provides data for the  event.

    */
open class PingCompletedEventArgs
    :
    dotnet.System.ComponentModel.AsyncCompletedEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_PingCompletedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.NetworkInformation.PingReply get_Reply()
// docid: M:System.Net.NetworkInformation.PingCompletedEventArgs.get_Reply
    open func get_Reply() throws -> Optional<dotnet.System.Net.NetworkInformation.PingReply> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingCompletedEventArgs_PingReply__get_Reply_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.NetworkInformation.PingReply(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets an object that contains data that describes an attempt to send an Internet Control Message Protocol (ICMP) echo request message and receive a corresponding ICMP echo reply message.

    */
    open var Reply : Optional<dotnet.System.Net.NetworkInformation.PingReply> {
        get {
            return try! get_Reply();
        }
    }
} // PingCompletedEventArgs


// type: System.Net.NetworkInformation.PingCompletedEventHandler
    /**
    Represents the method that will handle the  event of a  object.

    */
public final class PingCompletedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_PingCompletedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Net.NetworkInformation.PingCompletedEventArgs)
// docid: M:System.Net.NetworkInformation.PingCompletedEventHandler.Invoke(System.Object,System.Net.NetworkInformation.PingCompletedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Net.NetworkInformation.PingCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_PingCompletedEventHandler_void__Invoke_0__2__Object_PingCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Net.NetworkInformation.PingCompletedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Net.NetworkInformation.PingCompletedEventHandler.BeginInvoke(System.Object,System.Net.NetworkInformation.PingCompletedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Net.NetworkInformation.PingCompletedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingCompletedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_PingCompletedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Net.NetworkInformation.PingCompletedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_PingCompletedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Net.NetworkInformation.PingCompletedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Net.NetworkInformation.PingCompletedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_PingCompletedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Net.NetworkInformation.PingCompletedEventArgs)
// docid: M:System.Net.NetworkInformation.PingCompletedEventHandler.Invoke(System.Object,System.Net.NetworkInformation.PingCompletedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Net.NetworkInformation.PingCompletedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_PingCompletedEventHandler_void__Invoke_0__2__Object_PingCompletedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PingCompletedEventHandler


// type: System.Net.NetworkInformation.PingException
    /**
    The exception that is thrown when a  or  method calls a method that throws an exception.

    */
open class PingException
    :
    dotnet.System.InvalidOperationException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_PingException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Net.NetworkInformation.PingException.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified message.

    - Parameter message: A  that describes the error.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_PingException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Net.NetworkInformation.PingException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class using the specified message and inner exception.

    - Parameter message: A  that describes the error.
    - Parameter innerException: The exception that causes the current exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_PingException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // PingException


// type: System.Net.NetworkInformation.PingOptions
    /**
    Used to control how  data packets are transmitted.

    */
open class PingOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_PingOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.NetworkInformation.PingOptions.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_PingOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, bool)
// docid: M:System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)
    /**
    Initializes a new instance of the  class and sets the Time to Live and fragmentation values.

    - Parameter ttl: An  value greater than zero that specifies the number of times that the  data packets can be forwarded.
    - Parameter dontFragment: 
         to prevent data sent to the remote host from being fragmented; otherwise, .
    */
    public init(ttl : Swift.Int32, dontFragment : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_NetworkInformation_PingOptions_ctor_0__2__i32_bool(&__thrown, ttl, Swift.Int32(dontFragment ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_DontFragment()
// docid: M:System.Net.NetworkInformation.PingOptions.get_DontFragment
    open func get_DontFragment() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingOptions_bool__get_DontFragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_DontFragment(bool)
// docid: M:System.Net.NetworkInformation.PingOptions.set_DontFragment(System.Boolean)
    open func set_DontFragment(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_PingOptions_void__set_DontFragment_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Ttl()
// docid: M:System.Net.NetworkInformation.PingOptions.get_Ttl
    open func get_Ttl() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingOptions_i32__get_Ttl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Ttl(System.Int32)
// docid: M:System.Net.NetworkInformation.PingOptions.set_Ttl(System.Int32)
    open func set_Ttl(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Net_NetworkInformation_PingOptions_void__set_Ttl_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a  value that controls fragmentation of the data sent to the remote host.

    */
    open var DontFragment : Bool {
        get {
            return try! get_DontFragment();
        }
        set(v) {
            return try! set_DontFragment(value: v);
        }
    }
    /**
    Gets or sets the number of routing nodes that can forward the  data before it is discarded.

    */
    open var Ttl : Swift.Int32 {
        get {
            return try! get_Ttl();
        }
        set(v) {
            return try! set_Ttl(value: v);
        }
    }
} // PingOptions


// type: System.Net.NetworkInformation.PingReply
    /**
    Provides information about the status and data resulting from a  or  operation.

    */
open class PingReply
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_NetworkInformation_PingReply_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Net.IPAddress get_Address()
// docid: M:System.Net.NetworkInformation.PingReply.get_Address
    open func get_Address() throws -> dotnet.System.Net.IPAddress {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingReply_IPAddress__get_Address_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.IPAddress(hndl : __return);
        }
    }
    // [IsSpecialName] System.Byte[] get_Buffer()
// docid: M:System.Net.NetworkInformation.PingReply.get_Buffer
    open func get_Buffer() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingReply_u8Array__get_Buffer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.PingOptions get_Options()
// docid: M:System.Net.NetworkInformation.PingReply.get_Options
    open func get_Options() throws -> Optional<dotnet.System.Net.NetworkInformation.PingOptions> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingReply_PingOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Net.NetworkInformation.PingOptions(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int64 get_RoundtripTime()
// docid: M:System.Net.NetworkInformation.PingReply.get_RoundtripTime
    open func get_RoundtripTime() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingReply_i64__get_RoundtripTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Net.NetworkInformation.IPStatus get_Status()
// docid: M:System.Net.NetworkInformation.PingReply.get_Status
    open func get_Status() throws -> dotnet.System.Net.NetworkInformation.IPStatus {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_NetworkInformation_PingReply_IPStatus__get_Status_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.NetworkInformation.IPStatus(val: __return);
        }
    }
    /**
    Gets the address of the host that sends the Internet Control Message Protocol (ICMP) echo reply.

    */
    open var Address : dotnet.System.Net.IPAddress {
        get {
            return try! get_Address();
        }
    }
    /**
    Gets the buffer of data received in an Internet Control Message Protocol (ICMP) echo reply message.

    */
    open var Buffer : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_Buffer();
        }
    }
    /**
    Gets the options used to transmit the reply to an Internet Control Message Protocol (ICMP) echo request.

    */
    open var Options : Optional<dotnet.System.Net.NetworkInformation.PingOptions> {
        get {
            return try! get_Options();
        }
    }
    /**
    Gets the number of milliseconds taken to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.

    */
    open var RoundtripTime : Swift.Int64 {
        get {
            return try! get_RoundtripTime();
        }
    }
    /**
    Gets the status of an attempt to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.

    */
    open var Status : dotnet.System.Net.NetworkInformation.IPStatus {
        get {
            return try! get_Status();
        }
    }
} // PingReply


}



