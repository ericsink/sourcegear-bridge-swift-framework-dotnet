// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Diagnostics
extension System.Diagnostics {
// type: System.Diagnostics.ConsoleTraceListener
    /**
    Directs tracing or debugging output to either the standard output or the standard error stream.

    */
open class ConsoleTraceListener
    :
    dotnet.System.Diagnostics.TextWriterTraceListener
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ConsoleTraceListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.ConsoleTraceListener.#ctor
    /**
    Initializes a new instance of the  class with trace output written to the standard output stream.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ConsoleTraceListener_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class with an option to write trace output to the standard output stream or the standard error stream.

    - Parameter useErrorStream: 
         to write tracing and debugging output to the standard error stream;  to write tracing and debugging output to the standard output stream.
    */
    public init(useErrorStream : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ConsoleTraceListener_ctor_0__1__bool(&__thrown, Swift.Int32(useErrorStream ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Diagnostics.ConsoleTraceListener.Close
    /**
    Closes the output to the stream specified for this trace listener.

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ConsoleTraceListener_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ConsoleTraceListener


// type: System.Diagnostics.DelimitedListTraceListener
    /**
    Directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream.

    */
open class DelimitedListTraceListener
    :
    dotnet.System.Diagnostics.TextWriterTraceListener
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DelimitedListTraceListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream)
// docid: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)
    /**
    Initializes a new instance of the  class that writes to the specified output stream.

    - Parameter stream: The  to receive the output.
    */
    public override init(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DelimitedListTraceListener_ctor_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.String)
// docid: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)
    /**
    Initializes a new instance of the  class that writes to the specified output stream and has the specified name.

    - Parameter stream: The  to receive the output.
    - Parameter name: The name of the new instance of the trace listener.
    */
    public override init(stream : dotnet.System.IO.Stream, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DelimitedListTraceListener_ctor_0__2__Stream_String(&__thrown, stream.get_handle(), name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextWriter)
// docid: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)
    /**
    Initializes a new instance of the  class that writes to the specified text writer.

    - Parameter writer: The  to receive the output.
    */
    public override init(writer : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DelimitedListTraceListener_ctor_0__1__TextWriter(&__thrown, writer.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextWriter, System.String)
// docid: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)
    /**
    Initializes a new instance of the  class that writes to the specified text writer and has the specified name.

    - Parameter writer: The  to receive the output.
    - Parameter name: The name of the new instance of the trace listener.
    */
    public override init(writer : dotnet.System.IO.TextWriter, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DelimitedListTraceListener_ctor_0__2__TextWriter_String(&__thrown, writer.get_handle(), name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String)
    /**
    Initializes a new instance of the  class that writes to the specified file.

    - Parameter fileName: The name of the file to receive the output.
    */
    public override init(fileName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DelimitedListTraceListener_ctor_0__1__String(&__thrown, fileName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class that writes to the specified file and has the specified name.

    - Parameter fileName: The name of the file to receive the output.
    - Parameter name: The name of the new instance of the trace listener.
    */
    public override init(fileName : Optional<dotnet.System.String>, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DelimitedListTraceListener_ctor_0__2__String_String(&__thrown, fileName?.get_handle() ?? nil, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)
// docid: M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
    /**
    Writes trace information, a data object, and event information to the output file or stream.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    - Parameter data: A data object to write to the output file or stream.
    */
    open override func TraceData(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DelimitedListTraceListener_void__TraceData_0__5__TraceEventCache_String_TraceEventType_i32_Object(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])
// docid: M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
    /**
    Writes trace information, an array of data objects, and event information to the output file or stream.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    - Parameter data: An array of data objects to write to the output file or stream.
    */
    open override func TraceData(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DelimitedListTraceListener_void__TraceData_0__5__TraceEventCache_String_TraceEventType_i32_ObjectArray(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)
// docid: M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
    /**
    Writes trace information, a message, and event information to the output file or stream.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    - Parameter message: The trace message to write to the output file or stream.
    */
    open override func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DelimitedListTraceListener_void__TraceEvent_0__5__TraceEventCache_String_TraceEventType_i32_String(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])
// docid: M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
    /**
    Writes trace information, a formatted array of objects, and event information to the output file or stream.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    - Parameter format: A format string that contains zero or more format items that correspond to objects in the  array.
    - Parameter args: An array containing zero or more objects to format.
    */
    open override func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, format : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DelimitedListTraceListener_void__TraceEvent_0__6__TraceEventCache_String_TraceEventType_i32_String_ObjectArray(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, format?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Delimiter()
// docid: M:System.Diagnostics.DelimitedListTraceListener.get_Delimiter
    open func get_Delimiter() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DelimitedListTraceListener_String__get_Delimiter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Delimiter(System.String)
// docid: M:System.Diagnostics.DelimitedListTraceListener.set_Delimiter(System.String)
    open func set_Delimiter(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DelimitedListTraceListener_void__set_Delimiter_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the delimiter for the delimited list.

    */
    open var Delimiter : dotnet.System.String {
        get {
            return try! get_Delimiter();
        }
        set(v) {
            return try! set_Delimiter(value: v);
        }
    }
} // DelimitedListTraceListener


// type: System.Diagnostics.TextWriterTraceListener
    /**
    Directs tracing or debugging output to a  or to a , such as .

    */
open class TextWriterTraceListener
    :
    dotnet.System.Diagnostics.TraceListener
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TextWriterTraceListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.TextWriterTraceListener.#ctor
    /**
    Initializes a new instance of the  class with  as the output recipient.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TextWriterTraceListener_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream)
// docid: M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)
    /**
    Initializes a new instance of the  class, using the stream as the recipient of the debugging and tracing output.

    - Parameter stream: A  that represents the stream the  writes to.
    */
    public init(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TextWriterTraceListener_ctor_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.String)
// docid: M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)
    /**
    Initializes a new instance of the  class with the specified name, using the stream as the recipient of the debugging and tracing output.

    - Parameter stream: A  that represents the stream the  writes to.
    - Parameter name: The name of the new instance.
    */
    public init(stream : dotnet.System.IO.Stream, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TextWriterTraceListener_ctor_0__2__Stream_String(&__thrown, stream.get_handle(), name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextWriter)
// docid: M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)
    /**
    Initializes a new instance of the  class using the specified writer as recipient of the tracing or debugging output.

    - Parameter writer: A  that receives the output from the .
    */
    public init(writer : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TextWriterTraceListener_ctor_0__1__TextWriter(&__thrown, writer.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextWriter, System.String)
// docid: M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)
    /**
    Initializes a new instance of the  class with the specified name, using the specified writer as recipient of the tracing or debugging output.

    - Parameter writer: A  that receives the output from the .
    - Parameter name: The name of the new instance.
    */
    public init(writer : dotnet.System.IO.TextWriter, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TextWriterTraceListener_ctor_0__2__TextWriter_String(&__thrown, writer.get_handle(), name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)
    /**
    Initializes a new instance of the  class, using the file as the recipient of the debugging and tracing output.

    - Parameter fileName: The name of the file the  writes to.
    */
    public init(fileName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TextWriterTraceListener_ctor_0__1__String(&__thrown, fileName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified name, using the file as the recipient of the debugging and tracing output.

    - Parameter fileName: The name of the file the  writes to.
    - Parameter name: The name of the new instance.
    */
    public init(fileName : Optional<dotnet.System.String>, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TextWriterTraceListener_ctor_0__2__String_String(&__thrown, fileName?.get_handle() ?? nil, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Diagnostics.TextWriterTraceListener.Close
    /**
    Closes the  so that it no longer receives tracing or debugging output.

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TextWriterTraceListener_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:System.Diagnostics.TextWriterTraceListener.Flush
    /**
    Flushes the output buffer for the .

    */
    open override func Flush() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TextWriterTraceListener_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String)
// docid: M:System.Diagnostics.TextWriterTraceListener.Write(System.String)
    /**
    Writes a message to this instance's .

    - Parameter message: A message to write.
    */
    open override func Write(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TextWriterTraceListener_void__Write_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String)
// docid: M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)
    /**
    Writes a message to this instance's  followed by a line terminator. The default line terminator is a carriage return followed by a line feed (\r\n).

    - Parameter message: A message to write.
    */
    open override func WriteLine(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TextWriterTraceListener_void__WriteLine_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.TextWriter get_Writer()
// docid: M:System.Diagnostics.TextWriterTraceListener.get_Writer
    open func get_Writer() throws -> Optional<dotnet.System.IO.TextWriter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TextWriterTraceListener_TextWriter__get_Writer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IO.TextWriter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Writer(System.IO.TextWriter)
// docid: M:System.Diagnostics.TextWriterTraceListener.set_Writer(System.IO.TextWriter)
    open func set_Writer(value : Optional<dotnet.System.IO.TextWriter>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TextWriterTraceListener_void__set_Writer_0__1__TextWriter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the text writer that receives the tracing or debugging output.

    */
    open var Writer : Optional<dotnet.System.IO.TextWriter> {
        get {
            return try! get_Writer();
        }
        set(v) {
            return try! set_Writer(value: v!);
        }
    }
} // TextWriterTraceListener


// type: System.Diagnostics.XmlWriterTraceListener
    /**
    Directs tracing or debugging output as XML-encoded data to a  or to a , such as a .

    */
open class XmlWriterTraceListener
    :
    dotnet.System.Diagnostics.TextWriterTraceListener
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_XmlWriterTraceListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream)
// docid: M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)
    /**
    Initializes a new instance of the  class, using the specified stream as the recipient of the debugging and tracing output.

    - Parameter stream: A  that represents the stream the trace listener writes to.
    */
    public override init(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_XmlWriterTraceListener_ctor_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.String)
// docid: M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)
    /**
    Initializes a new instance of the  class with the specified name, using the specified stream as the recipient of the debugging and tracing output.

    - Parameter stream: A  that represents the stream the trace listener writes to.
    - Parameter name: The name of the new instance.
    */
    public override init(stream : dotnet.System.IO.Stream, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_XmlWriterTraceListener_ctor_0__2__Stream_String(&__thrown, stream.get_handle(), name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextWriter)
// docid: M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)
    /**
    Initializes a new instance of the  class using the specified writer as the recipient of the debugging and tracing output.

    - Parameter writer: A  that receives the output from the trace listener.
    */
    public override init(writer : dotnet.System.IO.TextWriter) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_XmlWriterTraceListener_ctor_0__1__TextWriter(&__thrown, writer.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.TextWriter, System.String)
// docid: M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)
    /**
    Initializes a new instance of the  class with the specified name, using the specified writer as the recipient of the debugging and tracing output.

    - Parameter writer: A  that receives the output from the trace listener.
    - Parameter name: The name of the new instance.
    */
    public override init(writer : dotnet.System.IO.TextWriter, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_XmlWriterTraceListener_ctor_0__2__TextWriter_String(&__thrown, writer.get_handle(), name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)
    /**
    Initializes a new instance of the  class, using the specified file as the recipient of the debugging and tracing output.

    - Parameter filename: The name of the file to write to.
    */
    public init(filename : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_XmlWriterTraceListener_ctor_0__1__String(&__thrown, filename?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified name, using the specified file as the recipient of the debugging and tracing output.

    - Parameter filename: The name of the file to write to.
    - Parameter name: The name of the new instance.
    */
    public init(filename : Optional<dotnet.System.String>, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_XmlWriterTraceListener_ctor_0__2__String_String(&__thrown, filename?.get_handle() ?? nil, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Diagnostics.XmlWriterTraceListener.Close
    /**
    Closes the  for this listener so that it no longer receives tracing or debugging output.

    */
    open override func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.String, System.String)
// docid: M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)
    /**
    Writes trace information including an error message and a detailed error message to the file or stream.

    - Parameter message: The error message to write.
    - Parameter detailMessage: The detailed error message to append to the error message.
    */
    open override func Fail(message : Optional<dotnet.System.String>, detailMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__Fail_0__2__String_String(&__thrown, self.get_handle(), message?.get_handle() ?? nil, detailMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)
// docid: M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
    /**
    Writes trace information, a data object, and event information to the file or stream.

    - Parameter eventCache: A  that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: The source name.
    - Parameter eventType: One of the  values.
    - Parameter id: A numeric identifier for the event.
    - Parameter data: A data object to emit.
    */
    open override func TraceData(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__TraceData_0__5__TraceEventCache_String_TraceEventType_i32_Object(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])
// docid: M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
    /**
    Writes trace information, data objects, and event information to the file or stream.

    - Parameter eventCache: A  that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: The source name.
    - Parameter eventType: One of the  values.
    - Parameter id: A numeric identifier for the event.
    - Parameter data: An array of data objects to emit.
    */
    open override func TraceData(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__TraceData_0__5__TraceEventCache_String_TraceEventType_i32_ObjectArray(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)
// docid: M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
    /**
    Writes trace information, a message, and event information to the file or stream.

    - Parameter eventCache: A  that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: The source name.
    - Parameter eventType: One of the  values.
    - Parameter id: A numeric identifier for the event.
    - Parameter message: The message to write.
    */
    open override func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__TraceEvent_0__5__TraceEventCache_String_TraceEventType_i32_String(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])
// docid: M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
    /**
    Writes trace information, a formatted message, and event information to the file or stream.

    - Parameter eventCache: A  that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: The source name.
    - Parameter eventType: One of the  values.
    - Parameter id: A numeric identifier for the event.
    - Parameter format: A format string that contains zero or more format items that correspond to objects in the  array.
    - Parameter args: An object array containing zero or more objects to format.
    */
    open override func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, format : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__TraceEvent_0__6__TraceEventCache_String_TraceEventType_i32_String_ObjectArray(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, format?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceTransfer(System.Diagnostics.TraceEventCache, System.String, System.Int32, System.String, System.Guid)
// docid: M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
    /**
    Writes trace information including the identity of a related activity, a message, and event information to the file or stream.

    - Parameter eventCache: A  that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: The source name.
    - Parameter id: A numeric identifier for the event.
    - Parameter message: A trace message to write.
    - Parameter relatedActivityId: A  structure that identifies a related activity.
    */
    open override func TraceTransfer(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, id : Swift.Int32, message : Optional<dotnet.System.String>, relatedActivityId : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__TraceTransfer_0__5__TraceEventCache_String_i32_String_Guid(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), id, message?.get_handle() ?? nil, relatedActivityId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String)
// docid: M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)
    /**
    Writes a verbatim message without any additional context information to the file or stream.

    - Parameter message: The message to write.
    */
    open override func Write(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__Write_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String)
// docid: M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)
    /**
    Writes a verbatim message without any additional context information followed by the current line terminator to the file or stream.

    - Parameter message: The message to write.
    */
    open override func WriteLine(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_XmlWriterTraceListener_void__WriteLine_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlWriterTraceListener


}


