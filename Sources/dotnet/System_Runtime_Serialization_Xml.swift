// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Runtime
// System.Runtime.Serialization
extension System.Runtime.Serialization {
// type: System.Runtime.Serialization.DataContractResolver
    /**
    Provides a mechanism for dynamically mapping types to and from  representations during serialization and deserialization.

    */
open class DataContractResolver
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_DataContractResolver_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Type ResolveName(System.String, System.String, System.Type, System.Runtime.Serialization.DataContractResolver)
// docid: M:System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)
    /**
    Override this method to map the specified  name and namespace to a data contract type during deserialization.

    - Parameter typeName: The  name to map.
    - Parameter typeNamespace: The  namespace to map.
    - Parameter declaredType: The type declared in the data contract.
    - Parameter knownTypeResolver: The known type resolver.
    - Returns: The type the  name and namespace is mapped to.

    */
    open func ResolveName(typeName : dotnet.System.String, typeNamespace : Optional<dotnet.System.String>, declaredType : Optional<dotnet.System.Type_>, knownTypeResolver : dotnet.System.Runtime.Serialization.DataContractResolver) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractResolver_Type__ResolveName_0__4__String_String_Type_DataContractResolver(&__thrown, self.get_handle(), typeName.get_handle(), typeNamespace?.get_handle() ?? nil, declaredType?.get_handle() ?? nil, knownTypeResolver.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool TryResolveType(System.Type, System.Type, System.Runtime.Serialization.DataContractResolver, ref System.Xml.XmlDictionaryString, ref System.Xml.XmlDictionaryString)
// docid: M:System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)
    /**
    Override this method to map a data contract type to an  name and namespace during serialization.

    - Parameter type: The type to map.
    - Parameter declaredType: The type declared in the data contract.
    - Parameter knownTypeResolver: The known type resolver.
    - Parameter typeName: The xsi:type name.
    - Parameter typeNamespace: The xsi:type namespace.
    - Returns: 
         if mapping succeeded; otherwise, .

    */
    open func TryResolveType(type : dotnet.System.Type_, declaredType : Optional<dotnet.System.Type_>, knownTypeResolver : dotnet.System.Runtime.Serialization.DataContractResolver, typeName : inout dotnet.System.Xml.XmlDictionaryString, typeNamespace : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_typeName = typeName.get_handle();
            var _tmp_out_typeNamespace = typeNamespace.get_handle();
        let __return = System_Runtime_Serialization_DataContractResolver_bool__TryResolveType_0__5__Type_Type_DataContractResolver_outXmlDictionaryString_outXmlDictionaryString(&__thrown, self.get_handle(), type.get_handle(), declaredType?.get_handle() ?? nil, knownTypeResolver.get_handle(), &_tmp_out_typeName, &_tmp_out_typeNamespace);
        let _tmp2_typeName = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_typeName);
            typeName = _tmp2_typeName;
        let _tmp2_typeNamespace = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_typeNamespace);
            typeNamespace = _tmp2_typeNamespace;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DataContractResolver


// type: System.Runtime.Serialization.DataContractSerializer
    /**
    Serializes and deserializes an instance of a type into an XML stream or document using a supplied data contract. This class cannot be inherited.

    */
public final class DataContractSerializer
    :
    dotnet.System.Runtime.Serialization.XmlObjectSerializer
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_DataContractSerializer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type)
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type.

    - Parameter type: The type of the instances that are serialized or deserialized.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractSerializer_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Collections.Generic.IEnumerable<System.Type>)
// docid: M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type, and a collection of known types that may be present in the object graph.

    - Parameter type: The type of the instances that are serialized or deserialized.
    - Parameter knownTypes: An  of  that contains the types that may be present in the object graph.
    */
    public init(type : dotnet.System.Type_, knownTypes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractSerializer_ctor_0__2__Type_System_Collections_Generic_IEnumerable_System_Type_(&__thrown, type.get_handle(), (knownTypes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Runtime.Serialization.DataContractSerializerSettings)
// docid: M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Runtime.Serialization.DataContractSerializerSettings)
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type and settings.

    - Parameter type: The type of the instance to serialize or deserialize.
    - Parameter settings: The serializer settings.
    */
    public init(type : dotnet.System.Type_, settings : Optional<dotnet.System.Runtime.Serialization.DataContractSerializerSettings>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractSerializer_ctor_0__2__Type_DataContractSerializerSettings(&__thrown, type.get_handle(), settings?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.String, System.String)
// docid: M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String)
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type using the supplied XML root element and namespace.

    - Parameter type: The type of the instances that are serialized or deserialized.
    - Parameter rootName: The name of the XML element that encloses the content to serialize or deserialize.
    - Parameter rootNamespace: The namespace of the XML element that encloses the content to serialize or deserialize.
    */
    public init(type : dotnet.System.Type_, rootName : dotnet.System.String, rootNamespace : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractSerializer_ctor_0__3__Type_String_String(&__thrown, type.get_handle(), rootName.get_handle(), rootNamespace.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.String, System.String, System.Collections.Generic.IEnumerable<System.Type>)
// docid: M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type})
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two string parameters as well as a list of known types that may be present in the object graph.

    - Parameter type: The type of the instances that are serialized or deserialized.
    - Parameter rootName: The root element name of the content.
    - Parameter rootNamespace: The namespace of the root element.
    - Parameter knownTypes: An  of  that contains the types that may be present in the object graph.
    */
    public init(type : dotnet.System.Type_, rootName : dotnet.System.String, rootNamespace : dotnet.System.String, knownTypes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractSerializer_ctor_0__4__Type_String_String_System_Collections_Generic_IEnumerable_System_Type_(&__thrown, type.get_handle(), rootName.get_handle(), rootNamespace.get_handle(), (knownTypes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type using the XML root element and namespace specified through the parameters of type .

    - Parameter type: The type of the instances that are serialized or deserialized.
    - Parameter rootName: An  that contains the root element name of the content.
    - Parameter rootNamespace: An  that contains the namespace of the root element.
    */
    public init(type : dotnet.System.Type_, rootName : dotnet.System.Xml.XmlDictionaryString, rootNamespace : dotnet.System.Xml.XmlDictionaryString) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractSerializer_ctor_0__3__Type_XmlDictionaryString_XmlDictionaryString(&__thrown, type.get_handle(), rootName.get_handle(), rootNamespace.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Collections.Generic.IEnumerable<System.Type>)
// docid: M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})
    /**
    Initializes a new instance of the  class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two  parameters as well as a list of known types that may be present in the object graph.

    - Parameter type: The type of the instances that are serialized or deserialized.
    - Parameter rootName: An  that contains the root element name of the content.
    - Parameter rootNamespace: An  that contains the namespace of the root element.
    - Parameter knownTypes: A  of  that contains the known types that may be present in the object graph.
    */
    public init(type : dotnet.System.Type_, rootName : dotnet.System.Xml.XmlDictionaryString, rootNamespace : dotnet.System.Xml.XmlDictionaryString, knownTypes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractSerializer_ctor_0__4__Type_XmlDictionaryString_XmlDictionaryString_System_Collections_Generic_IEnumerable_System_Type_(&__thrown, type.get_handle(), rootName.get_handle(), rootNamespace.get_handle(), (knownTypes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsStartObject(System.Xml.XmlDictionaryReader)
// docid: M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)
    /**
    Determines whether the  is positioned on an object that can be deserialized.

    - Parameter reader: An  used to read the XML stream.
    - Returns: 
         if the reader is at the start element of the stream to read; otherwise, .

    */
    public override func IsStartObject(reader : dotnet.System.Xml.XmlDictionaryReader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_bool__IsStartObject_0__1__XmlDictionaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartObject(System.Xml.XmlReader)
// docid: M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlReader)
    /**
    Determines whether the  is positioned on an object that can be deserialized.

    - Parameter reader: The  used to read the XML stream.
    - Returns: 
         if the reader is at the start element of the stream to read; otherwise, .

    */
    public override func IsStartObject(reader : dotnet.System.Xml.XmlReader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_bool__IsStartObject_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ReadObject(System.Xml.XmlDictionaryReader, bool)
// docid: M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)
    /**
    Reads the XML stream with an  and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.

    - Parameter reader: The  used to read the XML stream.
    - Parameter verifyObjectName: 
         to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, .
    - Returns: The deserialized object.

    */
    public override func ReadObject(reader : dotnet.System.Xml.XmlDictionaryReader, verifyObjectName : Bool) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_Object__ReadObject_0__2__XmlDictionaryReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(verifyObjectName ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlDictionaryReader, bool, System.Runtime.Serialization.DataContractResolver)
// docid: M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean,System.Runtime.Serialization.DataContractResolver)
    /**
    Reads an XML document or document stream and returns the deserialized object.  The method includes a parameter to specify whether the object name is verified is validated, and a resolver for mapping  declarations at runtime.

    - Parameter reader: The XML reader used to read the content.
    - Parameter verifyObjectName: 
         to verify the object name; otherwise, .
    - Parameter dataContractResolver: An implementation of the  to map  declarations to data contract types.
    - Returns: The deserialized object.

    */
    public func ReadObject(reader : dotnet.System.Xml.XmlDictionaryReader, verifyObjectName : Bool, dataContractResolver : Optional<dotnet.System.Runtime.Serialization.DataContractResolver>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_Object__ReadObject_0__3__XmlDictionaryReader_bool_DataContractResolver(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(verifyObjectName ? 1 : 0), dataContractResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlReader)
// docid: M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader)
    /**
    Reads the XML stream with an  and returns the deserialized object.

    - Parameter reader: The  used to read the XML stream.
    - Returns: The deserialized object.

    */
    public override func ReadObject(reader : dotnet.System.Xml.XmlReader) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_Object__ReadObject_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlReader, bool)
// docid: M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)
    /**
    Reads the XML stream with an  and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.

    - Parameter reader: The  used to read the XML stream.
    - Parameter verifyObjectName: 
         to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, .
    - Returns: The deserialized object.

    */
    public override func ReadObject(reader : dotnet.System.Xml.XmlReader, verifyObjectName : Bool) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_Object__ReadObject_0__2__XmlReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(verifyObjectName ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteEndObject(System.Xml.XmlDictionaryWriter)
// docid: M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)
    /**
    Writes the closing XML element using an .

    - Parameter writer: The  used to write the stream.
    */
    public override func WriteEndObject(writer : dotnet.System.Xml.XmlDictionaryWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializer_void__WriteEndObject_0__1__XmlDictionaryWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndObject(System.Xml.XmlWriter)
// docid: M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlWriter)
    /**
    Writes the closing XML element using an .

    - Parameter writer: The  used to write the stream.
    */
    public override func WriteEndObject(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializer_void__WriteEndObject_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObject(System.Xml.XmlDictionaryWriter, System.Object, System.Runtime.Serialization.DataContractResolver)
// docid: M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object,System.Runtime.Serialization.DataContractResolver)
    /**
    Writes all the object data (starting XML element, content, and enclosing element) to an XML document or stream  using the specified XmlDictionaryWriter. The method includes a resolver for mapping  declarations at runtime.

    - Parameter writer: An XmlDictionaryWriter used to write the content to the XML document or stream.
    - Parameter graph: The object that contains the content to write.
    - Parameter dataContractResolver: An implementation of the  used to map  declarations to known data contracts.
    */
    public func WriteObject(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>, dataContractResolver : Optional<dotnet.System.Runtime.Serialization.DataContractResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializer_void__WriteObject_0__3__XmlDictionaryWriter_Object_DataContractResolver(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil, dataContractResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObject(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)
    /**
    Writes all the object data (starting XML element, content, and closing element) to an XML document or stream with an .

    - Parameter writer: The  used to write the XML document or stream.
    - Parameter graph: The object that contains the data to write to the stream.
    */
    public override func WriteObject(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializer_void__WriteObject_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObjectContent(System.Xml.XmlDictionaryWriter, System.Object)
// docid: M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)
    /**
    Writes the XML content using an .

    - Parameter writer: The  used to write the stream.
    - Parameter graph: The object to write to the stream.
    */
    public override func WriteObjectContent(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializer_void__WriteObjectContent_0__2__XmlDictionaryWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObjectContent(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)
    /**
    Writes the XML content using an .

    - Parameter writer: The  used to write the stream.
    - Parameter graph: The object to write to the stream.
    */
    public override func WriteObjectContent(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializer_void__WriteObjectContent_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartObject(System.Xml.XmlDictionaryWriter, System.Object)
// docid: M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)
    /**
    Writes the opening XML element using an .

    - Parameter writer: The  used to write the XML start element.
    - Parameter graph: The object to write.
    */
    public override func WriteStartObject(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializer_void__WriteStartObject_0__2__XmlDictionaryWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartObject(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)
    /**
    Writes the opening XML element using an .

    - Parameter writer: The  used to write the XML start element.
    - Parameter graph: The object to write.
    */
    public override func WriteStartObject(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializer_void__WriteStartObject_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.DataContractResolver get_DataContractResolver()
// docid: M:System.Runtime.Serialization.DataContractSerializer.get_DataContractResolver
    public func get_DataContractResolver() throws -> Optional<dotnet.System.Runtime.Serialization.DataContractResolver> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_DataContractResolver__get_DataContractResolver_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.DataContractResolver(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_IgnoreExtensionDataObject()
// docid: M:System.Runtime.Serialization.DataContractSerializer.get_IgnoreExtensionDataObject
    public func get_IgnoreExtensionDataObject() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_bool__get_IgnoreExtensionDataObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.ReadOnlyCollection<System.Type> get_KnownTypes()
// docid: M:System.Runtime.Serialization.DataContractSerializer.get_KnownTypes
    public func get_KnownTypes() throws -> dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_System_Collections_ObjectModel_ReadOnlyCollection_System_Type___get_KnownTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxItemsInObjectGraph()
// docid: M:System.Runtime.Serialization.DataContractSerializer.get_MaxItemsInObjectGraph
    public func get_MaxItemsInObjectGraph() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_i32__get_MaxItemsInObjectGraph_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_PreserveObjectReferences()
// docid: M:System.Runtime.Serialization.DataContractSerializer.get_PreserveObjectReferences
    public func get_PreserveObjectReferences() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_bool__get_PreserveObjectReferences_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_SerializeReadOnlyTypes()
// docid: M:System.Runtime.Serialization.DataContractSerializer.get_SerializeReadOnlyTypes
    public func get_SerializeReadOnlyTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializer_bool__get_SerializeReadOnlyTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the component used to dynamically map  declarations to known contract types.

    */
    public var DataContractResolver : Optional<dotnet.System.Runtime.Serialization.DataContractResolver> {
        get {
            return try! get_DataContractResolver();
        }
    }
    /**
    Gets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.

    */
    public var IgnoreExtensionDataObject : Bool {
        get {
            return try! get_IgnoreExtensionDataObject();
        }
    }
    /**
    Gets a collection of types that may be present in the object graph serialized using this instance of the .

    */
    public var KnownTypes : dotnet.System.Collections.ObjectModel.ReadOnlyCollection_1<dotnet.System.Type_> {
        get {
            return try! get_KnownTypes();
        }
    }
    /**
    Gets the maximum number of items in an object graph to serialize or deserialize.

    */
    public var MaxItemsInObjectGraph : Swift.Int32 {
        get {
            return try! get_MaxItemsInObjectGraph();
        }
    }
    /**
    Gets a value that specifies whether to use non-standard XML constructs to preserve object reference data.

    */
    public var PreserveObjectReferences : Bool {
        get {
            return try! get_PreserveObjectReferences();
        }
    }
    /**
    Gets a value that specifies whether read-only types are serialized.

    */
    public var SerializeReadOnlyTypes : Bool {
        get {
            return try! get_SerializeReadOnlyTypes();
        }
    }
} // DataContractSerializer


// type: System.Runtime.Serialization.DataContractSerializerExtensions
public struct DataContractSerializerExtensions {
    // System.Runtime.Serialization.ISerializationSurrogateProvider GetSerializationSurrogateProvider(System.Runtime.Serialization.DataContractSerializer)
// docid: M:System.Runtime.Serialization.DataContractSerializerExtensions.GetSerializationSurrogateProvider(System.Runtime.Serialization.DataContractSerializer)
    /**
    Returns the surrogate serialization provider for this serializer.

    - Parameter serializer: The serializer which is being surrogated.
    - Returns: The surrogate serializer.

    */
    public static func GetSerializationSurrogateProvider(serializer : dotnet.System.Runtime.Serialization.DataContractSerializer) throws -> Optional<dotnet.System.Runtime.Serialization.ISerializationSurrogateProvider> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerExtensions_ISerializationSurrogateProvider__GetSerializationSurrogateProvider_0__1__DataContractSerializer(&__thrown, serializer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ISerializationSurrogateProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetSerializationSurrogateProvider(System.Runtime.Serialization.DataContractSerializer, System.Runtime.Serialization.ISerializationSurrogateProvider)
// docid: M:System.Runtime.Serialization.DataContractSerializerExtensions.SetSerializationSurrogateProvider(System.Runtime.Serialization.DataContractSerializer,System.Runtime.Serialization.ISerializationSurrogateProvider)
    /**
    Specifies a surrogate serialization provider for this .

    - Parameter serializer: The serializer which is being surrogated.
    - Parameter provider: The surrogate serialization provider.
    */
    public static func SetSerializationSurrogateProvider(serializer : dotnet.System.Runtime.Serialization.DataContractSerializer, provider : Optional<dotnet.System.Runtime.Serialization.ISerializationSurrogateProvider>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerExtensions_void__SetSerializationSurrogateProvider_0__2__DataContractSerializer_ISerializationSurrogateProvider(&__thrown, serializer.get_handle(), provider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DataContractSerializerExtensions


// type: System.Runtime.Serialization.DataContractSerializerSettings
    /**
    Specifies data contract serializer settings.

    */
open class DataContractSerializerSettings
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_DataContractSerializerSettings_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_DataContractSerializerSettings_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.DataContractResolver get_DataContractResolver()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.get_DataContractResolver
    open func get_DataContractResolver() throws -> Optional<dotnet.System.Runtime.Serialization.DataContractResolver> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerSettings_DataContractResolver__get_DataContractResolver_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.DataContractResolver(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DataContractResolver(System.Runtime.Serialization.DataContractResolver)
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.set_DataContractResolver(System.Runtime.Serialization.DataContractResolver)
    open func set_DataContractResolver(value : Optional<dotnet.System.Runtime.Serialization.DataContractResolver>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerSettings_void__set_DataContractResolver_0__1__DataContractResolver(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreExtensionDataObject()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.get_IgnoreExtensionDataObject
    open func get_IgnoreExtensionDataObject() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerSettings_bool__get_IgnoreExtensionDataObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreExtensionDataObject(bool)
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.set_IgnoreExtensionDataObject(System.Boolean)
    open func set_IgnoreExtensionDataObject(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerSettings_void__set_IgnoreExtensionDataObject_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Type> get_KnownTypes()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.get_KnownTypes
    open func get_KnownTypes() throws -> Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerSettings_System_Collections_Generic_IEnumerable_System_Type___get_KnownTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_KnownTypes(System.Collections.Generic.IEnumerable<System.Type>)
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.set_KnownTypes(System.Collections.Generic.IEnumerable{System.Type})
    open func set_KnownTypes(value : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerSettings_void__set_KnownTypes_0__1__System_Collections_Generic_IEnumerable_System_Type_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxItemsInObjectGraph()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.get_MaxItemsInObjectGraph
    open func get_MaxItemsInObjectGraph() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerSettings_i32__get_MaxItemsInObjectGraph_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxItemsInObjectGraph(System.Int32)
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.set_MaxItemsInObjectGraph(System.Int32)
    open func set_MaxItemsInObjectGraph(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerSettings_void__set_MaxItemsInObjectGraph_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PreserveObjectReferences()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.get_PreserveObjectReferences
    open func get_PreserveObjectReferences() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerSettings_bool__get_PreserveObjectReferences_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PreserveObjectReferences(bool)
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.set_PreserveObjectReferences(System.Boolean)
    open func set_PreserveObjectReferences(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerSettings_void__set_PreserveObjectReferences_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlDictionaryString get_RootName()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.get_RootName
    open func get_RootName() throws -> Optional<dotnet.System.Xml.XmlDictionaryString> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerSettings_XmlDictionaryString__get_RootName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlDictionaryString(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RootName(System.Xml.XmlDictionaryString)
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.set_RootName(System.Xml.XmlDictionaryString)
    open func set_RootName(value : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerSettings_void__set_RootName_0__1__XmlDictionaryString(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlDictionaryString get_RootNamespace()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.get_RootNamespace
    open func get_RootNamespace() throws -> Optional<dotnet.System.Xml.XmlDictionaryString> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerSettings_XmlDictionaryString__get_RootNamespace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlDictionaryString(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_RootNamespace(System.Xml.XmlDictionaryString)
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.set_RootNamespace(System.Xml.XmlDictionaryString)
    open func set_RootNamespace(value : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerSettings_void__set_RootNamespace_0__1__XmlDictionaryString(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SerializeReadOnlyTypes()
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.get_SerializeReadOnlyTypes
    open func get_SerializeReadOnlyTypes() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_DataContractSerializerSettings_bool__get_SerializeReadOnlyTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SerializeReadOnlyTypes(bool)
// docid: M:System.Runtime.Serialization.DataContractSerializerSettings.set_SerializeReadOnlyTypes(System.Boolean)
    open func set_SerializeReadOnlyTypes(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_DataContractSerializerSettings_void__set_SerializeReadOnlyTypes_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the component used to dynamically map xsi:type declarations to known contract types.

    */
    open var DataContractResolver : Optional<dotnet.System.Runtime.Serialization.DataContractResolver> {
        get {
            return try! get_DataContractResolver();
        }
        set(v) {
            return try! set_DataContractResolver(value: v!);
        }
    }
    /**
    Gets or sets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.

    */
    open var IgnoreExtensionDataObject : Bool {
        get {
            return try! get_IgnoreExtensionDataObject();
        }
        set(v) {
            return try! set_IgnoreExtensionDataObject(value: v);
        }
    }
    /**
    Gets or sets a collection of types that may be present in the object graph serialized using this instance of the DataContractSerializerSettings.

    */
    open var KnownTypes : Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Type_>> {
        get {
            return try! get_KnownTypes();
        }
        set(v) {
            return try! set_KnownTypes(value: v!);
        }
    }
    /**
    Gets or sets the maximum number of items in an object graph to serialize or deserialize.

    */
    open var MaxItemsInObjectGraph : Swift.Int32 {
        get {
            return try! get_MaxItemsInObjectGraph();
        }
        set(v) {
            return try! set_MaxItemsInObjectGraph(value: v);
        }
    }
    /**
    Gets or sets a value that specifies whether to use non-standard XML constructs to preserve object reference data.

    */
    open var PreserveObjectReferences : Bool {
        get {
            return try! get_PreserveObjectReferences();
        }
        set(v) {
            return try! set_PreserveObjectReferences(value: v);
        }
    }
    /**
    Gets or sets the root name of the selected object.

    */
    open var RootName : Optional<dotnet.System.Xml.XmlDictionaryString> {
        get {
            return try! get_RootName();
        }
        set(v) {
            return try! set_RootName(value: v!);
        }
    }
    /**
    Gets or sets the root namespace for the specified object.

    */
    open var RootNamespace : Optional<dotnet.System.Xml.XmlDictionaryString> {
        get {
            return try! get_RootNamespace();
        }
        set(v) {
            return try! set_RootNamespace(value: v!);
        }
    }
    /**
    Gets or sets a value that specifies whether to serialize read only types.

    */
    open var SerializeReadOnlyTypes : Bool {
        get {
            return try! get_SerializeReadOnlyTypes();
        }
        set(v) {
            return try! set_SerializeReadOnlyTypes(value: v);
        }
    }
} // DataContractSerializerSettings


// type: System.Runtime.Serialization.ExportOptions
    /**
    Represents the options that can be set for an .

    */
open class ExportOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_ExportOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.ExportOptions.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_ExportOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.Collection<System.Type> get_KnownTypes()
// docid: M:System.Runtime.Serialization.ExportOptions.get_KnownTypes
    open func get_KnownTypes() throws -> dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ExportOptions_System_Collections_ObjectModel_Collection_System_Type___get_KnownTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.Collection_1(hndl : __return);
        }
    }
    /**
    Gets the collection of types that may be encountered during serialization or deserialization.

    */
    open var KnownTypes : dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.Type_> {
        get {
            return try! get_KnownTypes();
        }
    }
} // ExportOptions


// type: System.Runtime.Serialization.ExtensionDataObject
    /**
    Stores data from a versioned data contract that has been extended by adding new members.

    */
public final class ExtensionDataObject
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_ExtensionDataObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // ExtensionDataObject


// type: System.Runtime.Serialization.IExtensibleDataObject
    /**
    Provides a data structure to store extra data encountered by the  during deserialization of a type marked with the  attribute.

    */
open class IExtensibleDataObject
    :
    SGBridgeGenericValue,
    System_Runtime_Serialization_IExtensibleDataObject
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_IExtensibleDataObject_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Runtime.Serialization.ExtensionDataObject get_ExtensionData()
// docid: M:System.Runtime.Serialization.IExtensibleDataObject.get_ExtensionData
    open func get_ExtensionData() throws -> Optional<dotnet.System.Runtime.Serialization.ExtensionDataObject> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_IExtensibleDataObject_ExtensionDataObject__get_ExtensionData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ExtensionDataObject(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ExtensionData(System.Runtime.Serialization.ExtensionDataObject)
// docid: M:System.Runtime.Serialization.IExtensibleDataObject.set_ExtensionData(System.Runtime.Serialization.ExtensionDataObject)
    open func set_ExtensionData(value : Optional<dotnet.System.Runtime.Serialization.ExtensionDataObject>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_IExtensibleDataObject_void__set_ExtensionData_0__1__ExtensionDataObject(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IExtensibleDataObject


// type: System.Runtime.Serialization.XPathQueryGenerator
public struct XPathQueryGenerator {
    // System.String CreateFromDataContractSerializer(System.Type, System.Reflection.MemberInfo[], System.Text.StringBuilder, ref System.Xml.XmlNamespaceManager)
// docid: M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Text.StringBuilder,System.Xml.XmlNamespaceManager@)
    /**
    Creates an XPath from a data contract using the specified contract data type, array of metadata elements, the top level element, and namespaces.

    - Parameter type: The type that represents a data contract.
    - Parameter pathToMember: The metadata, generated using the  method of the  class, that points to the specific data member used to generate the query.
    - Parameter rootElementXpath: The top level element in the xpath.
    - Parameter namespaces: The XML namespaces and their prefixes found in the data contract.
    - Returns: 
          
  
 The XPath generated from the type and member data.

    */
    public static func CreateFromDataContractSerializer(type : dotnet.System.Type_, pathToMember : dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>, rootElementXpath : Optional<dotnet.System.Text.StringBuilder>, namespaces : inout dotnet.System.Xml.XmlNamespaceManager) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
            var _tmp_out_namespaces = namespaces.get_handle();
        let __return = System_Runtime_Serialization_XPathQueryGenerator_String__CreateFromDataContractSerializer_0__4__Type_MemberInfoArray_StringBuilder_outXmlNamespaceManager(&__thrown, type.get_handle(), pathToMember.get_handle(), rootElementXpath?.get_handle() ?? nil, &_tmp_out_namespaces);
        let _tmp2_namespaces = dotnet.System.Xml.XmlNamespaceManager(hndl: _tmp_out_namespaces);
            namespaces = _tmp2_namespaces;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String CreateFromDataContractSerializer(System.Type, System.Reflection.MemberInfo[], ref System.Xml.XmlNamespaceManager)
// docid: M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Xml.XmlNamespaceManager@)
    /**
    Creates an XPath from a data contract using the specified data contract type, array of metadata elements, and namespaces.

    - Parameter type: The type that represents a data contract.
    - Parameter pathToMember: The metadata, generated using the  method of the  class, that points to the specific data member used to generate the query.
    - Parameter namespaces: The XML namespaces and their prefixes found in the data contract.
    - Returns: 
          
  
 The XPath generated from the type and member data.

    */
    public static func CreateFromDataContractSerializer(type : dotnet.System.Type_, pathToMember : dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>, namespaces : inout dotnet.System.Xml.XmlNamespaceManager) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
            var _tmp_out_namespaces = namespaces.get_handle();
        let __return = System_Runtime_Serialization_XPathQueryGenerator_String__CreateFromDataContractSerializer_0__3__Type_MemberInfoArray_outXmlNamespaceManager(&__thrown, type.get_handle(), pathToMember.get_handle(), &_tmp_out_namespaces);
        let _tmp2_namespaces = dotnet.System.Xml.XmlNamespaceManager(hndl: _tmp_out_namespaces);
            namespaces = _tmp2_namespaces;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // XPathQueryGenerator


// type: System.Runtime.Serialization.XmlObjectSerializer
    /**
    Provides the base class used to serialize objects as XML streams or documents. This class is abstract.

    */
open class XmlObjectSerializer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_XmlObjectSerializer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool IsStartObject(System.Xml.XmlDictionaryReader)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlDictionaryReader)
    /**
    Gets a value that specifies whether the  is positioned over an XML element that can be read.

    - Parameter reader: An  used to read the XML stream or document.
    - Returns: 
         if the reader can read the data; otherwise, .

    */
    open func IsStartObject(reader : dotnet.System.Xml.XmlDictionaryReader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XmlObjectSerializer_bool__IsStartObject_0__1__XmlDictionaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartObject(System.Xml.XmlReader)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlReader)
    /**
    Gets a value that specifies whether the  is positioned over an XML element that can be read.

    - Parameter reader: An  used to read the XML stream or document.
    - Returns: 
         if the reader is positioned over the starting element; otherwise, .

    */
    open func IsStartObject(reader : dotnet.System.Xml.XmlReader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XmlObjectSerializer_bool__IsStartObject_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ReadObject(System.IO.Stream)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.IO.Stream)
    /**
    Reads the XML stream or document with a  and returns the deserialized object.

    - Parameter stream: A  used to read the XML stream or document.
    - Returns: The deserialized object.

    */
    open func ReadObject(stream : dotnet.System.IO.Stream) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XmlObjectSerializer_Object__ReadObject_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlDictionaryReader)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader)
    /**
    Reads the XML document or stream with an  and returns the deserialized object.

    - Parameter reader: An  used to read the XML document.
    - Returns: The deserialized object.

    */
    open func ReadObject(reader : dotnet.System.Xml.XmlDictionaryReader) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XmlObjectSerializer_Object__ReadObject_0__1__XmlDictionaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlDictionaryReader, bool)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)
    /**
    Reads the XML stream or document with an  and returns the deserialized object; it also enables you to specify whether the serializer can read the data before attempting to read it.

    - Parameter reader: An  used to read the XML document.
    - Parameter verifyObjectName: 
         to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; otherwise,  to skip the verification.
    - Returns: The deserialized object.

    */
    open func ReadObject(reader : dotnet.System.Xml.XmlDictionaryReader, verifyObjectName : Bool) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XmlObjectSerializer_Object__ReadObject_0__2__XmlDictionaryReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(verifyObjectName ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlReader)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader)
    /**
    Reads the XML document or stream with an  and returns the deserialized object.

    - Parameter reader: An  used to read the XML stream or document.
    - Returns: The deserialized object.

    */
    open func ReadObject(reader : dotnet.System.Xml.XmlReader) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XmlObjectSerializer_Object__ReadObject_0__1__XmlReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ReadObject(System.Xml.XmlReader, bool)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)
    /**
    Reads the XML document or stream with an  and returns the deserialized object; it also enables you to specify whether the serializer can read the data before attempting to read it.

    - Parameter reader: An  used to read the XML document or stream.
    - Parameter verifyObjectName: 
         to check whether the enclosing XML element name and namespace correspond to the root name and root namespace;  to skip the verification.
    - Returns: The deserialized object.

    */
    open func ReadObject(reader : dotnet.System.Xml.XmlReader, verifyObjectName : Bool) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XmlObjectSerializer_Object__ReadObject_0__2__XmlReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(verifyObjectName ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void WriteEndObject(System.Xml.XmlDictionaryWriter)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)
    /**
    Writes the end of the object data as a closing XML element to the XML document or stream with an .

    - Parameter writer: An  used to write the XML document or stream.
    */
    open func WriteEndObject(writer : dotnet.System.Xml.XmlDictionaryWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteEndObject_0__1__XmlDictionaryWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndObject(System.Xml.XmlWriter)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlWriter)
    /**
    Writes the end of the object data as a closing XML element to the XML document or stream with an .

    - Parameter writer: An  used to write the XML document or stream.
    */
    open func WriteEndObject(writer : dotnet.System.Xml.XmlWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteEndObject_0__1__XmlWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObject(System.IO.Stream, System.Object)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.IO.Stream,System.Object)
    /**
    Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified .

    - Parameter stream: A  used to write the XML document or stream.
    - Parameter graph: The object that contains the data to write to the stream.
    */
    open func WriteObject(stream : dotnet.System.IO.Stream, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteObject_0__2__Stream_Object(&__thrown, self.get_handle(), stream.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObject(System.Xml.XmlDictionaryWriter, System.Object)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)
    /**
    Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified .

    - Parameter writer: An  used to write the content to the XML document or stream.
    - Parameter graph: The object that contains the content to write.
    */
    open func WriteObject(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteObject_0__2__XmlDictionaryWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObject(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlWriter,System.Object)
    /**
    Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified .

    - Parameter writer: An  used to write the XML document or stream.
    - Parameter graph: The object that contains the content to write.
    */
    open func WriteObject(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteObject_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObjectContent(System.Xml.XmlDictionaryWriter, System.Object)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)
    /**
    Writes only the content of the object to the XML document or stream using the specified .

    - Parameter writer: An  used to write the XML document or stream.
    - Parameter graph: The object that contains the content to write.
    */
    open func WriteObjectContent(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteObjectContent_0__2__XmlDictionaryWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteObjectContent(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)
    /**
    Writes only the content of the object to the XML document or stream with the specified .

    - Parameter writer: An  used to write the XML document or stream.
    - Parameter graph: The object that contains the content to write.
    */
    open func WriteObjectContent(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteObjectContent_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartObject(System.Xml.XmlDictionaryWriter, System.Object)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)
    /**
    Writes the start of the object's data as an opening XML element using the specified .

    - Parameter writer: An  used to write the XML document.
    - Parameter graph: The object to serialize.
    */
    open func WriteStartObject(writer : dotnet.System.Xml.XmlDictionaryWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteStartObject_0__2__XmlDictionaryWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartObject(System.Xml.XmlWriter, System.Object)
// docid: M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)
    /**
    Writes the start of the object's data as an opening XML element using the specified .

    - Parameter writer: An  used to write the XML document.
    - Parameter graph: The object to serialize.
    */
    open func WriteStartObject(writer : dotnet.System.Xml.XmlWriter, graph : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlObjectSerializer_void__WriteStartObject_0__2__XmlWriter_Object(&__thrown, self.get_handle(), writer.get_handle(), graph?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlObjectSerializer


// type: System.Runtime.Serialization.XmlSerializableServices
public struct XmlSerializableServices {
    // void AddDefaultSchema(System.Xml.Schema.XmlSchemaSet, System.Xml.XmlQualifiedName)
// docid: M:System.Runtime.Serialization.XmlSerializableServices.AddDefaultSchema(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
    /**
    Generates a default schema type given the specified type name and adds it to the specified schema set.

    - Parameter schemas: An  to add the generated schema type to.
    - Parameter typeQName: An  that specifies the type name to assign the schema to.
    */
    public static func AddDefaultSchema(schemas : dotnet.System.Xml.Schema.XmlSchemaSet, typeQName : dotnet.System.Xml.XmlQualifiedName) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlSerializableServices_void__AddDefaultSchema_0__2__XmlSchemaSet_XmlQualifiedName(&__thrown, schemas.get_handle(), typeQName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlNode[] ReadNodes(System.Xml.XmlReader)
// docid: M:System.Runtime.Serialization.XmlSerializableServices.ReadNodes(System.Xml.XmlReader)
    /**
    Reads a set of XML nodes from the specified reader and returns the result.

    - Parameter xmlReader: An  used for reading.
    - Returns: An array of type .

    */
    public static func ReadNodes(xmlReader : dotnet.System.Xml.XmlReader) throws -> dotnet.System_Arr<dotnet.System.Xml.XmlNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XmlSerializableServices_XmlNodeArray__ReadNodes_0__1__XmlReader(&__thrown, xmlReader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Xml.XmlNode>(hndl : __return);
        }
    }
    // void WriteNodes(System.Xml.XmlWriter, System.Xml.XmlNode[])
// docid: M:System.Runtime.Serialization.XmlSerializableServices.WriteNodes(System.Xml.XmlWriter,System.Xml.XmlNode[])
    /**
    Writes the supplied nodes using the specified writer.

    - Parameter xmlWriter: An  used for writing.
    - Parameter nodes: An array of type  to write.
    */
    public static func WriteNodes(xmlWriter : dotnet.System.Xml.XmlWriter, nodes : Optional<dotnet.System_Arr<dotnet.System.Xml.XmlNode>>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XmlSerializableServices_void__WriteNodes_0__2__XmlWriter_XmlNodeArray(&__thrown, xmlWriter.get_handle(), (nodes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // XmlSerializableServices


// type: System.Runtime.Serialization.XsdDataContractExporter
    /**
    Allows the transformation of a set of .NET Framework types that are used in data contracts into an XML schema file (.xsd).

    */
open class XsdDataContractExporter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_XsdDataContractExporter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_XsdDataContractExporter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Xml.Schema.XmlSchemaSet)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)
    /**
    Initializes a new instance of the  class with the specified set of schemas.

    - Parameter schemas: An  that contains the schemas to be exported.
    */
    public init(schemas : Optional<dotnet.System.Xml.Schema.XmlSchemaSet>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_XsdDataContractExporter_ctor_0__1__XmlSchemaSet(&__thrown, schemas?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanExport(System.Collections.Generic.ICollection<System.Reflection.Assembly>)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})
    /**
    Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a set of assemblies can be exported.

    - Parameter assemblies: A  of  that contains the assemblies with the types to export.
    - Returns: 
         if the types can be exported; otherwise, .

    */
    open func CanExport(assemblies : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Reflection.Assembly>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XsdDataContractExporter_bool__CanExport_0__1__System_Collections_Generic_ICollection_System_Reflection_Assembly_(&__thrown, self.get_handle(), assemblies.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanExport(System.Collections.Generic.ICollection<System.Type>)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})
    /**
    Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a  can be exported.

    - Parameter types: A  that contains the specified types to export.
    - Returns: 
         if the types can be exported; otherwise, .

    */
    open func CanExport(types : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XsdDataContractExporter_bool__CanExport_0__1__System_Collections_Generic_ICollection_System_Type_(&__thrown, self.get_handle(), types.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanExport(System.Type)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)
    /**
    Gets a value that indicates whether the specified common language runtime (CLR) type can be exported.

    - Parameter type: The  to export.
    - Returns: 
         if the type can be exported; otherwise, .

    */
    open func CanExport(type : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XsdDataContractExporter_bool__CanExport_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Export(System.Collections.Generic.ICollection<System.Reflection.Assembly>)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})
    /**
    Transforms the types contained in the specified collection of assemblies.

    - Parameter assemblies: A  (of ) that contains the types to export.
    */
    open func Export(assemblies : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Reflection.Assembly>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XsdDataContractExporter_void__Export_0__1__System_Collections_Generic_ICollection_System_Reflection_Assembly_(&__thrown, self.get_handle(), assemblies.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Export(System.Collections.Generic.ICollection<System.Type>)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})
    /**
    Transforms the types contained in the  passed to this method.

    - Parameter types: A   (of ) that contains the types to export.
    */
    open func Export(types : dotnet.System.Collections.Generic.ICollection_1<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XsdDataContractExporter_void__Export_0__1__System_Collections_Generic_ICollection_System_Type_(&__thrown, self.get_handle(), types.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Export(System.Type)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)
    /**
    Transforms the specified .NET Framework type into an XML schema definition language (XSD) schema.

    - Parameter type: The  to transform into an XML schema.
    */
    open func Export(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XsdDataContractExporter_void__Export_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Xml.XmlQualifiedName GetRootElementName(System.Type)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)
    /**
    Returns the top-level name and namespace for the .

    - Parameter type: The  to query.
    - Returns: The  that represents the top-level name and namespace for this , which is written to the stream when writing this object.

    */
    open func GetRootElementName(type : dotnet.System.Type_) throws -> Optional<dotnet.System.Xml.XmlQualifiedName> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XsdDataContractExporter_XmlQualifiedName__GetRootElementName_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.XmlQualifiedName(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Schema.XmlSchemaType GetSchemaType(System.Type)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)
    /**
    Returns the XML schema type for the specified type.

    - Parameter type: The type to return a schema for.
    - Returns: An  that contains the XML schema.

    */
    open func GetSchemaType(type : dotnet.System.Type_) throws -> Optional<dotnet.System.Xml.Schema.XmlSchemaType> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XsdDataContractExporter_XmlSchemaType__GetSchemaType_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Schema.XmlSchemaType(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.XmlQualifiedName GetSchemaTypeName(System.Type)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)
    /**
    Returns the contract name and contract namespace for the .

    - Parameter type: The  that was exported.
    - Returns: An  that represents the contract name of the type and its namespace.

    */
    open func GetSchemaTypeName(type : dotnet.System.Type_) throws -> dotnet.System.Xml.XmlQualifiedName {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XsdDataContractExporter_XmlQualifiedName__GetSchemaTypeName_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlQualifiedName(hndl : __return);
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.ExportOptions get_Options()
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.get_Options
    open func get_Options() throws -> Optional<dotnet.System.Runtime.Serialization.ExportOptions> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XsdDataContractExporter_ExportOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ExportOptions(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Options(System.Runtime.Serialization.ExportOptions)
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.set_Options(System.Runtime.Serialization.ExportOptions)
    open func set_Options(value : Optional<dotnet.System.Runtime.Serialization.ExportOptions>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_XsdDataContractExporter_void__set_Options_0__1__ExportOptions(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.Schema.XmlSchemaSet get_Schemas()
// docid: M:System.Runtime.Serialization.XsdDataContractExporter.get_Schemas
    open func get_Schemas() throws -> dotnet.System.Xml.Schema.XmlSchemaSet {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_XsdDataContractExporter_XmlSchemaSet__get_Schemas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.Schema.XmlSchemaSet(hndl : __return);
        }
    }
    /**
    Gets or sets an  that contains options that can be set for the export operation.

    */
    open var Options : Optional<dotnet.System.Runtime.Serialization.ExportOptions> {
        get {
            return try! get_Options();
        }
        set(v) {
            return try! set_Options(value: v!);
        }
    }
    /**
    Gets the collection of exported XML schemas.

    */
    open var Schemas : dotnet.System.Xml.Schema.XmlSchemaSet {
        get {
            return try! get_Schemas();
        }
    }
} // XsdDataContractExporter


}


// System.Xml
extension System.Xml {
// type: System.Xml.IFragmentCapableXmlDictionaryWriter
    /**
    Contains properties and methods that when implemented by a , allows processing of XML fragments.

    */
open class IFragmentCapableXmlDictionaryWriter
    :
    SGBridgeGenericValue,
    System_Xml_IFragmentCapableXmlDictionaryWriter
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IFragmentCapableXmlDictionaryWriter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void EndFragment()
// docid: M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment
    /**
    Ends the processing of an XML fragment.

    */
    open func EndFragment() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IFragmentCapableXmlDictionaryWriter_void__EndFragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void StartFragment(System.IO.Stream, bool)
// docid: M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)
    /**
    Starts the processing of an XML fragment.

    - Parameter stream: The stream to write to.
    - Parameter generateSelfContainedTextFragment: If , any namespaces declared outside the fragment is declared again if used inside of it; if  the namespaces are not declared again.
    */
    open func StartFragment(stream : dotnet.System.IO.Stream, generateSelfContainedTextFragment : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IFragmentCapableXmlDictionaryWriter_void__StartFragment_0__2__Stream_bool(&__thrown, self.get_handle(), stream.get_handle(), Swift.Int32(generateSelfContainedTextFragment ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteFragment(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)
    /**
    Writes an XML fragment to the underlying stream of the writer.

    - Parameter buffer: The buffer to write to.
    - Parameter offset: The starting position from which to write in .
    - Parameter count: The number of bytes to be written to the .
    */
    open func WriteFragment(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IFragmentCapableXmlDictionaryWriter_void__WriteFragment_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CanFragment()
// docid: M:System.Xml.IFragmentCapableXmlDictionaryWriter.get_CanFragment
    open func get_CanFragment() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IFragmentCapableXmlDictionaryWriter_bool__get_CanFragment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IFragmentCapableXmlDictionaryWriter


// type: System.Xml.IStreamProvider
    /**
    Represents an interface that can be implemented by classes providing streams.

    */
open class IStreamProvider
    :
    SGBridgeGenericValue,
    System_Xml_IStreamProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IStreamProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.IO.Stream GetStream()
// docid: M:System.Xml.IStreamProvider.GetStream
    /**
    Gets a stream.

    - Returns: A  object.

    */
    open func GetStream() throws -> dotnet.System.IO.Stream {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_IStreamProvider_Stream__GetStream_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Stream(hndl : __return);
        }
    }
    // void ReleaseStream(System.IO.Stream)
// docid: M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)
    /**
    Releases a stream to output.

    - Parameter stream: The stream being released.
    */
    open func ReleaseStream(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IStreamProvider_void__ReleaseStream_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IStreamProvider


// type: System.Xml.IXmlBinaryReaderInitializer
    /**
    Provides methods for reinitializing a binary reader to read a new document.

    */
open class IXmlBinaryReaderInitializer
    :
    SGBridgeGenericValue,
    System_Xml_IXmlBinaryReaderInitializer
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IXmlBinaryReaderInitializer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetInput(System.Byte[], System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Reinitializes the binary reader using the given input buffer.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: Starting position from which to read in .
    - Parameter count: Number of bytes that can be read from .
    - Parameter dictionary: 
         to use.
    - Parameter quotas: 
         to apply.
    - Parameter session: 
         to use.
    - Parameter onClose: Delegate to call when the reader is closed.
    */
    open func SetInput(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IXmlBinaryReaderInitializer_void__SetInput_0__7__u8Array_i32_i32_IXmlDictionary_XmlDictionaryReaderQuotas_XmlBinaryReaderSession_OnXmlDictionaryReaderClose(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, dictionary?.get_handle() ?? nil, quotas.get_handle(), session?.get_handle() ?? nil, onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetInput(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try SetInput(buffer: buffer, offset: offset, count: count, dictionary: dictionary, quotas: quotas, session: session, onClose: del_onClose);
    }
    // void SetInput(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Reinitializes the binary reader using the given input stream.

    - Parameter stream: The stream from which to read.
    - Parameter dictionary: 
         to use.
    - Parameter quotas: 
         to apply.
    - Parameter session: 
         to use.
    - Parameter onClose: Delegate to call when the reader is closed.
    */
    open func SetInput(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IXmlBinaryReaderInitializer_void__SetInput_0__5__Stream_IXmlDictionary_XmlDictionaryReaderQuotas_XmlBinaryReaderSession_OnXmlDictionaryReaderClose(&__thrown, self.get_handle(), stream.get_handle(), dictionary?.get_handle() ?? nil, quotas.get_handle(), session?.get_handle() ?? nil, onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetInput(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try SetInput(stream: stream, dictionary: dictionary, quotas: quotas, session: session, onClose: del_onClose);
    }
} // IXmlBinaryReaderInitializer


// type: System.Xml.IXmlBinaryWriterInitializer
    /**
    Specifies implementation requirements for XML binary writers that derive from this interface.

    */
open class IXmlBinaryWriterInitializer
    :
    SGBridgeGenericValue,
    System_Xml_IXmlBinaryWriterInitializer
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IXmlBinaryWriterInitializer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetOutput(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlBinaryWriterSession, bool)
// docid: M:System.Xml.IXmlBinaryWriterInitializer.SetOutput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)
    /**
    Specifies initialization requirements for XML binary writers that implement this method.

    - Parameter stream: The stream to write to.
    - Parameter dictionary: The  to use.
    - Parameter session: The  to use.
    - Parameter ownsStream: 
         to indicate the stream is closed by the writer when done; otherwise, .
    */
    open func SetOutput(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, session : Optional<dotnet.System.Xml.XmlBinaryWriterSession>, ownsStream : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IXmlBinaryWriterInitializer_void__SetOutput_0__4__Stream_IXmlDictionary_XmlBinaryWriterSession_bool(&__thrown, self.get_handle(), stream.get_handle(), dictionary?.get_handle() ?? nil, session?.get_handle() ?? nil, Swift.Int32(ownsStream ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IXmlBinaryWriterInitializer


// type: System.Xml.IXmlDictionary
    /**
    An  that defines the contract that an Xml dictionary must implement to be used by  and  implementations.

    */
open class IXmlDictionary
    :
    SGBridgeGenericValue,
    System_Xml_IXmlDictionary
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IXmlDictionary_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool TryLookup(System.Int32, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
    /**
    Attempts to look up an entry in the dictionary.

    - Parameter key: Key to look up.
    - Parameter result: If  is defined, the  that is mapped to the key; otherwise .
    - Returns: 
         if key is in the dictionary; otherwise, .

    */
    open func TryLookup(key : Swift.Int32, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_IXmlDictionary_bool__TryLookup_0__2__i32_outXmlDictionaryString(&__thrown, self.get_handle(), key, &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryLookup(System.String, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)
    /**
    Checks the dictionary for a specified string value.

    - Parameter value: String value being checked for.
    - Parameter result: The corresponding , if found; otherwise, .
    - Returns: 
         if value is in the dictionary; otherwise, .

    */
    open func TryLookup(value : dotnet.System.String, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_IXmlDictionary_bool__TryLookup_0__2__String_outXmlDictionaryString(&__thrown, self.get_handle(), value.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryLookup(System.Xml.XmlDictionaryString, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
    /**
    Checks the dictionary for a specified .

    - Parameter value: The  being checked for.
    - Parameter result: The matching , if found; otherwise, .
    - Returns: 
         if  is in the dictionary; otherwise, .

    */
    open func TryLookup(value : dotnet.System.Xml.XmlDictionaryString, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_IXmlDictionary_bool__TryLookup_0__2__XmlDictionaryString_outXmlDictionaryString(&__thrown, self.get_handle(), value.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IXmlDictionary


// type: System.Xml.IXmlTextReaderInitializer
    /**
    Specifies implementation requirements for XML text readers that derive from this interface.

    */
open class IXmlTextReaderInitializer
    :
    SGBridgeGenericValue,
    System_Xml_IXmlTextReaderInitializer
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IXmlTextReaderInitializer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetInput(System.Byte[], System.Int32, System.Int32, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.IXmlTextReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Specifies initialization requirements for XML text readers that read a buffer.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter encoding: The character encoding of the stream.
    - Parameter quotas: The  to apply.
    - Parameter onClose: The delegate to be called when the reader is closed.
    */
    open func SetInput(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IXmlTextReaderInitializer_void__SetInput_0__6__u8Array_i32_i32_Encoding_XmlDictionaryReaderQuotas_OnXmlDictionaryReaderClose(&__thrown, self.get_handle(), buffer.get_handle(), offset, count, encoding?.get_handle() ?? nil, quotas.get_handle(), onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetInput(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try SetInput(buffer: buffer, offset: offset, count: count, encoding: encoding, quotas: quotas, onClose: del_onClose);
    }
    // void SetInput(System.IO.Stream, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.IXmlTextReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Specifies initialization requirements for XML text readers that read a stream.

    - Parameter stream: The stream from which to read.
    - Parameter encoding: The character encoding of the stream.
    - Parameter quotas: The  to apply.
    - Parameter onClose: The delegate to be called when the reader is closed.
    */
    open func SetInput(stream : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IXmlTextReaderInitializer_void__SetInput_0__4__Stream_Encoding_XmlDictionaryReaderQuotas_OnXmlDictionaryReaderClose(&__thrown, self.get_handle(), stream.get_handle(), encoding?.get_handle() ?? nil, quotas.get_handle(), onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func SetInput(stream : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try SetInput(stream: stream, encoding: encoding, quotas: quotas, onClose: del_onClose);
    }
} // IXmlTextReaderInitializer


// type: System.Xml.IXmlTextWriterInitializer
    /**
    Specifies implementation requirements for XML text writers that derive from this interface.

    */
open class IXmlTextWriterInitializer
    :
    SGBridgeGenericValue,
    System_Xml_IXmlTextWriterInitializer
{
    open class func get_type_handle() -> TypeHandle {
        return System_Xml_IXmlTextWriterInitializer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void SetOutput(System.IO.Stream, System.Text.Encoding, bool)
// docid: M:System.Xml.IXmlTextWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)
    /**
    Specifies initialization requirements for XML text writers that implement this method.

    - Parameter stream: The stream to write to.
    - Parameter encoding: The character encoding of the stream.
    - Parameter ownsStream: 
         to indicate the stream is closed by the writer when done; otherwise, .
    */
    open func SetOutput(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, ownsStream : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_IXmlTextWriterInitializer_void__SetOutput_0__3__Stream_Encoding_bool(&__thrown, self.get_handle(), stream.get_handle(), encoding.get_handle(), Swift.Int32(ownsStream ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IXmlTextWriterInitializer


// type: System.Xml.OnXmlDictionaryReaderClose
    /**
    
         for a callback method when closing the reader.

    */
public final class OnXmlDictionaryReaderClose
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_OnXmlDictionaryReaderClose_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Xml.XmlDictionaryReader)
// docid: M:System.Xml.OnXmlDictionaryReaderClose.Invoke(System.Xml.XmlDictionaryReader)
    public func Invoke(reader : dotnet.System.Xml.XmlDictionaryReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_OnXmlDictionaryReaderClose_void__Invoke_0__1__XmlDictionaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Xml.XmlDictionaryReader, System.AsyncCallback, System.Object)
// docid: M:System.Xml.OnXmlDictionaryReaderClose.BeginInvoke(System.Xml.XmlDictionaryReader,System.AsyncCallback,System.Object)
    public func BeginInvoke(reader : dotnet.System.Xml.XmlDictionaryReader, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_OnXmlDictionaryReaderClose_IAsyncResult__BeginInvoke_0__3__XmlDictionaryReader_AsyncCallback_Object(&__thrown, self.get_handle(), reader.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Xml.OnXmlDictionaryReaderClose.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_OnXmlDictionaryReaderClose_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, reader : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Xml.XmlDictionaryReader(hndl: reader));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, reader : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void;
            f(thrown, reader);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Xml_OnXmlDictionaryReaderClose_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Xml.XmlDictionaryReader)
// docid: M:System.Xml.OnXmlDictionaryReaderClose.Invoke(System.Xml.XmlDictionaryReader)
    public func callAsFunction(reader : dotnet.System.Xml.XmlDictionaryReader) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_OnXmlDictionaryReaderClose_void__Invoke_0__1__XmlDictionaryReader(&__thrown, self.get_handle(), reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // OnXmlDictionaryReaderClose


// type: System.Xml.UniqueId
    /**
    A unique identifier optimized for Guids.

    */
open class UniqueId
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_UniqueId_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.UniqueId.#ctor
    /**
    Creates a new instance of this class with a new, unique Guid.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_UniqueId_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[])
// docid: M:System.Xml.UniqueId.#ctor(System.Byte[])
    /**
    Creates a new instance of this class using a byte array that represents a .

    - Parameter guid: A byte array that represents a .
    */
    public init(guid : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_UniqueId_ctor_0__1__u8Array(&__thrown, guid.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte[], System.Int32)
// docid: M:System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)
    /**
    Creates a new instance of this class starting from an offset within a  array that represents a .

    - Parameter guid: A  array that represents a .
    - Parameter offset: Offset position within the  array that represents a .
    */
    public init(guid : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_UniqueId_ctor_0__2__u8Array_i32(&__thrown, guid.get_handle(), offset);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)
    /**
    Creates a new instance of this class starting from an offset within a  using a specified number of entries.

    - Parameter chars: A  array that represents a .
    - Parameter offset: Offset position within the  array that represents a .
    - Parameter count: Number of array entries to use, starting from .
    */
    public init(chars : dotnet.System_Arr<dotnet.System.Char>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_UniqueId_ctor_0__3__CharArray_i32_i32(&__thrown, chars.get_handle(), offset, count);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Guid)
// docid: M:System.Xml.UniqueId.#ctor(System.Guid)
    /**
    Creates a new instance of this class using a .

    - Parameter guid: A .
    */
    public init(guid : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_UniqueId_ctor_0__1__Guid(&__thrown, guid.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Xml.UniqueId.#ctor(System.String)
    /**
    Creates a new instance of this class using a string.

    - Parameter value: A string used to generate the .
    */
    public init(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_UniqueId_ctor_0__1__String(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Xml.UniqueId.Equals(System.Object)
    /**
    Tests whether an object equals this .

    - Parameter obj: The object to compare.
    - Returns: 
         if the object equals this ; otherwise .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Xml.UniqueId.GetHashCode
    /**
    Creates a hash-code representation of this .

    - Returns: An integer hash-code representation of this .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Xml.UniqueId, System.Xml.UniqueId)
// docid: M:System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)
    /**
    Overrides the equality operator to test for equality of two s.

    - Parameter id1: The first .
    - Parameter id2: The second .
    - Returns: 
         if the two s are equal, or are both ;  if they are not equal, or if only one of them is .

    */
    open class func op_Equality(id1 : Optional<dotnet.System.Xml.UniqueId>, id2 : Optional<dotnet.System.Xml.UniqueId>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_bool__op_Equality_0__2__UniqueId_UniqueId(&__thrown, id1?.get_handle() ?? nil, id2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Xml.UniqueId, System.Xml.UniqueId)
// docid: M:System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)
    /**
    Overrides the equality operator to test for inequality of two s.

    - Parameter id1: The first .
    - Parameter id2: The second .
    - Returns: 
         if the overridden equality operator returns ; otherwise .

    */
    open class func op_Inequality(id1 : Optional<dotnet.System.Xml.UniqueId>, id2 : Optional<dotnet.System.Xml.UniqueId>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_bool__op_Inequality_0__2__UniqueId_UniqueId(&__thrown, id1?.get_handle() ?? nil, id2?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 ToCharArray(System.Char[], System.Int32)
// docid: M:System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)
    /**
    Puts the  value into a  array.

    - Parameter chars: The  array.
    - Parameter offset: Position in the  array to start inserting the  value.
    - Returns: Number of entries in the  array filled by the  value.

    */
    open func ToCharArray(chars : dotnet.System_Arr<dotnet.System.Char>, offset : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_i32__ToCharArray_0__2__CharArray_i32(&__thrown, self.get_handle(), chars.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Xml.UniqueId.ToString
    /**
    Displays the  value in string format.

    - Returns: A string representation of the  value.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryGetGuid(System.Byte[], System.Int32)
// docid: M:System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)
    /**
    Tries to get the value of the  as a  and store it in the given byte array at the specified offset.

    - Parameter buffer: 
         array that will contain the .
    - Parameter offset: Position in the  array to start inserting the  value.
    - Returns: 
         if the value stored in this instance of  is a ; otherwise .

    */
    open func TryGetGuid(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_bool__TryGetGuid_0__2__u8Array_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetGuid(ref System.Guid)
// docid: M:System.Xml.UniqueId.TryGetGuid(System.Guid@)
    /**
    Tries to get the value of the  as a .

    - Parameter guid: The  if successful; otherwise .
    - Returns: 
         if the UniqueId represents a ; otherwise .

    */
    open func TryGetGuid(guid : inout dotnet.System.Guid) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_guid = guid.get_handle();
        let __return = System_Xml_UniqueId_bool__TryGetGuid_0__1__outGuid(&__thrown, self.get_handle(), &_tmp_out_guid);
        let _tmp2_guid = dotnet.System.Guid(hndl: _tmp_out_guid);
            guid = _tmp2_guid;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_CharArrayLength()
// docid: M:System.Xml.UniqueId.get_CharArrayLength
    open func get_CharArrayLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_i32__get_CharArrayLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsGuid()
// docid: M:System.Xml.UniqueId.get_IsGuid
    open func get_IsGuid() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_UniqueId_bool__get_IsGuid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets the length of the string representation of the .

    */
    open var CharArrayLength : Swift.Int32 {
        get {
            return try! get_CharArrayLength();
        }
    }
    /**
    Indicates whether the  is a .

    */
    open var IsGuid : Bool {
        get {
            return try! get_IsGuid();
        }
    }
} // UniqueId


// type: System.Xml.XmlBinaryReaderSession
    /**
    Enables optimized strings to be managed in a dynamic way.

    */
open class XmlBinaryReaderSession
    :
    dotnet.System.Object,
    System_Xml_IXmlDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlBinaryReaderSession_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlBinaryReaderSession.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlBinaryReaderSession_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlDictionaryString Add(System.Int32, System.String)
// docid: M:System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)
    /**
    Creates an  from the input parameters and adds it to an internal collection.

    - Parameter id: The key value.
    - Parameter value: The value.
    - Returns: The newly created  that is added to an internal collection.

    */
    open func Add(id : Swift.Int32, value : dotnet.System.String) throws -> dotnet.System.Xml.XmlDictionaryString {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlBinaryReaderSession_XmlDictionaryString__Add_0__2__i32_String(&__thrown, self.get_handle(), id, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryString(hndl : __return);
        }
    }
    // void Clear()
// docid: M:System.Xml.XmlBinaryReaderSession.Clear
    /**
    Clears the internal collection of all contents.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlBinaryReaderSession_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryLookup(System.Int32, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
    /**
    Checks whether the internal collection contains an entry matching a key.

    - Parameter key: The key to search on.
    - Parameter result: When this method returns, contains a string if an entry is found; otherwise, . This parameter is passed uninitialized.
    - Returns: 
         if an entry matching the  was found; otherwise, .

    */
    open /* method final */ func TryLookup(key : Swift.Int32, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_XmlBinaryReaderSession_bool__TryLookup_0__2__i32_outXmlDictionaryString(&__thrown, self.get_handle(), key, &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryLookup(System.String, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)
    /**
    Checks whether the internal collection contains an entry matching a value.

    - Parameter value: The value to search for.
    - Parameter result: When this method returns, contains a string if an entry is found; otherwise, . This parameter is passed uninitialized.
    - Returns: 
         if an entry matching the  was found; otherwise, .

    */
    open /* method final */ func TryLookup(value : dotnet.System.String, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_XmlBinaryReaderSession_bool__TryLookup_0__2__String_outXmlDictionaryString(&__thrown, self.get_handle(), value.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryLookup(System.Xml.XmlDictionaryString, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
    /**
    Checks whether the internal collection contains an entry matching a value.

    - Parameter value: The value to search for.
    - Parameter result: When this method returns, contains a string if an entry is found; otherwise, . This parameter is passed uninitialized.
    - Returns: 
         if an entry matching the  was found; otherwise, .

    */
    open /* method final */ func TryLookup(value : dotnet.System.Xml.XmlDictionaryString, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_XmlBinaryReaderSession_bool__TryLookup_0__2__XmlDictionaryString_outXmlDictionaryString(&__thrown, self.get_handle(), value.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // XmlBinaryReaderSession


// type: System.Xml.XmlBinaryWriterSession
    /**
    Enables using a dynamic dictionary to compress common strings that appear in a message and maintain state.

    */
open class XmlBinaryWriterSession
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlBinaryWriterSession_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlBinaryWriterSession.#ctor
    /**
    Creates an instance of this class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlBinaryWriterSession_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Reset()
// docid: M:System.Xml.XmlBinaryWriterSession.Reset
    /**
    Clears out the internal collections.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlBinaryWriterSession_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryAdd(System.Xml.XmlDictionaryString, ref System.Int32)
// docid: M:System.Xml.XmlBinaryWriterSession.TryAdd(System.Xml.XmlDictionaryString,System.Int32@)
    /**
    Tries to add an  to the internal collection.

    - Parameter value: The  to add.
    - Parameter key: The key of the  that was successfully added.
    - Returns: 
         if the string could be added; otherwise, .

    */
    open func TryAdd(value : dotnet.System.Xml.XmlDictionaryString, key : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_key = key;
        let __return = System_Xml_XmlBinaryWriterSession_bool__TryAdd_0__2__XmlDictionaryString_outi32(&__thrown, self.get_handle(), value.get_handle(), &_tmp_out_key);
        let _tmp2_key = _tmp_out_key;
            key = _tmp2_key;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // XmlBinaryWriterSession


// type: System.Xml.XmlDictionary
    /**
    Implements a dictionary used to optimize Windows Communication Foundation (WCF)'s XML reader/writer implementations.

    */
open class XmlDictionary
    :
    dotnet.System.Object,
    System_Xml_IXmlDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlDictionary.#ctor
    /**
    Creates an empty .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Xml.XmlDictionary.#ctor(System.Int32)
    /**
    Creates a  with an initial capacity.

    - Parameter capacity: The initial size of the dictionary.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlDictionary_ctor_0__1__i32(&__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Xml.XmlDictionaryString Add(System.String)
// docid: M:System.Xml.XmlDictionary.Add(System.String)
    /**
    Adds a string to the .

    - Parameter value: String to add to the dictionary.
    - Returns: The  that was added.

    */
    open func Add(value : dotnet.System.String) throws -> dotnet.System.Xml.XmlDictionaryString {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionary_XmlDictionaryString__Add_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryString(hndl : __return);
        }
    }
    // bool TryLookup(System.Int32, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
    /**
    Attempts to look up an entry in the dictionary.

    - Parameter key: Key to look up.
    - Parameter result: If  is defined, the  that is mapped to the key; otherwise .
    - Returns: 
         if key is in the dictionary; otherwise, .

    */
    open func TryLookup(key : Swift.Int32, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_XmlDictionary_bool__TryLookup_0__2__i32_outXmlDictionaryString(&__thrown, self.get_handle(), key, &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryLookup(System.String, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)
    /**
    Checks the dictionary for a specified string value.

    - Parameter value: String value being checked for.
    - Parameter result: The corresponding , if found; otherwise .
    - Returns: 
         if value is in the dictionary; otherwise, .

    */
    open func TryLookup(value : dotnet.System.String, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_XmlDictionary_bool__TryLookup_0__2__String_outXmlDictionaryString(&__thrown, self.get_handle(), value.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryLookup(System.Xml.XmlDictionaryString, ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
    /**
    Checks the dictionary for a specified .

    - Parameter value: The  being checked for.
    - Parameter result: The matching , if found; otherwise, .
    - Returns: 
         if  is in the dictionary; otherwise, .

    */
    open func TryLookup(value : dotnet.System.Xml.XmlDictionaryString, result : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = result.get_handle();
        let __return = System_Xml_XmlDictionary_bool__TryLookup_0__2__XmlDictionaryString_outXmlDictionaryString(&__thrown, self.get_handle(), value.get_handle(), &_tmp_out_result);
        let _tmp2_result = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_result);
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.IXmlDictionary get_Empty()
// docid: M:System.Xml.XmlDictionary.get_Empty
    open class func get_Empty() throws -> dotnet.System.Xml.IXmlDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionary_IXmlDictionary__get_Empty_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.IXmlDictionary(hndl : __return);
        }
    }
    /**
    Gets a  empty .

    */
    public static var Empty : dotnet.System.Xml.IXmlDictionary {
        get {
            return try! get_Empty();
        }
    }
} // XmlDictionary


// type: System.Xml.XmlDictionaryReader
    /**
    An  class that the Windows Communication Foundation (WCF) derives from  to do serialization and deserialization.

    */
open class XmlDictionaryReader
    :
    dotnet.System.Xml.XmlReader
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDictionaryReader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.Byte[], System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter dictionary: 
         to use.
    - Parameter quotas: The quotas that apply to this operation.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__5__u8Array_i32_i32_IXmlDictionary_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), offset, count, dictionary?.get_handle() ?? nil, quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.Byte[], System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter dictionary: The  to use.
    - Parameter quotas: The  to apply.
    - Parameter session: The  to use.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__6__u8Array_i32_i32_IXmlDictionary_XmlDictionaryReaderQuotas_XmlBinaryReaderSession(&__thrown, buffer.get_handle(), offset, count, dictionary?.get_handle() ?? nil, quotas.get_handle(), session?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.Byte[], System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter dictionary: The  to use.
    - Parameter quotas: The  to apply.
    - Parameter session: The  to use.
    - Parameter onClose: Delegate to be called when the reader is closed.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__7__u8Array_i32_i32_IXmlDictionary_XmlDictionaryReaderQuotas_XmlBinaryReaderSession_OnXmlDictionaryReaderClose(&__thrown, buffer.get_handle(), offset, count, dictionary?.get_handle() ?? nil, quotas.get_handle(), session?.get_handle() ?? nil, onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // delegate closure overload
    open class func CreateBinaryReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws -> dotnet.System.Xml.XmlDictionaryReader {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try CreateBinaryReader(buffer: buffer, offset: offset, count: count, dictionary: dictionary, quotas: quotas, session: session, onClose: del_onClose);
    }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.Byte[], System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter quotas: The quotas that apply to this operation.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__4__u8Array_i32_i32_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), offset, count, quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.Byte[], System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter buffer: The buffer from which to read.
    - Parameter quotas: The quotas that apply to this operation.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(buffer : dotnet.System_Arr<Swift.UInt8>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__2__u8Array_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter stream: The stream from which to read.
    - Parameter dictionary: 
         to use.
    - Parameter quotas: The quotas that apply to this operation.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__3__Stream_IXmlDictionary_XmlDictionaryReaderQuotas(&__thrown, stream.get_handle(), dictionary?.get_handle() ?? nil, quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter stream: The stream from which to read.
    - Parameter dictionary: 
         to use.
    - Parameter quotas: The quotas that apply to this operation.
    - Parameter session: 
         to use.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__4__Stream_IXmlDictionary_XmlDictionaryReaderQuotas_XmlBinaryReaderSession(&__thrown, stream.get_handle(), dictionary?.get_handle() ?? nil, quotas.get_handle(), session?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter stream: The stream from which to read.
    - Parameter dictionary: 
         to use.
    - Parameter quotas: 
         to apply.
    - Parameter session: 
         to use.
    - Parameter onClose: Delegate to be called when the reader is closed.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__5__Stream_IXmlDictionary_XmlDictionaryReaderQuotas_XmlBinaryReaderSession_OnXmlDictionaryReaderClose(&__thrown, stream.get_handle(), dictionary?.get_handle() ?? nil, quotas.get_handle(), session?.get_handle() ?? nil, onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // delegate closure overload
    open class func CreateBinaryReader(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, session : Optional<dotnet.System.Xml.XmlBinaryReaderSession>, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws -> dotnet.System.Xml.XmlDictionaryReader {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try CreateBinaryReader(stream: stream, dictionary: dictionary, quotas: quotas, session: session, onClose: del_onClose);
    }
    // System.Xml.XmlDictionaryReader CreateBinaryReader(System.IO.Stream, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that can read .NET Binary XML Format.

    - Parameter stream: The stream from which to read.
    - Parameter quotas: The quotas that apply to this operation.
    - Returns: An instance of .

    */
    open class func CreateBinaryReader(stream : dotnet.System.IO.Stream, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateBinaryReader_0__2__Stream_XmlDictionaryReaderQuotas(&__thrown, stream.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateDictionaryReader(System.Xml.XmlReader)
// docid: M:System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)
    /**
    Creates an instance of  from an existing .

    - Parameter reader: An instance of .
    - Returns: An instance of .

    */
    open class func CreateDictionaryReader(reader : dotnet.System.Xml.XmlReader) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateDictionaryReader_0__1__XmlReader(&__thrown, reader.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateMtomReader(System.Byte[], System.Int32, System.Int32, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that reads XML in the MTOM format.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter encoding: The possible character encoding of the input.
    - Parameter quotas: The quotas to apply to this reader.
    - Returns: An instance of .

    */
    open class func CreateMtomReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : dotnet.System.Text.Encoding, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateMtomReader_0__5__u8Array_i32_i32_Encoding_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), offset, count, encoding.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateMtomReader(System.Byte[], System.Int32, System.Int32, System.Text.Encoding[], System.String, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that reads XML in the MTOM format.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter encodings: The possible character encodings of the input.
    - Parameter contentType: The Content-Type MIME type of the message.
    - Parameter quotas: The quotas to apply to this reader.
    - Returns: An instance of .

    */
    open class func CreateMtomReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encodings : dotnet.System_Arr<dotnet.System.Text.Encoding>, contentType : Optional<dotnet.System.String>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateMtomReader_0__6__u8Array_i32_i32_EncodingArray_String_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), offset, count, encodings.get_handle(), contentType?.get_handle() ?? nil, quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateMtomReader(System.Byte[], System.Int32, System.Int32, System.Text.Encoding[], System.String, System.Xml.XmlDictionaryReaderQuotas, System.Int32, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Creates an instance of  that reads XML in the MTOM format.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter encodings: The possible character encodings of the input.
    - Parameter contentType: The Content-Type MIME type of the message.
    - Parameter quotas: The  to apply to the reader.
    - Parameter maxBufferSize: The maximum allowed size of the buffer.
    - Parameter onClose: The delegate to be called when the reader is closed.
    - Returns: An instance of .

    */
    open class func CreateMtomReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encodings : dotnet.System_Arr<dotnet.System.Text.Encoding>, contentType : Optional<dotnet.System.String>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, maxBufferSize : Swift.Int32, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateMtomReader_0__8__u8Array_i32_i32_EncodingArray_String_XmlDictionaryReaderQuotas_i32_OnXmlDictionaryReaderClose(&__thrown, buffer.get_handle(), offset, count, encodings.get_handle(), contentType?.get_handle() ?? nil, quotas.get_handle(), maxBufferSize, onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // delegate closure overload
    open class func CreateMtomReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encodings : dotnet.System_Arr<dotnet.System.Text.Encoding>, contentType : Optional<dotnet.System.String>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, maxBufferSize : Swift.Int32, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws -> dotnet.System.Xml.XmlDictionaryReader {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try CreateMtomReader(buffer: buffer, offset: offset, count: count, encodings: encodings, contentType: contentType, quotas: quotas, maxBufferSize: maxBufferSize, onClose: del_onClose);
    }
    // System.Xml.XmlDictionaryReader CreateMtomReader(System.Byte[], System.Int32, System.Int32, System.Text.Encoding[], System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that reads XML in the MTOM format.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter encodings: The possible character encodings of the input.
    - Parameter quotas: The quotas to apply to this reader.
    - Returns: An instance of .

    */
    open class func CreateMtomReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encodings : dotnet.System_Arr<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateMtomReader_0__5__u8Array_i32_i32_EncodingArray_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), offset, count, encodings.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateMtomReader(System.IO.Stream, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that reads XML in the MTOM format.

    - Parameter stream: The stream from which to read.
    - Parameter encoding: The possible character encoding of the stream.
    - Parameter quotas: The quotas to apply to this reader.
    - Returns: An instance of .

    */
    open class func CreateMtomReader(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateMtomReader_0__3__Stream_Encoding_XmlDictionaryReaderQuotas(&__thrown, stream.get_handle(), encoding.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateMtomReader(System.IO.Stream, System.Text.Encoding[], System.String, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that reads XML in the MTOM format.

    - Parameter stream: The stream from which to read.
    - Parameter encodings: The possible character encodings of the stream.
    - Parameter contentType: The Content-Type MIME type of the message.
    - Parameter quotas: The quotas to apply to this reader.
    - Returns: An instance of .

    */
    open class func CreateMtomReader(stream : dotnet.System.IO.Stream, encodings : dotnet.System_Arr<dotnet.System.Text.Encoding>, contentType : Optional<dotnet.System.String>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateMtomReader_0__4__Stream_EncodingArray_String_XmlDictionaryReaderQuotas(&__thrown, stream.get_handle(), encodings.get_handle(), contentType?.get_handle() ?? nil, quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateMtomReader(System.IO.Stream, System.Text.Encoding[], System.String, System.Xml.XmlDictionaryReaderQuotas, System.Int32, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Creates an instance of  that reads XML in the MTOM format.

    - Parameter stream: The stream from which to read.
    - Parameter encodings: The possible character encodings of the stream.
    - Parameter contentType: The Content-Type MIME type of the message.
    - Parameter quotas: The MIME type of the message.
    - Parameter maxBufferSize: The  to apply to the reader.
    - Parameter onClose: The delegate to be called when the reader is closed.
    - Returns: An instance of .

    */
    open class func CreateMtomReader(stream : dotnet.System.IO.Stream, encodings : dotnet.System_Arr<dotnet.System.Text.Encoding>, contentType : Optional<dotnet.System.String>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, maxBufferSize : Swift.Int32, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateMtomReader_0__6__Stream_EncodingArray_String_XmlDictionaryReaderQuotas_i32_OnXmlDictionaryReaderClose(&__thrown, stream.get_handle(), encodings.get_handle(), contentType?.get_handle() ?? nil, quotas.get_handle(), maxBufferSize, onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // delegate closure overload
    open class func CreateMtomReader(stream : dotnet.System.IO.Stream, encodings : dotnet.System_Arr<dotnet.System.Text.Encoding>, contentType : Optional<dotnet.System.String>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, maxBufferSize : Swift.Int32, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws -> dotnet.System.Xml.XmlDictionaryReader {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try CreateMtomReader(stream: stream, encodings: encodings, contentType: contentType, quotas: quotas, maxBufferSize: maxBufferSize, onClose: del_onClose);
    }
    // System.Xml.XmlDictionaryReader CreateMtomReader(System.IO.Stream, System.Text.Encoding[], System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of  that reads XML in the MTOM format.

    - Parameter stream: The stream from which to read.
    - Parameter encodings: The possible character encodings of the stream.
    - Parameter quotas: The quotas to apply to this reader.
    - Returns: An instance of .

    */
    open class func CreateMtomReader(stream : dotnet.System.IO.Stream, encodings : dotnet.System_Arr<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateMtomReader_0__3__Stream_EncodingArray_XmlDictionaryReaderQuotas(&__thrown, stream.get_handle(), encodings.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateTextReader(System.Byte[], System.Int32, System.Int32, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Creates an instance of .

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter encoding: The  object that specifies the encoding properties to apply.
    - Parameter quotas: The  to apply.
    - Parameter onClose: The delegate to be called when the reader is closed.
    - Returns: An instance of .

    */
    open class func CreateTextReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateTextReader_0__6__u8Array_i32_i32_Encoding_XmlDictionaryReaderQuotas_OnXmlDictionaryReaderClose(&__thrown, buffer.get_handle(), offset, count, encoding?.get_handle() ?? nil, quotas.get_handle(), onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // delegate closure overload
    open class func CreateTextReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws -> dotnet.System.Xml.XmlDictionaryReader {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try CreateTextReader(buffer: buffer, offset: offset, count: count, encoding: encoding, quotas: quotas, onClose: del_onClose);
    }
    // System.Xml.XmlDictionaryReader CreateTextReader(System.Byte[], System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of .

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Parameter quotas: The quotas applied to the reader.
    - Returns: An instance of .

    */
    open class func CreateTextReader(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateTextReader_0__4__u8Array_i32_i32_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), offset, count, quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateTextReader(System.Byte[], System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of .

    - Parameter buffer: The buffer from which to read.
    - Parameter quotas: The quotas applied to the reader.
    - Returns: An instance of .

    */
    open class func CreateTextReader(buffer : dotnet.System_Arr<Swift.UInt8>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateTextReader_0__2__u8Array_XmlDictionaryReaderQuotas(&__thrown, buffer.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryReader CreateTextReader(System.IO.Stream, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)
// docid: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)
    /**
    Creates an instance of .

    - Parameter stream: The stream from which to read.
    - Parameter encoding: The  object that specifies the encoding properties to apply.
    - Parameter quotas: The  to apply.
    - Parameter onClose: The delegate to be called when the reader is closed.
    - Returns: An instance of .

    */
    open class func CreateTextReader(stream : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : Optional<dotnet.System.Xml.OnXmlDictionaryReaderClose>) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateTextReader_0__4__Stream_Encoding_XmlDictionaryReaderQuotas_OnXmlDictionaryReaderClose(&__thrown, stream.get_handle(), encoding?.get_handle() ?? nil, quotas.get_handle(), onClose?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // delegate closure overload
    open class func CreateTextReader(stream : dotnet.System.IO.Stream, encoding : Optional<dotnet.System.Text.Encoding>, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas, onClose : @escaping (dotnet.System.Xml.XmlDictionaryReader) throws -> Void) throws -> dotnet.System.Xml.XmlDictionaryReader {
        let del_onClose = try dotnet.System.Xml.OnXmlDictionaryReaderClose(onClose);
        return try CreateTextReader(stream: stream, encoding: encoding, quotas: quotas, onClose: del_onClose);
    }
    // System.Xml.XmlDictionaryReader CreateTextReader(System.IO.Stream, System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)
    /**
    Creates an instance of .

    - Parameter stream: The stream from which to read.
    - Parameter quotas: The quotas applied to the reader.
    - Returns: An instance of .

    */
    open class func CreateTextReader(stream : dotnet.System.IO.Stream, quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws -> dotnet.System.Xml.XmlDictionaryReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReader__CreateTextReader_0__2__Stream_XmlDictionaryReaderQuotas(&__thrown, stream.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReader(hndl : __return);
        }
    }
    // void EndCanonicalization()
// docid: M:System.Xml.XmlDictionaryReader.EndCanonicalization
    /**
    This method is not yet implemented.

    */
    open func EndCanonicalization() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__EndCanonicalization_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetAttribute(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    When overridden in a derived class, gets the value of an attribute.

    - Parameter localName: An  that represents the local name of the attribute.
    - Parameter namespaceUri: An  that represents the namespace of the attribute.
    - Returns: The value of the attribute.

    */
    open func GetAttribute(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_String__GetAttribute_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void GetNonAtomizedNames(ref System.String, ref System.String)
// docid: M:System.Xml.XmlDictionaryReader.GetNonAtomizedNames(System.String@,System.String@)
    /**
    Gets non-atomized names.

    - Parameter localName: The local name.
    - Parameter namespaceUri: The namespace for the local .
    */
    open func GetNonAtomizedNames(localName : inout dotnet.System.String, namespaceUri : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_localName = localName.get_handle();
            var _tmp_out_namespaceUri = namespaceUri.get_handle();
        System_Xml_XmlDictionaryReader_void__GetNonAtomizedNames_0__2__outString_outString(&__thrown, self.get_handle(), &_tmp_out_localName, &_tmp_out_namespaceUri);
        let _tmp2_localName = dotnet.System.String(hndl: _tmp_out_localName);
            localName = _tmp2_localName;
        let _tmp2_namespaceUri = dotnet.System.String(hndl: _tmp_out_namespaceUri);
            namespaceUri = _tmp2_namespaceUri;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOfLocalName(System.String[], System.String)
// docid: M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)
    /**
    Gets the index of the local name of the current node within an array of names.

    - Parameter localNames: The string array of local names to be searched.
    - Parameter namespaceUri: The namespace of current node.
    - Returns: The index of the local name of the current node within an array of names.

    */
    open func IndexOfLocalName(localNames : dotnet.System_Arr<dotnet.System.String>, namespaceUri : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__IndexOfLocalName_0__2__StringArray_String(&__thrown, self.get_handle(), localNames.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOfLocalName(System.Xml.XmlDictionaryString[], System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)
    /**
    Gets the index of the local name of the current node within an array of names.

    - Parameter localNames: The  array of local names to be searched.
    - Parameter namespaceUri: The namespace of current node.
    - Returns: The index of the local name of the current node within an array of names.

    */
    open func IndexOfLocalName(localNames : dotnet.System_Arr<dotnet.System.Xml.XmlDictionaryString>, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__IndexOfLocalName_0__2__XmlDictionaryStringArray_XmlDictionaryString(&__thrown, self.get_handle(), localNames.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsLocalName(System.String)
// docid: M:System.Xml.XmlDictionaryReader.IsLocalName(System.String)
    /**
    Checks whether the parameter, , is the local name of the current node.

    - Parameter localName: The local name of the current node.
    - Returns: 
         if  matches local name of the current node; otherwise .

    */
    open func IsLocalName(localName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_bool__IsLocalName_0__1__String(&__thrown, self.get_handle(), localName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsLocalName(System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)
    /**
    Checks whether the parameter, , is the local name of the current node.

    - Parameter localName: An  that represents the local name of the current node.
    - Returns: 
         if  matches local name of the current node; otherwise .

    */
    open func IsLocalName(localName : dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_bool__IsLocalName_0__1__XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsNamespaceUri(System.String)
// docid: M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)
    /**
    Checks whether the parameter, , is the namespace of the current node.

    - Parameter namespaceUri: The namespace of current node.
    - Returns: 
         if  matches namespace of the current node; otherwise .

    */
    open func IsNamespaceUri(namespaceUri : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_bool__IsNamespaceUri_0__1__String(&__thrown, self.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsNamespaceUri(System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)
    /**
    Checks whether the parameter, , is the namespace of the current node.

    - Parameter namespaceUri: Namespace of current node.
    - Returns: 
         if  matches namespace of the current node; otherwise .

    */
    open func IsNamespaceUri(namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_bool__IsNamespaceUri_0__1__XmlDictionaryString(&__thrown, self.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartArray(ref System.Type)
// docid: M:System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)
    /**
    Checks whether the reader is positioned at the start of an array. This class returns , but derived classes that have the concept of arrays might return .

    - Parameter type: Type of the node, if a valid node; otherwise .
    - Returns: 
         if the reader is positioned at the start of an array node; otherwise .

    */
    open func IsStartArray(type : inout dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_type = type.get_handle();
        let __return = System_Xml_XmlDictionaryReader_bool__IsStartArray_0__1__outType(&__thrown, self.get_handle(), &_tmp_out_type);
        let _tmp2_type = dotnet.System.Type_(hndl: _tmp_out_type);
            type = _tmp2_type;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Tests whether the first tag is a start tag or empty element tag and if the local name and namespace URI match those of the current node.

    - Parameter localName: An  that represents the local name of the attribute.
    - Parameter namespaceUri: An  that represents the namespace of the attribute.
    - Returns: 
         if the first tag in the array is a start tag or empty element tag and matches  and ; otherwise .

    */
    open func IsStartElement(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_bool__IsStartElement_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void MoveToStartElement()
// docid: M:System.Xml.XmlDictionaryReader.MoveToStartElement
    /**
    Tests whether the current content node is a start element or an empty element.

    */
    open func MoveToStartElement() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__MoveToStartElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveToStartElement(System.String)
// docid: M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)
    /**
    Tests whether the current content node is a start element or an empty element and if the  property of the element matches the given argument.

    - Parameter name: The  property of the element.
    */
    open func MoveToStartElement(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__MoveToStartElement_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveToStartElement(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)
    /**
    Tests whether the current content node is a start element or an empty element and if the  and  properties of the element matches the given arguments.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    */
    open func MoveToStartElement(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__MoveToStartElement_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void MoveToStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Tests whether the current content node is a start element or an empty element and if the  and  properties of the element matches the given argument.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    */
    open func MoveToStartElement(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__MoveToStartElement_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, bool[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The local name of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<Bool>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_boolArray_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, System.DateTime[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<dotnet.System.DateTime>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_DateTimeArray_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, System.Decimal[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<dotnet.System.Decimal>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_DecimalArray_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, System.Double[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<Swift.Double>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_f64Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, System.Guid[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<dotnet.System.Guid>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_GuidArray_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, System.Int16[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  integers into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the integers are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of integers to put in the array.
    - Returns: The number of integers put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<Swift.Int16>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_i16Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, System.Int32[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of integers into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the integers are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of integers to put in the array.
    - Returns: The number of integers put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<Swift.Int32>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_i32Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, System.Int64[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  integers into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the integers are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of integers to put in the array.
    - Returns: The number of integers put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<Swift.Int64>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_i64Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.String, System.String, System.Single[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  numbers into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the float numbers are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of float numbers to put in the array.
    - Returns: The umber of float numbers put in the array.

    */
    open func ReadArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String, array : dotnet.System_Arr<Swift.Float>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__String_String_f32Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 ReadArray(System.String, System.String, System.TimeSpan[], System.Int32, System.Int32)
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, bool[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<Bool>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_boolArray_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.DateTime[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<dotnet.System.DateTime>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_DateTimeArray_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Decimal[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<dotnet.System.Decimal>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_DecimalArray_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Double[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes type into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<Swift.Double>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_f64Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Guid[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the nodes are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to put in the array.
    - Returns: The number of nodes put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<dotnet.System.Guid>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_GuidArray_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int16[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  integers into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the integers are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of integers to put in the array.
    - Returns: The number of integers put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<Swift.Int16>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_i16Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int32[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of integers into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the integers are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of integers to put in the array.
    - Returns: The number of integers put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<Swift.Int32>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_i32Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int64[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  integers into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the integers are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of integers to put in the array.
    - Returns: The number of integers put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<Swift.Int64>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_i64Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Single[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)
    /**
    Reads repeated occurrences of  numbers into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array into which the float numbers are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of float numbers to put in the array.
    - Returns: The number of float numbers put in the array.

    */
    open func ReadArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString, array : dotnet.System_Arr<Swift.Float>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadArray_0__5__XmlDictionaryString_XmlDictionaryString_f32Array_i32_i32(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle(), array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.TimeSpan[], System.Int32, System.Int32)
    // bool[] ReadBooleanArray(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: A  array of the  nodes.

    */
    open func ReadBooleanArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_boolArray__ReadBooleanArray_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Bool>(hndl : __return);
        }
    }
    // bool[] ReadBooleanArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Reads repeated occurrences of  nodes into a typed array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: A  array of the  nodes.

    */
    open func ReadBooleanArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_boolArray__ReadBooleanArray_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Bool>(hndl : __return);
        }
    }
    // System.Object ReadContentAs(System.Type, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
    /**
    Converts a node's content to a specified type.

    - Parameter type: The  of the value to be returned.
    - Parameter namespaceResolver: An  object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an  object to an xs:string. This value can be a null reference.
    - Returns: The concatenated text content or attribute value converted to the requested type.

    */
    open func ReadContentAs(type : dotnet.System.Type_, namespaceResolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_Object__ReadContentAs_0__2__Type_IXmlNamespaceResolver(&__thrown, self.get_handle(), type.get_handle(), namespaceResolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Byte[] ReadContentAsBase64()
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsBase64
    /**
    Reads the content and returns the Base64 decoded binary bytes.

    - Returns: A byte array that contains the Base64 decoded binary bytes.

    */
    open func ReadContentAsBase64() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_u8Array__ReadContentAsBase64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] ReadContentAsBinHex()
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex
    /**
    Reads the content and returns the  decoded binary bytes.

    - Returns: A byte array that contains the  decoded binary bytes.

    */
    open func ReadContentAsBinHex() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_u8Array__ReadContentAsBinHex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Int32 ReadContentAsChars(System.Char[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)
    /**
    Reads the content into a  array.

    - Parameter chars: The array into which the characters are put.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of characters to put in the array.
    - Returns: Number of characters read.

    */
    open func ReadContentAsChars(chars : dotnet.System_Arr<dotnet.System.Char>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadContentAsChars_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), chars.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Decimal ReadContentAsDecimal()
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsDecimal
    /**
    Converts a node's content to .

    - Returns: The  representation of node's content.

    */
    open override func ReadContentAsDecimal() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_Decimal__ReadContentAsDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Single ReadContentAsFloat()
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsFloat
    /**
    Converts a node's content to .

    - Returns: The  representation of node's content.

    */
    open override func ReadContentAsFloat() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_f32__ReadContentAsFloat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid ReadContentAsGuid()
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsGuid
    /**
    Converts a node's content to .

    - Returns: The  representation of node's content.

    */
    open func ReadContentAsGuid() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_Guid__ReadContentAsGuid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // void ReadContentAsQualifiedName(ref System.String, ref System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)
    /**
    Converts a node's content to a qualified name representation.

    - Parameter localName: The  part of the qualified name ( parameter).
    - Parameter namespaceUri: The  part of the qualified name ( parameter).
    */
    open func ReadContentAsQualifiedName(localName : inout dotnet.System.String, namespaceUri : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_localName = localName.get_handle();
            var _tmp_out_namespaceUri = namespaceUri.get_handle();
        System_Xml_XmlDictionaryReader_void__ReadContentAsQualifiedName_0__2__outString_outString(&__thrown, self.get_handle(), &_tmp_out_localName, &_tmp_out_namespaceUri);
        let _tmp2_localName = dotnet.System.String(hndl: _tmp_out_localName);
            localName = _tmp2_localName;
        let _tmp2_namespaceUri = dotnet.System.String(hndl: _tmp_out_namespaceUri);
            namespaceUri = _tmp2_namespaceUri;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ReadContentAsString()
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsString
    /**
    Converts a node's content to a string.

    - Returns: The node content in a string representation.

    */
    open override func ReadContentAsString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_String__ReadContentAsString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ReadContentAsString(System.String[], ref System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)
    /**
    Converts a node's content to a string.

    - Parameter strings: The array of strings to match content against.
    - Parameter index: The index of the entry in  that matches the content.
    - Returns: The node content in a string representation.

    */
    open func ReadContentAsString(strings : dotnet.System_Arr<dotnet.System.String>, index : inout Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
            var _tmp_out_index = index;
        let __return = System_Xml_XmlDictionaryReader_String__ReadContentAsString_0__2__StringArray_outi32(&__thrown, self.get_handle(), strings.get_handle(), &_tmp_out_index);
        let _tmp2_index = _tmp_out_index;
            index = _tmp2_index;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ReadContentAsString(System.Xml.XmlDictionaryString[], ref System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)
    /**
    Converts a node's content to a string.

    - Parameter strings: The array of  objects to match content against.
    - Parameter index: The index of the entry in  that matches the content.
    - Returns: The node content in a string representation.

    */
    open func ReadContentAsString(strings : dotnet.System_Arr<dotnet.System.Xml.XmlDictionaryString>, index : inout Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
            var _tmp_out_index = index;
        let __return = System_Xml_XmlDictionaryReader_String__ReadContentAsString_0__2__XmlDictionaryStringArray_outi32(&__thrown, self.get_handle(), strings.get_handle(), &_tmp_out_index);
        let _tmp2_index = _tmp_out_index;
            index = _tmp2_index;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.TimeSpan ReadContentAsTimeSpan()
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan
    /**
    Converts a node's content to .

    - Returns: 
         representation of node's content.

    */
    open func ReadContentAsTimeSpan() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_TimeSpan__ReadContentAsTimeSpan_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // System.Xml.UniqueId ReadContentAsUniqueId()
// docid: M:System.Xml.XmlDictionaryReader.ReadContentAsUniqueId
    /**
    Converts a node's content to a unique identifier.

    - Returns: The node's content represented as a unique identifier.

    */
    open func ReadContentAsUniqueId() throws -> dotnet.System.Xml.UniqueId {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_UniqueId__ReadContentAsUniqueId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.UniqueId(hndl : __return);
        }
    }
    // System.DateTime[] ReadDateTimeArray(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)
    /**
    Converts a node's content to a  array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: The node's content represented as a  array.

    */
    open func ReadDateTimeArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_DateTimeArray__ReadDateTimeArray_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.DateTime>(hndl : __return);
        }
    }
    // System.DateTime[] ReadDateTimeArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Converts a node's content to a  array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: The node's content represented as a  array.

    */
    open func ReadDateTimeArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_DateTimeArray__ReadDateTimeArray_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.DateTime>(hndl : __return);
        }
    }
    // System.Decimal[] ReadDecimalArray(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)
    /**
    Converts a node's content to a  array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: The node's content represented as a  array.

    */
    open func ReadDecimalArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.Decimal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_DecimalArray__ReadDecimalArray_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Decimal>(hndl : __return);
        }
    }
    // System.Decimal[] ReadDecimalArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Converts a node's content to a  array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: The node's content represented as a  array.

    */
    open func ReadDecimalArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<dotnet.System.Decimal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_DecimalArray__ReadDecimalArray_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Decimal>(hndl : __return);
        }
    }
    // System.Double[] ReadDoubleArray(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)
    /**
    Converts a node's content to a  array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: The node's content represented as a  array.

    */
    open func ReadDoubleArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_f64Array__ReadDoubleArray_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Double>(hndl : __return);
        }
    }
    // System.Double[] ReadDoubleArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Converts a node's content to a  array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: The node's content represented as a  array.

    */
    open func ReadDoubleArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_f64Array__ReadDoubleArray_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Double>(hndl : __return);
        }
    }
    // System.Byte[] ReadElementContentAsBase64()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsBase64
    /**
    Converts a node's content to a array of Base64 bytes.

    - Returns: The node's content represented as an array of Base64 bytes.

    */
    open func ReadElementContentAsBase64() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_u8Array__ReadElementContentAsBase64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] ReadElementContentAsBinHex()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex
    /**
    Converts a node's content to an array of  bytes.

    - Returns: The node's content represented as an array of  bytes.

    */
    open func ReadElementContentAsBinHex() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_u8Array__ReadElementContentAsBinHex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // bool ReadElementContentAsBoolean()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean
    /**
    Converts an element's content to a .

    - Returns: The node's content represented as a .

    */
    open override func ReadElementContentAsBoolean() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_bool__ReadElementContentAsBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.DateTime ReadElementContentAsDateTime()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsDateTime
    /**
    Converts an element's content to a .

    - Returns: The node's content represented as a .

    */
    open override func ReadElementContentAsDateTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_DateTime__ReadElementContentAsDateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.Decimal ReadElementContentAsDecimal()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal
    /**
    Converts an element's content to a .

    - Returns: The node's content represented as a .

    */
    open override func ReadElementContentAsDecimal() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_Decimal__ReadElementContentAsDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double ReadElementContentAsDouble()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsDouble
    /**
    Converts an element's content to a .

    - Returns: The node's content represented as a .

    */
    open override func ReadElementContentAsDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_f64__ReadElementContentAsDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single ReadElementContentAsFloat()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsFloat
    /**
    Converts an element's content to a floating point number ().

    - Returns: The node's content represented as a floating point number ().

    */
    open override func ReadElementContentAsFloat() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_f32__ReadElementContentAsFloat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid ReadElementContentAsGuid()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsGuid
    /**
    Converts an element's content to a .

    - Returns: The node's content represented as a .

    */
    open func ReadElementContentAsGuid() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_Guid__ReadElementContentAsGuid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.Int32 ReadElementContentAsInt()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsInt
    /**
    Converts an element's content to an integer ().

    - Returns: The node's content represented as an integer ().

    */
    open override func ReadElementContentAsInt() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadElementContentAsInt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ReadElementContentAsLong()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsLong
    /**
    Converts an element's content to a long integer ().

    - Returns: The node's content represented as a long integer ().

    */
    open override func ReadElementContentAsLong() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i64__ReadElementContentAsLong_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ReadElementContentAsString()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsString
    /**
    Converts an element's content to a .

    - Returns: The node's content represented as a .

    */
    open override func ReadElementContentAsString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_String__ReadElementContentAsString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.TimeSpan ReadElementContentAsTimeSpan()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan
    /**
    Converts an element's content to a .

    - Returns: The node's content represented as a .

    */
    open func ReadElementContentAsTimeSpan() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_TimeSpan__ReadElementContentAsTimeSpan_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // System.Xml.UniqueId ReadElementContentAsUniqueId()
// docid: M:System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId
    /**
    Converts an element's content to a unique identifier.

    - Returns: The node's content represented as a unique identifier.

    */
    open func ReadElementContentAsUniqueId() throws -> dotnet.System.Xml.UniqueId {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_UniqueId__ReadElementContentAsUniqueId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.UniqueId(hndl : __return);
        }
    }
    // void ReadFullStartElement()
// docid: M:System.Xml.XmlDictionaryReader.ReadFullStartElement
    /**
    Checks whether the current node is an element and advances the reader to the next node.

    */
    open func ReadFullStartElement() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__ReadFullStartElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadFullStartElement(System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)
    /**
    Checks whether the current node is an element with the given  and advances the reader to the next node.

    - Parameter name: The qualified name of the element.
    */
    open func ReadFullStartElement(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__ReadFullStartElement_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadFullStartElement(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)
    /**
    Checks whether the current node is an element with the given  and  and advances the reader to the next node.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    */
    open func ReadFullStartElement(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__ReadFullStartElement_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReadFullStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Checks whether the current node is an element with the given  and  and advances the reader to the next node.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    */
    open func ReadFullStartElement(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__ReadFullStartElement_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Guid[] ReadGuidArray(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of .

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of .

    */
    open func ReadGuidArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_GuidArray__ReadGuidArray_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Guid>(hndl : __return);
        }
    }
    // System.Guid[] ReadGuidArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of .

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of .

    */
    open func ReadGuidArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_GuidArray__ReadGuidArray_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Guid>(hndl : __return);
        }
    }
    // System.Int16[] ReadInt16Array(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of  integers ().

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of  integers ().

    */
    open func ReadInt16Array(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i16Array__ReadInt16Array_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Int16>(hndl : __return);
        }
    }
    // System.Int16[] ReadInt16Array(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of  integers ().

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of  integers ().

    */
    open func ReadInt16Array(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i16Array__ReadInt16Array_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Int16>(hndl : __return);
        }
    }
    // System.Int32[] ReadInt32Array(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of integers ().

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of integers ().

    */
    open func ReadInt32Array(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32Array__ReadInt32Array_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Int32>(hndl : __return);
        }
    }
    // System.Int32[] ReadInt32Array(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of integers ().

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of integers ().

    */
    open func ReadInt32Array(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32Array__ReadInt32Array_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Int32>(hndl : __return);
        }
    }
    // System.Int64[] ReadInt64Array(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of  integers ().

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of  integers ().

    */
    open func ReadInt64Array(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i64Array__ReadInt64Array_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Int64>(hndl : __return);
        }
    }
    // System.Int64[] ReadInt64Array(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of  integers ().

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of  integers ().

    */
    open func ReadInt64Array(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i64Array__ReadInt64Array_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Int64>(hndl : __return);
        }
    }
    // System.Single[] ReadSingleArray(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of  numbers ().

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of  numbers ().

    */
    open func ReadSingleArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_f32Array__ReadSingleArray_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Float>(hndl : __return);
        }
    }
    // System.Single[] ReadSingleArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Reads the contents of a series of nodes with the given  and  into an array of  numbers ().

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: An array of  numbers ().

    */
    open func ReadSingleArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_f32Array__ReadSingleArray_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.Float>(hndl : __return);
        }
    }
    // void ReadStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Checks whether the current node is an element with the given  and  and advances the reader to the next node.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    */
    open func ReadStartElement(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__ReadStartElement_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ReadString()
// docid: M:System.Xml.XmlDictionaryReader.ReadString
    /**
    Reads the contents of the current node into a string.

    - Returns: A string that contains the contents of the current node.

    */
    open override func ReadString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_String__ReadString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.TimeSpan[] ReadTimeSpanArray(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)
    /**
    Reads the contents of a series of nodes with the given  and  into a  array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: A  array.

    */
    open func ReadTimeSpanArray(localName : dotnet.System.String, namespaceUri : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_TimeSpanArray__ReadTimeSpanArray_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.TimeSpan>(hndl : __return);
        }
    }
    // System.TimeSpan[] ReadTimeSpanArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Reads the contents of a series of nodes with the given  and  into a  array.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Returns: A  array.

    */
    open func ReadTimeSpanArray(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws -> dotnet.System_Arr<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_TimeSpanArray__ReadTimeSpanArray_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.TimeSpan>(hndl : __return);
        }
    }
    // System.Int32 ReadValueAsBase64(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)
    /**
    Not implemented.

    - Parameter buffer: The buffer from which to read.
    - Parameter offset: The starting position from which to read in .
    - Parameter count: The number of bytes that can be read from .
    - Returns: Not implemented.

    */
    open func ReadValueAsBase64(buffer : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_i32__ReadValueAsBase64_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void StartCanonicalization(System.IO.Stream, bool, System.String[])
// docid: M:System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])
    /**
    This method is not yet implemented.

    - Parameter stream: The stream to read from.
    - Parameter includeComments: Determines whether comments are included.
    - Parameter inclusivePrefixes: The prefixes to be included.
    */
    open func StartCanonicalization(stream : dotnet.System.IO.Stream, includeComments : Bool, inclusivePrefixes : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReader_void__StartCanonicalization_0__3__Stream_bool_StringArray(&__thrown, self.get_handle(), stream.get_handle(), Swift.Int32(includeComments ? 1 : 0), (inclusivePrefixes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryGetArrayLength(ref System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)
    /**
    Not implemented in this class (it always returns ). May be overridden in derived classes.

    - Parameter count: Returns 0, unless overridden in a derived class.
    - Returns: 
        , unless overridden in a derived class.

    */
    open func TryGetArrayLength(count : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_count = count;
        let __return = System_Xml_XmlDictionaryReader_bool__TryGetArrayLength_0__1__outi32(&__thrown, self.get_handle(), &_tmp_out_count);
        let _tmp2_count = _tmp_out_count;
            count = _tmp2_count;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetBase64ContentLength(ref System.Int32)
// docid: M:System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)
    /**
    Not implemented in this class (it always returns ). May be overridden in derived classes.

    - Parameter length: Returns 0, unless overridden in a derived class.
    - Returns: 
        , unless overridden in a derived class.

    */
    open func TryGetBase64ContentLength(length : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_length = length;
        let __return = System_Xml_XmlDictionaryReader_bool__TryGetBase64ContentLength_0__1__outi32(&__thrown, self.get_handle(), &_tmp_out_length);
        let _tmp2_length = _tmp_out_length;
            length = _tmp2_length;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetLocalNameAsDictionaryString(ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)
    /**
    Not implemented in this class (it always returns ). May be overridden in derived classes.

    - Parameter localName: Returns , unless overridden in a derived class. .
    - Returns: 
        , unless overridden in a derived class.

    */
    open func TryGetLocalNameAsDictionaryString(localName : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_localName = localName.get_handle();
        let __return = System_Xml_XmlDictionaryReader_bool__TryGetLocalNameAsDictionaryString_0__1__outXmlDictionaryString(&__thrown, self.get_handle(), &_tmp_out_localName);
        let _tmp2_localName = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_localName);
            localName = _tmp2_localName;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetNamespaceUriAsDictionaryString(ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)
    /**
    Not implemented in this class (it always returns ). May be overridden in derived classes.

    - Parameter namespaceUri: Returns , unless overridden in a derived class.
    - Returns: 
        , unless overridden in a derived class.

    */
    open func TryGetNamespaceUriAsDictionaryString(namespaceUri : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_namespaceUri = namespaceUri.get_handle();
        let __return = System_Xml_XmlDictionaryReader_bool__TryGetNamespaceUriAsDictionaryString_0__1__outXmlDictionaryString(&__thrown, self.get_handle(), &_tmp_out_namespaceUri);
        let _tmp2_namespaceUri = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_namespaceUri);
            namespaceUri = _tmp2_namespaceUri;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetValueAsDictionaryString(ref System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)
    /**
    Not implemented in this class (it always returns ). May be overridden in derived classes.

    - Parameter value: Returns , unless overridden in a derived class.
    - Returns: 
        , unless overridden in a derived class.

    */
    open func TryGetValueAsDictionaryString(value : inout dotnet.System.Xml.XmlDictionaryString) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Xml_XmlDictionaryReader_bool__TryGetValueAsDictionaryString_0__1__outXmlDictionaryString(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Xml.XmlDictionaryString(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanCanonicalize()
// docid: M:System.Xml.XmlDictionaryReader.get_CanCanonicalize
    open func get_CanCanonicalize() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_bool__get_CanCanonicalize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Xml.XmlDictionaryReaderQuotas get_Quotas()
// docid: M:System.Xml.XmlDictionaryReader.get_Quotas
    open func get_Quotas() throws -> dotnet.System.Xml.XmlDictionaryReaderQuotas {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReader_XmlDictionaryReaderQuotas__get_Quotas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReaderQuotas(hndl : __return);
        }
    }
    /**
    This property always returns . Its derived classes can override to return  if they support canonicalization.

    */
    open var CanCanonicalize : Bool {
        get {
            return try! get_CanCanonicalize();
        }
    }
    /**
    Gets the quota values that apply to the current instance of this class.

    */
    open var Quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas {
        get {
            return try! get_Quotas();
        }
    }
} // XmlDictionaryReader


// type: System.Xml.XmlDictionaryReaderQuotaTypes
    /**
    Enumerates the configurable quota values for XmlDictionaryReaders.

    */
public struct XmlDictionaryReaderQuotaTypes : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDictionaryReaderQuotaTypes_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Xml.XmlDictionaryReaderQuotaTypes MaxDepth
    /**
    Specifies the maximum nested node depth.

    */
    public static var MaxDepth : dotnet.System.Xml.XmlDictionaryReaderQuotaTypes {
        get {
        let __return = dotnet.System.Xml.XmlDictionaryReaderQuotaTypes(val: System_Xml_XmlDictionaryReaderQuotaTypes_get_MaxDepth());
            return __return;
        }
    }
    // static field: System.Xml.XmlDictionaryReaderQuotaTypes MaxStringContentLength
    /**
    Specifies the maximum string length returned by the reader.

    */
    public static var MaxStringContentLength : dotnet.System.Xml.XmlDictionaryReaderQuotaTypes {
        get {
        let __return = dotnet.System.Xml.XmlDictionaryReaderQuotaTypes(val: System_Xml_XmlDictionaryReaderQuotaTypes_get_MaxStringContentLength());
            return __return;
        }
    }
    // static field: System.Xml.XmlDictionaryReaderQuotaTypes MaxArrayLength
    /**
    Specifies the maximum allowed array length.

    */
    public static var MaxArrayLength : dotnet.System.Xml.XmlDictionaryReaderQuotaTypes {
        get {
        let __return = dotnet.System.Xml.XmlDictionaryReaderQuotaTypes(val: System_Xml_XmlDictionaryReaderQuotaTypes_get_MaxArrayLength());
            return __return;
        }
    }
    // static field: System.Xml.XmlDictionaryReaderQuotaTypes MaxBytesPerRead
    /**
    Specifies the maximum allowed bytes returned for each read.

    */
    public static var MaxBytesPerRead : dotnet.System.Xml.XmlDictionaryReaderQuotaTypes {
        get {
        let __return = dotnet.System.Xml.XmlDictionaryReaderQuotaTypes(val: System_Xml_XmlDictionaryReaderQuotaTypes_get_MaxBytesPerRead());
            return __return;
        }
    }
    // static field: System.Xml.XmlDictionaryReaderQuotaTypes MaxNameTableCharCount
    /**
    Specifies the maximum characters allowed in a table name.

    */
    public static var MaxNameTableCharCount : dotnet.System.Xml.XmlDictionaryReaderQuotaTypes {
        get {
        let __return = dotnet.System.Xml.XmlDictionaryReaderQuotaTypes(val: System_Xml_XmlDictionaryReaderQuotaTypes_get_MaxNameTableCharCount());
            return __return;
        }
    }
} // XmlDictionaryReaderQuotaTypes


// type: System.Xml.XmlDictionaryReaderQuotas
    /**
    Contains configurable quota values for XmlDictionaryReaders.

    */
public final class XmlDictionaryReaderQuotas
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDictionaryReaderQuotas_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Xml.XmlDictionaryReaderQuotas.#ctor
    /**
    Creates a new instance of this class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlDictionaryReaderQuotas_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(System.Xml.XmlDictionaryReaderQuotas)
// docid: M:System.Xml.XmlDictionaryReaderQuotas.CopyTo(System.Xml.XmlDictionaryReaderQuotas)
    /**
    Sets the properties on a passed-in quotas instance, based on the values in this instance.

    - Parameter quotas: The  instance to which to copy values.
    */
    public func CopyTo(quotas : dotnet.System.Xml.XmlDictionaryReaderQuotas) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReaderQuotas_void__CopyTo_0__1__XmlDictionaryReaderQuotas(&__thrown, self.get_handle(), quotas.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlDictionaryReaderQuotas get_Max()
// docid: M:System.Xml.XmlDictionaryReaderQuotas.get_Max
    public class func get_Max() throws -> dotnet.System.Xml.XmlDictionaryReaderQuotas {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReaderQuotas_XmlDictionaryReaderQuotas__get_Max_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReaderQuotas(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxArrayLength()
// docid: M:System.Xml.XmlDictionaryReaderQuotas.get_MaxArrayLength
    public func get_MaxArrayLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReaderQuotas_i32__get_MaxArrayLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxArrayLength(System.Int32)
// docid: M:System.Xml.XmlDictionaryReaderQuotas.set_MaxArrayLength(System.Int32)
    public func set_MaxArrayLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReaderQuotas_void__set_MaxArrayLength_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxBytesPerRead()
// docid: M:System.Xml.XmlDictionaryReaderQuotas.get_MaxBytesPerRead
    public func get_MaxBytesPerRead() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReaderQuotas_i32__get_MaxBytesPerRead_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxBytesPerRead(System.Int32)
// docid: M:System.Xml.XmlDictionaryReaderQuotas.set_MaxBytesPerRead(System.Int32)
    public func set_MaxBytesPerRead(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReaderQuotas_void__set_MaxBytesPerRead_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxDepth()
// docid: M:System.Xml.XmlDictionaryReaderQuotas.get_MaxDepth
    public func get_MaxDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReaderQuotas_i32__get_MaxDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxDepth(System.Int32)
// docid: M:System.Xml.XmlDictionaryReaderQuotas.set_MaxDepth(System.Int32)
    public func set_MaxDepth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReaderQuotas_void__set_MaxDepth_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxNameTableCharCount()
// docid: M:System.Xml.XmlDictionaryReaderQuotas.get_MaxNameTableCharCount
    public func get_MaxNameTableCharCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReaderQuotas_i32__get_MaxNameTableCharCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxNameTableCharCount(System.Int32)
// docid: M:System.Xml.XmlDictionaryReaderQuotas.set_MaxNameTableCharCount(System.Int32)
    public func set_MaxNameTableCharCount(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReaderQuotas_void__set_MaxNameTableCharCount_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxStringContentLength()
// docid: M:System.Xml.XmlDictionaryReaderQuotas.get_MaxStringContentLength
    public func get_MaxStringContentLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReaderQuotas_i32__get_MaxStringContentLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxStringContentLength(System.Int32)
// docid: M:System.Xml.XmlDictionaryReaderQuotas.set_MaxStringContentLength(System.Int32)
    public func set_MaxStringContentLength(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryReaderQuotas_void__set_MaxStringContentLength_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Xml.XmlDictionaryReaderQuotaTypes get_ModifiedQuotas()
// docid: M:System.Xml.XmlDictionaryReaderQuotas.get_ModifiedQuotas
    public func get_ModifiedQuotas() throws -> dotnet.System.Xml.XmlDictionaryReaderQuotaTypes {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryReaderQuotas_XmlDictionaryReaderQuotaTypes__get_ModifiedQuotas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryReaderQuotaTypes(val: __return);
        }
    }
    /**
    Gets an instance of this class with all properties set to maximum values.

    */
    public static var Max : dotnet.System.Xml.XmlDictionaryReaderQuotas {
        get {
            return try! get_Max();
        }
    }
    /**
    Gets or sets the maximum allowed array length.

    */
    public var MaxArrayLength : Swift.Int32 {
        get {
            return try! get_MaxArrayLength();
        }
        set(v) {
            return try! set_MaxArrayLength(value: v);
        }
    }
    /**
    Gets or sets the maximum allowed bytes returned for each read.

    */
    public var MaxBytesPerRead : Swift.Int32 {
        get {
            return try! get_MaxBytesPerRead();
        }
        set(v) {
            return try! set_MaxBytesPerRead(value: v);
        }
    }
    /**
    Gets or sets the maximum nested node depth.

    */
    public var MaxDepth : Swift.Int32 {
        get {
            return try! get_MaxDepth();
        }
        set(v) {
            return try! set_MaxDepth(value: v);
        }
    }
    /**
    Gets or sets the maximum characters allowed in a table name.

    */
    public var MaxNameTableCharCount : Swift.Int32 {
        get {
            return try! get_MaxNameTableCharCount();
        }
        set(v) {
            return try! set_MaxNameTableCharCount(value: v);
        }
    }
    /**
    Gets or sets the maximum string length returned by the reader.

    */
    public var MaxStringContentLength : Swift.Int32 {
        get {
            return try! get_MaxStringContentLength();
        }
        set(v) {
            return try! set_MaxStringContentLength(value: v);
        }
    }
    /**
    Gets the modified quotas for the .

    */
    public var ModifiedQuotas : dotnet.System.Xml.XmlDictionaryReaderQuotaTypes {
        get {
            return try! get_ModifiedQuotas();
        }
    }
} // XmlDictionaryReaderQuotas


// type: System.Xml.XmlDictionaryString
    /**
    Represents an entry stored in a .

    */
open class XmlDictionaryString
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDictionaryString_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Xml.IXmlDictionary, System.String, System.Int32)
// docid: M:System.Xml.XmlDictionaryString.#ctor(System.Xml.IXmlDictionary,System.String,System.Int32)
    /**
    Creates an instance of this class.

    - Parameter dictionary: The  containing this instance.
    - Parameter value: The string that is the value of the dictionary entry.
    - Parameter key: The integer that is the key of the dictionary entry.
    */
    public init(dictionary : dotnet.System.Xml.IXmlDictionary, value : dotnet.System.String, key : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Xml_XmlDictionaryString_ctor_0__3__IXmlDictionary_String_i32(&__thrown, dictionary.get_handle(), value.get_handle(), key);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.Xml.XmlDictionaryString.ToString
    /**
    Displays a text representation of this object.

    - Returns: The string value for this instance of the class.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryString_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.IXmlDictionary get_Dictionary()
// docid: M:System.Xml.XmlDictionaryString.get_Dictionary
    open func get_Dictionary() throws -> dotnet.System.Xml.IXmlDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryString_IXmlDictionary__get_Dictionary_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.IXmlDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Xml.XmlDictionaryString get_Empty()
// docid: M:System.Xml.XmlDictionaryString.get_Empty
    open class func get_Empty() throws -> dotnet.System.Xml.XmlDictionaryString {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryString_XmlDictionaryString__get_Empty_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryString(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Key()
// docid: M:System.Xml.XmlDictionaryString.get_Key
    open func get_Key() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryString_i32__get_Key_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Xml.XmlDictionaryString.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryString_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Represents the  passed to the constructor of this instance of .

    */
    open var Dictionary : dotnet.System.Xml.IXmlDictionary {
        get {
            return try! get_Dictionary();
        }
    }
    /**
    Gets an  representing the empty string.

    */
    public static var Empty : dotnet.System.Xml.XmlDictionaryString {
        get {
            return try! get_Empty();
        }
    }
    /**
    Gets the integer key for this instance of the class.

    */
    open var Key : Swift.Int32 {
        get {
            return try! get_Key();
        }
    }
    /**
    Gets the string value for this instance of the class.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // XmlDictionaryString


// type: System.Xml.XmlDictionaryWriter
    /**
    Represents an abstract class that Windows Communication Foundation (WCF) derives from  to do serialization and deserialization.

    */
open class XmlDictionaryWriter
    :
    dotnet.System.Xml.XmlWriter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Xml_XmlDictionaryWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Xml.XmlDictionaryWriter CreateBinaryWriter(System.IO.Stream)
// docid: M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)
    /**
    Creates an instance of  that writes WCF binary XML format.

    - Parameter stream: The stream to write to.
    - Returns: An instance of .

    */
    open class func CreateBinaryWriter(stream : dotnet.System.IO.Stream) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateBinaryWriter_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateBinaryWriter(System.IO.Stream, System.Xml.IXmlDictionary)
// docid: M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)
    /**
    Creates an instance of  that writes WCF binary XML format.

    - Parameter stream: The stream to write to.
    - Parameter dictionary: The  to use as the shared dictionary.
    - Returns: An instance of .

    */
    open class func CreateBinaryWriter(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateBinaryWriter_0__2__Stream_IXmlDictionary(&__thrown, stream.get_handle(), dictionary?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateBinaryWriter(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlBinaryWriterSession)
// docid: M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)
    /**
    Creates an instance of  that writes WCF binary XML format.

    - Parameter stream: The stream to write to.
    - Parameter dictionary: The  to use as the shared dictionary.
    - Parameter session: The  to use.
    - Returns: An instance of .

    */
    open class func CreateBinaryWriter(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, session : Optional<dotnet.System.Xml.XmlBinaryWriterSession>) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateBinaryWriter_0__3__Stream_IXmlDictionary_XmlBinaryWriterSession(&__thrown, stream.get_handle(), dictionary?.get_handle() ?? nil, session?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateBinaryWriter(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlBinaryWriterSession, bool)
// docid: M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)
    /**
    Creates an instance of  that writes WCF binary XML format.

    - Parameter stream: The stream from which to read.
    - Parameter dictionary: The  to use as the shared dictionary.
    - Parameter session: The  to use.
    - Parameter ownsStream: 
         to indicate that the stream is closed by the writer when done; otherwise .
    - Returns: An instance of .

    */
    open class func CreateBinaryWriter(stream : dotnet.System.IO.Stream, dictionary : Optional<dotnet.System.Xml.IXmlDictionary>, session : Optional<dotnet.System.Xml.XmlBinaryWriterSession>, ownsStream : Bool) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateBinaryWriter_0__4__Stream_IXmlDictionary_XmlBinaryWriterSession_bool(&__thrown, stream.get_handle(), dictionary?.get_handle() ?? nil, session?.get_handle() ?? nil, Swift.Int32(ownsStream ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateDictionaryWriter(System.Xml.XmlWriter)
// docid: M:System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)
    /**
    Creates an instance of  from an existing .

    - Parameter writer: An instance of .
    - Returns: An instance of .

    */
    open class func CreateDictionaryWriter(writer : dotnet.System.Xml.XmlWriter) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateDictionaryWriter_0__1__XmlWriter(&__thrown, writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateMtomWriter(System.IO.Stream, System.Text.Encoding, System.Int32, System.String)
// docid: M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String)
    /**
    Creates an instance of  that writes XML in the MTOM format.

    - Parameter stream: The stream to write to.
    - Parameter encoding: The character encoding of the stream.
    - Parameter maxSizeInBytes: The maximum number of bytes that are buffered in the writer.
    - Parameter startInfo: An attribute in the ContentType SOAP header.
    - Returns: An instance of .

    */
    open class func CreateMtomWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, maxSizeInBytes : Swift.Int32, startInfo : dotnet.System.String) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateMtomWriter_0__4__Stream_Encoding_i32_String(&__thrown, stream.get_handle(), encoding.get_handle(), maxSizeInBytes, startInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateMtomWriter(System.IO.Stream, System.Text.Encoding, System.Int32, System.String, System.String, System.String, bool, bool)
// docid: M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)
    /**
    Creates an instance of  that writes XML in the MTOM format.

    - Parameter stream: The stream to write to.
    - Parameter encoding: The character encoding of the stream.
    - Parameter maxSizeInBytes: The maximum number of bytes that are buffered in the writer.
    - Parameter startInfo: The content-type of the MIME part that contains the Infoset.
    - Parameter boundary: The MIME boundary in the message.
    - Parameter startUri: The content-id URI of the MIME part that contains the Infoset.
    - Parameter writeMessageHeaders: 
         to write message headers.
    - Parameter ownsStream: 
         to indicate that the stream is closed by the writer when done; otherwise .
    - Returns: An instance of .

    */
    open class func CreateMtomWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, maxSizeInBytes : Swift.Int32, startInfo : dotnet.System.String, boundary : Optional<dotnet.System.String>, startUri : Optional<dotnet.System.String>, writeMessageHeaders : Bool, ownsStream : Bool) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateMtomWriter_0__8__Stream_Encoding_i32_String_String_String_bool_bool(&__thrown, stream.get_handle(), encoding.get_handle(), maxSizeInBytes, startInfo.get_handle(), boundary?.get_handle() ?? nil, startUri?.get_handle() ?? nil, Swift.Int32(writeMessageHeaders ? 1 : 0), Swift.Int32(ownsStream ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateTextWriter(System.IO.Stream)
// docid: M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)
    /**
    Creates an instance of  that writes text XML.

    - Parameter stream: The stream to write to.
    - Returns: An instance of .

    */
    open class func CreateTextWriter(stream : dotnet.System.IO.Stream) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateTextWriter_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateTextWriter(System.IO.Stream, System.Text.Encoding)
// docid: M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)
    /**
    Creates an instance of  that writes text XML.

    - Parameter stream: The stream to write to.
    - Parameter encoding: The character encoding of the output.
    - Returns: An instance of .

    */
    open class func CreateTextWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateTextWriter_0__2__Stream_Encoding(&__thrown, stream.get_handle(), encoding.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // System.Xml.XmlDictionaryWriter CreateTextWriter(System.IO.Stream, System.Text.Encoding, bool)
// docid: M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)
    /**
    Creates an instance of  that writes text XML.

    - Parameter stream: The stream to write to.
    - Parameter encoding: The character encoding of the stream.
    - Parameter ownsStream: 
         to indicate that the stream is closed by the writer when done; otherwise .
    - Returns: An instance of .

    */
    open class func CreateTextWriter(stream : dotnet.System.IO.Stream, encoding : dotnet.System.Text.Encoding, ownsStream : Bool) throws -> dotnet.System.Xml.XmlDictionaryWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_XmlDictionaryWriter__CreateTextWriter_0__3__Stream_Encoding_bool(&__thrown, stream.get_handle(), encoding.get_handle(), Swift.Int32(ownsStream ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XmlDictionaryWriter(hndl : __return);
        }
    }
    // void EndCanonicalization()
// docid: M:System.Xml.XmlDictionaryWriter.EndCanonicalization
    /**
    When implemented by a derived class, it stops the canonicalization started by the matching  call.

    */
    open func EndCanonicalization() throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__EndCanonicalization_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void StartCanonicalization(System.IO.Stream, bool, System.String[])
// docid: M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])
    /**
    When implemented by a derived class, it starts the canonicalization.

    - Parameter stream: The stream to write to.
    - Parameter includeComments: 
         to include comments; otherwise, .
    - Parameter inclusivePrefixes: The prefixes to be included.
    */
    open func StartCanonicalization(stream : dotnet.System.IO.Stream, includeComments : Bool, inclusivePrefixes : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__StartCanonicalization_0__3__Stream_bool_StringArray(&__thrown, self.get_handle(), stream.get_handle(), Swift.Int32(includeComments ? 1 : 0), (inclusivePrefixes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, bool[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the data.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of values to write from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<Bool>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_boolArray_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, System.DateTime[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<dotnet.System.DateTime>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_DateTimeArray_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, System.Decimal[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<dotnet.System.Decimal>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_DecimalArray_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, System.Double[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<Swift.Double>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_f64Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, System.Guid[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<dotnet.System.Guid>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_GuidArray_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, System.Int16[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<Swift.Int16>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_i16Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, System.Int32[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<Swift.Int32>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_i32Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, System.Int64[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<Swift.Int64>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_i64Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.String, System.String, System.Single[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.String, namespaceUri : Optional<dotnet.System.String>, array : dotnet.System_Arr<Swift.Float>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_String_String_f32Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteArray(System.String, System.String, System.String, System.TimeSpan[], System.Int32, System.Int32)
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, bool[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<Bool>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_boolArray_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.DateTime[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<dotnet.System.DateTime>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_DateTimeArray_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Decimal[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<dotnet.System.Decimal>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_DecimalArray_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Double[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<Swift.Double>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_f64Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Guid[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<dotnet.System.Guid>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_GuidArray_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int16[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<Swift.Int16>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_i16Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int32[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<Swift.Int32>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_i32Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int64[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<Swift.Int64>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_i64Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Single[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)
    /**
    Writes nodes from a  array.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter array: The array that contains the nodes.
    - Parameter offset: The starting index in the array.
    - Parameter count: The number of nodes to get from the array.
    */
    open func WriteArray(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, array : dotnet.System_Arr<Swift.Float>, offset : Swift.Int32, count : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteArray_0__6__String_XmlDictionaryString_XmlDictionaryString_f32Array_i32_i32(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, array.get_handle(), offset, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.TimeSpan[], System.Int32, System.Int32)
    // void WriteAttributeString(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String)
// docid: M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)
    /**
    Writes an attribute qualified name and value.

    - Parameter prefix: The prefix of the attribute.
    - Parameter localName: The local name of the attribute.
    - Parameter namespaceUri: The namespace URI of the attribute.
    - Parameter value: The attribute.
    */
    open func WriteAttributeString(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteAttributeString_0__4__String_XmlDictionaryString_XmlDictionaryString_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteAttributeString(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String)
// docid: M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)
    /**
    Writes an attribute qualified name and value.

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceUri: The namespace URI of the attribute.
    - Parameter value: The attribute.
    */
    open func WriteAttributeString(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteAttributeString_0__3__XmlDictionaryString_XmlDictionaryString_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteBase64Async(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Xml.XmlDictionaryWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)
    /**
    Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.

    - Parameter buffer: Byte array to encode.
    - Parameter index: The position in the buffer indicating the start of the bytes to write.
    - Parameter count: The number of bytes to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open override func WriteBase64Async(buffer : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_Task__WriteBase64Async_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), buffer.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteElementString(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String)
// docid: M:System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)
    /**
    Writes an element with a text content.

    - Parameter prefix: The prefix of the element.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter value: The element content.
    */
    open func WriteElementString(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteElementString_0__4__String_XmlDictionaryString_XmlDictionaryString_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteElementString(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String)
// docid: M:System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)
    /**
    Writes an element with a text content.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    - Parameter value: The element content.
    */
    open func WriteElementString(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteElementString_0__3__XmlDictionaryString_XmlDictionaryString_String(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNode(System.Xml.XmlDictionaryReader, bool)
// docid: M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)
    /**
    Writes the current XML node from an .

    - Parameter reader: The .
    - Parameter defattr: 
         to copy the default attributes from the ; otherwise, .
    */
    open func WriteNode(reader : dotnet.System.Xml.XmlDictionaryReader, defattr : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteNode_0__2__XmlDictionaryReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(defattr ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNode(System.Xml.XmlReader, bool)
// docid: M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)
    /**
    Writes the current XML node from an .

    - Parameter reader: The .
    - Parameter defattr: 
         to copy the default attributes from the ; otherwise, .
    */
    open override func WriteNode(reader : dotnet.System.Xml.XmlReader, defattr : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteNode_0__2__XmlReader_bool(&__thrown, self.get_handle(), reader.get_handle(), Swift.Int32(defattr ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteQualifiedName(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.

    - Parameter localName: The local name of the qualified name.
    - Parameter namespaceUri: The namespace URI of the qualified name.
    */
    open func WriteQualifiedName(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteQualifiedName_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartAttribute(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Writes the start of an attribute with the specified prefix, local name, and namespace URI.

    - Parameter prefix: The namespace prefix.
    - Parameter localName: The local name of the attribute.
    - Parameter namespaceUri: The namespace URI of the attribute.
    */
    open func WriteStartAttribute(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteStartAttribute_0__3__String_XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartAttribute(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Writes the start of an attribute with the specified local name, and namespace URI.

    - Parameter localName: The local name of the attribute.
    - Parameter namespaceUri: The namespace URI of the attribute.
    */
    open func WriteStartAttribute(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteStartAttribute_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartElement(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Writes the specified start tag and associates it with the given namespace and prefix.

    - Parameter prefix: The prefix of the element.
    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    */
    open func WriteStartElement(prefix : Optional<dotnet.System.String>, localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteStartElement_0__3__String_XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, localName.get_handle(), namespaceUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Writes the specified start tag and associates it with the given namespace.

    - Parameter localName: The local name of the element.
    - Parameter namespaceUri: The namespace URI of the element.
    */
    open func WriteStartElement(localName : dotnet.System.Xml.XmlDictionaryString, namespaceUri : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteStartElement_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), namespaceUri?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)
    /**
    Writes the given text content.

    - Parameter value: The text to write.
    */
    open func WriteString(value : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteString_0__1__XmlDictionaryString(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Guid)
// docid: M:System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)
    /**
    Writes a  value.

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteValue_0__1__Guid(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteValue(System.TimeSpan)
    // void WriteValue(System.Xml.IStreamProvider)
// docid: M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.IStreamProvider)
    /**
    Writes a value from an .

    - Parameter value: The  value to write.
    */
    open func WriteValue(value : dotnet.System.Xml.IStreamProvider) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteValue_0__1__IStreamProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Xml.UniqueId)
// docid: M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)
    /**
    Writes a Unique Id value.

    - Parameter value: The Unique Id value to write.
    */
    open func WriteValue(value : dotnet.System.Xml.UniqueId) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteValue_0__1__UniqueId(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteValue(System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)
    /**
    Writes a  value.

    - Parameter value: The  value.
    */
    open func WriteValue(value : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteValue_0__1__XmlDictionaryString(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task WriteValueAsync(System.Xml.IStreamProvider)
// docid: M:System.Xml.XmlDictionaryWriter.WriteValueAsync(System.Xml.IStreamProvider)
    /**
    Asynchronously writes a value from an .

    - Parameter value: The  value to write.
    - Returns: The task that represents the asynchronous  operation.

    */
    open func WriteValueAsync(value : dotnet.System.Xml.IStreamProvider) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_Task__WriteValueAsync_0__1__IStreamProvider(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void WriteXmlAttribute(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)
    /**
    Writes a standard XML attribute in the current node.

    - Parameter localName: The local name of the attribute.
    - Parameter value: The value of the attribute.
    */
    open func WriteXmlAttribute(localName : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteXmlAttribute_0__2__String_String(&__thrown, self.get_handle(), localName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlAttribute(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)
    /**
    Writes an XML attribute in the current node.

    - Parameter localName: The local name of the attribute.
    - Parameter value: The value of the attribute.
    */
    open func WriteXmlAttribute(localName : dotnet.System.Xml.XmlDictionaryString, value : Optional<dotnet.System.Xml.XmlDictionaryString>) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteXmlAttribute_0__2__XmlDictionaryString_XmlDictionaryString(&__thrown, self.get_handle(), localName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlnsAttribute(System.String, System.String)
// docid: M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)
    /**
    Writes a namespace declaration attribute.

    - Parameter prefix: The prefix that is bound to the given namespace.
    - Parameter namespaceUri: The namespace to which the prefix is bound.
    */
    open func WriteXmlnsAttribute(prefix : Optional<dotnet.System.String>, namespaceUri : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteXmlnsAttribute_0__2__String_String(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteXmlnsAttribute(System.String, System.Xml.XmlDictionaryString)
// docid: M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)
    /**
    Writes a namespace declaration attribute.

    - Parameter prefix: The prefix that is bound to the given namespace.
    - Parameter namespaceUri: The namespace to which the prefix is bound.
    */
    open func WriteXmlnsAttribute(prefix : Optional<dotnet.System.String>, namespaceUri : dotnet.System.Xml.XmlDictionaryString) throws {
        var __thrown : NullableHandle = nil;
        System_Xml_XmlDictionaryWriter_void__WriteXmlnsAttribute_0__2__String_XmlDictionaryString(&__thrown, self.get_handle(), prefix?.get_handle() ?? nil, namespaceUri.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CanCanonicalize()
// docid: M:System.Xml.XmlDictionaryWriter.get_CanCanonicalize
    open func get_CanCanonicalize() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XmlDictionaryWriter_bool__get_CanCanonicalize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    This property always returns . Its derived classes can override to return  if they support canonicalization.

    */
    open var CanCanonicalize : Bool {
        get {
            return try! get_CanCanonicalize();
        }
    }
} // XmlDictionaryWriter


}


public protocol System_Runtime_Serialization_IExtensibleDataObject
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IFragmentCapableXmlDictionaryWriter
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IStreamProvider
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IXmlBinaryReaderInitializer
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IXmlBinaryWriterInitializer
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IXmlDictionary
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IXmlTextReaderInitializer
    :
    SGBridgeGetHandle
{
}

public protocol System_Xml_IXmlTextWriterInitializer
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.Runtime.Serialization.ISerializationSurrogateProvider GetSerializationSurrogateProvider(System.Runtime.Serialization.DataContractSerializer)
extension dotnet.System.Runtime.Serialization.DataContractSerializer {
    public func GetSerializationSurrogateProvider() throws -> Optional<dotnet.System.Runtime.Serialization.ISerializationSurrogateProvider> {
        return try dotnet.System.Runtime.Serialization.DataContractSerializerExtensions.GetSerializationSurrogateProvider(serializer: self);
    }
}

// EXTENSION METHOD void SetSerializationSurrogateProvider(System.Runtime.Serialization.DataContractSerializer, System.Runtime.Serialization.ISerializationSurrogateProvider)
extension dotnet.System.Runtime.Serialization.DataContractSerializer {
    public func SetSerializationSurrogateProvider(provider : Optional<dotnet.System.Runtime.Serialization.ISerializationSurrogateProvider>) throws {
        try dotnet.System.Runtime.Serialization.DataContractSerializerExtensions.SetSerializationSurrogateProvider(serializer: self, provider: provider);
    }
}

