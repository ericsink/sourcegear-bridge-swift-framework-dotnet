// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
extension System.Net {
// type: System.Net.HttpRequestHeader
    /**
    The HTTP headers that may be specified in a client request.

    */
public struct HttpRequestHeader : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_HttpRequestHeader_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.HttpRequestHeader CacheControl
    /**
    The Cache-Control header, which specifies directives that must be obeyed by all cache control mechanisms along the request/response chain.

    */
    public static var CacheControl : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_CacheControl());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Connection
    /**
    The Connection header, which specifies options that are desired for a particular connection.

    */
    public static var Connection : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Connection());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Date
    /**
    The Date header, which specifies the date and time at which the request originated.

    */
    public static var Date : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Date());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader KeepAlive
    /**
    The Keep-Alive header, which specifies a parameter used into order to maintain a persistent connection.

    */
    public static var KeepAlive : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_KeepAlive());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Pragma
    /**
    The Pragma header, which specifies implementation-specific directives that might apply to any agent along the request/response chain.

    */
    public static var Pragma : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Pragma());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Trailer
    /**
    The Trailer header, which specifies the header fields present in the trailer of a message encoded with chunked transfer-coding.

    */
    public static var Trailer : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Trailer());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader TransferEncoding
    /**
    The Transfer-Encoding header, which specifies what (if any) type of transformation that has been applied to the message body.

    */
    public static var TransferEncoding : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_TransferEncoding());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Upgrade
    /**
    The Upgrade header, which specifies additional communications protocols that the client supports.

    */
    public static var Upgrade : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Upgrade());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Via
    /**
    The Via header, which specifies intermediate protocols to be used by gateway and proxy agents.

    */
    public static var Via : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Via());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Warning
    /**
    The Warning header, which specifies additional information about that status or transformation of a message that might not be reflected in the message.

    */
    public static var Warning : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Warning());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Allow
    /**
    The Allow header, which specifies the set of HTTP methods supported.

    */
    public static var Allow : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Allow());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader ContentLength
    /**
    The Content-Length header, which specifies the length, in bytes, of the accompanying body data.

    */
    public static var ContentLength : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_ContentLength());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader ContentType
    /**
    The Content-Type header, which specifies the MIME type of the accompanying body data.

    */
    public static var ContentType : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_ContentType());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader ContentEncoding
    /**
    The Content-Encoding header, which specifies the encodings that have been applied to the accompanying body data.

    */
    public static var ContentEncoding : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_ContentEncoding());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader ContentLanguage
    /**
    The Content-Language header, which specifies the natural language(s) of the accompanying body data.

    */
    public static var ContentLanguage : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_ContentLanguage());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader ContentLocation
    /**
    The Content-Location header, which specifies a URI from which the accompanying body may be obtained.

    */
    public static var ContentLocation : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_ContentLocation());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader ContentMd5
    /**
    The Content-MD5 header, which specifies the MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check. Due to collision problems with MD5, Microsoft recommends a security model based on SHA256 or better.

    */
    public static var ContentMd5 : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_ContentMd5());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader ContentRange
    /**
    The Content-Range header, which specifies where in the full body the accompanying partial body data should be applied.

    */
    public static var ContentRange : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_ContentRange());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Expires
    /**
    The Expires header, which specifies the date and time after which the accompanying body data should be considered stale.

    */
    public static var Expires : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Expires());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader LastModified
    /**
    The Last-Modified header, which specifies the date and time at which the accompanying body data was last modified.

    */
    public static var LastModified : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_LastModified());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Accept
    /**
    The Accept header, which specifies the MIME types that are acceptable for the response.

    */
    public static var Accept : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Accept());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader AcceptCharset
    /**
    The Accept-Charset header, which specifies the character sets that are acceptable for the response.

    */
    public static var AcceptCharset : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_AcceptCharset());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader AcceptEncoding
    /**
    The Accept-Encoding header, which specifies the content encodings that are acceptable for the response.

    */
    public static var AcceptEncoding : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_AcceptEncoding());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader AcceptLanguage
    /**
    The Accept-Language header, which specifies that natural languages that are preferred for the response.

    */
    public static var AcceptLanguage : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_AcceptLanguage());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Authorization
    /**
    The Authorization header, which specifies the credentials that the client presents in order to authenticate itself to the server.

    */
    public static var Authorization : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Authorization());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Cookie
    /**
    The Cookie header, which specifies cookie data presented to the server.

    */
    public static var Cookie : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Cookie());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Expect
    /**
    The Expect header, which specifies particular server behaviors that are required by the client.

    */
    public static var Expect : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Expect());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader From
    /**
    The From header, which specifies an Internet Email address for the human user who controls the requesting user agent.

    */
    public static var From : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_From());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Host
    /**
    The Host header, which specifies the host name and port number of the resource being requested.

    */
    public static var Host : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Host());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader IfMatch
    /**
    The If-Match header, which specifies that the requested operation should be performed only if the client's cached copy of the indicated resource is current.

    */
    public static var IfMatch : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_IfMatch());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader IfModifiedSince
    /**
    The If-Modified-Since header, which specifies that the requested operation should be performed only if the requested resource has been modified since the indicated data and time.

    */
    public static var IfModifiedSince : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_IfModifiedSince());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader IfNoneMatch
    /**
    The If-None-Match header, which specifies that the requested operation should be performed only if none of client's cached copies of the indicated resources are current.

    */
    public static var IfNoneMatch : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_IfNoneMatch());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader IfRange
    /**
    The If-Range header, which specifies that only the specified range of the requested resource should be sent, if the client's cached copy is current.

    */
    public static var IfRange : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_IfRange());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader IfUnmodifiedSince
    /**
    The If-Unmodified-Since header, which specifies that the requested operation should be performed only if the requested resource has not been modified since the indicated date and time.

    */
    public static var IfUnmodifiedSince : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_IfUnmodifiedSince());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader MaxForwards
    /**
    The Max-Forwards header, which specifies an integer indicating the remaining number of times that this request may be forwarded.

    */
    public static var MaxForwards : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_MaxForwards());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader ProxyAuthorization
    /**
    The Proxy-Authorization header, which specifies the credentials that the client presents in order to authenticate itself to a proxy.

    */
    public static var ProxyAuthorization : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_ProxyAuthorization());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Referer
    /**
    The Referer header, which specifies the URI of the resource from which the request URI was obtained.

    */
    public static var Referer : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Referer());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Range
    /**
    The Range header, which specifies the sub-range(s) of the response that the client requests be returned in lieu of the entire response.

    */
    public static var Range : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Range());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Te
    /**
    The TE header, which specifies the transfer encodings that are acceptable for the response.

    */
    public static var Te : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Te());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader Translate
    /**
    The Translate header, a Microsoft extension to the HTTP specification used in conjunction with WebDAV functionality.

    */
    public static var Translate : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_Translate());
            return __return;
        }
    }
    // static field: System.Net.HttpRequestHeader UserAgent
    /**
    The User-Agent header, which specifies information about the client agent.

    */
    public static var UserAgent : dotnet.System.Net.HttpRequestHeader {
        get {
        let __return = dotnet.System.Net.HttpRequestHeader(val: System_Net_HttpRequestHeader_get_UserAgent());
            return __return;
        }
    }
} // HttpRequestHeader


// type: System.Net.HttpResponseHeader
    /**
    The HTTP headers that can be specified in a server response.

    */
public struct HttpResponseHeader : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Net_HttpResponseHeader_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Net.HttpResponseHeader CacheControl
    /**
    The Cache-Control header, which specifies caching directives that must be obeyed by all caching mechanisms along the request/response chain.

    */
    public static var CacheControl : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_CacheControl());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Connection
    /**
    The Connection header, which specifies options that are desired for a particular connection.

    */
    public static var Connection : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Connection());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Date
    /**
    The Date header, which specifies the date and time at which the response originated.

    */
    public static var Date : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Date());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader KeepAlive
    /**
    The Keep-Alive header, which specifies a parameter to be used to maintain a persistent connection.

    */
    public static var KeepAlive : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_KeepAlive());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Pragma
    /**
    The Pragma header, which specifies implementation-specific directives that might apply to any agent along the request/response chain.

    */
    public static var Pragma : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Pragma());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Trailer
    /**
    The Trailer header, which specifies that the indicated header fields are present in the trailer of a message that is encoded with chunked transfer-coding.

    */
    public static var Trailer : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Trailer());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader TransferEncoding
    /**
    The Transfer-Encoding header, which specifies what (if any) type of transformation has been applied to the message body.

    */
    public static var TransferEncoding : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_TransferEncoding());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Upgrade
    /**
    The Upgrade header, which specifies additional communications protocols that the client supports.

    */
    public static var Upgrade : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Upgrade());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Via
    /**
    The Via header, which specifies intermediate protocols to be used by gateway and proxy agents.

    */
    public static var Via : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Via());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Warning
    /**
    The Warning header, which specifies additional information about that status or transformation of a message that might not be reflected in the message.

    */
    public static var Warning : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Warning());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Allow
    /**
    The Allow header, which specifies the set of HTTP methods that are supported.

    */
    public static var Allow : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Allow());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ContentLength
    /**
    The Content-Length header, which specifies the length, in bytes, of the accompanying body data.

    */
    public static var ContentLength : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ContentLength());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ContentType
    /**
    The Content-Type header, which specifies the MIME type of the accompanying body data.

    */
    public static var ContentType : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ContentType());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ContentEncoding
    /**
    The Content-Encoding header, which specifies the encodings that have been applied to the accompanying body data.

    */
    public static var ContentEncoding : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ContentEncoding());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ContentLanguage
    /**
    The Content-Language header, which specifies the natural language or languages of the accompanying body data.

    */
    public static var ContentLanguage : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ContentLanguage());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ContentLocation
    /**
    The Content-Location header, which specifies a URI from which the accompanying body can be obtained.

    */
    public static var ContentLocation : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ContentLocation());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ContentMd5
    /**
    The Content-MD5 header, which specifies the MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check. Due to collision problems with MD5, Microsoft recommends a security model based on SHA256 or better.

    */
    public static var ContentMd5 : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ContentMd5());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ContentRange
    /**
    The Range header, which specifies the subrange or subranges of the response that the client requests be returned in lieu of the entire response.

    */
    public static var ContentRange : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ContentRange());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Expires
    /**
    The Expires header, which specifies the date and time after which the accompanying body data should be considered stale.

    */
    public static var Expires : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Expires());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader LastModified
    /**
    The Last-Modified header, which specifies the date and time at which the accompanying body data was last modified.

    */
    public static var LastModified : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_LastModified());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader AcceptRanges
    /**
    The Accept-Ranges header, which specifies the range that is accepted by the server.

    */
    public static var AcceptRanges : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_AcceptRanges());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Age
    /**
    The Age header, which specifies the time, in seconds, since the response was generated by the originating server.

    */
    public static var Age : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Age());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ETag
    /**
    The Etag header, which specifies the current value for the requested variant.

    */
    public static var ETag : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ETag());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Location
    /**
    The Location header, which specifies a URI to which the client is redirected to obtain the requested resource.

    */
    public static var Location : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Location());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader ProxyAuthenticate
    /**
    The Proxy-Authenticate header, which specifies that the client must authenticate itself to a proxy.

    */
    public static var ProxyAuthenticate : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_ProxyAuthenticate());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader RetryAfter
    /**
    The Retry-After header, which specifies a time (in seconds), or a date and time, after which the client can retry its request.

    */
    public static var RetryAfter : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_RetryAfter());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Server
    /**
    The Server header, which specifies information about the originating server agent.

    */
    public static var Server : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Server());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader SetCookie
    /**
    The Set-Cookie header, which specifies cookie data that is presented to the client.

    */
    public static var SetCookie : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_SetCookie());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader Vary
    /**
    The Vary header, which specifies the request headers that are used to determine whether a cached response is fresh.

    */
    public static var Vary : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_Vary());
            return __return;
        }
    }
    // static field: System.Net.HttpResponseHeader WwwAuthenticate
    /**
    The WWW-Authenticate header, which specifies that the client must authenticate itself to the server.

    */
    public static var WwwAuthenticate : dotnet.System.Net.HttpResponseHeader {
        get {
        let __return = dotnet.System.Net.HttpResponseHeader(val: System_Net_HttpResponseHeader_get_WwwAuthenticate());
            return __return;
        }
    }
} // HttpResponseHeader


// type: System.Net.WebHeaderCollection
    /**
    Contains protocol headers associated with a request or response.

    */
open class WebHeaderCollection
    :
    dotnet.System.Collections.Specialized.NameValueCollection
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Net_WebHeaderCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Net.WebHeaderCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Net_WebHeaderCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Net.HttpRequestHeader, System.String)
// docid: M:System.Net.WebHeaderCollection.Add(System.Net.HttpRequestHeader,System.String)
    /**
    Inserts the specified header with the specified value into the collection.

    - Parameter header: The header to add to the collection.
    - Parameter value: The content of the header.
    */
    open func Add(header : dotnet.System.Net.HttpRequestHeader, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Add_0__2__HttpRequestHeader_String(&__thrown, self.get_handle(), header.get_value(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.Net.HttpResponseHeader, System.String)
// docid: M:System.Net.WebHeaderCollection.Add(System.Net.HttpResponseHeader,System.String)
    /**
    Inserts the specified header with the specified value into the collection.

    - Parameter header: The header to add to the collection.
    - Parameter value: The content of the header.
    */
    open func Add(header : dotnet.System.Net.HttpResponseHeader, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Add_0__2__HttpResponseHeader_String(&__thrown, self.get_handle(), header.get_value(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String)
// docid: M:System.Net.WebHeaderCollection.Add(System.String)
    /**
    Inserts the specified header into the collection.

    - Parameter header: The header to add, with the name and value separated by a colon.
    */
    open func Add(header : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Add_0__1__String(&__thrown, self.get_handle(), header.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String, System.String)
// docid: M:System.Net.WebHeaderCollection.Add(System.String,System.String)
    /**
    Inserts a header with the specified name and value into the collection.

    - Parameter name: The header to add to the collection.
    - Parameter value: The content of the header.
    */
    open func Add(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Add_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Net.WebHeaderCollection.Clear
    /**
    Removes all headers from the collection.

    */
    open override func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String Get(System.Int32)
// docid: M:System.Net.WebHeaderCollection.Get(System.Int32)
    /**
    Gets the value of a particular header in the collection, specified by an index into the collection.

    - Parameter index: The zero-based index of the key to get from the collection.
    - Returns: A  containing the value of the specified header.

    */
    open override func Get(index : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_String__Get_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Get(System.String)
// docid: M:System.Net.WebHeaderCollection.Get(System.String)
    /**
    Gets the value of a particular header in the collection, specified by the name of the header.

    - Parameter name: The name of the Web header.
    - Returns: A  holding the value of the specified header.

    */
    open override func Get(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_String__Get_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Net.WebHeaderCollection.GetEnumerator
    /**
    Returns an enumerator that can iterate through the  instance.

    - Returns: An  for the .

    */
    open override func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.String GetKey(System.Int32)
// docid: M:System.Net.WebHeaderCollection.GetKey(System.Int32)
    /**
    Gets the header name at the specified position in the collection.

    - Parameter index: The zero-based index of the key to get from the collection.
    - Returns: A  holding the header name.

    */
    open override func GetKey(index : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_String__GetKey_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Net.WebHeaderCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates a  with the data needed to serialize the target object.

    - Parameter serializationInfo: The  to populate with data.
    - Parameter streamingContext: A  that specifies the destination for this serialization.
    */
    open func GetObjectData(serializationInfo : dotnet.System.Runtime.Serialization.SerializationInfo, streamingContext : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), serializationInfo.get_handle(), streamingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String[] GetValues(System.Int32)
// docid: M:System.Net.WebHeaderCollection.GetValues(System.Int32)
    /**
    Gets an array of header values stored in the  position of the header collection.

    - Parameter index: The header index to return.
    - Returns: An array of header strings.

    */
    open override func GetValues(index : Swift.Int32) throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_StringArray__GetValues_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String[] GetValues(System.String)
// docid: M:System.Net.WebHeaderCollection.GetValues(System.String)
    /**
    Gets an array of header values stored in a header.

    - Parameter header: The header to return.
    - Returns: An array of header strings.

    */
    open func GetValues(header : dotnet.System.String) throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_StringArray__GetValues_0__1__String(&__thrown, self.get_handle(), header.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsRestricted(System.String)
// docid: M:System.Net.WebHeaderCollection.IsRestricted(System.String)
    /**
    Tests whether the specified HTTP header can be set for the request.

    - Parameter headerName: The header to test.
    - Returns: 
         if the header is restricted; otherwise .

    */
    open class func IsRestricted(headerName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_bool__IsRestricted_0__1__String(&__thrown, headerName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsRestricted(System.String, bool)
// docid: M:System.Net.WebHeaderCollection.IsRestricted(System.String,System.Boolean)
    /**
    Tests whether the specified HTTP header can be set for the request or the response.

    - Parameter headerName: The header to test.
    - Parameter response: Does the Framework test the response or the request?
    - Returns: 
         if the header is restricted; otherwise, .

    */
    open class func IsRestricted(headerName : dotnet.System.String, response : Bool) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_bool__IsRestricted_0__2__String_bool(&__thrown, headerName.get_handle(), Swift.Int32(response ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void OnDeserialization(System.Object)
// docid: M:System.Net.WebHeaderCollection.OnDeserialization(System.Object)
    /**
    Implements the  interface and raises the deserialization event when the deserialization is complete.

    - Parameter sender: The source of the deserialization event.
    */
    open override func OnDeserialization(sender : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__OnDeserialization_0__1__Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Net.HttpRequestHeader)
// docid: M:System.Net.WebHeaderCollection.Remove(System.Net.HttpRequestHeader)
    /**
    Removes the specified header from the collection.

    - Parameter header: The  instance to remove from the collection.
    */
    open func Remove(header : dotnet.System.Net.HttpRequestHeader) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Remove_0__1__HttpRequestHeader(&__thrown, self.get_handle(), header.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Net.HttpResponseHeader)
// docid: M:System.Net.WebHeaderCollection.Remove(System.Net.HttpResponseHeader)
    /**
    Removes the specified header from the collection.

    - Parameter header: The  instance to remove from the collection.
    */
    open func Remove(header : dotnet.System.Net.HttpResponseHeader) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Remove_0__1__HttpResponseHeader(&__thrown, self.get_handle(), header.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:System.Net.WebHeaderCollection.Remove(System.String)
    /**
    Removes the specified header from the collection.

    - Parameter name: The name of the header to remove from the collection.
    */
    open func Remove(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Set(System.Net.HttpRequestHeader, System.String)
// docid: M:System.Net.WebHeaderCollection.Set(System.Net.HttpRequestHeader,System.String)
    /**
    Sets the specified header to the specified value.

    - Parameter header: The  value to set.
    - Parameter value: The content of the header to set.
    */
    open func Set(header : dotnet.System.Net.HttpRequestHeader, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Set_0__2__HttpRequestHeader_String(&__thrown, self.get_handle(), header.get_value(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Set(System.Net.HttpResponseHeader, System.String)
// docid: M:System.Net.WebHeaderCollection.Set(System.Net.HttpResponseHeader,System.String)
    /**
    Sets the specified header to the specified value.

    - Parameter header: The  value to set.
    - Parameter value: The content of the header to set.
    */
    open func Set(header : dotnet.System.Net.HttpResponseHeader, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Set_0__2__HttpResponseHeader_String(&__thrown, self.get_handle(), header.get_value(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Set(System.String, System.String)
// docid: M:System.Net.WebHeaderCollection.Set(System.String,System.String)
    /**
    Sets the specified header to the specified value.

    - Parameter name: The header to set.
    - Parameter value: The content of the header to set.
    */
    open func Set(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__Set_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Byte[] ToByteArray()
// docid: M:System.Net.WebHeaderCollection.ToByteArray
    /**
    Converts the  to a byte array.

    - Returns: A  array holding the header collection.

    */
    open func ToByteArray() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_u8Array__ToByteArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Net.WebHeaderCollection.ToString
    /**
    This method is obsolete.

    - Returns: The  representation of the collection.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String[] get_AllKeys()
// docid: M:System.Net.WebHeaderCollection.get_AllKeys
    open override func get_AllKeys() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_StringArray__get_AllKeys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Net.WebHeaderCollection.get_Count
    open override func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.NameObjectCollectionBase.KeysCollection get_Keys()
// docid: M:System.Net.WebHeaderCollection.get_Keys
    open override func get_Keys() throws -> dotnet.System.Collections.Specialized.NameObjectCollectionBase_KeysCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_NameObjectCollectionBase_KeysCollection__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.NameObjectCollectionBase_KeysCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.Net.HttpRequestHeader)
// docid: M:System.Net.WebHeaderCollection.get_Item(System.Net.HttpRequestHeader)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(header : dotnet.System.Net.HttpRequestHeader) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_String__get_Item_0__1__HttpRequestHeader(&__thrown, self.get_handle(), header.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Net.HttpRequestHeader, System.String)
// docid: M:System.Net.WebHeaderCollection.set_Item(System.Net.HttpRequestHeader,System.String)
    open func set_Item(header : dotnet.System.Net.HttpRequestHeader, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__set_Item_0__2__HttpRequestHeader_String(&__thrown, self.get_handle(), header.get_value(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Item(System.Net.HttpResponseHeader)
// docid: M:System.Net.WebHeaderCollection.get_Item(System.Net.HttpResponseHeader)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(header : dotnet.System.Net.HttpResponseHeader) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_WebHeaderCollection_String__get_Item_0__1__HttpResponseHeader(&__thrown, self.get_handle(), header.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Net.HttpResponseHeader, System.String)
// docid: M:System.Net.WebHeaderCollection.set_Item(System.Net.HttpResponseHeader,System.String)
    open func set_Item(header : dotnet.System.Net.HttpResponseHeader, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Net_WebHeaderCollection_void__set_Item_0__2__HttpResponseHeader_String(&__thrown, self.get_handle(), header.get_value(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets all header names (keys) in the collection.

    */
    open override var AllKeys : dotnet.System_Arr<dotnet.System.String> {
        get {
            return try! get_AllKeys();
        }
    }
    /**
    Gets the number of headers in the collection.

    */
    open override var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets the collection of header names (keys) in the collection.

    */
    open override var Keys : dotnet.System.Collections.Specialized.NameObjectCollectionBase_KeysCollection {
        get {
            return try! get_Keys();
        }
    }
} // WebHeaderCollection


}


