// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Runtime
// System.Runtime.Serialization
extension System.Runtime.Serialization {
// type: System.Runtime.Serialization.Formatter
    /**
    Provides base functionality for the common language runtime serialization formatters.

    */
open class Formatter
    :
    dotnet.System.Object,
    System_Runtime_Serialization_IFormatter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Formatter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object Deserialize(System.IO.Stream)
// docid: M:System.Runtime.Serialization.Formatter.Deserialize(System.IO.Stream)
    /**
    When overridden in a derived class, deserializes the stream attached to the formatter when it was created, creating a graph of objects identical to the graph originally serialized into that stream.

    - Parameter serializationStream: The stream to deserialize.
    - Returns: The top object of the deserialized graph of objects.

    */
    open func Deserialize(serializationStream : dotnet.System.IO.Stream) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatter_Object__Deserialize_0__1__Stream(&__thrown, self.get_handle(), serializationStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void Serialize(System.IO.Stream, System.Object)
// docid: M:System.Runtime.Serialization.Formatter.Serialize(System.IO.Stream,System.Object)
    /**
    When overridden in a derived class, serializes the graph of objects with the specified root to the stream already attached to the formatter.

    - Parameter serializationStream: The stream to which the objects are serialized.
    - Parameter graph: The object at the root of the graph to serialize.
    */
    open func Serialize(serializationStream : dotnet.System.IO.Stream, graph : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatter_void__Serialize_0__2__Stream_Object(&__thrown, self.get_handle(), serializationStream.get_handle(), graph.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.SerializationBinder get_Binder()
// docid: M:System.Runtime.Serialization.Formatter.get_Binder
    open func get_Binder() throws -> Optional<dotnet.System.Runtime.Serialization.SerializationBinder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatter_SerializationBinder__get_Binder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.SerializationBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Binder(System.Runtime.Serialization.SerializationBinder)
// docid: M:System.Runtime.Serialization.Formatter.set_Binder(System.Runtime.Serialization.SerializationBinder)
    open func set_Binder(value : Optional<dotnet.System.Runtime.Serialization.SerializationBinder>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatter_void__set_Binder_0__1__SerializationBinder(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.StreamingContext get_Context()
// docid: M:System.Runtime.Serialization.Formatter.get_Context
    open func get_Context() throws -> dotnet.System.Runtime.Serialization.StreamingContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatter_StreamingContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.StreamingContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Context(System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.Formatter.set_Context(System.Runtime.Serialization.StreamingContext)
    open func set_Context(value : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatter_void__set_Context_0__1__StreamingContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.ISurrogateSelector get_SurrogateSelector()
// docid: M:System.Runtime.Serialization.Formatter.get_SurrogateSelector
    open func get_SurrogateSelector() throws -> Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatter_ISurrogateSelector__get_SurrogateSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ISurrogateSelector(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector)
// docid: M:System.Runtime.Serialization.Formatter.set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector)
    open func set_SurrogateSelector(value : Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatter_void__set_SurrogateSelector_0__1__ISurrogateSelector(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    When overridden in a derived class, gets or sets the  used with the current formatter.

    */
    open var Binder : Optional<dotnet.System.Runtime.Serialization.SerializationBinder> {
        get {
            return try! get_Binder();
        }
        set(v) {
            return try! set_Binder(value: v!);
        }
    }
    /**
    When overridden in a derived class, gets or sets the  used for the current serialization.

    */
    open var Context : dotnet.System.Runtime.Serialization.StreamingContext {
        get {
            return try! get_Context();
        }
        set(v) {
            return try! set_Context(value: v);
        }
    }
    /**
    When overridden in a derived class, gets or sets the  used with the current formatter.

    */
    open var SurrogateSelector : Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector> {
        get {
            return try! get_SurrogateSelector();
        }
        set(v) {
            return try! set_SurrogateSelector(value: v!);
        }
    }
} // Formatter


// type: System.Runtime.Serialization.FormatterConverter
    /**
    Represents a base implementation of the  interface that uses the  class and the  interface.

    */
open class FormatterConverter
    :
    dotnet.System.Object,
    System_Runtime_Serialization_IFormatterConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_FormatterConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.FormatterConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_FormatterConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Convert(System.Object, System.Type)
// docid: M:System.Runtime.Serialization.FormatterConverter.Convert(System.Object,System.Type)
    /**
    Converts a value to the given .

    - Parameter value: The object to convert.
    - Parameter type: The  into which  is converted.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func Convert(value : dotnet.System.Object, type : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_Object__Convert_0__2__Object_Type(&__thrown, self.get_handle(), value.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object Convert(System.Object, System.TypeCode)
// docid: M:System.Runtime.Serialization.FormatterConverter.Convert(System.Object,System.TypeCode)
    /**
    Converts a value to the given .

    - Parameter value: The object to convert.
    - Parameter typeCode: The  into which  is converted.
    - Returns: The converted , or  if the  parameter is .

    */
    open /* method final */ func Convert(value : dotnet.System.Object, typeCode : dotnet.System.TypeCode) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_Object__Convert_0__2__Object_TypeCode(&__thrown, self.get_handle(), value.get_handle(), typeCode.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool ToBoolean(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToBoolean(System.Object)
    /**
    Converts a value to a .

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToBoolean(value : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_bool__ToBoolean_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte ToByte(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToByte(System.Object)
    /**
    Converts a value to an 8-bit unsigned integer.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToByte(value : dotnet.System.Object) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_u8__ToByte_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Char ToChar(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToChar(System.Object)
    /**
    Converts a value to a Unicode character.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToChar(value : dotnet.System.Object) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_Char__ToChar_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // System.DateTime ToDateTime(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToDateTime(System.Object)
    /**
    Converts a value to a .

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToDateTime(value : dotnet.System.Object) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_DateTime__ToDateTime_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.Decimal ToDecimal(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToDecimal(System.Object)
    /**
    Converts a value to a .

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToDecimal(value : dotnet.System.Object) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_Decimal__ToDecimal_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double ToDouble(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToDouble(System.Object)
    /**
    Converts a value to a double-precision floating-point number.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToDouble(value : dotnet.System.Object) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_f64__ToDouble_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int16 ToInt16(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToInt16(System.Object)
    /**
    Converts a value to a 16-bit signed integer.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToInt16(value : dotnet.System.Object) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_i16__ToInt16_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 ToInt32(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToInt32(System.Object)
    /**
    Converts a value to a 32-bit signed integer.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToInt32(value : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_i32__ToInt32_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 ToInt64(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToInt64(System.Object)
    /**
    Converts a value to a 64-bit signed integer.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToInt64(value : dotnet.System.Object) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_i64__ToInt64_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.SByte ToSByte(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToSByte(System.Object)
    /**
    Converts a value to a .

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToSByte(value : dotnet.System.Object) throws -> Swift.Int8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_i8__ToSByte_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single ToSingle(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToSingle(System.Object)
    /**
    Converts a value to a single-precision floating-point number.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToSingle(value : dotnet.System.Object) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_f32__ToSingle_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToString(System.Object)
    /**
    Converts the specified object to a .

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToString(value : dotnet.System.Object) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_String__ToString_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.UInt16 ToUInt16(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToUInt16(System.Object)
    /**
    Converts a value to a 16-bit unsigned integer.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToUInt16(value : dotnet.System.Object) throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_u16__ToUInt16_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt32 ToUInt32(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToUInt32(System.Object)
    /**
    Converts a value to a 32-bit unsigned integer.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToUInt32(value : dotnet.System.Object) throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_u32__ToUInt32_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt64 ToUInt64(System.Object)
// docid: M:System.Runtime.Serialization.FormatterConverter.ToUInt64(System.Object)
    /**
    Converts a value to a 64-bit unsigned integer.

    - Parameter value: The object to convert.
    - Returns: The converted  or  if the  parameter is .

    */
    open /* method final */ func ToUInt64(value : dotnet.System.Object) throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterConverter_u64__ToUInt64_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // FormatterConverter


// type: System.Runtime.Serialization.FormatterServices
public struct FormatterServices {
    // void CheckTypeSecurity(System.Type, System.Runtime.Serialization.Formatters.TypeFilterLevel)
// docid: M:System.Runtime.Serialization.FormatterServices.CheckTypeSecurity(System.Type,System.Runtime.Serialization.Formatters.TypeFilterLevel)
    /**
    Determines whether the specified  can be deserialized with the  property set to .

    - Parameter t: The  to check for the ability to deserialize.
    - Parameter securityLevel: The  property value.
    */
    public static func CheckTypeSecurity(t : dotnet.System.Type_, securityLevel : dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_FormatterServices_void__CheckTypeSecurity_0__2__Type_TypeFilterLevel(&__thrown, t.get_handle(), securityLevel.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object[] GetObjectData(System.Object, System.Reflection.MemberInfo[])
// docid: M:System.Runtime.Serialization.FormatterServices.GetObjectData(System.Object,System.Reflection.MemberInfo[])
    /**
    Extracts the data from the specified object and returns it as an array of objects.

    - Parameter obj: The object to write to the formatter.
    - Parameter members: The members to extract from the object.
    - Returns: An array of  that contains data stored in  and associated with .

    */
    public static func GetObjectData(obj : dotnet.System.Object, members : dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterServices_ObjectArray__GetObjectData_0__2__Object_MemberInfoArray(&__thrown, obj.get_handle(), members.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object GetSafeUninitializedObject(System.Type)
// docid: M:System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject(System.Type)
    /**
    Creates a new instance of the specified object type.

    - Parameter type: The type of object to create.
    - Returns: A zeroed object of the specified type.

    */
    public static func GetSafeUninitializedObject(type : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterServices_Object__GetSafeUninitializedObject_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetSerializableMembers(System.Type)
// docid: M:System.Runtime.Serialization.FormatterServices.GetSerializableMembers(System.Type)
    /**
    Gets all the serializable members for a class of the specified .

    - Parameter type: The type being serialized.
    - Returns: An array of type  of the non-transient, non-static members.

    */
    public static func GetSerializableMembers(type : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterServices_MemberInfoArray__GetSerializableMembers_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Reflection.MemberInfo[] GetSerializableMembers(System.Type, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.FormatterServices.GetSerializableMembers(System.Type,System.Runtime.Serialization.StreamingContext)
    /**
    Gets all the serializable members for a class of the specified  and in the provided .

    - Parameter type: The type being serialized or cloned.
    - Parameter context: The context where the serialization occurs.
    - Returns: An array of type  of the non-transient, non-static members.

    */
    public static func GetSerializableMembers(type : dotnet.System.Type_, context : dotnet.System.Runtime.Serialization.StreamingContext) throws -> dotnet.System_Arr<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterServices_MemberInfoArray__GetSerializableMembers_0__2__Type_StreamingContext(&__thrown, type.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>(hndl : __return);
        }
    }
    // System.Runtime.Serialization.ISerializationSurrogate GetSurrogateForCyclicalReference(System.Runtime.Serialization.ISerializationSurrogate)
// docid: M:System.Runtime.Serialization.FormatterServices.GetSurrogateForCyclicalReference(System.Runtime.Serialization.ISerializationSurrogate)
    /**
    Returns a serialization surrogate for the specified .

    - Parameter innerSurrogate: The specified surrogate.
    - Returns: An  for the specified .

    */
    public static func GetSurrogateForCyclicalReference(innerSurrogate : dotnet.System.Runtime.Serialization.ISerializationSurrogate) throws -> dotnet.System.Runtime.Serialization.ISerializationSurrogate {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterServices_ISerializationSurrogate__GetSurrogateForCyclicalReference_0__1__ISerializationSurrogate(&__thrown, innerSurrogate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.ISerializationSurrogate(hndl : __return);
        }
    }
    // System.Type GetTypeFromAssembly(System.Reflection.Assembly, System.String)
// docid: M:System.Runtime.Serialization.FormatterServices.GetTypeFromAssembly(System.Reflection.Assembly,System.String)
    /**
    Looks up the  of the specified object in the provided .

    - Parameter assem: The assembly where you want to look up the object.
    - Parameter name: The name of the object.
    - Returns: The  of the named object.

    */
    public static func GetTypeFromAssembly(assem : dotnet.System.Reflection.Assembly, name : dotnet.System.String) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterServices_Type__GetTypeFromAssembly_0__2__Assembly_String(&__thrown, assem.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetUninitializedObject(System.Type)
// docid: M:System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)
    /**
    Creates a new instance of the specified object type.

    - Parameter type: The type of object to create.
    - Returns: A zeroed object of the specified type.

    */
    public static func GetUninitializedObject(type : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterServices_Object__GetUninitializedObject_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object PopulateObjectMembers(System.Object, System.Reflection.MemberInfo[], System.Object[])
// docid: M:System.Runtime.Serialization.FormatterServices.PopulateObjectMembers(System.Object,System.Reflection.MemberInfo[],System.Object[])
    /**
    Populates the specified object with values for each field drawn from the data array of objects.

    - Parameter obj: The object to populate.
    - Parameter members: An array of  that describes which fields and properties to populate.
    - Parameter data: An array of  that specifies the values for each field and property to populate.
    - Returns: The newly populated object.

    */
    public static func PopulateObjectMembers(obj : dotnet.System.Object, members : dotnet.System_Arr<dotnet.System.Reflection.MemberInfo>, data : dotnet.System_Arr<dotnet.System.Object>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_FormatterServices_Object__PopulateObjectMembers_0__3__Object_MemberInfoArray_ObjectArray(&__thrown, obj.get_handle(), members.get_handle(), data.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // FormatterServices


// type: System.Runtime.Serialization.IFormatter
    /**
    Provides functionality for formatting serialized objects.

    */
open class IFormatter
    :
    SGBridgeGenericValue,
    System_Runtime_Serialization_IFormatter
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_IFormatter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object Deserialize(System.IO.Stream)
// docid: M:System.Runtime.Serialization.IFormatter.Deserialize(System.IO.Stream)
    /**
    Deserializes the data on the provided stream and reconstitutes the graph of objects.

    - Parameter serializationStream: The stream that contains the data to deserialize.
    - Returns: The top object of the deserialized graph.

    */
    open func Deserialize(serializationStream : dotnet.System.IO.Stream) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_IFormatter_Object__Deserialize_0__1__Stream(&__thrown, self.get_handle(), serializationStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void Serialize(System.IO.Stream, System.Object)
// docid: M:System.Runtime.Serialization.IFormatter.Serialize(System.IO.Stream,System.Object)
    /**
    Serializes an object, or graph of objects with the given root to the provided stream.

    - Parameter serializationStream: The stream where the formatter puts the serialized data. This stream can reference a variety of backing stores (such as files, network, memory, and so on).
    - Parameter graph: The object, or root of the object graph, to serialize. All child objects of this root object are automatically serialized.
    */
    open func Serialize(serializationStream : dotnet.System.IO.Stream, graph : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_IFormatter_void__Serialize_0__2__Stream_Object(&__thrown, self.get_handle(), serializationStream.get_handle(), graph.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.SerializationBinder get_Binder()
// docid: M:System.Runtime.Serialization.IFormatter.get_Binder
    open func get_Binder() throws -> Optional<dotnet.System.Runtime.Serialization.SerializationBinder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_IFormatter_SerializationBinder__get_Binder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.SerializationBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Binder(System.Runtime.Serialization.SerializationBinder)
// docid: M:System.Runtime.Serialization.IFormatter.set_Binder(System.Runtime.Serialization.SerializationBinder)
    open func set_Binder(value : Optional<dotnet.System.Runtime.Serialization.SerializationBinder>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_IFormatter_void__set_Binder_0__1__SerializationBinder(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.StreamingContext get_Context()
// docid: M:System.Runtime.Serialization.IFormatter.get_Context
    open func get_Context() throws -> dotnet.System.Runtime.Serialization.StreamingContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_IFormatter_StreamingContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.StreamingContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Context(System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.IFormatter.set_Context(System.Runtime.Serialization.StreamingContext)
    open func set_Context(value : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_IFormatter_void__set_Context_0__1__StreamingContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.ISurrogateSelector get_SurrogateSelector()
// docid: M:System.Runtime.Serialization.IFormatter.get_SurrogateSelector
    open func get_SurrogateSelector() throws -> Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_IFormatter_ISurrogateSelector__get_SurrogateSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ISurrogateSelector(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector)
// docid: M:System.Runtime.Serialization.IFormatter.set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector)
    open func set_SurrogateSelector(value : Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_IFormatter_void__set_SurrogateSelector_0__1__ISurrogateSelector(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IFormatter


// type: System.Runtime.Serialization.ISerializationSurrogate
    /**
    Implements a serialization surrogate selector that allows one object to perform serialization and deserialization of another.

    */
open class ISerializationSurrogate
    :
    SGBridgeGenericValue,
    System_Runtime_Serialization_ISerializationSurrogate
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_ISerializationSurrogate_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void GetObjectData(System.Object, System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Populates the provided  with the data needed to serialize the object.

    - Parameter obj: The object to serialize.
    - Parameter info: The  to populate with data.
    - Parameter context: The destination (see ) for this serialization.
    */
    open func GetObjectData(obj : dotnet.System.Object, info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ISerializationSurrogate_void__GetObjectData_0__3__Object_SerializationInfo_StreamingContext(&__thrown, self.get_handle(), obj.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object SetObjectData(System.Object, System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext, System.Runtime.Serialization.ISurrogateSelector)
// docid: M:System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)
    /**
    Populates the object using the information in the .

    - Parameter obj: The object to populate.
    - Parameter info: The information to populate the object.
    - Parameter context: The source from which the object is deserialized.
    - Parameter selector: The surrogate selector where the search for a compatible surrogate begins.
    - Returns: The populated deserialized object.

    */
    open func SetObjectData(obj : dotnet.System.Object, info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext, selector : Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ISerializationSurrogate_Object__SetObjectData_0__4__Object_SerializationInfo_StreamingContext_ISurrogateSelector(&__thrown, self.get_handle(), obj.get_handle(), info.get_handle(), context.get_handle(), selector?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // ISerializationSurrogate


// type: System.Runtime.Serialization.ISurrogateSelector
    /**
    Indicates a serialization surrogate selector class.

    */
open class ISurrogateSelector
    :
    SGBridgeGenericValue,
    System_Runtime_Serialization_ISurrogateSelector
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_ISurrogateSelector_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void ChainSelector(System.Runtime.Serialization.ISurrogateSelector)
// docid: M:System.Runtime.Serialization.ISurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)
    /**
    Specifies the next  for surrogates to examine if the current instance does not have a surrogate for the specified type and assembly in the specified context.

    - Parameter selector: The next surrogate selector to examine.
    */
    open func ChainSelector(selector : dotnet.System.Runtime.Serialization.ISurrogateSelector) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ISurrogateSelector_void__ChainSelector_0__1__ISurrogateSelector(&__thrown, self.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Runtime.Serialization.ISurrogateSelector GetNextSelector()
// docid: M:System.Runtime.Serialization.ISurrogateSelector.GetNextSelector
    /**
    Returns the next surrogate selector in the chain.

    - Returns: The next surrogate selector in the chain or .

    */
    open func GetNextSelector() throws -> Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ISurrogateSelector_ISurrogateSelector__GetNextSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ISurrogateSelector(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type, System.Runtime.Serialization.StreamingContext, ref System.Runtime.Serialization.ISurrogateSelector)
// docid: M:System.Runtime.Serialization.ISurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)
    /**
    Finds the surrogate that represents the specified object's type, starting with the specified surrogate selector for the specified serialization context.

    - Parameter type: The  of object (class) that needs a surrogate.
    - Parameter context: The source or destination context for the current serialization.
    - Parameter selector: When this method returns, contains a  that holds a reference to the surrogate selector where the appropriate surrogate was found. This parameter is passed uninitialized.
    - Returns: The appropriate surrogate for the given type in the given context.

    */
    open func GetSurrogate(type : dotnet.System.Type_, context : dotnet.System.Runtime.Serialization.StreamingContext, selector : inout dotnet.System.Runtime.Serialization.ISurrogateSelector) throws -> Optional<dotnet.System.Runtime.Serialization.ISerializationSurrogate> {
        var __thrown : NullableHandle = nil;
            var _tmp_out_selector = selector.get_handle();
        let __return = System_Runtime_Serialization_ISurrogateSelector_ISerializationSurrogate__GetSurrogate_0__3__Type_StreamingContext_outISurrogateSelector(&__thrown, self.get_handle(), type.get_handle(), context.get_handle(), &_tmp_out_selector);
        let _tmp2_selector = dotnet.System.Runtime.Serialization.ISurrogateSelector(hndl: _tmp_out_selector);
            selector = _tmp2_selector;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ISerializationSurrogate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ISurrogateSelector


// type: System.Runtime.Serialization.ObjectIDGenerator
    /**
    Generates IDs for objects.

    */
open class ObjectIDGenerator
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_ObjectIDGenerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.ObjectIDGenerator.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_ObjectIDGenerator_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int64 GetId(System.Object, ref bool)
// docid: M:System.Runtime.Serialization.ObjectIDGenerator.GetId(System.Object,System.Boolean@)
    /**
    Returns the ID for the specified object, generating a new ID if the specified object has not already been identified by the .

    - Parameter obj: The object you want an ID for.
    - Parameter firstTime: 
         if  was not previously known to the ; otherwise, .
    - Returns: The object's ID is used for serialization.  is set to  if this is the first time the object has been identified; otherwise, it is set to .

    */
    open func GetId(obj : dotnet.System.Object, firstTime : inout Bool) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_firstTime = Swift.Int32(firstTime ? 1 : 0);
        let __return = System_Runtime_Serialization_ObjectIDGenerator_i64__GetId_0__2__Object_outbool(&__thrown, self.get_handle(), obj.get_handle(), &_tmp_out_firstTime);
        let _tmp2_firstTime = (_tmp_out_firstTime) != 0;
            firstTime = _tmp2_firstTime;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 HasId(System.Object, ref bool)
// docid: M:System.Runtime.Serialization.ObjectIDGenerator.HasId(System.Object,System.Boolean@)
    /**
    Determines whether an object has already been assigned an ID.

    - Parameter obj: The object you are asking for.
    - Parameter firstTime: 
         if  was not previously known to the ; otherwise, .
    - Returns: The object ID of  if previously known to the ; otherwise, zero.

    */
    open func HasId(obj : dotnet.System.Object, firstTime : inout Bool) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
            var _tmp_out_firstTime = Swift.Int32(firstTime ? 1 : 0);
        let __return = System_Runtime_Serialization_ObjectIDGenerator_i64__HasId_0__2__Object_outbool(&__thrown, self.get_handle(), obj.get_handle(), &_tmp_out_firstTime);
        let _tmp2_firstTime = (_tmp_out_firstTime) != 0;
            firstTime = _tmp2_firstTime;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // ObjectIDGenerator


// type: System.Runtime.Serialization.ObjectManager
    /**
    Keeps track of objects as they are deserialized.

    */
open class ObjectManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_ObjectManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Runtime.Serialization.ISurrogateSelector, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.ObjectManager.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)
    /**
    Initializes a new instance of the  class.

    - Parameter selector: The surrogate selector to use. The  determines the correct surrogate to use when deserializing objects of a given type. At deserialization time, the surrogate selector creates a new instance of the object from the information transmitted on the stream.
    - Parameter context: The streaming context. The  is not used by , but is passed as a parameter to any objects implementing  or having a . These objects can take specific actions depending on the source of the information to deserialize.
    */
    public init(selector : Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector>, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_ObjectManager_ctor_0__2__ISurrogateSelector_StreamingContext(&__thrown, selector?.get_handle() ?? nil, context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void DoFixups()
// docid: M:System.Runtime.Serialization.ObjectManager.DoFixups
    /**
    Performs all the recorded fixups.

    */
    open func DoFixups() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__DoFixups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetObject(System.Int64)
// docid: M:System.Runtime.Serialization.ObjectManager.GetObject(System.Int64)
    /**
    Returns the object with the specified object ID.

    - Parameter objectID: The ID of the requested object.
    - Returns: The object with the specified object ID if it has been previously stored or  if no such object has been registered.

    */
    open func GetObject(objectID : Swift.Int64) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_ObjectManager_Object__GetObject_0__1__i64(&__thrown, self.get_handle(), objectID);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void RaiseDeserializationEvent()
// docid: M:System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent
    /**
    Raises the deserialization event to any registered object that implements .

    */
    open func RaiseDeserializationEvent() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RaiseDeserializationEvent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RaiseOnDeserializingEvent(System.Object)
// docid: M:System.Runtime.Serialization.ObjectManager.RaiseOnDeserializingEvent(System.Object)
    /**
    Invokes the method marked with the .

    - Parameter obj: The instance of the type that contains the method to be invoked.
    */
    open func RaiseOnDeserializingEvent(obj : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RaiseOnDeserializingEvent_0__1__Object(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RecordArrayElementFixup(System.Int64, System.Int32, System.Int64)
// docid: M:System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32,System.Int64)
    /**
    Records a fixup for one element in an array.

    - Parameter arrayToBeFixed: The ID of the array used to record a fixup.
    - Parameter index: The index within arrayFixup that a fixup is requested for.
    - Parameter objectRequired: The ID of the object that the current array element will point to after fixup is completed.
    */
    open func RecordArrayElementFixup(arrayToBeFixed : Swift.Int64, index : Swift.Int32, objectRequired : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RecordArrayElementFixup_0__3__i64_i32_i64(&__thrown, self.get_handle(), arrayToBeFixed, index, objectRequired);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RecordArrayElementFixup(System.Int64, System.Int32[], System.Int64)
// docid: M:System.Runtime.Serialization.ObjectManager.RecordArrayElementFixup(System.Int64,System.Int32[],System.Int64)
    /**
    Records fixups for the specified elements in an array, to be executed later.

    - Parameter arrayToBeFixed: The ID of the array used to record a fixup.
    - Parameter indices: The indexes within the multidimensional array that a fixup is requested for.
    - Parameter objectRequired: The ID of the object the array elements will point to after fixup is completed.
    */
    open func RecordArrayElementFixup(arrayToBeFixed : Swift.Int64, indices : dotnet.System_Arr<Swift.Int32>, objectRequired : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RecordArrayElementFixup_0__3__i64_i32Array_i64(&__thrown, self.get_handle(), arrayToBeFixed, indices.get_handle(), objectRequired);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RecordDelayedFixup(System.Int64, System.String, System.Int64)
// docid: M:System.Runtime.Serialization.ObjectManager.RecordDelayedFixup(System.Int64,System.String,System.Int64)
    /**
    Records a fixup for an object member, to be executed later.

    - Parameter objectToBeFixed: The ID of the object that needs the reference to .
    - Parameter memberName: The member name of  where the fixup will be performed.
    - Parameter objectRequired: The ID of the object required by .
    */
    open func RecordDelayedFixup(objectToBeFixed : Swift.Int64, memberName : dotnet.System.String, objectRequired : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RecordDelayedFixup_0__3__i64_String_i64(&__thrown, self.get_handle(), objectToBeFixed, memberName.get_handle(), objectRequired);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RecordFixup(System.Int64, System.Reflection.MemberInfo, System.Int64)
// docid: M:System.Runtime.Serialization.ObjectManager.RecordFixup(System.Int64,System.Reflection.MemberInfo,System.Int64)
    /**
    Records a fixup for a member of an object, to be executed later.

    - Parameter objectToBeFixed: The ID of the object that needs the reference to the  object.
    - Parameter member: The member of  where the fixup will be performed.
    - Parameter objectRequired: The ID of the object required by .
    */
    open func RecordFixup(objectToBeFixed : Swift.Int64, member : dotnet.System.Reflection.MemberInfo, objectRequired : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RecordFixup_0__3__i64_MemberInfo_i64(&__thrown, self.get_handle(), objectToBeFixed, member.get_handle(), objectRequired);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterObject(System.Object, System.Int64)
// docid: M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64)
    /**
    Registers an object as it is deserialized, associating it with .

    - Parameter obj: The object to register.
    - Parameter objectID: The ID of the object to register.
    */
    open func RegisterObject(obj : dotnet.System.Object, objectID : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RegisterObject_0__2__Object_i64(&__thrown, self.get_handle(), obj.get_handle(), objectID);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterObject(System.Object, System.Int64, System.Runtime.Serialization.SerializationInfo)
// docid: M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo)
    /**
    Registers an object as it is deserialized, associating it with , and recording the  used with it.

    - Parameter obj: The object to register.
    - Parameter objectID: The ID of the object to register.
    - Parameter info: The  used if  implements  or has a .  will be completed with any required fixup information and then passed to the required object when that object is completed.
    */
    open func RegisterObject(obj : dotnet.System.Object, objectID : Swift.Int64, info : dotnet.System.Runtime.Serialization.SerializationInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RegisterObject_0__3__Object_i64_SerializationInfo(&__thrown, self.get_handle(), obj.get_handle(), objectID, info.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterObject(System.Object, System.Int64, System.Runtime.Serialization.SerializationInfo, System.Int64, System.Reflection.MemberInfo)
// docid: M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo)
    /**
    Registers a member of an object as it is deserialized, associating it with , and recording the .

    - Parameter obj: The object to register.
    - Parameter objectID: The ID of the object to register.
    - Parameter info: The  used if  implements  or has a .  will be completed with any required fixup information and then passed to the required object when that object is completed.
    - Parameter idOfContainingObj: The ID of the object that contains . This parameter is required only if  is a value type.
    - Parameter member: The field in the containing object where  exists. This parameter has meaning only if  is a value type.
    */
    open func RegisterObject(obj : dotnet.System.Object, objectID : Swift.Int64, info : Optional<dotnet.System.Runtime.Serialization.SerializationInfo>, idOfContainingObj : Swift.Int64, member : Optional<dotnet.System.Reflection.MemberInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RegisterObject_0__5__Object_i64_SerializationInfo_i64_MemberInfo(&__thrown, self.get_handle(), obj.get_handle(), objectID, info?.get_handle() ?? nil, idOfContainingObj, member?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterObject(System.Object, System.Int64, System.Runtime.Serialization.SerializationInfo, System.Int64, System.Reflection.MemberInfo, System.Int32[])
// docid: M:System.Runtime.Serialization.ObjectManager.RegisterObject(System.Object,System.Int64,System.Runtime.Serialization.SerializationInfo,System.Int64,System.Reflection.MemberInfo,System.Int32[])
    /**
    Registers a member of an array contained in an object while it is deserialized, associating it with , and recording the .

    - Parameter obj: The object to register.
    - Parameter objectID: The ID of the object to register.
    - Parameter info: The  used if  implements  or has a .  will be completed with any required fixup information and then passed to the required object when that object is completed.
    - Parameter idOfContainingObj: The ID of the object that contains . This parameter is required only if  is a value type.
    - Parameter member: The field in the containing object where  exists. This parameter has meaning only if  is a value type.
    - Parameter arrayIndex: If  is a  and a member of an array,  contains the index within that array where  exists.  is ignored if  is not both a  and a member of an array.
    */
    open func RegisterObject(obj : dotnet.System.Object, objectID : Swift.Int64, info : Optional<dotnet.System.Runtime.Serialization.SerializationInfo>, idOfContainingObj : Swift.Int64, member : Optional<dotnet.System.Reflection.MemberInfo>, arrayIndex : Optional<dotnet.System_Arr<Swift.Int32>>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_ObjectManager_void__RegisterObject_0__6__Object_i64_SerializationInfo_i64_MemberInfo_i32Array(&__thrown, self.get_handle(), obj.get_handle(), objectID, info?.get_handle() ?? nil, idOfContainingObj, member?.get_handle() ?? nil, (arrayIndex?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ObjectManager


// type: System.Runtime.Serialization.SerializationBinder
    /**
    Allows users to control class loading and mandate what class to load.

    */
open class SerializationBinder
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_SerializationBinder_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void BindToName(System.Type, ref System.String, ref System.String)
// docid: M:System.Runtime.Serialization.SerializationBinder.BindToName(System.Type,System.String@,System.String@)
    /**
    When overridden in a derived class, controls the binding of a serialized object to a type.

    - Parameter serializedType: The type of the object the formatter creates a new instance of.
    - Parameter assemblyName: Specifies the  name of the serialized object.
    - Parameter typeName: Specifies the  name of the serialized object.
    */
    open func BindToName(serializedType : dotnet.System.Type_, assemblyName : inout dotnet.System.String, typeName : inout dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_assemblyName = assemblyName.get_handle();
            var _tmp_out_typeName = typeName.get_handle();
        System_Runtime_Serialization_SerializationBinder_void__BindToName_0__3__Type_outString_outString(&__thrown, self.get_handle(), serializedType.get_handle(), &_tmp_out_assemblyName, &_tmp_out_typeName);
        let _tmp2_assemblyName = dotnet.System.String(hndl: _tmp_out_assemblyName);
            assemblyName = _tmp2_assemblyName;
        let _tmp2_typeName = dotnet.System.String(hndl: _tmp_out_typeName);
            typeName = _tmp2_typeName;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Type BindToType(System.String, System.String)
// docid: M:System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)
    /**
    When overridden in a derived class, controls the binding of a serialized object to a type.

    - Parameter assemblyName: Specifies the  name of the serialized object.
    - Parameter typeName: Specifies the  name of the serialized object.
    - Returns: The type of the object the formatter creates a new instance of.

    */
    open func BindToType(assemblyName : dotnet.System.String, typeName : dotnet.System.String) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_SerializationBinder_Type__BindToType_0__2__String_String(&__thrown, self.get_handle(), assemblyName.get_handle(), typeName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // SerializationBinder


// type: System.Runtime.Serialization.SerializationObjectManager
    /**
    Manages serialization processes at run time. This class cannot be inherited.

    */
public final class SerializationObjectManager
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_SerializationObjectManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.SerializationObjectManager.#ctor(System.Runtime.Serialization.StreamingContext)
    /**
    Initializes a new instance of the  class.

    - Parameter context: An instance of the  class that contains information about the current serialization operation.
    */
    public init(context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_SerializationObjectManager_ctor_0__1__StreamingContext(&__thrown, context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void RaiseOnSerializedEvent()
// docid: M:System.Runtime.Serialization.SerializationObjectManager.RaiseOnSerializedEvent
    /**
    Invokes the OnSerializing callback event if the type of the object has one; and registers the object for raising the OnSerialized event if the type of the object has one.

    */
    public func RaiseOnSerializedEvent() throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_SerializationObjectManager_void__RaiseOnSerializedEvent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RegisterObject(System.Object)
// docid: M:System.Runtime.Serialization.SerializationObjectManager.RegisterObject(System.Object)
    /**
    Registers the object upon which events will be raised.

    - Parameter obj: The object to register.
    */
    public func RegisterObject(obj : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_SerializationObjectManager_void__RegisterObject_0__1__Object(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // SerializationObjectManager


// type: System.Runtime.Serialization.SurrogateSelector
    /**
    Assists formatters in selection of the serialization surrogate to delegate the serialization or deserialization process to.

    */
open class SurrogateSelector
    :
    dotnet.System.Object,
    System_Runtime_Serialization_ISurrogateSelector
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_SurrogateSelector_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.SurrogateSelector.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_SurrogateSelector_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddSurrogate(System.Type, System.Runtime.Serialization.StreamingContext, System.Runtime.Serialization.ISerializationSurrogate)
// docid: M:System.Runtime.Serialization.SurrogateSelector.AddSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISerializationSurrogate)
    /**
    Adds a surrogate to the list of checked surrogates.

    - Parameter type: The  for which the surrogate is required.
    - Parameter context: The context-specific data.
    - Parameter surrogate: The surrogate to call for this type.
    */
    open func AddSurrogate(type : dotnet.System.Type_, context : dotnet.System.Runtime.Serialization.StreamingContext, surrogate : dotnet.System.Runtime.Serialization.ISerializationSurrogate) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_SurrogateSelector_void__AddSurrogate_0__3__Type_StreamingContext_ISerializationSurrogate(&__thrown, self.get_handle(), type.get_handle(), context.get_handle(), surrogate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ChainSelector(System.Runtime.Serialization.ISurrogateSelector)
// docid: M:System.Runtime.Serialization.SurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)
    /**
    Adds the specified  that can handle a particular object type to the list of surrogates.

    - Parameter selector: The surrogate selector to add.
    */
    open func ChainSelector(selector : dotnet.System.Runtime.Serialization.ISurrogateSelector) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_SurrogateSelector_void__ChainSelector_0__1__ISurrogateSelector(&__thrown, self.get_handle(), selector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Runtime.Serialization.ISurrogateSelector GetNextSelector()
// docid: M:System.Runtime.Serialization.SurrogateSelector.GetNextSelector
    /**
    Returns the next selector on the chain of selectors.

    - Returns: The next  on the chain of selectors.

    */
    open func GetNextSelector() throws -> Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_SurrogateSelector_ISurrogateSelector__GetNextSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ISurrogateSelector(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type, System.Runtime.Serialization.StreamingContext, ref System.Runtime.Serialization.ISurrogateSelector)
// docid: M:System.Runtime.Serialization.SurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)
    /**
    Returns the surrogate for a particular type.

    - Parameter type: The  for which the surrogate is requested.
    - Parameter context: The streaming context.
    - Parameter selector: The surrogate to use.
    - Returns: The surrogate for a particular type.

    */
    open func GetSurrogate(type : dotnet.System.Type_, context : dotnet.System.Runtime.Serialization.StreamingContext, selector : inout dotnet.System.Runtime.Serialization.ISurrogateSelector) throws -> Optional<dotnet.System.Runtime.Serialization.ISerializationSurrogate> {
        var __thrown : NullableHandle = nil;
            var _tmp_out_selector = selector.get_handle();
        let __return = System_Runtime_Serialization_SurrogateSelector_ISerializationSurrogate__GetSurrogate_0__3__Type_StreamingContext_outISurrogateSelector(&__thrown, self.get_handle(), type.get_handle(), context.get_handle(), &_tmp_out_selector);
        let _tmp2_selector = dotnet.System.Runtime.Serialization.ISurrogateSelector(hndl: _tmp_out_selector);
            selector = _tmp2_selector;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ISerializationSurrogate(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void RemoveSurrogate(System.Type, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.SurrogateSelector.RemoveSurrogate(System.Type,System.Runtime.Serialization.StreamingContext)
    /**
    Removes the surrogate associated with a given type.

    - Parameter type: The  for which to remove the surrogate.
    - Parameter context: The  for the current surrogate.
    */
    open func RemoveSurrogate(type : dotnet.System.Type_, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_SurrogateSelector_void__RemoveSurrogate_0__2__Type_StreamingContext(&__thrown, self.get_handle(), type.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // SurrogateSelector


}
// System.Runtime.Serialization.Formatters
extension System.Runtime.Serialization.Formatters {
// type: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
    /**
    Indicates the method that will be used during deserialization for locating and loading assemblies.

    */
public struct FormatterAssemblyStyle : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Formatters_FormatterAssemblyStyle_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle Simple
    /**
    In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the  method is used to load the assembly.

    */
    public static var Simple : dotnet.System.Runtime.Serialization.Formatters.FormatterAssemblyStyle {
        get {
        let __return = dotnet.System.Runtime.Serialization.Formatters.FormatterAssemblyStyle(val: System_Runtime_Serialization_Formatters_FormatterAssemblyStyle_get_Simple());
            return __return;
        }
    }
    // static field: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle Full
    /**
    In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The  method of the  class is used to load the assembly.

    */
    public static var Full : dotnet.System.Runtime.Serialization.Formatters.FormatterAssemblyStyle {
        get {
        let __return = dotnet.System.Runtime.Serialization.Formatters.FormatterAssemblyStyle(val: System_Runtime_Serialization_Formatters_FormatterAssemblyStyle_get_Full());
            return __return;
        }
    }
} // FormatterAssemblyStyle


// type: System.Runtime.Serialization.Formatters.FormatterTypeStyle
    /**
    Indicates the format in which type descriptions are laid out in the serialized stream.

    */
public struct FormatterTypeStyle : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Formatters_FormatterTypeStyle_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.Serialization.Formatters.FormatterTypeStyle TypesWhenNeeded
    /**
    Indicates that types can be stated only for arrays of objects, object members of type , and  non-primitive value types.

    */
    public static var TypesWhenNeeded : dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle {
        get {
        let __return = dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle(val: System_Runtime_Serialization_Formatters_FormatterTypeStyle_get_TypesWhenNeeded());
            return __return;
        }
    }
    // static field: System.Runtime.Serialization.Formatters.FormatterTypeStyle TypesAlways
    /**
    Indicates that types can be given to all object members and  object members.

    */
    public static var TypesAlways : dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle {
        get {
        let __return = dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle(val: System_Runtime_Serialization_Formatters_FormatterTypeStyle_get_TypesAlways());
            return __return;
        }
    }
    // static field: System.Runtime.Serialization.Formatters.FormatterTypeStyle XsdString
    /**
    Indicates that strings can be given in the XSD format rather than SOAP. No string IDs are transmitted.

    */
    public static var XsdString : dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle {
        get {
        let __return = dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle(val: System_Runtime_Serialization_Formatters_FormatterTypeStyle_get_XsdString());
            return __return;
        }
    }
} // FormatterTypeStyle


// type: System.Runtime.Serialization.Formatters.IFieldInfo
    /**
    Allows access to field names and field types of objects that support the  interface.

    */
open class IFieldInfo
    :
    SGBridgeGenericValue,
    System_Runtime_Serialization_Formatters_IFieldInfo
{
    open class func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Formatters_IFieldInfo_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String[] get_FieldNames()
// docid: M:System.Runtime.Serialization.Formatters.IFieldInfo.get_FieldNames
    open func get_FieldNames() throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_IFieldInfo_StringArray__get_FieldNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FieldNames(System.String[])
// docid: M:System.Runtime.Serialization.Formatters.IFieldInfo.set_FieldNames(System.String[])
    open func set_FieldNames(value : Optional<dotnet.System_Arr<dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_IFieldInfo_void__set_FieldNames_0__1__StringArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type[] get_FieldTypes()
// docid: M:System.Runtime.Serialization.Formatters.IFieldInfo.get_FieldTypes
    open func get_FieldTypes() throws -> Optional<dotnet.System_Arr<dotnet.System.Type_>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_IFieldInfo_TypeArray__get_FieldTypes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.Type_>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FieldTypes(System.Type[])
// docid: M:System.Runtime.Serialization.Formatters.IFieldInfo.set_FieldTypes(System.Type[])
    open func set_FieldTypes(value : Optional<dotnet.System_Arr<dotnet.System.Type_>>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_IFieldInfo_void__set_FieldTypes_0__1__TypeArray(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IFieldInfo


// type: System.Runtime.Serialization.Formatters.TypeFilterLevel
    /**
    Specifies the level of automatic deserialization for .NET Framework remoting.

    */
public struct TypeFilterLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Formatters_TypeFilterLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Runtime.Serialization.Formatters.TypeFilterLevel Low
    /**
    The low deserialization level for .NET Framework remoting. It supports types associated with basic remoting functionality.

    */
    public static var Low : dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel {
        get {
        let __return = dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel(val: System_Runtime_Serialization_Formatters_TypeFilterLevel_get_Low());
            return __return;
        }
    }
    // static field: System.Runtime.Serialization.Formatters.TypeFilterLevel Full
    /**
    The full deserialization level for .NET Framework remoting. It supports all types that remoting supports in all situations.

    */
    public static var Full : dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel {
        get {
        let __return = dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel(val: System_Runtime_Serialization_Formatters_TypeFilterLevel_get_Full());
            return __return;
        }
    }
} // TypeFilterLevel


}
// System.Runtime.Serialization.Formatters.Binary
extension System.Runtime.Serialization.Formatters.Binary {
// type: System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
    /**
    Serializes and deserializes an object, or an entire graph of connected objects, in binary format.

    */
public final class BinaryFormatter
    :
    dotnet.System.Object,
    System_Runtime_Serialization_IFormatter
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor
    /**
    Initializes a new instance of the  class with default values.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.Serialization.ISurrogateSelector, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)
    /**
    Initializes a new instance of the  class with a given surrogate selector and streaming context.

    - Parameter selector: The  to use. Can be .
    - Parameter context: The source and destination for the serialized data.
    */
    public init(selector : Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector>, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_ctor_0__2__ISurrogateSelector_StreamingContext(&__thrown, selector?.get_handle() ?? nil, context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Deserialize(System.IO.Stream)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(System.IO.Stream)
    /**
    Deserializes the specified stream into an object graph.

    - Parameter serializationStream: The stream from which to deserialize the object graph.
    - Returns: The top (root) of the object graph.

    */
    public func Deserialize(serializationStream : dotnet.System.IO.Stream) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_Object__Deserialize_0__1__Stream(&__thrown, self.get_handle(), serializationStream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // void Serialize(System.IO.Stream, System.Object)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(System.IO.Stream,System.Object)
    /**
    Serializes the object, or graph of objects with the specified top (root), to the given stream.

    - Parameter serializationStream: The stream to which the graph is to be serialized.
    - Parameter graph: The object at the root of the graph to serialize.
    */
    public func Serialize(serializationStream : dotnet.System.IO.Stream, graph : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_void__Serialize_0__2__Stream_Object(&__thrown, self.get_handle(), serializationStream.get_handle(), graph.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.Formatters.FormatterAssemblyStyle get_AssemblyFormat()
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.get_AssemblyFormat
    public func get_AssemblyFormat() throws -> dotnet.System.Runtime.Serialization.Formatters.FormatterAssemblyStyle {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_FormatterAssemblyStyle__get_AssemblyFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.Formatters.FormatterAssemblyStyle(val: __return);
        }
    }
    // [IsSpecialName] void set_AssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.set_AssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)
    public func set_AssemblyFormat(value : dotnet.System.Runtime.Serialization.Formatters.FormatterAssemblyStyle) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_void__set_AssemblyFormat_0__1__FormatterAssemblyStyle(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.SerializationBinder get_Binder()
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.get_Binder
    public func get_Binder() throws -> Optional<dotnet.System.Runtime.Serialization.SerializationBinder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_SerializationBinder__get_Binder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.SerializationBinder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Binder(System.Runtime.Serialization.SerializationBinder)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.set_Binder(System.Runtime.Serialization.SerializationBinder)
    public func set_Binder(value : Optional<dotnet.System.Runtime.Serialization.SerializationBinder>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_void__set_Binder_0__1__SerializationBinder(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.StreamingContext get_Context()
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.get_Context
    public func get_Context() throws -> dotnet.System.Runtime.Serialization.StreamingContext {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_StreamingContext__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.StreamingContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Context(System.Runtime.Serialization.StreamingContext)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.set_Context(System.Runtime.Serialization.StreamingContext)
    public func set_Context(value : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_void__set_Context_0__1__StreamingContext(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.Formatters.TypeFilterLevel get_FilterLevel()
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.get_FilterLevel
    public func get_FilterLevel() throws -> dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_TypeFilterLevel__get_FilterLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_FilterLevel(System.Runtime.Serialization.Formatters.TypeFilterLevel)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.set_FilterLevel(System.Runtime.Serialization.Formatters.TypeFilterLevel)
    public func set_FilterLevel(value : dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_void__set_FilterLevel_0__1__TypeFilterLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.ISurrogateSelector get_SurrogateSelector()
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.get_SurrogateSelector
    public func get_SurrogateSelector() throws -> Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector> {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_ISurrogateSelector__get_SurrogateSelector_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Runtime.Serialization.ISurrogateSelector(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector)
    public func set_SurrogateSelector(value : Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector>) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_void__set_SurrogateSelector_0__1__ISurrogateSelector(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Runtime.Serialization.Formatters.FormatterTypeStyle get_TypeFormat()
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.get_TypeFormat
    public func get_TypeFormat() throws -> dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle {
        var __thrown : NullableHandle = nil;
        let __return = System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_FormatterTypeStyle__get_TypeFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle(val: __return);
        }
    }
    // [IsSpecialName] void set_TypeFormat(System.Runtime.Serialization.Formatters.FormatterTypeStyle)
// docid: M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.set_TypeFormat(System.Runtime.Serialization.Formatters.FormatterTypeStyle)
    public func set_TypeFormat(value : dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle) throws {
        var __thrown : NullableHandle = nil;
        System_Runtime_Serialization_Formatters_Binary_BinaryFormatter_void__set_TypeFormat_0__1__FormatterTypeStyle(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the behavior of the deserializer with regards to finding and loading assemblies.

    */
    public var AssemblyFormat : dotnet.System.Runtime.Serialization.Formatters.FormatterAssemblyStyle {
        get {
            return try! get_AssemblyFormat();
        }
        set(v) {
            return try! set_AssemblyFormat(value: v);
        }
    }
    /**
    (Insecure) Gets or sets an object of type  that controls the binding of a serialized object to a type.

    */
    public var Binder : Optional<dotnet.System.Runtime.Serialization.SerializationBinder> {
        get {
            return try! get_Binder();
        }
        set(v) {
            return try! set_Binder(value: v!);
        }
    }
    /**
    Gets or sets the  for this formatter.

    */
    public var Context : dotnet.System.Runtime.Serialization.StreamingContext {
        get {
            return try! get_Context();
        }
        set(v) {
            return try! set_Context(value: v);
        }
    }
    /**
    Gets or sets the  of automatic deserialization the  performs.

    */
    public var FilterLevel : dotnet.System.Runtime.Serialization.Formatters.TypeFilterLevel {
        get {
            return try! get_FilterLevel();
        }
        set(v) {
            return try! set_FilterLevel(value: v);
        }
    }
    /**
    Gets or sets a  that controls type substitution during serialization and deserialization.

    */
    public var SurrogateSelector : Optional<dotnet.System.Runtime.Serialization.ISurrogateSelector> {
        get {
            return try! get_SurrogateSelector();
        }
        set(v) {
            return try! set_SurrogateSelector(value: v!);
        }
    }
    /**
    Gets or sets the format in which type descriptions are laid out in the serialized stream.

    */
    public var TypeFormat : dotnet.System.Runtime.Serialization.Formatters.FormatterTypeStyle {
        get {
            return try! get_TypeFormat();
        }
        set(v) {
            return try! set_TypeFormat(value: v);
        }
    }
} // BinaryFormatter


}





public protocol System_Runtime_Serialization_Formatters_IFieldInfo
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_Serialization_IFormatter
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_Serialization_ISerializationSurrogate
    :
    SGBridgeGetHandle
{
}

public protocol System_Runtime_Serialization_ISurrogateSelector
    :
    SGBridgeGetHandle
{
}

