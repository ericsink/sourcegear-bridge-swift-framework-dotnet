// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.IO
// System.IO.Pipes
extension System.IO.Pipes {
// type: System.IO.Pipes.AnonymousPipeServerStreamAcl
public struct AnonymousPipeServerStreamAcl {
    // System.IO.Pipes.AnonymousPipeServerStream Create(System.IO.Pipes.PipeDirection, System.IO.HandleInheritability, System.Int32, System.IO.Pipes.PipeSecurity)
// docid: M:System.IO.Pipes.AnonymousPipeServerStreamAcl.Create(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)
    /**
    Creates a new instance of the  class with the specified pipe direction, inheritability mode, buffer size, and pipe security.

    - Parameter direction: One of the enumeration values that determines the direction of the pipe. Anonymous pipes are unidirectional, so direction cannot be set to .
    - Parameter inheritability: One of the enumeration values that determines whether the underlying handle can be inherited by child processes.
    - Parameter bufferSize: The size of the buffer. This value must be greater than or equal to 0.
    - Parameter pipeSecurity: An object that determines the access control and audit security for the pipe.
    - Returns: A new anonymous pipe server stream instance.

    */
    public static func Create(direction : dotnet.System.IO.Pipes.PipeDirection, inheritability : dotnet.System.IO.HandleInheritability, bufferSize : Swift.Int32, pipeSecurity : Optional<dotnet.System.IO.Pipes.PipeSecurity>) throws -> dotnet.System.IO.Pipes.AnonymousPipeServerStream {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_AnonymousPipeServerStreamAcl_AnonymousPipeServerStream__Create_0__4__PipeDirection_HandleInheritability_i32_PipeSecurity(&__thrown, direction.get_value(), inheritability.get_value(), bufferSize, pipeSecurity?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Pipes.AnonymousPipeServerStream(hndl : __return);
        }
    }
} // AnonymousPipeServerStreamAcl


// type: System.IO.Pipes.NamedPipeServerStreamAcl
public struct NamedPipeServerStreamAcl {
    // System.IO.Pipes.NamedPipeServerStream Create(System.String, System.IO.Pipes.PipeDirection, System.Int32, System.IO.Pipes.PipeTransmissionMode, System.IO.Pipes.PipeOptions, System.Int32, System.Int32, System.IO.Pipes.PipeSecurity, System.IO.HandleInheritability, System.IO.Pipes.PipeAccessRights)
// docid: M:System.IO.Pipes.NamedPipeServerStreamAcl.Create(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)
    /**
    Creates a new instance of the  class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, recommended in and out buffer sizes, pipe security, inheritability mode, and pipe access rights.

    - Parameter pipeName: The name of the pipe.
    - Parameter direction: One of the enumeration values that determines the direction of the pipe.
    - Parameter maxNumberOfServerInstances: The maximum number of server instances that share the same name. You can pass  for this value.
    - Parameter transmissionMode: One of the enumeration values that determines the transmission mode of the pipe.
    - Parameter options: One of the enumeration values that determines how to open or create the pipe.
    - Parameter inBufferSize: The input buffer size.
    - Parameter outBufferSize: The output buffer size.
    - Parameter pipeSecurity: An object that determines the access control and audit security for the pipe.
    - Parameter inheritability: One of the enumeration values that determines whether the underlying handle can be inherited by child processes.
    - Parameter additionalAccessRights: One of the enumeration values that specifies the access rights of the pipe.
    - Returns: A new named pipe server stream instance.

    */
    public static func Create(pipeName : dotnet.System.String, direction : dotnet.System.IO.Pipes.PipeDirection, maxNumberOfServerInstances : Swift.Int32, transmissionMode : dotnet.System.IO.Pipes.PipeTransmissionMode, options : dotnet.System.IO.Pipes.PipeOptions, inBufferSize : Swift.Int32, outBufferSize : Swift.Int32, pipeSecurity : Optional<dotnet.System.IO.Pipes.PipeSecurity>, inheritability : dotnet.System.IO.HandleInheritability/* TODO default enum */, additionalAccessRights : dotnet.System.IO.Pipes.PipeAccessRights/* TODO default enum */) throws -> dotnet.System.IO.Pipes.NamedPipeServerStream {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_NamedPipeServerStreamAcl_NamedPipeServerStream__Create_0__10__String_PipeDirection_i32_PipeTransmissionMode_PipeOptions_i32_i32_PipeSecurity_HandleInheritability_PipeAccessRights(&__thrown, pipeName.get_handle(), direction.get_value(), maxNumberOfServerInstances, transmissionMode.get_value(), options.get_value(), inBufferSize, outBufferSize, pipeSecurity?.get_handle() ?? nil, inheritability.get_value(), additionalAccessRights.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Pipes.NamedPipeServerStream(hndl : __return);
        }
    }
} // NamedPipeServerStreamAcl


// type: System.IO.Pipes.PipeAccessRights
    /**
    Defines the access rights to use when you create access and audit rules.

    */
public struct PipeAccessRights : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_IO_Pipes_PipeAccessRights_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.IO.Pipes.PipeAccessRights ReadData
    /**
    Specifies the right to read data from the pipe. This does not include the right to read file system attributes, extended file system attributes, or access and audit rules.

    */
    public static var ReadData : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_ReadData());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights WriteData
    /**
    Specifies the right to write data to a pipe. This does not include the right to write file system attributes or extended file system attributes.

    */
    public static var WriteData : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_WriteData());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights CreateNewInstance
    /**
    Specifies the right to create a new pipe. Setting this right also sets the  right.

    */
    public static var CreateNewInstance : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_CreateNewInstance());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights ReadExtendedAttributes
    /**
    Specifies the right to read extended file system attributes from a pipe. This does not include the right to read data, file system attributes, or access and audit rules.

    */
    public static var ReadExtendedAttributes : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_ReadExtendedAttributes());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights WriteExtendedAttributes
    /**
    Specifies the right to write extended file system attributes to a pipe. This does not include the right to write file attributes or data.

    */
    public static var WriteExtendedAttributes : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_WriteExtendedAttributes());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights ReadAttributes
    /**
    Specifies the right to read file system attributes from a pipe. This does not include the right to read data, extended file system attributes, or access and audit rules.

    */
    public static var ReadAttributes : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_ReadAttributes());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights WriteAttributes
    /**
    Specifies the right to write file system attributes to a pipe. This does not include the right to write data or extended file system attributes.

    */
    public static var WriteAttributes : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_WriteAttributes());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights Write
    /**
    Specifies the right to write to the pipe. This right includes the , , and  rights.

    */
    public static var Write : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_Write());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights Delete
    /**
    Specifies the right to delete a pipe.

    */
    public static var Delete : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_Delete());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights ReadPermissions
    /**
    Specifies the right to read access and audit rules from the pipe. This does not include the right to read data, file system attributes, or extended file system attributes.

    */
    public static var ReadPermissions : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_ReadPermissions());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights Read
    /**
    Specifies the right to read from the pipe. This right includes the , , , and  rights.

    */
    public static var Read : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_Read());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights ReadWrite
    /**
    Specifies the right to read and write from the pipe. This right includes the , , , , , , and  rights.

    */
    public static var ReadWrite : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_ReadWrite());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights ChangePermissions
    /**
    Specifies the right to change the security and audit rules that are associated with a pipe.

    */
    public static var ChangePermissions : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_ChangePermissions());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights TakeOwnership
    /**
    Specifies the right to change the owner of a pipe. Note that owners of a pipe have full access to that resource.

    */
    public static var TakeOwnership : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_TakeOwnership());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights Synchronize
    /**
    Specifies whether the application can wait for a pipe handle to synchronize with the completion of an I/O operation. This value is automatically set when allowing access to the pipe and automatically excluded when denying access to the pipe. The right to create a pipe requires this value. Note that if you do not explicitly set this value when you create a pipe, the value will be set automatically for you.

    */
    public static var Synchronize : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_Synchronize());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights FullControl
    /**
    Specifies the right to exert full control over a pipe, and to modify access control and audit rules. This value represents the combination of all rights in this enumeration.

    */
    public static var FullControl : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_FullControl());
            return __return;
        }
    }
    // static field: System.IO.Pipes.PipeAccessRights AccessSystemSecurity
    /**
    Specifies the right to make changes to the system access control list (SACL).

    */
    public static var AccessSystemSecurity : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
        let __return = dotnet.System.IO.Pipes.PipeAccessRights(val: System_IO_Pipes_PipeAccessRights_get_AccessSystemSecurity());
            return __return;
        }
    }
} // PipeAccessRights


// type: System.IO.Pipes.PipeAccessRule
    /**
    Represents an abstraction of an access control entry (ACE) that defines an access rule for a pipe.

    */
public final class PipeAccessRule
    :
    dotnet.System.Security.AccessControl.AccessRule
{
    public class override func get_type_handle() -> TypeHandle {
        return System_IO_Pipes_PipeAccessRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IdentityReference, System.IO.Pipes.PipeAccessRights, System.Security.AccessControl.AccessControlType)
// docid: M:System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class with the specified identity, pipe access rights, and access control type.

    - Parameter identity: An  object that encapsulates a reference to a user account.
    - Parameter rights: One of the  values that specifies the type of operation associated with the access rule.
    - Parameter type: One of the  values that specifies whether to allow or deny the operation.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, rights : dotnet.System.IO.Pipes.PipeAccessRights, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_Pipes_PipeAccessRule_ctor_0__3__IdentityReference_PipeAccessRights_AccessControlType(&__thrown, identity.get_handle(), rights.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.IO.Pipes.PipeAccessRights, System.Security.AccessControl.AccessControlType)
// docid: M:System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class with the specified identity, pipe access rights, and access control type.

    - Parameter identity: The name of the user account.
    - Parameter rights: One of the  values that specifies the type of operation associated with the access rule.
    - Parameter type: One of the  values that specifies whether to allow or deny the operation.
    */
    public init(identity : dotnet.System.String, rights : dotnet.System.IO.Pipes.PipeAccessRights, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_Pipes_PipeAccessRule_ctor_0__3__String_PipeAccessRights_AccessControlType(&__thrown, identity.get_handle(), rights.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.IO.Pipes.PipeAccessRights get_PipeAccessRights()
// docid: M:System.IO.Pipes.PipeAccessRule.get_PipeAccessRights
    public func get_PipeAccessRights() throws -> dotnet.System.IO.Pipes.PipeAccessRights {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeAccessRule_PipeAccessRights__get_PipeAccessRights_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Pipes.PipeAccessRights(val: __return);
        }
    }
    /**
    Gets the  flags that are associated with the current  object.

    */
    public var PipeAccessRights : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
            return try! get_PipeAccessRights();
        }
    }
} // PipeAccessRule


// type: System.IO.Pipes.PipeAuditRule
    /**
    Represents an abstraction of an access control entry (ACE) that defines an audit rule for a pipe.

    */
public final class PipeAuditRule
    :
    dotnet.System.Security.AccessControl.AuditRule
{
    public class override func get_type_handle() -> TypeHandle {
        return System_IO_Pipes_PipeAuditRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IdentityReference, System.IO.Pipes.PipeAccessRights, System.Security.AccessControl.AuditFlags)
// docid: M:System.IO.Pipes.PipeAuditRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class for a user account specified in a  object.

    - Parameter identity: An  object that encapsulates a reference to a user account.
    - Parameter rights: One of the  values that specifies the type of operation associated with the access rule.
    - Parameter flags: One of the  values that specifies when to perform auditing.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, rights : dotnet.System.IO.Pipes.PipeAccessRights, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_Pipes_PipeAuditRule_ctor_0__3__IdentityReference_PipeAccessRights_AuditFlags(&__thrown, identity.get_handle(), rights.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.IO.Pipes.PipeAccessRights, System.Security.AccessControl.AuditFlags)
// docid: M:System.IO.Pipes.PipeAuditRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class for a named user account.

    - Parameter identity: The name of the user account.
    - Parameter rights: One of the  values that specifies the type of operation associated with the access rule.
    - Parameter flags: One of the  values that specifies when to perform auditing.
    */
    public init(identity : dotnet.System.String, rights : dotnet.System.IO.Pipes.PipeAccessRights, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_Pipes_PipeAuditRule_ctor_0__3__String_PipeAccessRights_AuditFlags(&__thrown, identity.get_handle(), rights.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.IO.Pipes.PipeAccessRights get_PipeAccessRights()
// docid: M:System.IO.Pipes.PipeAuditRule.get_PipeAccessRights
    public func get_PipeAccessRights() throws -> dotnet.System.IO.Pipes.PipeAccessRights {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeAuditRule_PipeAccessRights__get_PipeAccessRights_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Pipes.PipeAccessRights(val: __return);
        }
    }
    /**
    Gets the  flags that are associated with the current  object.

    */
    public var PipeAccessRights : dotnet.System.IO.Pipes.PipeAccessRights {
        get {
            return try! get_PipeAccessRights();
        }
    }
} // PipeAuditRule


// type: System.IO.Pipes.PipeSecurity
    /**
    Represents the access control and audit security for a pipe.

    */
open class PipeSecurity
    :
    dotnet.System.Security.AccessControl.NativeObjectSecurity
{
    open class override func get_type_handle() -> TypeHandle {
        return System_IO_Pipes_PipeSecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.IO.Pipes.PipeSecurity.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_Pipes_PipeSecurity_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter identityReference: The identity that the access rule applies to. It must be an object that can be cast as a  object.
    - Parameter accessMask: The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators
    - Parameter isInherited: 
         if this rule is inherited from a parent container; otherwise, .
    - Parameter inheritanceFlags: One of the  values that specifies the inheritance properties of the access rule.
    - Parameter propagationFlags: One of the  values that specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if  is set to .
    - Parameter type: Specifies the valid access control type.
    - Returns: The  object that this method creates.

    */
    open override func AccessRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws -> dotnet.System.Security.AccessControl.AccessRule {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeSecurity_AccessRule__AccessRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AccessControlType(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AccessRule(hndl : __return);
        }
    }
    // void AddAccessRule(System.IO.Pipes.PipeAccessRule)
// docid: M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)
    /**
    Adds an access rule to the Discretionary Access Control List (DACL) that is associated with the current  object.

    - Parameter rule: The access rule to add.
    */
    open func AddAccessRule(rule : dotnet.System.IO.Pipes.PipeAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipeSecurity_void__AddAccessRule_0__1__PipeAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAuditRule(System.IO.Pipes.PipeAuditRule)
// docid: M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)
    /**
    Adds an audit rule to the System Access Control List (SACL) that is associated with the current  object.

    - Parameter rule: The audit rule to add.
    */
    open func AddAuditRule(rule : dotnet.System.IO.Pipes.PipeAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipeSecurity_void__AddAuditRule_0__1__PipeAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class with the specified values.

    - Parameter identityReference: The identity that the access rule applies to. It must be an object that can be cast as a  object.
    - Parameter accessMask: The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators
    - Parameter isInherited: 
         if this rule is inherited from a parent container; otherwise, false.
    - Parameter inheritanceFlags: One of the  values that specifies the inheritance properties of the access rule.
    - Parameter propagationFlags: One of the  values that specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if  is set to .
    - Parameter flags: One of the  values that specifies the valid access control type.
    - Returns: The  object that this method creates.

    */
    open /* method final */ override func AuditRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws -> dotnet.System.Security.AccessControl.AuditRule {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeSecurity_AuditRule__AuditRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AuditFlags(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuditRule(hndl : __return);
        }
    }
    // bool RemoveAccessRule(System.IO.Pipes.PipeAccessRule)
// docid: M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)
    /**
    Removes an access rule from the Discretionary Access Control List (DACL) that is associated with the current  object.

    - Parameter rule: The access rule to remove.
    - Returns: 
         if the operation is successful; otherwise, .

    */
    open func RemoveAccessRule(rule : dotnet.System.IO.Pipes.PipeAccessRule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeSecurity_bool__RemoveAccessRule_0__1__PipeAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)
// docid: M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)
    /**
    Removes the specified access rule from the Discretionary Access Control List (DACL) that is associated with the current  object.

    - Parameter rule: The access rule to remove.
    */
    open func RemoveAccessRuleSpecific(rule : dotnet.System.IO.Pipes.PipeAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipeSecurity_void__RemoveAccessRuleSpecific_0__1__PipeAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool RemoveAuditRule(System.IO.Pipes.PipeAuditRule)
// docid: M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)
    /**
    Removes an audit rule from the System Access Control List (SACL) that is associated with the current  object.

    - Parameter rule: The audit rule to remove.
    - Returns: 
         if the audit rule was removed; otherwise, 

    */
    open func RemoveAuditRule(rule : dotnet.System.IO.Pipes.PipeAuditRule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeSecurity_bool__RemoveAuditRule_0__1__PipeAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)
// docid: M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)
    /**
    Removes all audit rules that have the same security identifier as the specified audit rule from the System Access Control List (SACL) that is associated with the current  object.

    - Parameter rule: The audit rule to remove.
    */
    open func RemoveAuditRuleAll(rule : dotnet.System.IO.Pipes.PipeAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipeSecurity_void__RemoveAuditRuleAll_0__1__PipeAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)
// docid: M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)
    /**
    Removes the specified audit rule from the System Access Control List (SACL) that is associated with the current  object.

    - Parameter rule: The audit rule to remove.
    */
    open func RemoveAuditRuleSpecific(rule : dotnet.System.IO.Pipes.PipeAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipeSecurity_void__RemoveAuditRuleSpecific_0__1__PipeAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ResetAccessRule(System.IO.Pipes.PipeAccessRule)
// docid: M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)
    /**
    Removes all access rules in the Discretionary Access Control List (DACL) that is associated with the current  object and then adds the specified access rule.

    - Parameter rule: The access rule to add.
    */
    open func ResetAccessRule(rule : dotnet.System.IO.Pipes.PipeAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipeSecurity_void__ResetAccessRule_0__1__PipeAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccessRule(System.IO.Pipes.PipeAccessRule)
// docid: M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)
    /**
    Sets an access rule in the Discretionary Access Control List (DACL) that is associated with the current  object.

    - Parameter rule: The rule to set.
    */
    open func SetAccessRule(rule : dotnet.System.IO.Pipes.PipeAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipeSecurity_void__SetAccessRule_0__1__PipeAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAuditRule(System.IO.Pipes.PipeAuditRule)
// docid: M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)
    /**
    Sets an audit rule in the System Access Control List (SACL) that is associated with the current  object.

    - Parameter rule: The rule to set.
    */
    open func SetAuditRule(rule : dotnet.System.IO.Pipes.PipeAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipeSecurity_void__SetAuditRule_0__1__PipeAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_AccessRightType()
// docid: M:System.IO.Pipes.PipeSecurity.get_AccessRightType
    open override func get_AccessRightType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeSecurity_Type__get_AccessRightType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AccessRuleType()
// docid: M:System.IO.Pipes.PipeSecurity.get_AccessRuleType
    open override func get_AccessRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeSecurity_Type__get_AccessRuleType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AuditRuleType()
// docid: M:System.IO.Pipes.PipeSecurity.get_AuditRuleType
    open override func get_AuditRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipeSecurity_Type__get_AuditRuleType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the  of the securable object that is associated with the current  object.

    */
    open override var AccessRightType : dotnet.System.Type_ {
        get {
            return try! get_AccessRightType();
        }
    }
    /**
    Gets the  of the object that is associated with the access rules of the current  object.

    */
    open override var AccessRuleType : dotnet.System.Type_ {
        get {
            return try! get_AccessRuleType();
        }
    }
    /**
    Gets the  object associated with the audit rules of the current  object.

    */
    open override var AuditRuleType : dotnet.System.Type_ {
        get {
            return try! get_AuditRuleType();
        }
    }
} // PipeSecurity


// type: System.IO.Pipes.PipesAclExtensions
public struct PipesAclExtensions {
    // System.IO.Pipes.PipeSecurity GetAccessControl(System.IO.Pipes.PipeStream)
// docid: M:System.IO.Pipes.PipesAclExtensions.GetAccessControl(System.IO.Pipes.PipeStream)
    /**
    Returns the security information of a pipe stream.

    - Parameter stream: The existing pipe stream from which to obtain the security information.
    - Returns: The security descriptors of all the access control sections of the pipe stream.

    */
    public static func GetAccessControl(stream : dotnet.System.IO.Pipes.PipeStream) throws -> dotnet.System.IO.Pipes.PipeSecurity {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_Pipes_PipesAclExtensions_PipeSecurity__GetAccessControl_0__1__PipeStream(&__thrown, stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.Pipes.PipeSecurity(hndl : __return);
        }
    }
    // void SetAccessControl(System.IO.Pipes.PipeStream, System.IO.Pipes.PipeSecurity)
// docid: M:System.IO.Pipes.PipesAclExtensions.SetAccessControl(System.IO.Pipes.PipeStream,System.IO.Pipes.PipeSecurity)
    /**
    Changes the security attributes of an existing pipe stream.

    - Parameter stream: An existing pipe stream.
    - Parameter pipeSecurity: The security information to apply to the pipe stream.
    */
    public static func SetAccessControl(stream : dotnet.System.IO.Pipes.PipeStream, pipeSecurity : dotnet.System.IO.Pipes.PipeSecurity) throws {
        var __thrown : NullableHandle = nil;
        System_IO_Pipes_PipesAclExtensions_void__SetAccessControl_0__2__PipeStream_PipeSecurity(&__thrown, stream.get_handle(), pipeSecurity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // PipesAclExtensions


}



// EXTENSION METHOD System.IO.Pipes.PipeSecurity GetAccessControl(System.IO.Pipes.PipeStream)
extension dotnet.System.IO.Pipes.PipeStream {
    public func GetAccessControl() throws -> dotnet.System.IO.Pipes.PipeSecurity {
        return try dotnet.System.IO.Pipes.PipesAclExtensions.GetAccessControl(stream: self);
    }
}

// EXTENSION METHOD void SetAccessControl(System.IO.Pipes.PipeStream, System.IO.Pipes.PipeSecurity)
extension dotnet.System.IO.Pipes.PipeStream {
    public func SetAccessControl(pipeSecurity : dotnet.System.IO.Pipes.PipeSecurity) throws {
        try dotnet.System.IO.Pipes.PipesAclExtensions.SetAccessControl(stream: self, pipeSecurity: pipeSecurity);
    }
}

