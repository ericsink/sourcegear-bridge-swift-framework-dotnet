// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// Microsoft
// Microsoft.Win32
// Microsoft.Win32.SafeHandles
extension Microsoft.Win32.SafeHandles {
// type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
    /**
    Provides a safe handle to a Windows thread or process access token. For more information, see Access Tokens.

    */
public final class SafeAccessTokenHandle
    :
    dotnet.System.Runtime.InteropServices.SafeHandle
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_SafeHandles_SafeAccessTokenHandle_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Win32_SafeHandles_SafeAccessTokenHandle_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IntPtr)
// docid: M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)
    /**
    Initializes a new instance of the  class.

    - Parameter handle: An  object that represents the pre-existing handle to use. Using  returns an invalid handle.
    */
    public init(handle : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Win32_SafeHandles_SafeAccessTokenHandle_ctor_0__1__IntPtr(&__thrown, handle.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] Microsoft.Win32.SafeHandles.SafeAccessTokenHandle get_InvalidHandle()
// docid: M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.get_InvalidHandle
    public class func get_InvalidHandle() throws -> dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_SafeHandles_SafeAccessTokenHandle_SafeAccessTokenHandle__get_InvalidHandle_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsInvalid()
// docid: M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.get_IsInvalid
    public override func get_IsInvalid() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_SafeHandles_SafeAccessTokenHandle_bool__get_IsInvalid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Returns an invalid handle by instantiating a  object with .

    */
    public static var InvalidHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle {
        get {
            return try! get_InvalidHandle();
        }
    }
    /**
    Gets a value that indicates whether the handle is invalid.

    */
    public override var IsInvalid : Bool {
        get {
            return try! get_IsInvalid();
        }
    }
} // SafeAccessTokenHandle


}



// System
// System.Security
// System.Security.Principal
extension System.Security.Principal {
// type: System.Security.Principal.IdentityNotMappedException
    /**
    Represents an exception for a principal whose identity could not be mapped to a known identity.

    */
public final class IdentityNotMappedException
    :
    dotnet.System.SystemException
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_IdentityNotMappedException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Principal.IdentityNotMappedException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_IdentityNotMappedException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Principal.IdentityNotMappedException.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using the specified error message.

    - Parameter message: The error message that explains the reason for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_IdentityNotMappedException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Security.Principal.IdentityNotMappedException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class by using the specified error message and inner exception.

    - Parameter message: The error message that explains the reason for the exception.
    - Parameter inner: The exception that is the cause of the current exception. If  is not null, the current exception is raised in a  block that handles the inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_IdentityNotMappedException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Security.Principal.IdentityNotMappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Gets serialization information with the data needed to create an instance of this  object.

    - Parameter serializationInfo: The object that holds the serialized object data about the exception being thrown.
    - Parameter streamingContext: The object that contains contextual information about the source or destination.
    */
    public func GetObjectData(serializationInfo : dotnet.System.Runtime.Serialization.SerializationInfo, streamingContext : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Principal_IdentityNotMappedException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), serializationInfo.get_handle(), streamingContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Principal.IdentityReferenceCollection get_UnmappedIdentities()
// docid: M:System.Security.Principal.IdentityNotMappedException.get_UnmappedIdentities
    public func get_UnmappedIdentities() throws -> dotnet.System.Security.Principal.IdentityReferenceCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityNotMappedException_IdentityReferenceCollection__get_UnmappedIdentities_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IdentityReferenceCollection(hndl : __return);
        }
    }
    /**
    Represents the collection of unmapped identities for an  exception.

    */
    public var UnmappedIdentities : dotnet.System.Security.Principal.IdentityReferenceCollection {
        get {
            return try! get_UnmappedIdentities();
        }
    }
} // IdentityNotMappedException


// type: System.Security.Principal.IdentityReference
    /**
    Represents an identity and is the base class for the  and  classes. This class does not provide a public constructor, and therefore cannot be inherited.

    */
open class IdentityReference
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_IdentityReference_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(System.Object)
// docid: M:System.Security.Principal.IdentityReference.Equals(System.Object)
    /**
    Returns a value that indicates whether the specified object equals this instance of the  class.

    - Parameter o: An object to compare with this  instance, or a null reference.
    - Returns: 
         if  is an object with the same underlying type and value as this  instance; otherwise, .

    */
    open func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReference_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Security.Principal.IdentityReference.GetHashCode
    /**
    Serves as a hash function for .  is suitable for use in hashing algorithms and data structures like a hash table.

    - Returns: The hash code for this  object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReference_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsValidTargetType(System.Type)
// docid: M:System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)
    /**
    Returns a value that indicates whether the specified type is a valid translation type for the  class.

    - Parameter targetType: The type being queried for validity to serve as a conversion from . The following target types are valid:  
  
 
    - Returns: 
         if  is a valid translation type for the  class; otherwise, .

    */
    open func IsValidTargetType(targetType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReference_bool__IsValidTargetType_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Security.Principal.IdentityReference, System.Security.Principal.IdentityReference)
// docid: M:System.Security.Principal.IdentityReference.op_Equality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)
    /**
    Compares two  objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the  property or if they are both .

    - Parameter left: The left  operand to use for the equality comparison. This parameter can be .
    - Parameter right: The right  operand to use for the equality comparison. This parameter can be .
    - Returns: 
         if  and  are equal; otherwise, .

    */
    open class func op_Equality(left : Optional<dotnet.System.Security.Principal.IdentityReference>, right : Optional<dotnet.System.Security.Principal.IdentityReference>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReference_bool__op_Equality_0__2__IdentityReference_IdentityReference(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Security.Principal.IdentityReference, System.Security.Principal.IdentityReference)
// docid: M:System.Security.Principal.IdentityReference.op_Inequality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)
    /**
    Compares two  objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the  property or if one of the objects is  and the other is not.

    - Parameter left: The left  operand to use for the inequality comparison. This parameter can be .
    - Parameter right: The right  operand to use for the inequality comparison. This parameter can be .
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    open class func op_Inequality(left : Optional<dotnet.System.Security.Principal.IdentityReference>, right : Optional<dotnet.System.Security.Principal.IdentityReference>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReference_bool__op_Inequality_0__2__IdentityReference_IdentityReference(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Security.Principal.IdentityReference.ToString
    /**
    Returns the string representation of the identity represented by the  object.

    - Returns: The identity in string format.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReference_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Security.Principal.IdentityReference Translate(System.Type)
// docid: M:System.Security.Principal.IdentityReference.Translate(System.Type)
    /**
    Translates the account name represented by the  object into another -derived type.

    - Parameter targetType: The target type for the conversion from .
    - Returns: The converted identity.

    */
    open func Translate(targetType : dotnet.System.Type_) throws -> dotnet.System.Security.Principal.IdentityReference {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReference_IdentityReference__Translate_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IdentityReference(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Security.Principal.IdentityReference.get_Value
    open func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReference_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the string value of the identity represented by the  object.

    */
    open var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // IdentityReference


// type: System.Security.Principal.IdentityReferenceCollection
    /**
    Represents a collection of  objects and provides a means of converting sets of -derived objects to -derived types.

    */
open class IdentityReferenceCollection
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_IdentityReferenceCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Principal.IdentityReferenceCollection.#ctor
    /**
    Initializes a new instance of the  class with zero items in the collection.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_IdentityReferenceCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Security.Principal.IdentityReferenceCollection.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class by using the specified initial size.

    - Parameter capacity: The initial number of items in the collection. The value of  is a hint only; it is not necessarily the maximum number of items created.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_IdentityReferenceCollection_ctor_0__1__i32(&__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Security.Principal.IdentityReference)
// docid: M:System.Security.Principal.IdentityReferenceCollection.Add(System.Security.Principal.IdentityReference)
    /**
    Adds an  object to the  collection.

    - Parameter identity: The  object to add to the collection.
    */
    open /* method final */ func Add(identity : dotnet.System.Security.Principal.IdentityReference) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Principal_IdentityReferenceCollection_void__Add_0__1__IdentityReference(&__thrown, self.get_handle(), identity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Security.Principal.IdentityReferenceCollection.Clear
    /**
    Clears all  objects from the  collection.

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Principal_IdentityReferenceCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Security.Principal.IdentityReference)
// docid: M:System.Security.Principal.IdentityReferenceCollection.Contains(System.Security.Principal.IdentityReference)
    /**
    Indicates whether the  collection contains the specified  object.

    - Parameter identity: The  object to check for.
    - Returns: 
         if the collection contains the specified object.

    */
    open /* method final */ func Contains(identity : dotnet.System.Security.Principal.IdentityReference) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReferenceCollection_bool__Contains_0__1__IdentityReference(&__thrown, self.get_handle(), identity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Security.Principal.IdentityReference[], System.Int32)
// docid: M:System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference[],System.Int32)
    /**
    Copies the  collection to an  array, starting at the specified index.

    - Parameter array: An  array object to which the  collection is to be copied.
    - Parameter offset: The zero-based index in  where the  collection is to be copied.
    */
    open /* method final */ func CopyTo(array : dotnet.System_Arr<dotnet.System.Security.Principal.IdentityReference>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Principal_IdentityReferenceCollection_void__CopyTo_0__2__IdentityReferenceArray_i32(&__thrown, self.get_handle(), array.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Generic.IEnumerator<System.Security.Principal.IdentityReference> GetEnumerator()
// docid: M:System.Security.Principal.IdentityReferenceCollection.GetEnumerator
    /**
    Gets an enumerator that can be used to iterate through the  collection.

    - Returns: An enumerator for the  collection.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Security.Principal.IdentityReference> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReferenceCollection_System_Collections_Generic_IEnumerator_System_Security_Principal_IdentityReference___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.Security.Principal.IdentityReference)
// docid: M:System.Security.Principal.IdentityReferenceCollection.Remove(System.Security.Principal.IdentityReference)
    /**
    Removes the specified  object from the collection.

    - Parameter identity: The  object to remove.
    - Returns: 
         if the specified object was removed from the collection.

    */
    open /* method final */ func Remove(identity : dotnet.System.Security.Principal.IdentityReference) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReferenceCollection_bool__Remove_0__1__IdentityReference(&__thrown, self.get_handle(), identity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Security.Principal.IdentityReferenceCollection Translate(System.Type)
// docid: M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type)
    /**
    Converts the objects in the collection to the specified type. Calling this method is the same as calling  with the second parameter set to , which means that exceptions will not be thrown for items that fail conversion.

    - Parameter targetType: The type to which items in the collection are being converted.
    - Returns: A  collection that represents the converted contents of the original collection.

    */
    open func Translate(targetType : dotnet.System.Type_) throws -> dotnet.System.Security.Principal.IdentityReferenceCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReferenceCollection_IdentityReferenceCollection__Translate_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IdentityReferenceCollection(hndl : __return);
        }
    }
    // System.Security.Principal.IdentityReferenceCollection Translate(System.Type, bool)
// docid: M:System.Security.Principal.IdentityReferenceCollection.Translate(System.Type,System.Boolean)
    /**
    Converts the objects in the collection to the specified type and uses the specified fault tolerance to handle or ignore errors associated with a type not having a conversion mapping.

    - Parameter targetType: The type to which items in the collection are being converted.
    - Parameter forceSuccess: A Boolean value that determines how conversion errors are handled.  
  
 If  is , conversion errors due to a mapping not being found for the translation result in a failed conversion and exceptions being thrown.  
  
 If  is , types that failed to convert due to a mapping not being found for the translation are copied without being converted into the collection being returned.
    - Returns: A  collection that represents the converted contents of the original collection.

    */
    open func Translate(targetType : dotnet.System.Type_, forceSuccess : Bool) throws -> dotnet.System.Security.Principal.IdentityReferenceCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReferenceCollection_IdentityReferenceCollection__Translate_0__2__Type_bool(&__thrown, self.get_handle(), targetType.get_handle(), Swift.Int32(forceSuccess ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IdentityReferenceCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Principal.IdentityReferenceCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReferenceCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Security.Principal.IdentityReference get_Item(System.Int32)
// docid: M:System.Security.Principal.IdentityReferenceCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Security.Principal.IdentityReference {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_IdentityReferenceCollection_IdentityReference__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IdentityReference(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Security.Principal.IdentityReference)
// docid: M:System.Security.Principal.IdentityReferenceCollection.set_Item(System.Int32,System.Security.Principal.IdentityReference)
    open func set_Item(index : Swift.Int32, value : dotnet.System.Security.Principal.IdentityReference) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Principal_IdentityReferenceCollection_void__set_Item_0__2__i32_IdentityReference(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of items in the  collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // IdentityReferenceCollection


// type: System.Security.Principal.NTAccount
    /**
    Represents a user or group account.

    */
public final class NTAccount
    :
    dotnet.System.Security.Principal.IdentityReference
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_NTAccount_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Security.Principal.NTAccount.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using the specified name.

    - Parameter name: The name used to create the  object. This parameter cannot be  or an empty string.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_NTAccount_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Security.Principal.NTAccount.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class by using the specified domain name and account name.

    - Parameter domainName: The name of the domain. This parameter can be  or an empty string. Domain names that are null values are treated like an empty string.
    - Parameter accountName: The name of the account. This parameter cannot be  or an empty string.
    */
    public init(domainName : dotnet.System.String, accountName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_NTAccount_ctor_0__2__String_String(&__thrown, domainName.get_handle(), accountName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Security.Principal.NTAccount.Equals(System.Object)
    /**
    Returns a value that indicates whether this  object is equal to a specified object.

    - Parameter o: An object to compare with this  object, or .
    - Returns: 
         if  is an object with the same underlying type and value as this  object; otherwise, .

    */
    public override func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_NTAccount_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Security.Principal.NTAccount.GetHashCode
    /**
    Serves as a hash function for the current  object. The  method is suitable for hashing algorithms and data structures like a hash table.

    - Returns: A hash value for the current  object.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_NTAccount_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsValidTargetType(System.Type)
// docid: M:System.Security.Principal.NTAccount.IsValidTargetType(System.Type)
    /**
    Returns a value that indicates whether the specified type is a valid translation type for the  class.

    - Parameter targetType: The type being queried for validity to serve as a conversion from . The following target types are valid:  
  
 -   
  
 - 
    - Returns: 
         if  is a valid translation type for the  class; otherwise .

    */
    public override func IsValidTargetType(targetType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_NTAccount_bool__IsValidTargetType_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Security.Principal.NTAccount, System.Security.Principal.NTAccount)
// docid: M:System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
    /**
    Compares two  objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the  property or if they are both .

    - Parameter left: The left operand to use for the equality comparison. This parameter can be .
    - Parameter right: The right operand to use for the equality comparison. This parameter can be .
    - Returns: 
         if  and  are equal; otherwise .

    */
    public class func op_Equality(left : Optional<dotnet.System.Security.Principal.NTAccount>, right : Optional<dotnet.System.Security.Principal.NTAccount>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_NTAccount_bool__op_Equality_0__2__NTAccount_NTAccount(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Security.Principal.NTAccount, System.Security.Principal.NTAccount)
// docid: M:System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)
    /**
    Compares two  objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the  property or if one of the objects is  and the other is not.

    - Parameter left: The left operand to use for the inequality comparison. This parameter can be .
    - Parameter right: The right operand to use for the inequality comparison. This parameter can be .
    - Returns: 
         if  and  are not equal; otherwise .

    */
    public class func op_Inequality(left : Optional<dotnet.System.Security.Principal.NTAccount>, right : Optional<dotnet.System.Security.Principal.NTAccount>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_NTAccount_bool__op_Inequality_0__2__NTAccount_NTAccount(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Security.Principal.NTAccount.ToString
    /**
    Returns the account name, in Domain \ Account format, for the account represented by the  object.

    - Returns: The account name, in Domain \ Account format.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_NTAccount_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Security.Principal.IdentityReference Translate(System.Type)
// docid: M:System.Security.Principal.NTAccount.Translate(System.Type)
    /**
    Translates the account name represented by the  object into another -derived type.

    - Parameter targetType: The target type for the conversion from . The target type must be a type that is considered valid by the  method.
    - Returns: The converted identity.

    */
    public override func Translate(targetType : dotnet.System.Type_) throws -> dotnet.System.Security.Principal.IdentityReference {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_NTAccount_IdentityReference__Translate_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IdentityReference(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Security.Principal.NTAccount.get_Value
    public override func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_NTAccount_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Returns a string representation of this  object.

    */
    public override var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // NTAccount


// type: System.Security.Principal.SecurityIdentifier
    /**
    Represents a security identifier (SID) and provides marshaling and comparison operations for SIDs.

    */
public final class SecurityIdentifier
    :
    dotnet.System.Security.Principal.IdentityReference
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_SecurityIdentifier_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 MaxBinaryLength
    /**
    Returns the maximum size, in bytes, of the binary representation of the security identifier.

    */
    public class var MaxBinaryLength : Swift.Int32 {
        get {
        let __return = System_Security_Principal_SecurityIdentifier_get_MaxBinaryLength();
            return __return;
        }
    }
    // static field: System.Int32 MinBinaryLength
    /**
    Returns the minimum size, in bytes, of the binary representation of the security identifier.

    */
    public class var MinBinaryLength : Swift.Int32 {
        get {
        let __return = System_Security_Principal_SecurityIdentifier_get_MinBinaryLength();
            return __return;
        }
    }
    // .ctor(System.Byte[], System.Int32)
// docid: M:System.Security.Principal.SecurityIdentifier.#ctor(System.Byte[],System.Int32)
    /**
    Initializes a new instance of the  class by using a specified binary representation of a security identifier (SID).

    - Parameter binaryForm: The byte array that represents the SID.
    - Parameter offset: The byte offset to use as the starting index in .
    */
    public init(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_SecurityIdentifier_ctor_0__2__u8Array_i32(&__thrown, binaryForm.get_handle(), offset);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IntPtr)
// docid: M:System.Security.Principal.SecurityIdentifier.#ctor(System.IntPtr)
    /**
    Initializes a new instance of the  class by using an integer that represents the binary form of a security identifier (SID).

    - Parameter binaryForm: An integer that represents the binary form of a SID.
    */
    public init(binaryForm : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_SecurityIdentifier_ctor_0__1__IntPtr(&__thrown, binaryForm.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.WellKnownSidType, System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.Principal.SecurityIdentifier.#ctor(System.Security.Principal.WellKnownSidType,System.Security.Principal.SecurityIdentifier)
    /**
    Initializes a new instance of the  class by using the specified well known security identifier (SID) type and domain SID.

    - Parameter sidType: One of the enumeration values. This value must not be .
    - Parameter domainSid: The domain SID. This value is required for the following  values. This parameter is ignored for any other  values.  
  
 -   
  
 -   
  
 -   
  
 -   
  
 -   
  
 -   
  
 -   
  
 -   
  
 -   
  
 -   
  
 -   
  
 -   
  
 - 
    */
    public init(sidType : dotnet.System.Security.Principal.WellKnownSidType, domainSid : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_SecurityIdentifier_ctor_0__2__WellKnownSidType_SecurityIdentifier(&__thrown, sidType.get_value(), domainSid?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Principal.SecurityIdentifier.#ctor(System.String)
    /**
    Initializes a new instance of the  class by using the specified security identifier (SID) in Security Descriptor Definition Language (SDDL) format.

    - Parameter sddlForm: SDDL string for the SID used to create the  object.
    */
    public init(sddlForm : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_SecurityIdentifier_ctor_0__1__String(&__thrown, sddlForm.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 CompareTo(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.Principal.SecurityIdentifier.CompareTo(System.Security.Principal.SecurityIdentifier)
    /**
    Compares the current  object with the specified  object.

    - Parameter sid: The object to compare with the current object.
    - Returns: A signed number indicating the relative values of this instance and .  
  
  Return Value Description Less than zero This instance is less than . Zero This instance is equal to . Greater than zero This instance is greater than .

    */
    public func CompareTo(sid : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_i32__CompareTo_0__1__SecurityIdentifier(&__thrown, self.get_handle(), sid?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Security.Principal.SecurityIdentifier.Equals(System.Object)
    /**
    Returns a value that indicates whether this  object is equal to a specified object.

    - Parameter o: An object to compare with this  object, or .
    - Returns: 
         if  is an object with the same underlying type and value as this  object; otherwise, .

    */
    public override func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.Principal.SecurityIdentifier.Equals(System.Security.Principal.SecurityIdentifier)
    /**
    Indicates whether the specified  object is equal to the current  object.

    - Parameter sid: The object to compare with the current object.
    - Returns: 
         if the value of  is equal to the value of the current  object.

    */
    public func Equals(sid : dotnet.System.Security.Principal.SecurityIdentifier) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_bool__Equals_0__1__SecurityIdentifier(&__thrown, self.get_handle(), sid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void GetBinaryForm(System.Byte[], System.Int32)
// docid: M:System.Security.Principal.SecurityIdentifier.GetBinaryForm(System.Byte[],System.Int32)
    /**
    Copies the binary representation of the specified security identifier (SID) represented by the  class to a byte array.

    - Parameter binaryForm: The byte array to receive the copied SID.
    - Parameter offset: The byte offset to use as the starting index in .
    */
    public func GetBinaryForm(binaryForm : dotnet.System_Arr<Swift.UInt8>, offset : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Principal_SecurityIdentifier_void__GetBinaryForm_0__2__u8Array_i32(&__thrown, self.get_handle(), binaryForm.get_handle(), offset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Security.Principal.SecurityIdentifier.GetHashCode
    /**
    Serves as a hash function for the current  object. The  method is suitable for hashing algorithms and data structures like a hash table.

    - Returns: A hash value for the current  object.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsAccountSid()
// docid: M:System.Security.Principal.SecurityIdentifier.IsAccountSid
    /**
    Returns a value that indicates whether the security identifier (SID) represented by this  object is a valid Windows account SID.

    - Returns: 
         if the SID represented by this  object is a valid Windows account SID; otherwise, .

    */
    public func IsAccountSid() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_bool__IsAccountSid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.Principal.SecurityIdentifier.IsEqualDomainSid(System.Security.Principal.SecurityIdentifier)
    /**
    Returns a value that indicates whether the security identifier (SID) represented by this  object is from the same domain as the specified SID.

    - Parameter sid: The SID to compare with this  object.
    - Returns: 
         if the SID represented by this  object is in the same domain as the  SID; otherwise, .

    */
    public func IsEqualDomainSid(sid : dotnet.System.Security.Principal.SecurityIdentifier) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_bool__IsEqualDomainSid_0__1__SecurityIdentifier(&__thrown, self.get_handle(), sid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValidTargetType(System.Type)
// docid: M:System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type)
    /**
    Returns a value that indicates whether the specified type is a valid translation type for the  class.

    - Parameter targetType: The type being queried for validity to serve as a conversion from . The following target types are valid:  
  
 -   
  
 - 
    - Returns: 
         if  is a valid translation type for the  class; otherwise, .

    */
    public override func IsValidTargetType(targetType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_bool__IsValidTargetType_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsWellKnown(System.Security.Principal.WellKnownSidType)
// docid: M:System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType)
    /**
    Returns a value that indicates whether the  object matches the specified well known security identifier (SID) type.

    - Parameter type: A value to compare with the  object.
    - Returns: 
         if  is the SID type for the  object; otherwise, .

    */
    public func IsWellKnown(type : dotnet.System.Security.Principal.WellKnownSidType) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_bool__IsWellKnown_0__1__WellKnownSidType(&__thrown, self.get_handle(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.Principal.SecurityIdentifier.op_Equality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)
    /**
    Compares two  objects to determine whether they are equal. They are considered equal if they have the same canonical representation as the one returned by the  property or if they are both .

    - Parameter left: The left operand to use for the equality comparison. This parameter can be .
    - Parameter right: The right operand to use for the equality comparison. This parameter can be .
    - Returns: 
         if  and  are equal; otherwise, .

    */
    public class func op_Equality(left : Optional<dotnet.System.Security.Principal.SecurityIdentifier>, right : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_bool__op_Equality_0__2__SecurityIdentifier_SecurityIdentifier(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.Principal.SecurityIdentifier.op_Inequality(System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier)
    /**
    Compares two  objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the  property or if one of the objects is  and the other is not.

    - Parameter left: The left operand to use for the inequality comparison. This parameter can be .
    - Parameter right: The right operand to use for the inequality comparison. This parameter can be .
    - Returns: 
         if  and  are not equal; otherwise, .

    */
    public class func op_Inequality(left : Optional<dotnet.System.Security.Principal.SecurityIdentifier>, right : Optional<dotnet.System.Security.Principal.SecurityIdentifier>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_bool__op_Inequality_0__2__SecurityIdentifier_SecurityIdentifier(&__thrown, left?.get_handle() ?? nil, right?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Security.Principal.SecurityIdentifier.ToString
    /**
    Returns the security identifier (SID), in Security Descriptor Definition Language (SDDL) format, for the account represented by the  object. An example of the SDDL format is S-1-5-9.

    - Returns: The SID, in SDDL format, for the account represented by the  object.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Security.Principal.IdentityReference Translate(System.Type)
// docid: M:System.Security.Principal.SecurityIdentifier.Translate(System.Type)
    /**
    Translates the account name represented by the  object into another -derived type.

    - Parameter targetType: The target type for the conversion from . The target type must be a type that is considered valid by the  method.
    - Returns: The converted identity.

    */
    public override func Translate(targetType : dotnet.System.Type_) throws -> dotnet.System.Security.Principal.IdentityReference {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_IdentityReference__Translate_0__1__Type(&__thrown, self.get_handle(), targetType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IdentityReference(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_AccountDomainSid()
// docid: M:System.Security.Principal.SecurityIdentifier.get_AccountDomainSid
    public func get_AccountDomainSid() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_SecurityIdentifier__get_AccountDomainSid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Int32 get_BinaryLength()
// docid: M:System.Security.Principal.SecurityIdentifier.get_BinaryLength
    public func get_BinaryLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_i32__get_BinaryLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Security.Principal.SecurityIdentifier.get_Value
    public override func get_Value() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_SecurityIdentifier_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Returns the account domain security identifier (SID) portion from the SID represented by the  object if the SID represents a Windows account SID. If the SID does not represent a Windows account SID, this property returns .

    */
    public var AccountDomainSid : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_AccountDomainSid();
        }
    }
    /**
    Returns the length, in bytes, of the security identifier (SID) represented by the  object.

    */
    public var BinaryLength : Swift.Int32 {
        get {
            return try! get_BinaryLength();
        }
    }
    /**
    Returns an uppercase Security Descriptor Definition Language (SDDL) string for the security identifier (SID) represented by this  object.

    */
    public override var Value : dotnet.System.String {
        get {
            return try! get_Value();
        }
    }
} // SecurityIdentifier


// type: System.Security.Principal.TokenAccessLevels
    /**
    Defines the privileges of the user account associated with the access token.

    */
public struct TokenAccessLevels : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_Principal_TokenAccessLevels_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.Principal.TokenAccessLevels AssignPrimary
    /**
    The user can attach a primary token to a process.

    */
    public static var AssignPrimary : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_AssignPrimary());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels Duplicate
    /**
    The user can duplicate the token.

    */
    public static var Duplicate : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_Duplicate());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels Impersonate
    /**
    The user can impersonate a client.

    */
    public static var Impersonate : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_Impersonate());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels Query
    /**
    The user can query the token.

    */
    public static var Query : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_Query());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels QuerySource
    /**
    The user can query the source of the token.

    */
    public static var QuerySource : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_QuerySource());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels AdjustPrivileges
    /**
    The user can enable or disable privileges in the token.

    */
    public static var AdjustPrivileges : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_AdjustPrivileges());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels AdjustGroups
    /**
    The user can change the attributes of the groups in the token.

    */
    public static var AdjustGroups : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_AdjustGroups());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels AdjustDefault
    /**
    The user can change the default owner, primary group, or discretionary access control list (DACL) of the token.

    */
    public static var AdjustDefault : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_AdjustDefault());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels AdjustSessionId
    /**
    The user can adjust the session identifier of the token.

    */
    public static var AdjustSessionId : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_AdjustSessionId());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels Read
    /**
    The user has standard read rights and the  privilege for the token.

    */
    public static var Read : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_Read());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels Write
    /**
    The user has standard write rights and the ,  and  privileges for the token.

    */
    public static var Write : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_Write());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels AllAccess
    /**
    The user has all possible access to the token.

    */
    public static var AllAccess : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_AllAccess());
            return __return;
        }
    }
    // static field: System.Security.Principal.TokenAccessLevels MaximumAllowed
    /**
    The maximum value that can be assigned for the  enumeration.

    */
    public static var MaximumAllowed : dotnet.System.Security.Principal.TokenAccessLevels {
        get {
        let __return = dotnet.System.Security.Principal.TokenAccessLevels(val: System_Security_Principal_TokenAccessLevels_get_MaximumAllowed());
            return __return;
        }
    }
} // TokenAccessLevels


// type: System.Security.Principal.WellKnownSidType
    /**
    Defines a set of commonly used security identifiers (SIDs).

    */
public struct WellKnownSidType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_Principal_WellKnownSidType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.Principal.WellKnownSidType NullSid
    /**
    Indicates a null SID.

    */
    public static var NullSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_NullSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WorldSid
    /**
    Indicates a SID that matches everyone.

    */
    public static var WorldSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WorldSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType LocalSid
    /**
    Indicates a local SID.

    */
    public static var LocalSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_LocalSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType CreatorOwnerSid
    /**
    Indicates a SID that matches the owner or creator of an object.

    */
    public static var CreatorOwnerSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_CreatorOwnerSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType CreatorGroupSid
    /**
    Indicates a SID that matches the creator group of an object.

    */
    public static var CreatorGroupSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_CreatorGroupSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType CreatorOwnerServerSid
    /**
    Indicates a creator owner server SID.

    */
    public static var CreatorOwnerServerSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_CreatorOwnerServerSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType CreatorGroupServerSid
    /**
    Indicates a creator group server SID.

    */
    public static var CreatorGroupServerSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_CreatorGroupServerSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType NTAuthoritySid
    /**
    Indicates a SID for the Windows NT authority.

    */
    public static var NTAuthoritySid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_NTAuthoritySid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType DialupSid
    /**
    Indicates a SID for a dial-up account.

    */
    public static var DialupSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_DialupSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType NetworkSid
    /**
    Indicates a SID for a network account. This SID is added to the process of a token when it logs on across a network.

    */
    public static var NetworkSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_NetworkSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BatchSid
    /**
    Indicates a SID for a batch process. This SID is added to the process of a token when it logs on as a batch job.

    */
    public static var BatchSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BatchSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType InteractiveSid
    /**
    Indicates a SID for an interactive account. This SID is added to the process of a token when it logs on interactively.

    */
    public static var InteractiveSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_InteractiveSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType ServiceSid
    /**
    Indicates a SID for a service. This SID is added to the process of a token when it logs on as a service.

    */
    public static var ServiceSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_ServiceSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AnonymousSid
    /**
    Indicates a SID for the anonymous account.

    */
    public static var AnonymousSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AnonymousSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType ProxySid
    /**
    Indicates a proxy SID.

    */
    public static var ProxySid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_ProxySid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType EnterpriseControllersSid
    /**
    Indicates a SID for an enterprise controller.

    */
    public static var EnterpriseControllersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_EnterpriseControllersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType SelfSid
    /**
    Indicates a SID for self.

    */
    public static var SelfSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_SelfSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AuthenticatedUserSid
    /**
    Indicates a SID for an authenticated user.

    */
    public static var AuthenticatedUserSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AuthenticatedUserSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType RestrictedCodeSid
    /**
    Indicates a SID for restricted code.

    */
    public static var RestrictedCodeSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_RestrictedCodeSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType TerminalServerSid
    /**
    Indicates a SID that matches a terminal server account.

    */
    public static var TerminalServerSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_TerminalServerSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType RemoteLogonIdSid
    /**
    Indicates a SID that matches remote logons.

    */
    public static var RemoteLogonIdSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_RemoteLogonIdSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType LogonIdsSid
    /**
    Indicates a SID that matches logon IDs.

    */
    public static var LogonIdsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_LogonIdsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType LocalSystemSid
    /**
    Indicates a SID that matches the local system.

    */
    public static var LocalSystemSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_LocalSystemSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType LocalServiceSid
    /**
    Indicates a SID that matches a local service.

    */
    public static var LocalServiceSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_LocalServiceSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType NetworkServiceSid
    /**
    Indicates a SID that matches a network service.

    */
    public static var NetworkServiceSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_NetworkServiceSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinDomainSid
    /**
    Indicates a SID that matches the domain account.

    */
    public static var BuiltinDomainSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinDomainSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinAdministratorsSid
    /**
    Indicates a SID that matches the administrator account.

    */
    public static var BuiltinAdministratorsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinAdministratorsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinUsersSid
    /**
    Indicates a SID that matches built-in user accounts.

    */
    public static var BuiltinUsersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinUsersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinGuestsSid
    /**
    Indicates a SID that matches the guest account.

    */
    public static var BuiltinGuestsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinGuestsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinPowerUsersSid
    /**
    Indicates a SID that matches the power users group.

    */
    public static var BuiltinPowerUsersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinPowerUsersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinAccountOperatorsSid
    /**
    Indicates a SID that matches the account operators account.

    */
    public static var BuiltinAccountOperatorsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinAccountOperatorsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinSystemOperatorsSid
    /**
    Indicates a SID that matches the system operators group.

    */
    public static var BuiltinSystemOperatorsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinSystemOperatorsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinPrintOperatorsSid
    /**
    Indicates a SID that matches the print operators group.

    */
    public static var BuiltinPrintOperatorsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinPrintOperatorsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinBackupOperatorsSid
    /**
    Indicates a SID that matches the backup operators group.

    */
    public static var BuiltinBackupOperatorsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinBackupOperatorsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinReplicatorSid
    /**
    Indicates a SID that matches the replicator account.

    */
    public static var BuiltinReplicatorSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinReplicatorSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinPreWindows2000CompatibleAccessSid
    /**
    Indicates a SID that matches pre-Windows 2000 compatible accounts.

    */
    public static var BuiltinPreWindows2000CompatibleAccessSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinPreWindows2000CompatibleAccessSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinRemoteDesktopUsersSid
    /**
    Indicates a SID that matches remote desktop users.

    */
    public static var BuiltinRemoteDesktopUsersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinRemoteDesktopUsersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinNetworkConfigurationOperatorsSid
    /**
    Indicates a SID that matches the network operators group.

    */
    public static var BuiltinNetworkConfigurationOperatorsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinNetworkConfigurationOperatorsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountAdministratorSid
    /**
    Indicates a SID that matches the account administrators group.

    */
    public static var AccountAdministratorSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountAdministratorSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountGuestSid
    /**
    Indicates a SID that matches the account guest group.

    */
    public static var AccountGuestSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountGuestSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountKrbtgtSid
    /**
    Indicates a SID that matches the account Kerberos target group.

    */
    public static var AccountKrbtgtSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountKrbtgtSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountDomainAdminsSid
    /**
    Indicates a SID that matches the account domain administrator group.

    */
    public static var AccountDomainAdminsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountDomainAdminsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountDomainUsersSid
    /**
    Indicates a SID that matches the account domain users group.

    */
    public static var AccountDomainUsersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountDomainUsersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountDomainGuestsSid
    /**
    Indicates a SID that matches the account domain guests group.

    */
    public static var AccountDomainGuestsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountDomainGuestsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountComputersSid
    /**
    Indicates a SID that matches the account computer group.

    */
    public static var AccountComputersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountComputersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountControllersSid
    /**
    Indicates a SID that matches the account controller group.

    */
    public static var AccountControllersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountControllersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountCertAdminsSid
    /**
    Indicates a SID that matches the certificate administrators group.

    */
    public static var AccountCertAdminsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountCertAdminsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountSchemaAdminsSid
    /**
    Indicates a SID that matches the schema administrators group.

    */
    public static var AccountSchemaAdminsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountSchemaAdminsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountEnterpriseAdminsSid
    /**
    Indicates a SID that matches the enterprise administrators group.

    */
    public static var AccountEnterpriseAdminsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountEnterpriseAdminsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountPolicyAdminsSid
    /**
    Indicates a SID that matches the policy administrators group.

    */
    public static var AccountPolicyAdminsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountPolicyAdminsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType AccountRasAndIasServersSid
    /**
    Indicates a SID that matches the RAS and IAS server account.

    */
    public static var AccountRasAndIasServersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_AccountRasAndIasServersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType NtlmAuthenticationSid
    /**
    Indicates a SID present when the Microsoft NTLM authentication package authenticated the client.

    */
    public static var NtlmAuthenticationSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_NtlmAuthenticationSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType DigestAuthenticationSid
    /**
    Indicates a SID present when the Microsoft Digest authentication package authenticated the client.

    */
    public static var DigestAuthenticationSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_DigestAuthenticationSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType SChannelAuthenticationSid
    /**
    Indicates a SID present when the Secure Channel (SSL/TLS) authentication package authenticated the client.

    */
    public static var SChannelAuthenticationSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_SChannelAuthenticationSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType ThisOrganizationSid
    /**
    Indicates a SID present when the user authenticated from within the forest or across a trust that does not have the selective authentication option enabled. If this SID is present, then  cannot be present.

    */
    public static var ThisOrganizationSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_ThisOrganizationSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType OtherOrganizationSid
    /**
    Indicates a SID present when the user authenticated across a forest with the selective authentication option enabled. If this SID is present, then  cannot be present.

    */
    public static var OtherOrganizationSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_OtherOrganizationSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinIncomingForestTrustBuildersSid
    /**
    Indicates a SID that allows a user to create incoming forest trusts. It is added to the token of users who are a member of the Incoming Forest Trust Builders built-in group in the root domain of the forest.

    */
    public static var BuiltinIncomingForestTrustBuildersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinIncomingForestTrustBuildersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinPerformanceMonitoringUsersSid
    /**
    Indicates a SID that matches the group of users that have remote access to schedule logging of performance counters on this computer.

    */
    public static var BuiltinPerformanceMonitoringUsersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinPerformanceMonitoringUsersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinPerformanceLoggingUsersSid
    /**
    Indicates a SID that matches the group of users that have remote access to monitor the computer.

    */
    public static var BuiltinPerformanceLoggingUsersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinPerformanceLoggingUsersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType BuiltinAuthorizationAccessSid
    /**
    Indicates a SID that matches the Windows Authorization Access group.

    */
    public static var BuiltinAuthorizationAccessSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_BuiltinAuthorizationAccessSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType MaxDefined
    /**
    Indicates the maximum defined SID in the  enumeration.

    */
    public static var MaxDefined : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_MaxDefined());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinBuiltinTerminalServerLicenseServersSid
    /**
    Indicates a SID is present in a server that can issue Terminal Server licenses.

    */
    public static var WinBuiltinTerminalServerLicenseServersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinBuiltinTerminalServerLicenseServersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinBuiltinDCOMUsersSid
    /**
    Indicates a SID that matches the distributed COM user group.

    */
    public static var WinBuiltinDCOMUsersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinBuiltinDCOMUsersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinBuiltinIUsersSid
    /**
    Indicates a SID that matches the Internet built-in user group.

    */
    public static var WinBuiltinIUsersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinBuiltinIUsersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinIUserSid
    /**
    Indicates a SID that matches the Internet user group.

    */
    public static var WinIUserSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinIUserSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinBuiltinCryptoOperatorsSid
    /**
    Indicates a SID that allows a user to use cryptographic operations. It is added to the token of users who are a member of the CryptoOperators built-in group.

    */
    public static var WinBuiltinCryptoOperatorsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinBuiltinCryptoOperatorsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinUntrustedLabelSid
    /**
    Indicates a SID that matches an untrusted label.

    */
    public static var WinUntrustedLabelSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinUntrustedLabelSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinLowLabelSid
    /**
    Indicates a SID that matches an low level of trust label.

    */
    public static var WinLowLabelSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinLowLabelSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinMediumLabelSid
    /**
    Indicates a SID that matches an medium level of trust label.

    */
    public static var WinMediumLabelSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinMediumLabelSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinHighLabelSid
    /**
    Indicates a SID that matches a high level of trust label.

    */
    public static var WinHighLabelSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinHighLabelSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinSystemLabelSid
    /**
    Indicates a SID that matches a system label.

    */
    public static var WinSystemLabelSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinSystemLabelSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinWriteRestrictedCodeSid
    /**
    Indicates a SID that matches a write restricted code group.

    */
    public static var WinWriteRestrictedCodeSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinWriteRestrictedCodeSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCreatorOwnerRightsSid
    /**
    Indicates a SID that matches a creator and owner rights group.

    */
    public static var WinCreatorOwnerRightsSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCreatorOwnerRightsSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCacheablePrincipalsGroupSid
    /**
    Indicates a SID that matches a cacheable principals group.

    */
    public static var WinCacheablePrincipalsGroupSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCacheablePrincipalsGroupSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinNonCacheablePrincipalsGroupSid
    /**
    Indicates a SID that matches a non-cacheable principals group.

    */
    public static var WinNonCacheablePrincipalsGroupSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinNonCacheablePrincipalsGroupSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinEnterpriseReadonlyControllersSid
    /**
    Indicates a SID that matches an enterprise wide read-only controllers group.

    */
    public static var WinEnterpriseReadonlyControllersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinEnterpriseReadonlyControllersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinAccountReadonlyControllersSid
    /**
    Indicates a SID that matches an account read-only controllers group.

    */
    public static var WinAccountReadonlyControllersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinAccountReadonlyControllersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinBuiltinEventLogReadersGroup
    /**
    Indicates a SID that matches an event log readers group.

    */
    public static var WinBuiltinEventLogReadersGroup : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinBuiltinEventLogReadersGroup());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinNewEnterpriseReadonlyControllersSid
    /**
    Indicates a SID that matches a read-only enterprise domain controller.

    */
    public static var WinNewEnterpriseReadonlyControllersSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinNewEnterpriseReadonlyControllersSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinBuiltinCertSvcDComAccessGroup
    /**
    Indicates a SID that matches the built-in DCOM certification services access group.

    */
    public static var WinBuiltinCertSvcDComAccessGroup : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinBuiltinCertSvcDComAccessGroup());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinMediumPlusLabelSid
    /**
    Indicates a SID that matches the medium plus integrity label.

    */
    public static var WinMediumPlusLabelSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinMediumPlusLabelSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinLocalLogonSid
    /**
    Indicates a SID that matches a local logon group.

    */
    public static var WinLocalLogonSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinLocalLogonSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinConsoleLogonSid
    /**
    Indicates a SID that matches a console logon group.

    */
    public static var WinConsoleLogonSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinConsoleLogonSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinThisOrganizationCertificateSid
    /**
    Indicates a SID that matches a certificate for the given organization.

    */
    public static var WinThisOrganizationCertificateSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinThisOrganizationCertificateSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinApplicationPackageAuthoritySid
    /**
    Indicates a SID that matches the application package authority.

    */
    public static var WinApplicationPackageAuthoritySid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinApplicationPackageAuthoritySid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinBuiltinAnyPackageSid
    /**
    Indicates a SID that applies to all app containers.

    */
    public static var WinBuiltinAnyPackageSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinBuiltinAnyPackageSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityInternetClientSid
    /**
    Indicates a SID of Internet client capability for app containers.

    */
    public static var WinCapabilityInternetClientSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityInternetClientSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityInternetClientServerSid
    /**
    Indicates a SID of Internet client and server capability for app containers.

    */
    public static var WinCapabilityInternetClientServerSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityInternetClientServerSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityPrivateNetworkClientServerSid
    /**
    Indicates a SID of private network client and server capability for app containers.

    */
    public static var WinCapabilityPrivateNetworkClientServerSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityPrivateNetworkClientServerSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityPicturesLibrarySid
    /**
    Indicates a SID for pictures library capability for app containers.

    */
    public static var WinCapabilityPicturesLibrarySid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityPicturesLibrarySid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityVideosLibrarySid
    /**
    Indicates a SID for videos library capability for app containers.

    */
    public static var WinCapabilityVideosLibrarySid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityVideosLibrarySid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityMusicLibrarySid
    /**
    Indicates a SID for music library capability for app containers.

    */
    public static var WinCapabilityMusicLibrarySid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityMusicLibrarySid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityDocumentsLibrarySid
    /**
    Indicates a SID for documents library capability for app containers.

    */
    public static var WinCapabilityDocumentsLibrarySid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityDocumentsLibrarySid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilitySharedUserCertificatesSid
    /**
    Indicates a SID for shared user certificates capability for app containers.

    */
    public static var WinCapabilitySharedUserCertificatesSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilitySharedUserCertificatesSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityEnterpriseAuthenticationSid
    /**
    Indicates a SID for Windows credentials capability for app containers.

    */
    public static var WinCapabilityEnterpriseAuthenticationSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityEnterpriseAuthenticationSid());
            return __return;
        }
    }
    // static field: System.Security.Principal.WellKnownSidType WinCapabilityRemovableStorageSid
    /**
    Indicates a SID for removable storage capability for app containers.

    */
    public static var WinCapabilityRemovableStorageSid : dotnet.System.Security.Principal.WellKnownSidType {
        get {
        let __return = dotnet.System.Security.Principal.WellKnownSidType(val: System_Security_Principal_WellKnownSidType_get_WinCapabilityRemovableStorageSid());
            return __return;
        }
    }
} // WellKnownSidType


// type: System.Security.Principal.WindowsAccountType
    /**
    Specifies the type of Windows account used.

    */
public struct WindowsAccountType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_Principal_WindowsAccountType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.Principal.WindowsAccountType Normal
    /**
    A standard user account.

    */
    public static var Normal : dotnet.System.Security.Principal.WindowsAccountType {
        get {
        let __return = dotnet.System.Security.Principal.WindowsAccountType(val: System_Security_Principal_WindowsAccountType_get_Normal());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsAccountType Guest
    /**
    A Windows guest account.

    */
    public static var Guest : dotnet.System.Security.Principal.WindowsAccountType {
        get {
        let __return = dotnet.System.Security.Principal.WindowsAccountType(val: System_Security_Principal_WindowsAccountType_get_Guest());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsAccountType System
    /**
    A Windows system account.

    */
    public static var System : dotnet.System.Security.Principal.WindowsAccountType {
        get {
        let __return = dotnet.System.Security.Principal.WindowsAccountType(val: System_Security_Principal_WindowsAccountType_get_System());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsAccountType Anonymous
    /**
    An anonymous account.

    */
    public static var Anonymous : dotnet.System.Security.Principal.WindowsAccountType {
        get {
        let __return = dotnet.System.Security.Principal.WindowsAccountType(val: System_Security_Principal_WindowsAccountType_get_Anonymous());
            return __return;
        }
    }
} // WindowsAccountType


// type: System.Security.Principal.WindowsBuiltInRole
    /**
    Specifies common roles to be used with .

    */
public struct WindowsBuiltInRole : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_Principal_WindowsBuiltInRole_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.Principal.WindowsBuiltInRole Administrator
    /**
    Administrators have complete and unrestricted access to the computer or domain.

    */
    public static var Administrator : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_Administrator());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsBuiltInRole User
    /**
    Users are prevented from making accidental or intentional system-wide changes. Thus, users can run certified applications, but not most legacy applications.

    */
    public static var User : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_User());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsBuiltInRole Guest
    /**
    Guests are more restricted than users.

    */
    public static var Guest : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_Guest());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsBuiltInRole PowerUser
    /**
    Power users possess most administrative permissions with some restrictions. Thus, power users can run legacy applications, in addition to certified applications.

    */
    public static var PowerUser : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_PowerUser());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsBuiltInRole AccountOperator
    /**
    Account operators manage the user accounts on a computer or domain.

    */
    public static var AccountOperator : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_AccountOperator());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsBuiltInRole SystemOperator
    /**
    System operators manage a particular computer.

    */
    public static var SystemOperator : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_SystemOperator());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsBuiltInRole PrintOperator
    /**
    Print operators can take control of a printer.

    */
    public static var PrintOperator : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_PrintOperator());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsBuiltInRole BackupOperator
    /**
    Backup operators can override security restrictions for the sole purpose of backing up or restoring files.

    */
    public static var BackupOperator : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_BackupOperator());
            return __return;
        }
    }
    // static field: System.Security.Principal.WindowsBuiltInRole Replicator
    /**
    Replicators support file replication in a domain.

    */
    public static var Replicator : dotnet.System.Security.Principal.WindowsBuiltInRole {
        get {
        let __return = dotnet.System.Security.Principal.WindowsBuiltInRole(val: System_Security_Principal_WindowsBuiltInRole_get_Replicator());
            return __return;
        }
    }
} // WindowsBuiltInRole


// type: System.Security.Principal.WindowsIdentity
    /**
    Represents a Windows user.

    */
open class WindowsIdentity
    :
    dotnet.System.Security.Claims.ClaimsIdentity,
    System_IDisposable,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_WindowsIdentity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.String DefaultIssuer
    /**
    Identifies the name of the default  issuer.

    */
    open class override var DefaultIssuer : dotnet.System.String {
        get {
        let __return = dotnet.System.String(hndl: System_Security_Principal_WindowsIdentity_get_DefaultIssuer());
            return __return;
        }
    }
    // .ctor(System.IntPtr)
// docid: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
    /**
    Initializes a new instance of the  class for the user represented by the specified Windows account token.

    - Parameter userToken: The account token for the user on whose behalf the code is running.
    */
    public init(userToken : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_WindowsIdentity_ctor_0__1__IntPtr(&__thrown, userToken.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IntPtr, System.String)
// docid: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
    /**
    Initializes a new instance of the  class for the user represented by the specified Windows account token and the specified authentication type.

    - Parameter userToken: The account token for the user on whose behalf the code is running.
    - Parameter type: (Informational use only.) The type of authentication used to identify the user.
    */
    public init(userToken : dotnet.System.IntPtr, type : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_WindowsIdentity_ctor_0__2__IntPtr_String(&__thrown, userToken.get_value(), type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IntPtr, System.String, System.Security.Principal.WindowsAccountType)
// docid: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
    /**
    Initializes a new instance of the  class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type.

    - Parameter userToken: The account token for the user on whose behalf the code is running.
    - Parameter type: (Informational use only.) The type of authentication used to identify the user.
    - Parameter acctType: One of the enumeration values.
    */
    public init(userToken : dotnet.System.IntPtr, type : dotnet.System.String, acctType : dotnet.System.Security.Principal.WindowsAccountType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_WindowsIdentity_ctor_0__3__IntPtr_String_WindowsAccountType(&__thrown, userToken.get_value(), type.get_handle(), acctType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IntPtr, System.String, System.Security.Principal.WindowsAccountType, bool)
// docid: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
    /**
    Initializes a new instance of the  class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status.

    - Parameter userToken: The account token for the user on whose behalf the code is running.
    - Parameter type: (Informational use only.) The type of authentication used to identify the user.
    - Parameter acctType: One of the enumeration values.
    - Parameter isAuthenticated: 
         to indicate that the user is authenticated; otherwise, .
    */
    public init(userToken : dotnet.System.IntPtr, type : dotnet.System.String, acctType : dotnet.System.Security.Principal.WindowsAccountType, isAuthenticated : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_WindowsIdentity_ctor_0__4__IntPtr_String_WindowsAccountType_bool(&__thrown, userToken.get_value(), type.get_handle(), acctType.get_value(), Swift.Int32(isAuthenticated ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Initializes a new instance of the  class for the user represented by information in a  stream.

    - Parameter info: The object containing the account information for the user.
    - Parameter context: An object that indicates the stream characteristics.
    */
    public init(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_WindowsIdentity_ctor_0__2__SerializationInfo_StreamingContext(&__thrown, info.get_handle(), context.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Principal.WindowsIdentity.#ctor(System.String)
    /**
    Initializes a new instance of the  class for the user represented by the specified User Principal Name (UPN).

    - Parameter sUserPrincipalName: The UPN for the user on whose behalf the code is running.
    */
    public init(sUserPrincipalName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_WindowsIdentity_ctor_0__1__String(&__thrown, sUserPrincipalName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Security.Claims.ClaimsIdentity Clone()
// docid: M:System.Security.Principal.WindowsIdentity.Clone
    /**
    Creates a new  object that is a copy of the current instance.

    - Returns: A copy of the current instance.

    */
    open override func Clone() throws -> dotnet.System.Security.Claims.ClaimsIdentity {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_ClaimsIdentity__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Claims.ClaimsIdentity(hndl : __return);
        }
    }
    // void Dispose()
// docid: M:System.Security.Principal.WindowsIdentity.Dispose
    /**
    Releases all resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Principal_WindowsIdentity_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.Principal.WindowsIdentity GetAnonymous()
// docid: M:System.Security.Principal.WindowsIdentity.GetAnonymous
    /**
    Returns a  object that you can use as a sentinel value in your code to represent an anonymous user. The property value does not represent the built-in anonymous identity used by the Windows operating system.

    - Returns: An object that represents an anonymous user.

    */
    open class func GetAnonymous() throws -> dotnet.System.Security.Principal.WindowsIdentity {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_WindowsIdentity__GetAnonymous_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.WindowsIdentity(hndl : __return);
        }
    }
    // System.Security.Principal.WindowsIdentity GetCurrent()
// docid: M:System.Security.Principal.WindowsIdentity.GetCurrent
    /**
    Returns a  object that represents the current Windows user.

    - Returns: An object that represents the current user.

    */
    open class func GetCurrent() throws -> dotnet.System.Security.Principal.WindowsIdentity {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_WindowsIdentity__GetCurrent_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.WindowsIdentity(hndl : __return);
        }
    }
    // System.Security.Principal.WindowsIdentity GetCurrent(bool)
// docid: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
    /**
    Returns a  object that represents the Windows identity for either the thread or the process, depending on the value of the  parameter.

    - Parameter ifImpersonating: 
         to return the  only if the thread is currently impersonating;  to return the  of the thread if it is impersonating or the  of the process if the thread is not currently impersonating.
    - Returns: An object that represents a Windows user.

    */
    open class func GetCurrent(ifImpersonating : Bool) throws -> Optional<dotnet.System.Security.Principal.WindowsIdentity> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_WindowsIdentity__GetCurrent_0__1__bool(&__thrown, Swift.Int32(ifImpersonating ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.WindowsIdentity(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Security.Principal.WindowsIdentity GetCurrent(System.Security.Principal.TokenAccessLevels)
// docid: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
    /**
    Returns a  object that represents the current Windows user, using the specified desired token access level.

    - Parameter desiredAccess: A bitwise combination of the enumeration values.
    - Returns: An object that represents the current user.

    */
    open class func GetCurrent(desiredAccess : dotnet.System.Security.Principal.TokenAccessLevels) throws -> dotnet.System.Security.Principal.WindowsIdentity {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_WindowsIdentity__GetCurrent_0__1__TokenAccessLevels(&__thrown, desiredAccess.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.WindowsIdentity(hndl : __return);
        }
    }
    // void RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Action)
// docid: M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
    /**
    Runs the specified action as the impersonated Windows identity. Instead of using an impersonated method call and running your function in , you can use  and provide your function directly as a parameter.

    - Parameter safeAccessTokenHandle: The SafeAccessTokenHandle of the impersonated Windows identity.
    - Parameter action: The System.Action to run.
    */
    open class func RunImpersonated(safeAccessTokenHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, action : dotnet.System.Action) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Principal_WindowsIdentity_void__RunImpersonated_0__2__SafeAccessTokenHandle_Action(&__thrown, safeAccessTokenHandle.get_handle(), action.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open class func RunImpersonated(safeAccessTokenHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, action : @escaping () throws -> Void) throws {
        let del_action = try dotnet.System.Action(action);
        return try RunImpersonated(safeAccessTokenHandle: safeAccessTokenHandle, action: del_action);
    }
    // System.Threading.Tasks.Task RunImpersonatedAsync(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func<System.Threading.Tasks.Task>)
// docid: M:System.Security.Principal.WindowsIdentity.RunImpersonatedAsync(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{System.Threading.Tasks.Task})
    /**
    Runs the specified asynchronous action as the impersonated Windows identity.

    - Parameter safeAccessTokenHandle: The handle of the impersonated Windows identity.
    - Parameter func: The function to run.
    - Returns: A task that represents the asynchronous operation of the provided .

    */
    open class func RunImpersonatedAsync(safeAccessTokenHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, func_ : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_Task__RunImpersonatedAsync_0__2__SafeAccessTokenHandle_System_Func_Task_(&__thrown, safeAccessTokenHandle.get_handle(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    open class func RunImpersonatedAsync(safeAccessTokenHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, func_ : @escaping () throws -> dotnet.System.Threading.Tasks.Task) throws -> dotnet.System.Threading.Tasks.Task {
        let del_func_ = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task>(func_);
        return try RunImpersonatedAsync(safeAccessTokenHandle: safeAccessTokenHandle, func_: del_func_);
    }
    // System.Threading.Tasks.Task<T> RunImpersonatedAsync<T>(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func<System.Threading.Tasks.Task<T>>)
// docid: M:System.Security.Principal.WindowsIdentity.RunImpersonatedAsync``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{System.Threading.Tasks.Task{``0}})
    /**
    Runs the specified asynchronous action as the impersonated Windows identity.

    - Parameter safeAccessTokenHandle: The handle of the impersonated Windows identity.
    - Parameter func: The function to run.
    - Returns: A task that represents the asynchronous operation of .

    */
    open class func RunImpersonatedAsync<UT : SGBridgeGenericValue>(safeAccessTokenHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, func_ : dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<UT>>) throws -> dotnet.System.Threading.Tasks.Task_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_System_Threading_Tasks_Task_UT___RunImpersonatedAsync_1__2__SafeAccessTokenHandle_System_Func_System_Threading_Tasks_System_Threading_Tasks_Task_UT__(UT.get_type_handle(), &__thrown, safeAccessTokenHandle.get_handle(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // delegate closure overload
    open class func RunImpersonatedAsync<UT : SGBridgeGenericValue>(safeAccessTokenHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, func_ : @escaping () throws -> dotnet.System.Threading.Tasks.Task_1<UT>) throws -> dotnet.System.Threading.Tasks.Task_1<UT> {
        let del_func_ = try dotnet.System.Func_1<dotnet.System.Threading.Tasks.Task_1<UT>>(func_);
        return try RunImpersonatedAsync(safeAccessTokenHandle: safeAccessTokenHandle, func_: del_func_);
    }
    // T RunImpersonated<T>(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func<T>)
// docid: M:System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
    /**
    Runs the specified function as the impersonated Windows identity. Instead of using an impersonated method call and running your function in , you can use  and provide your function directly as a parameter.

    - Parameter safeAccessTokenHandle: The SafeAccessTokenHandle of the impersonated Windows identity.
    - Parameter func: The System.Func to run.
    - Returns: The result of the function.

    */
    open class func RunImpersonated<UT : SGBridgeGenericValue>(safeAccessTokenHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, func_ : dotnet.System.Func_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_UT__RunImpersonated_1__2__SafeAccessTokenHandle_System_Func_UT_(UT.get_type_handle(), &__thrown, safeAccessTokenHandle.get_handle(), func_.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // delegate closure overload
    open class func RunImpersonated<UT : SGBridgeGenericValue>(safeAccessTokenHandle : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, func_ : @escaping () throws -> UT) throws -> UT {
        let del_func_ = try dotnet.System.Func_1<UT>(func_);
        return try RunImpersonated(safeAccessTokenHandle: safeAccessTokenHandle, func_: del_func_);
    }
    // [IsSpecialName] Microsoft.Win32.SafeHandles.SafeAccessTokenHandle get_AccessToken()
// docid: M:System.Security.Principal.WindowsIdentity.get_AccessToken
    open func get_AccessToken() throws -> dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_SafeAccessTokenHandle__get_AccessToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_AuthenticationType()
// docid: M:System.Security.Principal.WindowsIdentity.get_AuthenticationType
    open /* method final */ override func get_AuthenticationType() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_String__get_AuthenticationType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims()
// docid: M:System.Security.Principal.WindowsIdentity.get_Claims
    open override func get_Claims() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___get_Claims_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_DeviceClaims()
// docid: M:System.Security.Principal.WindowsIdentity.get_DeviceClaims
    open func get_DeviceClaims() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___get_DeviceClaims_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.IdentityReferenceCollection get_Groups()
// docid: M:System.Security.Principal.WindowsIdentity.get_Groups
    open func get_Groups() throws -> Optional<dotnet.System.Security.Principal.IdentityReferenceCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_IdentityReferenceCollection__get_Groups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.IdentityReferenceCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Security.Principal.TokenImpersonationLevel get_ImpersonationLevel()
// docid: M:System.Security.Principal.WindowsIdentity.get_ImpersonationLevel
    open func get_ImpersonationLevel() throws -> dotnet.System.Security.Principal.TokenImpersonationLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_TokenImpersonationLevel__get_ImpersonationLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.TokenImpersonationLevel(val: __return);
        }
    }
    // [IsSpecialName] bool get_IsAnonymous()
// docid: M:System.Security.Principal.WindowsIdentity.get_IsAnonymous
    open func get_IsAnonymous() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_bool__get_IsAnonymous_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsAuthenticated()
// docid: M:System.Security.Principal.WindowsIdentity.get_IsAuthenticated
    open override func get_IsAuthenticated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_bool__get_IsAuthenticated_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsGuest()
// docid: M:System.Security.Principal.WindowsIdentity.get_IsGuest
    open func get_IsGuest() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_bool__get_IsGuest_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSystem()
// docid: M:System.Security.Principal.WindowsIdentity.get_IsSystem
    open func get_IsSystem() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_bool__get_IsSystem_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Security.Principal.WindowsIdentity.get_Name
    open override func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_Owner()
// docid: M:System.Security.Principal.WindowsIdentity.get_Owner
    open func get_Owner() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_SecurityIdentifier__get_Owner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.IntPtr get_Token()
// docid: M:System.Security.Principal.WindowsIdentity.get_Token
    open func get_Token() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_IntPtr__get_Token_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.SecurityIdentifier get_User()
// docid: M:System.Security.Principal.WindowsIdentity.get_User
    open func get_User() throws -> Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_SecurityIdentifier__get_User_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Principal.SecurityIdentifier(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_UserClaims()
// docid: M:System.Security.Principal.WindowsIdentity.get_UserClaims
    open func get_UserClaims() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsIdentity_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___get_UserClaims_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    Gets this  for this  instance.

    */
    open var AccessToken : dotnet.Microsoft.Win32.SafeHandles.SafeAccessTokenHandle {
        get {
            return try! get_AccessToken();
        }
    }
    /**
    Gets the type of authentication used to identify the user.

    */
    public override var AuthenticationType : Optional<dotnet.System.String> {
        get {
            return try! get_AuthenticationType();
        }
    }
    /**
    Gets all claims for the user represented by this Windows identity.

    */
    open override var Claims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        get {
            return try! get_Claims();
        }
    }
    /**
    Gets claims that have the  property key.

    */
    open var DeviceClaims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        get {
            return try! get_DeviceClaims();
        }
    }
    /**
    Gets the groups the current Windows user belongs to.

    */
    open var Groups : Optional<dotnet.System.Security.Principal.IdentityReferenceCollection> {
        get {
            return try! get_Groups();
        }
    }
    /**
    Gets the impersonation level for the user.

    */
    open var ImpersonationLevel : dotnet.System.Security.Principal.TokenImpersonationLevel {
        get {
            return try! get_ImpersonationLevel();
        }
    }
    /**
    Gets a value that indicates whether the user account is identified as an anonymous account by the system.

    */
    open var IsAnonymous : Bool {
        get {
            return try! get_IsAnonymous();
        }
    }
    /**
    Gets a value indicating whether the user has been authenticated by Windows.

    */
    open override var IsAuthenticated : Bool {
        get {
            return try! get_IsAuthenticated();
        }
    }
    /**
    Gets a value indicating whether the user account is identified as a  account by the system.

    */
    open var IsGuest : Bool {
        get {
            return try! get_IsGuest();
        }
    }
    /**
    Gets a value indicating whether the user account is identified as a  account by the system.

    */
    open var IsSystem : Bool {
        get {
            return try! get_IsSystem();
        }
    }
    /**
    Gets the user's Windows logon name.

    */
    open override var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the security identifier (SID) for the token owner.

    */
    open var Owner : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_Owner();
        }
    }
    /**
    Gets the Windows account token for the user.

    */
    open var Token : dotnet.System.IntPtr {
        get {
            return try! get_Token();
        }
    }
    /**
    Gets the security identifier (SID) for the user.

    */
    open var User : Optional<dotnet.System.Security.Principal.SecurityIdentifier> {
        get {
            return try! get_User();
        }
    }
    /**
    Gets claims that have the  property key.

    */
    open var UserClaims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        get {
            return try! get_UserClaims();
        }
    }
} // WindowsIdentity


// type: System.Security.Principal.WindowsPrincipal
    /**
    Enables code to check the Windows group membership of a Windows user.

    */
open class WindowsPrincipal
    :
    dotnet.System.Security.Claims.ClaimsPrincipal
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Principal_WindowsPrincipal_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.WindowsIdentity)
// docid: M:System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)
    /**
    Initializes a new instance of the  class by using the specified  object.

    - Parameter ntIdentity: The object from which to construct the new instance of .
    */
    public init(ntIdentity : dotnet.System.Security.Principal.WindowsIdentity) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Principal_WindowsPrincipal_ctor_0__1__WindowsIdentity(&__thrown, ntIdentity.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool IsInRole(System.Int32)
// docid: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)
    /**
    Determines whether the current principal belongs to the Windows user group with the specified relative identifier (RID).

    - Parameter rid: The RID of the Windows user group in which to check for the principal's membership status.
    - Returns: 
         if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, .

    */
    open func IsInRole(rid : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsPrincipal_bool__IsInRole_0__1__i32(&__thrown, self.get_handle(), rid);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsInRole(System.Security.Principal.SecurityIdentifier)
// docid: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)
    /**
    Determines whether the current principal belongs to the Windows user group with the specified security identifier (SID).

    - Parameter sid: A  that uniquely identifies a Windows user group.
    - Returns: 
         if the current principal is a member of the specified Windows user group; otherwise, .

    */
    open func IsInRole(sid : dotnet.System.Security.Principal.SecurityIdentifier) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsPrincipal_bool__IsInRole_0__1__SecurityIdentifier(&__thrown, self.get_handle(), sid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsInRole(System.Security.Principal.WindowsBuiltInRole)
// docid: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)
    /**
    Determines whether the current principal belongs to the Windows user group with the specified .

    - Parameter role: One of the  values.
    - Returns: 
         if the current principal is a member of the specified Windows user group; otherwise, .

    */
    open func IsInRole(role : dotnet.System.Security.Principal.WindowsBuiltInRole) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsPrincipal_bool__IsInRole_0__1__WindowsBuiltInRole(&__thrown, self.get_handle(), role.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsInRole(System.String)
// docid: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)
    /**
    Determines whether the current principal belongs to the Windows user group with the specified name.

    - Parameter role: The name of the Windows user group for which to check membership.
    - Returns: 
         if the current principal is a member of the specified Windows user group; otherwise, .

    */
    open override func IsInRole(role : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsPrincipal_bool__IsInRole_0__1__String(&__thrown, self.get_handle(), role.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_DeviceClaims()
// docid: M:System.Security.Principal.WindowsPrincipal.get_DeviceClaims
    open func get_DeviceClaims() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsPrincipal_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___get_DeviceClaims_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Principal.IIdentity get_Identity()
// docid: M:System.Security.Principal.WindowsPrincipal.get_Identity
    open override func get_Identity() throws -> dotnet.System.Security.Principal.IIdentity {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsPrincipal_IIdentity__get_Identity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Principal.IIdentity(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_UserClaims()
// docid: M:System.Security.Principal.WindowsPrincipal.get_UserClaims
    open func get_UserClaims() throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Principal_WindowsPrincipal_System_Collections_Generic_IEnumerable_System_Security_Claims_Claim___get_UserClaims_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    /**
    Gets all Windows device claims from this principal.

    */
    open var DeviceClaims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        get {
            return try! get_DeviceClaims();
        }
    }
    /**
    Gets the identity of the current principal.

    */
    open override var Identity : dotnet.System.Security.Principal.IIdentity {
        get {
            return try! get_Identity();
        }
    }
    /**
    Gets all Windows user claims from this principal.

    */
    open var UserClaims : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Security.Claims.Claim> {
        get {
            return try! get_UserClaims();
        }
    }
} // WindowsPrincipal


}



