// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Security
// System.Security.Cryptography
extension System.Security.Cryptography {
// type: System.Security.Cryptography.AsnEncodedData
    /**
    Represents Abstract Syntax Notation One (ASN.1)-encoded data.

    */
open class AsnEncodedData
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_AsnEncodedData_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Byte[])
// docid: M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Byte[])
    /**
    Initializes a new instance of the  class using a byte array.

    - Parameter rawData: A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.
    */
    public init(rawData : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_AsnEncodedData_ctor_0__1__u8Array(&__thrown, rawData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.ReadOnlySpan<System.Byte>)
    // .ctor(System.Security.Cryptography.AsnEncodedData)
// docid: M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.AsnEncodedData)
    /**
    Initializes a new instance of the  class using an instance of the  class.

    - Parameter asnEncodedData: An instance of the  class.
    */
    public init(asnEncodedData : dotnet.System.Security.Cryptography.AsnEncodedData) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_AsnEncodedData_ctor_0__1__AsnEncodedData(&__thrown, asnEncodedData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.Oid, System.Byte[])
// docid: M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.Oid,System.Byte[])
    /**
    Initializes a new instance of the  class using an  object and a byte array.

    - Parameter oid: An  object.
    - Parameter rawData: A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.
    */
    public init(oid : Optional<dotnet.System.Security.Cryptography.Oid>, rawData : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_AsnEncodedData_ctor_0__2__Oid_u8Array(&__thrown, oid?.get_handle() ?? nil, rawData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.Security.Cryptography.Oid, System.ReadOnlySpan<System.Byte>)
    // .ctor(System.String, System.Byte[])
// docid: M:System.Security.Cryptography.AsnEncodedData.#ctor(System.String,System.Byte[])
    /**
    Initializes a new instance of the  class using a byte array.

    - Parameter oid: A string that represents  information.
    - Parameter rawData: A byte array that contains Abstract Syntax Notation One (ASN.1)-encoded data.
    */
    public init(oid : dotnet.System.String, rawData : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_AsnEncodedData_ctor_0__2__String_u8Array(&__thrown, oid.get_handle(), rawData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.String, System.ReadOnlySpan<System.Byte>)
    // void CopyFrom(System.Security.Cryptography.AsnEncodedData)
// docid: M:System.Security.Cryptography.AsnEncodedData.CopyFrom(System.Security.Cryptography.AsnEncodedData)
    /**
    Copies information from an  object.

    - Parameter asnEncodedData: The  object to base the new object on.
    */
    open func CopyFrom(asnEncodedData : dotnet.System.Security.Cryptography.AsnEncodedData) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_AsnEncodedData_void__CopyFrom_0__1__AsnEncodedData(&__thrown, self.get_handle(), asnEncodedData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String Format(bool)
// docid: M:System.Security.Cryptography.AsnEncodedData.Format(System.Boolean)
    /**
    Returns a formatted version of the Abstract Syntax Notation One (ASN.1)-encoded data as a string.

    - Parameter multiLine: 
         if the return string should contain carriage returns; otherwise, .
    - Returns: A formatted string that represents the Abstract Syntax Notation One (ASN.1)-encoded data.

    */
    open func Format(multiLine : Bool) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedData_String__Format_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(multiLine ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Oid get_Oid()
// docid: M:System.Security.Cryptography.AsnEncodedData.get_Oid
    open func get_Oid() throws -> Optional<dotnet.System.Security.Cryptography.Oid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedData_Oid__get_Oid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.Oid(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Oid(System.Security.Cryptography.Oid)
// docid: M:System.Security.Cryptography.AsnEncodedData.set_Oid(System.Security.Cryptography.Oid)
    open func set_Oid(value : Optional<dotnet.System.Security.Cryptography.Oid>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_AsnEncodedData_void__set_Oid_0__1__Oid(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Byte[] get_RawData()
// docid: M:System.Security.Cryptography.AsnEncodedData.get_RawData
    open func get_RawData() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedData_u8Array__get_RawData_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // [IsSpecialName] void set_RawData(System.Byte[])
// docid: M:System.Security.Cryptography.AsnEncodedData.set_RawData(System.Byte[])
    open func set_RawData(value : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_AsnEncodedData_void__set_RawData_0__1__u8Array(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  value for an  object.

    */
    open var Oid : Optional<dotnet.System.Security.Cryptography.Oid> {
        get {
            return try! get_Oid();
        }
        set(v) {
            return try! set_Oid(value: v!);
        }
    }
    /**
    Gets or sets the Abstract Syntax Notation One (ASN.1)-encoded data represented in a byte array.

    */
    open var RawData : dotnet.System_Arr<Swift.UInt8> {
        get {
            return try! get_RawData();
        }
        set(v) {
            return try! set_RawData(value: v);
        }
    }
} // AsnEncodedData


// type: System.Security.Cryptography.AsnEncodedDataCollection
    /**
    Represents a collection of  objects. This class cannot be inherited.

    */
public final class AsnEncodedDataCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_AsnEncodedDataCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_AsnEncodedDataCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.AsnEncodedData)
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.#ctor(System.Security.Cryptography.AsnEncodedData)
    /**
    Initializes a new instance of the  class and adds an  object to the collection.

    - Parameter asnEncodedData: The  object to add to the collection.
    */
    public init(asnEncodedData : dotnet.System.Security.Cryptography.AsnEncodedData) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_AsnEncodedDataCollection_ctor_0__1__AsnEncodedData(&__thrown, asnEncodedData.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Security.Cryptography.AsnEncodedData)
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.Add(System.Security.Cryptography.AsnEncodedData)
    /**
    Adds an  object to the  object.

    - Parameter asnEncodedData: The  object to add to the collection.
    - Returns: The index of the added  object.

    */
    public func Add(asnEncodedData : dotnet.System.Security.Cryptography.AsnEncodedData) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedDataCollection_i32__Add_0__1__AsnEncodedData(&__thrown, self.get_handle(), asnEncodedData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void CopyTo(System.Security.Cryptography.AsnEncodedData[], System.Int32)
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.CopyTo(System.Security.Cryptography.AsnEncodedData[],System.Int32)
    /**
    Copies the  object into an array.

    - Parameter array: The array that the  object is to be copied into.
    - Parameter index: The location where the copy operation starts.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Security.Cryptography.AsnEncodedData>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_AsnEncodedDataCollection_void__CopyTo_0__2__AsnEncodedDataArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.Cryptography.AsnEncodedDataEnumerator GetEnumerator()
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.GetEnumerator
    /**
    Returns an  object that can be used to navigate the  object.

    - Returns: An  object.

    */
    public func GetEnumerator() throws -> dotnet.System.Security.Cryptography.AsnEncodedDataEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedDataCollection_AsnEncodedDataEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.AsnEncodedDataEnumerator(hndl : __return);
        }
    }
    // void Remove(System.Security.Cryptography.AsnEncodedData)
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.Remove(System.Security.Cryptography.AsnEncodedData)
    /**
    Removes an  object from the  object.

    - Parameter asnEncodedData: The  object to remove.
    */
    public func Remove(asnEncodedData : dotnet.System.Security.Cryptography.AsnEncodedData) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_AsnEncodedDataCollection_void__Remove_0__1__AsnEncodedData(&__thrown, self.get_handle(), asnEncodedData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedDataCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.get_IsSynchronized
    public func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedDataCollection_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.get_SyncRoot
    public func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedDataCollection_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Cryptography.AsnEncodedData get_Item(System.Int32)
// docid: M:System.Security.Cryptography.AsnEncodedDataCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Security.Cryptography.AsnEncodedData {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedDataCollection_AsnEncodedData__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.AsnEncodedData(hndl : __return);
        }
    }
    /**
    Gets the number of  objects in a collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether access to the  object is thread safe.

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the  object.

    */
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // AsnEncodedDataCollection


// type: System.Security.Cryptography.AsnEncodedDataEnumerator
    /**
    Provides the ability to navigate through an  object. This class cannot be inherited.

    */
public final class AsnEncodedDataEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_AsnEncodedDataEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool MoveNext()
// docid: M:System.Security.Cryptography.AsnEncodedDataEnumerator.MoveNext
    /**
    Advances to the next  object in an  object.

    - Returns: 
        , if the enumerator was successfully advanced to the next element; , if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedDataEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Security.Cryptography.AsnEncodedDataEnumerator.Reset
    /**
    Sets an enumerator to its initial position.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_AsnEncodedDataEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.AsnEncodedData get_Current()
// docid: M:System.Security.Cryptography.AsnEncodedDataEnumerator.get_Current
    public func get_Current() throws -> dotnet.System.Security.Cryptography.AsnEncodedData {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_AsnEncodedDataEnumerator_AsnEncodedData__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.AsnEncodedData(hndl : __return);
        }
    }
    /**
    Gets the current  object in an  object.

    */
    public var Current : dotnet.System.Security.Cryptography.AsnEncodedData {
        get {
            return try! get_Current();
        }
    }
} // AsnEncodedDataEnumerator


// type: System.Security.Cryptography.FromBase64Transform
    /**
    Converts a  from base 64.

    */
open class FromBase64Transform
    :
    dotnet.System.Object,
    System_IDisposable,
    System_Security_Cryptography_ICryptoTransform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_FromBase64Transform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.FromBase64Transform.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_FromBase64Transform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.FromBase64TransformMode)
// docid: M:System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)
    /**
    Initializes a new instance of the  class with the specified transformation mode.

    - Parameter whitespaces: One of the  values.
    */
    public init(whitespaces : dotnet.System.Security.Cryptography.FromBase64TransformMode) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_FromBase64Transform_ctor_0__1__FromBase64TransformMode(&__thrown, whitespaces.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Security.Cryptography.FromBase64Transform.Clear
    /**
    Releases all resources used by the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_FromBase64Transform_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Security.Cryptography.FromBase64Transform.Dispose
    /**
    Releases all resources used by the current instance of the  class.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_FromBase64Transform_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Converts the specified region of the input byte array from base 64 and copies the result to the specified region of the output byte array.

    - Parameter inputBuffer: The input to compute from base 64.
    - Parameter inputOffset: The offset into the input byte array from which to begin using data.
    - Parameter inputCount: The number of bytes in the input byte array to use as data.
    - Parameter outputBuffer: The output to which to write the result.
    - Parameter outputOffset: The offset into the output byte array from which to begin writing data.
    - Returns: The number of bytes written.

    */
    open /* method final */ func TransformBlock(inputBuffer : dotnet.System_Arr<Swift.UInt8>, inputOffset : Swift.Int32, inputCount : Swift.Int32, outputBuffer : dotnet.System_Arr<Swift.UInt8>, outputOffset : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_FromBase64Transform_i32__TransformBlock_0__5__u8Array_i32_i32_u8Array_i32(&__thrown, self.get_handle(), inputBuffer.get_handle(), inputOffset, inputCount, outputBuffer.get_handle(), outputOffset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte[] TransformFinalBlock(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
    /**
    Converts the specified region of the specified byte array from base 64.

    - Parameter inputBuffer: The input to convert from base 64.
    - Parameter inputOffset: The offset into the byte array from which to begin using data.
    - Parameter inputCount: The number of bytes in the byte array to use as data.
    - Returns: The computed conversion.

    */
    open /* method final */ func TransformFinalBlock(inputBuffer : dotnet.System_Arr<Swift.UInt8>, inputOffset : Swift.Int32, inputCount : Swift.Int32) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_FromBase64Transform_u8Array__TransformFinalBlock_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), inputBuffer.get_handle(), inputOffset, inputCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReuseTransform()
// docid: M:System.Security.Cryptography.FromBase64Transform.get_CanReuseTransform
    open func get_CanReuseTransform() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_FromBase64Transform_bool__get_CanReuseTransform_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanTransformMultipleBlocks()
// docid: M:System.Security.Cryptography.FromBase64Transform.get_CanTransformMultipleBlocks
    open /* method final */ func get_CanTransformMultipleBlocks() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_FromBase64Transform_bool__get_CanTransformMultipleBlocks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_InputBlockSize()
// docid: M:System.Security.Cryptography.FromBase64Transform.get_InputBlockSize
    open /* method final */ func get_InputBlockSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_FromBase64Transform_i32__get_InputBlockSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_OutputBlockSize()
// docid: M:System.Security.Cryptography.FromBase64Transform.get_OutputBlockSize
    open /* method final */ func get_OutputBlockSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_FromBase64Transform_i32__get_OutputBlockSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets a value indicating whether the current transform can be reused.

    */
    open var CanReuseTransform : Bool {
        get {
            return try! get_CanReuseTransform();
        }
    }
    /**
    Gets a value that indicates whether multiple blocks can be transformed.

    */
    public var CanTransformMultipleBlocks : Bool {
        get {
            return try! get_CanTransformMultipleBlocks();
        }
    }
    /**
    Gets the input block size.

    */
    public var InputBlockSize : Swift.Int32 {
        get {
            return try! get_InputBlockSize();
        }
    }
    /**
    Gets the output block size.

    */
    public var OutputBlockSize : Swift.Int32 {
        get {
            return try! get_OutputBlockSize();
        }
    }
} // FromBase64Transform


// type: System.Security.Cryptography.FromBase64TransformMode
    /**
    Specifies whether white space should be ignored in the base 64 transformation.

    */
public struct FromBase64TransformMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_FromBase64TransformMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.Cryptography.FromBase64TransformMode IgnoreWhiteSpaces
    /**
    White space should be ignored.

    */
    public static var IgnoreWhiteSpaces : dotnet.System.Security.Cryptography.FromBase64TransformMode {
        get {
        let __return = dotnet.System.Security.Cryptography.FromBase64TransformMode(val: System_Security_Cryptography_FromBase64TransformMode_get_IgnoreWhiteSpaces());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.FromBase64TransformMode DoNotIgnoreWhiteSpaces
    /**
    White space should not be ignored.

    */
    public static var DoNotIgnoreWhiteSpaces : dotnet.System.Security.Cryptography.FromBase64TransformMode {
        get {
        let __return = dotnet.System.Security.Cryptography.FromBase64TransformMode(val: System_Security_Cryptography_FromBase64TransformMode_get_DoNotIgnoreWhiteSpaces());
            return __return;
        }
    }
} // FromBase64TransformMode


// type: System.Security.Cryptography.Oid
    /**
    Represents a cryptographic object identifier. This class cannot be inherited.

    */
public final class Oid
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_Oid_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.Oid.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Oid_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Cryptography.Oid)
// docid: M:System.Security.Cryptography.Oid.#ctor(System.Security.Cryptography.Oid)
    /**
    Initializes a new instance of the  class using the specified  object.

    - Parameter oid: The object identifier information to use to create the new object identifier.
    */
    public init(oid : dotnet.System.Security.Cryptography.Oid) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Oid_ctor_0__1__Oid(&__thrown, oid.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Security.Cryptography.Oid.#ctor(System.String)
    /**
    Initializes a new instance of the  class using a string value of an  object.

    - Parameter oid: An object identifier.
    */
    public init(oid : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Oid_ctor_0__1__String(&__thrown, oid.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Security.Cryptography.Oid.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class using the specified value and friendly name.

    - Parameter value: The dotted number of the identifier.
    - Parameter friendlyName: The friendly name of the identifier.
    */
    public init(value : Optional<dotnet.System.String>, friendlyName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_Oid_ctor_0__2__String_String(&__thrown, value?.get_handle() ?? nil, friendlyName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Security.Cryptography.Oid FromFriendlyName(System.String, System.Security.Cryptography.OidGroup)
// docid: M:System.Security.Cryptography.Oid.FromFriendlyName(System.String,System.Security.Cryptography.OidGroup)
    /**
    Creates an  object from an OID friendly name by searching the specified group.

    - Parameter friendlyName: The friendly name of the identifier.
    - Parameter group: The group to search in.
    - Returns: An object that represents the specified OID.

    */
    public class func FromFriendlyName(friendlyName : dotnet.System.String, group : dotnet.System.Security.Cryptography.OidGroup) throws -> dotnet.System.Security.Cryptography.Oid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Oid_Oid__FromFriendlyName_0__2__String_OidGroup(&__thrown, friendlyName.get_handle(), group.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.Oid(hndl : __return);
        }
    }
    // System.Security.Cryptography.Oid FromOidValue(System.String, System.Security.Cryptography.OidGroup)
// docid: M:System.Security.Cryptography.Oid.FromOidValue(System.String,System.Security.Cryptography.OidGroup)
    /**
    Creates an  object by using the specified OID value and group.

    - Parameter oidValue: The OID value.
    - Parameter group: The group to search in.
    - Returns: A new instance of an  object.

    */
    public class func FromOidValue(oidValue : dotnet.System.String, group : dotnet.System.Security.Cryptography.OidGroup) throws -> dotnet.System.Security.Cryptography.Oid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Oid_Oid__FromOidValue_0__2__String_OidGroup(&__thrown, oidValue.get_handle(), group.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.Oid(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FriendlyName()
// docid: M:System.Security.Cryptography.Oid.get_FriendlyName
    public func get_FriendlyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Oid_String__get_FriendlyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_FriendlyName(System.String)
// docid: M:System.Security.Cryptography.Oid.set_FriendlyName(System.String)
    public func set_FriendlyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Oid_void__set_FriendlyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Value()
// docid: M:System.Security.Cryptography.Oid.get_Value
    public func get_Value() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_Oid_String__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.String)
// docid: M:System.Security.Cryptography.Oid.set_Value(System.String)
    public func set_Value(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_Oid_void__set_Value_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the friendly name of the identifier.

    */
    public var FriendlyName : Optional<dotnet.System.String> {
        get {
            return try! get_FriendlyName();
        }
        set(v) {
            return try! set_FriendlyName(value: v!);
        }
    }
    /**
    Gets or sets the dotted number of the identifier.

    */
    public var Value : Optional<dotnet.System.String> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // Oid


// type: System.Security.Cryptography.OidCollection
    /**
    Represents a collection of  objects. This class cannot be inherited.

    */
public final class OidCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_OidCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.OidCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_OidCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Security.Cryptography.Oid)
// docid: M:System.Security.Cryptography.OidCollection.Add(System.Security.Cryptography.Oid)
    /**
    Adds an  object to the  object.

    - Parameter oid: The  object to add to the collection.
    - Returns: The index of the added  object.

    */
    public func Add(oid : dotnet.System.Security.Cryptography.Oid) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidCollection_i32__Add_0__1__Oid(&__thrown, self.get_handle(), oid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void CopyTo(System.Security.Cryptography.Oid[], System.Int32)
// docid: M:System.Security.Cryptography.OidCollection.CopyTo(System.Security.Cryptography.Oid[],System.Int32)
    /**
    Copies the  object into an array.

    - Parameter array: The array to copy the  object into.
    - Parameter index: The location where the copy operation starts.
    */
    public func CopyTo(array : dotnet.System_Arr<dotnet.System.Security.Cryptography.Oid>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_OidCollection_void__CopyTo_0__2__OidArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.Cryptography.OidEnumerator GetEnumerator()
// docid: M:System.Security.Cryptography.OidCollection.GetEnumerator
    /**
    Returns an  object that can be used to navigate the  object.

    - Returns: An  object.

    */
    public func GetEnumerator() throws -> dotnet.System.Security.Cryptography.OidEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidCollection_OidEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.OidEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Security.Cryptography.OidCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Security.Cryptography.OidCollection.get_IsSynchronized
    public func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidCollection_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Security.Cryptography.OidCollection.get_SyncRoot
    public func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidCollection_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Oid get_Item(System.Int32)
// docid: M:System.Security.Cryptography.OidCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Security.Cryptography.Oid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidCollection_Oid__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.Oid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Oid get_Item(System.String)
// docid: M:System.Security.Cryptography.OidCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(oid : dotnet.System.String) throws -> Optional<dotnet.System.Security.Cryptography.Oid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidCollection_Oid__get_Item_0__1__String(&__thrown, self.get_handle(), oid.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.Cryptography.Oid(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of  objects in a collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value that indicates whether access to the  object is thread safe.

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the  object.

    */
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // OidCollection


// type: System.Security.Cryptography.OidEnumerator
    /**
    Provides the ability to navigate through an  object. This class cannot be inherited.

    */
public final class OidEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerator
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_OidEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool MoveNext()
// docid: M:System.Security.Cryptography.OidEnumerator.MoveNext
    /**
    Advances to the next  object in an  object.

    - Returns: 
        , if the enumerator was successfully advanced to the next element; , if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Security.Cryptography.OidEnumerator.Reset
    /**
    Sets an enumerator to its initial position.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_OidEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.Cryptography.Oid get_Current()
// docid: M:System.Security.Cryptography.OidEnumerator.get_Current
    public func get_Current() throws -> dotnet.System.Security.Cryptography.Oid {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_OidEnumerator_Oid__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.Cryptography.Oid(hndl : __return);
        }
    }
    /**
    Gets the current  object in an  object.

    */
    public var Current : dotnet.System.Security.Cryptography.Oid {
        get {
            return try! get_Current();
        }
    }
} // OidEnumerator


// type: System.Security.Cryptography.OidGroup
    /**
    Identifies Windows cryptographic object identifier (OID) groups.

    */
public struct OidGroup : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_OidGroup_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.Cryptography.OidGroup All
    /**
    All the groups.

    */
    public static var All : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_All());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup HashAlgorithm
    /**
    The Windows group that is represented by CRYPT_HASH_ALG_OID_GROUP_ID.

    */
    public static var HashAlgorithm : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_HashAlgorithm());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup EncryptionAlgorithm
    /**
    The Windows group that is represented by CRYPT_ENCRYPT_ALG_OID_GROUP_ID.

    */
    public static var EncryptionAlgorithm : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_EncryptionAlgorithm());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup PublicKeyAlgorithm
    /**
    The Windows group that is represented by CRYPT_PUBKEY_ALG_OID_GROUP_ID.

    */
    public static var PublicKeyAlgorithm : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_PublicKeyAlgorithm());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup SignatureAlgorithm
    /**
    The Windows group that is represented by CRYPT_SIGN_ALG_OID_GROUP_ID.

    */
    public static var SignatureAlgorithm : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_SignatureAlgorithm());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup Attribute
    /**
    The Windows group that is represented by CRYPT_RDN_ATTR_OID_GROUP_ID.

    */
    public static var Attribute : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_Attribute());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup ExtensionOrAttribute
    /**
    The Windows group that is represented by CRYPT_EXT_OR_ATTR_OID_GROUP_ID.

    */
    public static var ExtensionOrAttribute : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_ExtensionOrAttribute());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup EnhancedKeyUsage
    /**
    The Windows group that is represented by CRYPT_ENHKEY_USAGE_OID_GROUP_ID.

    */
    public static var EnhancedKeyUsage : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_EnhancedKeyUsage());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup Policy
    /**
    The Windows group that is represented by CRYPT_POLICY_OID_GROUP_ID.

    */
    public static var Policy : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_Policy());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup Template
    /**
    The Windows group that is represented by CRYPT_TEMPLATE_OID_GROUP_ID.

    */
    public static var Template : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_Template());
            return __return;
        }
    }
    // static field: System.Security.Cryptography.OidGroup KeyDerivationFunction
    /**
    The Windows group that is represented by CRYPT_KDF_OID_GROUP_ID.

    */
    public static var KeyDerivationFunction : dotnet.System.Security.Cryptography.OidGroup {
        get {
        let __return = dotnet.System.Security.Cryptography.OidGroup(val: System_Security_Cryptography_OidGroup_get_KeyDerivationFunction());
            return __return;
        }
    }
} // OidGroup


// type: System.Security.Cryptography.PemEncoding
public struct PemEncoding {
// TODO COPE (write_all_methods) (span) System.Security.Cryptography.PemFields Find(System.ReadOnlySpan<System.Char>)
    // System.Int32 GetEncodedSize(System.Int32, System.Int32)
// docid: M:System.Security.Cryptography.PemEncoding.GetEncodedSize(System.Int32,System.Int32)
    /**
    Determines the length of a PEM-encoded value, in characters, given the length of a label and binary data.

    - Parameter labelLength: The length of the label, in characters.
    - Parameter dataLength: The length of the data, in bytes.
    - Returns: The number of characters in the encoded PEM.

    */
    public static func GetEncodedSize(labelLength : Swift.Int32, dataLength : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_PemEncoding_i32__GetEncodedSize_0__2__i32_i32(&__thrown, labelLength, dataLength);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryFind(System.ReadOnlySpan<System.Char>, ref System.Security.Cryptography.PemFields)
// TODO COPE (write_all_methods) (span) bool TryWrite(System.ReadOnlySpan<System.Char>, System.ReadOnlySpan<System.Byte>, System.Span<System.Char>, ref System.Int32)
// TODO COPE (write_all_methods) (span) System.Char[] Write(System.ReadOnlySpan<System.Char>, System.ReadOnlySpan<System.Byte>)
} // PemEncoding


// type: System.Security.Cryptography.PemFields
// boxed value type
    /**
    Contains information about the location of PEM data.

    */
public final class PemFields
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_PemFields_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the location of the base-64 data inside of the PEM.

    */
    public var Base64Data : dotnet.System.Range {
        get {
            return try! get_Base64Data();
        }
    }
    /**
    Gets the size of the decoded base-64 data, in bytes.

    */
    public var DecodedDataLength : Swift.Int32 {
        get {
            return try! get_DecodedDataLength();
        }
    }
    /**
    Gets the location of the label.

    */
    public var Label : dotnet.System.Range {
        get {
            return try! get_Label();
        }
    }
    /**
    Gets the location of the PEM-encoded text, including the surrounding encapsulation boundaries.

    */
    public var Location : dotnet.System.Range {
        get {
            return try! get_Location();
        }
    }
    public override init() {
        let h = System_Security_Cryptography_PemFields_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Range get_Base64Data()
// docid: M:System.Security.Cryptography.PemFields.get_Base64Data
    public func get_Base64Data() throws -> dotnet.System.Range {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_PemFields_Range__get_Base64Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Range(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_DecodedDataLength()
// docid: M:System.Security.Cryptography.PemFields.get_DecodedDataLength
    public func get_DecodedDataLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_PemFields_i32__get_DecodedDataLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Range get_Label()
// docid: M:System.Security.Cryptography.PemFields.get_Label
    public func get_Label() throws -> dotnet.System.Range {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_PemFields_Range__get_Label_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Range(hndl : __return);
        }
    }
    // [IsSpecialName] System.Range get_Location()
// docid: M:System.Security.Cryptography.PemFields.get_Location
    public func get_Location() throws -> dotnet.System.Range {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_PemFields_Range__get_Location_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Range(hndl : __return);
        }
    }
} // PemFields


// type: System.Security.Cryptography.ToBase64Transform
    /**
    Converts a  to base 64.

    */
open class ToBase64Transform
    :
    dotnet.System.Object,
    System_IDisposable,
    System_Security_Cryptography_ICryptoTransform
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Cryptography_ToBase64Transform_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Cryptography.ToBase64Transform.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Cryptography_ToBase64Transform_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Security.Cryptography.ToBase64Transform.Clear
    /**
    Releases all resources used by the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_ToBase64Transform_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Security.Cryptography.ToBase64Transform.Dispose
    /**
    Releases all resources used by the current instance of the  class.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Security_Cryptography_ToBase64Transform_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.

    - Parameter inputBuffer: The input to compute to base 64.
    - Parameter inputOffset: The offset into the input byte array from which to begin using data.
    - Parameter inputCount: The number of bytes in the input byte array to use as data.
    - Parameter outputBuffer: The output to which to write the result.
    - Parameter outputOffset: The offset into the output byte array from which to begin writing data.
    - Returns: The number of bytes written.

    */
    open /* method final */ func TransformBlock(inputBuffer : dotnet.System_Arr<Swift.UInt8>, inputOffset : Swift.Int32, inputCount : Swift.Int32, outputBuffer : dotnet.System_Arr<Swift.UInt8>, outputOffset : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_ToBase64Transform_i32__TransformBlock_0__5__u8Array_i32_i32_u8Array_i32(&__thrown, self.get_handle(), inputBuffer.get_handle(), inputOffset, inputCount, outputBuffer.get_handle(), outputOffset);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte[] TransformFinalBlock(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
    /**
    Converts the specified region of the specified byte array to base 64.

    - Parameter inputBuffer: The input to convert to base 64.
    - Parameter inputOffset: The offset into the byte array from which to begin using data.
    - Parameter inputCount: The number of bytes in the byte array to use as data.
    - Returns: The computed base 64 conversion.

    */
    open /* method final */ func TransformFinalBlock(inputBuffer : dotnet.System_Arr<Swift.UInt8>, inputOffset : Swift.Int32, inputCount : Swift.Int32) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_ToBase64Transform_u8Array__TransformFinalBlock_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), inputBuffer.get_handle(), inputOffset, inputCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_CanReuseTransform()
// docid: M:System.Security.Cryptography.ToBase64Transform.get_CanReuseTransform
    open func get_CanReuseTransform() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_ToBase64Transform_bool__get_CanReuseTransform_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_CanTransformMultipleBlocks()
// docid: M:System.Security.Cryptography.ToBase64Transform.get_CanTransformMultipleBlocks
    open /* method final */ func get_CanTransformMultipleBlocks() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_ToBase64Transform_bool__get_CanTransformMultipleBlocks_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_InputBlockSize()
// docid: M:System.Security.Cryptography.ToBase64Transform.get_InputBlockSize
    open /* method final */ func get_InputBlockSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_ToBase64Transform_i32__get_InputBlockSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_OutputBlockSize()
// docid: M:System.Security.Cryptography.ToBase64Transform.get_OutputBlockSize
    open /* method final */ func get_OutputBlockSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Cryptography_ToBase64Transform_i32__get_OutputBlockSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets a value indicating whether the current transform can be reused.

    */
    open var CanReuseTransform : Bool {
        get {
            return try! get_CanReuseTransform();
        }
    }
    /**
    Gets a value that indicates whether multiple blocks can be transformed.

    */
    public var CanTransformMultipleBlocks : Bool {
        get {
            return try! get_CanTransformMultipleBlocks();
        }
    }
    /**
    Gets the input block size.

    */
    public var InputBlockSize : Swift.Int32 {
        get {
            return try! get_InputBlockSize();
        }
    }
    /**
    Gets the output block size.

    */
    public var OutputBlockSize : Swift.Int32 {
        get {
            return try! get_OutputBlockSize();
        }
    }
} // ToBase64Transform


}



