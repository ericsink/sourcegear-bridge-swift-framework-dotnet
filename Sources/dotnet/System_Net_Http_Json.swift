// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Net
// System.Net.Http
// System.Net.Http.Json
extension System.Net.Http.Json {
// type: System.Net.Http.Json.HttpClientJsonExtensions
public struct HttpClientJsonExtensions {
    // System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.String, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(System.Net.Http.HttpClient,System.String,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the value resulting from deserialize the response body as JSON in an asynchronous operation.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter type: The type of the object to deserialize to and return.
    - Parameter options: Options to control the behavior during deserialization, the default options are .
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func GetFromJsonAsync(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_object___GetFromJsonAsync_0__5__HttpClient_String_Type_JsonSerializerOptions_CancellationToken(&__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, type.get_handle(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.String, System.Type, System.Text.Json.Serialization.JsonSerializerContext, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(System.Net.Http.HttpClient,System.String,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)
    public static func GetFromJsonAsync(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, type : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_object___GetFromJsonAsync_0__5__HttpClient_String_Type_JsonSerializerContext_CancellationToken(&__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, type.get_handle(), context.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.String, System.Type, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(System.Net.Http.HttpClient,System.String,System.Type,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the value resulting from deserialize the response body as JSON in an asynchronous operation.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter type: The type of the object to deserialize to and return.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func GetFromJsonAsync(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, type : dotnet.System.Type_, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_object___GetFromJsonAsync_0__4__HttpClient_String_Type_CancellationToken(&__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, type.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.Uri, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(System.Net.Http.HttpClient,System.Uri,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the value resulting from deserialize the response body as JSON in an asynchronous operation.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter type: The type of the object to deserialize to and return.
    - Parameter options: Options to control the behavior during deserialization, the default options are .
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func GetFromJsonAsync(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_object___GetFromJsonAsync_0__5__HttpClient_Uri_Type_JsonSerializerOptions_CancellationToken(&__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, type.get_handle(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.Uri, System.Type, System.Text.Json.Serialization.JsonSerializerContext, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(System.Net.Http.HttpClient,System.Uri,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)
    public static func GetFromJsonAsync(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, type : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_object___GetFromJsonAsync_0__5__HttpClient_Uri_Type_JsonSerializerContext_CancellationToken(&__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, type.get_handle(), context.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.Uri, System.Type, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(System.Net.Http.HttpClient,System.Uri,System.Type,System.Threading.CancellationToken)
    /**
    Send a GET request to the specified Uri and return the value resulting from deserialize the response body as JSON in an asynchronous operation.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter type: The type of the object to deserialize to and return.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func GetFromJsonAsync(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, type : dotnet.System.Type_, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_object___GetFromJsonAsync_0__4__HttpClient_Uri_Type_CancellationToken(&__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, type.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
    // System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync``1(System.Net.Http.HttpClient,System.String,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func GetFromJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_UTValue___GetFromJsonAsync_1__4__HttpClient_String_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue__CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, System.Threading.CancellationToken)
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
    // System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync``1(System.Net.Http.HttpClient,System.Uri,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func GetFromJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_UTValue___GetFromJsonAsync_1__4__HttpClient_Uri_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue__CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, System.Threading.CancellationToken)
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Send a POST request to the specified Uri containing the  serialized as JSON in the request body.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter value: The value to serialize.
    - Parameter options: Options to control the behavior during serialization, the default options are .
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsJsonAsync_1__5__HttpClient_String_UTValue_JsonSerializerOptions_CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsJsonAsync_1__5__HttpClient_String_UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue__CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)
    /**
    Send a POST request to the specified Uri containing the  serialized as JSON in the request body.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter value: The value to serialize.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsJsonAsync_1__4__HttpClient_String_UTValue_CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Send a POST request to the specified Uri containing the  serialized as JSON in the request body.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter value: The value to serialize.
    - Parameter options: Options to control the behavior during serialization, the default options are .
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsJsonAsync_1__5__HttpClient_Uri_UTValue_JsonSerializerOptions_CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsJsonAsync_1__5__HttpClient_Uri_UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue__CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)
    /**
    Send a POST request to the specified Uri containing the  serialized as JSON in the request body.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter value: The value to serialize.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PostAsJsonAsync_1__4__HttpClient_Uri_UTValue_CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Send a PUT request to the specified Uri containing the  serialized as JSON in the request body.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter value: The value to serialize.
    - Parameter options: Options to control the behavior during serialization, the default options are .
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsJsonAsync_1__5__HttpClient_String_UTValue_JsonSerializerOptions_CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsJsonAsync_1__5__HttpClient_String_UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue__CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)
    /**
    Send a PUT request to the specified Uri containing the  serialized as JSON in the request body.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter value: The value to serialize.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.String>, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsJsonAsync_1__4__HttpClient_String_UTValue_CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Send a PUT request to the specified Uri containing the  serialized as JSON in the request body.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter value: The value to serialize.
    - Parameter options: Options to control the behavior during serialization, the default options are .
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsJsonAsync_1__5__HttpClient_Uri_UTValue_JsonSerializerOptions_CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsJsonAsync_1__5__HttpClient_Uri_UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue__CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)
    /**
    Send a PUT request to the specified Uri containing the  serialized as JSON in the request body.

    - Parameter client: The client used to send the request.
    - Parameter requestUri: The Uri the request is sent to.
    - Parameter value: The value to serialize.
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(client : dotnet.System.Net.Http.HttpClient, requestUri : Optional<dotnet.System.Uri>, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpClientJsonExtensions_System_Threading_Tasks_Task_System_Net_Http_HttpResponseMessage___PutAsJsonAsync_1__4__HttpClient_Uri_UTValue_CancellationToken(UTValue.get_type_handle(), &__thrown, client.get_handle(), requestUri?.get_handle() ?? nil, value.to_gval(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // HttpClientJsonExtensions


// type: System.Net.Http.Json.HttpContentJsonExtensions
public struct HttpContentJsonExtensions {
    // System.Threading.Tasks.Task<System.Object> ReadFromJsonAsync(System.Net.Http.HttpContent, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpContentJsonExtensions.ReadFromJsonAsync(System.Net.Http.HttpContent,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Read the HTTP content and return the value resulting from deserialize the content as JSON in an asynchronous operation.

    - Parameter content: The content to read from.
    - Parameter type: The type of the object to deserialize to and return.
    - Parameter options: Options to control the behavior during deserialization, the default options are .
    - Parameter cancellationToken: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    - Returns: The task object representing the asynchronous operation.

    */
    public static func ReadFromJsonAsync(content : dotnet.System.Net.Http.HttpContent, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpContentJsonExtensions_System_Threading_Tasks_Task_object___ReadFromJsonAsync_0__4__HttpContent_Type_JsonSerializerOptions_CancellationToken(&__thrown, content.get_handle(), type.get_handle(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Object> ReadFromJsonAsync(System.Net.Http.HttpContent, System.Type, System.Text.Json.Serialization.JsonSerializerContext, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpContentJsonExtensions.ReadFromJsonAsync(System.Net.Http.HttpContent,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)
    public static func ReadFromJsonAsync(content : dotnet.System.Net.Http.HttpContent, type : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpContentJsonExtensions_System_Threading_Tasks_Task_object___ReadFromJsonAsync_0__4__HttpContent_Type_JsonSerializerContext_CancellationToken(&__thrown, content.get_handle(), type.get_handle(), context.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Task<T> ReadFromJsonAsync<T>(System.Net.Http.HttpContent, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
    // System.Threading.Tasks.Task<T> ReadFromJsonAsync<T>(System.Net.Http.HttpContent, System.Text.Json.Serialization.Metadata.JsonTypeInfo<T>, System.Threading.CancellationToken)
// docid: M:System.Net.Http.Json.HttpContentJsonExtensions.ReadFromJsonAsync``1(System.Net.Http.HttpContent,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func ReadFromJsonAsync<UT : SGBridgeGenericValue>(content : dotnet.System.Net.Http.HttpContent, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UT>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_HttpContentJsonExtensions_System_Threading_Tasks_Task_UT___ReadFromJsonAsync_1__3__HttpContent_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UT__CancellationToken(UT.get_type_handle(), &__thrown, content.get_handle(), jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
} // HttpContentJsonExtensions


// type: System.Net.Http.Json.JsonContent
    /**
    Provides HTTP content based on JSON.

    */
public final class JsonContent
    :
    dotnet.System.Net.Http.HttpContent
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Net_Http_Json_JsonContent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Net.Http.Json.JsonContent Create(System.Object, System.Type, System.Net.Http.Headers.MediaTypeHeaderValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Net.Http.Json.JsonContent.Create(System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue,System.Text.Json.JsonSerializerOptions)
    /**
    Creates a new instance of the  class that will contain the  serialized as JSON.

    - Parameter inputValue: The value to serialize.
    - Parameter inputType: The type of the value to serialize.
    - Parameter mediaType: The media type to use for the content.
    - Parameter options: Options to control the behavior during serialization, the default options are .
    - Returns: A  instance.

    */
    public class func Create(inputValue : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, mediaType : Optional<dotnet.System.Net.Http.Headers.MediaTypeHeaderValue> = nil, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.Net.Http.Json.JsonContent {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_JsonContent_JsonContent__Create_0__4__Object_Type_MediaTypeHeaderValue_JsonSerializerOptions(&__thrown, inputValue?.get_handle() ?? nil, inputType.get_handle(), mediaType?.get_handle() ?? nil, options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Json.JsonContent(hndl : __return);
        }
    }
    // System.Net.Http.Json.JsonContent Create<T>(T, System.Net.Http.Headers.MediaTypeHeaderValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Net.Http.Json.JsonContent.Create``1(``0,System.Net.Http.Headers.MediaTypeHeaderValue,System.Text.Json.JsonSerializerOptions)
    /**
    Creates a new instance of the  class that will contain the  serialized as JSON.

    - Parameter inputValue: The value to serialize.
    - Parameter mediaType: The media type to use for the content.
    - Parameter options: Options to control the behavior during serialization, the default options are .
    - Returns: A  instance.

    */
    public class func Create<UT : SGBridgeGenericValue>(inputValue : UT, mediaType : Optional<dotnet.System.Net.Http.Headers.MediaTypeHeaderValue> = nil, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.Net.Http.Json.JsonContent {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_JsonContent_JsonContent__Create_1__3__UT_MediaTypeHeaderValue_JsonSerializerOptions(UT.get_type_handle(), &__thrown, inputValue.to_gval(), mediaType?.get_handle() ?? nil, options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Net.Http.Json.JsonContent(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_ObjectType()
// docid: M:System.Net.Http.Json.JsonContent.get_ObjectType
    public func get_ObjectType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_JsonContent_Type__get_ObjectType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.Net.Http.Json.JsonContent.get_Value
    public func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Net_Http_Json_JsonContent_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the type of the  to be serialized by this instance.

    */
    public var ObjectType : dotnet.System.Type_ {
        get {
            return try! get_ObjectType();
        }
    }
    /**
    Gets the value to be serialized and used as the body of the  that sends this instance.

    */
    public var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
} // JsonContent


}




// EXTENSION METHOD System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.String, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func GetFromJsonAsync(requestUri : Optional<dotnet.System.String>, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(client: self, requestUri: requestUri, type: type, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.String, System.Type, System.Text.Json.Serialization.JsonSerializerContext, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func GetFromJsonAsync(requestUri : Optional<dotnet.System.String>, type : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(client: self, requestUri: requestUri, type: type, context: context, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.String, System.Type, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func GetFromJsonAsync(requestUri : Optional<dotnet.System.String>, type : dotnet.System.Type_, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(client: self, requestUri: requestUri, type: type, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.Uri, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func GetFromJsonAsync(requestUri : Optional<dotnet.System.Uri>, type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(client: self, requestUri: requestUri, type: type, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.Uri, System.Type, System.Text.Json.Serialization.JsonSerializerContext, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func GetFromJsonAsync(requestUri : Optional<dotnet.System.Uri>, type : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(client: self, requestUri: requestUri, type: type, context: context, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Object> GetFromJsonAsync(System.Net.Http.HttpClient, System.Uri, System.Type, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func GetFromJsonAsync(requestUri : Optional<dotnet.System.Uri>, type : dotnet.System.Type_, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(client: self, requestUri: requestUri, type: type, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)

// EXTENSION METHOD System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func GetFromJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.String>, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<UTValue> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(client: self, requestUri: requestUri, jsonTypeInfo: jsonTypeInfo, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, System.Threading.CancellationToken)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, System.Threading.CancellationToken)

// EXTENSION METHOD System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)

// EXTENSION METHOD System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func GetFromJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.Uri>, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<UTValue> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.GetFromJsonAsync(client: self, requestUri: requestUri, jsonTypeInfo: jsonTypeInfo, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, System.Threading.CancellationToken)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<TValue> GetFromJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, System.Threading.CancellationToken)

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.String>, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync(client: self, requestUri: requestUri, value: value, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.String>, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync(client: self, requestUri: requestUri, value: value, jsonTypeInfo: jsonTypeInfo, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.String>, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync(client: self, requestUri: requestUri, value: value, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.Uri>, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync(client: self, requestUri: requestUri, value: value, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.Uri>, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync(client: self, requestUri: requestUri, value: value, jsonTypeInfo: jsonTypeInfo, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PostAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.Uri>, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PostAsJsonAsync(client: self, requestUri: requestUri, value: value, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.String>, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync(client: self, requestUri: requestUri, value: value, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.String>, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync(client: self, requestUri: requestUri, value: value, jsonTypeInfo: jsonTypeInfo, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.String, TValue, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.String>, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync(client: self, requestUri: requestUri, value: value, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.Uri>, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync(client: self, requestUri: requestUri, value: value, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.Uri>, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync(client: self, requestUri: requestUri, value: value, jsonTypeInfo: jsonTypeInfo, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsJsonAsync<TValue>(System.Net.Http.HttpClient, System.Uri, TValue, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpClient {
    public func PutAsJsonAsync<UTValue : SGBridgeGenericValue>(requestUri : Optional<dotnet.System.Uri>, value : UTValue, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Net.Http.HttpResponseMessage> {
        return try dotnet.System.Net.Http.Json.HttpClientJsonExtensions.PutAsJsonAsync(client: self, requestUri: requestUri, value: value, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Object> ReadFromJsonAsync(System.Net.Http.HttpContent, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpContent {
    public func ReadFromJsonAsync(type : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        return try dotnet.System.Net.Http.Json.HttpContentJsonExtensions.ReadFromJsonAsync(content: self, type: type, options: options, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<System.Object> ReadFromJsonAsync(System.Net.Http.HttpContent, System.Type, System.Text.Json.Serialization.JsonSerializerContext, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpContent {
    public func ReadFromJsonAsync(type : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Object> {
        return try dotnet.System.Net.Http.Json.HttpContentJsonExtensions.ReadFromJsonAsync(content: self, type: type, context: context, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<T> ReadFromJsonAsync<T>(System.Net.Http.HttpContent, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// TODO COPE extension method (unused generic param) System.Threading.Tasks.Task<T> ReadFromJsonAsync<T>(System.Net.Http.HttpContent, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)

// EXTENSION METHOD System.Threading.Tasks.Task<T> ReadFromJsonAsync<T>(System.Net.Http.HttpContent, System.Text.Json.Serialization.Metadata.JsonTypeInfo<T>, System.Threading.CancellationToken)
extension dotnet.System.Net.Http.HttpContent {
    public func ReadFromJsonAsync<UT : SGBridgeGenericValue>(jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UT>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<UT> {
        return try dotnet.System.Net.Http.Json.HttpContentJsonExtensions.ReadFromJsonAsync(content: self, jsonTypeInfo: jsonTypeInfo, cancellationToken: cancellationToken);
    }
}

