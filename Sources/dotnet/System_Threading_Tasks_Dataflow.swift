// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Threading
// System.Threading.Tasks
// System.Threading.Tasks.Dataflow
extension System.Threading.Tasks.Dataflow {
// type: System.Threading.Tasks.Dataflow.ActionBlock`1
    /**
    Provides a dataflow block that invokes a provided  delegate for every data element received.

    */
public final class ActionBlock_1<TInput : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_ActionBlock_1_get_type_handle(TInput.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Action<TInput>)
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})
    /**
    Initializes a new instance of the  class with the specified action.

    - Parameter action: The action to invoke with each data element received.
    */
    public init(action : dotnet.System.Action_1<TInput>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_ActionBlock_1_ctor_0__1__System_Action_TInput_(TInput.get_type_handle(), &__thrown, action.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Action<TInput>, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
    /**
    Initializes a new instance of the  class with the specified action and configuration options.

    - Parameter action: The action to invoke with each data element received.
    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(action : dotnet.System.Action_1<TInput>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_ActionBlock_1_ctor_0__2__System_Action_TInput__ExecutionDataflowBlockOptions(TInput.get_type_handle(), &__thrown, action.get_handle(), dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<TInput,System.Threading.Tasks.Task>)
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})
    /**
    Initializes a new instance of the  class with the specified action.

    - Parameter action: The action to invoke with each data element received.
    */
    public init(action : dotnet.System.Func_2<TInput,dotnet.System.Threading.Tasks.Task>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_ActionBlock_1_ctor_0__1__System_Func_TInput_Task_(TInput.get_type_handle(), &__thrown, action.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<TInput,System.Threading.Tasks.Task>, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
    /**
    Initializes a new instance of the  class with the specified action and configuration options.

    - Parameter action: The action to invoke with each data element received.
    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(action : dotnet.System.Func_2<TInput,dotnet.System.Threading.Tasks.Task>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_ActionBlock_1_ctor_0__2__System_Func_TInput_Task__ExecutionDataflowBlockOptions(TInput.get_type_handle(), &__thrown, action.get_handle(), dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete
    /**
    Signals to the dataflow block  that it shouldn't accept or produce any more messages and shouldn't consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_ActionBlock_1_void__Complete_0__0(TInput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Post(TInput)
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)
    /**
    Posts an item to the target dataflow block.

    - Parameter item: The item being offered to the target.
    - Returns: 
         if the item is posted to the dataflow block; otherwise, .

    */
    public func Post(item : TInput) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ActionBlock_1_bool__Post_0__1__TInput(TInput.get_type_handle(), &__thrown, self.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString
    /**
    Returns a string that represents the formatted name of this  instance.

    - Returns: A string that represents the formatted name of this  instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ActionBlock_1_String__ToString_0__0(TInput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ActionBlock_1_Task__get_Completion_0__0(TInput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_InputCount()
// docid: M:System.Threading.Tasks.Dataflow.ActionBlock`1.get_InputCount
    public func get_InputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ActionBlock_1_i32__get_InputCount_0__0(TInput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets a   object that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of input items waiting to be processed by this block.

    */
    public var InputCount : Swift.Int32 {
        get {
            return try! get_InputCount();
        }
    }
} // ActionBlock_1


// type: System.Threading.Tasks.Dataflow.BatchBlock`1
    /**
    Provides a dataflow block that batches inputs into arrays.

    */
public final class BatchBlock_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_BatchBlock_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)
    /**
    Initializes a new  with the specified batch size.

    - Parameter batchSize: The number of items to group into a batch.
    */
    public init(batchSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BatchBlock_1_ctor_0__1__i32(T.get_type_handle(), &__thrown, batchSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
    /**
    Initializes a new  with the specified batch size, declining option, and block options.

    - Parameter batchSize: The number of items to group into a batch.
    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(batchSize : Swift.Int32, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BatchBlock_1_ctor_0__2__i32_GroupingDataflowBlockOptions(T.get_type_handle(), &__thrown, batchSize, dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_BatchBlock_1_void__Complete_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<T[]>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Threading.Tasks.Dataflow.T[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<dotnet.System_Arr<T>>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchBlock_1_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_TArray__DataflowLinkOptions(T.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this   instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchBlock_1_String__ToString_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void TriggerBatch()
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch
    /**
    Triggers the  to initiate a batching operation even if the number of currently queued or postponed items is less than the .

    */
    public func TriggerBatch() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_BatchBlock_1_void__TriggerBatch_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool TryReceive(System.Predicate<T[]>, ref T[])
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{System.Threading.Tasks.Dataflow.T[]},System.Threading.Tasks.Dataflow.T[]@)
    public func TryReceive(filter : Optional<dotnet.System.Predicate_1<dotnet.System_Arr<T>>>, item : inout dotnet.System_Arr<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.get_handle();
        let __return = System_Threading_Tasks_Dataflow_BatchBlock_1_bool__TryReceive_0__2__System_Predicate_TArray__outTArray(T.get_type_handle(), &__thrown, self.get_handle(), (filter?.get_handle()), &_tmp_out_item);
        let _tmp2_item = dotnet.System_Arr<T>(hndl: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (Optional<dotnet.System_Arr<T>>) throws -> Bool, item : inout dotnet.System_Arr<T>) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<dotnet.System_Arr<T>>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<T[]>)
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{System.Threading.Tasks.Dataflow.T[]}@)
    public func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<dotnet.System_Arr<T>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_BatchBlock_1_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_TArray_(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<dotnet.System_Arr<T>>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_BatchSize()
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.get_BatchSize
    public func get_BatchSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchBlock_1_i32__get_BatchSize_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchBlock_1_Task__get_Completion_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_OutputCount()
// docid: M:System.Threading.Tasks.Dataflow.BatchBlock`1.get_OutputCount
    public func get_OutputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchBlock_1_i32__get_OutputCount_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the size of the batches generated by this  .

    */
    public var BatchSize : Swift.Int32 {
        get {
            return try! get_BatchSize();
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of output items available to be received from this block.

    */
    public var OutputCount : Swift.Int32 {
        get {
            return try! get_OutputCount();
        }
    }
} // BatchBlock_1


// type: System.Threading.Tasks.Dataflow.BatchedJoinBlock`2
    /**
    Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.

    */
public final class BatchedJoinBlock_2<T1 : SGBridgeGenericValue,T2 : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_get_type_handle(T1.get_type_handle(),T2.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)
    /**
    Initializes a new  with the specified configuration.

    - Parameter batchSize: The number of items to group into a batch.
    */
    public init(batchSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_ctor_0__1__i32(T1.get_type_handle(), T2.get_type_handle(), &__thrown, batchSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
    /**
    Initializes a new  with the specified configuration.

    - Parameter batchSize: The number of items to group into a batch.
    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(batchSize : Swift.Int32, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_ctor_0__2__i32_GroupingDataflowBlockOptions(T1.get_type_handle(), T2.get_type_handle(), &__thrown, batchSize, dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_void__Complete_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>>>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified   .

    - Parameter target: The  to which to connect this source.
    - Parameter linkOptions: A  instance that configures the link.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_System_System_Tuple_System_Collections_Generic_System_Collections_Generic_IList_T1__System_Collections_Generic_System_Collections_Generic_IList_T2____DataflowLinkOptions(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this   instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_String__ToString_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>>>, ref System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>>)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate a value must successfully pass in order for it to be received.   may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : Optional<dotnet.System.Predicate_1<dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>>>, item : inout dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.get_handle();
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_bool__TryReceive_0__2__System_Predicate_System_System_Tuple_System_Collections_Generic_System_Collections_Generic_IList_T1__System_Collections_Generic_System_Collections_Generic_IList_T2____outSystem_Tuple_System_Collections_Generic_System_Collections_Generic_IList_T1__System_Collections_Generic_System_Collections_Generic_IList_T2__(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle(), (filter?.get_handle()), &_tmp_out_item);
        let _tmp2_item = dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>(hndl : _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (Optional<dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>>) throws -> Bool, item : inout dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>>>)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)
    /**
    Attempts to synchronously receive all available items from the .

    - Parameter items: The items received from the source.
    - Returns: 
         if one or more items could be received; otherwise, .

    */
    public func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_System_System_Tuple_System_Collections_Generic_System_Collections_Generic_IList_T1__System_Collections_Generic_System_Collections_Generic_IList_T2___(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<dotnet.System.Tuple_2<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>>>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_BatchSize()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.get_BatchSize
    public func get_BatchSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_i32__get_BatchSize_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_Task__get_Completion_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_OutputCount()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.get_OutputCount
    public func get_OutputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_i32__get_OutputCount_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T1> get_Target1()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.get_Target1
    public func get_Target1() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T1> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_System_Threading_Tasks_Dataflow_ITargetBlock_T1___get_Target1_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T2> get_Target2()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.get_Target2
    public func get_Target2() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T2> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_2_System_Threading_Tasks_Dataflow_ITargetBlock_T2___get_Target2_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    /**
    Gets the size of the batches generated by this .

    */
    public var BatchSize : Swift.Int32 {
        get {
            return try! get_BatchSize();
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of output items available to be received from this block.

    */
    public var OutputCount : Swift.Int32 {
        get {
            return try! get_OutputCount();
        }
    }
    /**
    Gets a target that may be used to offer messages of the first type.

    */
    public var Target1 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T1> {
        get {
            return try! get_Target1();
        }
    }
    /**
    Gets a target that may be used to offer messages of the second type.

    */
    public var Target2 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T2> {
        get {
            return try! get_Target2();
        }
    }
} // BatchedJoinBlock_2


// type: System.Threading.Tasks.Dataflow.BatchedJoinBlock`3
    /**
    Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.

    */
public final class BatchedJoinBlock_3<T1 : SGBridgeGenericValue,T2 : SGBridgeGenericValue,T3 : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_get_type_handle(T1.get_type_handle(),T2.get_type_handle(),T3.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)
    /**
    Initializes a new  with the specified configuration.

    - Parameter batchSize: The number of items to group into a batch.
    */
    public init(batchSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_ctor_0__1__i32(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, batchSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
    /**
    Initializes a new  with the specified configuration.

    - Parameter batchSize: The number of items to group into a batch.
    - Parameter dataflowBlockOptions: The options with which to configure this  .
    */
    public init(batchSize : Swift.Int32, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_ctor_0__2__i32_GroupingDataflowBlockOptions(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, batchSize, dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_void__Complete_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>,System.Collections.Generic.IList<T3>>>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified   .

    - Parameter target: The   to which to connect this source.
    - Parameter linkOptions: 
         if the source should unlink from the target after successfully propagating a single message;  to remain connected even after a single message has been propagated.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_System_System_Tuple_System_Collections_Generic_System_Collections_Generic_IList_T1__System_Collections_Generic_System_Collections_Generic_IList_T2__System_Collections_Generic_System_Collections_Generic_IList_T3____DataflowLinkOptions(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this   instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_String__ToString_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>,System.Collections.Generic.IList<T3>>>, ref System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>,System.Collections.Generic.IList<T3>>)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate a value must successfully pass in order for it to be received.   may be  in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : Optional<dotnet.System.Predicate_1<dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>>>, item : inout dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.get_handle();
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_bool__TryReceive_0__2__System_Predicate_System_System_Tuple_System_Collections_Generic_System_Collections_Generic_IList_T1__System_Collections_Generic_System_Collections_Generic_IList_T2__System_Collections_Generic_System_Collections_Generic_IList_T3____outSystem_Tuple_System_Collections_Generic_System_Collections_Generic_IList_T1__System_Collections_Generic_System_Collections_Generic_IList_T2__System_Collections_Generic_System_Collections_Generic_IList_T3__(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle(), (filter?.get_handle()), &_tmp_out_item);
        let _tmp2_item = dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>(hndl : _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (Optional<dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>>) throws -> Bool, item : inout dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>,System.Collections.Generic.IList<T3>>>)
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)
    /**
    Attempts to synchronously receive all available items from the .

    - Parameter items: The items received from the source.
    - Returns: 
         if one or more items could be received; otherwise, .

    */
    public func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_System_System_Tuple_System_Collections_Generic_System_Collections_Generic_IList_T1__System_Collections_Generic_System_Collections_Generic_IList_T2__System_Collections_Generic_System_Collections_Generic_IList_T3___(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<dotnet.System.Tuple_3<dotnet.System.Collections.Generic.IList_1<T1>,dotnet.System.Collections.Generic.IList_1<T2>,dotnet.System.Collections.Generic.IList_1<T3>>>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_BatchSize()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.get_BatchSize
    public func get_BatchSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_i32__get_BatchSize_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_Task__get_Completion_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_OutputCount()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.get_OutputCount
    public func get_OutputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_i32__get_OutputCount_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T1> get_Target1()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.get_Target1
    public func get_Target1() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T1> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_System_Threading_Tasks_Dataflow_ITargetBlock_T1___get_Target1_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T2> get_Target2()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.get_Target2
    public func get_Target2() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T2> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_System_Threading_Tasks_Dataflow_ITargetBlock_T2___get_Target2_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T3> get_Target3()
// docid: M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.get_Target3
    public func get_Target3() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T3> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BatchedJoinBlock_3_System_Threading_Tasks_Dataflow_ITargetBlock_T3___get_Target3_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    /**
    Gets the size of the batches generated by this .

    */
    public var BatchSize : Swift.Int32 {
        get {
            return try! get_BatchSize();
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of output items available to be received from this block.

    */
    public var OutputCount : Swift.Int32 {
        get {
            return try! get_OutputCount();
        }
    }
    /**
    Gets a target that may be used to offer messages of the first type.

    */
    public var Target1 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T1> {
        get {
            return try! get_Target1();
        }
    }
    /**
    Gets a target that may be used to offer messages of the second type.

    */
    public var Target2 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T2> {
        get {
            return try! get_Target2();
        }
    }
    /**
    Gets a target that may be used to offer messages of the third type.

    */
    public var Target3 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T3> {
        get {
            return try! get_Target3();
        }
    }
} // BatchedJoinBlock_3


// type: System.Threading.Tasks.Dataflow.BroadcastBlock`1
    /**
    Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.

    */
public final class BroadcastBlock_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_BroadcastBlock_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Func<T,T>)
// docid: M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})
    /**
    Initializes the  with the specified cloning function.

    - Parameter cloningFunction: The function to use to clone the data when offered to other blocks.
    */
    public init(cloningFunction : dotnet.System.Func_2<T,T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BroadcastBlock_1_ctor_0__1__System_Func_T_T_(T.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<T,T>, System.Threading.Tasks.Dataflow.DataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
    /**
    Initializes the  with the specified cloning function and  .

    - Parameter cloningFunction: The function to use to clone the data when offered to other blocks.
    - Parameter dataflowBlockOptions: The options with which to configure this  .
    */
    public init(cloningFunction : dotnet.System.Func_2<T,T>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BroadcastBlock_1_ctor_0__2__System_Func_T_T__DataflowBlockOptions(T.get_type_handle(), &__thrown, nil, dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_BroadcastBlock_1_void__Complete_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<T>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified  .

    - Parameter target: The  to which to connect this source.
    - Parameter linkOptions: A  instance that configures the link.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BroadcastBlock_1_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_T__DataflowLinkOptions(T.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this  instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BroadcastBlock_1_String__ToString_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<T>, ref T)
// docid: M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate a value must successfully pass in order for it to be received.   may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : dotnet.System.Predicate_1<T>, item : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Threading_Tasks_Dataflow_BroadcastBlock_1_bool__TryReceive_0__2__System_Predicate_T__outT(T.get_type_handle(), &__thrown, self.get_handle(), nil, &_tmp_out_item);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (T) throws -> Bool, item : inout T) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<T>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BroadcastBlock_1_Task__get_Completion_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
} // BroadcastBlock_1


// type: System.Threading.Tasks.Dataflow.BufferBlock`1
    /**
    Provides a buffer for storing data for a Dataflow.

    */
public final class BufferBlock_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_BufferBlock_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor
    /**
    Initializes a new .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BufferBlock_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)
    /**
    Initializes a new  with the specified  .

    - Parameter dataflowBlockOptions: The options with which to configure this  .
    */
    public init(dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_BufferBlock_1_ctor_0__1__DataflowBlockOptions(T.get_type_handle(), &__thrown, dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_BufferBlock_1_void__Complete_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<T>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified  .

    - Parameter target: The  to which to connect this source.
    - Parameter linkOptions: A  instance that configures the link.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BufferBlock_1_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_T__DataflowLinkOptions(T.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this   instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BufferBlock_1_String__ToString_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<T>, ref T)
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate value must successfully pass in order for it to be received.  may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : dotnet.System.Predicate_1<T>, item : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Threading_Tasks_Dataflow_BufferBlock_1_bool__TryReceive_0__2__System_Predicate_T__outT(T.get_type_handle(), &__thrown, self.get_handle(), nil, &_tmp_out_item);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (T) throws -> Bool, item : inout T) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<T>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<T>)
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)
    /**
    Attempts to synchronously receive all available items from the .

    - Parameter items: The items received from the source.
    - Returns: 
         if one or more items could be received; otherwise, .

    */
    public func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_BufferBlock_1_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_T_(T.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<T>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BufferBlock_1_Task__get_Completion_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Threading.Tasks.Dataflow.BufferBlock`1.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_BufferBlock_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of items currently stored in the buffer.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // BufferBlock_1


// type: System.Threading.Tasks.Dataflow.DataflowBlock
public struct DataflowBlock {
    // System.IObservable<TOutput> AsObservable<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
    /**
    Creates a new  abstraction over the .

    - Parameter source: The source to wrap.
    - Returns: An  that enables observers to be subscribed to the source.

    */
    public static func AsObservable<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>) throws -> dotnet.System.IObservable_1<UTOutput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_IObservable_UTOutput___AsObservable_1__1__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput_(UTOutput.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IObservable_1(hndl : __return);
        }
    }
    // System.IObserver<TInput> AsObserver<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
    /**
    Creates a new  abstraction over the  .

    - Parameter target: The target to wrap.
    - Returns: An observer that wraps the target block.

    */
    public static func AsObserver<UTInput : SGBridgeGenericValue>(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTInput>) throws -> dotnet.System.IObserver_1<UTInput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_IObserver_UTInput___AsObserver_1__1__System_Threading_Tasks_Dataflow_ITargetBlock_UTInput_(UTInput.get_type_handle(), &__thrown, target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IObserver_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Int32> Choose<T1, T2>(System.Threading.Tasks.Dataflow.ISourceBlock<T1>, System.Action<T1>, System.Threading.Tasks.Dataflow.ISourceBlock<T2>, System.Action<T2>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
    /**
    Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.

    - Parameter source1: The first source.
    - Parameter action1: The handler to execute on data from the first source.
    - Parameter source2: The second source.
    - Parameter action2: The handler to execute on data from the second source.
    - Returns: A   that represents the asynchronous choice. If both sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the  state and will contain the unhandled exception. Otherwise, the task will end with its  set to either 0 or 1 to represent the first or second source, respectively.  
  
 This method will only consume an element from one of the two data sources, never both.

    */
    public static func Choose<UT1 : SGBridgeGenericValue,UT2 : SGBridgeGenericValue>(source1 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT1>, action1 : dotnet.System.Action_1<UT1>, source2 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT2>, action2 : dotnet.System.Action_1<UT2>) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_i32___Choose_2__4__System_Threading_Tasks_Dataflow_ISourceBlock_UT1__System_Action_UT1__System_Threading_Tasks_Dataflow_ISourceBlock_UT2__System_Action_UT2_(UT1.get_type_handle(), UT2.get_type_handle(), &__thrown, source1.get_handle(), action1.get_handle(), source2.get_handle(), action2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Choose<UT1 : SGBridgeGenericValue,UT2 : SGBridgeGenericValue>(source1 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT1>, action1 : @escaping (UT1) throws -> Void, source2 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT2>, action2 : @escaping (UT2) throws -> Void) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        let del_action1 = try dotnet.System.Action_1<UT1>(action1);
        let del_action2 = try dotnet.System.Action_1<UT2>(action2);
        return try Choose(source1: source1, action1: del_action1, source2: source2, action2: del_action2);
    }
    // System.Threading.Tasks.Task<System.Int32> Choose<T1, T2>(System.Threading.Tasks.Dataflow.ISourceBlock<T1>, System.Action<T1>, System.Threading.Tasks.Dataflow.ISourceBlock<T2>, System.Action<T2>, System.Threading.Tasks.Dataflow.DataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
    /**
    Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.

    - Parameter source1: The first source.
    - Parameter action1: The handler to execute on data from the first source.
    - Parameter source2: The second source.
    - Parameter action2: The handler to execute on data from the second source.
    - Parameter dataflowBlockOptions: The options with which to configure this choice.
    - Returns: A   that represents the asynchronous choice. If both sources are completed prior to the choice completing, or if the  provided as part of  is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the  state and will contain the unhandled exception. Otherwise, the task will end with its  set to either 0 or 1 to represent the first or second source, respectively.

    */
    public static func Choose<UT1 : SGBridgeGenericValue,UT2 : SGBridgeGenericValue>(source1 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT1>, action1 : dotnet.System.Action_1<UT1>, source2 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT2>, action2 : dotnet.System.Action_1<UT2>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_i32___Choose_2__5__System_Threading_Tasks_Dataflow_ISourceBlock_UT1__System_Action_UT1__System_Threading_Tasks_Dataflow_ISourceBlock_UT2__System_Action_UT2__DataflowBlockOptions(UT1.get_type_handle(), UT2.get_type_handle(), &__thrown, source1.get_handle(), action1.get_handle(), source2.get_handle(), action2.get_handle(), dataflowBlockOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Choose<UT1 : SGBridgeGenericValue,UT2 : SGBridgeGenericValue>(source1 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT1>, action1 : @escaping (UT1) throws -> Void, source2 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT2>, action2 : @escaping (UT2) throws -> Void, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        let del_action1 = try dotnet.System.Action_1<UT1>(action1);
        let del_action2 = try dotnet.System.Action_1<UT2>(action2);
        return try Choose(source1: source1, action1: del_action1, source2: source2, action2: del_action2, dataflowBlockOptions: dataflowBlockOptions);
    }
    // System.Threading.Tasks.Task<System.Int32> Choose<T1, T2, T3>(System.Threading.Tasks.Dataflow.ISourceBlock<T1>, System.Action<T1>, System.Threading.Tasks.Dataflow.ISourceBlock<T2>, System.Action<T2>, System.Threading.Tasks.Dataflow.ISourceBlock<T3>, System.Action<T3>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
    /**
    Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.

    - Parameter source1: The first source.
    - Parameter action1: The handler to execute on data from the first source.
    - Parameter source2: The second source.
    - Parameter action2: The handler to execute on data from the second source.
    - Parameter source3: The third source.
    - Parameter action3: The handler to execute on data from the third source.
    - Returns: A   that represents the asynchronous choice. If all sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the  state and will contain the unhandled exception. Otherwise, the task will end with its  set to the 0-based index of the source.  
  
 This method will only consume an element from one of the data sources, never more than one.

    */
    public static func Choose<UT1 : SGBridgeGenericValue,UT2 : SGBridgeGenericValue,UT3 : SGBridgeGenericValue>(source1 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT1>, action1 : dotnet.System.Action_1<UT1>, source2 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT2>, action2 : dotnet.System.Action_1<UT2>, source3 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT3>, action3 : dotnet.System.Action_1<UT3>) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_i32___Choose_3__6__System_Threading_Tasks_Dataflow_ISourceBlock_UT1__System_Action_UT1__System_Threading_Tasks_Dataflow_ISourceBlock_UT2__System_Action_UT2__System_Threading_Tasks_Dataflow_ISourceBlock_UT3__System_Action_UT3_(UT1.get_type_handle(), UT2.get_type_handle(), UT3.get_type_handle(), &__thrown, source1.get_handle(), action1.get_handle(), source2.get_handle(), action2.get_handle(), source3.get_handle(), action3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Choose<UT1 : SGBridgeGenericValue,UT2 : SGBridgeGenericValue,UT3 : SGBridgeGenericValue>(source1 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT1>, action1 : @escaping (UT1) throws -> Void, source2 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT2>, action2 : @escaping (UT2) throws -> Void, source3 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT3>, action3 : @escaping (UT3) throws -> Void) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        let del_action1 = try dotnet.System.Action_1<UT1>(action1);
        let del_action2 = try dotnet.System.Action_1<UT2>(action2);
        let del_action3 = try dotnet.System.Action_1<UT3>(action3);
        return try Choose(source1: source1, action1: del_action1, source2: source2, action2: del_action2, source3: source3, action3: del_action3);
    }
    // System.Threading.Tasks.Task<System.Int32> Choose<T1, T2, T3>(System.Threading.Tasks.Dataflow.ISourceBlock<T1>, System.Action<T1>, System.Threading.Tasks.Dataflow.ISourceBlock<T2>, System.Action<T2>, System.Threading.Tasks.Dataflow.ISourceBlock<T3>, System.Action<T3>, System.Threading.Tasks.Dataflow.DataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
    /**
    Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.

    - Parameter source1: The first source.
    - Parameter action1: The handler to execute on data from the first source.
    - Parameter source2: The second source.
    - Parameter action2: The handler to execute on data from the second source.
    - Parameter source3: The third source.
    - Parameter action3: The handler to execute on data from the third source.
    - Parameter dataflowBlockOptions: The options with which to configure this choice.
    - Returns: A   that represents the asynchronous choice. If all sources are completed prior to the choice completing, or if the  provided as part of  is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the  state and will contain the unhandled exception. Otherwise, the task will end with its  set to the 0-based index of the source.  
  
 This method will only consume an element from one of the data sources, never more than one. If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.

    */
    public static func Choose<UT1 : SGBridgeGenericValue,UT2 : SGBridgeGenericValue,UT3 : SGBridgeGenericValue>(source1 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT1>, action1 : dotnet.System.Action_1<UT1>, source2 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT2>, action2 : dotnet.System.Action_1<UT2>, source3 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT3>, action3 : dotnet.System.Action_1<UT3>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_i32___Choose_3__7__System_Threading_Tasks_Dataflow_ISourceBlock_UT1__System_Action_UT1__System_Threading_Tasks_Dataflow_ISourceBlock_UT2__System_Action_UT2__System_Threading_Tasks_Dataflow_ISourceBlock_UT3__System_Action_UT3__DataflowBlockOptions(UT1.get_type_handle(), UT2.get_type_handle(), UT3.get_type_handle(), &__thrown, source1.get_handle(), action1.get_handle(), source2.get_handle(), action2.get_handle(), source3.get_handle(), action3.get_handle(), dataflowBlockOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func Choose<UT1 : SGBridgeGenericValue,UT2 : SGBridgeGenericValue,UT3 : SGBridgeGenericValue>(source1 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT1>, action1 : @escaping (UT1) throws -> Void, source2 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT2>, action2 : @escaping (UT2) throws -> Void, source3 : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UT3>, action3 : @escaping (UT3) throws -> Void, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions) throws -> dotnet.System.Threading.Tasks.Task_1<Swift.Int32> {
        let del_action1 = try dotnet.System.Action_1<UT1>(action1);
        let del_action2 = try dotnet.System.Action_1<UT2>(action2);
        let del_action3 = try dotnet.System.Action_1<UT3>(action3);
        return try Choose(source1: source1, action1: del_action1, source2: source2, action2: del_action2, source3: source3, action3: del_action3, dataflowBlockOptions: dataflowBlockOptions);
    }
    // System.Threading.Tasks.Dataflow.IPropagatorBlock<TInput,TOutput> Encapsulate<TInput, TOutput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
    /**
    Encapsulates a target and a source into a single propagator.

    - Parameter target: The target to encapsulate.
    - Parameter source: The source to encapsulate.
    - Returns: The encapsulated target and source.

    */
    public static func Encapsulate<UTInput : SGBridgeGenericValue,UTOutput : SGBridgeGenericValue>(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTInput>, source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>) throws -> dotnet.System.Threading.Tasks.Dataflow.IPropagatorBlock_2<UTInput,UTOutput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Dataflow_IPropagatorBlock_UTInput_UTOutput___Encapsulate_2__2__System_Threading_Tasks_Dataflow_ITargetBlock_UTInput__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput_(UTInput.get_type_handle(), UTOutput.get_type_handle(), &__thrown, target.get_handle(), source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.IPropagatorBlock_2(hndl : __return);
        }
    }
    // System.IDisposable LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
    /**
    Links the  to the specified  .

    - Parameter source: The source from which to link.
    - Parameter target: The  to which to connect the source.
    - Returns: An  that, upon calling , will unlink the source from the target.

    */
    public static func LinkTo<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>, target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTOutput>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_IDisposable__LinkTo_1__2__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput__System_Threading_Tasks_Dataflow_ITargetBlock_UTOutput_(UTOutput.get_type_handle(), &__thrown, source.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.IDisposable LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Predicate<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
    /**
    Links the  to the specified   using the specified filter.

    - Parameter source: The source from which to link.
    - Parameter target: The   to which to connect the source.
    - Parameter predicate: The filter a message must pass in order for it to propagate from the source to the target.
    - Returns: An  that, upon calling , will unlink the source from the target.

    */
    public static func LinkTo<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>, target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTOutput>, predicate : dotnet.System.Predicate_1<UTOutput>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_IDisposable__LinkTo_1__3__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput__System_Threading_Tasks_Dataflow_ITargetBlock_UTOutput__System_Predicate_UTOutput_(UTOutput.get_type_handle(), &__thrown, source.get_handle(), target.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // delegate closure overload
    public static func LinkTo<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>, target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTOutput>, predicate : @escaping (UTOutput) throws -> Bool) throws -> dotnet.System.IDisposable {
        let del_predicate = try dotnet.System.Predicate_1<UTOutput>(predicate);
        return try LinkTo(source: source, target: target, predicate: del_predicate);
    }
    // System.IDisposable LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Threading.Tasks.Dataflow.DataflowLinkOptions, System.Predicate<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
    /**
    Links the   to the specified   using the specified filter.

    - Parameter source: The source from which to link.
    - Parameter target: The   to which to connect the source.
    - Parameter linkOptions: One of the enumeration values that specifies how to configure a link between dataflow blocks.
    - Parameter predicate: The filter a message must pass in order for it to propagate from the source to the target.
    - Returns: An  that, upon calling , will unlink the source from the target.

    */
    public static func LinkTo<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>, target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTOutput>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions, predicate : dotnet.System.Predicate_1<UTOutput>) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_IDisposable__LinkTo_1__4__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput__System_Threading_Tasks_Dataflow_ITargetBlock_UTOutput__DataflowLinkOptions_System_Predicate_UTOutput_(UTOutput.get_type_handle(), &__thrown, source.get_handle(), target.get_handle(), linkOptions.get_handle(), predicate.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // delegate closure overload
    public static func LinkTo<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>, target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTOutput>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions, predicate : @escaping (UTOutput) throws -> Bool) throws -> dotnet.System.IDisposable {
        let del_predicate = try dotnet.System.Predicate_1<UTOutput>(predicate);
        return try LinkTo(source: source, target: target, linkOptions: linkOptions, predicate: del_predicate);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.Dataflow.ITargetBlock<TInput> NullTarget<TInput>()
    // System.Threading.Tasks.Task<bool> OutputAvailableAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
    /**
    Provides a  that asynchronously monitors the source for available output.

    - Parameter source: The source to monitor.
    - Returns: A  that informs of whether and when more output is available. If, when the task completes, its  is , more output is available in the source (though another consumer of the source may retrieve the data).  
  
 If it returns , more output is not and will never be available, due to the source completing prior to output being available.

    */
    public static func OutputAvailableAsync<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_bool___OutputAvailableAsync_1__1__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput_(UTOutput.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> OutputAvailableAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
    /**
    Provides a   that asynchronously monitors the source for available output.

    - Parameter source: The source to monitor.
    - Parameter cancellationToken: The cancellation token with which to cancel the asynchronous operation.
    - Returns: A  that informs of whether and when more output is available. If, when the task completes, its  is , more output is available in the source (though another consumer of the source may retrieve the data). If it returns , more output is not and will never be available, due to the source completing prior to output being available.

    */
    public static func OutputAvailableAsync<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_bool___OutputAvailableAsync_1__2__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput__CancellationToken(UTOutput.get_type_handle(), &__thrown, source.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool Post<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
    /**
    Posts an item to the .

    - Parameter target: The target block.
    - Parameter item: The item being offered to the target.
    - Returns: 
         if the item was accepted by the target block; otherwise, .

    */
    public static func Post<UTInput : SGBridgeGenericValue>(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTInput>, item : UTInput) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_bool__Post_1__2__System_Threading_Tasks_Dataflow_ITargetBlock_UTInput__UTInput(UTInput.get_type_handle(), &__thrown, target.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
    /**
    Asynchronously receives a value from a specified source.

    - Parameter source: The source from which to receive the value.
    - Returns: A task that represents the asynchronous receive operation. When an item value is successfully received from the source, the returned task is completed and its  returns the received value. If an item value cannot be retrieved because the source is empty and completed , an  exception is thrown in the returned task.

    */
    public static func ReceiveAsync<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>) throws -> dotnet.System.Threading.Tasks.Task_1<UTOutput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_UTOutput___ReceiveAsync_1__1__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput_(UTOutput.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
    /**
    Asynchronously receives a value from a specified source and provides a token to cancel the operation.

    - Parameter source: The source from which to receive the value.
    - Parameter cancellationToken: The token to use to cancel the receive operation.
    - Returns: A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its  returns the value. If a value cannot be retrieved because cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an  exception is thrown in the returned task.

    */
    public static func ReceiveAsync<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<UTOutput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_UTOutput___ReceiveAsync_1__2__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput__CancellationToken(UTOutput.get_type_handle(), &__thrown, source.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (span) System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan)
// TODO COPE (write_all_methods) (span) System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan, System.Threading.CancellationToken)
    // TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
    /**
    Synchronously receives a value from a specified source.

    - Parameter source: The source from which to receive the value.
    - Returns: The received value.

    */
    public static func Receive<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>) throws -> UTOutput {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_UTOutput__Receive_1__1__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput_(UTOutput.get_type_handle(), &__thrown, source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTOutput(gval: __return);
        }
    }
    // TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
    /**
    Synchronously receives a value from a specified source and provides a token to cancel the operation.

    - Parameter source: The source from which to receive the value.
    - Parameter cancellationToken: The token to use to cancel the receive operation.
    - Returns: The received value.

    */
    public static func Receive<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<UTOutput>, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> UTOutput {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_UTOutput__Receive_1__2__System_Threading_Tasks_Dataflow_ISourceBlock_UTOutput__CancellationToken(UTOutput.get_type_handle(), &__thrown, source.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTOutput(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (span) TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan)
// TODO COPE (write_all_methods) (span) TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan, System.Threading.CancellationToken)
    // System.Threading.Tasks.Task<bool> SendAsync<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
    /**
    Asynchronously offers a message to the target message block, allowing for postponement.

    - Parameter target: The target to which to post the data.
    - Parameter item: The item being offered to the target.
    - Returns: A  that represents the asynchronous send. If the target accepts and consumes the offered element during the call to , upon return from the call the resulting  will be completed and its  property will return . If the target declines the offered element during the call, upon return from the call the resulting  will be completed and its  property will return . If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its  indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.

    */
    public static func SendAsync<UTInput : SGBridgeGenericValue>(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTInput>, item : UTInput) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_bool___SendAsync_1__2__System_Threading_Tasks_Dataflow_ITargetBlock_UTInput__UTInput(UTInput.get_type_handle(), &__thrown, target.get_handle(), item.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<bool> SendAsync<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput, System.Threading.CancellationToken)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
    /**
    Asynchronously offers a message to the target message block, allowing for postponement.

    - Parameter target: The target to which to post the data.
    - Parameter item: The item being offered to the target.
    - Parameter cancellationToken: The cancellation token with which to request cancellation of the send operation.
    - Returns: A  that represents the asynchronous send.  If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting  will be completed and its Result property will return true.  If the target declines the offered element during the call, upon return from the call the resulting  will be completed and its Result property will return false. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its Result indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.  
  
 If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.

    */
    public static func SendAsync<UTInput : SGBridgeGenericValue>(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<UTInput>, item : UTInput, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Threading_Tasks_Task_bool___SendAsync_1__3__System_Threading_Tasks_Dataflow_ITargetBlock_UTInput__UTInput_CancellationToken(UTInput.get_type_handle(), &__thrown, target.get_handle(), item.to_gval(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // bool TryReceive<TOutput>(System.Threading.Tasks.Dataflow.IReceivableSourceBlock<TOutput>, ref TOutput)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
    /**
    Attempts to synchronously receive an item from the .

    - Parameter source: The source from which to receive.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public static func TryReceive<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.IReceivableSourceBlock_1<UTOutput>, item : inout UTOutput) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_bool__TryReceive_1__2__System_Threading_Tasks_Dataflow_IReceivableSourceBlock_UTOutput__outUTOutput(UTOutput.get_type_handle(), &__thrown, source.get_handle(), &_tmp_out_item);
            let _tmp2_item = UTOutput(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.Generic.IAsyncEnumerable<TOutput> ReceiveAllAsync<TOutput>(System.Threading.Tasks.Dataflow.IReceivableSourceBlock<TOutput>, System.Threading.CancellationToken)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAllAsync``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},System.Threading.CancellationToken)
    public static func ReceiveAllAsync<UTOutput : SGBridgeGenericValue>(source : dotnet.System.Threading.Tasks.Dataflow.IReceivableSourceBlock_1<UTOutput>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Collections.Generic.IAsyncEnumerable_1<UTOutput> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlock_System_Collections_Generic_IAsyncEnumerable_UTOutput___ReceiveAllAsync_1__2__System_Threading_Tasks_Dataflow_IReceivableSourceBlock_UTOutput__CancellationToken(UTOutput.get_type_handle(), &__thrown, source.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IAsyncEnumerable_1(hndl : __return);
        }
    }
} // DataflowBlock


// type: System.Threading.Tasks.Dataflow.DataflowBlockOptions
    /**
    Provides options used to configure the processing performed by dataflow blocks.

    */
open class DataflowBlockOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_DataflowBlockOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 Unbounded
    /**
    A constant used to specify an unlimited quantity for   members that provide an upper bound. This field is constant.

    */
    open class var Unbounded : Swift.Int32 {
        get {
        let __return = System_Threading_Tasks_Dataflow_DataflowBlockOptions_get_Unbounded();
            return __return;
        }
    }
    // .ctor()
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor
    /**
    Initializes a new .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_DataflowBlockOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_BoundedCapacity()
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.get_BoundedCapacity
    open func get_BoundedCapacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlockOptions_i32__get_BoundedCapacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_BoundedCapacity(System.Int32)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.set_BoundedCapacity(System.Int32)
    open func set_BoundedCapacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowBlockOptions_void__set_BoundedCapacity_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_CancellationToken()
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.get_CancellationToken
    open func get_CancellationToken() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlockOptions_CancellationToken__get_CancellationToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CancellationToken(System.Threading.CancellationToken)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.set_CancellationToken(System.Threading.CancellationToken)
    open func set_CancellationToken(value : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowBlockOptions_void__set_CancellationToken_0__1__CancellationToken(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_EnsureOrdered()
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.get_EnsureOrdered
    open func get_EnsureOrdered() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlockOptions_bool__get_EnsureOrdered_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnsureOrdered(bool)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.set_EnsureOrdered(System.Boolean)
    open func set_EnsureOrdered(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowBlockOptions_void__set_EnsureOrdered_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxMessagesPerTask()
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.get_MaxMessagesPerTask
    open func get_MaxMessagesPerTask() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlockOptions_i32__get_MaxMessagesPerTask_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxMessagesPerTask(System.Int32)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.set_MaxMessagesPerTask(System.Int32)
    open func set_MaxMessagesPerTask(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowBlockOptions_void__set_MaxMessagesPerTask_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_NameFormat()
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.get_NameFormat
    open func get_NameFormat() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlockOptions_String__get_NameFormat_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_NameFormat(System.String)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.set_NameFormat(System.String)
    open func set_NameFormat(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowBlockOptions_void__set_NameFormat_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.TaskScheduler get_TaskScheduler()
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.get_TaskScheduler
    open func get_TaskScheduler() throws -> dotnet.System.Threading.Tasks.TaskScheduler {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowBlockOptions_TaskScheduler__get_TaskScheduler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.TaskScheduler(hndl : __return);
        }
    }
    // [IsSpecialName] void set_TaskScheduler(System.Threading.Tasks.TaskScheduler)
// docid: M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.set_TaskScheduler(System.Threading.Tasks.TaskScheduler)
    open func set_TaskScheduler(value : dotnet.System.Threading.Tasks.TaskScheduler) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowBlockOptions_void__set_TaskScheduler_0__1__TaskScheduler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the maximum number of messages that may be buffered by the block.

    */
    open var BoundedCapacity : Swift.Int32 {
        get {
            return try! get_BoundedCapacity();
        }
        set(v) {
            return try! set_BoundedCapacity(value: v);
        }
    }
    /**
    Gets or sets the   to monitor for cancellation requests.

    */
    open var CancellationToken : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_CancellationToken();
        }
        set(v) {
            return try! set_CancellationToken(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether ordered processing should be enforced on a block's handling of messages.

    */
    open var EnsureOrdered : Bool {
        get {
            return try! get_EnsureOrdered();
        }
        set(v) {
            return try! set_EnsureOrdered(value: v);
        }
    }
    /**
    Gets or sets the maximum number of messages that may be processed per task.

    */
    open var MaxMessagesPerTask : Swift.Int32 {
        get {
            return try! get_MaxMessagesPerTask();
        }
        set(v) {
            return try! set_MaxMessagesPerTask(value: v);
        }
    }
    /**
    Gets or sets the format string to use when a block is queried for its name.

    */
    open var NameFormat : dotnet.System.String {
        get {
            return try! get_NameFormat();
        }
        set(v) {
            return try! set_NameFormat(value: v);
        }
    }
    /**
    Gets or sets the  to use for scheduling tasks.

    */
    open var TaskScheduler : dotnet.System.Threading.Tasks.TaskScheduler {
        get {
            return try! get_TaskScheduler();
        }
        set(v) {
            return try! set_TaskScheduler(value: v);
        }
    }
} // DataflowBlockOptions


// type: System.Threading.Tasks.Dataflow.DataflowLinkOptions
    /**
    Provides options used to configure a link between dataflow blocks.

    */
open class DataflowLinkOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_DataflowLinkOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor
    /**
    Initializes the .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_DataflowLinkOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Append()
// docid: M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.get_Append
    open func get_Append() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowLinkOptions_bool__get_Append_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Append(bool)
// docid: M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.set_Append(System.Boolean)
    open func set_Append(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowLinkOptions_void__set_Append_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxMessages()
// docid: M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.get_MaxMessages
    open func get_MaxMessages() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowLinkOptions_i32__get_MaxMessages_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxMessages(System.Int32)
// docid: M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.set_MaxMessages(System.Int32)
    open func set_MaxMessages(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowLinkOptions_void__set_MaxMessages_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PropagateCompletion()
// docid: M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.get_PropagateCompletion
    open func get_PropagateCompletion() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowLinkOptions_bool__get_PropagateCompletion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PropagateCompletion(bool)
// docid: M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.set_PropagateCompletion(System.Boolean)
    open func set_PropagateCompletion(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_DataflowLinkOptions_void__set_PropagateCompletion_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets whether the link should be appended to the source's list of links, or whether it should be prepended.

    */
    open var Append : Bool {
        get {
            return try! get_Append();
        }
        set(v) {
            return try! set_Append(value: v);
        }
    }
    /**
    Gets or sets the maximum number of messages that may be consumed across the link.

    */
    open var MaxMessages : Swift.Int32 {
        get {
            return try! get_MaxMessages();
        }
        set(v) {
            return try! set_MaxMessages(value: v);
        }
    }
    /**
    Gets or sets whether the linked target will have completion and faulting notification propagated to it automatically.

    */
    open var PropagateCompletion : Bool {
        get {
            return try! get_PropagateCompletion();
        }
        set(v) {
            return try! set_PropagateCompletion(value: v);
        }
    }
} // DataflowLinkOptions


// type: System.Threading.Tasks.Dataflow.DataflowMessageHeader
// boxed value type
    /**
    Provides a container of data attributes for passing between dataflow blocks.

    */
public final class DataflowMessageHeader
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_DataflowMessageHeader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the ID of the message within the source.

    */
    public var Id : Swift.Int64 {
        get {
            return try! get_Id();
        }
    }
    /**
    Gets the validity of the message.

    */
    public var IsValid : Bool {
        get {
            return try! get_IsValid();
        }
    }
    // .ctor(System.Int64)
// docid: M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)
    /**
    Initializes a new  with the specified attributes.

    - Parameter id: The ID of the message. Must be unique within the originating source block. It does not need to be globally unique.
    */
    public init(id : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_DataflowMessageHeader_ctor_0__1__i64(&__thrown, id);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Threading_Tasks_Dataflow_DataflowMessageHeader_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)
    /**
    Checks boxed  instances for equality by ID.

    - Parameter obj: A boxed  instance.
    - Returns: 
         if the instances are equal; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowMessageHeader_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)
// docid: M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)
    /**
    Checks two   instances for equality by ID without boxing.

    - Parameter other: Another   instance.
    - Returns: 
         if the instances are equal; otherwise, .

    */
    public func Equals(other : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowMessageHeader_bool__Equals_0__1__DataflowMessageHeader(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode
    /**
    Generates a hash code for the  instance.

    - Returns: The hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowMessageHeader_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader, System.Threading.Tasks.Dataflow.DataflowMessageHeader)
// docid: M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)
    /**
    Checks two   instances for equality by ID.

    - Parameter left: A   instance.
    - Parameter right: A   instance.
    - Returns: 
         if the instances are equal; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader, right : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowMessageHeader_bool__op_Equality_0__2__DataflowMessageHeader_DataflowMessageHeader(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader, System.Threading.Tasks.Dataflow.DataflowMessageHeader)
// docid: M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)
    /**
    Checks two   instances for non-equality by ID.

    - Parameter left: A   instance.
    - Parameter right: A   instance.
    - Returns: 
         if the instances are not equal; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader, right : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowMessageHeader_bool__op_Inequality_0__2__DataflowMessageHeader_DataflowMessageHeader(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int64 get_Id()
// docid: M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.get_Id
    public func get_Id() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowMessageHeader_i64__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsValid()
// docid: M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.get_IsValid
    public func get_IsValid() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_DataflowMessageHeader_bool__get_IsValid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // DataflowMessageHeader


// type: System.Threading.Tasks.Dataflow.DataflowMessageStatus
    /**
    Represents the status of a  when passed between dataflow blocks.

    */
public struct DataflowMessageStatus : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_DataflowMessageStatus_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Threading.Tasks.Dataflow.DataflowMessageStatus Accepted
    /**
    Indicates that the   accepted the message. Once a target has accepted a message, it is wholly owned by the target.

    */
    public static var Accepted : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus {
        get {
        let __return = dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus(val: System_Threading_Tasks_Dataflow_DataflowMessageStatus_get_Accepted());
            return __return;
        }
    }
    // static field: System.Threading.Tasks.Dataflow.DataflowMessageStatus Declined
    /**
    Indicates that the  declined the message. The  still owns the message.

    */
    public static var Declined : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus {
        get {
        let __return = dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus(val: System_Threading_Tasks_Dataflow_DataflowMessageStatus_get_Declined());
            return __return;
        }
    }
    // static field: System.Threading.Tasks.Dataflow.DataflowMessageStatus Postponed
    /**
    Indicates that the  postponed the message for potential consumption at a later time.  
  
 The  still owns the message.

    */
    public static var Postponed : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus {
        get {
        let __return = dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus(val: System_Threading_Tasks_Dataflow_DataflowMessageStatus_get_Postponed());
            return __return;
        }
    }
    // static field: System.Threading.Tasks.Dataflow.DataflowMessageStatus NotAvailable
    /**
    Indicates that the  tried to accept the message from the , but the message was no longer available.

    */
    public static var NotAvailable : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus {
        get {
        let __return = dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus(val: System_Threading_Tasks_Dataflow_DataflowMessageStatus_get_NotAvailable());
            return __return;
        }
    }
    // static field: System.Threading.Tasks.Dataflow.DataflowMessageStatus DecliningPermanently
    /**
    Indicates that the  declined the message. The  still owns the message.  
  
 Additionally, the  will decline all future messages sent by the source.

    */
    public static var DecliningPermanently : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus {
        get {
        let __return = dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus(val: System_Threading_Tasks_Dataflow_DataflowMessageStatus_get_DecliningPermanently());
            return __return;
        }
    }
} // DataflowMessageStatus


// type: System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions
    /**
    Provides options used to configure the processing performed by dataflow blocks that process each message through the invocation of a user-provided delegate. These are dataflow blocks such as   and  .

    */
open class ExecutionDataflowBlockOptions
    :
    dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_ExecutionDataflowBlockOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor
    /**
    Initializes a new .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_ExecutionDataflowBlockOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_MaxDegreeOfParallelism()
// docid: M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.get_MaxDegreeOfParallelism
    open func get_MaxDegreeOfParallelism() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ExecutionDataflowBlockOptions_i32__get_MaxDegreeOfParallelism_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxDegreeOfParallelism(System.Int32)
// docid: M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.set_MaxDegreeOfParallelism(System.Int32)
    open func set_MaxDegreeOfParallelism(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_ExecutionDataflowBlockOptions_void__set_MaxDegreeOfParallelism_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SingleProducerConstrained()
// docid: M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.get_SingleProducerConstrained
    open func get_SingleProducerConstrained() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ExecutionDataflowBlockOptions_bool__get_SingleProducerConstrained_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SingleProducerConstrained(bool)
// docid: M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.set_SingleProducerConstrained(System.Boolean)
    open func set_SingleProducerConstrained(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_ExecutionDataflowBlockOptions_void__set_SingleProducerConstrained_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the maximum number of messages that may be processed by the block concurrently.

    */
    open var MaxDegreeOfParallelism : Swift.Int32 {
        get {
            return try! get_MaxDegreeOfParallelism();
        }
        set(v) {
            return try! set_MaxDegreeOfParallelism(value: v);
        }
    }
    /**
    Gets whether code using the dataflow block is constrained to one producer at a time.

    */
    open var SingleProducerConstrained : Bool {
        get {
            return try! get_SingleProducerConstrained();
        }
        set(v) {
            return try! set_SingleProducerConstrained(value: v);
        }
    }
} // ExecutionDataflowBlockOptions


// type: System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions
    /**
    Provides options used to configure the processing performed by dataflow blocks that group together multiple messages. These are dataflow blocks such as  and  .

    */
open class GroupingDataflowBlockOptions
    :
    dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_GroupingDataflowBlockOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor
    /**
    Initializes a new .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_GroupingDataflowBlockOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Greedy()
// docid: M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.get_Greedy
    open func get_Greedy() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_GroupingDataflowBlockOptions_bool__get_Greedy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Greedy(bool)
// docid: M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.set_Greedy(System.Boolean)
    open func set_Greedy(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_GroupingDataflowBlockOptions_void__set_Greedy_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_MaxNumberOfGroups()
// docid: M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.get_MaxNumberOfGroups
    open func get_MaxNumberOfGroups() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_GroupingDataflowBlockOptions_i64__get_MaxNumberOfGroups_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxNumberOfGroups(System.Int64)
// docid: M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.set_MaxNumberOfGroups(System.Int64)
    open func set_MaxNumberOfGroups(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_GroupingDataflowBlockOptions_void__set_MaxNumberOfGroups_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the Boolean value to use to determine whether to greedily consume offered messages.

    */
    open var Greedy : Bool {
        get {
            return try! get_Greedy();
        }
        set(v) {
            return try! set_Greedy(value: v);
        }
    }
    /**
    Gets or sets the maximum number of groups that should be generated by the block.

    */
    open var MaxNumberOfGroups : Swift.Int64 {
        get {
            return try! get_MaxNumberOfGroups();
        }
        set(v) {
            return try! set_MaxNumberOfGroups(value: v);
        }
    }
} // GroupingDataflowBlockOptions


// type: System.Threading.Tasks.Dataflow.IDataflowBlock
    /**
    Represents a dataflow block.

    */
open class IDataflowBlock
    :
    SGBridgeGenericValue,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    open class func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_IDataflowBlock_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    open func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_IDataflowBlock_void__Complete_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fault(System.Exception)
// docid: M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)
    /**
    Causes the  to complete in a   state.

    - Parameter exception: The   that caused the faulting.
    */
    open func Fault(exception : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_IDataflowBlock_void__Fault_0__1__Exception(&__thrown, self.get_handle(), exception.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.IDataflowBlock.get_Completion
    open func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_IDataflowBlock_Task__get_Completion_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
} // IDataflowBlock


// type: System.Threading.Tasks.Dataflow.IPropagatorBlock`2
    /**
    Represents a dataflow block that is both a target for data and a source of data.

    */
open class IPropagatorBlock_2<TInput : SGBridgeGenericValue,TOutput : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Threading_Tasks_Dataflow_IPropagatorBlock_2
{
    public typealias TInput_IPropagatorBlock_2 = TInput;
    public typealias TOutput_IPropagatorBlock_2 = TOutput;
    public typealias TOutput_ISourceBlock_1 = TOutput;
    public typealias TInput_ITargetBlock_1 = TInput;
    open class func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_IPropagatorBlock_2_get_type_handle(TInput.get_type_handle(),TOutput.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

} // IPropagatorBlock_2


// type: System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1
    /**
    Represents a dataflow block that supports receiving messages without linking.

    */
open class IReceivableSourceBlock_1<TOutput : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Threading_Tasks_Dataflow_IReceivableSourceBlock_1
{
    public typealias TOutput_IReceivableSourceBlock_1 = TOutput;
    public typealias TOutput_ISourceBlock_1 = TOutput;
    open class func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_IReceivableSourceBlock_1_get_type_handle(TOutput.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool TryReceive(System.Predicate<TOutput>, ref TOutput)
// docid: M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate value must successfully pass in order for it to be received.   may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    open func TryReceive(filter : dotnet.System.Predicate_1<TOutput>, item : inout TOutput) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Threading_Tasks_Dataflow_IReceivableSourceBlock_1_bool__TryReceive_0__2__System_Predicate_TOutput__outTOutput(TOutput.get_type_handle(), &__thrown, self.get_handle(), nil, &_tmp_out_item);
            let _tmp2_item = TOutput(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    open func TryReceive(filter : @escaping (TOutput) throws -> Bool, item : inout TOutput) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<TOutput>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)
    /**
    Attempts to synchronously receive all available items from the .

    - Parameter items: The items received from the source.
    - Returns: 
         if one or more items could be received; otherwise, .

    */
    open func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<TOutput>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_IReceivableSourceBlock_1_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_TOutput_(TOutput.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<TOutput>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IReceivableSourceBlock_1


// type: System.Threading.Tasks.Dataflow.ISourceBlock`1
    /**
    Represents a dataflow block that is a source of data.

    */
open class ISourceBlock_1<TOutput : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Threading_Tasks_Dataflow_ISourceBlock_1,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public typealias TOutput_ISourceBlock_1 = TOutput;
    open class func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_ISourceBlock_1_get_type_handle(TOutput.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // TOutput ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, ref bool)
// docid: M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)
    /**
    Called by a linked  to accept and consume a  previously offered by this .

    - Parameter messageHeader: The  of the message being consumed.
    - Parameter target: The  consuming the message.
    - Parameter messageConsumed: 
         if the message was successfully consumed; otherwise, .
    - Returns: The value of the consumed message. This may correspond to a different   instance than was previously reserved and passed as the  to . The consuming  must use the returned value instead of the value passed as  through .  
  
 If the message requested is not available, the return value will be null.

    */
    open func ConsumeMessage(messageHeader : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader, target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>, messageConsumed : inout Bool) throws -> TOutput {
        var __thrown : NullableHandle = nil;
            var _tmp_out_messageConsumed = Swift.Int32(messageConsumed ? 1 : 0);
        let __return = System_Threading_Tasks_Dataflow_ISourceBlock_1_TOutput__ConsumeMessage_0__3__DataflowMessageHeader_System_Threading_Tasks_Dataflow_ITargetBlock_TOutput__outbool(TOutput.get_type_handle(), &__thrown, self.get_handle(), messageHeader.get_handle(), target.get_handle(), &_tmp_out_messageConsumed);
        let _tmp2_messageConsumed = (_tmp_out_messageConsumed) != 0;
            messageConsumed = _tmp2_messageConsumed;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return TOutput(gval: __return);
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified  .

    - Parameter target: The   to which to connect this source.
    - Parameter linkOptions: A  instance that configures the link.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    open func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ISourceBlock_1_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_TOutput__DataflowLinkOptions(TOutput.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // void ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})
    /**
    Called by a linked  to release a previously reserved  by this .

    - Parameter messageHeader: The  of the reserved message being released.
    - Parameter target: The  releasing the message it previously reserved.
    */
    open func ReleaseReservation(messageHeader : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader, target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_ISourceBlock_1_void__ReleaseReservation_0__2__DataflowMessageHeader_System_Threading_Tasks_Dataflow_ITargetBlock_TOutput_(TOutput.get_type_handle(), &__thrown, self.get_handle(), messageHeader.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})
    /**
    Called by a linked  to reserve a previously offered  by this .

    - Parameter messageHeader: The  of the message being reserved.
    - Parameter target: The  reserving the message.
    - Returns: 
         if the message was successfully reserved; otherwise, .

    */
    open func ReserveMessage(messageHeader : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader, target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ISourceBlock_1_bool__ReserveMessage_0__2__DataflowMessageHeader_System_Threading_Tasks_Dataflow_ITargetBlock_TOutput_(TOutput.get_type_handle(), &__thrown, self.get_handle(), messageHeader.get_handle(), target.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ISourceBlock_1


// type: System.Threading.Tasks.Dataflow.ITargetBlock`1
    /**
    Represents a dataflow block that is a target for data.

    */
open class ITargetBlock_1<TInput : SGBridgeGenericValue>
    :
    SGBridgeGenericValue,
    System_Threading_Tasks_Dataflow_ITargetBlock_1,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public typealias TInput_ITargetBlock_1 = TInput;
    open class func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_ITargetBlock_1_get_type_handle(TInput.get_type_handle());
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Threading.Tasks.Dataflow.DataflowMessageStatus OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader, TInput, System.Threading.Tasks.Dataflow.ISourceBlock<TInput>, bool)
// docid: M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)
    /**
    Offers a message to the , giving the target the opportunity to consume or postpone the message.

    - Parameter messageHeader: A  instance that represents the header of the message being offered.
    - Parameter messageValue: The value of the message being offered.
    - Parameter source: The  offering the message. This may be null.
    - Parameter consumeToAccept: Set to  to instruct the target to call  synchronously during the call to , prior to returning , in order to consume the message.
    - Returns: The status of the offered message. If the message was accepted by the target,  is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target,  is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  
  
 If the target would have otherwise postponed message, but source was ,  is instead returned.  
  
 If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it,  is returned.  
  
 If the target chose not to accept the message,  is returned. If the target chose not to accept the message and will never accept another message from this source,  is returned.

    */
    open func OfferMessage(messageHeader : dotnet.System.Threading.Tasks.Dataflow.DataflowMessageHeader, messageValue : TInput, source : dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1<TInput>, consumeToAccept : Bool) throws -> dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_ITargetBlock_1_DataflowMessageStatus__OfferMessage_0__4__DataflowMessageHeader_TInput_System_Threading_Tasks_Dataflow_ISourceBlock_TInput__bool(TInput.get_type_handle(), &__thrown, self.get_handle(), messageHeader.get_handle(), messageValue.to_gval(), nil, Swift.Int32(consumeToAccept ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.DataflowMessageStatus(val: __return);
        }
    }
} // ITargetBlock_1


// type: System.Threading.Tasks.Dataflow.JoinBlock`2
    /**
    Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple consisting of one item per type.

    */
public final class JoinBlock_2<T1 : SGBridgeGenericValue,T2 : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_JoinBlock_2_get_type_handle(T1.get_type_handle(),T2.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor
    /**
    Initializes a new .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_JoinBlock_2_ctor_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
    /**
    Initializes a new .

    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_JoinBlock_2_ctor_0__1__GroupingDataflowBlockOptions(T1.get_type_handle(), T2.get_type_handle(), &__thrown, dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_JoinBlock_2_void__Complete_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<System.Tuple<T1,T2>>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified   .

    - Parameter target: Links the   to the specified   .
    - Parameter linkOptions: A  instance that configures the link.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<dotnet.System.Tuple_2<T1,T2>>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_2_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_System_System_Tuple_T1_T2___DataflowLinkOptions(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this  instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_2_String__ToString_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<System.Tuple<T1,T2>>, ref System.Tuple<T1,T2>)
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate value must successfully pass in order for it to be received.   may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : Optional<dotnet.System.Predicate_1<dotnet.System.Tuple_2<T1,T2>>>, item : inout dotnet.System.Tuple_2<T1,T2>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.get_handle();
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_2_bool__TryReceive_0__2__System_Predicate_System_System_Tuple_T1_T2___outSystem_Tuple_T1_T2_(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle(), (filter?.get_handle()), &_tmp_out_item);
        let _tmp2_item = dotnet.System.Tuple_2<T1,T2>(hndl : _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (dotnet.System.Tuple_2<T1,T2>) throws -> Bool, item : inout dotnet.System.Tuple_2<T1,T2>) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<dotnet.System.Tuple_2<T1,T2>>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<System.Tuple<T1,T2>>)
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)
    /**
    Attempts to synchronously receive all available items from the .

    - Parameter items: The items received from the source.
    - Returns: 
         if one or more items could be received; otherwise, .

    */
    public func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<dotnet.System.Tuple_2<T1,T2>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_2_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_System_System_Tuple_T1_T2__(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<dotnet.System.Tuple_2<T1,T2>>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_2_Task__get_Completion_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_OutputCount()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.get_OutputCount
    public func get_OutputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_2_i32__get_OutputCount_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T1> get_Target1()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.get_Target1
    public func get_Target1() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T1> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_2_System_Threading_Tasks_Dataflow_ITargetBlock_T1___get_Target1_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T2> get_Target2()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`2.get_Target2
    public func get_Target2() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T2> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_2_System_Threading_Tasks_Dataflow_ITargetBlock_T2___get_Target2_0__0(T1.get_type_handle(), T2.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of output items available to be received from this block.

    */
    public var OutputCount : Swift.Int32 {
        get {
            return try! get_OutputCount();
        }
    }
    /**
    Gets a target that may be used to offer messages of the first type.

    */
    public var Target1 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T1> {
        get {
            return try! get_Target1();
        }
    }
    /**
    Gets a target that may be used to offer messages of the second type.

    */
    public var Target2 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T2> {
        get {
            return try! get_Target2();
        }
    }
} // JoinBlock_2


// type: System.Threading.Tasks.Dataflow.JoinBlock`3
    /**
    Provides a dataflow block that joins across multiple dataflow sources, which are not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple that contains one item per type.

    */
public final class JoinBlock_3<T1 : SGBridgeGenericValue,T2 : SGBridgeGenericValue,T3 : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_JoinBlock_3_get_type_handle(T1.get_type_handle(),T2.get_type_handle(),T3.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor
    /**
    Initializes a new .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_JoinBlock_3_ctor_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)
    /**
    Initializes a new .

    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_JoinBlock_3_ctor_0__1__GroupingDataflowBlockOptions(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_JoinBlock_3_void__Complete_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<System.Tuple<T1,T2,T3>>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   source block to the specified target block.

    - Parameter target: The target block to which to connect this source.
    - Parameter linkOptions: An object that configures the link.
    - Returns: A disposable object that unlinks the source from the target when its  method is called.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<dotnet.System.Tuple_3<T1,T2,T3>>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_System_System_Tuple_T1_T2_T3___DataflowLinkOptions(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this  instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_String__ToString_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<System.Tuple<T1,T2,T3>>, ref System.Tuple<T1,T2,T3>)
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate value must successfully pass in order for it to be received.   may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : Optional<dotnet.System.Predicate_1<dotnet.System.Tuple_3<T1,T2,T3>>>, item : inout dotnet.System.Tuple_3<T1,T2,T3>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.get_handle();
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_bool__TryReceive_0__2__System_Predicate_System_System_Tuple_T1_T2_T3___outSystem_Tuple_T1_T2_T3_(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle(), (filter?.get_handle()), &_tmp_out_item);
        let _tmp2_item = dotnet.System.Tuple_3<T1,T2,T3>(hndl : _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (dotnet.System.Tuple_3<T1,T2,T3>) throws -> Bool, item : inout dotnet.System.Tuple_3<T1,T2,T3>) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<dotnet.System.Tuple_3<T1,T2,T3>>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<System.Tuple<T1,T2,T3>>)
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)
    /**
    Attempts to synchronously receive all available items from the .

    - Parameter items: The items received from the source.
    - Returns: 
         if one or more items could be received; otherwise, .

    */
    public func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<dotnet.System.Tuple_3<T1,T2,T3>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_System_System_Tuple_T1_T2_T3__(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<dotnet.System.Tuple_3<T1,T2,T3>>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_Task__get_Completion_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_OutputCount()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.get_OutputCount
    public func get_OutputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_i32__get_OutputCount_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T1> get_Target1()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.get_Target1
    public func get_Target1() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T1> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_System_Threading_Tasks_Dataflow_ITargetBlock_T1___get_Target1_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T2> get_Target2()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.get_Target2
    public func get_Target2() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T2> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_System_Threading_Tasks_Dataflow_ITargetBlock_T2___get_Target2_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Dataflow.ITargetBlock<T3> get_Target3()
// docid: M:System.Threading.Tasks.Dataflow.JoinBlock`3.get_Target3
    public func get_Target3() throws -> dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T3> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_JoinBlock_3_System_Threading_Tasks_Dataflow_ITargetBlock_T3___get_Target3_0__0(T1.get_type_handle(), T2.get_type_handle(), T3.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1(hndl : __return);
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of output items available to be received from this block.

    */
    public var OutputCount : Swift.Int32 {
        get {
            return try! get_OutputCount();
        }
    }
    /**
    Gets a target that may be used to offer messages of the first type.

    */
    public var Target1 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T1> {
        get {
            return try! get_Target1();
        }
    }
    /**
    Gets a target that may be used to offer messages of the second type.

    */
    public var Target2 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T2> {
        get {
            return try! get_Target2();
        }
    }
    /**
    Gets a target that may be used to offer messages of the third type.

    */
    public var Target3 : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T3> {
        get {
            return try! get_Target3();
        }
    }
} // JoinBlock_3


// type: System.Threading.Tasks.Dataflow.TransformBlock`2
    /**
    Provides a dataflow block that invokes a provided  delegate for every data element received.

    */
public final class TransformBlock_2<TInput : SGBridgeGenericValue,TOutput : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_TransformBlock_2_get_type_handle(TInput.get_type_handle(),TOutput.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Func<TInput,System.Threading.Tasks.Task<TOutput>>)
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})
    /**
    Initializes a new  with the specified .

    - Parameter transform: The function to invoke with each data element received.
    */
    public init(transform : dotnet.System.Func_2<TInput,dotnet.System.Threading.Tasks.Task_1<TOutput>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_TransformBlock_2_ctor_0__1__System_Func_TInput_System_Threading_Tasks_System_Threading_Tasks_Task_TOutput__(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, transform.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<TInput,System.Threading.Tasks.Task<TOutput>>, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
    /**
    Initializes a new  with the specified   and .

    - Parameter transform: The function to invoke with each data element received.
    - Parameter dataflowBlockOptions: The options with which to configure this  .
    */
    public init(transform : dotnet.System.Func_2<TInput,dotnet.System.Threading.Tasks.Task_1<TOutput>>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_TransformBlock_2_ctor_0__2__System_Func_TInput_System_Threading_Tasks_System_Threading_Tasks_Task_TOutput___ExecutionDataflowBlockOptions(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, transform.get_handle(), dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<TInput,TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})
    /**
    Initializes a new  with the specified  .

    - Parameter transform: The function to invoke with each data element received.
    */
    public init(transform : dotnet.System.Func_2<TInput,TOutput>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_TransformBlock_2_ctor_0__1__System_Func_TInput_TOutput_(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, transform.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<TInput,TOutput>, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
    /**
    Initializes a new  with the specified   and .

    - Parameter transform: The function to invoke with each data element received.
    - Parameter dataflowBlockOptions: The options with which to configure this  .
    */
    public init(transform : dotnet.System.Func_2<TInput,TOutput>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_TransformBlock_2_ctor_0__2__System_Func_TInput_TOutput__ExecutionDataflowBlockOptions(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, transform.get_handle(), dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_TransformBlock_2_void__Complete_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified   .

    - Parameter target: The   to which to connect this source.
    - Parameter linkOptions: A  instance that configures the link.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformBlock_2_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_TOutput__DataflowLinkOptions(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this   instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformBlock_2_String__ToString_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<TOutput>, ref TOutput)
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate value must successfully pass in order for it to be received.   may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : dotnet.System.Predicate_1<TOutput>, item : inout TOutput) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Threading_Tasks_Dataflow_TransformBlock_2_bool__TryReceive_0__2__System_Predicate_TOutput__outTOutput(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle(), nil, &_tmp_out_item);
            let _tmp2_item = TOutput(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (TOutput) throws -> Bool, item : inout TOutput) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<TOutput>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)
    /**
    Attempts to synchronously receive all available items from the .

    - Parameter items: The items received from the source.
    - Returns: 
         if one or more items could be received; otherwise, .

    */
    public func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<TOutput>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_TransformBlock_2_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_TOutput_(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<TOutput>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformBlock_2_Task__get_Completion_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_InputCount()
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.get_InputCount
    public func get_InputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformBlock_2_i32__get_InputCount_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_OutputCount()
// docid: M:System.Threading.Tasks.Dataflow.TransformBlock`2.get_OutputCount
    public func get_OutputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformBlock_2_i32__get_OutputCount_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of input items waiting to be processed by this block.

    */
    public var InputCount : Swift.Int32 {
        get {
            return try! get_InputCount();
        }
    }
    /**
    Gets the number of output items available to be received from this block.

    */
    public var OutputCount : Swift.Int32 {
        get {
            return try! get_OutputCount();
        }
    }
} // TransformBlock_2


// type: System.Threading.Tasks.Dataflow.TransformManyBlock`2
    /**
    Provides a dataflow block that invokes a provided  delegate for every data element received.

    */
public final class TransformManyBlock_2<TInput : SGBridgeGenericValue,TOutput : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_TransformManyBlock_2_get_type_handle(TInput.get_type_handle(),TOutput.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Func<TInput,System.Collections.Generic.IEnumerable<TOutput>>)
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})
    /**
    Initializes a new  with the specified function.

    - Parameter transform: The function to invoke with each data element received. All of the data from the returned  will be made available as output from this .
    */
    public init(transform : dotnet.System.Func_2<TInput,dotnet.System.Collections.Generic.IEnumerable_1<TOutput>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_TransformManyBlock_2_ctor_0__1__System_Func_TInput_System_Collections_Generic_System_Collections_Generic_IEnumerable_TOutput__(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, transform.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<TInput,System.Collections.Generic.IEnumerable<TOutput>>, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
    /**
    Initializes a new  with the specified function and .

    - Parameter transform: The function to invoke with each data element received. All of the data from the returned in the  will be made available as output from this  .
    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(transform : dotnet.System.Func_2<TInput,dotnet.System.Collections.Generic.IEnumerable_1<TOutput>>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_TransformManyBlock_2_ctor_0__2__System_Func_TInput_System_Collections_Generic_System_Collections_Generic_IEnumerable_TOutput___ExecutionDataflowBlockOptions(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, transform.get_handle(), dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<TInput,System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TOutput>>>)
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})
    /**
    Initializes a new  with the specified function.

    - Parameter transform: The function to invoke with each data element received. All of the data asynchronously returned in the  will be made available as output from this  .
    */
    public init(transform : dotnet.System.Func_2<TInput,dotnet.System.Threading.Tasks.Task_1<dotnet.System.Collections.Generic.IEnumerable_1<TOutput>>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_TransformManyBlock_2_ctor_0__1__System_Func_TInput_System_Threading_Tasks_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IEnumerable_TOutput___(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, transform.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<TInput,System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TOutput>>>, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
    /**
    Initializes a new  with the specified function and .

    - Parameter transform: The function to invoke with each data element received. All of the data asynchronously returned in the  will be made available as output from this  .
    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(transform : dotnet.System.Func_2<TInput,dotnet.System.Threading.Tasks.Task_1<dotnet.System.Collections.Generic.IEnumerable_1<TOutput>>>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_TransformManyBlock_2_ctor_0__2__System_Func_TInput_System_Threading_Tasks_System_Threading_Tasks_Task_System_Collections_Generic_System_Collections_Generic_IEnumerable_TOutput____ExecutionDataflowBlockOptions(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, transform.get_handle(), dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_TransformManyBlock_2_void__Complete_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified   .

    - Parameter target: The   to which to connect this source.
    - Parameter linkOptions: A  instance that configures the link.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformManyBlock_2_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_TOutput__DataflowLinkOptions(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this   instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformManyBlock_2_String__ToString_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<TOutput>, ref TOutput)
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate value must successfully pass in order for it to be received.   may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : dotnet.System.Predicate_1<TOutput>, item : inout TOutput) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Threading_Tasks_Dataflow_TransformManyBlock_2_bool__TryReceive_0__2__System_Predicate_TOutput__outTOutput(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle(), nil, &_tmp_out_item);
            let _tmp2_item = TOutput(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (TOutput) throws -> Bool, item : inout TOutput) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<TOutput>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // bool TryReceiveAll(ref System.Collections.Generic.IList<TOutput>)
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)
    /**
    Attempts to synchronously receive all available items from the .

    - Parameter items: The items received from the source.
    - Returns: 
         if one or more items could be received; otherwise, .

    */
    public func TryReceiveAll(items : inout dotnet.System.Collections.Generic.IList_1<TOutput>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_items = items.get_handle();
        let __return = System_Threading_Tasks_Dataflow_TransformManyBlock_2_bool__TryReceiveAll_0__1__outSystem_Collections_Generic_IList_TOutput_(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle(), &_tmp_out_items);
        let _tmp2_items = dotnet.System.Collections.Generic.IList_1<TOutput>(hndl : _tmp_out_items);
            items = _tmp2_items;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformManyBlock_2_Task__get_Completion_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_InputCount()
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.get_InputCount
    public func get_InputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformManyBlock_2_i32__get_InputCount_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_OutputCount()
// docid: M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.get_OutputCount
    public func get_OutputCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_TransformManyBlock_2_i32__get_OutputCount_0__0(TInput.get_type_handle(), TOutput.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
    /**
    Gets the number of input items waiting to be processed by this block.

    */
    public var InputCount : Swift.Int32 {
        get {
            return try! get_InputCount();
        }
    }
    /**
    Gets the number of output items available to be received from this block.

    */
    public var OutputCount : Swift.Int32 {
        get {
            return try! get_OutputCount();
        }
    }
} // TransformManyBlock_2


// type: System.Threading.Tasks.Dataflow.WriteOnceBlock`1
    /**
    Provides a buffer for receiving and storing at most one element in a network of dataflow blocks.

    */
public final class WriteOnceBlock_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_Dataflow_WriteOnceBlock_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Func<T,T>)
// docid: M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})
    /**
    Initializes a new .

    - Parameter cloningFunction: The function to use to clone the data when offered to other blocks.
    */
    public init(cloningFunction : dotnet.System.Func_2<T,T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_WriteOnceBlock_1_ctor_0__1__System_Func_T_T_(T.get_type_handle(), &__thrown, nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Func<T,T>, System.Threading.Tasks.Dataflow.DataflowBlockOptions)
// docid: M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
    /**
    Initializes a new  with the specified  .

    - Parameter cloningFunction: The function to use to clone the data when offered to other blocks.
    - Parameter dataflowBlockOptions: The options with which to configure this .
    */
    public init(cloningFunction : dotnet.System.Func_2<T,T>, dataflowBlockOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowBlockOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_Dataflow_WriteOnceBlock_1_ctor_0__2__System_Func_T_T__DataflowBlockOptions(T.get_type_handle(), &__thrown, nil, dataflowBlockOptions.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Complete()
// docid: M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete
    /**
    Signals to the  that it should not accept nor produce any more messages nor consume any more postponed messages.

    */
    public func Complete() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Dataflow_WriteOnceBlock_1_void__Complete_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IDisposable LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock<T>, System.Threading.Tasks.Dataflow.DataflowLinkOptions)
// docid: M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)
    /**
    Links the   to the specified   .

    - Parameter target: The   to which to connect this source.
    - Parameter linkOptions: A  instance that configures the link.
    - Returns: An IDisposable that, upon calling Dispose, will unlink the source from the target.

    */
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<T>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions) throws -> dotnet.System.IDisposable {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_WriteOnceBlock_1_IDisposable__LinkTo_0__2__System_Threading_Tasks_Dataflow_ITargetBlock_T__DataflowLinkOptions(T.get_type_handle(), &__thrown, self.get_handle(), target.get_handle(), linkOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IDisposable(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString
    /**
    Returns a string that represents the formatted name of this   instance.

    - Returns: A string that represents the formatted name of this   instance.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_WriteOnceBlock_1_String__ToString_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryReceive(System.Predicate<T>, ref T)
// docid: M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)
    /**
    Attempts to synchronously receive an available output item from the .

    - Parameter filter: The predicate value must successfully pass in order for it to be received.   may be , in which case all items will pass.
    - Parameter item: The item received from the source.
    - Returns: 
         if an item could be received; otherwise, .

    */
    public func TryReceive(filter : dotnet.System.Predicate_1<T>, item : inout T) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_item = item.to_gval();
        let __return = System_Threading_Tasks_Dataflow_WriteOnceBlock_1_bool__TryReceive_0__2__System_Predicate_T__outT(T.get_type_handle(), &__thrown, self.get_handle(), nil, &_tmp_out_item);
            let _tmp2_item = T(gval: _tmp_out_item);
            item = _tmp2_item;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // delegate closure overload
    public func TryReceive(filter : @escaping (T) throws -> Bool, item : inout T) throws -> Bool {
        let del_filter = try dotnet.System.Predicate_1<T>(filter);
        return try TryReceive(filter: del_filter, item: &item);
    }
    // [IsSpecialName] System.Threading.Tasks.Task get_Completion()
// docid: M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.get_Completion
    public func get_Completion() throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Dataflow_WriteOnceBlock_1_Task__get_Completion_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    /**
    Gets a  that represents the asynchronous operation and completion of the dataflow block.

    */
    public var Completion : dotnet.System.Threading.Tasks.Task {
        get {
            return try! get_Completion();
        }
    }
} // WriteOnceBlock_1


}




public protocol System_Threading_Tasks_Dataflow_IDataflowBlock
    :
    SGBridgeGetHandle
{
}

public protocol System_Threading_Tasks_Dataflow_IPropagatorBlock_2
    :
    System_Threading_Tasks_Dataflow_ISourceBlock_1,
    System_Threading_Tasks_Dataflow_ITargetBlock_1
    where
        TOutput_ISourceBlock_1 == TOutput_IPropagatorBlock_2,
        TInput_ITargetBlock_1 == TInput_IPropagatorBlock_2
{
    associatedtype TInput_IPropagatorBlock_2;
    associatedtype TOutput_IPropagatorBlock_2;
}

public protocol System_Threading_Tasks_Dataflow_IReceivableSourceBlock_1
    :
    System_Threading_Tasks_Dataflow_ISourceBlock_1
    where
        TOutput_ISourceBlock_1 == TOutput_IReceivableSourceBlock_1
{
    associatedtype TOutput_IReceivableSourceBlock_1;
}

public protocol System_Threading_Tasks_Dataflow_ISourceBlock_1
    :
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    associatedtype TOutput_ISourceBlock_1 : SGBridgeGenericValue;
}

public protocol System_Threading_Tasks_Dataflow_ITargetBlock_1
    :
    System_Threading_Tasks_Dataflow_IDataflowBlock
{
    associatedtype TInput_ITargetBlock_1 : SGBridgeGenericValue;
}

// EXTENSION METHOD System.IObservable<TOutput> AsObservable<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func AsObservable() throws -> dotnet.System.IObservable_1<TOutput> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable(source: self);
    }
}

// EXTENSION METHOD System.IObserver<TInput> AsObserver<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>)
extension dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1 {
    public func AsObserver() throws -> dotnet.System.IObserver_1<TInput> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver(target: self);
    }
}

// EXTENSION METHOD System.IDisposable LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>) throws -> dotnet.System.IDisposable {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo(source: self, target: target);
    }
}

// EXTENSION METHOD System.IDisposable LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Predicate<TOutput>)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>, predicate : dotnet.System.Predicate_1<TOutput>) throws -> dotnet.System.IDisposable {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo(source: self, target: target, predicate: predicate);
    }
    // delegate closure overload
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>, predicate : @escaping (TOutput) throws -> Bool) throws -> dotnet.System.IDisposable {
        let del_predicate = try dotnet.System.Predicate_1<TOutput>(predicate);
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo(source: self, target: target, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.IDisposable LinkTo<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>, System.Threading.Tasks.Dataflow.DataflowLinkOptions, System.Predicate<TOutput>)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions, predicate : dotnet.System.Predicate_1<TOutput>) throws -> dotnet.System.IDisposable {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo(source: self, target: target, linkOptions: linkOptions, predicate: predicate);
    }
    // delegate closure overload
    public func LinkTo(target : dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1<TOutput>, linkOptions : dotnet.System.Threading.Tasks.Dataflow.DataflowLinkOptions, predicate : @escaping (TOutput) throws -> Bool) throws -> dotnet.System.IDisposable {
        let del_predicate = try dotnet.System.Predicate_1<TOutput>(predicate);
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo(source: self, target: target, linkOptions: linkOptions, predicate: del_predicate);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<bool> OutputAvailableAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func OutputAvailableAsync() throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync(source: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<bool> OutputAvailableAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func OutputAvailableAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync(source: self, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD bool Post<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput)
extension dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1 {
    public func Post(item : TInput) throws -> Bool {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.Post(target: self, item: item);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func ReceiveAsync() throws -> dotnet.System.Threading.Tasks.Task_1<TOutput> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync(source: self);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func ReceiveAsync(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<TOutput> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync(source: self, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan)
// TODO COPE extension method (span) System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan)

// EXTENSION METHOD System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan, System.Threading.CancellationToken)
// TODO COPE extension method (span) System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan, System.Threading.CancellationToken)

// EXTENSION METHOD TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func Receive() throws -> TOutput {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.Receive(source: self);
    }
}

// EXTENSION METHOD TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.Threading.CancellationToken)
extension dotnet.System.Threading.Tasks.Dataflow.ISourceBlock_1 {
    public func Receive(cancellationToken : dotnet.System.Threading.CancellationToken) throws -> TOutput {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.Receive(source: self, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan)
// TODO COPE extension method (span) TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan)

// EXTENSION METHOD TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan, System.Threading.CancellationToken)
// TODO COPE extension method (span) TOutput Receive<TOutput>(System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>, System.TimeSpan, System.Threading.CancellationToken)

// EXTENSION METHOD System.Threading.Tasks.Task<bool> SendAsync<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput)
extension dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1 {
    public func SendAsync(item : TInput) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync(target: self, item: item);
    }
}

// EXTENSION METHOD System.Threading.Tasks.Task<bool> SendAsync<TInput>(System.Threading.Tasks.Dataflow.ITargetBlock<TInput>, TInput, System.Threading.CancellationToken)
extension dotnet.System.Threading.Tasks.Dataflow.ITargetBlock_1 {
    public func SendAsync(item : TInput, cancellationToken : dotnet.System.Threading.CancellationToken) throws -> dotnet.System.Threading.Tasks.Task_1<Bool> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync(target: self, item: item, cancellationToken: cancellationToken);
    }
}

// EXTENSION METHOD bool TryReceive<TOutput>(System.Threading.Tasks.Dataflow.IReceivableSourceBlock<TOutput>, ref TOutput)
extension dotnet.System.Threading.Tasks.Dataflow.IReceivableSourceBlock_1 {
    public func TryReceive(item : inout TOutput) throws -> Bool {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive(source: self, item: &item);
    }
}

// EXTENSION METHOD System.Collections.Generic.IAsyncEnumerable<TOutput> ReceiveAllAsync<TOutput>(System.Threading.Tasks.Dataflow.IReceivableSourceBlock<TOutput>, System.Threading.CancellationToken)
extension dotnet.System.Threading.Tasks.Dataflow.IReceivableSourceBlock_1 {
    public func ReceiveAllAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Collections.Generic.IAsyncEnumerable_1<TOutput> {
        return try dotnet.System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAllAsync(source: self, cancellationToken: cancellationToken);
    }
}

