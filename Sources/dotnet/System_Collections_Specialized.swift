// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Collections
// System.Collections.Specialized
extension System.Collections.Specialized {
// type: System.Collections.Specialized.BitVector32
// boxed value type
    /**
    Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.

    */
public final class BitVector32
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_BitVector32_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the value of the  as an integer.

    */
    public var Data : Swift.Int32 {
        get {
            return try! get_Data();
        }
    }
    // .ctor(System.Collections.Specialized.BitVector32)
// docid: M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)
    /**
    Initializes a new instance of the  structure containing the data represented in an existing  structure.

    - Parameter value: A  structure that contains the data to copy.
    */
    public init(value : dotnet.System.Collections.Specialized.BitVector32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_BitVector32_ctor_0__1__BitVector32(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)
    /**
    Initializes a new instance of the  structure containing the data represented in an integer.

    - Parameter data: An integer representing the data of the new .
    */
    public init(data : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_BitVector32_ctor_0__1__i32(&__thrown, data);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Collections_Specialized_BitVector32_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Int32 CreateMask()
// docid: M:System.Collections.Specialized.BitVector32.CreateMask
    /**
    Creates the first mask in a series of masks that can be used to retrieve individual bits in a  that is set up as bit flags.

    - Returns: A mask that isolates the first bit flag in the .

    */
    public class func CreateMask() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_i32__CreateMask_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 CreateMask(System.Int32)
// docid: M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)
    /**
    Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a  that is set up as bit flags.

    - Parameter previous: The mask that indicates the previous bit flag.
    - Returns: A mask that isolates the bit flag following the one that  points to in .

    */
    public class func CreateMask(previous : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_i32__CreateMask_0__1__i32(&__thrown, previous);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Collections.Specialized.BitVector32.Section CreateSection(System.Int16)
// docid: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)
    /**
    Creates the first  in a series of sections that contain small integers.

    - Parameter maxValue: A 16-bit signed integer that specifies the maximum value for the new .
    - Returns: A  that can hold a number from zero to .

    */
    public class func CreateSection(maxValue : Swift.Int16) throws -> dotnet.System.Collections.Specialized.BitVector32_Section {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_BitVector32_Section__CreateSection_0__1__i16(&__thrown, maxValue);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.BitVector32_Section(hndl : __return);
        }
    }
    // System.Collections.Specialized.BitVector32.Section CreateSection(System.Int16, System.Collections.Specialized.BitVector32.Section)
// docid: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)
    /**
    Creates a new  following the specified  in a series of sections that contain small integers.

    - Parameter maxValue: A 16-bit signed integer that specifies the maximum value for the new .
    - Parameter previous: The previous  in the .
    - Returns: A  that can hold a number from zero to .

    */
    public class func CreateSection(maxValue : Swift.Int16, previous : dotnet.System.Collections.Specialized.BitVector32_Section) throws -> dotnet.System.Collections.Specialized.BitVector32_Section {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_BitVector32_Section__CreateSection_0__2__i16_BitVector32_Section(&__thrown, maxValue, previous.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.BitVector32_Section(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Collections.Specialized.BitVector32.Equals(System.Object)
    /**
    Determines whether the specified object is equal to the .

    - Parameter o: The object to compare with the current .
    - Returns: 
         if the specified object is equal to the ; otherwise, .

    */
    public func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Collections.Specialized.BitVector32.GetHashCode
    /**
    Serves as a hash function for the .

    - Returns: A hash code for the .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Collections.Specialized.BitVector32.ToString
    /**
    Returns a string that represents the current .

    - Returns: A string that represents the current .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Collections.Specialized.BitVector32)
// docid: M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)
    /**
    Returns a string that represents the specified .

    - Parameter value: The  to represent.
    - Returns: A string that represents the specified .

    */
    public class func ToString(value : dotnet.System.Collections.Specialized.BitVector32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_String__ToString_0__1__BitVector32(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Data()
// docid: M:System.Collections.Specialized.BitVector32.get_Data
    public func get_Data() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_i32__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Item(System.Collections.Specialized.BitVector32.Section)
// docid: M:System.Collections.Specialized.BitVector32.get_Item(System.Collections.Specialized.BitVector32.Section)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(section : dotnet.System.Collections.Specialized.BitVector32_Section) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_i32__get_Item_0__1__BitVector32_Section(&__thrown, self.get_handle(), section.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Item(System.Collections.Specialized.BitVector32.Section, System.Int32)
// docid: M:System.Collections.Specialized.BitVector32.set_Item(System.Collections.Specialized.BitVector32.Section,System.Int32)
    public func set_Item(section : dotnet.System.Collections.Specialized.BitVector32_Section, value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_BitVector32_void__set_Item_0__2__BitVector32_Section_i32(&__thrown, self.get_handle(), section.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Item(System.Int32)
// docid: M:System.Collections.Specialized.BitVector32.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(bit : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_bool__get_Item_0__1__i32(&__thrown, self.get_handle(), bit);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, bool)
// docid: M:System.Collections.Specialized.BitVector32.set_Item(System.Int32,System.Boolean)
    public func set_Item(bit : Swift.Int32, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_BitVector32_void__set_Item_0__2__i32_bool(&__thrown, self.get_handle(), bit, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // BitVector32


// type: System.Collections.Specialized.BitVector32+Section
// boxed value type
    /**
    Represents a section of the vector that can contain an integer number.

    */
public final class BitVector32_Section
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_BitVector32_Section_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets a mask that isolates this section within the .

    */
    public var Mask : Swift.Int16 {
        get {
            return try! get_Mask();
        }
    }
    /**
    Gets the offset of this section from the start of the .

    */
    public var Offset : Swift.Int16 {
        get {
            return try! get_Offset();
        }
    }
    public override init() {
        let h = System_Collections_Specialized_BitVector32_Section_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Collections.Specialized.BitVector32.Section)
// docid: M:System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)
    /**
    Determines whether the specified  object is the same as the current  object.

    - Parameter obj: The  object to compare with the current  object.
    - Returns: 
         if the  parameter is the same as the current  object; otherwise .

    */
    public func Equals(obj : dotnet.System.Collections.Specialized.BitVector32_Section) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_bool__Equals_0__1__BitVector32_Section(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Collections.Specialized.BitVector32.Section.Equals(System.Object)
    /**
    Determines whether the specified object is the same as the current  object.

    - Parameter o: The object to compare with the current .
    - Returns: 
         if the specified object is the same as the current  object; otherwise, .

    */
    public func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Collections.Specialized.BitVector32.Section.GetHashCode
    /**
    Serves as a hash function for the current , suitable for hashing algorithms and data structures, such as a hash table.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.Collections.Specialized.BitVector32.Section, System.Collections.Specialized.BitVector32.Section)
// docid: M:System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)
    /**
    Determines whether two specified  objects are equal.

    - Parameter a: A  object.
    - Parameter b: A  object.
    - Returns: 
         if the  and  parameters represent the same  object, otherwise, .

    */
    public class func op_Equality(a : dotnet.System.Collections.Specialized.BitVector32_Section, b : dotnet.System.Collections.Specialized.BitVector32_Section) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_bool__op_Equality_0__2__BitVector32_Section_BitVector32_Section(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.Collections.Specialized.BitVector32.Section, System.Collections.Specialized.BitVector32.Section)
// docid: M:System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)
    /**
    Determines whether two  objects have different values.

    - Parameter a: A  object.
    - Parameter b: A  object.
    - Returns: 
         if the  and  parameters represent different  objects; otherwise, .

    */
    public class func op_Inequality(a : dotnet.System.Collections.Specialized.BitVector32_Section, b : dotnet.System.Collections.Specialized.BitVector32_Section) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_bool__op_Inequality_0__2__BitVector32_Section_BitVector32_Section(&__thrown, a.get_handle(), b.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Collections.Specialized.BitVector32.Section.ToString
    /**
    Returns a string that represents the current .

    - Returns: A string that represents the current .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Collections.Specialized.BitVector32.Section)
// docid: M:System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)
    /**
    Returns a string that represents the specified .

    - Parameter value: The  to represent.
    - Returns: A string that represents the specified .

    */
    public class func ToString(value : dotnet.System.Collections.Specialized.BitVector32_Section) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_String__ToString_0__1__BitVector32_Section(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int16 get_Mask()
// docid: M:System.Collections.Specialized.BitVector32.Section.get_Mask
    public func get_Mask() throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_i16__get_Mask_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int16 get_Offset()
// docid: M:System.Collections.Specialized.BitVector32.Section.get_Offset
    public func get_Offset() throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_BitVector32_Section_i16__get_Offset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
} // BitVector32_Section


// type: System.Collections.Specialized.HybridDictionary
    /**
    Implements  by using a  while the collection is small, and then switching to a  when the collection gets large.

    */
open class HybridDictionary
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_HybridDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Specialized.HybridDictionary.#ctor
    /**
    Creates an empty case-sensitive .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_HybridDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
    /**
    Creates an empty  with the specified case sensitivity.

    - Parameter caseInsensitive: A Boolean that denotes whether the  is case-insensitive.
    */
    public init(caseInsensitive : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_HybridDictionary_ctor_0__1__bool(&__thrown, Swift.Int32(caseInsensitive ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
    /**
    Creates a case-sensitive  with the specified initial size.

    - Parameter initialSize: The approximate number of entries that the  can initially contain.
    */
    public init(initialSize : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_HybridDictionary_ctor_0__1__i32(&__thrown, initialSize);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, bool)
// docid: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
    /**
    Creates a  with the specified initial size and case sensitivity.

    - Parameter initialSize: The approximate number of entries that the  can initially contain.
    - Parameter caseInsensitive: A Boolean that denotes whether the  is case-insensitive.
    */
    public init(initialSize : Swift.Int32, caseInsensitive : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_HybridDictionary_ctor_0__2__i32_bool(&__thrown, initialSize, Swift.Int32(caseInsensitive ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Object, System.Object)
// docid: M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
    /**
    Adds an entry with the specified key and value into the .

    - Parameter key: The key of the entry to add.
    - Parameter value: The value of the entry to add. The value can be .
    */
    open /* method final */ func Add(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_HybridDictionary_void__Add_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Specialized.HybridDictionary.Clear
    /**
    Removes all entries from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_HybridDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Collections.Specialized.HybridDictionary.Contains(System.Object)
    /**
    Determines whether the  contains a specific key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the  contains an entry with the specified key; otherwise, .

    */
    open /* method final */ func Contains(key : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_bool__Contains_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
    /**
    Copies the  entries to a one-dimensional  instance at the specified index.

    - Parameter array: The one-dimensional  that is the destination of the  objects copied from . The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_HybridDictionary_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IDictionaryEnumerator GetEnumerator()
// docid: M:System.Collections.Specialized.HybridDictionary.GetEnumerator
    /**
    Returns an  that iterates through the .

    - Returns: An  for the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IDictionaryEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_IDictionaryEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IDictionaryEnumerator(hndl : __return);
        }
    }
    // void Remove(System.Object)
// docid: M:System.Collections.Specialized.HybridDictionary.Remove(System.Object)
    /**
    Removes the entry with the specified key from the .

    - Parameter key: The key of the entry to remove.
    */
    open /* method final */ func Remove(key : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_HybridDictionary_void__Remove_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Specialized.HybridDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsFixedSize()
// docid: M:System.Collections.Specialized.HybridDictionary.get_IsFixedSize
    open /* method final */ func get_IsFixedSize() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_bool__get_IsFixedSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Collections.Specialized.HybridDictionary.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Collections.Specialized.HybridDictionary.get_IsSynchronized
    open /* method final */ func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Keys()
// docid: M:System.Collections.Specialized.HybridDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_ICollection__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Collections.Specialized.HybridDictionary.get_SyncRoot
    open /* method final */ func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Values()
// docid: M:System.Collections.Specialized.HybridDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_ICollection__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Object)
// docid: M:System.Collections.Specialized.HybridDictionary.get_Item(System.Object)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_HybridDictionary_Object__get_Item_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Object, System.Object)
// docid: M:System.Collections.Specialized.HybridDictionary.set_Item(System.Object,System.Object)
    open /* method final */ func set_Item(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_HybridDictionary_void__set_Item_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of key/value pairs contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether the  has a fixed size.

    */
    public var IsFixedSize : Bool {
        get {
            return try! get_IsFixedSize();
        }
    }
    /**
    Gets a value indicating whether the  is read-only.

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets a value indicating whether the  is synchronized (thread safe).

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an  containing the keys in the .

    */
    public var Keys : dotnet.System.Collections.ICollection {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the .

    */
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
    /**
    Gets an  containing the values in the .

    */
    public var Values : dotnet.System.Collections.ICollection {
        get {
            return try! get_Values();
        }
    }
} // HybridDictionary


// type: System.Collections.Specialized.IOrderedDictionary
    /**
    Represents an indexed collection of key/value pairs.

    */
open class IOrderedDictionary
    :
    SGBridgeGenericValue,
    System_Collections_Specialized_IOrderedDictionary,
    System_Collections_IDictionary
{
    open class func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_IOrderedDictionary_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.IDictionaryEnumerator GetEnumerator()
// docid: M:System.Collections.Specialized.IOrderedDictionary.GetEnumerator
    /**
    Returns an enumerator that iterates through the  collection.

    - Returns: An  for the entire  collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IDictionaryEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_IOrderedDictionary_IDictionaryEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IDictionaryEnumerator(hndl : __return);
        }
    }
    // void Insert(System.Int32, System.Object, System.Object)
// docid: M:System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
    /**
    Inserts a key/value pair into the collection at the specified index.

    - Parameter index: The zero-based index at which the key/value pair should be inserted.
    - Parameter key: The object to use as the key of the element to add.
    - Parameter value: The object to use as the value of the element to add.  The value can be .
    */
    open func Insert(index : Swift.Int32, key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_IOrderedDictionary_void__Insert_0__3__i32_Object_Object(&__thrown, self.get_handle(), index, key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
    /**
    Removes the element at the specified index.

    - Parameter index: The zero-based index of the element to remove.
    */
    open func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_IOrderedDictionary_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Collections.Specialized.IOrderedDictionary.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_IOrderedDictionary_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Object)
// docid: M:System.Collections.Specialized.IOrderedDictionary.set_Item(System.Int32,System.Object)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_IOrderedDictionary_void__set_Item_0__2__i32_Object(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IOrderedDictionary


// type: System.Collections.Specialized.ListDictionary
    /**
    Implements  using a singly linked list. Recommended for collections that typically include fewer than 10 items.

    */
open class ListDictionary
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_ListDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Specialized.ListDictionary.#ctor
    /**
    Creates an empty  using the default comparer.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_ListDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IComparer)
// docid: M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
    /**
    Creates an empty  using the specified comparer.

    - Parameter comparer: The  to use to determine whether two keys are equal.  
  
 -or-  
  
  to use the default comparer, which is each key's implementation of .
    */
    public init(comparer : Optional<dotnet.System.Collections.IComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_ListDictionary_ctor_0__1__IComparer(&__thrown, comparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Object, System.Object)
// docid: M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
    /**
    Adds an entry with the specified key and value into the .

    - Parameter key: The key of the entry to add.
    - Parameter value: The value of the entry to add. The value can be .
    */
    open /* method final */ func Add(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_ListDictionary_void__Add_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Specialized.ListDictionary.Clear
    /**
    Removes all entries from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_ListDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Collections.Specialized.ListDictionary.Contains(System.Object)
    /**
    Determines whether the  contains a specific key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the  contains an entry with the specified key; otherwise, .

    */
    open /* method final */ func Contains(key : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_bool__Contains_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
    /**
    Copies the  entries to a one-dimensional  instance at the specified index.

    - Parameter array: The one-dimensional  that is the destination of the  objects copied from . The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_ListDictionary_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IDictionaryEnumerator GetEnumerator()
// docid: M:System.Collections.Specialized.ListDictionary.GetEnumerator
    /**
    Returns an  that iterates through the .

    - Returns: An  for the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IDictionaryEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_IDictionaryEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IDictionaryEnumerator(hndl : __return);
        }
    }
    // void Remove(System.Object)
// docid: M:System.Collections.Specialized.ListDictionary.Remove(System.Object)
    /**
    Removes the entry with the specified key from the .

    - Parameter key: The key of the entry to remove.
    */
    open /* method final */ func Remove(key : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_ListDictionary_void__Remove_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Specialized.ListDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsFixedSize()
// docid: M:System.Collections.Specialized.ListDictionary.get_IsFixedSize
    open /* method final */ func get_IsFixedSize() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_bool__get_IsFixedSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Collections.Specialized.ListDictionary.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Collections.Specialized.ListDictionary.get_IsSynchronized
    open /* method final */ func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Keys()
// docid: M:System.Collections.Specialized.ListDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_ICollection__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Collections.Specialized.ListDictionary.get_SyncRoot
    open /* method final */ func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Values()
// docid: M:System.Collections.Specialized.ListDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_ICollection__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Object)
// docid: M:System.Collections.Specialized.ListDictionary.get_Item(System.Object)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_ListDictionary_Object__get_Item_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Object, System.Object)
// docid: M:System.Collections.Specialized.ListDictionary.set_Item(System.Object,System.Object)
    open /* method final */ func set_Item(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_ListDictionary_void__set_Item_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of key/value pairs contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether the  has a fixed size.

    */
    public var IsFixedSize : Bool {
        get {
            return try! get_IsFixedSize();
        }
    }
    /**
    Gets a value indicating whether the  is read-only.

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets a value indicating whether the  is synchronized (thread safe).

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an  containing the keys in the .

    */
    public var Keys : dotnet.System.Collections.ICollection {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the .

    */
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
    /**
    Gets an  containing the values in the .

    */
    public var Values : dotnet.System.Collections.ICollection {
        get {
            return try! get_Values();
        }
    }
} // ListDictionary


// type: System.Collections.Specialized.NameObjectCollectionBase
    /**
    Provides the  base class for a collection of associated  keys and  values that can be accessed either with the key or with the index.

    */
open class NameObjectCollectionBase
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_NameObjectCollectionBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An  for the  instance.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameObjectCollectionBase_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Implements the  interface and returns the data needed to serialize the  instance.

    - Parameter info: A  object that contains the information required to serialize the  instance.
    - Parameter context: A  object that contains the source and destination of the serialized stream associated with the  instance.
    */
    open func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameObjectCollectionBase_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnDeserialization(System.Object)
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
    /**
    Implements the  interface and raises the deserialization event when the deserialization is complete.

    - Parameter sender: The source of the deserialization event.
    */
    open func OnDeserialization(sender : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameObjectCollectionBase_void__OnDeserialization_0__1__Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameObjectCollectionBase_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.NameObjectCollectionBase.KeysCollection get_Keys()
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.Specialized.NameObjectCollectionBase_KeysCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameObjectCollectionBase_NameObjectCollectionBase_KeysCollection__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.NameObjectCollectionBase_KeysCollection(hndl : __return);
        }
    }
    /**
    Gets the number of key/value pairs contained in the  instance.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a  instance that contains all the keys in the  instance.

    */
    open var Keys : dotnet.System.Collections.Specialized.NameObjectCollectionBase_KeysCollection {
        get {
            return try! get_Keys();
        }
    }
} // NameObjectCollectionBase


// type: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection
    /**
    Represents a collection of the  keys of a collection.

    */
open class NameObjectCollectionBase_KeysCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_NameObjectCollectionBase_KeysCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String Get(System.Int32)
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)
    /**
    Gets the key at the specified index of the collection.

    - Parameter index: The zero-based index of the key to get from the collection.
    - Returns: A  that contains the key at the specified index of the collection.

    */
    open func Get(index : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameObjectCollectionBase_KeysCollection_String__Get_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An  for the .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameObjectCollectionBase_KeysCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameObjectCollectionBase_KeysCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Item(System.Int32)
// docid: M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameObjectCollectionBase_KeysCollection_String__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of keys in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // NameObjectCollectionBase_KeysCollection


// type: System.Collections.Specialized.NameValueCollection
    /**
    Represents a collection of associated  keys and  values that can be accessed either with the key or with the index.

    */
open class NameValueCollection
    :
    dotnet.System.Collections.Specialized.NameObjectCollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_NameValueCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Specialized.NameValueCollection.#ctor
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NameValueCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEqualityComparer)
// docid: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity, and uses the specified  object.

    - Parameter equalityComparer: The  object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.
    */
    public init(equalityComparer : Optional<dotnet.System.Collections.IEqualityComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NameValueCollection_ctor_0__1__IEqualityComparer(&__thrown, equalityComparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IHashCodeProvider, System.Collections.IComparer)
// docid: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity and uses the specified hash code provider and the specified comparer.

    - Parameter hashProvider: The  that will supply the hash codes for all keys in the .
    - Parameter comparer: The  to use to determine whether two keys are equal.
    */
    public init(hashProvider : Optional<dotnet.System.Collections.IHashCodeProvider>, comparer : Optional<dotnet.System.Collections.IComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NameValueCollection_ctor_0__2__IHashCodeProvider_IComparer(&__thrown, hashProvider?.get_handle() ?? nil, comparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Specialized.NameValueCollection)
// docid: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)
    /**
    Copies the entries from the specified  to a new  with the same initial capacity as the number of entries copied and using the same hash code provider and the same comparer as the source collection.

    - Parameter col: The  to copy to the new  instance.
    */
    public init(col : dotnet.System.Collections.Specialized.NameValueCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NameValueCollection_ctor_0__1__NameValueCollection(&__thrown, col.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.

    - Parameter capacity: The initial number of entries that the  can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NameValueCollection_ctor_0__1__i32(&__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.IEqualityComparer)
// docid: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and uses the specified  object.

    - Parameter capacity: The initial number of entries that the  object can contain.
    - Parameter equalityComparer: The  object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.
    */
    public init(capacity : Swift.Int32, equalityComparer : Optional<dotnet.System.Collections.IEqualityComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NameValueCollection_ctor_0__2__i32_IEqualityComparer(&__thrown, capacity, equalityComparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.IHashCodeProvider, System.Collections.IComparer)
// docid: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity and uses the specified hash code provider and the specified comparer.

    - Parameter capacity: The initial number of entries that the  can contain.
    - Parameter hashProvider: The  that will supply the hash codes for all keys in the .
    - Parameter comparer: The  to use to determine whether two keys are equal.
    */
    public init(capacity : Swift.Int32, hashProvider : Optional<dotnet.System.Collections.IHashCodeProvider>, comparer : Optional<dotnet.System.Collections.IComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NameValueCollection_ctor_0__3__i32_IHashCodeProvider_IComparer(&__thrown, capacity, hashProvider?.get_handle() ?? nil, comparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.Specialized.NameValueCollection)
// docid: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)
    /**
    Copies the entries from the specified  to a new  with the specified initial capacity or the same initial capacity as the number of entries copied, whichever is greater, and using the default case-insensitive hash code provider and the default case-insensitive comparer.

    - Parameter capacity: The initial number of entries that the  can contain.
    - Parameter col: The  to copy to the new  instance.
    */
    public init(capacity : Swift.Int32, col : dotnet.System.Collections.Specialized.NameValueCollection) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_NameValueCollection_ctor_0__2__i32_NameValueCollection(&__thrown, capacity, col.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Collections.Specialized.NameValueCollection)
// docid: M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)
    /**
    Copies the entries in the specified  to the current .

    - Parameter c: The  to copy to the current .
    */
    open func Add(c : dotnet.System.Collections.Specialized.NameValueCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameValueCollection_void__Add_0__1__NameValueCollection(&__thrown, self.get_handle(), c.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String, System.String)
// docid: M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)
    /**
    Adds an entry with the specified name and value to the .

    - Parameter name: The  key of the entry to add. The key can be .
    - Parameter value: The  value of the entry to add. The value can be .
    */
    open func Add(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameValueCollection_void__Add_0__2__String_String(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Specialized.NameValueCollection.Clear
    /**
    Invalidates the cached arrays and removes all entries from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameValueCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the entire  to a compatible one-dimensional , starting at the specified index of the target array.

    - Parameter dest: The one-dimensional  that is the destination of the elements copied from . The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open func CopyTo(dest : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameValueCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), dest.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String Get(System.Int32)
// docid: M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)
    /**
    Gets the values at the specified index of the  combined into one comma-separated list.

    - Parameter index: The zero-based index of the entry that contains the values to get from the collection.
    - Returns: A  that contains a comma-separated list of the values at the specified index of the , if found; otherwise, .

    */
    open func Get(index : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_String__Get_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String Get(System.String)
// docid: M:System.Collections.Specialized.NameValueCollection.Get(System.String)
    /**
    Gets the values associated with the specified key from the  combined into one comma-separated list.

    - Parameter name: The  key of the entry that contains the values to get. The key can be .
    - Returns: A  that contains a comma-separated list of the values associated with the specified key from the , if found; otherwise, .

    */
    open func Get(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_String__Get_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetKey(System.Int32)
// docid: M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)
    /**
    Gets the key at the specified index of the .

    - Parameter index: The zero-based index of the key to get from the collection.
    - Returns: A  that contains the key at the specified index of the , if found; otherwise, .

    */
    open func GetKey(index : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_String__GetKey_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String[] GetValues(System.Int32)
// docid: M:System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)
    /**
    Gets the values at the specified index of the .

    - Parameter index: The zero-based index of the entry that contains the values to get from the collection.
    - Returns: A  array that contains the values at the specified index of the , if found; otherwise, .

    */
    open func GetValues(index : Swift.Int32) throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_StringArray__GetValues_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String[] GetValues(System.String)
// docid: M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)
    /**
    Gets the values associated with the specified key from the .

    - Parameter name: The  key of the entry that contains the values to get. The key can be .
    - Returns: A  array that contains the values associated with the specified key from the , if found; otherwise, .

    */
    open func GetValues(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System_Arr<dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_StringArray__GetValues_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System_Arr<dotnet.System.String>(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool HasKeys()
// docid: M:System.Collections.Specialized.NameValueCollection.HasKeys
    /**
    Gets a value indicating whether the  contains keys that are not .

    - Returns: 
         if the  contains keys that are not ; otherwise, .

    */
    open func HasKeys() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_bool__HasKeys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Remove(System.String)
// docid: M:System.Collections.Specialized.NameValueCollection.Remove(System.String)
    /**
    Removes the entries with the specified key from the  instance.

    - Parameter name: The  key of the entry to remove. The key can be .
    */
    open func Remove(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameValueCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Set(System.String, System.String)
// docid: M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)
    /**
    Sets the value of an entry in the .

    - Parameter name: The  key of the entry to add the new value to. The key can be .
    - Parameter value: The  that represents the new value to add to the specified entry. The value can be .
    */
    open func Set(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameValueCollection_void__Set_0__2__String_String(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String[] get_AllKeys()
// docid: M:System.Collections.Specialized.NameValueCollection.get_AllKeys
    open func get_AllKeys() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_StringArray__get_AllKeys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.Int32)
// docid: M:System.Collections.Specialized.NameValueCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_String__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:System.Collections.Specialized.NameValueCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_NameValueCollection_String__get_Item_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.String)
// docid: M:System.Collections.Specialized.NameValueCollection.set_Item(System.String,System.String)
    open func set_Item(name : Optional<dotnet.System.String>, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_NameValueCollection_void__set_Item_0__2__String_String(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets all the keys in the .

    */
    open var AllKeys : dotnet.System_Arr<dotnet.System.String> {
        get {
            return try! get_AllKeys();
        }
    }
} // NameValueCollection


// type: System.Collections.Specialized.OrderedDictionary
    /**
    Represents a collection of key/value pairs that are accessible by the key or index.

    */
open class OrderedDictionary
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IDictionary,
    System_Collections_Specialized_IOrderedDictionary,
    System_Runtime_Serialization_IDeserializationCallback,
    System_Runtime_Serialization_ISerializable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_OrderedDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Specialized.OrderedDictionary.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_OrderedDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IEqualityComparer)
// docid: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)
    /**
    Initializes a new instance of the  class using the specified comparer.

    - Parameter comparer: The  to use to determine whether two keys are equal.  
  
 -or-  
  
  to use the default comparer, which is each key's implementation of .
    */
    public init(comparer : Optional<dotnet.System.Collections.IEqualityComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_OrderedDictionary_ctor_0__1__IEqualityComparer(&__thrown, comparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class using the specified initial capacity.

    - Parameter capacity: The initial number of elements that the  collection can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_OrderedDictionary_ctor_0__1__i32(&__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Collections.IEqualityComparer)
// docid: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)
    /**
    Initializes a new instance of the  class using the specified initial capacity and comparer.

    - Parameter capacity: The initial number of elements that the  collection can contain.
    - Parameter comparer: The  to use to determine whether two keys are equal.  
  
 -or-  
  
  to use the default comparer, which is each key's implementation of .
    */
    public init(capacity : Swift.Int32, comparer : Optional<dotnet.System.Collections.IEqualityComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_OrderedDictionary_ctor_0__2__i32_IEqualityComparer(&__thrown, capacity, comparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Object, System.Object)
// docid: M:System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)
    /**
    Adds an entry with the specified key and value into the  collection with the lowest available index.

    - Parameter key: The key of the entry to add.
    - Parameter value: The value of the entry to add. This value can be .
    */
    open /* method final */ func Add(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__Add_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Specialized.OrderedDictionary AsReadOnly()
// docid: M:System.Collections.Specialized.OrderedDictionary.AsReadOnly
    /**
    Returns a read-only copy of the current  collection.

    - Returns: A read-only copy of the current  collection.

    */
    open func AsReadOnly() throws -> dotnet.System.Collections.Specialized.OrderedDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_OrderedDictionary__AsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.OrderedDictionary(hndl : __return);
        }
    }
    // void Clear()
// docid: M:System.Collections.Specialized.OrderedDictionary.Clear
    /**
    Removes all elements from the  collection.

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
    /**
    Determines whether the  collection contains a specific key.

    - Parameter key: The key to locate in the  collection.
    - Returns: 
         if the  collection contains an element with the specified key; otherwise, .

    */
    open /* method final */ func Contains(key : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_bool__Contains_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)
    /**
    Copies the  elements to a one-dimensional  object at the specified index.

    - Parameter array: The one-dimensional  object that is the destination of the  objects copied from  collection. The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IDictionaryEnumerator GetEnumerator()
// docid: M:System.Collections.Specialized.OrderedDictionary.GetEnumerator
    /**
    Returns an  object that iterates through the  collection.

    - Returns: An  object for the  collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IDictionaryEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_IDictionaryEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IDictionaryEnumerator(hndl : __return);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Collections.Specialized.OrderedDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Implements the  interface and returns the data needed to serialize the  collection.

    - Parameter info: A  object containing the information required to serialize the  collection.
    - Parameter context: A  object containing the source and destination of the serialized stream associated with the .
    */
    open func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Insert(System.Int32, System.Object, System.Object)
// docid: M:System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)
    /**
    Inserts a new entry into the  collection with the specified key and value at the specified index.

    - Parameter index: The zero-based index at which the element should be inserted.
    - Parameter key: The key of the entry to add.
    - Parameter value: The value of the entry to add. The value can be .
    */
    open /* method final */ func Insert(index : Swift.Int32, key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__Insert_0__3__i32_Object_Object(&__thrown, self.get_handle(), index, key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Object)
// docid: M:System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
    /**
    Removes the entry with the specified key from the  collection.

    - Parameter key: The key of the entry to remove.
    */
    open /* method final */ func Remove(key : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__Remove_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
    /**
    Removes the entry at the specified index from the  collection.

    - Parameter index: The zero-based index of the entry to remove.
    */
    open /* method final */ func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Specialized.OrderedDictionary.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Collections.Specialized.OrderedDictionary.get_IsReadOnly
    open /* method final */ func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Keys()
// docid: M:System.Collections.Specialized.OrderedDictionary.get_Keys
    open /* method final */ func get_Keys() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_ICollection__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Values()
// docid: M:System.Collections.Specialized.OrderedDictionary.get_Values
    open /* method final */ func get_Values() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_ICollection__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.Collections.Specialized.OrderedDictionary.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Object)
// docid: M:System.Collections.Specialized.OrderedDictionary.set_Item(System.Int32,System.Object)
    open /* method final */ func set_Item(index : Swift.Int32, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__set_Item_0__2__i32_Object(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Object)
// docid: M:System.Collections.Specialized.OrderedDictionary.get_Item(System.Object)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(key : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_OrderedDictionary_Object__get_Item_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Object, System.Object)
// docid: M:System.Collections.Specialized.OrderedDictionary.set_Item(System.Object,System.Object)
    open /* method final */ func set_Item(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_OrderedDictionary_void__set_Item_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of key/values pairs contained in the  collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether the  collection is read-only.

    */
    public var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets an  object containing the keys in the  collection.

    */
    public var Keys : dotnet.System.Collections.ICollection {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets an  object containing the values in the  collection.

    */
    public var Values : dotnet.System.Collections.ICollection {
        get {
            return try! get_Values();
        }
    }
} // OrderedDictionary


// type: System.Collections.Specialized.StringCollection
    /**
    Represents a collection of strings.

    */
open class StringCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_StringCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Specialized.StringCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_StringCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.String)
// docid: M:System.Collections.Specialized.StringCollection.Add(System.String)
    /**
    Adds a string to the end of the .

    - Parameter value: The string to add to the end of the . The value can be .
    - Returns: The zero-based index at which the new element is inserted.

    */
    open func Add(value : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_i32__Add_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void AddRange(System.String[])
// docid: M:System.Collections.Specialized.StringCollection.AddRange(System.String[])
    /**
    Copies the elements of a string array to the end of the .

    - Parameter value: An array of strings to add to the end of the . The array itself can not be  but it can contain elements that are .
    */
    open func AddRange(value : dotnet.System_Arr<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringCollection_void__AddRange_0__1__StringArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Specialized.StringCollection.Clear
    /**
    Removes all the strings from the .

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.String)
// docid: M:System.Collections.Specialized.StringCollection.Contains(System.String)
    /**
    Determines whether the specified string is in the .

    - Parameter value: The string to locate in the . The value can be .
    - Returns: 
         if  is found in the ; otherwise, .

    */
    open func Contains(value : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_bool__Contains_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.String[], System.Int32)
// docid: M:System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)
    /**
    Copies the entire  values to a one-dimensional array of strings, starting at the specified index of the target array.

    - Parameter array: The one-dimensional array of strings that is the destination of the elements copied from . The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.String>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringCollection_void__CopyTo_0__2__StringArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Specialized.StringEnumerator GetEnumerator()
// docid: M:System.Collections.Specialized.StringCollection.GetEnumerator
    /**
    Returns a  that iterates through the .

    - Returns: A  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.Specialized.StringEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_StringEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.String)
// docid: M:System.Collections.Specialized.StringCollection.IndexOf(System.String)
    /**
    Searches for the specified string and returns the zero-based index of the first occurrence within the .

    - Parameter value: The string to locate. The value can be .
    - Returns: The zero-based index of the first occurrence of  in the , if found; otherwise, -1.

    */
    open func IndexOf(value : Optional<dotnet.System.String>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_i32__IndexOf_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.String)
// docid: M:System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)
    /**
    Inserts a string into the  at the specified index.

    - Parameter index: The zero-based index at which  is inserted.
    - Parameter value: The string to insert. The value can be .
    */
    open func Insert(index : Swift.Int32, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringCollection_void__Insert_0__2__i32_String(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:System.Collections.Specialized.StringCollection.Remove(System.String)
    /**
    Removes the first occurrence of a specific string from the .

    - Parameter value: The string to remove from the . The value can be .
    */
    open func Remove(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)
    /**
    Removes the string at the specified index of the .

    - Parameter index: The zero-based index of the string to remove.
    */
    open /* method final */ func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Specialized.StringCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Collections.Specialized.StringCollection.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Collections.Specialized.StringCollection.get_IsSynchronized
    open /* method final */ func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Collections.Specialized.StringCollection.get_SyncRoot
    open /* method final */ func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.Int32)
// docid: M:System.Collections.Specialized.StringCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringCollection_String__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.String)
// docid: M:System.Collections.Specialized.StringCollection.set_Item(System.Int32,System.String)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringCollection_void__set_Item_0__2__i32_String(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of strings contained in the .

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether the  is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets a value indicating whether access to the  is synchronized (thread safe).

    */
    public var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the .

    */
    public var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // StringCollection


// type: System.Collections.Specialized.StringDictionary
    /**
    Implements a hash table with the key and the value strongly typed to be strings rather than objects.

    */
open class StringDictionary
    :
    dotnet.System.Object,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_StringDictionary_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Specialized.StringDictionary.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_StringDictionary_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.String, System.String)
// docid: M:System.Collections.Specialized.StringDictionary.Add(System.String,System.String)
    /**
    Adds an entry with the specified key and value into the .

    - Parameter key: The key of the entry to add.
    - Parameter value: The value of the entry to add. The value can be .
    */
    open func Add(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringDictionary_void__Add_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.Specialized.StringDictionary.Clear
    /**
    Removes all entries from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringDictionary_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:System.Collections.Specialized.StringDictionary.ContainsKey(System.String)
    /**
    Determines if the  contains a specific key.

    - Parameter key: The key to locate in the .
    - Returns: 
         if the  contains an entry with the specified key; otherwise, .

    */
    open func ContainsKey(key : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(System.String)
// docid: M:System.Collections.Specialized.StringDictionary.ContainsValue(System.String)
    /**
    Determines if the  contains a specific value.

    - Parameter value: The value to locate in the . The value can be .
    - Returns: 
         if the  contains an element with the specified value; otherwise, .

    */
    open func ContainsValue(value : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_bool__ContainsValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)
    /**
    Copies the string dictionary values to a one-dimensional  instance at the specified index.

    - Parameter array: The one-dimensional  that is the destination of the values copied from the .
    - Parameter index: The index in the array where copying begins.
    */
    open func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringDictionary_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Collections.Specialized.StringDictionary.GetEnumerator
    /**
    Returns an enumerator that iterates through the string dictionary.

    - Returns: An  that iterates through the string dictionary.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // void Remove(System.String)
// docid: M:System.Collections.Specialized.StringDictionary.Remove(System.String)
    /**
    Removes the entry with the specified key from the string dictionary.

    - Parameter key: The key of the entry to remove.
    */
    open func Remove(key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringDictionary_void__Remove_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Specialized.StringDictionary.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Collections.Specialized.StringDictionary.get_IsSynchronized
    open func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Keys()
// docid: M:System.Collections.Specialized.StringDictionary.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_ICollection__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Collections.Specialized.StringDictionary.get_SyncRoot
    open func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Values()
// docid: M:System.Collections.Specialized.StringDictionary.get_Values
    open func get_Values() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_ICollection__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:System.Collections.Specialized.StringDictionary.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : dotnet.System.String) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringDictionary_String__get_Item_0__1__String(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.String)
// docid: M:System.Collections.Specialized.StringDictionary.set_Item(System.String,System.String)
    open func set_Item(key : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringDictionary_void__set_Item_0__2__String_String(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of key/value pairs in the .

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether access to the  is synchronized (thread safe).

    */
    open var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets a collection of keys in the .

    */
    open var Keys : dotnet.System.Collections.ICollection {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the .

    */
    open var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
    /**
    Gets a collection of values in the .

    */
    open var Values : dotnet.System.Collections.ICollection {
        get {
            return try! get_Values();
        }
    }
} // StringDictionary


// type: System.Collections.Specialized.StringEnumerator
    /**
    Supports a simple iteration over a .

    */
open class StringEnumerator
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_StringEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool MoveNext()
// docid: M:System.Collections.Specialized.StringEnumerator.MoveNext
    /**
    Advances the enumerator to the next element of the collection.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    open func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Collections.Specialized.StringEnumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the collection.

    */
    open func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Specialized_StringEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Current()
// docid: M:System.Collections.Specialized.StringEnumerator.get_Current
    open func get_Current() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_StringEnumerator_String__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the current element in the collection.

    */
    open var Current : Optional<dotnet.System.String> {
        get {
            return try! get_Current();
        }
    }
} // StringEnumerator


}



public protocol System_Collections_Specialized_IOrderedDictionary
    :
    System_Collections_IDictionary
{
}

