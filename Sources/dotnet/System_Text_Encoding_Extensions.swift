// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Text
extension System.Text {
// type: System.Text.ASCIIEncoding
    /**
    Represents an ASCII character encoding of Unicode characters.

    */
open class ASCIIEncoding
    :
    dotnet.System.Text.Encoding
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_ASCIIEncoding_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.ASCIIEncoding.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_ASCIIEncoding_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 GetByteCount(System.Char*, System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(chars : UnsafeMutablePointer<Swift.Int16>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetByteCount_0__2__pchar_i32(&__thrown, self.get_handle(), chars, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(System.Char[], System.Int32, System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters from the specified character array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter index: The index of the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(chars : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetByteCount_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), chars.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 GetByteCount(System.ReadOnlySpan<System.Char>)
    // System.Int32 GetByteCount(System.String)
// docid: M:System.Text.ASCIIEncoding.GetByteCount(System.String)
    /**
    Calculates the number of bytes produced by encoding the characters in the specified .

    - Parameter chars: The  containing the set of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open func GetByteCount(chars : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetByteCount_0__1__String(&__thrown, self.get_handle(), chars.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    /**
    Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: A pointer to the location at which to start writing the resulting sequence of bytes.
    - Parameter byteCount: The maximum number of bytes to write.
    - Returns: The actual number of bytes written at the location indicated by .

    */
    open override func GetBytes(chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32, bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetBytes_0__4__pchar_i32_pu8_i32(&__thrown, self.get_handle(), chars, charCount, bytes, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified character array into the specified byte array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    open override func GetBytes(chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetBytes_0__5__CharArray_i32_i32_u8Array_i32(&__thrown, self.get_handle(), chars.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 GetBytes(System.ReadOnlySpan<System.Char>, System.Span<System.Byte>)
    // System.Int32 GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified  into the specified byte array.

    - Parameter chars: The  containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    open func GetBytes(chars : dotnet.System.String, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetBytes_0__5__String_i32_i32_u8Array_i32(&__thrown, self.get_handle(), chars.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte*, System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    open override func GetCharCount(bytes : UnsafeMutablePointer<Swift.UInt8>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetCharCount_0__2__pu8_i32(&__thrown, self.get_handle(), bytes, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    open override func GetCharCount(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetCharCount_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 GetCharCount(System.ReadOnlySpan<System.Byte>)
    // System.Int32 GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    /**
    Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: A pointer to the location at which to start writing the resulting set of characters.
    - Parameter charCount: The maximum number of characters to write.
    - Returns: The actual number of characters written at the location indicated by .

    */
    open override func GetChars(bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32, chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetChars_0__4__pu8_i32_pchar_i32(&__thrown, self.get_handle(), bytes, byteCount, chars, charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    /**
    Decodes a sequence of bytes from the specified byte array into the specified character array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter byteIndex: The index of the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: The character array to contain the resulting set of characters.
    - Parameter charIndex: The index at which to start writing the resulting set of characters.
    - Returns: The actual number of characters written into .

    */
    open override func GetChars(bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32, byteCount : Swift.Int32, chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetChars_0__5__u8Array_i32_i32_CharArray_i32(&__thrown, self.get_handle(), bytes.get_handle(), byteIndex, byteCount, chars.get_handle(), charIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 GetChars(System.ReadOnlySpan<System.Byte>, System.Span<System.Char>)
    // System.Text.Decoder GetDecoder()
// docid: M:System.Text.ASCIIEncoding.GetDecoder
    /**
    Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.

    - Returns: A  that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.

    */
    open override func GetDecoder() throws -> dotnet.System.Text.Decoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_Decoder__GetDecoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Decoder(hndl : __return);
        }
    }
    // System.Text.Encoder GetEncoder()
// docid: M:System.Text.ASCIIEncoding.GetEncoder
    /**
    Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.

    - Returns: An  that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.

    */
    open override func GetEncoder() throws -> dotnet.System.Text.Encoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_Encoder__GetEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoder(hndl : __return);
        }
    }
    // System.Int32 GetMaxByteCount(System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
    /**
    Calculates the maximum number of bytes produced by encoding the specified number of characters.

    - Parameter charCount: The number of characters to encode.
    - Returns: The maximum number of bytes produced by encoding the specified number of characters.

    */
    open override func GetMaxByteCount(charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetMaxByteCount_0__1__i32(&__thrown, self.get_handle(), charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxCharCount(System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
    /**
    Calculates the maximum number of characters produced by decoding the specified number of bytes.

    - Parameter byteCount: The number of bytes to decode.
    - Returns: The maximum number of characters produced by decoding the specified number of bytes.

    */
    open override func GetMaxCharCount(byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_i32__GetMaxCharCount_0__1__i32(&__thrown, self.get_handle(), byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetString(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    /**
    Decodes a range of bytes from a byte array into a string.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter byteIndex: The index of the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Returns: A  containing the results of decoding the specified sequence of bytes.

    */
    open func GetString(bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32, byteCount : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_String__GetString_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), byteIndex, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsSingleByte()
// docid: M:System.Text.ASCIIEncoding.get_IsSingleByte
    open override func get_IsSingleByte() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_ASCIIEncoding_bool__get_IsSingleByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether the current encoding uses single-byte code points.

    */
    open override var IsSingleByte : Bool {
        get {
            return try! get_IsSingleByte();
        }
    }
} // ASCIIEncoding


// type: System.Text.UTF32Encoding
    /**
    Represents a UTF-32 encoding of Unicode characters.

    */
public final class UTF32Encoding
    :
    dotnet.System.Text.Encoding
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_UTF32Encoding_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.UTF32Encoding.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UTF32Encoding_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool)
// docid: M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class. Parameters specify whether to use the big endian byte order and whether the  method returns a Unicode byte order mark.

    - Parameter bigEndian: 
         to use the big endian byte order (most significant byte first), or  to use the little endian byte order (least significant byte first).
    - Parameter byteOrderMark: 
         to specify that a Unicode byte order mark is provided; otherwise, .
    */
    public init(bigEndian : Bool, byteOrderMark : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UTF32Encoding_ctor_0__2__bool_bool(&__thrown, Swift.Int32(bigEndian ? 1 : 0), Swift.Int32(byteOrderMark ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, bool)
// docid: M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.

    - Parameter bigEndian: 
         to use the big endian byte order (most significant byte first), or  to use the little endian byte order (least significant byte first).
    - Parameter byteOrderMark: 
         to specify that a Unicode byte order mark is provided; otherwise, .
    - Parameter throwOnInvalidCharacters: 
         to specify that an exception should be thrown when an invalid encoding is detected; otherwise, .
    */
    public init(bigEndian : Bool, byteOrderMark : Bool, throwOnInvalidCharacters : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UTF32Encoding_ctor_0__3__bool_bool_bool(&__thrown, Swift.Int32(bigEndian ? 1 : 0), Swift.Int32(byteOrderMark ? 1 : 0), Swift.Int32(throwOnInvalidCharacters ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Text.UTF32Encoding.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter value: The  to compare with the current object.
    - Returns: 
         if  is an instance of  and is equal to the current object; otherwise, .

    */
    public override func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetByteCount(System.Char*, System.Int32)
// docid: M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    public override func GetByteCount(chars : UnsafeMutablePointer<Swift.Int16>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetByteCount_0__2__pchar_i32(&__thrown, self.get_handle(), chars, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(System.Char[], System.Int32, System.Int32)
// docid: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters from the specified character array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter index: The index of the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    public override func GetByteCount(chars : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetByteCount_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), chars.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(System.String)
// docid: M:System.Text.UTF32Encoding.GetByteCount(System.String)
    /**
    Calculates the number of bytes produced by encoding the characters in the specified .

    - Parameter s: The  containing the set of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    public override func GetByteCount(s : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetByteCount_0__1__String(&__thrown, self.get_handle(), s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
// docid: M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    /**
    Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: A pointer to the location at which to start writing the resulting sequence of bytes.
    - Parameter byteCount: The maximum number of bytes to write.
    - Returns: The actual number of bytes written at the location indicated by the  parameter.

    */
    public override func GetBytes(chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32, bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetBytes_0__4__pchar_i32_pu8_i32(&__thrown, self.get_handle(), chars, charCount, bytes, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified character array into the specified byte array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    public override func GetBytes(chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetBytes_0__5__CharArray_i32_i32_u8Array_i32(&__thrown, self.get_handle(), chars.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified  into the specified byte array.

    - Parameter s: The  containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    public override func GetBytes(s : dotnet.System.String, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetBytes_0__5__String_i32_i32_u8Array_i32(&__thrown, self.get_handle(), s.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte*, System.Int32)
// docid: M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    public override func GetCharCount(bytes : UnsafeMutablePointer<Swift.UInt8>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetCharCount_0__2__pu8_i32(&__thrown, self.get_handle(), bytes, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    public override func GetCharCount(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetCharCount_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
// docid: M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    /**
    Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: A pointer to the location at which to start writing the resulting set of characters.
    - Parameter charCount: The maximum number of characters to write.
    - Returns: The actual number of characters written at the location indicated by .

    */
    public override func GetChars(bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32, chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetChars_0__4__pu8_i32_pchar_i32(&__thrown, self.get_handle(), bytes, byteCount, chars, charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
// docid: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    /**
    Decodes a sequence of bytes from the specified byte array into the specified character array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter byteIndex: The index of the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: The character array to contain the resulting set of characters.
    - Parameter charIndex: The index at which to start writing the resulting set of characters.
    - Returns: The actual number of characters written into .

    */
    public override func GetChars(bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32, byteCount : Swift.Int32, chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetChars_0__5__u8Array_i32_i32_CharArray_i32(&__thrown, self.get_handle(), bytes.get_handle(), byteIndex, byteCount, chars.get_handle(), charIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Text.Decoder GetDecoder()
// docid: M:System.Text.UTF32Encoding.GetDecoder
    /**
    Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.

    - Returns: A  that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.

    */
    public override func GetDecoder() throws -> dotnet.System.Text.Decoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_Decoder__GetDecoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Decoder(hndl : __return);
        }
    }
    // System.Text.Encoder GetEncoder()
// docid: M:System.Text.UTF32Encoding.GetEncoder
    /**
    Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.

    - Returns: A  that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.

    */
    public override func GetEncoder() throws -> dotnet.System.Text.Encoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_Encoder__GetEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoder(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Text.UTF32Encoding.GetHashCode
    /**
    Returns the hash code for the current instance.

    - Returns: The hash code for the current  object.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxByteCount(System.Int32)
// docid: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
    /**
    Calculates the maximum number of bytes produced by encoding the specified number of characters.

    - Parameter charCount: The number of characters to encode.
    - Returns: The maximum number of bytes produced by encoding the specified number of characters.

    */
    public override func GetMaxByteCount(charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetMaxByteCount_0__1__i32(&__thrown, self.get_handle(), charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxCharCount(System.Int32)
// docid: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
    /**
    Calculates the maximum number of characters produced by decoding the specified number of bytes.

    - Parameter byteCount: The number of bytes to decode.
    - Returns: The maximum number of characters produced by decoding the specified number of bytes.

    */
    public override func GetMaxCharCount(byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_i32__GetMaxCharCount_0__1__i32(&__thrown, self.get_handle(), byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte[] GetPreamble()
// docid: M:System.Text.UTF32Encoding.GetPreamble
    /**
    Returns a Unicode byte order mark encoded in UTF-32 format, if the  object is configured to supply one.

    - Returns: A byte array containing the Unicode byte order mark, if the  object is configured to supply one. Otherwise, this method returns a zero-length byte array.

    */
    public override func GetPreamble() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_u8Array__GetPreamble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.String GetString(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    /**
    Decodes a range of bytes from a byte array into a string.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: A string that contains the results of decoding the specified sequence of bytes.

    */
    public override func GetString(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF32Encoding_String__GetString_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // UTF32Encoding


// type: System.Text.UTF7Encoding
    /**
    Represents a UTF-7 encoding of Unicode characters.

    */
open class UTF7Encoding
    :
    dotnet.System.Text.Encoding
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_UTF7Encoding_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.UTF7Encoding.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UTF7Encoding_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Text.UTF7Encoding.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class. A parameter specifies whether to allow optional characters.

    - Parameter allowOptionals: 
         to specify that optional characters are allowed; otherwise, .
    */
    public init(allowOptionals : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UTF7Encoding_ctor_0__1__bool(&__thrown, Swift.Int32(allowOptionals ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Text.UTF7Encoding.Equals(System.Object)
    /**
    Gets a value indicating whether the specified object is equal to the current  object.

    - Parameter value: An object to compare to the current  object.
    - Returns: 
         if  is a  object and is equal to the current  object; otherwise, .

    */
    open override func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetByteCount(System.Char*, System.Int32)
// docid: M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(chars : UnsafeMutablePointer<Swift.Int16>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetByteCount_0__2__pchar_i32(&__thrown, self.get_handle(), chars, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(System.Char[], System.Int32, System.Int32)
// docid: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters from the specified character array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter index: The index of the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(chars : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetByteCount_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), chars.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(System.String)
// docid: M:System.Text.UTF7Encoding.GetByteCount(System.String)
    /**
    Calculates the number of bytes produced by encoding the characters in the specified  object.

    - Parameter s: The  object containing the set of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(s : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetByteCount_0__1__String(&__thrown, self.get_handle(), s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
// docid: M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    /**
    Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: A pointer to the location at which to start writing the resulting sequence of bytes.
    - Parameter byteCount: The maximum number of bytes to write.
    - Returns: The actual number of bytes written at the location indicated by .

    */
    open override func GetBytes(chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32, bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetBytes_0__4__pchar_i32_pu8_i32(&__thrown, self.get_handle(), chars, charCount, bytes, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified character array into the specified byte array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    open override func GetBytes(chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetBytes_0__5__CharArray_i32_i32_u8Array_i32(&__thrown, self.get_handle(), chars.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified  into the specified byte array.

    - Parameter s: The  containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    open override func GetBytes(s : dotnet.System.String, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetBytes_0__5__String_i32_i32_u8Array_i32(&__thrown, self.get_handle(), s.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte*, System.Int32)
// docid: M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    open override func GetCharCount(bytes : UnsafeMutablePointer<Swift.UInt8>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetCharCount_0__2__pu8_i32(&__thrown, self.get_handle(), bytes, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    open override func GetCharCount(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetCharCount_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
// docid: M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    /**
    Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: A pointer to the location at which to start writing the resulting set of characters.
    - Parameter charCount: The maximum number of characters to write.
    - Returns: The actual number of characters written at the location indicated by .

    */
    open override func GetChars(bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32, chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetChars_0__4__pu8_i32_pchar_i32(&__thrown, self.get_handle(), bytes, byteCount, chars, charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
// docid: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    /**
    Decodes a sequence of bytes from the specified byte array into the specified character array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter byteIndex: The index of the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: The character array to contain the resulting set of characters.
    - Parameter charIndex: The index at which to start writing the resulting set of characters.
    - Returns: The actual number of characters written into .

    */
    open override func GetChars(bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32, byteCount : Swift.Int32, chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetChars_0__5__u8Array_i32_i32_CharArray_i32(&__thrown, self.get_handle(), bytes.get_handle(), byteIndex, byteCount, chars.get_handle(), charIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Text.Decoder GetDecoder()
// docid: M:System.Text.UTF7Encoding.GetDecoder
    /**
    Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.

    - Returns: A  that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.

    */
    open override func GetDecoder() throws -> dotnet.System.Text.Decoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_Decoder__GetDecoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Decoder(hndl : __return);
        }
    }
    // System.Text.Encoder GetEncoder()
// docid: M:System.Text.UTF7Encoding.GetEncoder
    /**
    Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.

    - Returns: A  that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.

    */
    open override func GetEncoder() throws -> dotnet.System.Text.Encoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_Encoder__GetEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoder(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Text.UTF7Encoding.GetHashCode
    /**
    Returns the hash code for the current  object.

    - Returns: A 32-bit signed integer hash code.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxByteCount(System.Int32)
// docid: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
    /**
    Calculates the maximum number of bytes produced by encoding the specified number of characters.

    - Parameter charCount: The number of characters to encode.
    - Returns: The maximum number of bytes produced by encoding the specified number of characters.

    */
    open override func GetMaxByteCount(charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetMaxByteCount_0__1__i32(&__thrown, self.get_handle(), charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxCharCount(System.Int32)
// docid: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
    /**
    Calculates the maximum number of characters produced by decoding the specified number of bytes.

    - Parameter byteCount: The number of bytes to decode.
    - Returns: The maximum number of characters produced by decoding the specified number of bytes.

    */
    open override func GetMaxCharCount(byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_i32__GetMaxCharCount_0__1__i32(&__thrown, self.get_handle(), byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetString(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    /**
    Decodes a range of bytes from a byte array into a string.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: A  containing the results of decoding the specified sequence of bytes.

    */
    open override func GetString(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF7Encoding_String__GetString_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // UTF7Encoding


// type: System.Text.UTF8Encoding
    /**
    Represents a UTF-8 encoding of Unicode characters.

    */
open class UTF8Encoding
    :
    dotnet.System.Text.Encoding
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_UTF8Encoding_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.UTF8Encoding.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UTF8Encoding_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.Text.UTF8Encoding.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class. A parameter specifies whether to provide a Unicode byte order mark.

    - Parameter encoderShouldEmitUTF8Identifier: 
         to specify that the  method returns a Unicode byte order mark; otherwise, .
    */
    public init(encoderShouldEmitUTF8Identifier : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UTF8Encoding_ctor_0__1__bool(&__thrown, Swift.Int32(encoderShouldEmitUTF8Identifier ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool)
// docid: M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class. Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected.

    - Parameter encoderShouldEmitUTF8Identifier: 
         to specify that the  method should return a Unicode byte order mark; otherwise, .
    - Parameter throwOnInvalidBytes: 
         to throw an exception when an invalid encoding is detected; otherwise, .
    */
    public init(encoderShouldEmitUTF8Identifier : Bool, throwOnInvalidBytes : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UTF8Encoding_ctor_0__2__bool_bool(&__thrown, Swift.Int32(encoderShouldEmitUTF8Identifier ? 1 : 0), Swift.Int32(throwOnInvalidBytes ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Text.UTF8Encoding.Equals(System.Object)
    /**
    Determines whether the specified object is equal to the current  object.

    - Parameter value: The object to compare with the current instance.
    - Returns: 
         if  is an instance of  and is equal to the current object; otherwise, .

    */
    open override func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetByteCount(System.Char*, System.Int32)
// docid: M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(chars : UnsafeMutablePointer<Swift.Int16>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetByteCount_0__2__pchar_i32(&__thrown, self.get_handle(), chars, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(System.Char[], System.Int32, System.Int32)
// docid: M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters from the specified character array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter index: The index of the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(chars : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetByteCount_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), chars.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 GetByteCount(System.ReadOnlySpan<System.Char>)
    // System.Int32 GetByteCount(System.String)
// docid: M:System.Text.UTF8Encoding.GetByteCount(System.String)
    /**
    Calculates the number of bytes produced by encoding the characters in the specified .

    - Parameter chars: The  containing the set of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open func GetByteCount(chars : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetByteCount_0__1__String(&__thrown, self.get_handle(), chars.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
// docid: M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    /**
    Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: A pointer to the location at which to start writing the resulting sequence of bytes.
    - Parameter byteCount: The maximum number of bytes to write.
    - Returns: The actual number of bytes written at the location indicated by .

    */
    open override func GetBytes(chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32, bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetBytes_0__4__pchar_i32_pu8_i32(&__thrown, self.get_handle(), chars, charCount, bytes, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified character array into the specified byte array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    open override func GetBytes(chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetBytes_0__5__CharArray_i32_i32_u8Array_i32(&__thrown, self.get_handle(), chars.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 GetBytes(System.ReadOnlySpan<System.Char>, System.Span<System.Byte>)
    // System.Int32 GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified  into the specified byte array.

    - Parameter s: The  containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    open override func GetBytes(s : dotnet.System.String, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetBytes_0__5__String_i32_i32_u8Array_i32(&__thrown, self.get_handle(), s.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte*, System.Int32)
// docid: M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    open override func GetCharCount(bytes : UnsafeMutablePointer<Swift.UInt8>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetCharCount_0__2__pu8_i32(&__thrown, self.get_handle(), bytes, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    open override func GetCharCount(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetCharCount_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 GetCharCount(System.ReadOnlySpan<System.Byte>)
    // System.Int32 GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
// docid: M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    /**
    Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: A pointer to the location at which to start writing the resulting set of characters.
    - Parameter charCount: The maximum number of characters to write.
    - Returns: The actual number of characters written at the location indicated by .

    */
    open override func GetChars(bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32, chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetChars_0__4__pu8_i32_pchar_i32(&__thrown, self.get_handle(), bytes, byteCount, chars, charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
// docid: M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    /**
    Decodes a sequence of bytes from the specified byte array into the specified character array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter byteIndex: The index of the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: The character array to contain the resulting set of characters.
    - Parameter charIndex: The index at which to start writing the resulting set of characters.
    - Returns: The actual number of characters written into .

    */
    open override func GetChars(bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32, byteCount : Swift.Int32, chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetChars_0__5__u8Array_i32_i32_CharArray_i32(&__thrown, self.get_handle(), bytes.get_handle(), byteIndex, byteCount, chars.get_handle(), charIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Int32 GetChars(System.ReadOnlySpan<System.Byte>, System.Span<System.Char>)
    // System.Text.Decoder GetDecoder()
// docid: M:System.Text.UTF8Encoding.GetDecoder
    /**
    Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.

    - Returns: A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.

    */
    open override func GetDecoder() throws -> dotnet.System.Text.Decoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_Decoder__GetDecoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Decoder(hndl : __return);
        }
    }
    // System.Text.Encoder GetEncoder()
// docid: M:System.Text.UTF8Encoding.GetEncoder
    /**
    Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.

    - Returns: A  that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.

    */
    open override func GetEncoder() throws -> dotnet.System.Text.Encoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_Encoder__GetEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoder(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Text.UTF8Encoding.GetHashCode
    /**
    Returns the hash code for the current instance.

    - Returns: The hash code for the current instance.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxByteCount(System.Int32)
// docid: M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)
    /**
    Calculates the maximum number of bytes produced by encoding the specified number of characters.

    - Parameter charCount: The number of characters to encode.
    - Returns: The maximum number of bytes produced by encoding the specified number of characters.

    */
    open override func GetMaxByteCount(charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetMaxByteCount_0__1__i32(&__thrown, self.get_handle(), charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxCharCount(System.Int32)
// docid: M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)
    /**
    Calculates the maximum number of characters produced by decoding the specified number of bytes.

    - Parameter byteCount: The number of bytes to decode.
    - Returns: The maximum number of characters produced by decoding the specified number of bytes.

    */
    open override func GetMaxCharCount(byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_i32__GetMaxCharCount_0__1__i32(&__thrown, self.get_handle(), byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte[] GetPreamble()
// docid: M:System.Text.UTF8Encoding.GetPreamble
    /**
    Returns a Unicode byte order mark encoded in UTF-8 format, if the  encoding object is configured to supply one.

    - Returns: A byte array containing the Unicode byte order mark, if the  encoding object is configured to supply one. Otherwise, this method returns a zero-length byte array.

    */
    open override func GetPreamble() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_u8Array__GetPreamble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.String GetString(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)
    /**
    Decodes a range of bytes from a byte array into a string.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: A  containing the results of decoding the specified sequence of bytes.

    */
    open override func GetString(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UTF8Encoding_String__GetString_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // UTF8Encoding


// type: System.Text.UnicodeEncoding
    /**
    Represents a UTF-16 encoding of Unicode characters.

    */
open class UnicodeEncoding
    :
    dotnet.System.Text.Encoding
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_UnicodeEncoding_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Int32 CharSize
    /**
    Represents the Unicode character size in bytes. This field is a constant.

    */
    open class var CharSize : Swift.Int32 {
        get {
        let __return = System_Text_UnicodeEncoding_get_CharSize();
            return __return;
        }
    }
    // .ctor()
// docid: M:System.Text.UnicodeEncoding.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UnicodeEncoding_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool)
// docid: M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class. Parameters specify whether to use the big endian byte order and whether the  method returns a Unicode byte order mark.

    - Parameter bigEndian: 
         to use the big endian byte order (most significant byte first), or  to use the little endian byte order (least significant byte first).
    - Parameter byteOrderMark: 
         to specify that the  method returns a Unicode byte order mark; otherwise, .
    */
    public init(bigEndian : Bool, byteOrderMark : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UnicodeEncoding_ctor_0__2__bool_bool(&__thrown, Swift.Int32(bigEndian ? 1 : 0), Swift.Int32(byteOrderMark ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, bool)
// docid: M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.

    - Parameter bigEndian: 
         to use the big endian byte order (most significant byte first);  to use the little endian byte order (least significant byte first).
    - Parameter byteOrderMark: 
         to specify that the  method returns a Unicode byte order mark; otherwise, .
    - Parameter throwOnInvalidBytes: 
         to specify that an exception should be thrown when an invalid encoding is detected; otherwise, .
    */
    public init(bigEndian : Bool, byteOrderMark : Bool, throwOnInvalidBytes : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_UnicodeEncoding_ctor_0__3__bool_bool_bool(&__thrown, Swift.Int32(bigEndian ? 1 : 0), Swift.Int32(byteOrderMark ? 1 : 0), Swift.Int32(throwOnInvalidBytes ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Text.UnicodeEncoding.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  object.

    - Parameter value: The object to compare with the current object.
    - Returns: 
         if  is an instance of  and is equal to the current object; otherwise, .

    */
    open override func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetByteCount(System.Char*, System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(chars : UnsafeMutablePointer<Swift.Int16>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetByteCount_0__2__pchar_i32(&__thrown, self.get_handle(), chars, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(System.Char[], System.Int32, System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    /**
    Calculates the number of bytes produced by encoding a set of characters from the specified character array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter index: The index of the first character to encode.
    - Parameter count: The number of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(chars : dotnet.System_Arr<dotnet.System.Char>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetByteCount_0__3__CharArray_i32_i32(&__thrown, self.get_handle(), chars.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetByteCount(System.String)
// docid: M:System.Text.UnicodeEncoding.GetByteCount(System.String)
    /**
    Calculates the number of bytes produced by encoding the characters in the specified string.

    - Parameter s: The string that contains the set of characters to encode.
    - Returns: The number of bytes produced by encoding the specified characters.

    */
    open override func GetByteCount(s : dotnet.System.String) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetByteCount_0__1__String(&__thrown, self.get_handle(), s.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
    /**
    Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.

    - Parameter chars: A pointer to the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: A pointer to the location at which to start writing the resulting sequence of bytes.
    - Parameter byteCount: The maximum number of bytes to write.
    - Returns: The actual number of bytes written at the location indicated by the  parameter.

    */
    open override func GetBytes(chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32, bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetBytes_0__4__pchar_i32_pu8_i32(&__thrown, self.get_handle(), chars, charCount, bytes, byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified character array into the specified byte array.

    - Parameter chars: The character array containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    open override func GetBytes(chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetBytes_0__5__CharArray_i32_i32_u8Array_i32(&__thrown, self.get_handle(), chars.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    /**
    Encodes a set of characters from the specified  into the specified byte array.

    - Parameter s: The string containing the set of characters to encode.
    - Parameter charIndex: The index of the first character to encode.
    - Parameter charCount: The number of characters to encode.
    - Parameter bytes: The byte array to contain the resulting sequence of bytes.
    - Parameter byteIndex: The index at which to start writing the resulting sequence of bytes.
    - Returns: The actual number of bytes written into .

    */
    open override func GetBytes(s : dotnet.System.String, charIndex : Swift.Int32, charCount : Swift.Int32, bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetBytes_0__5__String_i32_i32_u8Array_i32(&__thrown, self.get_handle(), s.get_handle(), charIndex, charCount, bytes.get_handle(), byteIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte*, System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    open override func GetCharCount(bytes : UnsafeMutablePointer<Swift.UInt8>?, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetCharCount_0__2__pu8_i32(&__thrown, self.get_handle(), bytes, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetCharCount(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    /**
    Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: The number of characters produced by decoding the specified sequence of bytes.

    */
    open override func GetCharCount(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetCharCount_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    /**
    Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.

    - Parameter bytes: A pointer to the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: A pointer to the location at which to start writing the resulting set of characters.
    - Parameter charCount: The maximum number of characters to write.
    - Returns: The actual number of characters written at the location indicated by the  parameter.

    */
    open override func GetChars(bytes : UnsafeMutablePointer<Swift.UInt8>?, byteCount : Swift.Int32, chars : UnsafeMutablePointer<Swift.Int16>?, charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetChars_0__4__pu8_i32_pchar_i32(&__thrown, self.get_handle(), bytes, byteCount, chars, charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    /**
    Decodes a sequence of bytes from the specified byte array into the specified character array.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter byteIndex: The index of the first byte to decode.
    - Parameter byteCount: The number of bytes to decode.
    - Parameter chars: The character array to contain the resulting set of characters.
    - Parameter charIndex: The index at which to start writing the resulting set of characters.
    - Returns: The actual number of characters written into .

    */
    open override func GetChars(bytes : dotnet.System_Arr<Swift.UInt8>, byteIndex : Swift.Int32, byteCount : Swift.Int32, chars : dotnet.System_Arr<dotnet.System.Char>, charIndex : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetChars_0__5__u8Array_i32_i32_CharArray_i32(&__thrown, self.get_handle(), bytes.get_handle(), byteIndex, byteCount, chars.get_handle(), charIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Text.Decoder GetDecoder()
// docid: M:System.Text.UnicodeEncoding.GetDecoder
    /**
    Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.

    - Returns: A  that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.

    */
    open override func GetDecoder() throws -> dotnet.System.Text.Decoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_Decoder__GetDecoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Decoder(hndl : __return);
        }
    }
    // System.Text.Encoder GetEncoder()
// docid: M:System.Text.UnicodeEncoding.GetEncoder
    /**
    Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.

    - Returns: A  object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.

    */
    open override func GetEncoder() throws -> dotnet.System.Text.Encoder {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_Encoder__GetEncoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Encoder(hndl : __return);
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Text.UnicodeEncoding.GetHashCode
    /**
    Returns the hash code for the current instance.

    - Returns: The hash code for the current  object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxByteCount(System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
    /**
    Calculates the maximum number of bytes produced by encoding the specified number of characters.

    - Parameter charCount: The number of characters to encode.
    - Returns: The maximum number of bytes produced by encoding the specified number of characters.

    */
    open override func GetMaxByteCount(charCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetMaxByteCount_0__1__i32(&__thrown, self.get_handle(), charCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetMaxCharCount(System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
    /**
    Calculates the maximum number of characters produced by decoding the specified number of bytes.

    - Parameter byteCount: The number of bytes to decode.
    - Returns: The maximum number of characters produced by decoding the specified number of bytes.

    */
    open override func GetMaxCharCount(byteCount : Swift.Int32) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_i32__GetMaxCharCount_0__1__i32(&__thrown, self.get_handle(), byteCount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte[] GetPreamble()
// docid: M:System.Text.UnicodeEncoding.GetPreamble
    /**
    Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.

    - Returns: A byte array containing the Unicode byte order mark, if the  object is configured to supply one. Otherwise, this method returns a zero-length byte array.

    */
    open override func GetPreamble() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_u8Array__GetPreamble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.String GetString(System.Byte[], System.Int32, System.Int32)
// docid: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    /**
    Decodes a range of bytes from a byte array into a string.

    - Parameter bytes: The byte array containing the sequence of bytes to decode.
    - Parameter index: The index of the first byte to decode.
    - Parameter count: The number of bytes to decode.
    - Returns: A  object containing the results of decoding the specified sequence of bytes.

    */
    open override func GetString(bytes : dotnet.System_Arr<Swift.UInt8>, index : Swift.Int32, count : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_UnicodeEncoding_String__GetString_0__3__u8Array_i32_i32(&__thrown, self.get_handle(), bytes.get_handle(), index, count);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // UnicodeEncoding


}


