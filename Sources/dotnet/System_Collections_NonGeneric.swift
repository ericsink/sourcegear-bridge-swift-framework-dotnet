// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Collections
extension System.Collections {
// type: System.Collections.CaseInsensitiveComparer
    /**
    Compares two objects for equivalence, ignoring the case of strings.

    */
open class CaseInsensitiveComparer
    :
    dotnet.System.Object,
    System_Collections_IComparer
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_CaseInsensitiveComparer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.CaseInsensitiveComparer.#ctor
    /**
    Initializes a new instance of the  class using the  of the current thread.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_CaseInsensitiveComparer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Globalization.CultureInfo)
// docid: M:System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)
    /**
    Initializes a new instance of the  class using the specified .

    - Parameter culture: The  to use for the new .
    */
    public init(culture : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_CaseInsensitiveComparer_ctor_0__1__CultureInfo(&__thrown, culture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Compare(System.Object, System.Object)
// docid: M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)
    /**
    Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.

    - Parameter a: The first object to compare.
    - Parameter b: The second object to compare.
    - Returns: A signed integer that indicates the relative values of  and , as shown in the following table.  
  
  Value Meaning Less than zero is less than , with casing ignored. Zero equals , with casing ignored. Greater than zero is greater than , with casing ignored.

    */
    open /* method final */ func Compare(a : Optional<dotnet.System.Object>, b : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CaseInsensitiveComparer_i32__Compare_0__2__Object_Object(&__thrown, self.get_handle(), a?.get_handle() ?? nil, b?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.CaseInsensitiveComparer get_Default()
// docid: M:System.Collections.CaseInsensitiveComparer.get_Default
    open class func get_Default() throws -> dotnet.System.Collections.CaseInsensitiveComparer {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CaseInsensitiveComparer_CaseInsensitiveComparer__get_Default_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.CaseInsensitiveComparer(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.CaseInsensitiveComparer get_DefaultInvariant()
// docid: M:System.Collections.CaseInsensitiveComparer.get_DefaultInvariant
    open class func get_DefaultInvariant() throws -> dotnet.System.Collections.CaseInsensitiveComparer {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CaseInsensitiveComparer_CaseInsensitiveComparer__get_DefaultInvariant_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.CaseInsensitiveComparer(hndl : __return);
        }
    }
    /**
    Gets an instance of  that is associated with the  of the current thread and that is always available.

    */
    public static var Default : dotnet.System.Collections.CaseInsensitiveComparer {
        get {
            return try! get_Default();
        }
    }
    /**
    Gets an instance of  that is associated with  and that is always available.

    */
    public static var DefaultInvariant : dotnet.System.Collections.CaseInsensitiveComparer {
        get {
            return try! get_DefaultInvariant();
        }
    }
} // CaseInsensitiveComparer


// type: System.Collections.CaseInsensitiveHashCodeProvider
    /**
    Supplies a hash code for an object, using a hashing algorithm that ignores the case of strings.

    */
open class CaseInsensitiveHashCodeProvider
    :
    dotnet.System.Object,
    System_Collections_IHashCodeProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_CaseInsensitiveHashCodeProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor
    /**
    Initializes a new instance of the  class using the  of the current thread.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_CaseInsensitiveHashCodeProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Globalization.CultureInfo)
// docid: M:System.Collections.CaseInsensitiveHashCodeProvider.#ctor(System.Globalization.CultureInfo)
    /**
    Initializes a new instance of the  class using the specified .

    - Parameter culture: The  to use for the new .
    */
    public init(culture : dotnet.System.Globalization.CultureInfo) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_CaseInsensitiveHashCodeProvider_ctor_0__1__CultureInfo(&__thrown, culture.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 GetHashCode(System.Object)
// docid: M:System.Collections.CaseInsensitiveHashCodeProvider.GetHashCode(System.Object)
    /**
    Returns a hash code for the given object, using a hashing algorithm that ignores the case of strings.

    - Parameter obj: The  for which a hash code is to be returned.
    - Returns: A hash code for the given object, using a hashing algorithm that ignores the case of strings.

    */
    open /* method final */ func GetHashCode(obj : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CaseInsensitiveHashCodeProvider_i32__GetHashCode_0__1__Object(&__thrown, self.get_handle(), obj.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.CaseInsensitiveHashCodeProvider get_Default()
// docid: M:System.Collections.CaseInsensitiveHashCodeProvider.get_Default
    open class func get_Default() throws -> dotnet.System.Collections.CaseInsensitiveHashCodeProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CaseInsensitiveHashCodeProvider_CaseInsensitiveHashCodeProvider__get_Default_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.CaseInsensitiveHashCodeProvider(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.CaseInsensitiveHashCodeProvider get_DefaultInvariant()
// docid: M:System.Collections.CaseInsensitiveHashCodeProvider.get_DefaultInvariant
    open class func get_DefaultInvariant() throws -> dotnet.System.Collections.CaseInsensitiveHashCodeProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CaseInsensitiveHashCodeProvider_CaseInsensitiveHashCodeProvider__get_DefaultInvariant_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.CaseInsensitiveHashCodeProvider(hndl : __return);
        }
    }
    /**
    Gets an instance of  that is associated with the  of the current thread and that is always available.

    */
    public static var Default : dotnet.System.Collections.CaseInsensitiveHashCodeProvider {
        get {
            return try! get_Default();
        }
    }
    /**
    Gets an instance of  that is associated with  and that is always available.

    */
    public static var DefaultInvariant : dotnet.System.Collections.CaseInsensitiveHashCodeProvider {
        get {
            return try! get_DefaultInvariant();
        }
    }
} // CaseInsensitiveHashCodeProvider


// type: System.Collections.CollectionBase
    /**
    Provides the  base class for a strongly typed collection.

    */
open class CollectionBase
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_CollectionBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Clear()
// docid: M:System.Collections.CollectionBase.Clear
    /**
    Removes all objects from the  instance. This method cannot be overridden.

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_CollectionBase_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Collections.CollectionBase.GetEnumerator
    /**
    Returns an enumerator that iterates through the  instance.

    - Returns: An  for the  instance.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CollectionBase_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.CollectionBase.RemoveAt(System.Int32)
    /**
    Removes the element at the specified index of the  instance. This method is not overridable.

    - Parameter index: The zero-based index of the element to remove.
    */
    open /* method final */ func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_CollectionBase_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Capacity()
// docid: M:System.Collections.CollectionBase.get_Capacity
    open func get_Capacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CollectionBase_i32__get_Capacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Capacity(System.Int32)
// docid: M:System.Collections.CollectionBase.set_Capacity(System.Int32)
    open func set_Capacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_CollectionBase_void__set_Capacity_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.CollectionBase.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_CollectionBase_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets or sets the number of elements that the  can contain.

    */
    open var Capacity : Swift.Int32 {
        get {
            return try! get_Capacity();
        }
        set(v) {
            return try! set_Capacity(value: v);
        }
    }
    /**
    Gets the number of elements contained in the  instance. This property cannot be overridden.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // CollectionBase


// type: System.Collections.DictionaryBase
    /**
    Provides the  base class for a strongly typed collection of key/value pairs.

    */
open class DictionaryBase
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IDictionary
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_DictionaryBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Clear()
// docid: M:System.Collections.DictionaryBase.Clear
    /**
    Clears the contents of the  instance.

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_DictionaryBase_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
    /**
    Copies the  elements to a one-dimensional  at the specified index.

    - Parameter array: The one-dimensional  that is the destination of the  objects copied from the  instance. The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_DictionaryBase_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IDictionaryEnumerator GetEnumerator()
// docid: M:System.Collections.DictionaryBase.GetEnumerator
    /**
    Returns an  that iterates through the  instance.

    - Returns: An  for the  instance.

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IDictionaryEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_DictionaryBase_IDictionaryEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IDictionaryEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.DictionaryBase.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_DictionaryBase_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements contained in the  instance.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // DictionaryBase


// type: System.Collections.Queue
    /**
    Represents a first-in, first-out collection of objects.

    */
open class Queue
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Queue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Queue.#ctor
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity, and uses the default growth factor.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Queue_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.ICollection)
// docid: M:System.Collections.Queue.#ctor(System.Collections.ICollection)
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.

    - Parameter col: The  to copy elements from.
    */
    public init(col : dotnet.System.Collections.ICollection) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Queue_ctor_0__1__ICollection(&__thrown, col.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Queue.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and uses the default growth factor.

    - Parameter capacity: The initial number of elements that the  can contain.
    */
    public init(capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Queue_ctor_0__1__i32(&__thrown, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32, System.Single)
// docid: M:System.Collections.Queue.#ctor(System.Int32,System.Single)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and uses the specified growth factor.

    - Parameter capacity: The initial number of elements that the  can contain.
    - Parameter growFactor: The factor by which the capacity of the  is expanded.
    */
    public init(capacity : Swift.Int32, growFactor : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Queue_ctor_0__2__i32_f32(&__thrown, capacity, growFactor);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Collections.Queue.Clear
    /**
    Removes all objects from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Queue_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Clone()
// docid: M:System.Collections.Queue.Clone
    /**
    Creates a shallow copy of the .

    - Returns: A shallow copy of the .

    */
    open func Clone() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_Object__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Collections.Queue.Contains(System.Object)
    /**
    Determines whether an element is in the .

    - Parameter obj: The  to locate in the . The value can be .
    - Returns: 
         if  is found in the ; otherwise, .

    */
    open func Contains(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_bool__Contains_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.Queue.CopyTo(System.Array,System.Int32)
    /**
    Copies the  elements to an existing one-dimensional , starting at the specified array index.

    - Parameter array: The one-dimensional  that is the destination of the elements copied from . The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Queue_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Dequeue()
// docid: M:System.Collections.Queue.Dequeue
    /**
    Removes and returns the object at the beginning of the .

    - Returns: The object that is removed from the beginning of the .

    */
    open func Dequeue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_Object__Dequeue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Enqueue(System.Object)
// docid: M:System.Collections.Queue.Enqueue(System.Object)
    /**
    Adds an object to the end of the .

    - Parameter obj: The object to add to the . The value can be .
    */
    open func Enqueue(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Queue_void__Enqueue_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Collections.Queue.GetEnumerator
    /**
    Returns an enumerator that iterates through the .

    - Returns: An  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Object Peek()
// docid: M:System.Collections.Queue.Peek
    /**
    Returns the object at the beginning of the  without removing it.

    - Returns: The object at the beginning of the .

    */
    open func Peek() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_Object__Peek_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Queue Synchronized(System.Collections.Queue)
// docid: M:System.Collections.Queue.Synchronized(System.Collections.Queue)
    /**
    Returns a new  that wraps the original queue, and is thread safe.

    - Parameter queue: The  to synchronize.
    - Returns: A  wrapper that is synchronized (thread safe).

    */
    open class func Synchronized(queue : dotnet.System.Collections.Queue) throws -> dotnet.System.Collections.Queue {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_Queue__Synchronized_0__1__Queue(&__thrown, queue.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Queue(hndl : __return);
        }
    }
    // System.Object[] ToArray()
// docid: M:System.Collections.Queue.ToArray
    /**
    Copies the  elements to a new array.

    - Returns: A new array containing elements copied from the .

    */
    open func ToArray() throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_ObjectArray__ToArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // void TrimToSize()
// docid: M:System.Collections.Queue.TrimToSize
    /**
    Sets the capacity to the actual number of elements in the .

    */
    open func TrimToSize() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Queue_void__TrimToSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Queue.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Collections.Queue.get_IsSynchronized
    open func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Collections.Queue.get_SyncRoot
    open func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Queue_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether access to the  is synchronized (thread safe).

    */
    open var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the .

    */
    open var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // Queue


// type: System.Collections.ReadOnlyCollectionBase
    /**
    Provides the  base class for a strongly typed non-generic read-only collection.

    */
open class ReadOnlyCollectionBase
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_ReadOnlyCollectionBase_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Collections.ReadOnlyCollectionBase.GetEnumerator
    /**
    Returns an enumerator that iterates through the  instance.

    - Returns: An  for the  instance.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ReadOnlyCollectionBase_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.ReadOnlyCollectionBase.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_ReadOnlyCollectionBase_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the number of elements contained in the  instance.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // ReadOnlyCollectionBase


// type: System.Collections.SortedList
    /**
    Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.

    */
open class SortedList
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IDictionary,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_SortedList_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.SortedList.#ctor
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity, and is sorted according to the  interface implemented by each key added to the  object.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_SortedList_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IComparer)
// docid: M:System.Collections.SortedList.#ctor(System.Collections.IComparer)
    /**
    Initializes a new instance of the  class that is empty, has the default initial capacity, and is sorted according to the specified  interface.

    - Parameter comparer: The  implementation to use when comparing keys.  
  
 -or-  
  
  to use the  implementation of each key.
    */
    public init(comparer : Optional<dotnet.System.Collections.IComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_SortedList_ctor_0__1__IComparer(&__thrown, comparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IComparer, System.Int32)
// docid: M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and is sorted according to the specified  interface.

    - Parameter comparer: The  implementation to use when comparing keys.  
  
 -or-  
  
  to use the  implementation of each key.
    - Parameter capacity: The initial number of elements that the  object can contain.
    */
    public init(comparer : Optional<dotnet.System.Collections.IComparer>, capacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_SortedList_ctor_0__2__IComparer_i32(&__thrown, comparer?.get_handle() ?? nil, capacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IDictionary)
// docid: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)
    /**
    Initializes a new instance of the  class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the  interface implemented by each key.

    - Parameter d: The  implementation to copy to a new  object.
    */
    public init(d : dotnet.System.Collections.IDictionary) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_SortedList_ctor_0__1__IDictionary(&__thrown, d.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.IDictionary, System.Collections.IComparer)
// docid: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
    /**
    Initializes a new instance of the  class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified  interface.

    - Parameter d: The  implementation to copy to a new  object.
    - Parameter comparer: The  implementation to use when comparing keys.  
  
 -or-  
  
  to use the  implementation of each key.
    */
    public init(d : dotnet.System.Collections.IDictionary, comparer : Optional<dotnet.System.Collections.IComparer>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_SortedList_ctor_0__2__IDictionary_IComparer(&__thrown, d.get_handle(), comparer?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.SortedList.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty, has the specified initial capacity, and is sorted according to the  interface implemented by each key added to the  object.

    - Parameter initialCapacity: The initial number of elements that the  object can contain.
    */
    public init(initialCapacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_SortedList_ctor_0__1__i32(&__thrown, initialCapacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Object, System.Object)
// docid: M:System.Collections.SortedList.Add(System.Object,System.Object)
    /**
    Adds an element with the specified key and value to a  object.

    - Parameter key: The key of the element to add.
    - Parameter value: The value of the element to add. The value can be .
    */
    open func Add(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__Add_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Collections.SortedList.Clear
    /**
    Removes all elements from a  object.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Clone()
// docid: M:System.Collections.SortedList.Clone
    /**
    Creates a shallow copy of a  object.

    - Returns: A shallow copy of the  object.

    */
    open func Clone() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_Object__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Collections.SortedList.Contains(System.Object)
    /**
    Determines whether a  object contains a specific key.

    - Parameter key: The key to locate in the  object.
    - Returns: 
         if the  object contains an element with the specified ; otherwise, .

    */
    open func Contains(key : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_bool__Contains_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsKey(System.Object)
// docid: M:System.Collections.SortedList.ContainsKey(System.Object)
    /**
    Determines whether a  object contains a specific key.

    - Parameter key: The key to locate in the  object.
    - Returns: 
         if the  object contains an element with the specified ; otherwise, .

    */
    open func ContainsKey(key : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_bool__ContainsKey_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ContainsValue(System.Object)
// docid: M:System.Collections.SortedList.ContainsValue(System.Object)
    /**
    Determines whether a  object contains a specific value.

    - Parameter value: The value to locate in the  object. The value can be .
    - Returns: 
         if the  object contains an element with the specified ; otherwise, .

    */
    open func ContainsValue(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_bool__ContainsValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)
    /**
    Copies  elements to a one-dimensional  object, starting at the specified index in the array.

    - Parameter array: The one-dimensional  object that is the destination of the  objects copied from . The  must have zero-based indexing.
    - Parameter arrayIndex: The zero-based index in  at which copying begins.
    */
    open func CopyTo(array : dotnet.System.Array, arrayIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), arrayIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetByIndex(System.Int32)
// docid: M:System.Collections.SortedList.GetByIndex(System.Int32)
    /**
    Gets the value at the specified index of a  object.

    - Parameter index: The zero-based index of the value to get.
    - Returns: The value at the specified index of the  object.

    */
    open func GetByIndex(index : Swift.Int32) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_Object__GetByIndex_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IDictionaryEnumerator GetEnumerator()
// docid: M:System.Collections.SortedList.GetEnumerator
    /**
    Returns an  object that iterates through a  object.

    - Returns: An  object for the  object.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IDictionaryEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_IDictionaryEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IDictionaryEnumerator(hndl : __return);
        }
    }
    // System.Object GetKey(System.Int32)
// docid: M:System.Collections.SortedList.GetKey(System.Int32)
    /**
    Gets the key at the specified index of a  object.

    - Parameter index: The zero-based index of the key to get.
    - Returns: The key at the specified index of the  object.

    */
    open func GetKey(index : Swift.Int32) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_Object__GetKey_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Collections.IList GetKeyList()
// docid: M:System.Collections.SortedList.GetKeyList
    /**
    Gets the keys in a  object.

    - Returns: An  object containing the keys in the  object.

    */
    open func GetKeyList() throws -> dotnet.System.Collections.IList {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_IList__GetKeyList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IList(hndl : __return);
        }
    }
    // System.Collections.IList GetValueList()
// docid: M:System.Collections.SortedList.GetValueList
    /**
    Gets the values in a  object.

    - Returns: An  object containing the values in the  object.

    */
    open func GetValueList() throws -> dotnet.System.Collections.IList {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_IList__GetValueList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IList(hndl : __return);
        }
    }
    // System.Int32 IndexOfKey(System.Object)
// docid: M:System.Collections.SortedList.IndexOfKey(System.Object)
    /**
    Returns the zero-based index of the specified key in a  object.

    - Parameter key: The key to locate in the  object.
    - Returns: The zero-based index of the  parameter, if  is found in the  object; otherwise, -1.

    */
    open func IndexOfKey(key : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_i32__IndexOfKey_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 IndexOfValue(System.Object)
// docid: M:System.Collections.SortedList.IndexOfValue(System.Object)
    /**
    Returns the zero-based index of the first occurrence of the specified value in a  object.

    - Parameter value: The value to locate in the  object. The value can be .
    - Returns: The zero-based index of the first occurrence of the  parameter, if  is found in the  object; otherwise, -1.

    */
    open func IndexOfValue(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_i32__IndexOfValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Remove(System.Object)
// docid: M:System.Collections.SortedList.Remove(System.Object)
    /**
    Removes the element with the specified key from a  object.

    - Parameter key: The key of the element to remove.
    */
    open func Remove(key : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__Remove_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Collections.SortedList.RemoveAt(System.Int32)
    /**
    Removes the element at the specified index of a  object.

    - Parameter index: The zero-based index of the element to remove.
    */
    open func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetByIndex(System.Int32, System.Object)
// docid: M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
    /**
    Replaces the value at a specific index in a  object.

    - Parameter index: The zero-based index at which to save .
    - Parameter value: The  to save into the  object. The value can be .
    */
    open func SetByIndex(index : Swift.Int32, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__SetByIndex_0__2__i32_Object(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.SortedList Synchronized(System.Collections.SortedList)
// docid: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)
    /**
    Returns a synchronized (thread-safe) wrapper for a  object.

    - Parameter list: The  object to synchronize.
    - Returns: A synchronized (thread-safe) wrapper for the  object.

    */
    open class func Synchronized(list : dotnet.System.Collections.SortedList) throws -> dotnet.System.Collections.SortedList {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_SortedList__Synchronized_0__1__SortedList(&__thrown, list.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.SortedList(hndl : __return);
        }
    }
    // void TrimToSize()
// docid: M:System.Collections.SortedList.TrimToSize
    /**
    Sets the capacity to the actual number of elements in a  object.

    */
    open func TrimToSize() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__TrimToSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Capacity()
// docid: M:System.Collections.SortedList.get_Capacity
    open func get_Capacity() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_i32__get_Capacity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Capacity(System.Int32)
// docid: M:System.Collections.SortedList.set_Capacity(System.Int32)
    open func set_Capacity(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__set_Capacity_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.SortedList.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsFixedSize()
// docid: M:System.Collections.SortedList.get_IsFixedSize
    open func get_IsFixedSize() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_bool__get_IsFixedSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.Collections.SortedList.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Collections.SortedList.get_IsSynchronized
    open func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Keys()
// docid: M:System.Collections.SortedList.get_Keys
    open func get_Keys() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_ICollection__get_Keys_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Collections.SortedList.get_SyncRoot
    open func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Values()
// docid: M:System.Collections.SortedList.get_Values
    open func get_Values() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_ICollection__get_Values_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Object)
// docid: M:System.Collections.SortedList.get_Item(System.Object)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(key : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_SortedList_Object__get_Item_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Object, System.Object)
// docid: M:System.Collections.SortedList.set_Item(System.Object,System.Object)
    open func set_Item(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_SortedList_void__set_Item_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the capacity of a  object.

    */
    open var Capacity : Swift.Int32 {
        get {
            return try! get_Capacity();
        }
        set(v) {
            return try! set_Capacity(value: v);
        }
    }
    /**
    Gets the number of elements contained in a  object.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether a  object has a fixed size.

    */
    open var IsFixedSize : Bool {
        get {
            return try! get_IsFixedSize();
        }
    }
    /**
    Gets a value indicating whether a  object is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    Gets a value indicating whether access to a  object is synchronized (thread safe).

    */
    open var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets the keys in a  object.

    */
    open var Keys : dotnet.System.Collections.ICollection {
        get {
            return try! get_Keys();
        }
    }
    /**
    Gets an object that can be used to synchronize access to a  object.

    */
    open var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
    /**
    Gets the values in a  object.

    */
    open var Values : dotnet.System.Collections.ICollection {
        get {
            return try! get_Values();
        }
    }
} // SortedList


// type: System.Collections.Stack
    /**
    Represents a simple last-in-first-out (LIFO) non-generic collection of objects.

    */
open class Stack
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Stack_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Stack.#ctor
    /**
    Initializes a new instance of the  class that is empty and has the default initial capacity.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Stack_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.ICollection)
// docid: M:System.Collections.Stack.#ctor(System.Collections.ICollection)
    /**
    Initializes a new instance of the  class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.

    - Parameter col: The  to copy elements from.
    */
    public init(col : dotnet.System.Collections.ICollection) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Stack_ctor_0__1__ICollection(&__thrown, col.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.Collections.Stack.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.

    - Parameter initialCapacity: The initial number of elements that the  can contain.
    */
    public init(initialCapacity : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Stack_ctor_0__1__i32(&__thrown, initialCapacity);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Clear()
// docid: M:System.Collections.Stack.Clear
    /**
    Removes all objects from the .

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Stack_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Clone()
// docid: M:System.Collections.Stack.Clone
    /**
    Creates a shallow copy of the .

    - Returns: A shallow copy of the .

    */
    open func Clone() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_Object__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool Contains(System.Object)
// docid: M:System.Collections.Stack.Contains(System.Object)
    /**
    Determines whether an element is in the .

    - Parameter obj: The object to locate in the . The value can be .
    - Returns: 
        , if  is found in the ; otherwise, .

    */
    open func Contains(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_bool__Contains_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.Collections.Stack.CopyTo(System.Array,System.Int32)
    /**
    Copies the  to an existing one-dimensional , starting at the specified array index.

    - Parameter array: The one-dimensional  that is the destination of the elements copied from . The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    open func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Stack_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Collections.Stack.GetEnumerator
    /**
    Returns an  for the .

    - Returns: An  for the .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Object Peek()
// docid: M:System.Collections.Stack.Peek
    /**
    Returns the object at the top of the  without removing it.

    - Returns: The  at the top of the .

    */
    open func Peek() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_Object__Peek_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Pop()
// docid: M:System.Collections.Stack.Pop
    /**
    Removes and returns the object at the top of the .

    - Returns: The  removed from the top of the .

    */
    open func Pop() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_Object__Pop_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Push(System.Object)
// docid: M:System.Collections.Stack.Push(System.Object)
    /**
    Inserts an object at the top of the .

    - Parameter obj: The  to push onto the . The value can be .
    */
    open func Push(obj : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Collections_Stack_void__Push_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.Stack Synchronized(System.Collections.Stack)
// docid: M:System.Collections.Stack.Synchronized(System.Collections.Stack)
    /**
    Returns a synchronized (thread safe) wrapper for the .

    - Parameter stack: The  to synchronize.
    - Returns: A synchronized wrapper around the .

    */
    open class func Synchronized(stack : dotnet.System.Collections.Stack) throws -> dotnet.System.Collections.Stack {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_Stack__Synchronized_0__1__Stack(&__thrown, stack.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Stack(hndl : __return);
        }
    }
    // System.Object[] ToArray()
// docid: M:System.Collections.Stack.ToArray
    /**
    Copies the  to a new array.

    - Returns: A new array containing copies of the elements of the .

    */
    open func ToArray() throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_ObjectArray__ToArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Collections.Stack.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsSynchronized()
// docid: M:System.Collections.Stack.get_IsSynchronized
    open func get_IsSynchronized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_bool__get_IsSynchronized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Object get_SyncRoot()
// docid: M:System.Collections.Stack.get_SyncRoot
    open func get_SyncRoot() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Stack_Object__get_SyncRoot_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the number of elements contained in the .

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets a value indicating whether access to the  is synchronized (thread safe).

    */
    open var IsSynchronized : Bool {
        get {
            return try! get_IsSynchronized();
        }
    }
    /**
    Gets an object that can be used to synchronize access to the .

    */
    open var SyncRoot : dotnet.System.Object {
        get {
            return try! get_SyncRoot();
        }
    }
} // Stack


}
// System.Collections.Specialized
extension System.Collections.Specialized {
// type: System.Collections.Specialized.CollectionsUtil
    /**
    Creates collections that ignore the case in strings.

    */
open class CollectionsUtil
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Collections_Specialized_CollectionsUtil_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Collections.Specialized.CollectionsUtil.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Collections_Specialized_CollectionsUtil_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.Hashtable CreateCaseInsensitiveHashtable()
// docid: M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable
    /**
    Creates a new case-insensitive instance of the  class with the default initial capacity.

    - Returns: A new case-insensitive instance of the  class with the default initial capacity.

    */
    open class func CreateCaseInsensitiveHashtable() throws -> dotnet.System.Collections.Hashtable {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_CollectionsUtil_Hashtable__CreateCaseInsensitiveHashtable_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Hashtable(hndl : __return);
        }
    }
    // System.Collections.Hashtable CreateCaseInsensitiveHashtable(System.Collections.IDictionary)
// docid: M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)
    /**
    Copies the entries from the specified dictionary to a new case-insensitive instance of the  class with the same initial capacity as the number of entries copied.

    - Parameter d: The  to copy to a new case-insensitive .
    - Returns: A new case-insensitive instance of the  class containing the entries from the specified .

    */
    open class func CreateCaseInsensitiveHashtable(d : dotnet.System.Collections.IDictionary) throws -> dotnet.System.Collections.Hashtable {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_CollectionsUtil_Hashtable__CreateCaseInsensitiveHashtable_0__1__IDictionary(&__thrown, d.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Hashtable(hndl : __return);
        }
    }
    // System.Collections.Hashtable CreateCaseInsensitiveHashtable(System.Int32)
// docid: M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)
    /**
    Creates a new case-insensitive instance of the  class with the specified initial capacity.

    - Parameter capacity: The approximate number of entries that the  can initially contain.
    - Returns: A new case-insensitive instance of the  class with the specified initial capacity.

    */
    open class func CreateCaseInsensitiveHashtable(capacity : Swift.Int32) throws -> dotnet.System.Collections.Hashtable {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_CollectionsUtil_Hashtable__CreateCaseInsensitiveHashtable_0__1__i32(&__thrown, capacity);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Hashtable(hndl : __return);
        }
    }
    // System.Collections.SortedList CreateCaseInsensitiveSortedList()
// docid: M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList
    /**
    Creates a new instance of the  class that ignores the case of strings.

    - Returns: A new instance of the  class that ignores the case of strings.

    */
    open class func CreateCaseInsensitiveSortedList() throws -> dotnet.System.Collections.SortedList {
        var __thrown : NullableHandle = nil;
        let __return = System_Collections_Specialized_CollectionsUtil_SortedList__CreateCaseInsensitiveSortedList_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.SortedList(hndl : __return);
        }
    }
} // CollectionsUtil


}



