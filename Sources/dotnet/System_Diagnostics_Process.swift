// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// Microsoft
// Microsoft.Win32
// Microsoft.Win32.SafeHandles
extension Microsoft.Win32.SafeHandles {
// type: Microsoft.Win32.SafeHandles.SafeProcessHandle
    /**
    Provides a managed wrapper for a process handle.

    */
public final class SafeProcessHandle
    :
    dotnet.Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_SafeHandles_SafeProcessHandle_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Win32_SafeHandles_SafeProcessHandle_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IntPtr, bool)
// docid: M:Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)
    /**
    Initializes a new instance of the  class from the specified handle, indicating whether to release the handle during the finalization phase.

    - Parameter existingHandle: The handle to be wrapped.
    - Parameter ownsHandle: 
         to reliably let  release the handle during the finalization phase; otherwise, .
    */
    public init(existingHandle : dotnet.System.IntPtr, ownsHandle : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Win32_SafeHandles_SafeProcessHandle_ctor_0__2__IntPtr_bool(&__thrown, existingHandle.get_value(), Swift.Int32(ownsHandle ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SafeProcessHandle


}



// System
// System.Diagnostics
extension System.Diagnostics {
// type: System.Diagnostics.DataReceivedEventArgs
    /**
    Provides data for the  and  events.

    */
open class DataReceivedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DataReceivedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.String get_Data()
// docid: M:System.Diagnostics.DataReceivedEventArgs.get_Data
    open func get_Data() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DataReceivedEventArgs_String__get_Data_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the line of characters that was written to a redirected  output stream.

    */
    open var Data : Optional<dotnet.System.String> {
        get {
            return try! get_Data();
        }
    }
} // DataReceivedEventArgs


// type: System.Diagnostics.DataReceivedEventHandler
    /**
    Represents the method that will handle the  event or  event of a .

    */
public final class DataReceivedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DataReceivedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Diagnostics.DataReceivedEventArgs)
// docid: M:System.Diagnostics.DataReceivedEventHandler.Invoke(System.Object,System.Diagnostics.DataReceivedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.Diagnostics.DataReceivedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DataReceivedEventHandler_void__Invoke_0__2__Object_DataReceivedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Diagnostics.DataReceivedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Diagnostics.DataReceivedEventHandler.BeginInvoke(System.Object,System.Diagnostics.DataReceivedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.Diagnostics.DataReceivedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DataReceivedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DataReceivedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Diagnostics.DataReceivedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DataReceivedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.Diagnostics.DataReceivedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.Diagnostics.DataReceivedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DataReceivedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Diagnostics.DataReceivedEventArgs)
// docid: M:System.Diagnostics.DataReceivedEventHandler.Invoke(System.Object,System.Diagnostics.DataReceivedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.Diagnostics.DataReceivedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DataReceivedEventHandler_void__Invoke_0__2__Object_DataReceivedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DataReceivedEventHandler


// type: System.Diagnostics.MonitoringDescriptionAttribute
    /**
    Specifies a description for a property or event.

    */
open class MonitoringDescriptionAttribute
    :
    dotnet.System.ComponentModel.DescriptionAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_MonitoringDescriptionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.MonitoringDescriptionAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class, using the specified description.

    - Parameter description: The application-defined description text.
    */
    public override init(description : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_MonitoringDescriptionAttribute_ctor_0__1__String(&__thrown, description.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.Diagnostics.MonitoringDescriptionAttribute.get_Description
    open override func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_MonitoringDescriptionAttribute_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets description text associated with the item monitored.

    */
    open override var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
    }
} // MonitoringDescriptionAttribute


// type: System.Diagnostics.Process
    /**
    Provides access to local and remote processes and enables you to start and stop local system processes.

    */
open class Process
    :
    dotnet.System.ComponentModel.Component
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Process_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.Process.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_Process_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void BeginErrorReadLine()
// docid: M:System.Diagnostics.Process.BeginErrorReadLine
    /**
    Begins asynchronous read operations on the redirected  stream of the application.

    */
    open func BeginErrorReadLine() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__BeginErrorReadLine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void BeginOutputReadLine()
// docid: M:System.Diagnostics.Process.BeginOutputReadLine
    /**
    Begins asynchronous read operations on the redirected  stream of the application.

    */
    open func BeginOutputReadLine() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__BeginOutputReadLine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CancelErrorRead()
// docid: M:System.Diagnostics.Process.CancelErrorRead
    /**
    Cancels the asynchronous read operation on the redirected  stream of an application.

    */
    open func CancelErrorRead() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__CancelErrorRead_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CancelOutputRead()
// docid: M:System.Diagnostics.Process.CancelOutputRead
    /**
    Cancels the asynchronous read operation on the redirected  stream of an application.

    */
    open func CancelOutputRead() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__CancelOutputRead_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close()
// docid: M:System.Diagnostics.Process.Close
    /**
    Frees all the resources that are associated with this component.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool CloseMainWindow()
// docid: M:System.Diagnostics.Process.CloseMainWindow
    /**
    Closes a process that has a user interface by sending a close message to its main window.

    - Returns: 
         if the close message was successfully sent;  if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).

    */
    open func CloseMainWindow() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__CloseMainWindow_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void EnterDebugMode()
// docid: M:System.Diagnostics.Process.EnterDebugMode
    /**
    Puts a  component in state to interact with operating system processes that run in a special mode by enabling the native property  on the current thread.

    */
    open class func EnterDebugMode() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__EnterDebugMode_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Diagnostics.Process GetCurrentProcess()
// docid: M:System.Diagnostics.Process.GetCurrentProcess
    /**
    Gets a new  component and associates it with the currently active process.

    - Returns: A new  component associated with the process resource that is running the calling application.

    */
    open class func GetCurrentProcess() throws -> dotnet.System.Diagnostics.Process {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__GetCurrentProcess_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Process(hndl : __return);
        }
    }
    // System.Diagnostics.Process GetProcessById(System.Int32)
// docid: M:System.Diagnostics.Process.GetProcessById(System.Int32)
    /**
    Returns a new  component, given the identifier of a process on the local computer.

    - Parameter processId: The system-unique identifier of a process resource.
    - Returns: A  component that is associated with the local process resource identified by the  parameter.

    */
    open class func GetProcessById(processId : Swift.Int32) throws -> dotnet.System.Diagnostics.Process {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__GetProcessById_0__1__i32(&__thrown, processId);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Process(hndl : __return);
        }
    }
    // System.Diagnostics.Process GetProcessById(System.Int32, System.String)
// docid: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
    /**
    Returns a new  component, given a process identifier and the name of a computer on the network.

    - Parameter processId: The system-unique identifier of a process resource.
    - Parameter machineName: The name of a computer on the network.
    - Returns: A  component that is associated with a remote process resource identified by the  parameter.

    */
    open class func GetProcessById(processId : Swift.Int32, machineName : dotnet.System.String) throws -> dotnet.System.Diagnostics.Process {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__GetProcessById_0__2__i32_String(&__thrown, processId, machineName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Process(hndl : __return);
        }
    }
    // System.Diagnostics.Process[] GetProcesses()
// docid: M:System.Diagnostics.Process.GetProcesses
    /**
    Creates a new  component for each process resource on the local computer.

    - Returns: An array of type  that represents all the process resources running on the local computer.

    */
    open class func GetProcesses() throws -> dotnet.System_Arr<dotnet.System.Diagnostics.Process> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessArray__GetProcesses_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Diagnostics.Process>(hndl : __return);
        }
    }
    // System.Diagnostics.Process[] GetProcesses(System.String)
// docid: M:System.Diagnostics.Process.GetProcesses(System.String)
    /**
    Creates a new  component for each process resource on the specified computer.

    - Parameter machineName: The computer from which to read the list of processes.
    - Returns: An array of type  that represents all the process resources running on the specified computer.

    */
    open class func GetProcesses(machineName : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.Diagnostics.Process> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessArray__GetProcesses_0__1__String(&__thrown, machineName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Diagnostics.Process>(hndl : __return);
        }
    }
    // System.Diagnostics.Process[] GetProcessesByName(System.String)
// docid: M:System.Diagnostics.Process.GetProcessesByName(System.String)
    /**
    Creates an array of new  components and associates them with all the process resources on the local computer that share the specified process name.

    - Parameter processName: The friendly name of the process.
    - Returns: An array of type  that represents the process resources running the specified application or file.

    */
    open class func GetProcessesByName(processName : Optional<dotnet.System.String>) throws -> dotnet.System_Arr<dotnet.System.Diagnostics.Process> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessArray__GetProcessesByName_0__1__String(&__thrown, processName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Diagnostics.Process>(hndl : __return);
        }
    }
    // System.Diagnostics.Process[] GetProcessesByName(System.String, System.String)
// docid: M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)
    /**
    Creates an array of new  components and associates them with all the process resources on a remote computer that share the specified process name.

    - Parameter processName: The friendly name of the process.
    - Parameter machineName: The name of a computer on the network.
    - Returns: An array of type  that represents the process resources running the specified application or file.

    */
    open class func GetProcessesByName(processName : Optional<dotnet.System.String>, machineName : dotnet.System.String) throws -> dotnet.System_Arr<dotnet.System.Diagnostics.Process> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessArray__GetProcessesByName_0__2__String_String(&__thrown, processName?.get_handle() ?? nil, machineName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Diagnostics.Process>(hndl : __return);
        }
    }
    // void Kill()
// docid: M:System.Diagnostics.Process.Kill
    /**
    Immediately stops the associated process.

    */
    open func Kill() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__Kill_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Kill(bool)
// docid: M:System.Diagnostics.Process.Kill(System.Boolean)
    /**
    Immediately stops the associated process, and optionally its child/descendent processes.

    - Parameter entireProcessTree: 
         to kill the associated process and its descendants;  to kill only the associated process.
    */
    open func Kill(entireProcessTree : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__Kill_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(entireProcessTree ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void LeaveDebugMode()
// docid: M:System.Diagnostics.Process.LeaveDebugMode
    /**
    Takes a  component out of the state that lets it interact with operating system processes that run in a special mode.

    */
    open class func LeaveDebugMode() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__LeaveDebugMode_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Refresh()
// docid: M:System.Diagnostics.Process.Refresh
    /**
    Discards any information about the associated process that has been cached inside the process component.

    */
    open func Refresh() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__Refresh_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Start()
// docid: M:System.Diagnostics.Process.Start
    /**
    Starts (or reuses) the process resource that is specified by the  property of this  component and associates it with the component.

    - Returns: 
         if a process resource is started;  if no new process resource is started (for example, if an existing process is reused).

    */
    open func Start() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__Start_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Diagnostics.Process Start(System.Diagnostics.ProcessStartInfo)
// docid: M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
    /**
    Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new  component.

    - Parameter startInfo: The  that contains the information that is used to start the process, including the file name and any command-line arguments.
    - Returns: A new  that is associated with the process resource, or  if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its  property already set to . In this case, the started process may have activated an existing instance of itself and then exited.

    */
    open class func Start(startInfo : dotnet.System.Diagnostics.ProcessStartInfo) throws -> Optional<dotnet.System.Diagnostics.Process> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__Start_0__1__ProcessStartInfo(&__thrown, startInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Process(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Process Start(System.String)
// docid: M:System.Diagnostics.Process.Start(System.String)
    /**
    Starts a process resource by specifying the name of a document or application file and associates the resource with a new  component.

    - Parameter fileName: The name of a document or application file to run in the process.
    - Returns: A new  that is associated with the process resource, or  if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its  property already set to . In this case, the started process may have activated an existing instance of itself and then exited.

    */
    open class func Start(fileName : dotnet.System.String) throws -> dotnet.System.Diagnostics.Process {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__Start_0__1__String(&__thrown, fileName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Process(hndl : __return);
        }
    }
    // System.Diagnostics.Process Start(System.String, System.String)
// docid: M:System.Diagnostics.Process.Start(System.String,System.String)
    /**
    Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new  component.

    - Parameter fileName: The name of an application file to run in the process.
    - Parameter arguments: Command-line arguments to pass when starting the process.
    - Returns: A new  that is associated with the process resource, or  if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its  property already set to . In this case, the started process may have activated an existing instance of itself and then exited.

    */
    open class func Start(fileName : dotnet.System.String, arguments : dotnet.System.String) throws -> dotnet.System.Diagnostics.Process {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__Start_0__2__String_String(&__thrown, fileName.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Process(hndl : __return);
        }
    }
    // System.Diagnostics.Process Start(System.String, System.Collections.Generic.IEnumerable<System.String>)
// docid: M:System.Diagnostics.Process.Start(System.String,System.Collections.Generic.IEnumerable{System.String})
    /**
    Starts a process resource by specifying the name of an application and a set of command line arguments.

    - Parameter fileName: The name of a document or application file to run in the process.
    - Parameter arguments: The command-line arguments to pass when starting the process.
    - Returns: A new  that is associated with the process resource, or  if no process resource is started.

    */
    open class func Start(fileName : dotnet.System.String, arguments : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.String>) throws -> dotnet.System.Diagnostics.Process {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__Start_0__2__String_System_Collections_Generic_IEnumerable_string_(&__thrown, fileName.get_handle(), arguments.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.Process(hndl : __return);
        }
    }
    // System.Diagnostics.Process Start(System.String, System.String, System.Security.SecureString, System.String)
// docid: M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)
    /**
    Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new  component.

    - Parameter fileName: The name of an application file to run in the process.
    - Parameter userName: The user name to use when starting the process.
    - Parameter password: A  that contains the password to use when starting the process.
    - Parameter domain: The domain to use when starting the process.
    - Returns: A new  that is associated with the process resource, or  if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its  property already set to . In this case, the started process may have activated an existing instance of itself and then exited.

    */
    open class func Start(fileName : dotnet.System.String, userName : dotnet.System.String, password : dotnet.System.Security.SecureString, domain : dotnet.System.String) throws -> Optional<dotnet.System.Diagnostics.Process> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__Start_0__4__String_String_SecureString_String(&__thrown, fileName.get_handle(), userName.get_handle(), password.get_handle(), domain.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Process(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Diagnostics.Process Start(System.String, System.String, System.String, System.Security.SecureString, System.String)
// docid: M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)
    /**
    Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new  component.

    - Parameter fileName: The name of an application file to run in the process.
    - Parameter arguments: Command-line arguments to pass when starting the process.
    - Parameter userName: The user name to use when starting the process.
    - Parameter password: A  that contains the password to use when starting the process.
    - Parameter domain: The domain to use when starting the process.
    - Returns: A new  that is associated with the process resource, or  if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its  property already set to . In this case, the started process may have activated an existing instance of itself and then exited.

    */
    open class func Start(fileName : dotnet.System.String, arguments : dotnet.System.String, userName : dotnet.System.String, password : dotnet.System.Security.SecureString, domain : dotnet.System.String) throws -> Optional<dotnet.System.Diagnostics.Process> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Process__Start_0__5__String_String_String_SecureString_String(&__thrown, fileName.get_handle(), arguments.get_handle(), userName.get_handle(), password.get_handle(), domain.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.Process(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToString()
// docid: M:System.Diagnostics.Process.ToString
    /**
    Formats the process's name as a string, combined with the parent component type, if applicable.

    - Returns: The , combined with the base component's  return value.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void WaitForExit()
// docid: M:System.Diagnostics.Process.WaitForExit
    /**
    Instructs the  component to wait indefinitely for the associated process to exit.

    */
    open func WaitForExit() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__WaitForExit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool WaitForExit(System.Int32)
// docid: M:System.Diagnostics.Process.WaitForExit(System.Int32)
    /**
    Instructs the  component to wait the specified number of milliseconds for the associated process to exit.

    - Parameter milliseconds: The amount of time, in milliseconds, to wait for the associated process to exit. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.
    - Returns: 
         if the associated process has exited; otherwise, .

    */
    open func WaitForExit(milliseconds : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__WaitForExit_0__1__i32(&__thrown, self.get_handle(), milliseconds);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Threading.Tasks.Task WaitForExitAsync(System.Threading.CancellationToken)
// docid: M:System.Diagnostics.Process.WaitForExitAsync(System.Threading.CancellationToken)
    /**
    Instructs the process component to wait for the associated process to exit, or for the  to be cancelled.

    - Parameter cancellationToken: An optional token to cancel the asynchronous operation.
    - Returns: A task that will complete when the process has exited, cancellation has been requested, or an error occurs.

    */
    open func WaitForExitAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_Task__WaitForExitAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // bool WaitForInputIdle()
// docid: M:System.Diagnostics.Process.WaitForInputIdle
    /**
    Causes the  component to wait indefinitely for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.

    - Returns: 
         if the associated process has reached an idle state.

    */
    open func WaitForInputIdle() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__WaitForInputIdle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool WaitForInputIdle(System.Int32)
// docid: M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)
    /**
    Causes the  component to wait the specified number of milliseconds for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.

    - Parameter milliseconds: A value of 1 to  that specifies the amount of time, in milliseconds, to wait for the associated process to become idle. A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.
    - Returns: 
         if the associated process has reached an idle state; otherwise, .

    */
    open func WaitForInputIdle(milliseconds : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__WaitForInputIdle_0__1__i32(&__thrown, self.get_handle(), milliseconds);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_BasePriority()
// docid: M:System.Diagnostics.Process.get_BasePriority
    open func get_BasePriority() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_BasePriority_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_EnableRaisingEvents()
// docid: M:System.Diagnostics.Process.get_EnableRaisingEvents
    open func get_EnableRaisingEvents() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__get_EnableRaisingEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableRaisingEvents(bool)
// docid: M:System.Diagnostics.Process.set_EnableRaisingEvents(System.Boolean)
    open func set_EnableRaisingEvents(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__set_EnableRaisingEvents_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_ExitCode()
// docid: M:System.Diagnostics.Process.get_ExitCode
    open func get_ExitCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_ExitCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.DateTime get_ExitTime()
// docid: M:System.Diagnostics.Process.get_ExitTime
    open func get_ExitTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_DateTime__get_ExitTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.IntPtr get_Handle()
// docid: M:System.Diagnostics.Process.get_Handle
    open func get_Handle() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_IntPtr__get_Handle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_HandleCount()
// docid: M:System.Diagnostics.Process.get_HandleCount
    open func get_HandleCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_HandleCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_HasExited()
// docid: M:System.Diagnostics.Process.get_HasExited
    open func get_HasExited() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__get_HasExited_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Id()
// docid: M:System.Diagnostics.Process.get_Id
    open func get_Id() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_MachineName()
// docid: M:System.Diagnostics.Process.get_MachineName
    open func get_MachineName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_String__get_MachineName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ProcessModule get_MainModule()
// docid: M:System.Diagnostics.Process.get_MainModule
    open func get_MainModule() throws -> Optional<dotnet.System.Diagnostics.ProcessModule> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessModule__get_MainModule_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.ProcessModule(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.IntPtr get_MainWindowHandle()
// docid: M:System.Diagnostics.Process.get_MainWindowHandle
    open func get_MainWindowHandle() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_IntPtr__get_MainWindowHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] System.String get_MainWindowTitle()
// docid: M:System.Diagnostics.Process.get_MainWindowTitle
    open func get_MainWindowTitle() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_String__get_MainWindowTitle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.IntPtr get_MaxWorkingSet()
// docid: M:System.Diagnostics.Process.get_MaxWorkingSet
    open func get_MaxWorkingSet() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_IntPtr__get_MaxWorkingSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] void set_MaxWorkingSet(System.IntPtr)
// docid: M:System.Diagnostics.Process.set_MaxWorkingSet(System.IntPtr)
    open func set_MaxWorkingSet(value : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__set_MaxWorkingSet_0__1__IntPtr(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IntPtr get_MinWorkingSet()
// docid: M:System.Diagnostics.Process.get_MinWorkingSet
    open func get_MinWorkingSet() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_IntPtr__get_MinWorkingSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] void set_MinWorkingSet(System.IntPtr)
// docid: M:System.Diagnostics.Process.set_MinWorkingSet(System.IntPtr)
    open func set_MinWorkingSet(value : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__set_MinWorkingSet_0__1__IntPtr(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ProcessModuleCollection get_Modules()
// docid: M:System.Diagnostics.Process.get_Modules
    open func get_Modules() throws -> dotnet.System.Diagnostics.ProcessModuleCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessModuleCollection__get_Modules_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ProcessModuleCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_NonpagedSystemMemorySize()
// docid: M:System.Diagnostics.Process.get_NonpagedSystemMemorySize
    open func get_NonpagedSystemMemorySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_NonpagedSystemMemorySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_NonpagedSystemMemorySize64()
// docid: M:System.Diagnostics.Process.get_NonpagedSystemMemorySize64
    open func get_NonpagedSystemMemorySize64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_NonpagedSystemMemorySize64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_PagedMemorySize()
// docid: M:System.Diagnostics.Process.get_PagedMemorySize
    open func get_PagedMemorySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_PagedMemorySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PagedMemorySize64()
// docid: M:System.Diagnostics.Process.get_PagedMemorySize64
    open func get_PagedMemorySize64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_PagedMemorySize64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_PagedSystemMemorySize()
// docid: M:System.Diagnostics.Process.get_PagedSystemMemorySize
    open func get_PagedSystemMemorySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_PagedSystemMemorySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PagedSystemMemorySize64()
// docid: M:System.Diagnostics.Process.get_PagedSystemMemorySize64
    open func get_PagedSystemMemorySize64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_PagedSystemMemorySize64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_PeakPagedMemorySize()
// docid: M:System.Diagnostics.Process.get_PeakPagedMemorySize
    open func get_PeakPagedMemorySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_PeakPagedMemorySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PeakPagedMemorySize64()
// docid: M:System.Diagnostics.Process.get_PeakPagedMemorySize64
    open func get_PeakPagedMemorySize64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_PeakPagedMemorySize64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_PeakVirtualMemorySize()
// docid: M:System.Diagnostics.Process.get_PeakVirtualMemorySize
    open func get_PeakVirtualMemorySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_PeakVirtualMemorySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PeakVirtualMemorySize64()
// docid: M:System.Diagnostics.Process.get_PeakVirtualMemorySize64
    open func get_PeakVirtualMemorySize64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_PeakVirtualMemorySize64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_PeakWorkingSet()
// docid: M:System.Diagnostics.Process.get_PeakWorkingSet
    open func get_PeakWorkingSet() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_PeakWorkingSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PeakWorkingSet64()
// docid: M:System.Diagnostics.Process.get_PeakWorkingSet64
    open func get_PeakWorkingSet64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_PeakWorkingSet64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_PriorityBoostEnabled()
// docid: M:System.Diagnostics.Process.get_PriorityBoostEnabled
    open func get_PriorityBoostEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__get_PriorityBoostEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PriorityBoostEnabled(bool)
// docid: M:System.Diagnostics.Process.set_PriorityBoostEnabled(System.Boolean)
    open func set_PriorityBoostEnabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__set_PriorityBoostEnabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ProcessPriorityClass get_PriorityClass()
// docid: M:System.Diagnostics.Process.get_PriorityClass
    open func get_PriorityClass() throws -> dotnet.System.Diagnostics.ProcessPriorityClass {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessPriorityClass__get_PriorityClass_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ProcessPriorityClass(val: __return);
        }
    }
    // [IsSpecialName] void set_PriorityClass(System.Diagnostics.ProcessPriorityClass)
// docid: M:System.Diagnostics.Process.set_PriorityClass(System.Diagnostics.ProcessPriorityClass)
    open func set_PriorityClass(value : dotnet.System.Diagnostics.ProcessPriorityClass) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__set_PriorityClass_0__1__ProcessPriorityClass(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_PrivateMemorySize()
// docid: M:System.Diagnostics.Process.get_PrivateMemorySize
    open func get_PrivateMemorySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_PrivateMemorySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_PrivateMemorySize64()
// docid: M:System.Diagnostics.Process.get_PrivateMemorySize64
    open func get_PrivateMemorySize64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_PrivateMemorySize64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_PrivilegedProcessorTime()
// docid: M:System.Diagnostics.Process.get_PrivilegedProcessorTime
    open func get_PrivilegedProcessorTime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_TimeSpan__get_PrivilegedProcessorTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ProcessName()
// docid: M:System.Diagnostics.Process.get_ProcessName
    open func get_ProcessName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_String__get_ProcessName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.IntPtr get_ProcessorAffinity()
// docid: M:System.Diagnostics.Process.get_ProcessorAffinity
    open func get_ProcessorAffinity() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_IntPtr__get_ProcessorAffinity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] void set_ProcessorAffinity(System.IntPtr)
// docid: M:System.Diagnostics.Process.set_ProcessorAffinity(System.IntPtr)
    open func set_ProcessorAffinity(value : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__set_ProcessorAffinity_0__1__IntPtr(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Responding()
// docid: M:System.Diagnostics.Process.get_Responding
    open func get_Responding() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_bool__get_Responding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] Microsoft.Win32.SafeHandles.SafeProcessHandle get_SafeHandle()
// docid: M:System.Diagnostics.Process.get_SafeHandle
    open func get_SafeHandle() throws -> dotnet.Microsoft.Win32.SafeHandles.SafeProcessHandle {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_SafeProcessHandle__get_SafeHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.SafeHandles.SafeProcessHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_SessionId()
// docid: M:System.Diagnostics.Process.get_SessionId
    open func get_SessionId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_SessionId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.IO.StreamReader get_StandardError()
// docid: M:System.Diagnostics.Process.get_StandardError
    open func get_StandardError() throws -> dotnet.System.IO.StreamReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_StreamReader__get_StandardError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.StreamReader(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.StreamWriter get_StandardInput()
// docid: M:System.Diagnostics.Process.get_StandardInput
    open func get_StandardInput() throws -> dotnet.System.IO.StreamWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_StreamWriter__get_StandardInput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.StreamWriter(hndl : __return);
        }
    }
    // [IsSpecialName] System.IO.StreamReader get_StandardOutput()
// docid: M:System.Diagnostics.Process.get_StandardOutput
    open func get_StandardOutput() throws -> dotnet.System.IO.StreamReader {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_StreamReader__get_StandardOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.StreamReader(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ProcessStartInfo get_StartInfo()
// docid: M:System.Diagnostics.Process.get_StartInfo
    open func get_StartInfo() throws -> dotnet.System.Diagnostics.ProcessStartInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessStartInfo__get_StartInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ProcessStartInfo(hndl : __return);
        }
    }
    // [IsSpecialName] void set_StartInfo(System.Diagnostics.ProcessStartInfo)
// docid: M:System.Diagnostics.Process.set_StartInfo(System.Diagnostics.ProcessStartInfo)
    open func set_StartInfo(value : dotnet.System.Diagnostics.ProcessStartInfo) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__set_StartInfo_0__1__ProcessStartInfo(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.DateTime get_StartTime()
// docid: M:System.Diagnostics.Process.get_StartTime
    open func get_StartTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_DateTime__get_StartTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject()
// docid: M:System.Diagnostics.Process.get_SynchronizingObject
    open func get_SynchronizingObject() throws -> Optional<dotnet.System.ComponentModel.ISynchronizeInvoke> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ISynchronizeInvoke__get_SynchronizingObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISynchronizeInvoke(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)
// docid: M:System.Diagnostics.Process.set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)
    open func set_SynchronizingObject(value : Optional<dotnet.System.ComponentModel.ISynchronizeInvoke>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__set_SynchronizingObject_0__1__ISynchronizeInvoke(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ProcessThreadCollection get_Threads()
// docid: M:System.Diagnostics.Process.get_Threads
    open func get_Threads() throws -> dotnet.System.Diagnostics.ProcessThreadCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_ProcessThreadCollection__get_Threads_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ProcessThreadCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_TotalProcessorTime()
// docid: M:System.Diagnostics.Process.get_TotalProcessorTime
    open func get_TotalProcessorTime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_TimeSpan__get_TotalProcessorTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_UserProcessorTime()
// docid: M:System.Diagnostics.Process.get_UserProcessorTime
    open func get_UserProcessorTime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_TimeSpan__get_UserProcessorTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_VirtualMemorySize()
// docid: M:System.Diagnostics.Process.get_VirtualMemorySize
    open func get_VirtualMemorySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_VirtualMemorySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_VirtualMemorySize64()
// docid: M:System.Diagnostics.Process.get_VirtualMemorySize64
    open func get_VirtualMemorySize64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_VirtualMemorySize64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_WorkingSet()
// docid: M:System.Diagnostics.Process.get_WorkingSet
    open func get_WorkingSet() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i32__get_WorkingSet_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 get_WorkingSet64()
// docid: M:System.Diagnostics.Process.get_WorkingSet64
    open func get_WorkingSet64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Process_i64__get_WorkingSet64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void add_ErrorDataReceived(System.Diagnostics.DataReceivedEventHandler)
// docid: M:System.Diagnostics.Process.add_ErrorDataReceived(System.Diagnostics.DataReceivedEventHandler)
    open func add_ErrorDataReceived(value : Optional<dotnet.System.Diagnostics.DataReceivedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__add_ErrorDataReceived_0__1__DataReceivedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ErrorDataReceived(value : @escaping (dotnet.System.Object, dotnet.System.Diagnostics.DataReceivedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Diagnostics.DataReceivedEventHandler(value);
        return try add_ErrorDataReceived(value: del_value);
    }
    // [IsSpecialName] void remove_ErrorDataReceived(System.Diagnostics.DataReceivedEventHandler)
// docid: M:System.Diagnostics.Process.remove_ErrorDataReceived(System.Diagnostics.DataReceivedEventHandler)
    open func remove_ErrorDataReceived(value : Optional<dotnet.System.Diagnostics.DataReceivedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__remove_ErrorDataReceived_0__1__DataReceivedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ErrorDataReceived(value : @escaping (dotnet.System.Object, dotnet.System.Diagnostics.DataReceivedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Diagnostics.DataReceivedEventHandler(value);
        return try remove_ErrorDataReceived(value: del_value);
    }
    // [IsSpecialName] void add_Exited(System.EventHandler)
// docid: M:System.Diagnostics.Process.add_Exited(System.EventHandler)
    open func add_Exited(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__add_Exited_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Exited(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Exited(value: del_value);
    }
    // [IsSpecialName] void remove_Exited(System.EventHandler)
// docid: M:System.Diagnostics.Process.remove_Exited(System.EventHandler)
    open func remove_Exited(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__remove_Exited_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Exited(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Exited(value: del_value);
    }
    // [IsSpecialName] void add_OutputDataReceived(System.Diagnostics.DataReceivedEventHandler)
// docid: M:System.Diagnostics.Process.add_OutputDataReceived(System.Diagnostics.DataReceivedEventHandler)
    open func add_OutputDataReceived(value : Optional<dotnet.System.Diagnostics.DataReceivedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__add_OutputDataReceived_0__1__DataReceivedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_OutputDataReceived(value : @escaping (dotnet.System.Object, dotnet.System.Diagnostics.DataReceivedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Diagnostics.DataReceivedEventHandler(value);
        return try add_OutputDataReceived(value: del_value);
    }
    // [IsSpecialName] void remove_OutputDataReceived(System.Diagnostics.DataReceivedEventHandler)
// docid: M:System.Diagnostics.Process.remove_OutputDataReceived(System.Diagnostics.DataReceivedEventHandler)
    open func remove_OutputDataReceived(value : Optional<dotnet.System.Diagnostics.DataReceivedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Process_void__remove_OutputDataReceived_0__1__DataReceivedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_OutputDataReceived(value : @escaping (dotnet.System.Object, dotnet.System.Diagnostics.DataReceivedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Diagnostics.DataReceivedEventHandler(value);
        return try remove_OutputDataReceived(value: del_value);
    }
    /**
    Gets the base priority of the associated process.

    */
    open var BasePriority : Swift.Int32 {
        get {
            return try! get_BasePriority();
        }
    }
    /**
    Gets or sets whether the  event should be raised when the process terminates.

    */
    open var EnableRaisingEvents : Bool {
        get {
            return try! get_EnableRaisingEvents();
        }
        set(v) {
            return try! set_EnableRaisingEvents(value: v);
        }
    }
    /**
    Gets the value that the associated process specified when it terminated.

    */
    open var ExitCode : Swift.Int32 {
        get {
            return try! get_ExitCode();
        }
    }
    /**
    Gets the time that the associated process exited.

    */
    open var ExitTime : dotnet.System.DateTime {
        get {
            return try! get_ExitTime();
        }
    }
    /**
    Gets the native handle of the associated process.

    */
    open var Handle : dotnet.System.IntPtr {
        get {
            return try! get_Handle();
        }
    }
    /**
    Gets the number of handles opened by the process.

    */
    open var HandleCount : Swift.Int32 {
        get {
            return try! get_HandleCount();
        }
    }
    /**
    Gets a value indicating whether the associated process has been terminated.

    */
    open var HasExited : Bool {
        get {
            return try! get_HasExited();
        }
    }
    /**
    Gets the unique identifier for the associated process.

    */
    open var Id : Swift.Int32 {
        get {
            return try! get_Id();
        }
    }
    /**
    Gets the name of the computer the associated process is running on.

    */
    open var MachineName : dotnet.System.String {
        get {
            return try! get_MachineName();
        }
    }
    /**
    Gets the main module for the associated process.

    */
    open var MainModule : Optional<dotnet.System.Diagnostics.ProcessModule> {
        get {
            return try! get_MainModule();
        }
    }
    /**
    Gets the window handle of the main window of the associated process.

    */
    open var MainWindowHandle : dotnet.System.IntPtr {
        get {
            return try! get_MainWindowHandle();
        }
    }
    /**
    Gets the caption of the main window of the process.

    */
    open var MainWindowTitle : dotnet.System.String {
        get {
            return try! get_MainWindowTitle();
        }
    }
    /**
    Gets or sets the maximum allowable working set size, in bytes, for the associated process.

    */
    open var MaxWorkingSet : dotnet.System.IntPtr {
        get {
            return try! get_MaxWorkingSet();
        }
        set(v) {
            return try! set_MaxWorkingSet(value: v);
        }
    }
    /**
    Gets or sets the minimum allowable working set size, in bytes, for the associated process.

    */
    open var MinWorkingSet : dotnet.System.IntPtr {
        get {
            return try! get_MinWorkingSet();
        }
        set(v) {
            return try! set_MinWorkingSet(value: v);
        }
    }
    /**
    Gets the modules that have been loaded by the associated process.

    */
    open var Modules : dotnet.System.Diagnostics.ProcessModuleCollection {
        get {
            return try! get_Modules();
        }
    }
    /**
    Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.

    */
    open var NonpagedSystemMemorySize : Swift.Int32 {
        get {
            return try! get_NonpagedSystemMemorySize();
        }
    }
    /**
    Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.

    */
    open var NonpagedSystemMemorySize64 : Swift.Int64 {
        get {
            return try! get_NonpagedSystemMemorySize64();
        }
    }
    /**
    Gets the amount of paged memory, in bytes, allocated for the associated process.

    */
    open var PagedMemorySize : Swift.Int32 {
        get {
            return try! get_PagedMemorySize();
        }
    }
    /**
    Gets the amount of paged memory, in bytes, allocated for the associated process.

    */
    open var PagedMemorySize64 : Swift.Int64 {
        get {
            return try! get_PagedMemorySize64();
        }
    }
    /**
    Gets the amount of pageable system memory, in bytes, allocated for the associated process.

    */
    open var PagedSystemMemorySize : Swift.Int32 {
        get {
            return try! get_PagedSystemMemorySize();
        }
    }
    /**
    Gets the amount of pageable system memory, in bytes, allocated for the associated process.

    */
    open var PagedSystemMemorySize64 : Swift.Int64 {
        get {
            return try! get_PagedSystemMemorySize64();
        }
    }
    /**
    Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.

    */
    open var PeakPagedMemorySize : Swift.Int32 {
        get {
            return try! get_PeakPagedMemorySize();
        }
    }
    /**
    Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.

    */
    open var PeakPagedMemorySize64 : Swift.Int64 {
        get {
            return try! get_PeakPagedMemorySize64();
        }
    }
    /**
    Gets the maximum amount of virtual memory, in bytes, used by the associated process.

    */
    open var PeakVirtualMemorySize : Swift.Int32 {
        get {
            return try! get_PeakVirtualMemorySize();
        }
    }
    /**
    Gets the maximum amount of virtual memory, in bytes, used by the associated process.

    */
    open var PeakVirtualMemorySize64 : Swift.Int64 {
        get {
            return try! get_PeakVirtualMemorySize64();
        }
    }
    /**
    Gets the peak working set size for the associated process, in bytes.

    */
    open var PeakWorkingSet : Swift.Int32 {
        get {
            return try! get_PeakWorkingSet();
        }
    }
    /**
    Gets the maximum amount of physical memory, in bytes, used by the associated process.

    */
    open var PeakWorkingSet64 : Swift.Int64 {
        get {
            return try! get_PeakWorkingSet64();
        }
    }
    /**
    Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.

    */
    open var PriorityBoostEnabled : Bool {
        get {
            return try! get_PriorityBoostEnabled();
        }
        set(v) {
            return try! set_PriorityBoostEnabled(value: v);
        }
    }
    /**
    Gets or sets the overall priority category for the associated process.

    */
    open var PriorityClass : dotnet.System.Diagnostics.ProcessPriorityClass {
        get {
            return try! get_PriorityClass();
        }
        set(v) {
            return try! set_PriorityClass(value: v);
        }
    }
    /**
    Gets the amount of private memory, in bytes, allocated for the associated process.

    */
    open var PrivateMemorySize : Swift.Int32 {
        get {
            return try! get_PrivateMemorySize();
        }
    }
    /**
    Gets the amount of private memory, in bytes, allocated for the associated process.

    */
    open var PrivateMemorySize64 : Swift.Int64 {
        get {
            return try! get_PrivateMemorySize64();
        }
    }
    /**
    Gets the privileged processor time for this process.

    */
    open var PrivilegedProcessorTime : dotnet.System.TimeSpan {
        get {
            return try! get_PrivilegedProcessorTime();
        }
    }
    /**
    Gets the name of the process.

    */
    open var ProcessName : dotnet.System.String {
        get {
            return try! get_ProcessName();
        }
    }
    /**
    Gets or sets the processors on which the threads in this process can be scheduled to run.

    */
    open var ProcessorAffinity : dotnet.System.IntPtr {
        get {
            return try! get_ProcessorAffinity();
        }
        set(v) {
            return try! set_ProcessorAffinity(value: v);
        }
    }
    /**
    Gets a value indicating whether the user interface of the process is responding.

    */
    open var Responding : Bool {
        get {
            return try! get_Responding();
        }
    }
    /**
    Gets the native handle to this process.

    */
    open var SafeHandle : dotnet.Microsoft.Win32.SafeHandles.SafeProcessHandle {
        get {
            return try! get_SafeHandle();
        }
    }
    /**
    Gets the Terminal Services session identifier for the associated process.

    */
    open var SessionId : Swift.Int32 {
        get {
            return try! get_SessionId();
        }
    }
    /**
    Gets a stream used to read the error output of the application.

    */
    open var StandardError : dotnet.System.IO.StreamReader {
        get {
            return try! get_StandardError();
        }
    }
    /**
    Gets a stream used to write the input of the application.

    */
    open var StandardInput : dotnet.System.IO.StreamWriter {
        get {
            return try! get_StandardInput();
        }
    }
    /**
    Gets a stream used to read the textual output of the application.

    */
    open var StandardOutput : dotnet.System.IO.StreamReader {
        get {
            return try! get_StandardOutput();
        }
    }
    /**
    Gets or sets the properties to pass to the  method of the .

    */
    open var StartInfo : dotnet.System.Diagnostics.ProcessStartInfo {
        get {
            return try! get_StartInfo();
        }
        set(v) {
            return try! set_StartInfo(value: v);
        }
    }
    /**
    Gets the time that the associated process was started.

    */
    open var StartTime : dotnet.System.DateTime {
        get {
            return try! get_StartTime();
        }
    }
    /**
    Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.

    */
    open var SynchronizingObject : Optional<dotnet.System.ComponentModel.ISynchronizeInvoke> {
        get {
            return try! get_SynchronizingObject();
        }
        set(v) {
            return try! set_SynchronizingObject(value: v!);
        }
    }
    /**
    Gets the set of threads that are running in the associated process.

    */
    open var Threads : dotnet.System.Diagnostics.ProcessThreadCollection {
        get {
            return try! get_Threads();
        }
    }
    /**
    Gets the total processor time for this process.

    */
    open var TotalProcessorTime : dotnet.System.TimeSpan {
        get {
            return try! get_TotalProcessorTime();
        }
    }
    /**
    Gets the user processor time for this process.

    */
    open var UserProcessorTime : dotnet.System.TimeSpan {
        get {
            return try! get_UserProcessorTime();
        }
    }
    /**
    Gets the size of the process's virtual memory, in bytes.

    */
    open var VirtualMemorySize : Swift.Int32 {
        get {
            return try! get_VirtualMemorySize();
        }
    }
    /**
    Gets the amount of the virtual memory, in bytes, allocated for the associated process.

    */
    open var VirtualMemorySize64 : Swift.Int64 {
        get {
            return try! get_VirtualMemorySize64();
        }
    }
    /**
    Gets the associated process's physical memory usage, in bytes.

    */
    open var WorkingSet : Swift.Int32 {
        get {
            return try! get_WorkingSet();
        }
    }
    /**
    Gets the amount of physical memory, in bytes, allocated for the associated process.

    */
    open var WorkingSet64 : Swift.Int64 {
        get {
            return try! get_WorkingSet64();
        }
    }
} // Process


// type: System.Diagnostics.ProcessModule
    /**
    Represents a.dll or .exe file that is loaded into a particular process.

    */
open class ProcessModule
    :
    dotnet.System.ComponentModel.Component
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ProcessModule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String ToString()
// docid: M:System.Diagnostics.ProcessModule.ToString
    /**
    Converts the name of the module to a string.

    - Returns: The value of the  property.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModule_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.IntPtr get_BaseAddress()
// docid: M:System.Diagnostics.ProcessModule.get_BaseAddress
    open func get_BaseAddress() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModule_IntPtr__get_BaseAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] System.IntPtr get_EntryPointAddress()
// docid: M:System.Diagnostics.ProcessModule.get_EntryPointAddress
    open func get_EntryPointAddress() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModule_IntPtr__get_EntryPointAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:System.Diagnostics.ProcessModule.get_FileName
    open func get_FileName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModule_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Diagnostics.FileVersionInfo get_FileVersionInfo()
// docid: M:System.Diagnostics.ProcessModule.get_FileVersionInfo
    open func get_FileVersionInfo() throws -> dotnet.System.Diagnostics.FileVersionInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModule_FileVersionInfo__get_FileVersionInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.FileVersionInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_ModuleMemorySize()
// docid: M:System.Diagnostics.ProcessModule.get_ModuleMemorySize
    open func get_ModuleMemorySize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModule_i32__get_ModuleMemorySize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ModuleName()
// docid: M:System.Diagnostics.ProcessModule.get_ModuleName
    open func get_ModuleName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModule_String__get_ModuleName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the memory address where the module was loaded.

    */
    open var BaseAddress : dotnet.System.IntPtr {
        get {
            return try! get_BaseAddress();
        }
    }
    /**
    Gets the memory address for the function that runs when the system loads and runs the module.

    */
    open var EntryPointAddress : dotnet.System.IntPtr {
        get {
            return try! get_EntryPointAddress();
        }
    }
    /**
    Gets the full path to the module.

    */
    open var FileName : Optional<dotnet.System.String> {
        get {
            return try! get_FileName();
        }
    }
    /**
    Gets version information about the module.

    */
    open var FileVersionInfo : dotnet.System.Diagnostics.FileVersionInfo {
        get {
            return try! get_FileVersionInfo();
        }
    }
    /**
    Gets the amount of memory that is required to load the module.

    */
    open var ModuleMemorySize : Swift.Int32 {
        get {
            return try! get_ModuleMemorySize();
        }
    }
    /**
    Gets the name of the process module.

    */
    open var ModuleName : Optional<dotnet.System.String> {
        get {
            return try! get_ModuleName();
        }
    }
} // ProcessModule


// type: System.Diagnostics.ProcessModuleCollection
    /**
    Provides a strongly typed collection of  objects.

    */
open class ProcessModuleCollection
    :
    dotnet.System.Collections.ReadOnlyCollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ProcessModuleCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Diagnostics.ProcessModule[])
// docid: M:System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])
    /**
    Initializes a new instance of the  class, using the specified array of  instances.

    - Parameter processModules: An array of  instances with which to initialize this  instance.
    */
    public init(processModules : dotnet.System_Arr<dotnet.System.Diagnostics.ProcessModule>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ProcessModuleCollection_ctor_0__1__ProcessModuleArray(&__thrown, processModules.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Contains(System.Diagnostics.ProcessModule)
// docid: M:System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)
    /**
    Determines whether the specified process module exists in the collection.

    - Parameter module: A  instance that indicates the module to find in this collection.
    - Returns: 
         if the module exists in the collection; otherwise, .

    */
    open func Contains(module : dotnet.System.Diagnostics.ProcessModule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModuleCollection_bool__Contains_0__1__ProcessModule(&__thrown, self.get_handle(), module.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Diagnostics.ProcessModule[], System.Int32)
// docid: M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)
    /**
    Copies an array of  instances to the collection, at the specified index.

    - Parameter array: An array of  instances to add to the collection.
    - Parameter index: The location at which to add the new instances.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Diagnostics.ProcessModule>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessModuleCollection_void__CopyTo_0__2__ProcessModuleArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Diagnostics.ProcessModule)
// docid: M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)
    /**
    Provides the location of a specified module within the collection.

    - Parameter module: The  whose index is retrieved.
    - Returns: The zero-based index that defines the location of the module within the .

    */
    open func IndexOf(module : dotnet.System.Diagnostics.ProcessModule) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModuleCollection_i32__IndexOf_0__1__ProcessModule(&__thrown, self.get_handle(), module.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ProcessModule get_Item(System.Int32)
// docid: M:System.Diagnostics.ProcessModuleCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Diagnostics.ProcessModule {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessModuleCollection_ProcessModule__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ProcessModule(hndl : __return);
        }
    }
} // ProcessModuleCollection


// type: System.Diagnostics.ProcessPriorityClass
    /**
    Indicates the priority that the system associates with a process. This value, together with the priority value of each thread of the process, determines each thread's base priority level.

    */
public struct ProcessPriorityClass : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ProcessPriorityClass_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ProcessPriorityClass Normal
    /**
    Specifies that the process has no special scheduling needs.

    */
    public static var Normal : dotnet.System.Diagnostics.ProcessPriorityClass {
        get {
        let __return = dotnet.System.Diagnostics.ProcessPriorityClass(val: System_Diagnostics_ProcessPriorityClass_get_Normal());
            return __return;
        }
    }
    // static field: System.Diagnostics.ProcessPriorityClass Idle
    /**
    Specifies that the threads of this process run only when the system is idle, such as a screen saver. The threads of the process are preempted by the threads of any process running in a higher priority class. This priority class is inherited by child processes.

    */
    public static var Idle : dotnet.System.Diagnostics.ProcessPriorityClass {
        get {
        let __return = dotnet.System.Diagnostics.ProcessPriorityClass(val: System_Diagnostics_ProcessPriorityClass_get_Idle());
            return __return;
        }
    }
    // static field: System.Diagnostics.ProcessPriorityClass High
    /**
    Specifies that the process performs time-critical tasks that must be executed immediately, such as the  dialog, which must respond quickly when called by the user, regardless of the load on the operating system. The threads of the process preempt the threads of normal or idle priority class processes. Use extreme care when specifying  for the process's priority class, because a high priority class application can use nearly all available processor time.

    */
    public static var High : dotnet.System.Diagnostics.ProcessPriorityClass {
        get {
        let __return = dotnet.System.Diagnostics.ProcessPriorityClass(val: System_Diagnostics_ProcessPriorityClass_get_High());
            return __return;
        }
    }
    // static field: System.Diagnostics.ProcessPriorityClass RealTime
    /**
    Specifies that the process has the highest possible priority. The threads of a process with  priority preempt the threads of all other processes, including operating system processes performing important tasks. Thus, a  priority process that executes for more than a very brief interval can cause disk caches not to flush or cause the mouse to be unresponsive.

    */
    public static var RealTime : dotnet.System.Diagnostics.ProcessPriorityClass {
        get {
        let __return = dotnet.System.Diagnostics.ProcessPriorityClass(val: System_Diagnostics_ProcessPriorityClass_get_RealTime());
            return __return;
        }
    }
    // static field: System.Diagnostics.ProcessPriorityClass BelowNormal
    /**
    Specifies that the process has priority above  but below .

    */
    public static var BelowNormal : dotnet.System.Diagnostics.ProcessPriorityClass {
        get {
        let __return = dotnet.System.Diagnostics.ProcessPriorityClass(val: System_Diagnostics_ProcessPriorityClass_get_BelowNormal());
            return __return;
        }
    }
    // static field: System.Diagnostics.ProcessPriorityClass AboveNormal
    /**
    Specifies that the process has priority higher than  but lower than .

    */
    public static var AboveNormal : dotnet.System.Diagnostics.ProcessPriorityClass {
        get {
        let __return = dotnet.System.Diagnostics.ProcessPriorityClass(val: System_Diagnostics_ProcessPriorityClass_get_AboveNormal());
            return __return;
        }
    }
} // ProcessPriorityClass


// type: System.Diagnostics.ProcessStartInfo
    /**
    Specifies a set of values that are used when you start a process.

    */
public final class ProcessStartInfo
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ProcessStartInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.ProcessStartInfo.#ctor
    /**
    Initializes a new instance of the  class without specifying a file name with which to start the process.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ProcessStartInfo_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.#ctor(System.String)
    /**
    Initializes a new instance of the  class and specifies a file name such as an application or document with which to start the process.

    - Parameter fileName: An application or document with which to start a process.
    */
    public init(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ProcessStartInfo_ctor_0__1__String(&__thrown, fileName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.

    - Parameter fileName: An application with which to start a process.
    - Parameter arguments: Command-line arguments to pass to the application when the process starts.
    */
    public init(fileName : dotnet.System.String, arguments : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ProcessStartInfo_ctor_0__2__String_String(&__thrown, fileName.get_handle(), arguments.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.Collection<System.String> get_ArgumentList()
// docid: M:System.Diagnostics.ProcessStartInfo.get_ArgumentList
    public func get_ArgumentList() throws -> dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_System_Collections_ObjectModel_Collection_string___get_ArgumentList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.Collection_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Arguments()
// docid: M:System.Diagnostics.ProcessStartInfo.get_Arguments
    public func get_Arguments() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_String__get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Arguments(System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.set_Arguments(System.String)
    public func set_Arguments(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_Arguments_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_CreateNoWindow()
// docid: M:System.Diagnostics.ProcessStartInfo.get_CreateNoWindow
    public func get_CreateNoWindow() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_bool__get_CreateNoWindow_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CreateNoWindow(bool)
// docid: M:System.Diagnostics.ProcessStartInfo.set_CreateNoWindow(System.Boolean)
    public func set_CreateNoWindow(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_CreateNoWindow_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Domain()
// docid: M:System.Diagnostics.ProcessStartInfo.get_Domain
    public func get_Domain() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_String__get_Domain_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Domain(System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.set_Domain(System.String)
    public func set_Domain(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_Domain_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IDictionary<System.String,System.String> get_Environment()
// docid: M:System.Diagnostics.ProcessStartInfo.get_Environment
    public func get_Environment() throws -> dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_System_Collections_Generic_IDictionary_string_string___get_Environment_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IDictionary_2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Specialized.StringDictionary get_EnvironmentVariables()
// docid: M:System.Diagnostics.ProcessStartInfo.get_EnvironmentVariables
    public func get_EnvironmentVariables() throws -> dotnet.System.Collections.Specialized.StringDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_StringDictionary__get_EnvironmentVariables_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ErrorDialog()
// docid: M:System.Diagnostics.ProcessStartInfo.get_ErrorDialog
    public func get_ErrorDialog() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_bool__get_ErrorDialog_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ErrorDialog(bool)
// docid: M:System.Diagnostics.ProcessStartInfo.set_ErrorDialog(System.Boolean)
    public func set_ErrorDialog(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_ErrorDialog_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IntPtr get_ErrorDialogParentHandle()
// docid: M:System.Diagnostics.ProcessStartInfo.get_ErrorDialogParentHandle
    public func get_ErrorDialogParentHandle() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_IntPtr__get_ErrorDialogParentHandle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] void set_ErrorDialogParentHandle(System.IntPtr)
// docid: M:System.Diagnostics.ProcessStartInfo.set_ErrorDialogParentHandle(System.IntPtr)
    public func set_ErrorDialogParentHandle(value : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_ErrorDialogParentHandle_0__1__IntPtr(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_FileName()
// docid: M:System.Diagnostics.ProcessStartInfo.get_FileName
    public func get_FileName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_String__get_FileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_FileName(System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.set_FileName(System.String)
    public func set_FileName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_FileName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_LoadUserProfile()
// docid: M:System.Diagnostics.ProcessStartInfo.get_LoadUserProfile
    public func get_LoadUserProfile() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_bool__get_LoadUserProfile_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_LoadUserProfile(bool)
// docid: M:System.Diagnostics.ProcessStartInfo.set_LoadUserProfile(System.Boolean)
    public func set_LoadUserProfile(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_LoadUserProfile_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Security.SecureString get_Password()
// docid: M:System.Diagnostics.ProcessStartInfo.get_Password
    public func get_Password() throws -> Optional<dotnet.System.Security.SecureString> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_SecureString__get_Password_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Security.SecureString(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Password(System.Security.SecureString)
// docid: M:System.Diagnostics.ProcessStartInfo.set_Password(System.Security.SecureString)
    public func set_Password(value : Optional<dotnet.System.Security.SecureString>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_Password_0__1__SecureString(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_PasswordInClearText()
// docid: M:System.Diagnostics.ProcessStartInfo.get_PasswordInClearText
    public func get_PasswordInClearText() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_String__get_PasswordInClearText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PasswordInClearText(System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.set_PasswordInClearText(System.String)
    public func set_PasswordInClearText(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_PasswordInClearText_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RedirectStandardError()
// docid: M:System.Diagnostics.ProcessStartInfo.get_RedirectStandardError
    public func get_RedirectStandardError() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_bool__get_RedirectStandardError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RedirectStandardError(bool)
// docid: M:System.Diagnostics.ProcessStartInfo.set_RedirectStandardError(System.Boolean)
    public func set_RedirectStandardError(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_RedirectStandardError_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RedirectStandardInput()
// docid: M:System.Diagnostics.ProcessStartInfo.get_RedirectStandardInput
    public func get_RedirectStandardInput() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_bool__get_RedirectStandardInput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RedirectStandardInput(bool)
// docid: M:System.Diagnostics.ProcessStartInfo.set_RedirectStandardInput(System.Boolean)
    public func set_RedirectStandardInput(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_RedirectStandardInput_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RedirectStandardOutput()
// docid: M:System.Diagnostics.ProcessStartInfo.get_RedirectStandardOutput
    public func get_RedirectStandardOutput() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_bool__get_RedirectStandardOutput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RedirectStandardOutput(bool)
// docid: M:System.Diagnostics.ProcessStartInfo.set_RedirectStandardOutput(System.Boolean)
    public func set_RedirectStandardOutput(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_RedirectStandardOutput_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_StandardErrorEncoding()
// docid: M:System.Diagnostics.ProcessStartInfo.get_StandardErrorEncoding
    public func get_StandardErrorEncoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_Encoding__get_StandardErrorEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_StandardErrorEncoding(System.Text.Encoding)
// docid: M:System.Diagnostics.ProcessStartInfo.set_StandardErrorEncoding(System.Text.Encoding)
    public func set_StandardErrorEncoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_StandardErrorEncoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_StandardInputEncoding()
// docid: M:System.Diagnostics.ProcessStartInfo.get_StandardInputEncoding
    public func get_StandardInputEncoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_Encoding__get_StandardInputEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_StandardInputEncoding(System.Text.Encoding)
// docid: M:System.Diagnostics.ProcessStartInfo.set_StandardInputEncoding(System.Text.Encoding)
    public func set_StandardInputEncoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_StandardInputEncoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encoding get_StandardOutputEncoding()
// docid: M:System.Diagnostics.ProcessStartInfo.get_StandardOutputEncoding
    public func get_StandardOutputEncoding() throws -> Optional<dotnet.System.Text.Encoding> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_Encoding__get_StandardOutputEncoding_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encoding(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_StandardOutputEncoding(System.Text.Encoding)
// docid: M:System.Diagnostics.ProcessStartInfo.set_StandardOutputEncoding(System.Text.Encoding)
    public func set_StandardOutputEncoding(value : Optional<dotnet.System.Text.Encoding>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_StandardOutputEncoding_0__1__Encoding(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_UserName()
// docid: M:System.Diagnostics.ProcessStartInfo.get_UserName
    public func get_UserName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_String__get_UserName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_UserName(System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.set_UserName(System.String)
    public func set_UserName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_UserName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_UseShellExecute()
// docid: M:System.Diagnostics.ProcessStartInfo.get_UseShellExecute
    public func get_UseShellExecute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_bool__get_UseShellExecute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseShellExecute(bool)
// docid: M:System.Diagnostics.ProcessStartInfo.set_UseShellExecute(System.Boolean)
    public func set_UseShellExecute(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_UseShellExecute_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Verb()
// docid: M:System.Diagnostics.ProcessStartInfo.get_Verb
    public func get_Verb() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_String__get_Verb_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Verb(System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.set_Verb(System.String)
    public func set_Verb(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_Verb_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String[] get_Verbs()
// docid: M:System.Diagnostics.ProcessStartInfo.get_Verbs
    public func get_Verbs() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_StringArray__get_Verbs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ProcessWindowStyle get_WindowStyle()
// docid: M:System.Diagnostics.ProcessStartInfo.get_WindowStyle
    public func get_WindowStyle() throws -> dotnet.System.Diagnostics.ProcessWindowStyle {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_ProcessWindowStyle__get_WindowStyle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ProcessWindowStyle(val: __return);
        }
    }
    // [IsSpecialName] void set_WindowStyle(System.Diagnostics.ProcessWindowStyle)
// docid: M:System.Diagnostics.ProcessStartInfo.set_WindowStyle(System.Diagnostics.ProcessWindowStyle)
    public func set_WindowStyle(value : dotnet.System.Diagnostics.ProcessWindowStyle) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_WindowStyle_0__1__ProcessWindowStyle(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_WorkingDirectory()
// docid: M:System.Diagnostics.ProcessStartInfo.get_WorkingDirectory
    public func get_WorkingDirectory() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessStartInfo_String__get_WorkingDirectory_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_WorkingDirectory(System.String)
// docid: M:System.Diagnostics.ProcessStartInfo.set_WorkingDirectory(System.String)
    public func set_WorkingDirectory(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessStartInfo_void__set_WorkingDirectory_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets a collection of command-line arguments to use when starting the application. Strings added to the list don't need to be previously escaped.

    */
    public var ArgumentList : dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.String> {
        get {
            return try! get_ArgumentList();
        }
    }
    /**
    Gets or sets the set of command-line arguments to use when starting the application.

    */
    public var Arguments : dotnet.System.String {
        get {
            return try! get_Arguments();
        }
        set(v) {
            return try! set_Arguments(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether to start the process in a new window.

    */
    public var CreateNoWindow : Bool {
        get {
            return try! get_CreateNoWindow();
        }
        set(v) {
            return try! set_CreateNoWindow(value: v);
        }
    }
    /**
    Gets or sets a value that identifies the domain to use when starting the process. If this value is , the  property must be specified in UPN format.

    */
    public var Domain : dotnet.System.String {
        get {
            return try! get_Domain();
        }
        set(v) {
            return try! set_Domain(value: v);
        }
    }
    /**
    Gets the environment variables that apply to this process and its child processes.

    */
    public var Environment : dotnet.System.Collections.Generic.IDictionary_2<dotnet.System.String,dotnet.System.String> {
        get {
            return try! get_Environment();
        }
    }
    /**
    Gets search paths for files, directories for temporary files, application-specific options, and other similar information.

    */
    public var EnvironmentVariables : dotnet.System.Collections.Specialized.StringDictionary {
        get {
            return try! get_EnvironmentVariables();
        }
    }
    /**
    Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.

    */
    public var ErrorDialog : Bool {
        get {
            return try! get_ErrorDialog();
        }
        set(v) {
            return try! set_ErrorDialog(value: v);
        }
    }
    /**
    Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.

    */
    public var ErrorDialogParentHandle : dotnet.System.IntPtr {
        get {
            return try! get_ErrorDialogParentHandle();
        }
        set(v) {
            return try! set_ErrorDialogParentHandle(value: v);
        }
    }
    /**
    Gets or sets the application or document to start.

    */
    public var FileName : dotnet.System.String {
        get {
            return try! get_FileName();
        }
        set(v) {
            return try! set_FileName(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry.

    */
    public var LoadUserProfile : Bool {
        get {
            return try! get_LoadUserProfile();
        }
        set(v) {
            return try! set_LoadUserProfile(value: v);
        }
    }
    /**
    Gets or sets a secure string that contains the user password to use when starting the process.

    */
    public var Password : Optional<dotnet.System.Security.SecureString> {
        get {
            return try! get_Password();
        }
        set(v) {
            return try! set_Password(value: v!);
        }
    }
    /**
    Gets or sets the user password in clear text to use when starting the process.

    */
    public var PasswordInClearText : Optional<dotnet.System.String> {
        get {
            return try! get_PasswordInClearText();
        }
        set(v) {
            return try! set_PasswordInClearText(value: v!);
        }
    }
    /**
    Gets or sets a value that indicates whether the error output of an application is written to the  stream.

    */
    public var RedirectStandardError : Bool {
        get {
            return try! get_RedirectStandardError();
        }
        set(v) {
            return try! set_RedirectStandardError(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the input for an application is read from the  stream.

    */
    public var RedirectStandardInput : Bool {
        get {
            return try! get_RedirectStandardInput();
        }
        set(v) {
            return try! set_RedirectStandardInput(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the textual output of an application is written to the  stream.

    */
    public var RedirectStandardOutput : Bool {
        get {
            return try! get_RedirectStandardOutput();
        }
        set(v) {
            return try! set_RedirectStandardOutput(value: v);
        }
    }
    /**
    Gets or sets the preferred encoding for error output.

    */
    public var StandardErrorEncoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_StandardErrorEncoding();
        }
        set(v) {
            return try! set_StandardErrorEncoding(value: v!);
        }
    }
    /**
    Gets or sets the preferred encoding for standard input.

    */
    public var StandardInputEncoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_StandardInputEncoding();
        }
        set(v) {
            return try! set_StandardInputEncoding(value: v!);
        }
    }
    /**
    Gets or sets the preferred encoding for standard output.

    */
    public var StandardOutputEncoding : Optional<dotnet.System.Text.Encoding> {
        get {
            return try! get_StandardOutputEncoding();
        }
        set(v) {
            return try! set_StandardOutputEncoding(value: v!);
        }
    }
    /**
    Gets or sets a value indicating whether to use the operating system shell to start the process.

    */
    public var UseShellExecute : Bool {
        get {
            return try! get_UseShellExecute();
        }
        set(v) {
            return try! set_UseShellExecute(value: v);
        }
    }
    /**
    Gets or sets the user name to use when starting the process. If you use the UPN format, @, the  property must be .

    */
    public var UserName : dotnet.System.String {
        get {
            return try! get_UserName();
        }
        set(v) {
            return try! set_UserName(value: v);
        }
    }
    /**
    Gets or sets the verb to use when opening the application or document specified by the  property.

    */
    public var Verb : dotnet.System.String {
        get {
            return try! get_Verb();
        }
        set(v) {
            return try! set_Verb(value: v);
        }
    }
    /**
    Gets the set of verbs associated with the type of file specified by the  property.

    */
    public var Verbs : dotnet.System_Arr<dotnet.System.String> {
        get {
            return try! get_Verbs();
        }
    }
    /**
    Gets or sets the window state to use when the process is started.

    */
    public var WindowStyle : dotnet.System.Diagnostics.ProcessWindowStyle {
        get {
            return try! get_WindowStyle();
        }
        set(v) {
            return try! set_WindowStyle(value: v);
        }
    }
    /**
    When the  property is , gets or sets the working directory for the process to be started. When  is , gets or sets the directory that contains the process to be started.

    */
    public var WorkingDirectory : dotnet.System.String {
        get {
            return try! get_WorkingDirectory();
        }
        set(v) {
            return try! set_WorkingDirectory(value: v);
        }
    }
} // ProcessStartInfo


// type: System.Diagnostics.ProcessThread
    /**
    Represents an operating system process thread.

    */
open class ProcessThread
    :
    dotnet.System.ComponentModel.Component
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ProcessThread_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void ResetIdealProcessor()
// docid: M:System.Diagnostics.ProcessThread.ResetIdealProcessor
    /**
    Resets the ideal processor for this thread to indicate that there is no single ideal processor. In other words, so that any processor is ideal.

    */
    open func ResetIdealProcessor() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessThread_void__ResetIdealProcessor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_BasePriority()
// docid: M:System.Diagnostics.ProcessThread.get_BasePriority
    open func get_BasePriority() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_i32__get_BasePriority_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_CurrentPriority()
// docid: M:System.Diagnostics.ProcessThread.get_CurrentPriority
    open func get_CurrentPriority() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_i32__get_CurrentPriority_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Id()
// docid: M:System.Diagnostics.ProcessThread.get_Id
    open func get_Id() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_i32__get_Id_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_IdealProcessor(System.Int32)
// docid: M:System.Diagnostics.ProcessThread.set_IdealProcessor(System.Int32)
    open func set_IdealProcessor(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessThread_void__set_IdealProcessor_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PriorityBoostEnabled()
// docid: M:System.Diagnostics.ProcessThread.get_PriorityBoostEnabled
    open func get_PriorityBoostEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_bool__get_PriorityBoostEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PriorityBoostEnabled(bool)
// docid: M:System.Diagnostics.ProcessThread.set_PriorityBoostEnabled(System.Boolean)
    open func set_PriorityBoostEnabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessThread_void__set_PriorityBoostEnabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ThreadPriorityLevel get_PriorityLevel()
// docid: M:System.Diagnostics.ProcessThread.get_PriorityLevel
    open func get_PriorityLevel() throws -> dotnet.System.Diagnostics.ThreadPriorityLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_ThreadPriorityLevel__get_PriorityLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ThreadPriorityLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_PriorityLevel(System.Diagnostics.ThreadPriorityLevel)
// docid: M:System.Diagnostics.ProcessThread.set_PriorityLevel(System.Diagnostics.ThreadPriorityLevel)
    open func set_PriorityLevel(value : dotnet.System.Diagnostics.ThreadPriorityLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessThread_void__set_PriorityLevel_0__1__ThreadPriorityLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.TimeSpan get_PrivilegedProcessorTime()
// docid: M:System.Diagnostics.ProcessThread.get_PrivilegedProcessorTime
    open func get_PrivilegedProcessorTime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_TimeSpan__get_PrivilegedProcessorTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ProcessorAffinity(System.IntPtr)
// docid: M:System.Diagnostics.ProcessThread.set_ProcessorAffinity(System.IntPtr)
    open func set_ProcessorAffinity(value : dotnet.System.IntPtr) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessThread_void__set_ProcessorAffinity_0__1__IntPtr(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IntPtr get_StartAddress()
// docid: M:System.Diagnostics.ProcessThread.get_StartAddress
    open func get_StartAddress() throws -> dotnet.System.IntPtr {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_IntPtr__get_StartAddress_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IntPtr(val: __return);
        }
    }
    // [IsSpecialName] System.DateTime get_StartTime()
// docid: M:System.Diagnostics.ProcessThread.get_StartTime
    open func get_StartTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_DateTime__get_StartTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ThreadState get_ThreadState()
// docid: M:System.Diagnostics.ProcessThread.get_ThreadState
    open func get_ThreadState() throws -> dotnet.System.Diagnostics.ThreadState {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_ThreadState__get_ThreadState_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ThreadState(val: __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_TotalProcessorTime()
// docid: M:System.Diagnostics.ProcessThread.get_TotalProcessorTime
    open func get_TotalProcessorTime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_TimeSpan__get_TotalProcessorTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.TimeSpan get_UserProcessorTime()
// docid: M:System.Diagnostics.ProcessThread.get_UserProcessorTime
    open func get_UserProcessorTime() throws -> dotnet.System.TimeSpan {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_TimeSpan__get_UserProcessorTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.TimeSpan(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.ThreadWaitReason get_WaitReason()
// docid: M:System.Diagnostics.ProcessThread.get_WaitReason
    open func get_WaitReason() throws -> dotnet.System.Diagnostics.ThreadWaitReason {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThread_ThreadWaitReason__get_WaitReason_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ThreadWaitReason(val: __return);
        }
    }
    /**
    Gets the base priority of the thread.

    */
    open var BasePriority : Swift.Int32 {
        get {
            return try! get_BasePriority();
        }
    }
    /**
    Gets the current priority of the thread.

    */
    open var CurrentPriority : Swift.Int32 {
        get {
            return try! get_CurrentPriority();
        }
    }
    /**
    Gets the unique identifier of the thread.

    */
    open var Id : Swift.Int32 {
        get {
            return try! get_Id();
        }
    }
    /**
    Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main window of the thread's process receives the focus.

    */
    open var PriorityBoostEnabled : Bool {
        get {
            return try! get_PriorityBoostEnabled();
        }
        set(v) {
            return try! set_PriorityBoostEnabled(value: v);
        }
    }
    /**
    Gets or sets the priority level of the thread.

    */
    open var PriorityLevel : dotnet.System.Diagnostics.ThreadPriorityLevel {
        get {
            return try! get_PriorityLevel();
        }
        set(v) {
            return try! set_PriorityLevel(value: v);
        }
    }
    /**
    Gets the amount of time that the thread has spent running code inside the operating system core.

    */
    open var PrivilegedProcessorTime : dotnet.System.TimeSpan {
        get {
            return try! get_PrivilegedProcessorTime();
        }
    }
    /**
    Gets the memory address of the function that the operating system called that started this thread.

    */
    open var StartAddress : dotnet.System.IntPtr {
        get {
            return try! get_StartAddress();
        }
    }
    /**
    Gets the time that the operating system started the thread.

    */
    open var StartTime : dotnet.System.DateTime {
        get {
            return try! get_StartTime();
        }
    }
    /**
    Gets the current state of this thread.

    */
    open var ThreadState : dotnet.System.Diagnostics.ThreadState {
        get {
            return try! get_ThreadState();
        }
    }
    /**
    Gets the total amount of time that this thread has spent using the processor.

    */
    open var TotalProcessorTime : dotnet.System.TimeSpan {
        get {
            return try! get_TotalProcessorTime();
        }
    }
    /**
    Gets the amount of time that the associated thread has spent running code inside the application.

    */
    open var UserProcessorTime : dotnet.System.TimeSpan {
        get {
            return try! get_UserProcessorTime();
        }
    }
    /**
    Gets the reason that the thread is waiting.

    */
    open var WaitReason : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
            return try! get_WaitReason();
        }
    }
} // ProcessThread


// type: System.Diagnostics.ProcessThreadCollection
    /**
    Provides a strongly typed collection of  objects.

    */
open class ProcessThreadCollection
    :
    dotnet.System.Collections.ReadOnlyCollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ProcessThreadCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Diagnostics.ProcessThread[])
// docid: M:System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])
    /**
    Initializes a new instance of the  class, using the specified array of  instances.

    - Parameter processThreads: An array of  instances with which to initialize this  instance.
    */
    public init(processThreads : dotnet.System_Arr<dotnet.System.Diagnostics.ProcessThread>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_ProcessThreadCollection_ctor_0__1__ProcessThreadArray(&__thrown, processThreads.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.Diagnostics.ProcessThread)
// docid: M:System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)
    /**
    Appends a process thread to the collection.

    - Parameter thread: The thread to add to the collection.
    - Returns: The zero-based index of the thread in the collection.

    */
    open func Add(thread : dotnet.System.Diagnostics.ProcessThread) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThreadCollection_i32__Add_0__1__ProcessThread(&__thrown, self.get_handle(), thread.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Contains(System.Diagnostics.ProcessThread)
// docid: M:System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)
    /**
    Determines whether the specified process thread exists in the collection.

    - Parameter thread: A  instance that indicates the thread to find in this collection.
    - Returns: 
         if the thread exists in the collection; otherwise, .

    */
    open func Contains(thread : dotnet.System.Diagnostics.ProcessThread) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThreadCollection_bool__Contains_0__1__ProcessThread(&__thrown, self.get_handle(), thread.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Diagnostics.ProcessThread[], System.Int32)
// docid: M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)
    /**
    Copies an array of  instances to the collection, at the specified index.

    - Parameter array: An array of  instances to add to the collection.
    - Parameter index: The location at which to add the new instances.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.Diagnostics.ProcessThread>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessThreadCollection_void__CopyTo_0__2__ProcessThreadArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Diagnostics.ProcessThread)
// docid: M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)
    /**
    Provides the location of a specified thread within the collection.

    - Parameter thread: The  whose index is retrieved.
    - Returns: The zero-based index that defines the location of the thread within the .

    */
    open func IndexOf(thread : dotnet.System.Diagnostics.ProcessThread) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThreadCollection_i32__IndexOf_0__1__ProcessThread(&__thrown, self.get_handle(), thread.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Diagnostics.ProcessThread)
// docid: M:System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)
    /**
    Inserts a process thread at the specified location in the collection.

    - Parameter index: The zero-based index indicating the location at which to insert the thread.
    - Parameter thread: The thread to insert into the collection.
    */
    open func Insert(index : Swift.Int32, thread : dotnet.System.Diagnostics.ProcessThread) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessThreadCollection_void__Insert_0__2__i32_ProcessThread(&__thrown, self.get_handle(), index, thread.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Diagnostics.ProcessThread)
// docid: M:System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)
    /**
    Deletes a process thread from the collection.

    - Parameter thread: The thread to remove from the collection.
    */
    open func Remove(thread : dotnet.System.Diagnostics.ProcessThread) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_ProcessThreadCollection_void__Remove_0__1__ProcessThread(&__thrown, self.get_handle(), thread.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.ProcessThread get_Item(System.Int32)
// docid: M:System.Diagnostics.ProcessThreadCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Diagnostics.ProcessThread {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_ProcessThreadCollection_ProcessThread__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.ProcessThread(hndl : __return);
        }
    }
} // ProcessThreadCollection


// type: System.Diagnostics.ProcessWindowStyle
    /**
    Specified how a new window should appear when the system starts a process.

    */
public struct ProcessWindowStyle : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ProcessWindowStyle_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ProcessWindowStyle Normal
    /**
    The normal, visible window style. The system displays a window with  style on the screen, in a default location. If a window is visible, the user can supply input to the window and view the window's output. Frequently, an application may initialize a new window to the  style while it customizes the window's appearance, and then make the window style .

    */
    public static var Normal : dotnet.System.Diagnostics.ProcessWindowStyle {
        get {
        let __return = dotnet.System.Diagnostics.ProcessWindowStyle(val: System_Diagnostics_ProcessWindowStyle_get_Normal());
            return __return;
        }
    }
    // static field: System.Diagnostics.ProcessWindowStyle Hidden
    /**
    The hidden window style. A window can be either visible or hidden. The system displays a hidden window by not drawing it. If a window is hidden, it is effectively disabled. A hidden window can process messages from the system or from other windows, but it cannot process input from the user or display output. Frequently, an application may keep a new window hidden while it customizes the window's appearance, and then make the window style . To use , the  property must be .

    */
    public static var Hidden : dotnet.System.Diagnostics.ProcessWindowStyle {
        get {
        let __return = dotnet.System.Diagnostics.ProcessWindowStyle(val: System_Diagnostics_ProcessWindowStyle_get_Hidden());
            return __return;
        }
    }
    // static field: System.Diagnostics.ProcessWindowStyle Minimized
    /**
    The minimized window style. By default, the system reduces a minimized window to the size of its taskbar button and moves the minimized window to the taskbar.

    */
    public static var Minimized : dotnet.System.Diagnostics.ProcessWindowStyle {
        get {
        let __return = dotnet.System.Diagnostics.ProcessWindowStyle(val: System_Diagnostics_ProcessWindowStyle_get_Minimized());
            return __return;
        }
    }
    // static field: System.Diagnostics.ProcessWindowStyle Maximized
    /**
    The maximized window style. By default, the system enlarges a maximized window so that it fills the screen or, in the case of a child window, the parent window's client area. If the window has a title bar, the system automatically moves it to the top of the screen or to the top of the parent window's client area. Also, the system disables the window's sizing border and the window-positioning capability of the title bar so that the user cannot move the window by dragging the title bar.

    */
    public static var Maximized : dotnet.System.Diagnostics.ProcessWindowStyle {
        get {
        let __return = dotnet.System.Diagnostics.ProcessWindowStyle(val: System_Diagnostics_ProcessWindowStyle_get_Maximized());
            return __return;
        }
    }
} // ProcessWindowStyle


// type: System.Diagnostics.ThreadPriorityLevel
    /**
    Specifies the priority level of a thread.

    */
public struct ThreadPriorityLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ThreadPriorityLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ThreadPriorityLevel Idle
    /**
    Specifies idle priority. This is the lowest possible priority value of all threads, independent of the value of the associated .

    */
    public static var Idle : dotnet.System.Diagnostics.ThreadPriorityLevel {
        get {
        let __return = dotnet.System.Diagnostics.ThreadPriorityLevel(val: System_Diagnostics_ThreadPriorityLevel_get_Idle());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadPriorityLevel Lowest
    /**
    Specifies lowest priority. This is two steps below the normal priority for the associated .

    */
    public static var Lowest : dotnet.System.Diagnostics.ThreadPriorityLevel {
        get {
        let __return = dotnet.System.Diagnostics.ThreadPriorityLevel(val: System_Diagnostics_ThreadPriorityLevel_get_Lowest());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadPriorityLevel BelowNormal
    /**
    Specifies one step below the normal priority for the associated .

    */
    public static var BelowNormal : dotnet.System.Diagnostics.ThreadPriorityLevel {
        get {
        let __return = dotnet.System.Diagnostics.ThreadPriorityLevel(val: System_Diagnostics_ThreadPriorityLevel_get_BelowNormal());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadPriorityLevel Normal
    /**
    Specifies normal priority for the associated .

    */
    public static var Normal : dotnet.System.Diagnostics.ThreadPriorityLevel {
        get {
        let __return = dotnet.System.Diagnostics.ThreadPriorityLevel(val: System_Diagnostics_ThreadPriorityLevel_get_Normal());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadPriorityLevel AboveNormal
    /**
    Specifies one step above the normal priority for the associated .

    */
    public static var AboveNormal : dotnet.System.Diagnostics.ThreadPriorityLevel {
        get {
        let __return = dotnet.System.Diagnostics.ThreadPriorityLevel(val: System_Diagnostics_ThreadPriorityLevel_get_AboveNormal());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadPriorityLevel Highest
    /**
    Specifies highest priority. This is two steps above the normal priority for the associated .

    */
    public static var Highest : dotnet.System.Diagnostics.ThreadPriorityLevel {
        get {
        let __return = dotnet.System.Diagnostics.ThreadPriorityLevel(val: System_Diagnostics_ThreadPriorityLevel_get_Highest());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadPriorityLevel TimeCritical
    /**
    Specifies time-critical priority. This is the highest priority of all threads, independent of the value of the associated .

    */
    public static var TimeCritical : dotnet.System.Diagnostics.ThreadPriorityLevel {
        get {
        let __return = dotnet.System.Diagnostics.ThreadPriorityLevel(val: System_Diagnostics_ThreadPriorityLevel_get_TimeCritical());
            return __return;
        }
    }
} // ThreadPriorityLevel


// type: System.Diagnostics.ThreadState
    /**
    Specifies the current execution state of the thread.

    */
public struct ThreadState : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ThreadState_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ThreadState Initialized
    /**
    A state that indicates the thread has been initialized, but has not yet started.

    */
    public static var Initialized : dotnet.System.Diagnostics.ThreadState {
        get {
        let __return = dotnet.System.Diagnostics.ThreadState(val: System_Diagnostics_ThreadState_get_Initialized());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadState Ready
    /**
    A state that indicates the thread is waiting to use a processor because no processor is free. The thread is prepared to run on the next available processor.

    */
    public static var Ready : dotnet.System.Diagnostics.ThreadState {
        get {
        let __return = dotnet.System.Diagnostics.ThreadState(val: System_Diagnostics_ThreadState_get_Ready());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadState Running
    /**
    A state that indicates the thread is currently using a processor.

    */
    public static var Running : dotnet.System.Diagnostics.ThreadState {
        get {
        let __return = dotnet.System.Diagnostics.ThreadState(val: System_Diagnostics_ThreadState_get_Running());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadState Standby
    /**
    A state that indicates the thread is about to use a processor. Only one thread can be in this state at a time.

    */
    public static var Standby : dotnet.System.Diagnostics.ThreadState {
        get {
        let __return = dotnet.System.Diagnostics.ThreadState(val: System_Diagnostics_ThreadState_get_Standby());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadState Terminated
    /**
    A state that indicates the thread has finished executing and has exited.

    */
    public static var Terminated : dotnet.System.Diagnostics.ThreadState {
        get {
        let __return = dotnet.System.Diagnostics.ThreadState(val: System_Diagnostics_ThreadState_get_Terminated());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadState Wait
    /**
    A state that indicates the thread is not ready to use the processor because it is waiting for a peripheral operation to complete or a resource to become free. When the thread is ready, it will be rescheduled.

    */
    public static var Wait : dotnet.System.Diagnostics.ThreadState {
        get {
        let __return = dotnet.System.Diagnostics.ThreadState(val: System_Diagnostics_ThreadState_get_Wait());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadState Transition
    /**
    A state that indicates the thread is waiting for a resource, other than the processor, before it can execute. For example, it might be waiting for its execution stack to be paged in from disk.

    */
    public static var Transition : dotnet.System.Diagnostics.ThreadState {
        get {
        let __return = dotnet.System.Diagnostics.ThreadState(val: System_Diagnostics_ThreadState_get_Transition());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadState Unknown
    /**
    The state of the thread is unknown.

    */
    public static var Unknown : dotnet.System.Diagnostics.ThreadState {
        get {
        let __return = dotnet.System.Diagnostics.ThreadState(val: System_Diagnostics_ThreadState_get_Unknown());
            return __return;
        }
    }
} // ThreadState


// type: System.Diagnostics.ThreadWaitReason
    /**
    Specifies the reason a thread is waiting.

    */
public struct ThreadWaitReason : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_ThreadWaitReason_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.ThreadWaitReason Executive
    /**
    The thread is waiting for the scheduler.

    */
    public static var Executive : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_Executive());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason FreePage
    /**
    The thread is waiting for a free virtual memory page.

    */
    public static var FreePage : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_FreePage());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason PageIn
    /**
    The thread is waiting for a virtual memory page to arrive in memory.

    */
    public static var PageIn : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_PageIn());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason SystemAllocation
    /**
    The thread is waiting for system allocation.

    */
    public static var SystemAllocation : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_SystemAllocation());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason ExecutionDelay
    /**
    Thread execution is delayed.

    */
    public static var ExecutionDelay : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_ExecutionDelay());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason Suspended
    /**
    Thread execution is suspended.

    */
    public static var Suspended : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_Suspended());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason UserRequest
    /**
    The thread is waiting for a user request.

    */
    public static var UserRequest : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_UserRequest());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason EventPairHigh
    /**
    The thread is waiting for event pair high.

    */
    public static var EventPairHigh : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_EventPairHigh());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason EventPairLow
    /**
    The thread is waiting for event pair low.

    */
    public static var EventPairLow : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_EventPairLow());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason LpcReceive
    /**
    The thread is waiting for a local procedure call to arrive.

    */
    public static var LpcReceive : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_LpcReceive());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason LpcReply
    /**
    The thread is waiting for reply to a local procedure call to arrive.

    */
    public static var LpcReply : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_LpcReply());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason VirtualMemory
    /**
    The thread is waiting for the system to allocate virtual memory.

    */
    public static var VirtualMemory : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_VirtualMemory());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason PageOut
    /**
    The thread is waiting for a virtual memory page to be written to disk.

    */
    public static var PageOut : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_PageOut());
            return __return;
        }
    }
    // static field: System.Diagnostics.ThreadWaitReason Unknown
    /**
    The thread is waiting for an unknown reason.

    */
    public static var Unknown : dotnet.System.Diagnostics.ThreadWaitReason {
        get {
        let __return = dotnet.System.Diagnostics.ThreadWaitReason(val: System_Diagnostics_ThreadWaitReason_get_Unknown());
            return __return;
        }
    }
} // ThreadWaitReason


}


