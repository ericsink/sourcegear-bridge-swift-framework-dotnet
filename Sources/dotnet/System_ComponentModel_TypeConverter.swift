// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
extension System {
// type: System.UriTypeConverter
    /**
    Converts a  type to a  type, and vice versa.

    */
open class UriTypeConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_UriTypeConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.UriTypeConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_UriTypeConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns whether this converter can convert an object of the given type to the type of this converter.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type that you want to convert from.
    - Returns: 
         if  is a  type or a  type can be assigned from ; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_UriTypeConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns whether this converter can convert the object to the specified type, using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type that you want to convert to.
    - Returns: 
         if  is of type , , or ; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_UriTypeConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to the type of this converter, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The  to use as the current culture.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_UriTypeConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts a given value object to the specified type, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A . If  is passed, the current culture is assumed.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the  parameter to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_UriTypeConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Returns whether the given value object is a  or a  can be created from it.

    - Parameter context: An  that provides a format context.
    - Parameter value: The  to test for validity.
    - Returns: 
         if  is a  or a  from which a  can be created; otherwise, .

    */
    open override func IsValid(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_UriTypeConverter_bool__IsValid_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // UriTypeConverter


}
// System.ComponentModel
extension System.ComponentModel {
// type: System.ComponentModel.AddingNewEventArgs
    /**
    Provides data for the  event.

    */
open class AddingNewEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_AddingNewEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.AddingNewEventArgs.#ctor
    /**
    Initializes a new instance of the  class using no parameters.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AddingNewEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object)
// docid: M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)
    /**
    Initializes a new instance of the  class using the specified object as the new item.

    - Parameter newObject: An  to use as the new item value.
    */
    public init(newObject : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AddingNewEventArgs_ctor_0__1__Object(&__thrown, newObject?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_NewObject()
// docid: M:System.ComponentModel.AddingNewEventArgs.get_NewObject
    open func get_NewObject() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AddingNewEventArgs_Object__get_NewObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_NewObject(System.Object)
// docid: M:System.ComponentModel.AddingNewEventArgs.set_NewObject(System.Object)
    open func set_NewObject(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AddingNewEventArgs_void__set_NewObject_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the object to be added to the binding list.

    */
    open var NewObject : Optional<dotnet.System.Object> {
        get {
            return try! get_NewObject();
        }
        set(v) {
            return try! set_NewObject(value: v!);
        }
    }
} // AddingNewEventArgs


// type: System.ComponentModel.AddingNewEventHandler
    /**
    Represents the method that will handle the  event.

    */
public final class AddingNewEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_AddingNewEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.AddingNewEventArgs)
// docid: M:System.ComponentModel.AddingNewEventHandler.Invoke(System.Object,System.ComponentModel.AddingNewEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.AddingNewEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AddingNewEventHandler_void__Invoke_0__2__Object_AddingNewEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.AddingNewEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.AddingNewEventHandler.BeginInvoke(System.Object,System.ComponentModel.AddingNewEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.AddingNewEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AddingNewEventHandler_IAsyncResult__BeginInvoke_0__4__Object_AddingNewEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.AddingNewEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AddingNewEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.AddingNewEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.AddingNewEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AddingNewEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.AddingNewEventArgs)
// docid: M:System.ComponentModel.AddingNewEventHandler.Invoke(System.Object,System.ComponentModel.AddingNewEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.AddingNewEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AddingNewEventHandler_void__Invoke_0__2__Object_AddingNewEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // AddingNewEventHandler


// type: System.ComponentModel.AmbientValueAttribute
    /**
    Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.

    */
public final class AmbientValueAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_AmbientValueAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class, given a Boolean value for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Byte)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)
    /**
    Initializes a new instance of the  class, given an 8-bit unsigned integer for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Swift.UInt8) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__u8(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Char)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)
    /**
    Initializes a new instance of the  class, given a Unicode character for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__Char(&__thrown, value.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Double)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)
    /**
    Initializes a new instance of the  class, given a double-precision floating-point number for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__f64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int16)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)
    /**
    Initializes a new instance of the  class, given a 16-bit signed integer for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Swift.Int16) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__i16(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int32)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)
    /**
    Initializes a new instance of the  class, given a 32-bit signed integer for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__i32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Int64)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)
    /**
    Initializes a new instance of the  class, given a 64-bit signed integer for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__i64(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Object)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)
    /**
    Initializes a new instance of the  class, given an object for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)
    /**
    Initializes a new instance of the  class, given a single-precision floating point number for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__f32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class, given a string for its value.

    - Parameter value: The value of this attribute.
    */
    public init(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.String)
// docid: M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)
    /**
    Initializes a new instance of the  class, given the value and its type.

    - Parameter type: The  of the  parameter.
    - Parameter value: The value for this attribute.
    */
    public init(type : dotnet.System.Type_, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AmbientValueAttribute_ctor_0__2__Type_String(&__thrown, type.get_handle(), value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current .

    - Parameter obj: The  to compare with the current .
    - Returns: 
         if the specified  is equal to the current ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AmbientValueAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.AmbientValueAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AmbientValueAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.ComponentModel.AmbientValueAttribute.get_Value
    public func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AmbientValueAttribute_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the object that is the value of this .

    */
    public var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
    }
} // AmbientValueAttribute


// type: System.ComponentModel.ArrayConverter
    /**
    Provides a type converter to convert  objects to and from various other representations.

    */
open class ArrayConverter
    :
    dotnet.System.ComponentModel.CollectionConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ArrayConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.ArrayConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ArrayConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified destination type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The culture into which  will be converted.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ArrayConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Gets a collection of properties for the type of array specified by the value parameter.

    - Parameter context: An  that provides a format context.
    - Parameter value: An  that specifies the type of array to get the properties for.
    - Parameter attributes: An array of type  that will be used as a filter.
    - Returns: A  with the properties that are exposed for an array, or  if there are no properties.

    */
    open func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptorCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ArrayConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil, (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether this object supports properties.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because  should be called to find the properties of this object. This method never returns .

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ArrayConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ArrayConverter


// type: System.ComponentModel.AttributeCollection
    /**
    Represents a collection of attributes.

    */
open class AttributeCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_AttributeCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.AttributeCollection Empty
    /**
    Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.

    */
    open class var Empty : dotnet.System.ComponentModel.AttributeCollection {
        get {
        let __return = dotnet.System.ComponentModel.AttributeCollection(hndl: System_ComponentModel_AttributeCollection_get_Empty());
            return __return;
        }
    }
    // .ctor(System.Attribute[])
// docid: M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
    /**
    Initializes a new instance of the  class.

    - Parameter attributes: An array of type  that provides the attributes for this collection.
    */
    public init(attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AttributeCollection_ctor_0__1__AttributeArray(&__thrown, (attributes?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Contains(System.Attribute)
// docid: M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)
    /**
    Determines whether this collection of attributes has the specified attribute.

    - Parameter attribute: An  to find in the collection.
    - Returns: 
         if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, .

    */
    open func Contains(attribute : Optional<dotnet.System.Attribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_bool__Contains_0__1__Attribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Contains(System.Attribute[])
// docid: M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
    /**
    Determines whether this attribute collection contains all the specified attributes in the attribute array.

    - Parameter attributes: An array of type  to find in the collection.
    - Returns: 
         if the collection contains all the attributes; otherwise, .

    */
    open func Contains(attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_bool__Contains_0__1__AttributeArray(&__thrown, self.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the collection to an array, starting at the specified index.

    - Parameter array: The  to copy the collection to.
    - Parameter index: The index to start from.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_AttributeCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.AttributeCollection FromExisting(System.ComponentModel.AttributeCollection, System.Attribute[])
// docid: M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
    /**
    Creates a new  from an existing .

    - Parameter existing: An  from which to create the copy.
    - Parameter newAttributes: An array of type  that provides the attributes for this collection. Can be .
    - Returns: A new  that is a copy of .

    */
    open class func FromExisting(existing : dotnet.System.ComponentModel.AttributeCollection, newAttributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.AttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_AttributeCollection__FromExisting_0__2__AttributeCollection_AttributeArray(&__thrown, existing.get_handle(), (newAttributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AttributeCollection(hndl : __return);
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.ComponentModel.AttributeCollection.GetEnumerator
    /**
    Gets an enumerator for this collection.

    - Returns: An enumerator of type .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // bool Matches(System.Attribute)
// docid: M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)
    /**
    Determines whether a specified attribute is the same as an attribute in the collection.

    - Parameter attribute: An instance of  to compare with the attributes in this collection.
    - Returns: 
         if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, .

    */
    open func Matches(attribute : Optional<dotnet.System.Attribute>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_bool__Matches_0__1__Attribute(&__thrown, self.get_handle(), attribute?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Matches(System.Attribute[])
// docid: M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
    /**
    Determines whether the attributes in the specified array are the same as the attributes in the collection.

    - Parameter attributes: An array of  to compare with the attributes in this collection.
    - Returns: 
         if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, .

    */
    open func Matches(attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_bool__Matches_0__1__AttributeArray(&__thrown, self.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.ComponentModel.AttributeCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Attribute get_Item(System.Int32)
// docid: M:System.ComponentModel.AttributeCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Attribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_Attribute__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Attribute(hndl : __return);
        }
    }
    // [IsSpecialName] System.Attribute get_Item(System.Type)
// docid: M:System.ComponentModel.AttributeCollection.get_Item(System.Type)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(attributeType : dotnet.System.Type_) throws -> Optional<dotnet.System.Attribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeCollection_Attribute__get_Item_0__1__Type(&__thrown, self.get_handle(), attributeType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Attribute(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of attributes.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // AttributeCollection


// type: System.ComponentModel.AttributeProviderAttribute
    /**
    Enables attribute redirection. This class cannot be inherited.

    */
open class AttributeProviderAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_AttributeProviderAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the given type name.

    - Parameter typeName: The name of the type to specify.
    */
    public init(typeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AttributeProviderAttribute_ctor_0__1__String(&__thrown, typeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the given type name and property name.

    - Parameter typeName: The name of the type to specify.
    - Parameter propertyName: The name of the property for which attributes will be retrieved.
    */
    public init(typeName : dotnet.System.String, propertyName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AttributeProviderAttribute_ctor_0__2__String_String(&__thrown, typeName.get_handle(), propertyName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class with the given type.

    - Parameter type: The type to specify.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_AttributeProviderAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_PropertyName()
// docid: M:System.ComponentModel.AttributeProviderAttribute.get_PropertyName
    open func get_PropertyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeProviderAttribute_String__get_PropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_TypeName()
// docid: M:System.ComponentModel.AttributeProviderAttribute.get_TypeName
    open func get_TypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_AttributeProviderAttribute_String__get_TypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the property for which attributes will be retrieved.

    */
    open var PropertyName : Optional<dotnet.System.String> {
        get {
            return try! get_PropertyName();
        }
    }
    /**
    Gets the assembly qualified type name passed into the constructor.

    */
    open var TypeName : Optional<dotnet.System.String> {
        get {
            return try! get_TypeName();
        }
    }
} // AttributeProviderAttribute


// type: System.ComponentModel.BaseNumberConverter
    /**
    Provides a base type converter for nonfloating-point numerical types.

    */
open class BaseNumberConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_BaseNumberConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Determines if this converter can convert an object in the given source type to the native type of the converter.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type from which you want to convert.
    - Returns: 
         if this converter can perform the operation; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BaseNumberConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type to which you want to convert.
    - Returns: 
         if this converter can perform the operation; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BaseNumberConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to the converter's native type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  that specifies the culture to represent the number.
    - Parameter value: The object to convert.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BaseNumberConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the specified object to another type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  that specifies the culture to represent the number.
    - Parameter value: The object to convert.
    - Parameter destinationType: The type to convert the object to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BaseNumberConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // BaseNumberConverter


// type: System.ComponentModel.BindableAttribute
    /**
    Specifies whether a member is typically used for binding. This class cannot be inherited.

    */
public final class BindableAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_BindableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.BindableAttribute Default
    /**
    Specifies the default value for the , which is . This field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.BindableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.BindableAttribute(hndl: System_ComponentModel_BindableAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.BindableAttribute No
    /**
    Specifies that a property is not typically used for binding. This field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.BindableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.BindableAttribute(hndl: System_ComponentModel_BindableAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.BindableAttribute Yes
    /**
    Specifies that a property is typically used for binding. This field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.BindableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.BindableAttribute(hndl: System_ComponentModel_BindableAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class with a Boolean value.

    - Parameter bindable: 
         to use property for binding; otherwise, .
    */
    public init(bindable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BindableAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(bindable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, System.ComponentModel.BindingDirection)
// docid: M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)
    /**
    Initializes a new instance of the  class.

    - Parameter bindable: 
         to use property for binding; otherwise, .
    - Parameter direction: One of the  values.
    */
    public init(bindable : Bool, direction : dotnet.System.ComponentModel.BindingDirection) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BindableAttribute_ctor_0__2__bool_BindingDirection(&__thrown, Swift.Int32(bindable ? 1 : 0), direction.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.BindableSupport)
// docid: M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)
    /**
    Initializes a new instance of the  class with one of the  values.

    - Parameter flags: One of the  values.
    */
    public init(flags : dotnet.System.ComponentModel.BindableSupport) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BindableAttribute_ctor_0__1__BindableSupport(&__thrown, flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.BindableSupport, System.ComponentModel.BindingDirection)
// docid: M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)
    /**
    Initializes a new instance of the  class.

    - Parameter flags: One of the  values.
    - Parameter direction: One of the  values.
    */
    public init(flags : dotnet.System.ComponentModel.BindableSupport, direction : dotnet.System.ComponentModel.BindingDirection) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BindableAttribute_ctor_0__2__BindableSupport_BindingDirection(&__thrown, flags.get_value(), direction.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.BindableAttribute.Equals(System.Object)
    /**
    Determines whether two  objects are equal.

    - Parameter obj: The object to compare.
    - Returns: 
         if the specified  is equal to the current ;  if it is not equal.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindableAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.BindableAttribute.GetHashCode
    /**
    Serves as a hash function for the  class.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindableAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.BindableAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindableAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Bindable()
// docid: M:System.ComponentModel.BindableAttribute.get_Bindable
    public func get_Bindable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindableAttribute_bool__get_Bindable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.BindingDirection get_Direction()
// docid: M:System.ComponentModel.BindableAttribute.get_Direction
    public func get_Direction() throws -> dotnet.System.ComponentModel.BindingDirection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindableAttribute_BindingDirection__get_Direction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.BindingDirection(val: __return);
        }
    }
    /**
    Gets a value indicating that a property is typically used for binding.

    */
    public var Bindable : Bool {
        get {
            return try! get_Bindable();
        }
    }
    /**
    Gets a value indicating the direction or directions of this property's data binding.

    */
    public var Direction : dotnet.System.ComponentModel.BindingDirection {
        get {
            return try! get_Direction();
        }
    }
} // BindableAttribute


// type: System.ComponentModel.BindableSupport
    /**
    Specifies values to indicate whether a property can be bound to a data element or another property.

    */
public struct BindableSupport : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_BindableSupport_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.BindableSupport No
    /**
    The property is not bindable at design time.

    */
    public static var No : dotnet.System.ComponentModel.BindableSupport {
        get {
        let __return = dotnet.System.ComponentModel.BindableSupport(val: System_ComponentModel_BindableSupport_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.BindableSupport Yes
    /**
    The property is bindable at design time.

    */
    public static var Yes : dotnet.System.ComponentModel.BindableSupport {
        get {
        let __return = dotnet.System.ComponentModel.BindableSupport(val: System_ComponentModel_BindableSupport_get_Yes());
            return __return;
        }
    }
    // static field: System.ComponentModel.BindableSupport Default
    /**
    The property is set to the default.

    */
    public static var Default : dotnet.System.ComponentModel.BindableSupport {
        get {
        let __return = dotnet.System.ComponentModel.BindableSupport(val: System_ComponentModel_BindableSupport_get_Default());
            return __return;
        }
    }
} // BindableSupport


// type: System.ComponentModel.BindingDirection
    /**
    Specifies whether the template can be bound one way or two ways.

    */
public struct BindingDirection : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_BindingDirection_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.BindingDirection OneWay
    /**
    The template can only accept property values. Used with a generic .

    */
    public static var OneWay : dotnet.System.ComponentModel.BindingDirection {
        get {
        let __return = dotnet.System.ComponentModel.BindingDirection(val: System_ComponentModel_BindingDirection_get_OneWay());
            return __return;
        }
    }
    // static field: System.ComponentModel.BindingDirection TwoWay
    /**
    The template can accept and expose property values. Used with an .

    */
    public static var TwoWay : dotnet.System.ComponentModel.BindingDirection {
        get {
        let __return = dotnet.System.ComponentModel.BindingDirection(val: System_ComponentModel_BindingDirection_get_TwoWay());
            return __return;
        }
    }
} // BindingDirection


// type: System.ComponentModel.BindingList`1
    /**
    Provides a generic collection that supports data binding.

    */
open class BindingList_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Collections.ObjectModel.Collection_1<T>,
    System_ComponentModel_IBindingList,
    System_ComponentModel_ICancelAddNew,
    System_ComponentModel_IRaiseItemChangedEvents
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_BindingList_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.BindingList`1.#ctor
    /**
    Initializes a new instance of the  class using default values.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BindingList_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Collections.Generic.IList<T>)
// docid: M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})
    /**
    Initializes a new instance of the  class with the specified list.

    - Parameter list: An  of items to be contained in the .
    */
    public override init(list : dotnet.System.Collections.Generic.IList_1<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BindingList_1_ctor_0__1__System_Collections_Generic_IList_T_(T.get_type_handle(), &__thrown, list.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // T AddNew()
// docid: M:System.ComponentModel.BindingList`1.AddNew
    /**
    Adds a new item to the collection.

    - Returns: The item added to the list.

    */
    open func AddNew() throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindingList_1_T__AddNew_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
    // void CancelNew(System.Int32)
// docid: M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)
    /**
    Discards a pending new item.

    - Parameter itemIndex: The index of the of the new item to be added
    */
    open func CancelNew(itemIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__CancelNew_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), itemIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndNew(System.Int32)
// docid: M:System.ComponentModel.BindingList`1.EndNew(System.Int32)
    /**
    Commits a pending new item to the collection.

    - Parameter itemIndex: The index of the new item to be added.
    */
    open func EndNew(itemIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__EndNew_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), itemIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ResetBindings()
// docid: M:System.ComponentModel.BindingList`1.ResetBindings
    /**
    Raises a  event of type .

    */
    open func ResetBindings() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__ResetBindings_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ResetItem(System.Int32)
// docid: M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)
    /**
    Raises a  event of type  for the item at the specified position.

    - Parameter position: A zero-based index of the item to be reset.
    */
    open func ResetItem(position : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__ResetItem_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowEdit()
// docid: M:System.ComponentModel.BindingList`1.get_AllowEdit
    open func get_AllowEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindingList_1_bool__get_AllowEdit_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowEdit(bool)
// docid: M:System.ComponentModel.BindingList`1.set_AllowEdit(System.Boolean)
    open func set_AllowEdit(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__set_AllowEdit_0__1__bool(T.get_type_handle(), &__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowNew()
// docid: M:System.ComponentModel.BindingList`1.get_AllowNew
    open func get_AllowNew() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindingList_1_bool__get_AllowNew_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowNew(bool)
// docid: M:System.ComponentModel.BindingList`1.set_AllowNew(System.Boolean)
    open func set_AllowNew(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__set_AllowNew_0__1__bool(T.get_type_handle(), &__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowRemove()
// docid: M:System.ComponentModel.BindingList`1.get_AllowRemove
    open func get_AllowRemove() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindingList_1_bool__get_AllowRemove_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowRemove(bool)
// docid: M:System.ComponentModel.BindingList`1.set_AllowRemove(System.Boolean)
    open func set_AllowRemove(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__set_AllowRemove_0__1__bool(T.get_type_handle(), &__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_RaiseListChangedEvents()
// docid: M:System.ComponentModel.BindingList`1.get_RaiseListChangedEvents
    open func get_RaiseListChangedEvents() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BindingList_1_bool__get_RaiseListChangedEvents_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_RaiseListChangedEvents(bool)
// docid: M:System.ComponentModel.BindingList`1.set_RaiseListChangedEvents(System.Boolean)
    open func set_RaiseListChangedEvents(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__set_RaiseListChangedEvents_0__1__bool(T.get_type_handle(), &__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_AddingNew(System.ComponentModel.AddingNewEventHandler)
// docid: M:System.ComponentModel.BindingList`1.add_AddingNew(System.ComponentModel.AddingNewEventHandler)
    open func add_AddingNew(value : dotnet.System.ComponentModel.AddingNewEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__add_AddingNew_0__1__AddingNewEventHandler(T.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_AddingNew(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.AddingNewEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.AddingNewEventHandler(value);
        return try add_AddingNew(value: del_value);
    }
    // [IsSpecialName] void remove_AddingNew(System.ComponentModel.AddingNewEventHandler)
// docid: M:System.ComponentModel.BindingList`1.remove_AddingNew(System.ComponentModel.AddingNewEventHandler)
    open func remove_AddingNew(value : dotnet.System.ComponentModel.AddingNewEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__remove_AddingNew_0__1__AddingNewEventHandler(T.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_AddingNew(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.AddingNewEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.AddingNewEventHandler(value);
        return try remove_AddingNew(value: del_value);
    }
    // [IsSpecialName] void add_ListChanged(System.ComponentModel.ListChangedEventHandler)
// docid: M:System.ComponentModel.BindingList`1.add_ListChanged(System.ComponentModel.ListChangedEventHandler)
    open /* method final */ func add_ListChanged(value : dotnet.System.ComponentModel.ListChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__add_ListChanged_0__1__ListChangedEventHandler(T.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_ListChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ListChangedEventHandler(value);
        return try add_ListChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ListChanged(System.ComponentModel.ListChangedEventHandler)
// docid: M:System.ComponentModel.BindingList`1.remove_ListChanged(System.ComponentModel.ListChangedEventHandler)
    open /* method final */ func remove_ListChanged(value : dotnet.System.ComponentModel.ListChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_BindingList_1_void__remove_ListChanged_0__1__ListChangedEventHandler(T.get_type_handle(), &__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_ListChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ListChangedEventHandler(value);
        return try remove_ListChanged(value: del_value);
    }
    /**
    Gets or sets a value indicating whether items in the list can be edited.

    */
    open var AllowEdit : Bool {
        get {
            return try! get_AllowEdit();
        }
        set(v) {
            return try! set_AllowEdit(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether you can add items to the list using the  method.

    */
    open var AllowNew : Bool {
        get {
            return try! get_AllowNew();
        }
        set(v) {
            return try! set_AllowNew(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether you can remove items from the collection.

    */
    open var AllowRemove : Bool {
        get {
            return try! get_AllowRemove();
        }
        set(v) {
            return try! set_AllowRemove(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether adding or removing items within the list raises  events.

    */
    open var RaiseListChangedEvents : Bool {
        get {
            return try! get_RaiseListChangedEvents();
        }
        set(v) {
            return try! set_RaiseListChangedEvents(value: v);
        }
    }
} // BindingList_1


// type: System.ComponentModel.BooleanConverter
    /**
    Provides a type converter to convert  objects to and from various other representations.

    */
open class BooleanConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_BooleanConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.BooleanConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_BooleanConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you wish to convert from.
    - Returns: 
         if this object can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BooleanConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given value object to a Boolean object.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  that specifies the culture to which to convert.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted .

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BooleanConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a collection of standard values for the Boolean data type.

    - Parameter context: An  that provides a format context.
    - Returns: A  that holds a standard set of valid values.

    */
    open override func GetStandardValues(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BooleanConverter_TypeConverter_StandardValuesCollection__GetStandardValues_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection(hndl : __return);
        }
    }
    // bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether the list of standard values returned from the  method is an exclusive list.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because the  returned from  is an exhaustive list of possible values. This method never returns .

    */
    open override func GetStandardValuesExclusive(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BooleanConverter_bool__GetStandardValuesExclusive_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether this object supports a standard set of values that can be picked from a list.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because  can be called to find a common set of values the object supports. This method never returns .

    */
    open override func GetStandardValuesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_BooleanConverter_bool__GetStandardValuesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // BooleanConverter


// type: System.ComponentModel.ByteConverter
    /**
    Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.

    */
open class ByteConverter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ByteConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.ByteConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ByteConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // ByteConverter


// type: System.ComponentModel.CancelEventHandler
    /**
    Represents the method that handles a cancelable event.

    */
public final class CancelEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CancelEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.CancelEventArgs)
// docid: M:System.ComponentModel.CancelEventHandler.Invoke(System.Object,System.ComponentModel.CancelEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.CancelEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_CancelEventHandler_void__Invoke_0__2__Object_CancelEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.CancelEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.CancelEventHandler.BeginInvoke(System.Object,System.ComponentModel.CancelEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.CancelEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CancelEventHandler_IAsyncResult__BeginInvoke_0__4__Object_CancelEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.CancelEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_CancelEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CancelEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.CancelEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_CancelEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.CancelEventArgs)
// docid: M:System.ComponentModel.CancelEventHandler.Invoke(System.Object,System.ComponentModel.CancelEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.CancelEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_CancelEventHandler_void__Invoke_0__2__Object_CancelEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // CancelEventHandler


// type: System.ComponentModel.CharConverter
    /**
    Provides a type converter to convert Unicode character objects to and from various other representations.

    */
open class CharConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CharConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.CharConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_CharConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you want to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CharConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to a Unicode character object.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The culture into which  will be converted.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted .

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CharConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to a Unicode character object using the arguments.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The culture into which  will be converted.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CharConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // CharConverter


// type: System.ComponentModel.CollectionChangeAction
    /**
    Specifies how the collection is changed.

    */
public struct CollectionChangeAction : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CollectionChangeAction_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.CollectionChangeAction Add
    /**
    Specifies that an element was added to the collection.

    */
    public static var Add : dotnet.System.ComponentModel.CollectionChangeAction {
        get {
        let __return = dotnet.System.ComponentModel.CollectionChangeAction(val: System_ComponentModel_CollectionChangeAction_get_Add());
            return __return;
        }
    }
    // static field: System.ComponentModel.CollectionChangeAction Remove
    /**
    Specifies that an element was removed from the collection.

    */
    public static var Remove : dotnet.System.ComponentModel.CollectionChangeAction {
        get {
        let __return = dotnet.System.ComponentModel.CollectionChangeAction(val: System_ComponentModel_CollectionChangeAction_get_Remove());
            return __return;
        }
    }
    // static field: System.ComponentModel.CollectionChangeAction Refresh
    /**
    Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as .

    */
    public static var Refresh : dotnet.System.ComponentModel.CollectionChangeAction {
        get {
        let __return = dotnet.System.ComponentModel.CollectionChangeAction(val: System_ComponentModel_CollectionChangeAction_get_Refresh());
            return __return;
        }
    }
} // CollectionChangeAction


// type: System.ComponentModel.CollectionChangeEventArgs
    /**
    Provides data for the  event.

    */
open class CollectionChangeEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CollectionChangeEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.CollectionChangeAction, System.Object)
// docid: M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)
    /**
    Initializes a new instance of the  class.

    - Parameter action: One of the  values that specifies how the collection changed.
    - Parameter element: An  that specifies the instance of the collection where the change occurred.
    */
    public init(action : dotnet.System.ComponentModel.CollectionChangeAction, element : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_CollectionChangeEventArgs_ctor_0__2__CollectionChangeAction_Object(&__thrown, action.get_value(), element?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.CollectionChangeAction get_Action()
// docid: M:System.ComponentModel.CollectionChangeEventArgs.get_Action
    open func get_Action() throws -> dotnet.System.ComponentModel.CollectionChangeAction {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CollectionChangeEventArgs_CollectionChangeAction__get_Action_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.CollectionChangeAction(val: __return);
        }
    }
    // [IsSpecialName] System.Object get_Element()
// docid: M:System.ComponentModel.CollectionChangeEventArgs.get_Element
    open func get_Element() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CollectionChangeEventArgs_Object__get_Element_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets an action that specifies how the collection changed.

    */
    open var Action : dotnet.System.ComponentModel.CollectionChangeAction {
        get {
            return try! get_Action();
        }
    }
    /**
    Gets the instance of the collection with the change.

    */
    open var Element : Optional<dotnet.System.Object> {
        get {
            return try! get_Element();
        }
    }
} // CollectionChangeEventArgs


// type: System.ComponentModel.CollectionChangeEventHandler
    /**
    Represents the method that handles the  event raised when adding elements to or removing elements from a collection.

    */
public final class CollectionChangeEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CollectionChangeEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.CollectionChangeEventArgs)
// docid: M:System.ComponentModel.CollectionChangeEventHandler.Invoke(System.Object,System.ComponentModel.CollectionChangeEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.CollectionChangeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_CollectionChangeEventHandler_void__Invoke_0__2__Object_CollectionChangeEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.CollectionChangeEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.CollectionChangeEventHandler.BeginInvoke(System.Object,System.ComponentModel.CollectionChangeEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.CollectionChangeEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CollectionChangeEventHandler_IAsyncResult__BeginInvoke_0__4__Object_CollectionChangeEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.CollectionChangeEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_CollectionChangeEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.CollectionChangeEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.CollectionChangeEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_CollectionChangeEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.CollectionChangeEventArgs)
// docid: M:System.ComponentModel.CollectionChangeEventHandler.Invoke(System.Object,System.ComponentModel.CollectionChangeEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.CollectionChangeEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_CollectionChangeEventHandler_void__Invoke_0__2__Object_CollectionChangeEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // CollectionChangeEventHandler


// type: System.ComponentModel.CollectionConverter
    /**
    Provides a type converter to convert collection objects to and from various other representations.

    */
open class CollectionConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CollectionConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.CollectionConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_CollectionConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified destination type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The culture to which  will be converted.
    - Parameter value: The  to convert. This parameter must inherit from .
    - Parameter destinationType: The  to convert the value to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CollectionConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.

    - Parameter context: An  that provides a format context.
    - Parameter value: An  that specifies the type of array to get the properties for.
    - Parameter attributes: An array of type  that will be used as a filter.
    - Returns: A  with the properties that are exposed for this data type, or  if there are no properties. This method always returns .

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CollectionConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
} // CollectionConverter


// type: System.ComponentModel.ComplexBindingPropertiesAttribute
    /**
    Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.

    */
public final class ComplexBindingPropertiesAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ComplexBindingPropertiesAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.ComplexBindingPropertiesAttribute Default
    /**
    Represents the default value for the  class.

    */
    public class var Default : dotnet.System.ComponentModel.ComplexBindingPropertiesAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ComplexBindingPropertiesAttribute(hndl: System_ComponentModel_ComplexBindingPropertiesAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor
    /**
    Initializes a new instance of the  class using no parameters.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ComplexBindingPropertiesAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified data source.

    - Parameter dataSource: The name of the property to be used as the data source.
    */
    public init(dataSource : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ComplexBindingPropertiesAttribute_ctor_0__1__String(&__thrown, dataSource?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class using the specified data source and data member.

    - Parameter dataSource: The name of the property to be used as the data source.
    - Parameter dataMember: The name of the property to be used as the source for data.
    */
    public init(dataSource : Optional<dotnet.System.String>, dataMember : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ComplexBindingPropertiesAttribute_ctor_0__2__String_String(&__thrown, dataSource?.get_handle() ?? nil, dataMember?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  instance.

    - Parameter obj: The  to compare with the current  instance
    - Returns: 
         if the object is equal to the current instance; otherwise, , indicating they are not equal.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComplexBindingPropertiesAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComplexBindingPropertiesAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_DataMember()
// docid: M:System.ComponentModel.ComplexBindingPropertiesAttribute.get_DataMember
    public func get_DataMember() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComplexBindingPropertiesAttribute_String__get_DataMember_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DataSource()
// docid: M:System.ComponentModel.ComplexBindingPropertiesAttribute.get_DataSource
    public func get_DataSource() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComplexBindingPropertiesAttribute_String__get_DataSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the data member property for the component to which the  is bound.

    */
    public var DataMember : Optional<dotnet.System.String> {
        get {
            return try! get_DataMember();
        }
    }
    /**
    Gets the name of the data source property for the component to which the  is bound.

    */
    public var DataSource : Optional<dotnet.System.String> {
        get {
            return try! get_DataSource();
        }
    }
} // ComplexBindingPropertiesAttribute


// type: System.ComponentModel.ComponentConverter
    /**
    Provides a type converter to convert components to and from various other representations.

    */
open class ComponentConverter
    :
    dotnet.System.ComponentModel.ReferenceConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ComponentConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.ComponentConverter.#ctor(System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter type: A  that represents the type to associate with this component converter.
    */
    public override init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ComponentConverter_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Gets a collection of properties for the type of component specified by the value parameter.

    - Parameter context: An  that provides a format context.
    - Parameter value: An  that specifies the type of component to get the properties for.
    - Parameter attributes: An array of type  that will be used as a filter.
    - Returns: A  with the properties that are exposed for the component, or  if there are no properties.

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComponentConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether this object supports properties using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because  should be called to find the properties of this object. This method never returns .

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComponentConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ComponentConverter


// type: System.ComponentModel.ComponentEditor
    /**
    Provides the base class for a custom component editor.

    */
open class ComponentEditor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ComponentEditor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool EditComponent(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Edits the component and returns a value indicating whether the component was modified based upon a given context.

    - Parameter context: An optional context object that can be used to obtain further information about the edit.
    - Parameter component: The component to be edited.
    - Returns: 
         if the component was modified; otherwise, .

    */
    open func EditComponent(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, component : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComponentEditor_bool__EditComponent_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool EditComponent(System.Object)
// docid: M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)
    /**
    Edits the component and returns a value indicating whether the component was modified.

    - Parameter component: The component to be edited.
    - Returns: 
         if the component was modified; otherwise, .

    */
    open func EditComponent(component : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ComponentEditor_bool__EditComponent_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ComponentEditor


// type: System.ComponentModel.ComponentResourceManager
    /**
    Provides simple functionality for enumerating resources for a component or object. The  class is a .

    */
open class ComponentResourceManager
    :
    dotnet.System.Resources.ResourceManager
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ComponentResourceManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.ComponentResourceManager.#ctor
    /**
    Initializes a new instance of the  class with default values.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ComponentResourceManager_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)
    /**
    Creates a  that looks up resources in satellite assemblies based on information from the specified .

    - Parameter t: A  from which the  derives all information for finding resource files.
    */
    public init(t : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ComponentResourceManager_ctor_0__1__Type(&__thrown, t.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void ApplyResources(System.Object, System.String)
// docid: M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)
    /**
    Applies a resource's value to the corresponding property of the object.

    - Parameter value: An  that contains the property value to be applied.
    - Parameter objectName: A  that contains the name of the object to look up in the resources.
    */
    open func ApplyResources(value : dotnet.System.Object, objectName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ComponentResourceManager_void__ApplyResources_0__2__Object_String(&__thrown, self.get_handle(), value.get_handle(), objectName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ApplyResources(System.Object, System.String, System.Globalization.CultureInfo)
// docid: M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)
    /**
    Applies a resource's value to the corresponding property of the object.

    - Parameter value: An  that contains the property value to be applied.
    - Parameter objectName: A  that contains the name of the object to look up in the resources.
    - Parameter culture: The culture for which to apply resources.
    */
    open func ApplyResources(value : dotnet.System.Object, objectName : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ComponentResourceManager_void__ApplyResources_0__3__Object_String_CultureInfo(&__thrown, self.get_handle(), value.get_handle(), objectName.get_handle(), culture?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ComponentResourceManager


// type: System.ComponentModel.Container
    /**
    Encapsulates zero or more components.

    */
open class Container
    :
    dotnet.System.Object,
    System_ComponentModel_IContainer,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Container_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Container.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Container_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
    /**
    Adds the specified  to the . The component is unnamed.

    - Parameter component: The component to add.
    */
    open func Add(component : Optional<dotnet.System.ComponentModel.IComponent>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Container_void__Add_0__1__IComponent(&__thrown, self.get_handle(), component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.ComponentModel.IComponent, System.String)
// docid: M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
    /**
    Adds the specified  to the  and assigns it a name.

    - Parameter component: The component to add.
    - Parameter name: The unique, case-insensitive name to assign to the component.  
  
 -or-  
  
 , which leaves the component unnamed.
    */
    open func Add(component : Optional<dotnet.System.ComponentModel.IComponent>, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Container_void__Add_0__2__IComponent_String(&__thrown, self.get_handle(), component?.get_handle() ?? nil, name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.ComponentModel.Container.Dispose
    /**
    Releases all resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Container_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
    /**
    Removes a component from the .

    - Parameter component: The component to remove.
    */
    open func Remove(component : Optional<dotnet.System.ComponentModel.IComponent>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Container_void__Remove_0__1__IComponent(&__thrown, self.get_handle(), component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ComponentCollection get_Components()
// docid: M:System.ComponentModel.Container.get_Components
    open func get_Components() throws -> dotnet.System.ComponentModel.ComponentCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Container_ComponentCollection__get_Components_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ComponentCollection(hndl : __return);
        }
    }
    /**
    Gets all the components in the .

    */
    open var Components : dotnet.System.ComponentModel.ComponentCollection {
        get {
            return try! get_Components();
        }
    }
} // Container


// type: System.ComponentModel.ContainerFilterService
    /**
    Provides a base class for the container filter service.

    */
open class ContainerFilterService
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ContainerFilterService_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.ComponentModel.ComponentCollection FilterComponents(System.ComponentModel.ComponentCollection)
// docid: M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)
    /**
    Filters the component collection.

    - Parameter components: The component collection to filter.
    - Returns: A  that represents a modified collection.

    */
    open func FilterComponents(components : dotnet.System.ComponentModel.ComponentCollection) throws -> dotnet.System.ComponentModel.ComponentCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ContainerFilterService_ComponentCollection__FilterComponents_0__1__ComponentCollection(&__thrown, self.get_handle(), components.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ComponentCollection(hndl : __return);
        }
    }
} // ContainerFilterService


// type: System.ComponentModel.CultureInfoConverter
    /**
    Provides a type converter to convert  objects to and from various other representations.

    */
open class CultureInfoConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CultureInfoConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.CultureInfoConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_CultureInfoConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a  using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you wish to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CultureInfoConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you wish to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CultureInfoConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the specified value object to a .

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  that specifies the culture to which to convert.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CultureInfoConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified destination type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  that specifies the culture to which to convert.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value to.
    - Returns: An  that represents the converted .

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CultureInfoConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a collection of standard values for a  object using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: A  containing a standard set of valid values, or  if the data type does not support a standard set of values.

    */
    open override func GetStandardValues(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CultureInfoConverter_TypeConverter_StandardValuesCollection__GetStandardValues_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection(hndl : __return);
        }
    }
    // bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether the list of standard values returned from  is an exhaustive list.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because the  returned from  is not an exhaustive list of possible values (that is, other values are possible). This method never returns .

    */
    open override func GetStandardValuesExclusive(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CultureInfoConverter_bool__GetStandardValuesExclusive_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because  should be called to find a common set of values the object supports. This method never returns .

    */
    open override func GetStandardValuesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CultureInfoConverter_bool__GetStandardValuesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // CultureInfoConverter


// type: System.ComponentModel.CustomTypeDescriptor
    /**
    Provides a simple default implementation of the  interface.

    */
open class CustomTypeDescriptor
    :
    dotnet.System.Object,
    System_ComponentModel_ICustomTypeDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_CustomTypeDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.ComponentModel.AttributeCollection GetAttributes()
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetAttributes
    /**
    Returns a collection of custom attributes for the type represented by this type descriptor.

    - Returns: An  containing the attributes for the type. The default is .

    */
    open func GetAttributes() throws -> dotnet.System.ComponentModel.AttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_AttributeCollection__GetAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AttributeCollection(hndl : __return);
        }
    }
    // System.String GetClassName()
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetClassName
    /**
    Returns the fully qualified name of the class represented by this type descriptor.

    - Returns: A  containing the fully qualified class name of the type this type descriptor is describing. The default is .

    */
    open func GetClassName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_String__GetClassName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetComponentName()
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetComponentName
    /**
    Returns the name of the class represented by this type descriptor.

    - Returns: A  containing the name of the component instance this type descriptor is describing. The default is .

    */
    open func GetComponentName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_String__GetComponentName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter GetConverter()
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetConverter
    /**
    Returns a type converter for the type represented by this type descriptor.

    - Returns: A  for the type represented by this type descriptor. The default is a newly created .

    */
    open func GetConverter() throws -> dotnet.System.ComponentModel.TypeConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_TypeConverter__GetConverter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptor GetDefaultEvent()
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent
    /**
    Returns the event descriptor for the default event of the object represented by this type descriptor.

    - Returns: The  for the default event on the object represented by this type descriptor. The default is .

    */
    open func GetDefaultEvent() throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_EventDescriptor__GetDefaultEvent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptor GetDefaultProperty()
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty
    /**
    Returns the property descriptor for the default property of the object represented by this type descriptor.

    - Returns: A  for the default property on the object represented by this type descriptor. The default is .

    */
    open func GetDefaultProperty() throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_PropertyDescriptor__GetDefaultProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetEditor(System.Type)
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)
    /**
    Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.

    - Parameter editorBaseType: The base type of the editor to retrieve.
    - Returns: An editor of the given type that is to be associated with the class represented by this type descriptor. The default is .

    */
    open func GetEditor(editorBaseType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_Object__GetEditor_0__1__Type(&__thrown, self.get_handle(), editorBaseType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents()
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetEvents
    /**
    Returns a collection of event descriptors for the object represented by this type descriptor.

    - Returns: An  containing the event descriptors for the object represented by this type descriptor. The default is .

    */
    open func GetEvents() throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_EventDescriptorCollection__GetEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Attribute[])
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])
    /**
    Returns a filtered collection of event descriptors for the object represented by this type descriptor.

    - Parameter attributes: An array of attributes to use as a filter. This can be .
    - Returns: An  containing the event descriptions for the object represented by this type descriptor. The default is .

    */
    open func GetEvents(attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_EventDescriptorCollection__GetEvents_0__1__AttributeArray(&__thrown, self.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties()
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetProperties
    /**
    Returns a collection of property descriptors for the object represented by this type descriptor.

    - Returns: A  containing the property descriptions for the object represented by this type descriptor. The default is .

    */
    open func GetProperties() throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_PropertyDescriptorCollection__GetProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Attribute[])
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])
    /**
    Returns a filtered collection of property descriptors for the object represented by this type descriptor.

    - Parameter attributes: An array of attributes to use as a filter. This can be .
    - Returns: A  containing the property descriptions for the object represented by this type descriptor. The default is .

    */
    open func GetProperties(attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_PropertyDescriptorCollection__GetProperties_0__1__AttributeArray(&__thrown, self.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.Object GetPropertyOwner(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)
    /**
    Returns an object that contains the property described by the specified property descriptor.

    - Parameter pd: The property descriptor for which to retrieve the owning object.
    - Returns: An  that owns the given property specified by the type descriptor. The default is .

    */
    open func GetPropertyOwner(pd : Optional<dotnet.System.ComponentModel.PropertyDescriptor>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_CustomTypeDescriptor_Object__GetPropertyOwner_0__1__PropertyDescriptor(&__thrown, self.get_handle(), pd?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // CustomTypeDescriptor


// type: System.ComponentModel.DataObjectAttribute
    /**
    Identifies a type as an object suitable for binding to an  object. This class cannot be inherited.

    */
public final class DataObjectAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataObjectAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DataObjectAttribute DataObject
    /**
    Indicates that the class is suitable for binding to an  object at design time. This field is read-only.

    */
    public class var DataObject : dotnet.System.ComponentModel.DataObjectAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DataObjectAttribute(hndl: System_ComponentModel_DataObjectAttribute_get_DataObject());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataObjectAttribute Default
    /**
    Represents the default value of the  class, which indicates that the class is suitable for binding to an  object at design time. This field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.DataObjectAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DataObjectAttribute(hndl: System_ComponentModel_DataObjectAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataObjectAttribute NonDataObject
    /**
    Indicates that the class is not suitable for binding to an  object at design time. This field is read-only.

    */
    public class var NonDataObject : dotnet.System.ComponentModel.DataObjectAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DataObjectAttribute(hndl: System_ComponentModel_DataObjectAttribute_get_NonDataObject());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.DataObjectAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataObjectAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class and indicates whether an object is suitable for binding to an  object.

    - Parameter isDataObject: 
         if the object is suitable for binding to an  object; otherwise, .
    */
    public init(isDataObject : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataObjectAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(isDataObject ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)
    /**
    Determines whether this instance of  fits the pattern of another object.

    - Parameter obj: An object to compare with this instance of .
    - Returns: 
         if this instance is the same as the instance specified by the  parameter; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DataObjectAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute
    /**
    Gets a value indicating whether the current value of the attribute is the default value for the attribute.

    - Returns: 
         if the current value of the attribute is the default; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDataObject()
// docid: M:System.ComponentModel.DataObjectAttribute.get_IsDataObject
    public func get_IsDataObject() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectAttribute_bool__get_IsDataObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether an object should be considered suitable for binding to an  object at design time.

    */
    public var IsDataObject : Bool {
        get {
            return try! get_IsDataObject();
        }
    }
} // DataObjectAttribute


// type: System.ComponentModel.DataObjectFieldAttribute
    /**
    Provides metadata for a property representing a data field. This class cannot be inherited.

    */
public final class DataObjectFieldAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataObjectFieldAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool)
// docid: M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class and indicates whether the field is the primary key for the data row.

    - Parameter primaryKey: 
         to indicate that the field is in the primary key of the data row; otherwise, .
    */
    public init(primaryKey : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataObjectFieldAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(primaryKey ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool)
// docid: M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.

    - Parameter primaryKey: 
         to indicate that the field is in the primary key of the data row; otherwise, .
    - Parameter isIdentity: 
         to indicate that the field is an identity field that uniquely identifies the data row; otherwise, .
    */
    public init(primaryKey : Bool, isIdentity : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataObjectFieldAttribute_ctor_0__2__bool_bool(&__thrown, Swift.Int32(primaryKey ? 1 : 0), Swift.Int32(isIdentity ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, bool)
// docid: M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.

    - Parameter primaryKey: 
         to indicate that the field is in the primary key of the data row; otherwise, .
    - Parameter isIdentity: 
         to indicate that the field is an identity field that uniquely identifies the data row; otherwise, .
    - Parameter isNullable: 
         to indicate that the field can be null in the data store; otherwise, .
    */
    public init(primaryKey : Bool, isIdentity : Bool, isNullable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataObjectFieldAttribute_ctor_0__3__bool_bool_bool(&__thrown, Swift.Int32(primaryKey ? 1 : 0), Swift.Int32(isIdentity ? 1 : 0), Swift.Int32(isNullable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool, bool, System.Int32)
// docid: M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)
    /**
    Initializes a new instance of the  class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.

    - Parameter primaryKey: 
         to indicate that the field is in the primary key of the data row; otherwise, .
    - Parameter isIdentity: 
         to indicate that the field is an identity field that uniquely identifies the data row; otherwise, .
    - Parameter isNullable: 
         to indicate that the field can be null in the data store; otherwise, .
    - Parameter length: The length of the field in bytes.
    */
    public init(primaryKey : Bool, isIdentity : Bool, isNullable : Bool, length : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataObjectFieldAttribute_ctor_0__4__bool_bool_bool_i32(&__thrown, Swift.Int32(primaryKey ? 1 : 0), Swift.Int32(isIdentity ? 1 : 0), Swift.Int32(isNullable ? 1 : 0), length);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)
    /**
    Returns a value indicating whether this instance is equal to a specified object.

    - Parameter obj: An object to compare with this instance of .
    - Returns: 
         if this instance is the same as the instance specified by the  parameter; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectFieldAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectFieldAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsIdentity()
// docid: M:System.ComponentModel.DataObjectFieldAttribute.get_IsIdentity
    public func get_IsIdentity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectFieldAttribute_bool__get_IsIdentity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsNullable()
// docid: M:System.ComponentModel.DataObjectFieldAttribute.get_IsNullable
    public func get_IsNullable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectFieldAttribute_bool__get_IsNullable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.ComponentModel.DataObjectFieldAttribute.get_Length
    public func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectFieldAttribute_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_PrimaryKey()
// docid: M:System.ComponentModel.DataObjectFieldAttribute.get_PrimaryKey
    public func get_PrimaryKey() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectFieldAttribute_bool__get_PrimaryKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether a property represents an identity field in the underlying data.

    */
    public var IsIdentity : Bool {
        get {
            return try! get_IsIdentity();
        }
    }
    /**
    Gets a value indicating whether a property represents a field that can be null in the underlying data store.

    */
    public var IsNullable : Bool {
        get {
            return try! get_IsNullable();
        }
    }
    /**
    Gets the length of the property in bytes.

    */
    public var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
    /**
    Gets a value indicating whether a property is in the primary key in the underlying data.

    */
    public var PrimaryKey : Bool {
        get {
            return try! get_PrimaryKey();
        }
    }
} // DataObjectFieldAttribute


// type: System.ComponentModel.DataObjectMethodAttribute
    /**
    Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.

    */
public final class DataObjectMethodAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataObjectMethodAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.DataObjectMethodType)
// docid: M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)
    /**
    Initializes a new instance of the  class and identifies the type of data operation the method performs.

    - Parameter methodType: One of the  values that describes the data operation the method performs.
    */
    public init(methodType : dotnet.System.ComponentModel.DataObjectMethodType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataObjectMethodAttribute_ctor_0__1__DataObjectMethodType(&__thrown, methodType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.DataObjectMethodType, bool)
// docid: M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)
    /**
    Initializes a new instance of the  class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.

    - Parameter methodType: One of the  values that describes the data operation the method performs.
    - Parameter isDefault: 
         to indicate the method that the attribute is applied to is the default method of the data object for the specified ; otherwise, .
    */
    public init(methodType : dotnet.System.ComponentModel.DataObjectMethodType, isDefault : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DataObjectMethodAttribute_ctor_0__2__DataObjectMethodType_bool(&__thrown, methodType.get_value(), Swift.Int32(isDefault ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)
    /**
    Returns a value indicating whether this instance is equal to a specified object.

    - Parameter obj: An object to compare with this instance of .
    - Returns: 
         if this instance is the same as the instance specified by the  parameter; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectMethodAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectMethodAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Match(System.Object)
// docid: M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)
    /**
    Gets a value indicating whether this instance shares a common pattern with a specified attribute.

    - Parameter obj: An object to compare with this instance of .
    - Returns: 
         if this instance is the same as the instance specified by the  parameter; otherwise, .

    */
    public override func Match(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectMethodAttribute_bool__Match_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsDefault()
// docid: M:System.ComponentModel.DataObjectMethodAttribute.get_IsDefault
    public func get_IsDefault() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectMethodAttribute_bool__get_IsDefault_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.DataObjectMethodType get_MethodType()
// docid: M:System.ComponentModel.DataObjectMethodAttribute.get_MethodType
    public func get_MethodType() throws -> dotnet.System.ComponentModel.DataObjectMethodType {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DataObjectMethodAttribute_DataObjectMethodType__get_MethodType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.DataObjectMethodType(val: __return);
        }
    }
    /**
    Gets a value indicating whether the method that the  is applied to is the default data method exposed by the data object for a specific method type.

    */
    public var IsDefault : Bool {
        get {
            return try! get_IsDefault();
        }
    }
    /**
    Gets a  value indicating the type of data operation the method performs.

    */
    public var MethodType : dotnet.System.ComponentModel.DataObjectMethodType {
        get {
            return try! get_MethodType();
        }
    }
} // DataObjectMethodAttribute


// type: System.ComponentModel.DataObjectMethodType
    /**
    Identifies the type of data operation performed by a method, as specified by the  applied to the method.

    */
public struct DataObjectMethodType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DataObjectMethodType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.DataObjectMethodType Fill
    /**
    Indicates that a method is used for a data operation that fills a  object.

    */
    public static var Fill : dotnet.System.ComponentModel.DataObjectMethodType {
        get {
        let __return = dotnet.System.ComponentModel.DataObjectMethodType(val: System_ComponentModel_DataObjectMethodType_get_Fill());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataObjectMethodType Select
    /**
    Indicates that a method is used for a data operation that retrieves data.

    */
    public static var Select : dotnet.System.ComponentModel.DataObjectMethodType {
        get {
        let __return = dotnet.System.ComponentModel.DataObjectMethodType(val: System_ComponentModel_DataObjectMethodType_get_Select());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataObjectMethodType Update
    /**
    Indicates that a method is used for a data operation that updates data.

    */
    public static var Update : dotnet.System.ComponentModel.DataObjectMethodType {
        get {
        let __return = dotnet.System.ComponentModel.DataObjectMethodType(val: System_ComponentModel_DataObjectMethodType_get_Update());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataObjectMethodType Insert
    /**
    Indicates that a method is used for a data operation that inserts data.

    */
    public static var Insert : dotnet.System.ComponentModel.DataObjectMethodType {
        get {
        let __return = dotnet.System.ComponentModel.DataObjectMethodType(val: System_ComponentModel_DataObjectMethodType_get_Insert());
            return __return;
        }
    }
    // static field: System.ComponentModel.DataObjectMethodType Delete
    /**
    Indicates that a method is used for a data operation that deletes data.

    */
    public static var Delete : dotnet.System.ComponentModel.DataObjectMethodType {
        get {
        let __return = dotnet.System.ComponentModel.DataObjectMethodType(val: System_ComponentModel_DataObjectMethodType_get_Delete());
            return __return;
        }
    }
} // DataObjectMethodType


// type: System.ComponentModel.DateTimeConverter
    /**
    Provides a type converter to convert  objects to and from various other representations.

    */
open class DateTimeConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DateTimeConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DateTimeConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DateTimeConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a  using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you wish to convert from.
    - Returns: 
         if this object can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DateTimeConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you wish to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DateTimeConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given value object to a .

    - Parameter context: An  that provides a format context.
    - Parameter culture: An optional . If not supplied, the current culture is assumed.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted .

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DateTimeConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to a  using the arguments.

    - Parameter context: An  that provides a format context.
    - Parameter culture: An optional . If not supplied, the current culture is assumed.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value to.
    - Returns: An  that represents the converted .

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DateTimeConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DateTimeConverter


// type: System.ComponentModel.DateTimeOffsetConverter
    /**
    Provides a type converter to convert  structures to and from various other representations.

    */
open class DateTimeOffsetConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DateTimeOffsetConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DateTimeOffsetConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DateTimeOffsetConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns a value that indicates whether an object of the specified source type can be converted to a .

    - Parameter context: The date format context.
    - Parameter sourceType: The source type to check.
    - Returns: 
         if the specified type can be converted to a ; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DateTimeOffsetConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns a value that indicates whether a  can be converted to an object of the specified type.

    - Parameter context: The date format context.
    - Parameter destinationType: The destination type to check.
    - Returns: 
         if a  can be converted to the specified type; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DateTimeOffsetConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the specified object to a .

    - Parameter context: The date format context.
    - Parameter culture: The date culture.
    - Parameter value: The object to be converted.
    - Returns: A  that represents the specified object.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DateTimeOffsetConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts a  to an object of the specified type.

    - Parameter context: The date format context.
    - Parameter culture: The date culture.
    - Parameter value: The  to be converted.
    - Parameter destinationType: The type to convert to.
    - Returns: An object of the specified type that represents the .

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DateTimeOffsetConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DateTimeOffsetConverter


// type: System.ComponentModel.DecimalConverter
    /**
    Provides a type converter to convert  objects to and from various other representations.

    */
open class DecimalConverter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DecimalConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DecimalConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DecimalConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you wish to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DecimalConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to a  using the arguments.

    - Parameter context: An  that provides a format context.
    - Parameter culture: An optional . If not supplied, the current culture is assumed.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DecimalConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // DecimalConverter


// type: System.ComponentModel.DefaultBindingPropertyAttribute
    /**
    Specifies the default binding property for a component. This class cannot be inherited.

    */
public final class DefaultBindingPropertyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DefaultBindingPropertyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DefaultBindingPropertyAttribute Default
    /**
    Represents the default value for the  class.

    */
    public class var Default : dotnet.System.ComponentModel.DefaultBindingPropertyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DefaultBindingPropertyAttribute(hndl: System_ComponentModel_DefaultBindingPropertyAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor
    /**
    Initializes a new instance of the  class using no parameters.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DefaultBindingPropertyAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified property name.

    - Parameter name: The name of the default binding property.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DefaultBindingPropertyAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  instance.

    - Parameter obj: The  to compare with the current  instance
    - Returns: 
         if the object is equal to the current instance; otherwise, , indicating they are not equal.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultBindingPropertyAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultBindingPropertyAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.DefaultBindingPropertyAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultBindingPropertyAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the default binding property for the component to which the  is bound.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // DefaultBindingPropertyAttribute


// type: System.ComponentModel.DefaultEventAttribute
    /**
    Specifies the default event for a component.

    */
public final class DefaultEventAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DefaultEventAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DefaultEventAttribute Default
    /**
    Specifies the default value for the , which is . This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.DefaultEventAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DefaultEventAttribute(hndl: System_ComponentModel_DefaultEventAttribute_get_Default());
            return __return;
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name of the default event for the component this attribute is bound to.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DefaultEventAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultEventAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DefaultEventAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultEventAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.DefaultEventAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultEventAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the default event for the component this attribute is bound to.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // DefaultEventAttribute


// type: System.ComponentModel.DefaultPropertyAttribute
    /**
    Specifies the default property for a component.

    */
public final class DefaultPropertyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DefaultPropertyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DefaultPropertyAttribute Default
    /**
    Specifies the default value for the , which is . This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.DefaultPropertyAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DefaultPropertyAttribute(hndl: System_ComponentModel_DefaultPropertyAttribute_get_Default());
            return __return;
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name of the default property for the component this attribute is bound to.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DefaultPropertyAttribute_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultPropertyAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultPropertyAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.DefaultPropertyAttribute.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DefaultPropertyAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the default property for the component this attribute is bound to.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // DefaultPropertyAttribute


// type: System.ComponentModel.DesignTimeVisibleAttribute
    /**
    
         marks a component's visibility. If  is present, a visual designer can show this component on a designer.

    */
public final class DesignTimeVisibleAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DesignTimeVisibleAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.DesignTimeVisibleAttribute Default
    /**
    The default visibility which is .

    */
    public class var Default : dotnet.System.ComponentModel.DesignTimeVisibleAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignTimeVisibleAttribute(hndl: System_ComponentModel_DesignTimeVisibleAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignTimeVisibleAttribute No
    /**
    Marks a component as not visible in a visual designer.

    */
    public class var No : dotnet.System.ComponentModel.DesignTimeVisibleAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignTimeVisibleAttribute(hndl: System_ComponentModel_DesignTimeVisibleAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.DesignTimeVisibleAttribute Yes
    /**
    Marks a component as visible in a visual designer.

    */
    public class var Yes : dotnet.System.ComponentModel.DesignTimeVisibleAttribute {
        get {
        let __return = dotnet.System.ComponentModel.DesignTimeVisibleAttribute(hndl: System_ComponentModel_DesignTimeVisibleAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor
    /**
    Creates a new  set to the default value of .

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignTimeVisibleAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)
    /**
    Creates a new  with the  property set to the given value in .

    - Parameter visible: The value that the  property will be set against.
    */
    public init(visible : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DesignTimeVisibleAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(visible ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)
    /**
    Returns a value that indicates whether this instance is equal to a specified object.

    - Parameter obj: An Object to compare with this instance or a null reference ( in Visual Basic).
    - Returns: 
         if  equals the type and value of this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignTimeVisibleAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignTimeVisibleAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute
    /**
    Gets a value indicating if this instance is equal to the  value.

    - Returns: 
        , if this instance is equal to the  value; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignTimeVisibleAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Visible()
// docid: M:System.ComponentModel.DesignTimeVisibleAttribute.get_Visible
    public func get_Visible() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_DesignTimeVisibleAttribute_bool__get_Visible_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets or sets whether the component should be shown at design time.

    */
    public var Visible : Bool {
        get {
            return try! get_Visible();
        }
    }
} // DesignTimeVisibleAttribute


// type: System.ComponentModel.DoubleConverter
    /**
    Provides a type converter to convert double-precision, floating point number objects to and from various other representations.

    */
open class DoubleConverter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_DoubleConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.DoubleConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_DoubleConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // DoubleConverter


// type: System.ComponentModel.EnumConverter
    /**
    Provides a type converter to convert  objects to and from various other representations.

    */
open class EnumConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_EnumConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.EnumConverter.#ctor(System.Type)
    /**
    Initializes a new instance of the  class for the given type.

    - Parameter type: A  that represents the type of enumeration to associate with this enumeration converter.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_EnumConverter_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you wish to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EnumConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you wish to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EnumConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the specified value object to an enumeration object.

    - Parameter context: An  that provides a format context.
    - Parameter culture: An optional . If not supplied, the current culture is assumed.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted .

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EnumConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified destination type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: An optional . If not supplied, the current culture is assumed.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value to.
    - Returns: An  that represents the converted .

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EnumConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a collection of standard values for the data type this validator is designed for.

    - Parameter context: An  that provides a format context.
    - Returns: A  that holds a standard set of valid values, or  if the data type does not support a standard set of values.

    */
    open override func GetStandardValues(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EnumConverter_TypeConverter_StandardValuesCollection__GetStandardValues_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection(hndl : __return);
        }
    }
    // bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether the list of standard values returned from  is an exclusive list using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if the  returned from  is an exhaustive list of possible values;  if other values are possible.

    */
    open override func GetStandardValuesExclusive(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EnumConverter_bool__GetStandardValuesExclusive_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because  should be called to find a common set of values the object supports. This method never returns .

    */
    open override func GetStandardValuesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EnumConverter_bool__GetStandardValuesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Gets a value indicating whether the given object value is valid for this type.

    - Parameter context: An  that provides a format context.
    - Parameter value: The  to test.
    - Returns: 
         if the specified value is valid for this object; otherwise, .

    */
    open override func IsValid(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EnumConverter_bool__IsValid_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // EnumConverter


// type: System.ComponentModel.EventDescriptor
    /**
    Provides information about an event.

    */
open class EventDescriptor
    :
    dotnet.System.ComponentModel.MemberDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_EventDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddEventHandler(System.Object, System.Delegate)
// docid: M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)
    /**
    When overridden in a derived class, binds the event to the component.

    - Parameter component: A component that provides events to the delegate.
    - Parameter value: A delegate that represents the method that handles the event.
    */
    open func AddEventHandler(component : dotnet.System.Object, value : dotnet.System.Delegate) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventDescriptor_void__AddEventHandler_0__2__Object_Delegate(&__thrown, self.get_handle(), component.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveEventHandler(System.Object, System.Delegate)
// docid: M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)
    /**
    When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.

    - Parameter component: The component that the delegate is bound to.
    - Parameter value: The delegate to unbind from the component.
    */
    open func RemoveEventHandler(component : dotnet.System.Object, value : dotnet.System.Delegate) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventDescriptor_void__RemoveEventHandler_0__2__Object_Delegate(&__thrown, self.get_handle(), component.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ComponentType()
// docid: M:System.ComponentModel.EventDescriptor.get_ComponentType
    open func get_ComponentType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptor_Type__get_ComponentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_EventType()
// docid: M:System.ComponentModel.EventDescriptor.get_EventType
    open func get_EventType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptor_Type__get_EventType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsMulticast()
// docid: M:System.ComponentModel.EventDescriptor.get_IsMulticast
    open func get_IsMulticast() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptor_bool__get_IsMulticast_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    When overridden in a derived class, gets the type of component this event is bound to.

    */
    open var ComponentType : dotnet.System.Type_ {
        get {
            return try! get_ComponentType();
        }
    }
    /**
    When overridden in a derived class, gets the type of delegate for the event.

    */
    open var EventType : dotnet.System.Type_ {
        get {
            return try! get_EventType();
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.

    */
    open var IsMulticast : Bool {
        get {
            return try! get_IsMulticast();
        }
    }
} // EventDescriptor


// type: System.ComponentModel.EventDescriptorCollection
    /**
    Represents a collection of  objects.

    */
open class EventDescriptorCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_EventDescriptorCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.EventDescriptorCollection Empty
    /**
    Specifies an empty collection to use, rather than creating a new one with no items. This  field is read-only.

    */
    open class var Empty : dotnet.System.ComponentModel.EventDescriptorCollection {
        get {
        let __return = dotnet.System.ComponentModel.EventDescriptorCollection(hndl: System_ComponentModel_EventDescriptorCollection_get_Empty());
            return __return;
        }
    }
    // .ctor(System.ComponentModel.EventDescriptor[])
// docid: M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])
    /**
    Initializes a new instance of the  class with the given array of  objects.

    - Parameter events: An array of type  that provides the events for this collection.
    */
    public init(events : Optional<dotnet.System_Arr<dotnet.System.ComponentModel.EventDescriptor>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_EventDescriptorCollection_ctor_0__1__EventDescriptorArray(&__thrown, (events?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.EventDescriptor[], bool)
// docid: M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)
    /**
    Initializes a new instance of the  class with the given array of  objects. The collection is optionally read-only.

    - Parameter events: An array of type  that provides the events for this collection.
    - Parameter readOnly: 
         to specify a read-only collection; otherwise, .
    */
    public init(events : Optional<dotnet.System_Arr<dotnet.System.ComponentModel.EventDescriptor>>, readOnly : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_EventDescriptorCollection_ctor_0__2__EventDescriptorArray_bool(&__thrown, (events?.get_handle()), Swift.Int32(readOnly ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)
    /**
    Adds an  to the end of the collection.

    - Parameter value: An  to add to the collection.
    - Returns: The position of the  within the collection.

    */
    open func Add(value : Optional<dotnet.System.ComponentModel.EventDescriptor>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_i32__Add_0__1__EventDescriptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Clear()
// docid: M:System.ComponentModel.EventDescriptorCollection.Clear
    /**
    Removes all objects from the collection.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventDescriptorCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)
    /**
    Returns whether the collection contains the given .

    - Parameter value: The  to find within the collection.
    - Returns: 
         if the collection contains the  parameter given; otherwise, .

    */
    open func Contains(value : Optional<dotnet.System.ComponentModel.EventDescriptor>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_bool__Contains_0__1__EventDescriptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.EventDescriptor Find(System.String, bool)
// docid: M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)
    /**
    Gets the description of the event with the specified name in the collection.

    - Parameter name: The name of the event to get from the collection.
    - Parameter ignoreCase: 
         if you want to ignore the case of the event; otherwise, .
    - Returns: The  with the specified name, or  if the event does not exist.

    */
    open func Find(name : dotnet.System.String, ignoreCase : Bool) throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_EventDescriptor__Find_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.ComponentModel.EventDescriptorCollection.GetEnumerator
    /**
    Gets an enumerator for this .

    - Returns: An enumerator that implements .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)
    /**
    Returns the index of the given .

    - Parameter value: The  to find within the collection.
    - Returns: The index of the given  within the collection.

    */
    open func IndexOf(value : Optional<dotnet.System.ComponentModel.EventDescriptor>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_i32__IndexOf_0__1__EventDescriptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)
    /**
    Inserts an  to the collection at a specified index.

    - Parameter index: The index within the collection in which to insert the  parameter.
    - Parameter value: An  to insert into the collection.
    */
    open func Insert(index : Swift.Int32, value : Optional<dotnet.System.ComponentModel.EventDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventDescriptorCollection_void__Insert_0__2__i32_EventDescriptor(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)
    /**
    Removes the specified  from the collection.

    - Parameter value: The  to remove from the collection.
    */
    open func Remove(value : Optional<dotnet.System.ComponentModel.EventDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventDescriptorCollection_void__Remove_0__1__EventDescriptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)
    /**
    Removes the  at the specified index from the collection.

    - Parameter index: The index of the  to remove.
    */
    open func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_EventDescriptorCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.EventDescriptorCollection Sort()
// docid: M:System.ComponentModel.EventDescriptorCollection.Sort
    /**
    Sorts the members of this , using the default sort for this collection, which is usually alphabetical.

    - Returns: The new .

    */
    open func Sort() throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_EventDescriptorCollection__Sort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection Sort(System.Collections.IComparer)
// docid: M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)
    /**
    Sorts the members of this , using the specified .

    - Parameter comparer: An  to use to sort the  objects in this collection.
    - Returns: The new .

    */
    open func Sort(comparer : dotnet.System.Collections.IComparer) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_EventDescriptorCollection__Sort_0__1__IComparer(&__thrown, self.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection Sort(System.String[])
// docid: M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])
    /**
    Sorts the members of this , given a specified sort order.

    - Parameter names: An array of strings describing the order in which to sort the  objects in the collection.
    - Returns: The new .

    */
    open func Sort(names : dotnet.System_Arr<dotnet.System.String>) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_EventDescriptorCollection__Sort_0__1__StringArray(&__thrown, self.get_handle(), names.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection Sort(System.String[], System.Collections.IComparer)
// docid: M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
    /**
    Sorts the members of this , given a specified sort order and an .

    - Parameter names: An array of strings describing the order in which to sort the  objects in the collection.
    - Parameter comparer: An  to use to sort the  objects in this collection.
    - Returns: The new .

    */
    open func Sort(names : dotnet.System_Arr<dotnet.System.String>, comparer : dotnet.System.Collections.IComparer) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_EventDescriptorCollection__Sort_0__2__StringArray_IComparer(&__thrown, self.get_handle(), names.get_handle(), comparer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.ComponentModel.EventDescriptorCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.ComponentModel.EventDescriptor get_Item(System.Int32)
// docid: M:System.ComponentModel.EventDescriptorCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_EventDescriptor__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.EventDescriptor get_Item(System.String)
// docid: M:System.ComponentModel.EventDescriptorCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_EventDescriptorCollection_EventDescriptor__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of event descriptors in the collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // EventDescriptorCollection


// type: System.ComponentModel.ExpandableObjectConverter
    /**
    Provides a type converter to convert expandable objects to and from various other representations.

    */
open class ExpandableObjectConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ExpandableObjectConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.ExpandableObjectConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ExpandableObjectConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Gets a collection of properties for the type of object specified by the value parameter.

    - Parameter context: An  that provides a format context.
    - Parameter value: An  that specifies the type of object to get the properties for.
    - Parameter attributes: An array of type  that will be used as a filter.
    - Returns: A  with the properties that are exposed for the component, or  if there are no properties.

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ExpandableObjectConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether this object supports properties using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because  should be called to find the properties of this object. This method never returns .

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ExpandableObjectConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ExpandableObjectConverter


// type: System.ComponentModel.ExtenderProvidedPropertyAttribute
    /**
    Specifies a property that is offered by an extender provider. This class cannot be inherited.

    */
public final class ExtenderProvidedPropertyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ExtenderProvidedPropertyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ExtenderProvidedPropertyAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)
    /**
    Returns a value that indicates whether this instance is equal to a specified object.

    - Parameter obj: An  to compare with this instance or a null reference ( in Visual Basic).
    - Returns: 
         if  equals the type and value of this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ExtenderProvidedPropertyAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ExtenderProvidedPropertyAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute
    /**
    Provides an indication whether the value of this instance is the default value for the derived class.

    - Returns: 
         if this instance is the default attribute for the class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ExtenderProvidedPropertyAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptor get_ExtenderProperty()
// docid: M:System.ComponentModel.ExtenderProvidedPropertyAttribute.get_ExtenderProperty
    public func get_ExtenderProperty() throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ExtenderProvidedPropertyAttribute_PropertyDescriptor__get_ExtenderProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.IExtenderProvider get_Provider()
// docid: M:System.ComponentModel.ExtenderProvidedPropertyAttribute.get_Provider
    public func get_Provider() throws -> Optional<dotnet.System.ComponentModel.IExtenderProvider> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ExtenderProvidedPropertyAttribute_IExtenderProvider__get_Provider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IExtenderProvider(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_ReceiverType()
// docid: M:System.ComponentModel.ExtenderProvidedPropertyAttribute.get_ReceiverType
    public func get_ReceiverType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ExtenderProvidedPropertyAttribute_Type__get_ReceiverType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the property that is being provided.

    */
    public var ExtenderProperty : Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        get {
            return try! get_ExtenderProperty();
        }
    }
    /**
    Gets the extender provider that is providing the property.

    */
    public var Provider : Optional<dotnet.System.ComponentModel.IExtenderProvider> {
        get {
            return try! get_Provider();
        }
    }
    /**
    Gets the type of object that can receive the property.

    */
    public var ReceiverType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ReceiverType();
        }
    }
} // ExtenderProvidedPropertyAttribute


// type: System.ComponentModel.GuidConverter
    /**
    Provides a type converter to convert  objects to and from various other representations.

    */
open class GuidConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_GuidConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.GuidConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_GuidConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you wish to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_GuidConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you wish to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_GuidConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to a GUID object.

    - Parameter context: An  that provides a format context.
    - Parameter culture: An optional . If not supplied, the current culture is assumed.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted .

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_GuidConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given object to another type.

    - Parameter context: A formatter context.
    - Parameter culture: The culture into which  will be converted.
    - Parameter value: The object to convert.
    - Parameter destinationType: The type to convert the object to.
    - Returns: The converted object.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_GuidConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // GuidConverter


// type: System.ComponentModel.HandledEventArgs
    /**
    Provides data for events that can be handled completely in an event handler.

    */
open class HandledEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_HandledEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.HandledEventArgs.#ctor
    /**
    Initializes a new instance of the  class with a default  property value of .

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_HandledEventArgs_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class with the specified default value for the  property.

    - Parameter defaultHandledValue: The default value for the  property.
    */
    public init(defaultHandledValue : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_HandledEventArgs_ctor_0__1__bool(&__thrown, Swift.Int32(defaultHandledValue ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Handled()
// docid: M:System.ComponentModel.HandledEventArgs.get_Handled
    open func get_Handled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_HandledEventArgs_bool__get_Handled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Handled(bool)
// docid: M:System.ComponentModel.HandledEventArgs.set_Handled(System.Boolean)
    open func set_Handled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_HandledEventArgs_void__set_Handled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.

    */
    open var Handled : Bool {
        get {
            return try! get_Handled();
        }
        set(v) {
            return try! set_Handled(value: v);
        }
    }
} // HandledEventArgs


// type: System.ComponentModel.HandledEventHandler
    /**
    Represents a method that can handle events which may or may not require further processing after the event handler has returned.

    */
public final class HandledEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_HandledEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.HandledEventArgs)
// docid: M:System.ComponentModel.HandledEventHandler.Invoke(System.Object,System.ComponentModel.HandledEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.HandledEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_HandledEventHandler_void__Invoke_0__2__Object_HandledEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.HandledEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.HandledEventHandler.BeginInvoke(System.Object,System.ComponentModel.HandledEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.HandledEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_HandledEventHandler_IAsyncResult__BeginInvoke_0__4__Object_HandledEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.HandledEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_HandledEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.HandledEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.HandledEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_HandledEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.HandledEventArgs)
// docid: M:System.ComponentModel.HandledEventHandler.Invoke(System.Object,System.ComponentModel.HandledEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.HandledEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_HandledEventHandler_void__Invoke_0__2__Object_HandledEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // HandledEventHandler


// type: System.ComponentModel.IBindingList
    /**
    Provides the features required to support both complex and simple scenarios when binding to a data source.

    */
open class IBindingList
    :
    SGBridgeGenericValue,
    System_ComponentModel_IBindingList,
    System_Collections_IList
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IBindingList_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddIndex(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)
    /**
    Adds the  to the indexes used for searching.

    - Parameter property: The  to add to the indexes used for searching.
    */
    open func AddIndex(property : dotnet.System.ComponentModel.PropertyDescriptor) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingList_void__AddIndex_0__1__PropertyDescriptor(&__thrown, self.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object AddNew()
// docid: M:System.ComponentModel.IBindingList.AddNew
    /**
    Adds a new item to the list.

    - Returns: The item added to the list.

    */
    open func AddNew() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_Object__AddNew_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)
// docid: M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
    /**
    Sorts the list based on a  and a .

    - Parameter property: The  to sort by.
    - Parameter direction: One of the  values.
    */
    open func ApplySort(property : dotnet.System.ComponentModel.PropertyDescriptor, direction : dotnet.System.ComponentModel.ListSortDirection) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingList_void__ApplySort_0__2__PropertyDescriptor_ListSortDirection(&__thrown, self.get_handle(), property.get_handle(), direction.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 Find(System.ComponentModel.PropertyDescriptor, System.Object)
// docid: M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)
    /**
    Returns the index of the row that has the given .

    - Parameter property: The  to search on.
    - Parameter key: The value of the  parameter to search for.
    - Returns: The index of the row that has the given .

    */
    open func Find(property : dotnet.System.ComponentModel.PropertyDescriptor, key : dotnet.System.Object) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_i32__Find_0__2__PropertyDescriptor_Object(&__thrown, self.get_handle(), property.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void RemoveIndex(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)
    /**
    Removes the  from the indexes used for searching.

    - Parameter property: The  to remove from the indexes used for searching.
    */
    open func RemoveIndex(property : dotnet.System.ComponentModel.PropertyDescriptor) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingList_void__RemoveIndex_0__1__PropertyDescriptor(&__thrown, self.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveSort()
// docid: M:System.ComponentModel.IBindingList.RemoveSort
    /**
    Removes any sort applied using .

    */
    open func RemoveSort() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingList_void__RemoveSort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AllowEdit()
// docid: M:System.ComponentModel.IBindingList.get_AllowEdit
    open func get_AllowEdit() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_bool__get_AllowEdit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowNew()
// docid: M:System.ComponentModel.IBindingList.get_AllowNew
    open func get_AllowNew() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_bool__get_AllowNew_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowRemove()
// docid: M:System.ComponentModel.IBindingList.get_AllowRemove
    open func get_AllowRemove() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_bool__get_AllowRemove_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsSorted()
// docid: M:System.ComponentModel.IBindingList.get_IsSorted
    open func get_IsSorted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_bool__get_IsSorted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.ListSortDirection get_SortDirection()
// docid: M:System.ComponentModel.IBindingList.get_SortDirection
    open func get_SortDirection() throws -> dotnet.System.ComponentModel.ListSortDirection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_ListSortDirection__get_SortDirection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ListSortDirection(val: __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptor get_SortProperty()
// docid: M:System.ComponentModel.IBindingList.get_SortProperty
    open func get_SortProperty() throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_PropertyDescriptor__get_SortProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_SupportsChangeNotification()
// docid: M:System.ComponentModel.IBindingList.get_SupportsChangeNotification
    open func get_SupportsChangeNotification() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_bool__get_SupportsChangeNotification_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_SupportsSearching()
// docid: M:System.ComponentModel.IBindingList.get_SupportsSearching
    open func get_SupportsSearching() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_bool__get_SupportsSearching_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_SupportsSorting()
// docid: M:System.ComponentModel.IBindingList.get_SupportsSorting
    open func get_SupportsSorting() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingList_bool__get_SupportsSorting_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void add_ListChanged(System.ComponentModel.ListChangedEventHandler)
// docid: M:System.ComponentModel.IBindingList.add_ListChanged(System.ComponentModel.ListChangedEventHandler)
    open func add_ListChanged(value : dotnet.System.ComponentModel.ListChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingList_void__add_ListChanged_0__1__ListChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ListChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ListChangedEventHandler(value);
        return try add_ListChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ListChanged(System.ComponentModel.ListChangedEventHandler)
// docid: M:System.ComponentModel.IBindingList.remove_ListChanged(System.ComponentModel.ListChangedEventHandler)
    open func remove_ListChanged(value : dotnet.System.ComponentModel.ListChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingList_void__remove_ListChanged_0__1__ListChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ListChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.ListChangedEventHandler(value);
        return try remove_ListChanged(value: del_value);
    }
} // IBindingList


// type: System.ComponentModel.IBindingListView
    /**
    Extends the  interface by providing advanced sorting and filtering capabilities.

    */
open class IBindingListView
    :
    SGBridgeGenericValue,
    System_ComponentModel_IBindingListView,
    System_ComponentModel_IBindingList
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IBindingListView_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void ApplySort(System.ComponentModel.ListSortDescriptionCollection)
// docid: M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)
    /**
    Sorts the data source based on the given .

    - Parameter sorts: The  containing the sorts to apply to the data source.
    */
    open func ApplySort(sorts : dotnet.System.ComponentModel.ListSortDescriptionCollection) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingListView_void__ApplySort_0__1__ListSortDescriptionCollection(&__thrown, self.get_handle(), sorts.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveFilter()
// docid: M:System.ComponentModel.IBindingListView.RemoveFilter
    /**
    Removes the current filter applied to the data source.

    */
    open func RemoveFilter() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingListView_void__RemoveFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Filter()
// docid: M:System.ComponentModel.IBindingListView.get_Filter
    open func get_Filter() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingListView_String__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Filter(System.String)
// docid: M:System.ComponentModel.IBindingListView.set_Filter(System.String)
    open func set_Filter(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_IBindingListView_void__set_Filter_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ListSortDescriptionCollection get_SortDescriptions()
// docid: M:System.ComponentModel.IBindingListView.get_SortDescriptions
    open func get_SortDescriptions() throws -> dotnet.System.ComponentModel.ListSortDescriptionCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingListView_ListSortDescriptionCollection__get_SortDescriptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ListSortDescriptionCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_SupportsAdvancedSorting()
// docid: M:System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting
    open func get_SupportsAdvancedSorting() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingListView_bool__get_SupportsAdvancedSorting_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_SupportsFiltering()
// docid: M:System.ComponentModel.IBindingListView.get_SupportsFiltering
    open func get_SupportsFiltering() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IBindingListView_bool__get_SupportsFiltering_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IBindingListView


// type: System.ComponentModel.ICancelAddNew
    /**
    Adds transactional capability when adding a new item to a collection.

    */
open class ICancelAddNew
    :
    SGBridgeGenericValue,
    System_ComponentModel_ICancelAddNew
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ICancelAddNew_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void CancelNew(System.Int32)
// docid: M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)
    /**
    Discards a pending new item from the collection.

    - Parameter itemIndex: The index of the item that was previously added to the collection.
    */
    open func CancelNew(itemIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ICancelAddNew_void__CancelNew_0__1__i32(&__thrown, self.get_handle(), itemIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndNew(System.Int32)
// docid: M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)
    /**
    Commits a pending new item to the collection.

    - Parameter itemIndex: The index of the item that was previously added to the collection.
    */
    open func EndNew(itemIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ICancelAddNew_void__EndNew_0__1__i32(&__thrown, self.get_handle(), itemIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ICancelAddNew


// type: System.ComponentModel.IComNativeDescriptorHandler
    /**
    Provides a top-level mapping layer between a COM object and a .

    */
open class IComNativeDescriptorHandler
    :
    SGBridgeGenericValue,
    System_ComponentModel_IComNativeDescriptorHandler
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IComNativeDescriptorHandler_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.ComponentModel.AttributeCollection GetAttributes(System.Object)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)
    /**
    Gets the attributes for the specified component.

    - Parameter component: The component to get attributes for.
    - Returns: A collection of attributes for .

    */
    open func GetAttributes(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.AttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_AttributeCollection__GetAttributes_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AttributeCollection(hndl : __return);
        }
    }
    // System.String GetClassName(System.Object)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)
    /**
    Gets the class name for the specified component.

    - Parameter component: The component to get the class name for.
    - Returns: The name of the class that corresponds with .

    */
    open func GetClassName(component : dotnet.System.Object) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_String__GetClassName_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.ComponentModel.TypeConverter GetConverter(System.Object)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)
    /**
    Gets the type converter for the specified component.

    - Parameter component: The component to get the  for.
    - Returns: The  for .

    */
    open func GetConverter(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.TypeConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_TypeConverter__GetConverter_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptor GetDefaultEvent(System.Object)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)
    /**
    Gets the default event for the specified component.

    - Parameter component: The component to get the default event for.
    - Returns: An  that represents 's default event.

    */
    open func GetDefaultEvent(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.EventDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_EventDescriptor__GetDefaultEvent_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptor(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptor GetDefaultProperty(System.Object)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)
    /**
    Gets the default property for the specified component.

    - Parameter component: The component to get the default property for.
    - Returns: A  that represents 's default property.

    */
    open func GetDefaultProperty(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.PropertyDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_PropertyDescriptor__GetDefaultProperty_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __return);
        }
    }
    // System.Object GetEditor(System.Object, System.Type)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)
    /**
    Gets the editor for the specified component.

    - Parameter component: The component to get the editor for.
    - Parameter baseEditorType: The base type of the editor for .
    - Returns: The editor for .

    */
    open func GetEditor(component : dotnet.System.Object, baseEditorType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_Object__GetEditor_0__2__Object_Type(&__thrown, self.get_handle(), component.get_handle(), baseEditorType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Object)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)
    /**
    Gets the events for the specified component.

    - Parameter component: The component to get events for.
    - Returns: A collection of event descriptors for .

    */
    open func GetEvents(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_EventDescriptorCollection__GetEvents_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Object, System.Attribute[])
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])
    /**
    Gets the events with the specified attributes for the specified component.

    - Parameter component: The component to get events for.
    - Parameter attributes: The attributes used to filter events.
    - Returns: A collection of event descriptors for .

    */
    open func GetEvents(component : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_EventDescriptorCollection__GetEvents_0__2__Object_AttributeArray(&__thrown, self.get_handle(), component.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.String GetName(System.Object)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)
    /**
    Gets the name of the specified component.

    - Parameter component: The component to get the name of.
    - Returns: The name of .

    */
    open func GetName(component : dotnet.System.Object) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_String__GetName_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Object, System.Attribute[])
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])
    /**
    Gets the properties with the specified attributes for the specified component.

    - Parameter component: The component to get events for.
    - Parameter attributes: The attributes used to filter properties.
    - Returns: A collection of property descriptors for .

    */
    open func GetProperties(component : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IComNativeDescriptorHandler_PropertyDescriptorCollection__GetProperties_0__2__Object_AttributeArray(&__thrown, self.get_handle(), component.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.Object GetPropertyValue(System.Object, System.Int32, ref bool)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)
    /**
    Gets the value of the property that has the specified dispatch identifier.

    - Parameter component: The object to which the property belongs.
    - Parameter dispid: The dispatch identifier.
    - Parameter success: A , passed by reference, that represents whether the property was retrieved.
    - Returns: The value of the property that has the specified dispatch identifier.

    */
    open func GetPropertyValue(component : dotnet.System.Object, dispid : Swift.Int32, success : inout Bool) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_success = Swift.Int32(success ? 1 : 0);
        let __return = System_ComponentModel_IComNativeDescriptorHandler_Object__GetPropertyValue_0__3__Object_i32_refbool(&__thrown, self.get_handle(), component.get_handle(), dispid, &_tmp_ref_success);
        let _tmp2_success = (_tmp_ref_success) != 0;
            success = _tmp2_success;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object GetPropertyValue(System.Object, System.String, ref bool)
// docid: M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)
    /**
    Gets the value of the property that has the specified name.

    - Parameter component: The object to which the property belongs.
    - Parameter propertyName: The name of the property.
    - Parameter success: A , passed by reference, that represents whether the property was retrieved.
    - Returns: The value of the property that has the specified name.

    */
    open func GetPropertyValue(component : dotnet.System.Object, propertyName : dotnet.System.String, success : inout Bool) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_success = Swift.Int32(success ? 1 : 0);
        let __return = System_ComponentModel_IComNativeDescriptorHandler_Object__GetPropertyValue_0__3__Object_String_refbool(&__thrown, self.get_handle(), component.get_handle(), propertyName.get_handle(), &_tmp_ref_success);
        let _tmp2_success = (_tmp_ref_success) != 0;
            success = _tmp2_success;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // IComNativeDescriptorHandler


// type: System.ComponentModel.ICustomTypeDescriptor
    /**
    Provides an interface that supplies dynamic custom type information for an object.

    */
open class ICustomTypeDescriptor
    :
    SGBridgeGenericValue,
    System_ComponentModel_ICustomTypeDescriptor
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ICustomTypeDescriptor_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.ComponentModel.AttributeCollection GetAttributes()
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes
    /**
    Returns a collection of custom attributes for this instance of a component.

    - Returns: An  containing the attributes for this object.

    */
    open func GetAttributes() throws -> dotnet.System.ComponentModel.AttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_AttributeCollection__GetAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AttributeCollection(hndl : __return);
        }
    }
    // System.String GetClassName()
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetClassName
    /**
    Returns the class name of this instance of a component.

    - Returns: The class name of the object, or  if the class does not have a name.

    */
    open func GetClassName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_String__GetClassName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetComponentName()
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName
    /**
    Returns the name of this instance of a component.

    - Returns: The name of the object, or  if the object does not have a name.

    */
    open func GetComponentName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_String__GetComponentName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter GetConverter()
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetConverter
    /**
    Returns a type converter for this instance of a component.

    - Returns: A  that is the converter for this object, or  if there is no  for this object.

    */
    open func GetConverter() throws -> dotnet.System.ComponentModel.TypeConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_TypeConverter__GetConverter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptor GetDefaultEvent()
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent
    /**
    Returns the default event for this instance of a component.

    - Returns: An  that represents the default event for this object, or  if this object does not have events.

    */
    open func GetDefaultEvent() throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_EventDescriptor__GetDefaultEvent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptor GetDefaultProperty()
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty
    /**
    Returns the default property for this instance of a component.

    - Returns: A  that represents the default property for this object, or  if this object does not have properties.

    */
    open func GetDefaultProperty() throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_PropertyDescriptor__GetDefaultProperty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetEditor(System.Type)
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)
    /**
    Returns an editor of the specified type for this instance of a component.

    - Parameter editorBaseType: A  that represents the editor for this object.
    - Returns: An  of the specified type that is the editor for this object, or  if the editor cannot be found.

    */
    open func GetEditor(editorBaseType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_Object__GetEditor_0__1__Type(&__thrown, self.get_handle(), editorBaseType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents()
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetEvents
    /**
    Returns the events for this instance of a component.

    - Returns: An  that represents the events for this component instance.

    */
    open func GetEvents() throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_EventDescriptorCollection__GetEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Attribute[])
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])
    /**
    Returns the events for this instance of a component using the specified attribute array as a filter.

    - Parameter attributes: An array of type  that is used as a filter.
    - Returns: An  that represents the filtered events for this component instance.

    */
    open func GetEvents(attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_EventDescriptorCollection__GetEvents_0__1__AttributeArray(&__thrown, self.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties()
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetProperties
    /**
    Returns the properties for this instance of a component.

    - Returns: A  that represents the properties for this component instance.

    */
    open func GetProperties() throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_PropertyDescriptorCollection__GetProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Attribute[])
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])
    /**
    Returns the properties for this instance of a component using the attribute array as a filter.

    - Parameter attributes: An array of type  that is used as a filter.
    - Returns: A  that represents the filtered properties for this component instance.

    */
    open func GetProperties(attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_PropertyDescriptorCollection__GetProperties_0__1__AttributeArray(&__thrown, self.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.Object GetPropertyOwner(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)
    /**
    Returns an object that contains the property described by the specified property descriptor.

    - Parameter pd: A  that represents the property whose owner is to be found.
    - Returns: An  that represents the owner of the specified property.

    */
    open func GetPropertyOwner(pd : Optional<dotnet.System.ComponentModel.PropertyDescriptor>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ICustomTypeDescriptor_Object__GetPropertyOwner_0__1__PropertyDescriptor(&__thrown, self.get_handle(), pd?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ICustomTypeDescriptor


// type: System.ComponentModel.IDataErrorInfo
    /**
    Provides the functionality to offer custom error information that a user interface can bind to.

    */
open class IDataErrorInfo
    :
    SGBridgeGenericValue,
    System_ComponentModel_IDataErrorInfo
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IDataErrorInfo_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_Error()
// docid: M:System.ComponentModel.IDataErrorInfo.get_Error
    open func get_Error() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IDataErrorInfo_String__get_Error_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Item(System.String)
// docid: M:System.ComponentModel.IDataErrorInfo.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(columnName : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IDataErrorInfo_String__get_Item_0__1__String(&__thrown, self.get_handle(), columnName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // IDataErrorInfo


// type: System.ComponentModel.IExtenderProvider
    /**
    Defines the interface for extending properties to other components in a container.

    */
open class IExtenderProvider
    :
    SGBridgeGenericValue,
    System_ComponentModel_IExtenderProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IExtenderProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool CanExtend(System.Object)
// docid: M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)
    /**
    Specifies whether this object can provide its extender properties to the specified object.

    - Parameter extendee: The  to receive the extender properties.
    - Returns: 
         if this object can provide extender properties to the specified object; otherwise, .

    */
    open func CanExtend(extendee : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IExtenderProvider_bool__CanExtend_0__1__Object(&__thrown, self.get_handle(), extendee.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IExtenderProvider


// type: System.ComponentModel.IIntellisenseBuilder
    /**
    Provides an interface to facilitate the retrieval of the builder's name and to display the builder.

    */
open class IIntellisenseBuilder
    :
    SGBridgeGenericValue,
    System_ComponentModel_IIntellisenseBuilder
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IIntellisenseBuilder_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool Show(System.String, System.String, ref System.String)
// docid: M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)
    /**
    Shows the builder.

    - Parameter language: The language service that is calling the builder.
    - Parameter value: The expression being edited.
    - Parameter newValue: The new value.
    - Returns: 
         if the value should be replaced with ; otherwise,  (if the user cancels, for example).

    */
    open func Show(language : dotnet.System.String, value : dotnet.System.String, newValue : inout dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_ref_newValue = newValue.get_handle();
        let __return = System_ComponentModel_IIntellisenseBuilder_bool__Show_0__3__String_String_refString(&__thrown, self.get_handle(), language.get_handle(), value.get_handle(), &_tmp_ref_newValue);
        let _tmp2_newValue = dotnet.System.String(hndl: _tmp_ref_newValue);
            newValue = _tmp2_newValue;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.IIntellisenseBuilder.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IIntellisenseBuilder_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // IIntellisenseBuilder


// type: System.ComponentModel.IListSource
    /**
    Provides functionality to an object to return a list that can be bound to a data source.

    */
open class IListSource
    :
    SGBridgeGenericValue,
    System_ComponentModel_IListSource
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IListSource_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.IList GetList()
// docid: M:System.ComponentModel.IListSource.GetList
    /**
    Returns an  that can be bound to a data source from an object that does not implement an  itself.

    - Returns: An  that can be bound to a data source from the object.

    */
    open func GetList() throws -> dotnet.System.Collections.IList {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IListSource_IList__GetList_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IList(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_ContainsListCollection()
// docid: M:System.ComponentModel.IListSource.get_ContainsListCollection
    open func get_ContainsListCollection() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IListSource_bool__get_ContainsListCollection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IListSource


// type: System.ComponentModel.INestedContainer
    /**
    Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.

    */
open class INestedContainer
    :
    SGBridgeGenericValue,
    System_ComponentModel_INestedContainer,
    System_ComponentModel_IContainer
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_INestedContainer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.ComponentModel.IComponent get_Owner()
// docid: M:System.ComponentModel.INestedContainer.get_Owner
    open func get_Owner() throws -> dotnet.System.ComponentModel.IComponent {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_INestedContainer_IComponent__get_Owner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IComponent(hndl : __return);
        }
    }
} // INestedContainer


// type: System.ComponentModel.INestedSite
    /**
    Provides the ability to retrieve the full nested name of a component.

    */
open class INestedSite
    :
    SGBridgeGenericValue,
    System_ComponentModel_INestedSite,
    System_ComponentModel_ISite
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_INestedSite_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.String get_FullName()
// docid: M:System.ComponentModel.INestedSite.get_FullName
    open func get_FullName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_INestedSite_String__get_FullName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // INestedSite


// type: System.ComponentModel.IRaiseItemChangedEvents
    /**
    Indicates whether a class converts property change events to  events.

    */
open class IRaiseItemChangedEvents
    :
    SGBridgeGenericValue,
    System_ComponentModel_IRaiseItemChangedEvents
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_IRaiseItemChangedEvents_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_RaisesItemChangedEvents()
// docid: M:System.ComponentModel.IRaiseItemChangedEvents.get_RaisesItemChangedEvents
    open func get_RaisesItemChangedEvents() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_IRaiseItemChangedEvents_bool__get_RaisesItemChangedEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IRaiseItemChangedEvents


// type: System.ComponentModel.ISupportInitializeNotification
    /**
    Allows coordination of initialization for a component and its dependent properties.

    */
open class ISupportInitializeNotification
    :
    SGBridgeGenericValue,
    System_ComponentModel_ISupportInitializeNotification,
    System_ComponentModel_ISupportInitialize
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ISupportInitializeNotification_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_IsInitialized()
// docid: M:System.ComponentModel.ISupportInitializeNotification.get_IsInitialized
    open func get_IsInitialized() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ISupportInitializeNotification_bool__get_IsInitialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void add_Initialized(System.EventHandler)
// docid: M:System.ComponentModel.ISupportInitializeNotification.add_Initialized(System.EventHandler)
    open func add_Initialized(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ISupportInitializeNotification_void__add_Initialized_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Initialized(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Initialized(value: del_value);
    }
    // [IsSpecialName] void remove_Initialized(System.EventHandler)
// docid: M:System.ComponentModel.ISupportInitializeNotification.remove_Initialized(System.EventHandler)
    open func remove_Initialized(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ISupportInitializeNotification_void__remove_Initialized_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Initialized(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Initialized(value: del_value);
    }
} // ISupportInitializeNotification


// type: System.ComponentModel.ITypeDescriptorContext
    /**
    Provides contextual information about a component, such as its container and property descriptor.

    */
open class ITypeDescriptorContext
    :
    SGBridgeGenericValue,
    System_ComponentModel_ITypeDescriptorContext,
    System_IServiceProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ITypeDescriptorContext_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnComponentChanged()
// docid: M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged
    /**
    Raises the  event.

    */
    open func OnComponentChanged() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ITypeDescriptorContext_void__OnComponentChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool OnComponentChanging()
// docid: M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging
    /**
    Raises the  event.

    - Returns: 
         if this object can be changed; otherwise, .

    */
    open func OnComponentChanging() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ITypeDescriptorContext_bool__OnComponentChanging_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.IContainer get_Container()
// docid: M:System.ComponentModel.ITypeDescriptorContext.get_Container
    open func get_Container() throws -> dotnet.System.ComponentModel.IContainer {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ITypeDescriptorContext_IContainer__get_Container_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IContainer(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Instance()
// docid: M:System.ComponentModel.ITypeDescriptorContext.get_Instance
    open func get_Instance() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ITypeDescriptorContext_Object__get_Instance_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptor get_PropertyDescriptor()
// docid: M:System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor
    open func get_PropertyDescriptor() throws -> dotnet.System.ComponentModel.PropertyDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ITypeDescriptorContext_PropertyDescriptor__get_PropertyDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __return);
        }
    }
} // ITypeDescriptorContext


// type: System.ComponentModel.ITypedList
    /**
    Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.

    */
open class ITypedList
    :
    SGBridgeGenericValue,
    System_ComponentModel_ITypedList
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ITypedList_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.ComponentModel.PropertyDescriptorCollection GetItemProperties(System.ComponentModel.PropertyDescriptor[])
// docid: M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
    /**
    Returns the  that represents the properties on each item used to bind data.

    - Parameter listAccessors: An array of  objects to find in the collection as bindable. This can be .
    - Returns: The  that represents the properties on each item used to bind data.

    */
    open func GetItemProperties(listAccessors : dotnet.System_Arr<dotnet.System.ComponentModel.PropertyDescriptor>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ITypedList_PropertyDescriptorCollection__GetItemProperties_0__1__PropertyDescriptorArray(&__thrown, self.get_handle(), listAccessors.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.String GetListName(System.ComponentModel.PropertyDescriptor[])
// docid: M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
    /**
    Returns the name of the list.

    - Parameter listAccessors: An array of  objects, for which the list name is returned. This can be .
    - Returns: The name of the list.

    */
    open func GetListName(listAccessors : dotnet.System_Arr<dotnet.System.ComponentModel.PropertyDescriptor>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ITypedList_String__GetListName_0__1__PropertyDescriptorArray(&__thrown, self.get_handle(), listAccessors.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // ITypedList


// type: System.ComponentModel.InheritanceAttribute
    /**
    Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.

    */
public final class InheritanceAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_InheritanceAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.InheritanceAttribute Default
    /**
    Specifies that the default value for  is . This field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.InheritanceAttribute {
        get {
        let __return = dotnet.System.ComponentModel.InheritanceAttribute(hndl: System_ComponentModel_InheritanceAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.InheritanceAttribute Inherited
    /**
    Specifies that the component is inherited. This field is read-only.

    */
    public class var Inherited : dotnet.System.ComponentModel.InheritanceAttribute {
        get {
        let __return = dotnet.System.ComponentModel.InheritanceAttribute(hndl: System_ComponentModel_InheritanceAttribute_get_Inherited());
            return __return;
        }
    }
    // static field: System.ComponentModel.InheritanceAttribute InheritedReadOnly
    /**
    Specifies that the component is inherited and is read-only. This field is read-only.

    */
    public class var InheritedReadOnly : dotnet.System.ComponentModel.InheritanceAttribute {
        get {
        let __return = dotnet.System.ComponentModel.InheritanceAttribute(hndl: System_ComponentModel_InheritanceAttribute_get_InheritedReadOnly());
            return __return;
        }
    }
    // static field: System.ComponentModel.InheritanceAttribute NotInherited
    /**
    Specifies that the component is not inherited. This field is read-only.

    */
    public class var NotInherited : dotnet.System.ComponentModel.InheritanceAttribute {
        get {
        let __return = dotnet.System.ComponentModel.InheritanceAttribute(hndl: System_ComponentModel_InheritanceAttribute_get_NotInherited());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.InheritanceAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InheritanceAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.InheritanceLevel)
// docid: M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)
    /**
    Initializes a new instance of the  class with the specified inheritance level.

    - Parameter inheritanceLevel: An  that indicates the level of inheritance to set this attribute to.
    */
    public init(inheritanceLevel : dotnet.System.ComponentModel.InheritanceLevel) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InheritanceAttribute_ctor_0__1__InheritanceLevel(&__thrown, inheritanceLevel.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)
    /**
    Override to test for equality.

    - Parameter value: The object to test.
    - Returns: 
         if the object is the same; otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InheritanceAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.InheritanceAttribute.GetHashCode
    /**
    Returns the hashcode for this object.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InheritanceAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute
    /**
    Gets a value indicating whether the current value of the attribute is the default value for the attribute.

    - Returns: 
         if the current value of the attribute is the default; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InheritanceAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.InheritanceAttribute.ToString
    /**
    Converts this attribute to a string.

    - Returns: A string that represents this .

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InheritanceAttribute_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.InheritanceLevel get_InheritanceLevel()
// docid: M:System.ComponentModel.InheritanceAttribute.get_InheritanceLevel
    public func get_InheritanceLevel() throws -> dotnet.System.ComponentModel.InheritanceLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InheritanceAttribute_InheritanceLevel__get_InheritanceLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.InheritanceLevel(val: __return);
        }
    }
    /**
    Gets or sets the current inheritance level stored in this attribute.

    */
    public var InheritanceLevel : dotnet.System.ComponentModel.InheritanceLevel {
        get {
            return try! get_InheritanceLevel();
        }
    }
} // InheritanceAttribute


// type: System.ComponentModel.InheritanceLevel
    /**
    Defines identifiers for types of inheritance levels.

    */
public struct InheritanceLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_InheritanceLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.InheritanceLevel Inherited
    /**
    The object is inherited.

    */
    public static var Inherited : dotnet.System.ComponentModel.InheritanceLevel {
        get {
        let __return = dotnet.System.ComponentModel.InheritanceLevel(val: System_ComponentModel_InheritanceLevel_get_Inherited());
            return __return;
        }
    }
    // static field: System.ComponentModel.InheritanceLevel InheritedReadOnly
    /**
    The object is inherited, but has read-only access.

    */
    public static var InheritedReadOnly : dotnet.System.ComponentModel.InheritanceLevel {
        get {
        let __return = dotnet.System.ComponentModel.InheritanceLevel(val: System_ComponentModel_InheritanceLevel_get_InheritedReadOnly());
            return __return;
        }
    }
    // static field: System.ComponentModel.InheritanceLevel NotInherited
    /**
    The object is not inherited.

    */
    public static var NotInherited : dotnet.System.ComponentModel.InheritanceLevel {
        get {
        let __return = dotnet.System.ComponentModel.InheritanceLevel(val: System_ComponentModel_InheritanceLevel_get_NotInherited());
            return __return;
        }
    }
} // InheritanceLevel


// type: System.ComponentModel.InstallerTypeAttribute
    /**
    Specifies the installer for a type that installs components.

    */
open class InstallerTypeAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_InstallerTypeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the name of the component's installer type.

    - Parameter typeName: The name of a  that represents the installer for the component this attribute is bound to. This class must implement .
    */
    public init(typeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InstallerTypeAttribute_ctor_0__1__String(&__thrown, typeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class, when given a  that represents the installer for a component.

    - Parameter installerType: A  that represents the installer for the component this attribute is bound to. This class must implement .
    */
    public init(installerType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_InstallerTypeAttribute_ctor_0__1__Type(&__thrown, installerType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InstallerTypeAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.InstallerTypeAttribute.GetHashCode
    /**
    Returns the hashcode for this object.

    - Returns: A hash code for the current .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InstallerTypeAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_InstallerType()
// docid: M:System.ComponentModel.InstallerTypeAttribute.get_InstallerType
    open func get_InstallerType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InstallerTypeAttribute_Type__get_InstallerType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the type of installer associated with this attribute.

    */
    open var InstallerType : Optional<dotnet.System.Type_> {
        get {
            return try! get_InstallerType();
        }
    }
} // InstallerTypeAttribute


// type: System.ComponentModel.InstanceCreationEditor
    /**
    Creates an instance of a particular type of property from a drop-down box within the .

    */
open class InstanceCreationEditor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_InstanceCreationEditor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    When overridden in a derived class, returns an instance of the specified type.

    - Parameter context: The context information.
    - Parameter instanceType: The specified type.
    - Returns: An instance of the specified type or .

    */
    open func CreateInstance(context : dotnet.System.ComponentModel.ITypeDescriptorContext, instanceType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InstanceCreationEditor_Object__CreateInstance_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context.get_handle(), instanceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_Text()
// docid: M:System.ComponentModel.InstanceCreationEditor.get_Text
    open func get_Text() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_InstanceCreationEditor_String__get_Text_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the specified text.

    */
    open var Text : dotnet.System.String {
        get {
            return try! get_Text();
        }
    }
} // InstanceCreationEditor


// type: System.ComponentModel.Int16Converter
    /**
    Provides a type converter to convert 16-bit signed integer objects to and from other representations.

    */
open class Int16Converter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Int16Converter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Int16Converter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Int16Converter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // Int16Converter


// type: System.ComponentModel.Int32Converter
    /**
    Provides a type converter to convert 32-bit signed integer objects to and from other representations.

    */
open class Int32Converter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Int32Converter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Int32Converter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Int32Converter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // Int32Converter


// type: System.ComponentModel.Int64Converter
    /**
    Provides a type converter to convert 64-bit signed integer objects to and from various other representations.

    */
open class Int64Converter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Int64Converter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Int64Converter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Int64Converter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // Int64Converter


// type: System.ComponentModel.LicFileLicenseProvider
    /**
    Provides an implementation of a . The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.

    */
open class LicFileLicenseProvider
    :
    dotnet.System.ComponentModel.LicenseProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LicFileLicenseProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.LicFileLicenseProvider.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicFileLicenseProvider_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.ComponentModel.License GetLicense(System.ComponentModel.LicenseContext, System.Type, System.Object, bool)
// docid: M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
    /**
    Returns a license for the instance of the component, if one is available.

    - Parameter context: A  that specifies where you can use the licensed object.
    - Parameter type: A  that represents the component requesting the .
    - Parameter instance: An object that requests the .
    - Parameter allowExceptions: 
         if a  should be thrown when a component cannot be granted a license; otherwise, .
    - Returns: A valid . If this method cannot find a valid  or a valid  parameter, it returns .

    */
    open override func GetLicense(context : dotnet.System.ComponentModel.LicenseContext, type : dotnet.System.Type_, instance : Optional<dotnet.System.Object>, allowExceptions : Bool) throws -> Optional<dotnet.System.ComponentModel.License> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicFileLicenseProvider_License__GetLicense_0__4__LicenseContext_Type_Object_bool(&__thrown, self.get_handle(), context.get_handle(), type.get_handle(), instance?.get_handle() ?? nil, Swift.Int32(allowExceptions ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.License(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // LicFileLicenseProvider


// type: System.ComponentModel.License
    /**
    Provides the  base class for all licenses. A license is granted to a specific instance of a component.

    */
open class License
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_License_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:System.ComponentModel.License.Dispose
    /**
    When overridden in a derived class, disposes of the resources used by the license.

    */
    open func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_License_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LicenseKey()
// docid: M:System.ComponentModel.License.get_LicenseKey
    open func get_LicenseKey() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_License_String__get_LicenseKey_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    When overridden in a derived class, gets the license key granted to this component.

    */
    open var LicenseKey : dotnet.System.String {
        get {
            return try! get_LicenseKey();
        }
    }
} // License


// type: System.ComponentModel.LicenseContext
    /**
    Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.

    */
open class LicenseContext
    :
    dotnet.System.Object,
    System_IServiceProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LicenseContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.LicenseContext.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicenseContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetSavedLicenseKey(System.Type, System.Reflection.Assembly)
// docid: M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)
    /**
    When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.

    - Parameter type: A  that represents the type of component.
    - Parameter resourceAssembly: An  with the license key.
    - Returns: The  for the specified type. This method returns  unless you override it.

    */
    open func GetSavedLicenseKey(type : dotnet.System.Type_, resourceAssembly : Optional<dotnet.System.Reflection.Assembly>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseContext_String__GetSavedLicenseKey_0__2__Type_Assembly(&__thrown, self.get_handle(), type.get_handle(), resourceAssembly?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetService(System.Type)
// docid: M:System.ComponentModel.LicenseContext.GetService(System.Type)
    /**
    Gets the requested service, if it is available.

    - Parameter type: The type of service to retrieve.
    - Returns: An instance of the service, or  if the service cannot be found.

    */
    open func GetService(type : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseContext_Object__GetService_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetSavedLicenseKey(System.Type, System.String)
// docid: M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)
    /**
    When overridden in a derived class, sets a license key for the specified type.

    - Parameter type: A  that represents the component associated with the license key.
    - Parameter key: The  to save for the type of component.
    */
    open func SetSavedLicenseKey(type : dotnet.System.Type_, key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_LicenseContext_void__SetSavedLicenseKey_0__2__Type_String(&__thrown, self.get_handle(), type.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.LicenseUsageMode get_UsageMode()
// docid: M:System.ComponentModel.LicenseContext.get_UsageMode
    open func get_UsageMode() throws -> dotnet.System.ComponentModel.LicenseUsageMode {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseContext_LicenseUsageMode__get_UsageMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.LicenseUsageMode(val: __return);
        }
    }
    /**
    When overridden in a derived class, gets a value that specifies when you can use a license.

    */
    open var UsageMode : dotnet.System.ComponentModel.LicenseUsageMode {
        get {
            return try! get_UsageMode();
        }
    }
} // LicenseContext


// type: System.ComponentModel.LicenseException
    /**
    Represents the exception thrown when a component cannot be granted a license.

    */
open class LicenseException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LicenseException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.LicenseException.#ctor(System.Type)
    /**
    Initializes a new instance of the  class for the type of component that was denied a license.

    - Parameter type: A  that represents the type of component that was not granted a license.
    */
    public init(type : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicenseException_ctor_0__1__Type(&__thrown, type?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Object)
// docid: M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)
    /**
    Initializes a new instance of the  class for the type and the instance of the component that was denied a license.

    - Parameter type: A  that represents the type of component that was not granted a license.
    - Parameter instance: The instance of the component that was not granted a license.
    */
    public init(type : Optional<dotnet.System.Type_>, instance : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicenseException_ctor_0__2__Type_Object(&__thrown, type?.get_handle() ?? nil, instance?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Object, System.String)
// docid: M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)
    /**
    Initializes a new instance of the  class for the type and the instance of the component that was denied a license, along with a message to display.

    - Parameter type: A  that represents the type of component that was not granted a license.
    - Parameter instance: The instance of the component that was not granted a license.
    - Parameter message: The exception message to display.
    */
    public init(type : Optional<dotnet.System.Type_>, instance : Optional<dotnet.System.Object>, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicenseException_ctor_0__3__Type_Object_String(&__thrown, type?.get_handle() ?? nil, instance?.get_handle() ?? nil, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Object, System.String, System.Exception)
// docid: M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)
    /**
    Initializes a new instance of the  class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.

    - Parameter type: A  that represents the type of component that was not granted a license.
    - Parameter instance: The instance of the component that was not granted a license.
    - Parameter message: The exception message to display.
    - Parameter innerException: An  that represents the original exception.
    */
    public init(type : Optional<dotnet.System.Type_>, instance : Optional<dotnet.System.Object>, message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicenseException_ctor_0__4__Type_Object_String_Exception(&__thrown, type?.get_handle() ?? nil, instance?.get_handle() ?? nil, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Sets the  with information about the exception.

    - Parameter info: The  to be used for deserialization.
    - Parameter context: The destination to be used for deserialization.
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_LicenseException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_LicensedType()
// docid: M:System.ComponentModel.LicenseException.get_LicensedType
    open func get_LicensedType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseException_Type__get_LicensedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the type of the component that was not granted a license.

    */
    open var LicensedType : Optional<dotnet.System.Type_> {
        get {
            return try! get_LicensedType();
        }
    }
} // LicenseException


// type: System.ComponentModel.LicenseManager
    /**
    Provides properties and methods to add a license to a component and to manage a . This class cannot be inherited.

    */
public final class LicenseManager
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LicenseManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object CreateWithContext(System.Type, System.ComponentModel.LicenseContext)
// docid: M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
    /**
    Creates an instance of the specified type, given a context in which you can use the licensed instance.

    - Parameter type: A  that represents the type to create.
    - Parameter creationContext: A  that specifies when you can use the licensed instance.
    - Returns: An instance of the specified type.

    */
    public class func CreateWithContext(type : dotnet.System.Type_, creationContext : dotnet.System.ComponentModel.LicenseContext) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseManager_Object__CreateWithContext_0__2__Type_LicenseContext(&__thrown, type.get_handle(), creationContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object CreateWithContext(System.Type, System.ComponentModel.LicenseContext, System.Object[])
// docid: M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
    /**
    Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.

    - Parameter type: A  that represents the type to create.
    - Parameter creationContext: A  that specifies when you can use the licensed instance.
    - Parameter args: An array of type  that represents the arguments for the type.
    - Returns: An instance of the specified type with the given array of arguments.

    */
    public class func CreateWithContext(type : dotnet.System.Type_, creationContext : dotnet.System.ComponentModel.LicenseContext, args : dotnet.System_Arr<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseManager_Object__CreateWithContext_0__3__Type_LicenseContext_ObjectArray(&__thrown, type.get_handle(), creationContext.get_handle(), args.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsLicensed(System.Type)
// docid: M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)
    /**
    Returns whether the given type has a valid license.

    - Parameter type: The  to find a valid license for.
    - Returns: 
         if the given type is licensed; otherwise, .

    */
    public class func IsLicensed(type : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseManager_bool__IsLicensed_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValid(System.Type)
// docid: M:System.ComponentModel.LicenseManager.IsValid(System.Type)
    /**
    Determines whether a valid license can be granted for the specified type.

    - Parameter type: A  that represents the type of object that requests the .
    - Returns: 
         if a valid license can be granted; otherwise, .

    */
    public class func IsValid(type : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseManager_bool__IsValid_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValid(System.Type, System.Object, ref System.ComponentModel.License)
// docid: M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
    /**
    Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid .

    - Parameter type: A  that represents the type of object that requests the license.
    - Parameter instance: An object of the specified type or a type derived from the specified type.
    - Parameter license: A  that is a valid license, or  if a valid license cannot be granted.
    - Returns: 
         if a valid  can be granted; otherwise, .

    */
    public class func IsValid(type : dotnet.System.Type_, instance : Optional<dotnet.System.Object>, license : inout dotnet.System.ComponentModel.License) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_license = license.get_handle();
        let __return = System_ComponentModel_LicenseManager_bool__IsValid_0__3__Type_Object_outLicense(&__thrown, type.get_handle(), instance?.get_handle() ?? nil, &_tmp_out_license);
        let _tmp2_license = dotnet.System.ComponentModel.License(hndl: _tmp_out_license);
            license = _tmp2_license;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void LockContext(System.Object)
// docid: M:System.ComponentModel.LicenseManager.LockContext(System.Object)
    /**
    Prevents changes being made to the current  of the given object.

    - Parameter contextUser: The object whose current context you want to lock.
    */
    public class func LockContext(contextUser : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_LicenseManager_void__LockContext_0__1__Object(&__thrown, contextUser.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void UnlockContext(System.Object)
// docid: M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)
    /**
    Allows changes to be made to the current  of the given object.

    - Parameter contextUser: The object whose current context you want to unlock.
    */
    public class func UnlockContext(contextUser : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_LicenseManager_void__UnlockContext_0__1__Object(&__thrown, contextUser.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Validate(System.Type)
// docid: M:System.ComponentModel.LicenseManager.Validate(System.Type)
    /**
    Determines whether a license can be granted for the specified type.

    - Parameter type: A  that represents the type of object that requests the license.
    */
    public class func Validate(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_LicenseManager_void__Validate_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.License Validate(System.Type, System.Object)
// docid: M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
    /**
    Determines whether a license can be granted for the instance of the specified type.

    - Parameter type: A  that represents the type of object that requests the license.
    - Parameter instance: An  of the specified type or a type derived from the specified type.
    - Returns: A valid .

    */
    public class func Validate(type : dotnet.System.Type_, instance : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.ComponentModel.License> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseManager_License__Validate_0__2__Type_Object(&__thrown, type.get_handle(), instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.License(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.LicenseContext get_CurrentContext()
// docid: M:System.ComponentModel.LicenseManager.get_CurrentContext
    public class func get_CurrentContext() throws -> dotnet.System.ComponentModel.LicenseContext {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseManager_LicenseContext__get_CurrentContext_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.LicenseContext(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CurrentContext(System.ComponentModel.LicenseContext)
// docid: M:System.ComponentModel.LicenseManager.set_CurrentContext(System.ComponentModel.LicenseContext)
    public class func set_CurrentContext(value : dotnet.System.ComponentModel.LicenseContext) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_LicenseManager_void__set_CurrentContext_0__1__LicenseContext(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.LicenseUsageMode get_UsageMode()
// docid: M:System.ComponentModel.LicenseManager.get_UsageMode
    public class func get_UsageMode() throws -> dotnet.System.ComponentModel.LicenseUsageMode {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseManager_LicenseUsageMode__get_UsageMode_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.LicenseUsageMode(val: __return);
        }
    }
    /**
    Gets or sets the current , which specifies when you can use the licensed object.

    */
    public static var CurrentContext : dotnet.System.ComponentModel.LicenseContext {
        get {
            return try! get_CurrentContext();
        }
        set(v) {
            return try! set_CurrentContext(value: v);
        }
    }
    /**
    Gets the  which specifies when you can use the licensed object for the .

    */
    public static var UsageMode : dotnet.System.ComponentModel.LicenseUsageMode {
        get {
            return try! get_UsageMode();
        }
    }
} // LicenseManager


// type: System.ComponentModel.LicenseProvider
    /**
    Provides the  base class for implementing a license provider.

    */
open class LicenseProvider
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LicenseProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.ComponentModel.License GetLicense(System.ComponentModel.LicenseContext, System.Type, System.Object, bool)
// docid: M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
    /**
    When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.

    - Parameter context: A  that specifies where you can use the licensed object.
    - Parameter type: A  that represents the component requesting the license.
    - Parameter instance: An object that is requesting the license.
    - Parameter allowExceptions: 
         if a  should be thrown when the component cannot be granted a license; otherwise, .
    - Returns: A valid .

    */
    open func GetLicense(context : dotnet.System.ComponentModel.LicenseContext, type : dotnet.System.Type_, instance : Optional<dotnet.System.Object>, allowExceptions : Bool) throws -> Optional<dotnet.System.ComponentModel.License> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseProvider_License__GetLicense_0__4__LicenseContext_Type_Object_bool(&__thrown, self.get_handle(), context.get_handle(), type.get_handle(), instance?.get_handle() ?? nil, Swift.Int32(allowExceptions ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.License(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // LicenseProvider


// type: System.ComponentModel.LicenseProviderAttribute
    /**
    Specifies the  to use with a class. This class cannot be inherited.

    */
public final class LicenseProviderAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LicenseProviderAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.LicenseProviderAttribute Default
    /**
    Specifies the default value, which is no provider. This  field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.LicenseProviderAttribute {
        get {
        let __return = dotnet.System.ComponentModel.LicenseProviderAttribute(hndl: System_ComponentModel_LicenseProviderAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.LicenseProviderAttribute.#ctor
    /**
    Initializes a new instance of the  class without a license provider.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicenseProviderAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified type.

    - Parameter typeName: The fully qualified name of the license provider class.
    */
    public init(typeName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicenseProviderAttribute_ctor_0__1__String(&__thrown, typeName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class with the specified type of license provider.

    - Parameter type: A  that represents the type of the license provider class.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LicenseProviderAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)
    /**
    Indicates whether this instance and a specified object are equal.

    - Parameter value: Another object to compare to.
    - Returns: 
         if  is equal to this instance; otherwise, .

    */
    public func Equals(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseProviderAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.LicenseProviderAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseProviderAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type get_LicenseProvider()
// docid: M:System.ComponentModel.LicenseProviderAttribute.get_LicenseProvider
    public func get_LicenseProvider() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseProviderAttribute_Type__get_LicenseProvider_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_TypeId()
// docid: M:System.ComponentModel.LicenseProviderAttribute.get_TypeId
    public override func get_TypeId() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LicenseProviderAttribute_Object__get_TypeId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the license provider that must be used with the associated class.

    */
    public var LicenseProvider : Optional<dotnet.System.Type_> {
        get {
            return try! get_LicenseProvider();
        }
    }
    /**
    Indicates a unique ID for this attribute type.

    */
    public override var TypeId : dotnet.System.Object {
        get {
            return try! get_TypeId();
        }
    }
} // LicenseProviderAttribute


// type: System.ComponentModel.LicenseUsageMode
    /**
    Specifies when the  can be used.

    */
public struct LicenseUsageMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LicenseUsageMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.LicenseUsageMode Runtime
    /**
    Used during runtime.

    */
    public static var Runtime : dotnet.System.ComponentModel.LicenseUsageMode {
        get {
        let __return = dotnet.System.ComponentModel.LicenseUsageMode(val: System_ComponentModel_LicenseUsageMode_get_Runtime());
            return __return;
        }
    }
    // static field: System.ComponentModel.LicenseUsageMode Designtime
    /**
    Used during design time by a visual designer or the compiler.

    */
    public static var Designtime : dotnet.System.ComponentModel.LicenseUsageMode {
        get {
        let __return = dotnet.System.ComponentModel.LicenseUsageMode(val: System_ComponentModel_LicenseUsageMode_get_Designtime());
            return __return;
        }
    }
} // LicenseUsageMode


// type: System.ComponentModel.ListBindableAttribute
    /**
    Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.

    */
public final class ListBindableAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ListBindableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.ListBindableAttribute Default
    /**
    Represents the default value for .

    */
    public class var Default : dotnet.System.ComponentModel.ListBindableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ListBindableAttribute(hndl: System_ComponentModel_ListBindableAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListBindableAttribute No
    /**
    Specifies that the list is not bindable. This  field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.ListBindableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ListBindableAttribute(hndl: System_ComponentModel_ListBindableAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListBindableAttribute Yes
    /**
    Specifies that the list is bindable. This  field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.ListBindableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ListBindableAttribute(hndl: System_ComponentModel_ListBindableAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class using a value to indicate whether the list is bindable.

    - Parameter listBindable: 
         if the list is bindable; otherwise, .
    */
    public init(listBindable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListBindableAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(listBindable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.BindableSupport)
// docid: M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)
    /**
    Initializes a new instance of the  class using  to indicate whether the list is bindable.

    - Parameter flags: A  that indicates whether the list is bindable.
    */
    public init(flags : dotnet.System.ComponentModel.BindableSupport) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListBindableAttribute_ctor_0__1__BindableSupport(&__thrown, flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)
    /**
    Returns whether the object passed is equal to this .

    - Parameter obj: The object to test equality with.
    - Returns: 
         if the object passed is equal to this ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListBindableAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ListBindableAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListBindableAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute
    /**
    Returns whether  is set to the default value.

    - Returns: 
         if  is set to the default value; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListBindableAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_ListBindable()
// docid: M:System.ComponentModel.ListBindableAttribute.get_ListBindable
    public func get_ListBindable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListBindableAttribute_bool__get_ListBindable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets whether the list is bindable.

    */
    public var ListBindable : Bool {
        get {
            return try! get_ListBindable();
        }
    }
} // ListBindableAttribute


// type: System.ComponentModel.ListChangedEventArgs
    /**
    Provides data for the  event.

    */
open class ListChangedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ListChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.ListChangedType, System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)
    /**
    Initializes a new instance of the  class given the type of change and the  affected.

    - Parameter listChangedType: A  value indicating the type of change.
    - Parameter propDesc: The  that was added, removed, or changed.
    */
    public init(listChangedType : dotnet.System.ComponentModel.ListChangedType, propDesc : Optional<dotnet.System.ComponentModel.PropertyDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListChangedEventArgs_ctor_0__2__ListChangedType_PropertyDescriptor(&__thrown, listChangedType.get_value(), propDesc?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.ListChangedType, System.Int32)
// docid: M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)
    /**
    Initializes a new instance of the  class given the type of change and the index of the affected item.

    - Parameter listChangedType: A  value indicating the type of change.
    - Parameter newIndex: The index of the item that was added, changed, or removed.
    */
    public init(listChangedType : dotnet.System.ComponentModel.ListChangedType, newIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListChangedEventArgs_ctor_0__2__ListChangedType_i32(&__thrown, listChangedType.get_value(), newIndex);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.ListChangedType, System.Int32, System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)
    /**
    Initializes a new instance of the  class given the type of change, the index of the affected item, and a  describing the affected item.

    - Parameter listChangedType: A  value indicating the type of change.
    - Parameter newIndex: The index of the item that was added or changed.
    - Parameter propDesc: The  describing the item.
    */
    public init(listChangedType : dotnet.System.ComponentModel.ListChangedType, newIndex : Swift.Int32, propDesc : Optional<dotnet.System.ComponentModel.PropertyDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListChangedEventArgs_ctor_0__3__ListChangedType_i32_PropertyDescriptor(&__thrown, listChangedType.get_value(), newIndex, propDesc?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.ListChangedType, System.Int32, System.Int32)
// docid: M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)
    /**
    Initializes a new instance of the  class given the type of change and the old and new index of the item that was moved.

    - Parameter listChangedType: A  value indicating the type of change.
    - Parameter newIndex: The new index of the item that was moved.
    - Parameter oldIndex: The old index of the item that was moved.
    */
    public init(listChangedType : dotnet.System.ComponentModel.ListChangedType, newIndex : Swift.Int32, oldIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListChangedEventArgs_ctor_0__3__ListChangedType_i32_i32(&__thrown, listChangedType.get_value(), newIndex, oldIndex);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.ListChangedType get_ListChangedType()
// docid: M:System.ComponentModel.ListChangedEventArgs.get_ListChangedType
    open func get_ListChangedType() throws -> dotnet.System.ComponentModel.ListChangedType {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListChangedEventArgs_ListChangedType__get_ListChangedType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ListChangedType(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_NewIndex()
// docid: M:System.ComponentModel.ListChangedEventArgs.get_NewIndex
    open func get_NewIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListChangedEventArgs_i32__get_NewIndex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_OldIndex()
// docid: M:System.ComponentModel.ListChangedEventArgs.get_OldIndex
    open func get_OldIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListChangedEventArgs_i32__get_OldIndex_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptor get_PropertyDescriptor()
// docid: M:System.ComponentModel.ListChangedEventArgs.get_PropertyDescriptor
    open func get_PropertyDescriptor() throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListChangedEventArgs_PropertyDescriptor__get_PropertyDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the type of change.

    */
    open var ListChangedType : dotnet.System.ComponentModel.ListChangedType {
        get {
            return try! get_ListChangedType();
        }
    }
    /**
    Gets the index of the item affected by the change.

    */
    open var NewIndex : Swift.Int32 {
        get {
            return try! get_NewIndex();
        }
    }
    /**
    Gets the old index of an item that has been moved.

    */
    open var OldIndex : Swift.Int32 {
        get {
            return try! get_OldIndex();
        }
    }
    /**
    Gets the  that was added, changed, or deleted.

    */
    open var PropertyDescriptor : Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        get {
            return try! get_PropertyDescriptor();
        }
    }
} // ListChangedEventArgs


// type: System.ComponentModel.ListChangedEventHandler
    /**
    Represents the method that will handle the  event of the  class.

    */
public final class ListChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ListChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.ListChangedEventArgs)
// docid: M:System.ComponentModel.ListChangedEventHandler.Invoke(System.Object,System.ComponentModel.ListChangedEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.ListChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ListChangedEventHandler_void__Invoke_0__2__Object_ListChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.ListChangedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.ListChangedEventHandler.BeginInvoke(System.Object,System.ComponentModel.ListChangedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.ListChangedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ListChangedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.ListChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ListChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.ListChangedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.ListChangedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.ListChangedEventArgs)
// docid: M:System.ComponentModel.ListChangedEventHandler.Invoke(System.Object,System.ComponentModel.ListChangedEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.ListChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ListChangedEventHandler_void__Invoke_0__2__Object_ListChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ListChangedEventHandler


// type: System.ComponentModel.ListChangedType
    /**
    Specifies how the list changed.

    */
public struct ListChangedType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ListChangedType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.ListChangedType Reset
    /**
    Much of the list has changed. Any listening controls should refresh all their data from the list.

    */
    public static var Reset : dotnet.System.ComponentModel.ListChangedType {
        get {
        let __return = dotnet.System.ComponentModel.ListChangedType(val: System_ComponentModel_ListChangedType_get_Reset());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListChangedType ItemAdded
    /**
    An item added to the list.  contains the index of the item that was added.

    */
    public static var ItemAdded : dotnet.System.ComponentModel.ListChangedType {
        get {
        let __return = dotnet.System.ComponentModel.ListChangedType(val: System_ComponentModel_ListChangedType_get_ItemAdded());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListChangedType ItemDeleted
    /**
    An item deleted from the list.  contains the index of the item that was deleted.

    */
    public static var ItemDeleted : dotnet.System.ComponentModel.ListChangedType {
        get {
        let __return = dotnet.System.ComponentModel.ListChangedType(val: System_ComponentModel_ListChangedType_get_ItemDeleted());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListChangedType ItemMoved
    /**
    An item moved within the list.  contains the previous index for the item, whereas  contains the new index for the item.

    */
    public static var ItemMoved : dotnet.System.ComponentModel.ListChangedType {
        get {
        let __return = dotnet.System.ComponentModel.ListChangedType(val: System_ComponentModel_ListChangedType_get_ItemMoved());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListChangedType ItemChanged
    /**
    An item changed in the list.  contains the index of the item that was changed.

    */
    public static var ItemChanged : dotnet.System.ComponentModel.ListChangedType {
        get {
        let __return = dotnet.System.ComponentModel.ListChangedType(val: System_ComponentModel_ListChangedType_get_ItemChanged());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListChangedType PropertyDescriptorAdded
    /**
    A  was added, which changed the schema.

    */
    public static var PropertyDescriptorAdded : dotnet.System.ComponentModel.ListChangedType {
        get {
        let __return = dotnet.System.ComponentModel.ListChangedType(val: System_ComponentModel_ListChangedType_get_PropertyDescriptorAdded());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListChangedType PropertyDescriptorDeleted
    /**
    A  was deleted, which changed the schema.

    */
    public static var PropertyDescriptorDeleted : dotnet.System.ComponentModel.ListChangedType {
        get {
        let __return = dotnet.System.ComponentModel.ListChangedType(val: System_ComponentModel_ListChangedType_get_PropertyDescriptorDeleted());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListChangedType PropertyDescriptorChanged
    /**
    A  was changed, which changed the schema.

    */
    public static var PropertyDescriptorChanged : dotnet.System.ComponentModel.ListChangedType {
        get {
        let __return = dotnet.System.ComponentModel.ListChangedType(val: System_ComponentModel_ListChangedType_get_PropertyDescriptorChanged());
            return __return;
        }
    }
} // ListChangedType


// type: System.ComponentModel.ListSortDescription
    /**
    Provides a description of the sort operation applied to a data source.

    */
open class ListSortDescription
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ListSortDescription_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)
// docid: M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)
    /**
    Initializes a new instance of the  class with the specified property description and direction.

    - Parameter property: The  that describes the property by which the data source is sorted.
    - Parameter direction: One of the  values.
    */
    public init(property : Optional<dotnet.System.ComponentModel.PropertyDescriptor>, direction : dotnet.System.ComponentModel.ListSortDirection) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListSortDescription_ctor_0__2__PropertyDescriptor_ListSortDirection(&__thrown, property?.get_handle() ?? nil, direction.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptor get_PropertyDescriptor()
// docid: M:System.ComponentModel.ListSortDescription.get_PropertyDescriptor
    open func get_PropertyDescriptor() throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListSortDescription_PropertyDescriptor__get_PropertyDescriptor_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyDescriptor(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.ListSortDescription.set_PropertyDescriptor(System.ComponentModel.PropertyDescriptor)
    open func set_PropertyDescriptor(value : Optional<dotnet.System.ComponentModel.PropertyDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ListSortDescription_void__set_PropertyDescriptor_0__1__PropertyDescriptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ListSortDirection get_SortDirection()
// docid: M:System.ComponentModel.ListSortDescription.get_SortDirection
    open func get_SortDirection() throws -> dotnet.System.ComponentModel.ListSortDirection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListSortDescription_ListSortDirection__get_SortDirection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ListSortDirection(val: __return);
        }
    }
    // [IsSpecialName] void set_SortDirection(System.ComponentModel.ListSortDirection)
// docid: M:System.ComponentModel.ListSortDescription.set_SortDirection(System.ComponentModel.ListSortDirection)
    open func set_SortDirection(value : dotnet.System.ComponentModel.ListSortDirection) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ListSortDescription_void__set_SortDirection_0__1__ListSortDirection(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the abstract description of a class property associated with this 

    */
    open var PropertyDescriptor : Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        get {
            return try! get_PropertyDescriptor();
        }
        set(v) {
            return try! set_PropertyDescriptor(value: v!);
        }
    }
    /**
    Gets or sets the direction of the sort operation associated with this .

    */
    open var SortDirection : dotnet.System.ComponentModel.ListSortDirection {
        get {
            return try! get_SortDirection();
        }
        set(v) {
            return try! set_SortDirection(value: v);
        }
    }
} // ListSortDescription


// type: System.ComponentModel.ListSortDescriptionCollection
    /**
    Represents a collection of  objects.

    */
open class ListSortDescriptionCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ListSortDescriptionCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.ListSortDescriptionCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListSortDescriptionCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.ListSortDescription[])
// docid: M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])
    /**
    Initializes a new instance of the  class with the specified array of  objects.

    - Parameter sorts: The array of  objects to be contained in the collection.
    */
    public init(sorts : Optional<dotnet.System_Arr<dotnet.System.ComponentModel.ListSortDescription>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ListSortDescriptionCollection_ctor_0__1__ListSortDescriptionArray(&__thrown, (sorts?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Contains(System.Object)
// docid: M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)
    /**
    Determines if the  contains a specific value.

    - Parameter value: The  to locate in the collection.
    - Returns: 
         if the  is found in the collection; otherwise, .

    */
    open /* method final */ func Contains(value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListSortDescriptionCollection_bool__Contains_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the contents of the collection to the specified array, starting at the specified destination array index.

    - Parameter array: The destination array for the items copied from the collection.
    - Parameter index: The index of the destination array at which copying begins.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ListSortDescriptionCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.Object)
// docid: M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)
    /**
    Returns the index of the specified item in the collection.

    - Parameter value: The  to locate in the collection.
    - Returns: The index of  if found in the list; otherwise, -1.

    */
    open /* method final */ func IndexOf(value : Optional<dotnet.System.Object>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListSortDescriptionCollection_i32__IndexOf_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.ComponentModel.ListSortDescriptionCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListSortDescriptionCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ListSortDescription get_Item(System.Int32)
// docid: M:System.ComponentModel.ListSortDescriptionCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.ComponentModel.ListSortDescription> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ListSortDescriptionCollection_ListSortDescription__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ListSortDescription(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.ComponentModel.ListSortDescription)
// docid: M:System.ComponentModel.ListSortDescriptionCollection.set_Item(System.Int32,System.ComponentModel.ListSortDescription)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.ComponentModel.ListSortDescription>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_ListSortDescriptionCollection_void__set_Item_0__2__i32_ListSortDescription(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the number of items in the collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // ListSortDescriptionCollection


// type: System.ComponentModel.ListSortDirection
    /**
    Specifies the direction of a sort operation.

    */
public struct ListSortDirection : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ListSortDirection_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.ListSortDirection Ascending
    /**
    Sorts in ascending order.

    */
    public static var Ascending : dotnet.System.ComponentModel.ListSortDirection {
        get {
        let __return = dotnet.System.ComponentModel.ListSortDirection(val: System_ComponentModel_ListSortDirection_get_Ascending());
            return __return;
        }
    }
    // static field: System.ComponentModel.ListSortDirection Descending
    /**
    Sorts in descending order.

    */
    public static var Descending : dotnet.System.ComponentModel.ListSortDirection {
        get {
        let __return = dotnet.System.ComponentModel.ListSortDirection(val: System_ComponentModel_ListSortDirection_get_Descending());
            return __return;
        }
    }
} // ListSortDirection


// type: System.ComponentModel.LookupBindingPropertiesAttribute
    /**
    Specifies the properties that support lookup-based binding. This class cannot be inherited.

    */
public final class LookupBindingPropertiesAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_LookupBindingPropertiesAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.LookupBindingPropertiesAttribute Default
    /**
    Represents the default value for the  class.

    */
    public class var Default : dotnet.System.ComponentModel.LookupBindingPropertiesAttribute {
        get {
        let __return = dotnet.System.ComponentModel.LookupBindingPropertiesAttribute(hndl: System_ComponentModel_LookupBindingPropertiesAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor
    /**
    Initializes a new instance of the  class using no parameters.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LookupBindingPropertiesAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String, System.String)
// docid: M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter dataSource: The name of the property to be used as the data source.
    - Parameter displayMember: The name of the property to be used for the display name.
    - Parameter valueMember: The name of the property to be used as the source for values.
    - Parameter lookupMember: The name of the property to be used for lookups.
    */
    public init(dataSource : dotnet.System.String, displayMember : dotnet.System.String, valueMember : dotnet.System.String, lookupMember : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_LookupBindingPropertiesAttribute_ctor_0__4__String_String_String_String(&__thrown, dataSource.get_handle(), displayMember.get_handle(), valueMember.get_handle(), lookupMember.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)
    /**
    Determines whether the specified  is equal to the current  instance.

    - Parameter obj: The  to compare with the current  instance
    - Returns: 
         if the object is equal to the current instance; otherwise, , indicating they are not equal.

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LookupBindingPropertiesAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LookupBindingPropertiesAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_DataSource()
// docid: M:System.ComponentModel.LookupBindingPropertiesAttribute.get_DataSource
    public func get_DataSource() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LookupBindingPropertiesAttribute_String__get_DataSource_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_DisplayMember()
// docid: M:System.ComponentModel.LookupBindingPropertiesAttribute.get_DisplayMember
    public func get_DisplayMember() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LookupBindingPropertiesAttribute_String__get_DisplayMember_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_LookupMember()
// docid: M:System.ComponentModel.LookupBindingPropertiesAttribute.get_LookupMember
    public func get_LookupMember() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LookupBindingPropertiesAttribute_String__get_LookupMember_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ValueMember()
// docid: M:System.ComponentModel.LookupBindingPropertiesAttribute.get_ValueMember
    public func get_ValueMember() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_LookupBindingPropertiesAttribute_String__get_ValueMember_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the name of the data source property for the component to which the  is bound.

    */
    public var DataSource : Optional<dotnet.System.String> {
        get {
            return try! get_DataSource();
        }
    }
    /**
    Gets the name of the display member property for the component to which the  is bound.

    */
    public var DisplayMember : Optional<dotnet.System.String> {
        get {
            return try! get_DisplayMember();
        }
    }
    /**
    Gets the name of the lookup member for the component to which this attribute is bound.

    */
    public var LookupMember : Optional<dotnet.System.String> {
        get {
            return try! get_LookupMember();
        }
    }
    /**
    Gets the name of the value member property for the component to which the  is bound.

    */
    public var ValueMember : Optional<dotnet.System.String> {
        get {
            return try! get_ValueMember();
        }
    }
} // LookupBindingPropertiesAttribute


// type: System.ComponentModel.MarshalByValueComponent
    /**
    Implements  and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).

    */
open class MarshalByValueComponent
    :
    dotnet.System.Object,
    System_ComponentModel_IComponent,
    System_IDisposable,
    System_IServiceProvider
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_MarshalByValueComponent_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.MarshalByValueComponent.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MarshalByValueComponent_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.ComponentModel.MarshalByValueComponent.Dispose
    /**
    Releases all resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MarshalByValueComponent_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetService(System.Type)
// docid: M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
    /**
    Gets the implementer of the .

    - Parameter service: A  that represents the type of service you want.
    - Returns: An  that represents the implementer of the .

    */
    open func GetService(service : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MarshalByValueComponent_Object__GetService_0__1__Type(&__thrown, self.get_handle(), service.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.MarshalByValueComponent.ToString
    /**
    Returns a  containing the name of the , if any. This method should not be overridden.

    - Returns: A  containing the name of the , if any.  
  
  if the  is unnamed.

    */
    open override func ToString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MarshalByValueComponent_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.IContainer get_Container()
// docid: M:System.ComponentModel.MarshalByValueComponent.get_Container
    open func get_Container() throws -> Optional<dotnet.System.ComponentModel.IContainer> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MarshalByValueComponent_IContainer__get_Container_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IContainer(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_DesignMode()
// docid: M:System.ComponentModel.MarshalByValueComponent.get_DesignMode
    open func get_DesignMode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MarshalByValueComponent_bool__get_DesignMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.ISite get_Site()
// docid: M:System.ComponentModel.MarshalByValueComponent.get_Site
    open func get_Site() throws -> Optional<dotnet.System.ComponentModel.ISite> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MarshalByValueComponent_ISite__get_Site_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISite(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Site(System.ComponentModel.ISite)
// docid: M:System.ComponentModel.MarshalByValueComponent.set_Site(System.ComponentModel.ISite)
    open func set_Site(value : Optional<dotnet.System.ComponentModel.ISite>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MarshalByValueComponent_void__set_Site_0__1__ISite(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_Disposed(System.EventHandler)
// docid: M:System.ComponentModel.MarshalByValueComponent.add_Disposed(System.EventHandler)
    open /* method final */ func add_Disposed(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MarshalByValueComponent_void__add_Disposed_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func add_Disposed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Disposed(value: del_value);
    }
    // [IsSpecialName] void remove_Disposed(System.EventHandler)
// docid: M:System.ComponentModel.MarshalByValueComponent.remove_Disposed(System.EventHandler)
    open /* method final */ func remove_Disposed(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MarshalByValueComponent_void__remove_Disposed_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func remove_Disposed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Disposed(value: del_value);
    }
    /**
    Gets the container for the component.

    */
    open var Container : Optional<dotnet.System.ComponentModel.IContainer> {
        get {
            return try! get_Container();
        }
    }
    /**
    Gets a value indicating whether the component is currently in design mode.

    */
    open var DesignMode : Bool {
        get {
            return try! get_DesignMode();
        }
    }
    /**
    Gets or sets the site of the component.

    */
    open var Site : Optional<dotnet.System.ComponentModel.ISite> {
        get {
            return try! get_Site();
        }
        set(v) {
            return try! set_Site(value: v!);
        }
    }
} // MarshalByValueComponent


// type: System.ComponentModel.MaskedTextProvider
    /**
    Represents a mask-parsing service that can be used by any number of controls that support masking, such as the  control.

    */
open class MaskedTextProvider
    :
    dotnet.System.Object,
    System_ICloneable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_MaskedTextProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified mask.

    - Parameter mask: A  that represents the input mask.
    */
    public init(mask : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MaskedTextProvider_ctor_0__1__String(&__thrown, mask.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified mask and ASCII restriction value.

    - Parameter mask: A  that represents the input mask.
    - Parameter restrictToAscii: 
         to restrict input to ASCII-compatible characters; otherwise  to allow the entire Unicode set.
    */
    public init(mask : dotnet.System.String, restrictToAscii : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MaskedTextProvider_ctor_0__2__String_bool(&__thrown, mask.get_handle(), Swift.Int32(restrictToAscii ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Char, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified mask, password character, and prompt usage value.

    - Parameter mask: A  that represents the input mask.
    - Parameter passwordChar: A  that will be displayed for characters entered into a password string.
    - Parameter allowPromptAsInput: 
         to allow the prompt character as input; otherwise .
    */
    public init(mask : dotnet.System.String, passwordChar : dotnet.System.Char, allowPromptAsInput : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MaskedTextProvider_ctor_0__3__String_Char_bool(&__thrown, mask.get_handle(), passwordChar.get_value(), Swift.Int32(allowPromptAsInput ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Globalization.CultureInfo)
// docid: M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)
    /**
    Initializes a new instance of the  class using the specified mask and culture.

    - Parameter mask: A  that represents the input mask.
    - Parameter culture: A  that is used to set region-sensitive separator characters.
    */
    public init(mask : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MaskedTextProvider_ctor_0__2__String_CultureInfo(&__thrown, mask.get_handle(), culture?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Globalization.CultureInfo, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified mask, culture, and ASCII restriction value.

    - Parameter mask: A  that represents the input mask.
    - Parameter culture: A  that is used to set region-sensitive separator characters.
    - Parameter restrictToAscii: 
         to restrict input to ASCII-compatible characters; otherwise  to allow the entire Unicode set.
    */
    public init(mask : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>, restrictToAscii : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MaskedTextProvider_ctor_0__3__String_CultureInfo_bool(&__thrown, mask.get_handle(), culture?.get_handle() ?? nil, Swift.Int32(restrictToAscii ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Globalization.CultureInfo, bool, System.Char, System.Char, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.

    - Parameter mask: A  that represents the input mask.
    - Parameter culture: A  that is used to set region-sensitive separator characters.
    - Parameter allowPromptAsInput: A  value that specifies whether the prompt character should be allowed as a valid input character.
    - Parameter promptChar: A  that will be displayed as a placeholder for user input.
    - Parameter passwordChar: A  that will be displayed for characters entered into a password string.
    - Parameter restrictToAscii: 
         to restrict input to ASCII-compatible characters; otherwise  to allow the entire Unicode set.
    */
    public init(mask : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>, allowPromptAsInput : Bool, promptChar : dotnet.System.Char, passwordChar : dotnet.System.Char, restrictToAscii : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MaskedTextProvider_ctor_0__6__String_CultureInfo_bool_Char_Char_bool(&__thrown, mask.get_handle(), culture?.get_handle() ?? nil, Swift.Int32(allowPromptAsInput ? 1 : 0), promptChar.get_value(), passwordChar.get_value(), Swift.Int32(restrictToAscii ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Globalization.CultureInfo, System.Char, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified mask, culture, password character, and prompt usage value.

    - Parameter mask: A  that represents the input mask.
    - Parameter culture: A  that is used to set region-sensitive separator characters.
    - Parameter passwordChar: A  that will be displayed for characters entered into a password string.
    - Parameter allowPromptAsInput: 
         to allow the prompt character as input; otherwise .
    */
    public init(mask : dotnet.System.String, culture : Optional<dotnet.System.Globalization.CultureInfo>, passwordChar : dotnet.System.Char, allowPromptAsInput : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MaskedTextProvider_ctor_0__4__String_CultureInfo_Char_bool(&__thrown, mask.get_handle(), culture?.get_handle() ?? nil, passwordChar.get_value(), Swift.Int32(allowPromptAsInput ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Add(System.Char)
// docid: M:System.ComponentModel.MaskedTextProvider.Add(System.Char)
    /**
    Adds the specified input character to the end of the formatted string.

    - Parameter input: A  value to be appended to the formatted string.
    - Returns: 
         if the input character was added successfully; otherwise .

    */
    open func Add(input : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__Add_0__1__Char(&__thrown, self.get_handle(), input.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Add(System.Char, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.

    - Parameter input: A  value to be appended to the formatted string.
    - Parameter testPosition: The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the operation. An output parameter.
    - Returns: 
         if the input character was added successfully; otherwise .

    */
    open func Add(input : dotnet.System.Char, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__Add_0__3__Char_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_value(), &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Add(System.String)
// docid: M:System.ComponentModel.MaskedTextProvider.Add(System.String)
    /**
    Adds the characters in the specified input string to the end of the formatted string.

    - Parameter input: A  containing character values to be appended to the formatted string.
    - Returns: 
         if all the characters from the input string were added successfully; otherwise  to indicate that no characters were added.

    */
    open func Add(input : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__Add_0__1__String(&__thrown, self.get_handle(), input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Add(System.String, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.

    - Parameter input: A  containing character values to be appended to the formatted string.
    - Parameter testPosition: The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the operation. An output parameter.
    - Returns: 
         if all the characters from the input string were added successfully; otherwise  to indicate that no characters were added.

    */
    open func Add(input : dotnet.System.String, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__Add_0__3__String_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_handle(), &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Clear()
// docid: M:System.ComponentModel.MaskedTextProvider.Clear
    /**
    Clears all the editable input characters from the formatted string, replacing them with prompt characters.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear(ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)
    /**
    Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.

    - Parameter resultHint: A  that succinctly describes the result of the operation. An output parameter.
    */
    open func Clear(resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_resultHint = resultHint.get_value();
        System_ComponentModel_MaskedTextProvider_void__Clear_0__1__outMaskedTextResultHint(&__thrown, self.get_handle(), &_tmp_out_resultHint);
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Clone()
// docid: M:System.ComponentModel.MaskedTextProvider.Clone
    /**
    Creates a copy of the current .

    - Returns: The  object this method creates, cast as an object.

    */
    open /* method final */ func Clone() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_Object__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Int32 FindAssignedEditPositionFrom(System.Int32, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)
    /**
    Returns the position of the first assigned editable position after the specified position using the specified search direction.

    - Parameter position: The zero-based position in the formatted string to start the search.
    - Parameter direction: A  indicating the search direction; either  to search forward or  to search backward.
    - Returns: If successful, an  representing the zero-based position of the first assigned editable position encountered; otherwise .

    */
    open func FindAssignedEditPositionFrom(position : Swift.Int32, direction : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__FindAssignedEditPositionFrom_0__2__i32_bool(&__thrown, self.get_handle(), position, Swift.Int32(direction ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 FindAssignedEditPositionInRange(System.Int32, System.Int32, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
    /**
    Returns the position of the first assigned editable position between the specified positions using the specified search direction.

    - Parameter startPosition: The zero-based position in the formatted string where the search starts.
    - Parameter endPosition: The zero-based position in the formatted string where the search ends.
    - Parameter direction: A  indicating the search direction; either  to search forward or  to search backward.
    - Returns: If successful, an  representing the zero-based position of the first assigned editable position encountered; otherwise .

    */
    open func FindAssignedEditPositionInRange(startPosition : Swift.Int32, endPosition : Swift.Int32, direction : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__FindAssignedEditPositionInRange_0__3__i32_i32_bool(&__thrown, self.get_handle(), startPosition, endPosition, Swift.Int32(direction ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 FindEditPositionFrom(System.Int32, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)
    /**
    Returns the position of the first editable position after the specified position using the specified search direction.

    - Parameter position: The zero-based position in the formatted string to start the search.
    - Parameter direction: A  indicating the search direction; either  to search forward or  to search backward.
    - Returns: If successful, an  representing the zero-based position of the first editable position encountered; otherwise .

    */
    open func FindEditPositionFrom(position : Swift.Int32, direction : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__FindEditPositionFrom_0__2__i32_bool(&__thrown, self.get_handle(), position, Swift.Int32(direction ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 FindEditPositionInRange(System.Int32, System.Int32, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)
    /**
    Returns the position of the first editable position between the specified positions using the specified search direction.

    - Parameter startPosition: The zero-based position in the formatted string where the search starts.
    - Parameter endPosition: The zero-based position in the formatted string where the search ends.
    - Parameter direction: A  indicating the search direction; either  to search forward or  to search backward.
    - Returns: If successful, an  representing the zero-based position of the first editable position encountered; otherwise .

    */
    open func FindEditPositionInRange(startPosition : Swift.Int32, endPosition : Swift.Int32, direction : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__FindEditPositionInRange_0__3__i32_i32_bool(&__thrown, self.get_handle(), startPosition, endPosition, Swift.Int32(direction ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 FindNonEditPositionFrom(System.Int32, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)
    /**
    Returns the position of the first non-editable position after the specified position using the specified search direction.

    - Parameter position: The zero-based position in the formatted string to start the search.
    - Parameter direction: A  indicating the search direction; either  to search forward or  to search backward.
    - Returns: If successful, an  representing the zero-based position of the first literal position encountered; otherwise .

    */
    open func FindNonEditPositionFrom(position : Swift.Int32, direction : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__FindNonEditPositionFrom_0__2__i32_bool(&__thrown, self.get_handle(), position, Swift.Int32(direction ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 FindNonEditPositionInRange(System.Int32, System.Int32, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)
    /**
    Returns the position of the first non-editable position between the specified positions using the specified search direction.

    - Parameter startPosition: The zero-based position in the formatted string where the search starts.
    - Parameter endPosition: The zero-based position in the formatted string where the search ends.
    - Parameter direction: A  indicating the search direction; either  to search forward or  to search backward.
    - Returns: If successful, an  representing the zero-based position of the first literal position encountered; otherwise .

    */
    open func FindNonEditPositionInRange(startPosition : Swift.Int32, endPosition : Swift.Int32, direction : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__FindNonEditPositionInRange_0__3__i32_i32_bool(&__thrown, self.get_handle(), startPosition, endPosition, Swift.Int32(direction ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 FindUnassignedEditPositionFrom(System.Int32, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)
    /**
    Returns the position of the first unassigned editable position after the specified position using the specified search direction.

    - Parameter position: The zero-based position in the formatted string to start the search.
    - Parameter direction: A  indicating the search direction; either  to search forward or  to search backward.
    - Returns: If successful, an  representing the zero-based position of the first unassigned editable position encountered; otherwise .

    */
    open func FindUnassignedEditPositionFrom(position : Swift.Int32, direction : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__FindUnassignedEditPositionFrom_0__2__i32_bool(&__thrown, self.get_handle(), position, Swift.Int32(direction ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 FindUnassignedEditPositionInRange(System.Int32, System.Int32, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
    /**
    Returns the position of the first unassigned editable position between the specified positions using the specified search direction.

    - Parameter startPosition: The zero-based position in the formatted string where the search starts.
    - Parameter endPosition: The zero-based position in the formatted string where the search ends.
    - Parameter direction: A  indicating the search direction; either  to search forward or  to search backward.
    - Returns: If successful, an  representing the zero-based position of the first unassigned editable position encountered; otherwise .

    */
    open func FindUnassignedEditPositionInRange(startPosition : Swift.Int32, endPosition : Swift.Int32, direction : Bool) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__FindUnassignedEditPositionInRange_0__3__i32_i32_bool(&__thrown, self.get_handle(), startPosition, endPosition, Swift.Int32(direction ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)
    /**
    Determines whether the specified  denotes success or failure.

    - Parameter hint: A  value typically obtained as an output parameter from a previous operation.
    - Returns: 
         if the specified  value represents a success; otherwise,  if it represents failure.

    */
    open class func GetOperationResultFromHint(hint : dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__GetOperationResultFromHint_0__1__MaskedTextResultHint(&__thrown, hint.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool InsertAt(System.Char, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)
    /**
    Inserts the specified character at the specified position within the formatted string.

    - Parameter input: The  to be inserted.
    - Parameter position: The zero-based position in the formatted string to insert the character.
    - Returns: 
         if the insertion was successful; otherwise, .

    */
    open func InsertAt(input : dotnet.System.Char, position : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__InsertAt_0__2__Char_i32(&__thrown, self.get_handle(), input.get_value(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool InsertAt(System.Char, System.Int32, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.

    - Parameter input: The  to be inserted.
    - Parameter position: The zero-based position in the formatted string to insert the character.
    - Parameter testPosition: If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the insertion operation. An output parameter.
    - Returns: 
         if the insertion was successful; otherwise, .

    */
    open func InsertAt(input : dotnet.System.Char, position : Swift.Int32, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__InsertAt_0__4__Char_i32_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_value(), position, &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool InsertAt(System.String, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)
    /**
    Inserts the specified string at a specified position within the formatted string.

    - Parameter input: The  to be inserted.
    - Parameter position: The zero-based position in the formatted string to insert the input string.
    - Returns: 
         if the insertion was successful; otherwise, .

    */
    open func InsertAt(input : dotnet.System.String, position : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__InsertAt_0__2__String_i32(&__thrown, self.get_handle(), input.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool InsertAt(System.String, System.Int32, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.

    - Parameter input: The  to be inserted.
    - Parameter position: The zero-based position in the formatted string to insert the input string.
    - Parameter testPosition: If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the insertion operation. An output parameter.
    - Returns: 
         if the insertion was successful; otherwise, .

    */
    open func InsertAt(input : dotnet.System.String, position : Swift.Int32, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__InsertAt_0__4__String_i32_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_handle(), position, &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsAvailablePosition(System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)
    /**
    Determines whether the specified position is available for assignment.

    - Parameter position: The zero-based position in the mask to test.
    - Returns: 
         if the specified position in the formatted string is editable and has not been assigned to yet; otherwise .

    */
    open func IsAvailablePosition(position : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__IsAvailablePosition_0__1__i32(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsEditPosition(System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)
    /**
    Determines whether the specified position is editable.

    - Parameter position: The zero-based position in the mask to test.
    - Returns: 
         if the specified position in the formatted string is editable; otherwise .

    */
    open func IsEditPosition(position : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__IsEditPosition_0__1__i32(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValidInputChar(System.Char)
// docid: M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)
    /**
    Determines whether the specified character is a valid input character.

    - Parameter c: The  value to test.
    - Returns: 
         if the specified character contains a valid input value; otherwise .

    */
    open class func IsValidInputChar(c : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__IsValidInputChar_0__1__Char(&__thrown, c.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValidMaskChar(System.Char)
// docid: M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)
    /**
    Determines whether the specified character is a valid mask character.

    - Parameter c: The  value to test.
    - Returns: 
         if the specified character contains a valid mask value; otherwise .

    */
    open class func IsValidMaskChar(c : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__IsValidMaskChar_0__1__Char(&__thrown, c.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValidPasswordChar(System.Char)
// docid: M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)
    /**
    Determines whether the specified character is a valid password character.

    - Parameter c: The  value to test.
    - Returns: 
         if the specified character contains a valid password value; otherwise .

    */
    open class func IsValidPasswordChar(c : dotnet.System.Char) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__IsValidPasswordChar_0__1__Char(&__thrown, c.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove()
// docid: M:System.ComponentModel.MaskedTextProvider.Remove
    /**
    Removes the last assigned character from the formatted string.

    - Returns: 
         if the character was successfully removed; otherwise, .

    */
    open func Remove() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__Remove_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Remove(ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.

    - Parameter testPosition: The zero-based position in the formatted string where the character was actually removed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the operation. An output parameter.
    - Returns: 
         if the character was successfully removed; otherwise, .

    */
    open func Remove(testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__Remove_0__2__outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool RemoveAt(System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)
    /**
    Removes the assigned character at the specified position from the formatted string.

    - Parameter position: The zero-based position of the assigned character to remove.
    - Returns: 
         if the character was successfully removed; otherwise, .

    */
    open func RemoveAt(position : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__RemoveAt_0__1__i32(&__thrown, self.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool RemoveAt(System.Int32, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)
    /**
    Removes the assigned characters between the specified positions from the formatted string.

    - Parameter startPosition: The zero-based index of the first assigned character to remove.
    - Parameter endPosition: The zero-based index of the last assigned character to remove.
    - Returns: 
         if the character was successfully removed; otherwise, .

    */
    open func RemoveAt(startPosition : Swift.Int32, endPosition : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__RemoveAt_0__2__i32_i32(&__thrown, self.get_handle(), startPosition, endPosition);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool RemoveAt(System.Int32, System.Int32, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.

    - Parameter startPosition: The zero-based index of the first assigned character to remove.
    - Parameter endPosition: The zero-based index of the last assigned character to remove.
    - Parameter testPosition: If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the operation. An output parameter.
    - Returns: 
         if the character was successfully removed; otherwise, .

    */
    open func RemoveAt(startPosition : Swift.Int32, endPosition : Swift.Int32, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__RemoveAt_0__4__i32_i32_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), startPosition, endPosition, &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Replace(System.Char, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)
    /**
    Replaces a single character at or beyond the specified position with the specified character value.

    - Parameter input: The  value that replaces the existing value.
    - Parameter position: The zero-based position to search for the first editable character to replace.
    - Returns: 
         if the character was successfully replaced; otherwise, .

    */
    open func Replace(input : dotnet.System.Char, position : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__Replace_0__2__Char_i32(&__thrown, self.get_handle(), input.get_value(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Replace(System.Char, System.Int32, System.Int32, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.

    - Parameter input: The  value that replaces the existing value.
    - Parameter startPosition: The zero-based position in the formatted string where the replacement starts.
    - Parameter endPosition: The zero-based position in the formatted string where the replacement ends.
    - Parameter testPosition: If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the replacement operation. An output parameter.
    - Returns: 
         if the character was successfully replaced; otherwise, .

    */
    open func Replace(input : dotnet.System.Char, startPosition : Swift.Int32, endPosition : Swift.Int32, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__Replace_0__5__Char_i32_i32_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_value(), startPosition, endPosition, &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Replace(System.Char, System.Int32, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.

    - Parameter input: The  value that replaces the existing value.
    - Parameter position: The zero-based position to search for the first editable character to replace.
    - Parameter testPosition: If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the replacement operation. An output parameter.
    - Returns: 
         if the character was successfully replaced; otherwise, .

    */
    open func Replace(input : dotnet.System.Char, position : Swift.Int32, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__Replace_0__4__Char_i32_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_value(), position, &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Replace(System.String, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)
    /**
    Replaces a range of editable characters starting at the specified position with the specified string.

    - Parameter input: The  value used to replace the existing editable characters.
    - Parameter position: The zero-based position to search for the first editable character to replace.
    - Returns: 
         if all the characters were successfully replaced; otherwise, .

    */
    open func Replace(input : dotnet.System.String, position : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__Replace_0__2__String_i32(&__thrown, self.get_handle(), input.get_handle(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Replace(System.String, System.Int32, System.Int32, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.

    - Parameter input: The  value used to replace the existing editable characters.
    - Parameter startPosition: The zero-based position in the formatted string where the replacement starts.
    - Parameter endPosition: The zero-based position in the formatted string where the replacement ends.
    - Parameter testPosition: If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the replacement operation. An output parameter.
    - Returns: 
         if all the characters were successfully replaced; otherwise, .

    */
    open func Replace(input : dotnet.System.String, startPosition : Swift.Int32, endPosition : Swift.Int32, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__Replace_0__5__String_i32_i32_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_handle(), startPosition, endPosition, &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Replace(System.String, System.Int32, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.

    - Parameter input: The  value used to replace the existing editable characters.
    - Parameter position: The zero-based position to search for the first editable character to replace.
    - Parameter testPosition: If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the replacement operation. An output parameter.
    - Returns: 
         if all the characters were successfully replaced; otherwise, .

    */
    open func Replace(input : dotnet.System.String, position : Swift.Int32, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__Replace_0__4__String_i32_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_handle(), position, &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Set(System.String)
// docid: M:System.ComponentModel.MaskedTextProvider.Set(System.String)
    /**
    Sets the formatted string to the specified input string.

    - Parameter input: The  value used to set the formatted string.
    - Returns: 
         if all the characters were successfully set; otherwise, .

    */
    open func Set(input : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__Set_0__1__String(&__thrown, self.get_handle(), input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Set(System.String, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.

    - Parameter input: The  value used to set the formatted string.
    - Parameter testPosition: If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the set operation. An output parameter.
    - Returns: 
         if all the characters were successfully set; otherwise, .

    */
    open func Set(input : dotnet.System.String, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__Set_0__3__String_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_handle(), &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToDisplayString()
// docid: M:System.ComponentModel.MaskedTextProvider.ToDisplayString
    /**
    Returns the formatted string in a displayable form.

    - Returns: The formatted  that includes prompts and mask literals.

    */
    open func ToDisplayString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__ToDisplayString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.MaskedTextProvider.ToString
    /**
    Returns the formatted string that includes all the assigned character values.

    - Returns: The formatted  that includes all the assigned character values.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(bool)
// docid: M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)
    /**
    Returns the formatted string, optionally including password characters.

    - Parameter ignorePasswordChar: 
         to return the actual editable characters; otherwise,  to indicate that the  property is to be honored.
    - Returns: The formatted  that includes literals, prompts, and optionally password characters.

    */
    open func ToString(ignorePasswordChar : Bool) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__ToString_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(ignorePasswordChar ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(bool, bool)
// docid: M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)
    /**
    Returns the formatted string, optionally including prompt and literal characters.

    - Parameter includePrompt: 
         to include prompt characters in the return string; otherwise, .
    - Parameter includeLiterals: 
         to include literal characters in the return string; otherwise, .
    - Returns: The formatted  that includes all the assigned character values and optionally includes literals and prompts.

    */
    open func ToString(includePrompt : Bool, includeLiterals : Bool) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__ToString_0__2__bool_bool(&__thrown, self.get_handle(), Swift.Int32(includePrompt ? 1 : 0), Swift.Int32(includeLiterals ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(bool, bool, bool, System.Int32, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
    /**
    Returns a substring of the formatted string, optionally including prompt, literal, and password characters.

    - Parameter ignorePasswordChar: 
         to return the actual editable characters; otherwise,  to indicate that the  property is to be honored.
    - Parameter includePrompt: 
         to include prompt characters in the return string; otherwise, .
    - Parameter includeLiterals: 
         to return literal characters in the return string; otherwise, .
    - Parameter startPosition: The zero-based position in the formatted string where the output begins.
    - Parameter length: The number of characters to return.
    - Returns: If successful, a substring of the formatted , which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the  string.

    */
    open func ToString(ignorePasswordChar : Bool, includePrompt : Bool, includeLiterals : Bool, startPosition : Swift.Int32, length : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__ToString_0__5__bool_bool_bool_i32_i32(&__thrown, self.get_handle(), Swift.Int32(ignorePasswordChar ? 1 : 0), Swift.Int32(includePrompt ? 1 : 0), Swift.Int32(includeLiterals ? 1 : 0), startPosition, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(bool, bool, System.Int32, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)
    /**
    Returns a substring of the formatted string, optionally including prompt and literal characters.

    - Parameter includePrompt: 
         to include prompt characters in the return string; otherwise, .
    - Parameter includeLiterals: 
         to include literal characters in the return string; otherwise, .
    - Parameter startPosition: The zero-based position in the formatted string where the output begins.
    - Parameter length: The number of characters to return.
    - Returns: If successful, a substring of the formatted , which includes all the assigned character values and optionally includes literals and prompts; otherwise the  string.

    */
    open func ToString(includePrompt : Bool, includeLiterals : Bool, startPosition : Swift.Int32, length : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__ToString_0__4__bool_bool_i32_i32(&__thrown, self.get_handle(), Swift.Int32(includePrompt ? 1 : 0), Swift.Int32(includeLiterals ? 1 : 0), startPosition, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(bool, System.Int32, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)
    /**
    Returns a substring of the formatted string, optionally including password characters.

    - Parameter ignorePasswordChar: 
         to return the actual editable characters; otherwise,  to indicate that the  property is to be honored.
    - Parameter startPosition: The zero-based position in the formatted string where the output begins.
    - Parameter length: The number of characters to return.
    - Returns: If successful, a substring of the formatted , which includes literals, prompts, and optionally password characters; otherwise the  string.

    */
    open func ToString(ignorePasswordChar : Bool, startPosition : Swift.Int32, length : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__ToString_0__3__bool_i32_i32(&__thrown, self.get_handle(), Swift.Int32(ignorePasswordChar ? 1 : 0), startPosition, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.Int32, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)
    /**
    Returns a substring of the formatted string.

    - Parameter startPosition: The zero-based position in the formatted string where the output begins.
    - Parameter length: The number of characters to return.
    - Returns: If successful, a substring of the formatted , which includes all the assigned character values; otherwise the  string.

    */
    open func ToString(startPosition : Swift.Int32, length : Swift.Int32) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__ToString_0__2__i32_i32(&__thrown, self.get_handle(), startPosition, length);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool VerifyChar(System.Char, System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)
    /**
    Tests whether the specified character could be set successfully at the specified position.

    - Parameter input: The  value to test.
    - Parameter position: The position in the mask to test the input character against.
    - Parameter hint: A  that succinctly describes the result of the operation. An output parameter.
    - Returns: 
         if the specified character is valid for the specified position; otherwise, .

    */
    open func VerifyChar(input : dotnet.System.Char, position : Swift.Int32, hint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_hint = hint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__VerifyChar_0__3__Char_i32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_value(), position, &_tmp_out_hint);
        let _tmp2_hint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_hint);
            hint = _tmp2_hint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool VerifyEscapeChar(System.Char, System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)
    /**
    Tests whether the specified character would be escaped at the specified position.

    - Parameter input: The  value to test.
    - Parameter position: The position in the mask to test the input character against.
    - Returns: 
         if the specified character would be escaped at the specified position; otherwise, .

    */
    open func VerifyEscapeChar(input : dotnet.System.Char, position : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__VerifyEscapeChar_0__2__Char_i32(&__thrown, self.get_handle(), input.get_value(), position);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool VerifyString(System.String)
// docid: M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)
    /**
    Tests whether the specified string could be set successfully.

    - Parameter input: The  value to test.
    - Returns: 
         if the specified string represents valid input; otherwise, .

    */
    open func VerifyString(input : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__VerifyString_0__1__String(&__thrown, self.get_handle(), input.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool VerifyString(System.String, ref System.Int32, ref System.ComponentModel.MaskedTextResultHint)
// docid: M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
    /**
    Tests whether the specified string could be set successfully, and then outputs position and descriptive information.

    - Parameter input: The  value to test.
    - Parameter testPosition: If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.
    - Parameter resultHint: A  that succinctly describes the result of the test operation. An output parameter.
    - Returns: 
         if the specified string represents valid input; otherwise, .

    */
    open func VerifyString(input : dotnet.System.String, testPosition : inout Swift.Int32, resultHint : inout dotnet.System.ComponentModel.MaskedTextResultHint) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_testPosition = testPosition;
            var _tmp_out_resultHint = resultHint.get_value();
        let __return = System_ComponentModel_MaskedTextProvider_bool__VerifyString_0__3__String_outi32_outMaskedTextResultHint(&__thrown, self.get_handle(), input.get_handle(), &_tmp_out_testPosition, &_tmp_out_resultHint);
        let _tmp2_testPosition = _tmp_out_testPosition;
            testPosition = _tmp2_testPosition;
        let _tmp2_resultHint = dotnet.System.ComponentModel.MaskedTextResultHint(val: _tmp_out_resultHint);
            resultHint = _tmp2_resultHint;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AllowPromptAsInput()
// docid: M:System.ComponentModel.MaskedTextProvider.get_AllowPromptAsInput
    open func get_AllowPromptAsInput() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_AllowPromptAsInput_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_AsciiOnly()
// docid: M:System.ComponentModel.MaskedTextProvider.get_AsciiOnly
    open func get_AsciiOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_AsciiOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_AssignedEditPositionCount()
// docid: M:System.ComponentModel.MaskedTextProvider.get_AssignedEditPositionCount
    open func get_AssignedEditPositionCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__get_AssignedEditPositionCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_AvailableEditPositionCount()
// docid: M:System.ComponentModel.MaskedTextProvider.get_AvailableEditPositionCount
    open func get_AvailableEditPositionCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__get_AvailableEditPositionCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Globalization.CultureInfo get_Culture()
// docid: M:System.ComponentModel.MaskedTextProvider.get_Culture
    open func get_Culture() throws -> dotnet.System.Globalization.CultureInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_CultureInfo__get_Culture_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Globalization.CultureInfo(hndl : __return);
        }
    }
    // [IsSpecialName] System.Char get_DefaultPasswordChar()
// docid: M:System.ComponentModel.MaskedTextProvider.get_DefaultPasswordChar
    open class func get_DefaultPasswordChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_Char__get_DefaultPasswordChar_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] System.Int32 get_EditPositionCount()
// docid: M:System.ComponentModel.MaskedTextProvider.get_EditPositionCount
    open func get_EditPositionCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__get_EditPositionCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.IEnumerator get_EditPositions()
// docid: M:System.ComponentModel.MaskedTextProvider.get_EditPositions
    open func get_EditPositions() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_IEnumerator__get_EditPositions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IncludeLiterals()
// docid: M:System.ComponentModel.MaskedTextProvider.get_IncludeLiterals
    open func get_IncludeLiterals() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_IncludeLiterals_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeLiterals(bool)
// docid: M:System.ComponentModel.MaskedTextProvider.set_IncludeLiterals(System.Boolean)
    open func set_IncludeLiterals(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__set_IncludeLiterals_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IncludePrompt()
// docid: M:System.ComponentModel.MaskedTextProvider.get_IncludePrompt
    open func get_IncludePrompt() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_IncludePrompt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludePrompt(bool)
// docid: M:System.ComponentModel.MaskedTextProvider.set_IncludePrompt(System.Boolean)
    open func set_IncludePrompt(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__set_IncludePrompt_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_InvalidIndex()
// docid: M:System.ComponentModel.MaskedTextProvider.get_InvalidIndex
    open class func get_InvalidIndex() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__get_InvalidIndex_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_IsPassword()
// docid: M:System.ComponentModel.MaskedTextProvider.get_IsPassword
    open func get_IsPassword() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_IsPassword_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IsPassword(bool)
// docid: M:System.ComponentModel.MaskedTextProvider.set_IsPassword(System.Boolean)
    open func set_IsPassword(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__set_IsPassword_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_LastAssignedPosition()
// docid: M:System.ComponentModel.MaskedTextProvider.get_LastAssignedPosition
    open func get_LastAssignedPosition() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__get_LastAssignedPosition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_Length()
// docid: M:System.ComponentModel.MaskedTextProvider.get_Length
    open func get_Length() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_i32__get_Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Mask()
// docid: M:System.ComponentModel.MaskedTextProvider.get_Mask
    open func get_Mask() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_String__get_Mask_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_MaskCompleted()
// docid: M:System.ComponentModel.MaskedTextProvider.get_MaskCompleted
    open func get_MaskCompleted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_MaskCompleted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_MaskFull()
// docid: M:System.ComponentModel.MaskedTextProvider.get_MaskFull
    open func get_MaskFull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_MaskFull_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Char get_PasswordChar()
// docid: M:System.ComponentModel.MaskedTextProvider.get_PasswordChar
    open func get_PasswordChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_Char__get_PasswordChar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] void set_PasswordChar(System.Char)
// docid: M:System.ComponentModel.MaskedTextProvider.set_PasswordChar(System.Char)
    open func set_PasswordChar(value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__set_PasswordChar_0__1__Char(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Char get_PromptChar()
// docid: M:System.ComponentModel.MaskedTextProvider.get_PromptChar
    open func get_PromptChar() throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_Char__get_PromptChar_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] void set_PromptChar(System.Char)
// docid: M:System.ComponentModel.MaskedTextProvider.set_PromptChar(System.Char)
    open func set_PromptChar(value : dotnet.System.Char) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__set_PromptChar_0__1__Char(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ResetOnPrompt()
// docid: M:System.ComponentModel.MaskedTextProvider.get_ResetOnPrompt
    open func get_ResetOnPrompt() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_ResetOnPrompt_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ResetOnPrompt(bool)
// docid: M:System.ComponentModel.MaskedTextProvider.set_ResetOnPrompt(System.Boolean)
    open func set_ResetOnPrompt(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__set_ResetOnPrompt_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_ResetOnSpace()
// docid: M:System.ComponentModel.MaskedTextProvider.get_ResetOnSpace
    open func get_ResetOnSpace() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_ResetOnSpace_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_ResetOnSpace(bool)
// docid: M:System.ComponentModel.MaskedTextProvider.set_ResetOnSpace(System.Boolean)
    open func set_ResetOnSpace(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__set_ResetOnSpace_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SkipLiterals()
// docid: M:System.ComponentModel.MaskedTextProvider.get_SkipLiterals
    open func get_SkipLiterals() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_bool__get_SkipLiterals_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SkipLiterals(bool)
// docid: M:System.ComponentModel.MaskedTextProvider.set_SkipLiterals(System.Boolean)
    open func set_SkipLiterals(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_MaskedTextProvider_void__set_SkipLiterals_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Char get_Item(System.Int32)
// docid: M:System.ComponentModel.MaskedTextProvider.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MaskedTextProvider_Char__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    /**
    Gets a value indicating whether the prompt character should be treated as a valid input character or not.

    */
    open var AllowPromptAsInput : Bool {
        get {
            return try! get_AllowPromptAsInput();
        }
    }
    /**
    Gets a value indicating whether the mask accepts characters outside of the ASCII character set.

    */
    open var AsciiOnly : Bool {
        get {
            return try! get_AsciiOnly();
        }
    }
    /**
    Gets the number of editable character positions that have already been successfully assigned an input value.

    */
    open var AssignedEditPositionCount : Swift.Int32 {
        get {
            return try! get_AssignedEditPositionCount();
        }
    }
    /**
    Gets the number of editable character positions in the input mask that have not yet been assigned an input value.

    */
    open var AvailableEditPositionCount : Swift.Int32 {
        get {
            return try! get_AvailableEditPositionCount();
        }
    }
    /**
    Gets the culture that determines the value of the localizable separators and placeholders in the input mask.

    */
    open var Culture : dotnet.System.Globalization.CultureInfo {
        get {
            return try! get_Culture();
        }
    }
    /**
    Gets the default password character used obscure user input.

    */
    public static var DefaultPasswordChar : dotnet.System.Char {
        get {
            return try! get_DefaultPasswordChar();
        }
    }
    /**
    Gets the number of editable positions in the formatted string.

    */
    open var EditPositionCount : Swift.Int32 {
        get {
            return try! get_EditPositionCount();
        }
    }
    /**
    Gets a newly created enumerator for the editable positions in the formatted string.

    */
    open var EditPositions : dotnet.System.Collections.IEnumerator {
        get {
            return try! get_EditPositions();
        }
    }
    /**
    Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.

    */
    open var IncludeLiterals : Bool {
        get {
            return try! get_IncludeLiterals();
        }
        set(v) {
            return try! set_IncludeLiterals(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether  is used to represent the absence of user input when displaying the formatted string.

    */
    open var IncludePrompt : Bool {
        get {
            return try! get_IncludePrompt();
        }
        set(v) {
            return try! set_IncludePrompt(value: v);
        }
    }
    /**
    Gets the upper bound of the range of invalid indexes.

    */
    public static var InvalidIndex : Swift.Int32 {
        get {
            return try! get_InvalidIndex();
        }
    }
    /**
    Gets or sets a value that determines whether password protection should be applied to the formatted string.

    */
    open var IsPassword : Bool {
        get {
            return try! get_IsPassword();
        }
        set(v) {
            return try! set_IsPassword(value: v);
        }
    }
    /**
    Gets the index in the mask of the rightmost input character that has been assigned to the mask.

    */
    open var LastAssignedPosition : Swift.Int32 {
        get {
            return try! get_LastAssignedPosition();
        }
    }
    /**
    Gets the length of the mask, absent any mask modifier characters.

    */
    open var Length : Swift.Int32 {
        get {
            return try! get_Length();
        }
    }
    /**
    Gets the input mask.

    */
    open var Mask : dotnet.System.String {
        get {
            return try! get_Mask();
        }
    }
    /**
    Gets a value indicating whether all required inputs have been entered into the formatted string.

    */
    open var MaskCompleted : Bool {
        get {
            return try! get_MaskCompleted();
        }
    }
    /**
    Gets a value indicating whether all required and optional inputs have been entered into the formatted string.

    */
    open var MaskFull : Bool {
        get {
            return try! get_MaskFull();
        }
    }
    /**
    Gets or sets the character to be substituted for the actual input characters.

    */
    open var PasswordChar : dotnet.System.Char {
        get {
            return try! get_PasswordChar();
        }
        set(v) {
            return try! set_PasswordChar(value: v);
        }
    }
    /**
    Gets or sets the character used to represent the absence of user input for all available edit positions.

    */
    open var PromptChar : dotnet.System.Char {
        get {
            return try! get_PromptChar();
        }
        set(v) {
            return try! set_PromptChar(value: v);
        }
    }
    /**
    Gets or sets a value that determines how an input character that matches the prompt character should be handled.

    */
    open var ResetOnPrompt : Bool {
        get {
            return try! get_ResetOnPrompt();
        }
        set(v) {
            return try! set_ResetOnPrompt(value: v);
        }
    }
    /**
    Gets or sets a value that determines how a space input character should be handled.

    */
    open var ResetOnSpace : Bool {
        get {
            return try! get_ResetOnSpace();
        }
        set(v) {
            return try! set_ResetOnSpace(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.

    */
    open var SkipLiterals : Bool {
        get {
            return try! get_SkipLiterals();
        }
        set(v) {
            return try! set_SkipLiterals(value: v);
        }
    }
} // MaskedTextProvider


// type: System.ComponentModel.MaskedTextResultHint
    /**
    Specifies values that succinctly describe the results of a masked text parsing operation.

    */
public struct MaskedTextResultHint : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_MaskedTextResultHint_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.MaskedTextResultHint PositionOutOfRange
    /**
    Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.

    */
    public static var PositionOutOfRange : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_PositionOutOfRange());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint NonEditPosition
    /**
    Operation did not succeed. The current position in the formatted string is a literal character.

    */
    public static var NonEditPosition : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_NonEditPosition());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint UnavailableEditPosition
    /**
    Operation did not succeed. There were not enough edit positions available to fulfill the request.

    */
    public static var UnavailableEditPosition : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_UnavailableEditPosition());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint PromptCharNotAllowed
    /**
    Operation did not succeed. The prompt character is not valid at input, perhaps because the  property is set to .

    */
    public static var PromptCharNotAllowed : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_PromptCharNotAllowed());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint InvalidInput
    /**
    Operation did not succeed. The program encountered an  input character that was not valid. For more information about characters that are not valid, see the  method.

    */
    public static var InvalidInput : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_InvalidInput());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint SignedDigitExpected
    /**
    Operation did not succeed. An input character was encountered that was not a signed digit.

    */
    public static var SignedDigitExpected : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_SignedDigitExpected());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint LetterExpected
    /**
    Operation did not succeed. An input character was encountered that was not a letter.

    */
    public static var LetterExpected : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_LetterExpected());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint DigitExpected
    /**
    Operation did not succeed. An input character was encountered that was not a digit.

    */
    public static var DigitExpected : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_DigitExpected());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint AlphanumericCharacterExpected
    /**
    Operation did not succeed.An input character was encountered that was not alphanumeric. .

    */
    public static var AlphanumericCharacterExpected : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_AlphanumericCharacterExpected());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint AsciiCharacterExpected
    /**
    Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.

    */
    public static var AsciiCharacterExpected : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_AsciiCharacterExpected());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint Unknown
    /**
    Unknown. The result of the operation could not be determined.

    */
    public static var Unknown : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_Unknown());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint CharacterEscaped
    /**
    Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the  method.

    */
    public static var CharacterEscaped : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_CharacterEscaped());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint NoEffect
    /**
    Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.

    */
    public static var NoEffect : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_NoEffect());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint SideEffect
    /**
    Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the  method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.

    */
    public static var SideEffect : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_SideEffect());
            return __return;
        }
    }
    // static field: System.ComponentModel.MaskedTextResultHint Success
    /**
    Success. The primary operation succeeded.

    */
    public static var Success : dotnet.System.ComponentModel.MaskedTextResultHint {
        get {
        let __return = dotnet.System.ComponentModel.MaskedTextResultHint(val: System_ComponentModel_MaskedTextResultHint_get_Success());
            return __return;
        }
    }
} // MaskedTextResultHint


// type: System.ComponentModel.MemberDescriptor
    /**
    Represents a class member, such as a property or event. This is an abstract base class.

    */
open class MemberDescriptor
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_MemberDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.MemberDescriptor.Equals(System.Object)
    /**
    Compares this instance to the given object to see if they are equivalent.

    - Parameter obj: The object to compare to the current instance.
    - Returns: 
         if equivalent; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.MemberDescriptor.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.ComponentModel.AttributeCollection get_Attributes()
// docid: M:System.ComponentModel.MemberDescriptor.get_Attributes
    open func get_Attributes() throws -> dotnet.System.ComponentModel.AttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_AttributeCollection__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AttributeCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Category()
// docid: M:System.ComponentModel.MemberDescriptor.get_Category
    open func get_Category() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_String__get_Category_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.ComponentModel.MemberDescriptor.get_Description
    open func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_DesignTimeOnly()
// docid: M:System.ComponentModel.MemberDescriptor.get_DesignTimeOnly
    open func get_DesignTimeOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_bool__get_DesignTimeOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.ComponentModel.MemberDescriptor.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsBrowsable()
// docid: M:System.ComponentModel.MemberDescriptor.get_IsBrowsable
    open func get_IsBrowsable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_bool__get_IsBrowsable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.MemberDescriptor.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MemberDescriptor_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the collection of attributes for this member.

    */
    open var Attributes : dotnet.System.ComponentModel.AttributeCollection {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets the name of the category to which the member belongs, as specified in the .

    */
    open var Category : dotnet.System.String {
        get {
            return try! get_Category();
        }
    }
    /**
    Gets the description of the member, as specified in the .

    */
    open var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
    }
    /**
    Gets whether this member should be set only at design time, as specified in the .

    */
    open var DesignTimeOnly : Bool {
        get {
            return try! get_DesignTimeOnly();
        }
    }
    /**
    Gets the name that can be displayed in a window, such as a Properties window.

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
    }
    /**
    Gets a value indicating whether the member is browsable, as specified in the .

    */
    open var IsBrowsable : Bool {
        get {
            return try! get_IsBrowsable();
        }
    }
    /**
    Gets the name of the member.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // MemberDescriptor


// type: System.ComponentModel.MultilineStringConverter
    /**
    Provides a type converter to convert multiline strings to a simple string.

    */
open class MultilineStringConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_MultilineStringConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.MultilineStringConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_MultilineStringConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified type, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A . If  is passed, the current culture is assumed.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value parameter to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MultilineStringConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Returns a collection of properties for the type of array specified by the  parameter, using the specified context and attributes.

    - Parameter context: An  that provides a format context.
    - Parameter value: An  that specifies the type of array for which to get properties.
    - Parameter attributes: An array of type  that is used as a filter.
    - Returns: A  with the properties that are exposed for this data type, or  if there are no properties.

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptorCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MultilineStringConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether this object supports properties, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if  should be called to find the properties of this object; otherwise, .

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_MultilineStringConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // MultilineStringConverter


// type: System.ComponentModel.NestedContainer
    /**
    Provides the base implementation for the  interface, which enables containers to have an owning component.

    */
open class NestedContainer
    :
    dotnet.System.ComponentModel.Container,
    System_ComponentModel_INestedContainer
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_NestedContainer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
    /**
    Initializes a new instance of the  class.

    - Parameter owner: The  that owns this nested container.
    */
    public init(owner : dotnet.System.ComponentModel.IComponent) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_NestedContainer_ctor_0__1__IComponent(&__thrown, owner.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.IComponent get_Owner()
// docid: M:System.ComponentModel.NestedContainer.get_Owner
    open /* method final */ func get_Owner() throws -> dotnet.System.ComponentModel.IComponent {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NestedContainer_IComponent__get_Owner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IComponent(hndl : __return);
        }
    }
    /**
    Gets the owning component for this nested container.

    */
    public var Owner : dotnet.System.ComponentModel.IComponent {
        get {
            return try! get_Owner();
        }
    }
} // NestedContainer


// type: System.ComponentModel.NullableConverter
    /**
    Provides automatic conversion between a nullable type and its underlying primitive type.

    */
open class NullableConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_NullableConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.NullableConverter.#ctor(System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter type: The specified nullable type.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_NullableConverter_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you want to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns whether this converter can convert the object to the specified type, using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you want to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to the type of this converter, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The  to use as the current culture.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified type, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The  to use as the current culture.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value parameter to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
// docid: M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
    /**
    Creates an instance of the type that this  is associated with, using the specified context, given a set of property values for the object.

    - Parameter context: An  that provides a format context.
    - Parameter propertyValues: An  of new property values.
    - Returns: An  representing the given , or  if the object cannot be created. This method always returns .

    */
    open override func CreateInstance(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, propertyValues : dotnet.System.Collections.IDictionary) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_Object__CreateInstance_0__2__ITypeDescriptorContext_IDictionary(&__thrown, self.get_handle(), context?.get_handle() ?? nil, propertyValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether changing a value on this object requires a call to  to create a new value, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if changing a property on this object requires a call to  to create a new value; otherwise, .

    */
    open override func GetCreateInstanceSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_bool__GetCreateInstanceSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.

    - Parameter context: An  that provides a format context.
    - Parameter value: An  that specifies the type of array for which to get properties.
    - Parameter attributes: An array of type  that is used as a filter.
    - Returns: A  with the properties that are exposed for this data type, or  if there are no properties.

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptorCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether this object supports properties, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if  should be called to find the properties of this object; otherwise, .

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.

    - Parameter context: An  that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be .
    - Returns: A  that holds a standard set of valid values, or  if the data type does not support a standard set of values.

    */
    open override func GetStandardValues(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Optional<dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_TypeConverter_StandardValuesCollection__GetStandardValues_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether the collection of standard values returned from  is an exclusive list of possible values, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if the  returned from  is an exhaustive list of possible values;  if other values are possible.

    */
    open override func GetStandardValuesExclusive(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_bool__GetStandardValuesExclusive_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if  should be called to find a common set of values the object supports; otherwise, .

    */
    open override func GetStandardValuesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_bool__GetStandardValuesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Returns whether the given value object is valid for this type and for the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter value: The  to test for validity.
    - Returns: 
         if the specified value is valid for this object; otherwise, .

    */
    open override func IsValid(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_bool__IsValid_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_NullableType()
// docid: M:System.ComponentModel.NullableConverter.get_NullableType
    open func get_NullableType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_Type__get_NullableType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_UnderlyingType()
// docid: M:System.ComponentModel.NullableConverter.get_UnderlyingType
    open func get_UnderlyingType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_Type__get_UnderlyingType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.TypeConverter get_UnderlyingTypeConverter()
// docid: M:System.ComponentModel.NullableConverter.get_UnderlyingTypeConverter
    open func get_UnderlyingTypeConverter() throws -> dotnet.System.ComponentModel.TypeConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_NullableConverter_TypeConverter__get_UnderlyingTypeConverter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter(hndl : __return);
        }
    }
    /**
    Gets the nullable type.

    */
    open var NullableType : dotnet.System.Type_ {
        get {
            return try! get_NullableType();
        }
    }
    /**
    Gets the underlying type.

    */
    open var UnderlyingType : dotnet.System.Type_ {
        get {
            return try! get_UnderlyingType();
        }
    }
    /**
    Gets the underlying type converter.

    */
    open var UnderlyingTypeConverter : dotnet.System.ComponentModel.TypeConverter {
        get {
            return try! get_UnderlyingTypeConverter();
        }
    }
} // NullableConverter


// type: System.ComponentModel.PasswordPropertyTextAttribute
    /**
    Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.

    */
public final class PasswordPropertyTextAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PasswordPropertyTextAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.PasswordPropertyTextAttribute Default
    /**
    Specifies the default value for the .

    */
    public class var Default : dotnet.System.ComponentModel.PasswordPropertyTextAttribute {
        get {
        let __return = dotnet.System.ComponentModel.PasswordPropertyTextAttribute(hndl: System_ComponentModel_PasswordPropertyTextAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.PasswordPropertyTextAttribute No
    /**
    Specifies that a text property is not used as a password. This  ( in Visual Basic) field is read-only.

    */
    public class var No : dotnet.System.ComponentModel.PasswordPropertyTextAttribute {
        get {
        let __return = dotnet.System.ComponentModel.PasswordPropertyTextAttribute(hndl: System_ComponentModel_PasswordPropertyTextAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.PasswordPropertyTextAttribute Yes
    /**
    Specifies that a text property is used as a password. This  ( in Visual Basic) field is read-only.

    */
    public class var Yes : dotnet.System.ComponentModel.PasswordPropertyTextAttribute {
        get {
        let __return = dotnet.System.ComponentModel.PasswordPropertyTextAttribute(hndl: System_ComponentModel_PasswordPropertyTextAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PasswordPropertyTextAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class, optionally showing password text.

    - Parameter password: 
         to indicate that the property should be shown as password text; otherwise, . The default is .
    */
    public init(password : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PasswordPropertyTextAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(password ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)
    /**
    Determines whether two  instances are equal.

    - Parameter o: The  to compare with the current .
    - Returns: 
         if the specified  is equal to the current ; otherwise, .

    */
    public func Equals(o : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PasswordPropertyTextAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PasswordPropertyTextAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute
    /**
    Returns an indication whether the value of this instance is the default value.

    - Returns: 
         if this instance is the default attribute for the class; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PasswordPropertyTextAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Password()
// docid: M:System.ComponentModel.PasswordPropertyTextAttribute.get_Password
    public func get_Password() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PasswordPropertyTextAttribute_bool__get_Password_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating if the property for which the  is defined should be shown as password text.

    */
    public var Password : Bool {
        get {
            return try! get_Password();
        }
    }
} // PasswordPropertyTextAttribute


// type: System.ComponentModel.PropertyDescriptor
    /**
    Provides an abstraction of a property on a class.

    */
open class PropertyDescriptor
    :
    dotnet.System.ComponentModel.MemberDescriptor
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PropertyDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddValueChanged(System.Object, System.EventHandler)
// docid: M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
    /**
    Enables other objects to be notified when this property changes.

    - Parameter component: The component to add the handler for.
    - Parameter handler: The delegate to add as a listener.
    */
    open func AddValueChanged(component : dotnet.System.Object, handler : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptor_void__AddValueChanged_0__2__Object_EventHandler(&__thrown, self.get_handle(), component.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func AddValueChanged(component : dotnet.System.Object, handler : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_handler = try dotnet.System.EventHandler(handler);
        return try AddValueChanged(component: component, handler: del_handler);
    }
    // bool CanResetValue(System.Object)
// docid: M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
    /**
    When overridden in a derived class, returns whether resetting an object changes its value.

    - Parameter component: The component to test for reset capability.
    - Returns: 
         if resetting the component changes its value; otherwise, .

    */
    open func CanResetValue(component : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_bool__CanResetValue_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)
    /**
    Compares this to another object to see if they are equivalent.

    - Parameter obj: The object to compare to this .
    - Returns: 
         if the values are equivalent; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetChildProperties()
// docid: M:System.ComponentModel.PropertyDescriptor.GetChildProperties
    /**
    Returns the default .

    - Returns: A collection of property descriptor.

    */
    open func GetChildProperties() throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_PropertyDescriptorCollection__GetChildProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetChildProperties(System.Attribute[])
// docid: M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
    /**
    Returns a  using a specified array of attributes as a filter.

    - Parameter filter: An array of type  to use as a filter.
    - Returns: A  with the properties that match the specified attributes.

    */
    open func GetChildProperties(filter : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_PropertyDescriptorCollection__GetChildProperties_0__1__AttributeArray(&__thrown, self.get_handle(), filter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetChildProperties(System.Object)
// docid: M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
    /**
    Returns a  for a given object.

    - Parameter instance: A component to get the properties for.
    - Returns: A  with the properties for the specified component.

    */
    open func GetChildProperties(instance : dotnet.System.Object) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_PropertyDescriptorCollection__GetChildProperties_0__1__Object(&__thrown, self.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetChildProperties(System.Object, System.Attribute[])
// docid: M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
    /**
    Returns a  for a given object using a specified array of attributes as a filter.

    - Parameter instance: A component to get the properties for.
    - Parameter filter: An array of type  to use as a filter.
    - Returns: A  with the properties that match the specified attributes for the specified component.

    */
    open func GetChildProperties(instance : Optional<dotnet.System.Object>, filter : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_PropertyDescriptorCollection__GetChildProperties_0__2__Object_AttributeArray(&__thrown, self.get_handle(), instance?.get_handle() ?? nil, (filter?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.Object GetEditor(System.Type)
// docid: M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
    /**
    Gets an editor of the specified type.

    - Parameter editorBaseType: The base type of editor, which is used to differentiate between multiple editors that a property supports.
    - Returns: An instance of the requested editor type, or  if an editor cannot be found.

    */
    open func GetEditor(editorBaseType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_Object__GetEditor_0__1__Type(&__thrown, self.get_handle(), editorBaseType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.PropertyDescriptor.GetHashCode
    /**
    Returns the hash code for this object.

    - Returns: The hash code for this object.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Object GetValue(System.Object)
// docid: M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
    /**
    When overridden in a derived class, gets the current value of the property on a component.

    - Parameter component: The component with the property for which to retrieve the value.
    - Returns: The value of a property for a given component.

    */
    open func GetValue(component : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_Object__GetValue_0__1__Object(&__thrown, self.get_handle(), component?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void RemoveValueChanged(System.Object, System.EventHandler)
// docid: M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
    /**
    Enables other objects to be notified when this property changes.

    - Parameter component: The component to remove the handler for.
    - Parameter handler: The delegate to remove as a listener.
    */
    open func RemoveValueChanged(component : dotnet.System.Object, handler : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptor_void__RemoveValueChanged_0__2__Object_EventHandler(&__thrown, self.get_handle(), component.get_handle(), handler.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func RemoveValueChanged(component : dotnet.System.Object, handler : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_handler = try dotnet.System.EventHandler(handler);
        return try RemoveValueChanged(component: component, handler: del_handler);
    }
    // void ResetValue(System.Object)
// docid: M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
    /**
    When overridden in a derived class, resets the value for this property of the component to the default value.

    - Parameter component: The component with the property value that is to be reset to the default value.
    */
    open func ResetValue(component : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptor_void__ResetValue_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.Object, System.Object)
// docid: M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
    /**
    When overridden in a derived class, sets the value of the component to a different value.

    - Parameter component: The component with the property value that is to be set.
    - Parameter value: The new value.
    */
    open func SetValue(component : Optional<dotnet.System.Object>, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptor_void__SetValue_0__2__Object_Object(&__thrown, self.get_handle(), component?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ShouldSerializeValue(System.Object)
// docid: M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
    /**
    When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.

    - Parameter component: The component with the property to be examined for persistence.
    - Returns: 
         if the property should be persisted; otherwise, .

    */
    open func ShouldSerializeValue(component : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_bool__ShouldSerializeValue_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_ComponentType()
// docid: M:System.ComponentModel.PropertyDescriptor.get_ComponentType
    open func get_ComponentType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_Type__get_ComponentType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.TypeConverter get_Converter()
// docid: M:System.ComponentModel.PropertyDescriptor.get_Converter
    open func get_Converter() throws -> dotnet.System.ComponentModel.TypeConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_TypeConverter__get_Converter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsLocalizable()
// docid: M:System.ComponentModel.PropertyDescriptor.get_IsLocalizable
    open func get_IsLocalizable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_bool__get_IsLocalizable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsReadOnly()
// docid: M:System.ComponentModel.PropertyDescriptor.get_IsReadOnly
    open func get_IsReadOnly() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_bool__get_IsReadOnly_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_PropertyType()
// docid: M:System.ComponentModel.PropertyDescriptor.get_PropertyType
    open func get_PropertyType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_Type__get_PropertyType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.DesignerSerializationVisibility get_SerializationVisibility()
// docid: M:System.ComponentModel.PropertyDescriptor.get_SerializationVisibility
    open func get_SerializationVisibility() throws -> dotnet.System.ComponentModel.DesignerSerializationVisibility {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_DesignerSerializationVisibility__get_SerializationVisibility_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.DesignerSerializationVisibility(val: __return);
        }
    }
    // [IsSpecialName] bool get_SupportsChangeEvents()
// docid: M:System.ComponentModel.PropertyDescriptor.get_SupportsChangeEvents
    open func get_SupportsChangeEvents() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptor_bool__get_SupportsChangeEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    When overridden in a derived class, gets the type of the component this property is bound to.

    */
    open var ComponentType : dotnet.System.Type_ {
        get {
            return try! get_ComponentType();
        }
    }
    /**
    Gets the type converter for this property.

    */
    open var Converter : dotnet.System.ComponentModel.TypeConverter {
        get {
            return try! get_Converter();
        }
    }
    /**
    Gets a value indicating whether this property should be localized, as specified in the .

    */
    open var IsLocalizable : Bool {
        get {
            return try! get_IsLocalizable();
        }
    }
    /**
    When overridden in a derived class, gets a value indicating whether this property is read-only.

    */
    open var IsReadOnly : Bool {
        get {
            return try! get_IsReadOnly();
        }
    }
    /**
    When overridden in a derived class, gets the type of the property.

    */
    open var PropertyType : dotnet.System.Type_ {
        get {
            return try! get_PropertyType();
        }
    }
    /**
    Gets a value indicating whether this property should be serialized, as specified in the .

    */
    open var SerializationVisibility : dotnet.System.ComponentModel.DesignerSerializationVisibility {
        get {
            return try! get_SerializationVisibility();
        }
    }
    /**
    Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.

    */
    open var SupportsChangeEvents : Bool {
        get {
            return try! get_SupportsChangeEvents();
        }
    }
} // PropertyDescriptor


// type: System.ComponentModel.PropertyDescriptorCollection
    /**
    Represents a collection of  objects.

    */
open class PropertyDescriptorCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IDictionary,
    System_Collections_IList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PropertyDescriptorCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.PropertyDescriptorCollection Empty
    /**
    Specifies an empty collection that you can use instead of creating a new one with no items. This  field is read-only.

    */
    open class var Empty : dotnet.System.ComponentModel.PropertyDescriptorCollection {
        get {
        let __return = dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl: System_ComponentModel_PropertyDescriptorCollection_get_Empty());
            return __return;
        }
    }
    // .ctor(System.ComponentModel.PropertyDescriptor[])
// docid: M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])
    /**
    Initializes a new instance of the  class.

    - Parameter properties: An array of type  that provides the properties for this collection.
    */
    public init(properties : Optional<dotnet.System_Arr<dotnet.System.ComponentModel.PropertyDescriptor>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyDescriptorCollection_ctor_0__1__PropertyDescriptorArray(&__thrown, (properties?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.PropertyDescriptor[], bool)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)
    /**
    Initializes a new instance of the  class, which is optionally read-only.

    - Parameter properties: An array of type  that provides the properties for this collection.
    - Parameter readOnly: If , specifies that the collection cannot be modified.
    */
    public init(properties : Optional<dotnet.System_Arr<dotnet.System.ComponentModel.PropertyDescriptor>>, readOnly : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyDescriptorCollection_ctor_0__2__PropertyDescriptorArray_bool(&__thrown, (properties?.get_handle()), Swift.Int32(readOnly ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
    /**
    Adds the specified  to the collection.

    - Parameter value: The  to add to the collection.
    - Returns: The index of the  that was added to the collection.

    */
    open func Add(value : dotnet.System.ComponentModel.PropertyDescriptor) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_i32__Add_0__1__PropertyDescriptor(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Clear()
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Clear
    /**
    Removes all  objects from the collection.

    */
    open func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptorCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
    /**
    Returns whether the collection contains the given .

    - Parameter value: The  to find in the collection.
    - Returns: 
         if the collection contains the given ; otherwise, .

    */
    open func Contains(value : dotnet.System.ComponentModel.PropertyDescriptor) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_bool__Contains_0__1__PropertyDescriptor(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the entire collection to an array, starting at the specified index number.

    - Parameter array: An array of  objects to copy elements of the collection to.
    - Parameter index: The index of the  parameter at which copying begins.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptorCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.PropertyDescriptor Find(System.String, bool)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)
    /**
    Returns the  with the specified name, using a Boolean to indicate whether to ignore case.

    - Parameter name: The name of the  to return from the collection.
    - Parameter ignoreCase: 
         if you want to ignore the case of the property name; otherwise, .
    - Returns: A  with the specified name, or  if the property does not exist.

    */
    open func Find(name : dotnet.System.String, ignoreCase : Bool) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_PropertyDescriptor__Find_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator
    /**
    Returns an enumerator for this class.

    - Returns: An enumerator of type .

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
    /**
    Returns the index of the given .

    - Parameter value: The  to return the index of.
    - Returns: The index of the given .

    */
    open func IndexOf(value : Optional<dotnet.System.ComponentModel.PropertyDescriptor>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_i32__IndexOf_0__1__PropertyDescriptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
    /**
    Adds the  to the collection at the specified index number.

    - Parameter index: The index at which to add the  parameter to the collection.
    - Parameter value: The  to add to the collection.
    */
    open func Insert(index : Swift.Int32, value : dotnet.System.ComponentModel.PropertyDescriptor) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptorCollection_void__Insert_0__2__i32_PropertyDescriptor(&__thrown, self.get_handle(), index, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
    /**
    Removes the specified  from the collection.

    - Parameter value: The  to remove from the collection.
    */
    open func Remove(value : Optional<dotnet.System.ComponentModel.PropertyDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptorCollection_void__Remove_0__1__PropertyDescriptor(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
    /**
    Removes the  at the specified index from the collection.

    - Parameter index: The index of the  to remove from the collection.
    */
    open func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_PropertyDescriptorCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection Sort()
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Sort
    /**
    Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.

    - Returns: A new  that contains the sorted  objects.

    */
    open func Sort() throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_PropertyDescriptorCollection__Sort_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection Sort(System.Collections.IComparer)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
    /**
    Sorts the members of this collection, using the specified .

    - Parameter comparer: A comparer to use to sort the  objects in this collection.
    - Returns: A new  that contains the sorted  objects.

    */
    open func Sort(comparer : Optional<dotnet.System.Collections.IComparer>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_PropertyDescriptorCollection__Sort_0__1__IComparer(&__thrown, self.get_handle(), comparer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection Sort(System.String[])
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
    /**
    Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.

    - Parameter names: An array of strings describing the order in which to sort the  objects in this collection.
    - Returns: A new  that contains the sorted  objects.

    */
    open func Sort(names : Optional<dotnet.System_Arr<dotnet.System.String>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_PropertyDescriptorCollection__Sort_0__1__StringArray(&__thrown, self.get_handle(), (names?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection Sort(System.String[], System.Collections.IComparer)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
    /**
    Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified .

    - Parameter names: An array of strings describing the order in which to sort the  objects in this collection.
    - Parameter comparer: A comparer to use to sort the  objects in this collection.
    - Returns: A new  that contains the sorted  objects.

    */
    open func Sort(names : Optional<dotnet.System_Arr<dotnet.System.String>>, comparer : Optional<dotnet.System.Collections.IComparer>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_PropertyDescriptorCollection__Sort_0__2__StringArray_IComparer(&__thrown, self.get_handle(), (names?.get_handle()), comparer?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.ComponentModel.PropertyDescriptorCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptor get_Item(System.Int32)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> dotnet.System.ComponentModel.PropertyDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_PropertyDescriptor__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptor get_Item(System.String)
// docid: M:System.ComponentModel.PropertyDescriptorCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyDescriptorCollection_PropertyDescriptor__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of property descriptors in the collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // PropertyDescriptorCollection


// type: System.ComponentModel.PropertyTabAttribute
    /**
    Identifies the property tab or tabs to display for the specified class or classes.

    */
open class PropertyTabAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PropertyTabAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.PropertyTabAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyTabAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified tab class name.

    - Parameter tabClassName: The assembly qualified name of the type of tab to create. For an example of this format convention, see .
    */
    public init(tabClassName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyTabAttribute_ctor_0__1__String(&__thrown, tabClassName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.ComponentModel.PropertyTabScope)
// docid: M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)
    /**
    Initializes a new instance of the  class using the specified tab class name and tab scope.

    - Parameter tabClassName: The assembly qualified name of the type of tab to create. For an example of this format convention, see .
    - Parameter tabScope: A  that indicates the scope of this tab. If the scope is , it is shown only for components with the corresponding . If it is , it is shown for all components on the document.
    */
    public init(tabClassName : dotnet.System.String, tabScope : dotnet.System.ComponentModel.PropertyTabScope) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyTabAttribute_ctor_0__2__String_PropertyTabScope(&__thrown, tabClassName.get_handle(), tabScope.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class using the specified type of tab.

    - Parameter tabClass: The type of tab to create.
    */
    public init(tabClass : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyTabAttribute_ctor_0__1__Type(&__thrown, tabClass.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.ComponentModel.PropertyTabScope)
// docid: M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)
    /**
    Initializes a new instance of the  class using the specified type of tab and tab scope.

    - Parameter tabClass: The type of tab to create.
    - Parameter tabScope: A  that indicates the scope of this tab. If the scope is , it is shown only for components with the corresponding . If it is , it is shown for all components on the document.
    */
    public init(tabClass : dotnet.System.Type_, tabScope : dotnet.System.ComponentModel.PropertyTabScope) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_PropertyTabAttribute_ctor_0__2__Type_PropertyTabScope(&__thrown, tabClass.get_handle(), tabScope.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.ComponentModel.PropertyTabAttribute)
// docid: M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)
    /**
    Returns a value indicating whether this instance is equal to a specified attribute.

    - Parameter other: A  to compare to this instance, or .
    - Returns: 
         if the  instances are equal; otherwise, .

    */
    open func Equals(other : dotnet.System.ComponentModel.PropertyTabAttribute) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyTabAttribute_bool__Equals_0__1__PropertyTabAttribute(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)
    /**
    Returns a value indicating whether this instance is equal to a specified object.

    - Parameter other: An object to compare to this instance, or .
    - Returns: 
         if  refers to the same  instance; otherwise, .

    */
    open func Equals(other : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyTabAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), other?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.PropertyTabAttribute.GetHashCode
    /**
    Gets the hash code for this object.

    - Returns: The hash code for the object the attribute belongs to.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyTabAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Type[] get_TabClasses()
// docid: M:System.ComponentModel.PropertyTabAttribute.get_TabClasses
    open func get_TabClasses() throws -> dotnet.System_Arr<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyTabAttribute_TypeArray__get_TabClasses_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Type_>(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyTabScope[] get_TabScopes()
// docid: M:System.ComponentModel.PropertyTabAttribute.get_TabScopes
    open func get_TabScopes() throws -> dotnet.System_Arr<dotnet.System.ComponentModel.PropertyTabScope> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_PropertyTabAttribute_PropertyTabScopeArray__get_TabScopes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.ComponentModel.PropertyTabScope>(hndl : __return);
        }
    }
    /**
    Gets the types of tabs that this attribute uses.

    */
    open var TabClasses : dotnet.System_Arr<dotnet.System.Type_> {
        get {
            return try! get_TabClasses();
        }
    }
    /**
    Gets an array of tab scopes of each tab of this .

    */
    open var TabScopes : dotnet.System_Arr<dotnet.System.ComponentModel.PropertyTabScope> {
        get {
            return try! get_TabScopes();
        }
    }
} // PropertyTabAttribute


// type: System.ComponentModel.PropertyTabScope
    /**
    Defines identifiers that indicate the persistence scope of a tab in the Properties window.

    */
public struct PropertyTabScope : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_PropertyTabScope_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.PropertyTabScope Static
    /**
    This tab is added to the Properties window and cannot be removed.

    */
    public static var Static : dotnet.System.ComponentModel.PropertyTabScope {
        get {
        let __return = dotnet.System.ComponentModel.PropertyTabScope(val: System_ComponentModel_PropertyTabScope_get_Static());
            return __return;
        }
    }
    // static field: System.ComponentModel.PropertyTabScope Global
    /**
    This tab is added to the Properties window and can only be removed explicitly by a parent component.

    */
    public static var Global : dotnet.System.ComponentModel.PropertyTabScope {
        get {
        let __return = dotnet.System.ComponentModel.PropertyTabScope(val: System_ComponentModel_PropertyTabScope_get_Global());
            return __return;
        }
    }
    // static field: System.ComponentModel.PropertyTabScope Document
    /**
    This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.

    */
    public static var Document : dotnet.System.ComponentModel.PropertyTabScope {
        get {
        let __return = dotnet.System.ComponentModel.PropertyTabScope(val: System_ComponentModel_PropertyTabScope_get_Document());
            return __return;
        }
    }
    // static field: System.ComponentModel.PropertyTabScope Component
    /**
    This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.

    */
    public static var Component : dotnet.System.ComponentModel.PropertyTabScope {
        get {
        let __return = dotnet.System.ComponentModel.PropertyTabScope(val: System_ComponentModel_PropertyTabScope_get_Component());
            return __return;
        }
    }
} // PropertyTabScope


// type: System.ComponentModel.ProvidePropertyAttribute
    /**
    Specifies the name of the property that an implementer of  offers to other components. This class cannot be inherited.

    */
public final class ProvidePropertyAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ProvidePropertyAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the name of the property and the type of its receiver.

    - Parameter propertyName: The name of the property extending to an object of the specified type.
    - Parameter receiverTypeName: The name of the data type this property can extend.
    */
    public init(propertyName : dotnet.System.String, receiverTypeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ProvidePropertyAttribute_ctor_0__2__String_String(&__thrown, propertyName.get_handle(), receiverTypeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type)
// docid: M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  class with the name of the property and its .

    - Parameter propertyName: The name of the property extending to an object of the specified type.
    - Parameter receiverType: The  of the data type of the object that can receive the property.
    */
    public init(propertyName : dotnet.System.String, receiverType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ProvidePropertyAttribute_ctor_0__2__String_Type(&__thrown, propertyName.get_handle(), receiverType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)
    /**
    Returns whether the value of the given object is equal to the current .

    - Parameter obj: The object to test the value equality of.
    - Returns: 
         if the value of the given object is equal to that of the current; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ProvidePropertyAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ProvidePropertyAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_PropertyName()
// docid: M:System.ComponentModel.ProvidePropertyAttribute.get_PropertyName
    public func get_PropertyName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ProvidePropertyAttribute_String__get_PropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_ReceiverTypeName()
// docid: M:System.ComponentModel.ProvidePropertyAttribute.get_ReceiverTypeName
    public func get_ReceiverTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ProvidePropertyAttribute_String__get_ReceiverTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_TypeId()
// docid: M:System.ComponentModel.ProvidePropertyAttribute.get_TypeId
    public override func get_TypeId() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ProvidePropertyAttribute_Object__get_TypeId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the name of a property that this class provides.

    */
    public var PropertyName : dotnet.System.String {
        get {
            return try! get_PropertyName();
        }
    }
    /**
    Gets the name of the data type this property can extend.

    */
    public var ReceiverTypeName : dotnet.System.String {
        get {
            return try! get_ReceiverTypeName();
        }
    }
    /**
    Gets a unique identifier for this attribute.

    */
    public override var TypeId : dotnet.System.Object {
        get {
            return try! get_TypeId();
        }
    }
} // ProvidePropertyAttribute


// type: System.ComponentModel.RecommendedAsConfigurableAttribute
    /**
    Specifies that the property can be used as an application setting.

    */
open class RecommendedAsConfigurableAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_RecommendedAsConfigurableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.RecommendedAsConfigurableAttribute Default
    /**
    Specifies the default value for the , which is . This  field is read-only.

    */
    open class var Default : dotnet.System.ComponentModel.RecommendedAsConfigurableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RecommendedAsConfigurableAttribute(hndl: System_ComponentModel_RecommendedAsConfigurableAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.RecommendedAsConfigurableAttribute No
    /**
    Specifies that a property cannot be used as an application setting. This  field is read-only.

    */
    open class var No : dotnet.System.ComponentModel.RecommendedAsConfigurableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RecommendedAsConfigurableAttribute(hndl: System_ComponentModel_RecommendedAsConfigurableAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.RecommendedAsConfigurableAttribute Yes
    /**
    Specifies that a property can be used as an application setting. This  field is read-only.

    */
    open class var Yes : dotnet.System.ComponentModel.RecommendedAsConfigurableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RecommendedAsConfigurableAttribute(hndl: System_ComponentModel_RecommendedAsConfigurableAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter recommendedAsConfigurable: 
         if the property this attribute is bound to can be used as an application setting; otherwise, .
    */
    public init(recommendedAsConfigurable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_RecommendedAsConfigurableAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(recommendedAsConfigurable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)
    /**
    Indicates whether this instance and a specified object are equal.

    - Parameter obj: Another object to compare to.
    - Returns: 
         if  is equal to this instance; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RecommendedAsConfigurableAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RecommendedAsConfigurableAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute
    /**
    Indicates whether the value of this instance is the default value for the class.

    - Returns: 
         if this instance is the default attribute for the class; otherwise, .

    */
    open override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RecommendedAsConfigurableAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_RecommendedAsConfigurable()
// docid: M:System.ComponentModel.RecommendedAsConfigurableAttribute.get_RecommendedAsConfigurable
    open func get_RecommendedAsConfigurable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RecommendedAsConfigurableAttribute_bool__get_RecommendedAsConfigurable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether the property this attribute is bound to can be used as an application setting.

    */
    open var RecommendedAsConfigurable : Bool {
        get {
            return try! get_RecommendedAsConfigurable();
        }
    }
} // RecommendedAsConfigurableAttribute


// type: System.ComponentModel.ReferenceConverter
    /**
    Provides a type converter to convert object references to and from other representations.

    */
open class ReferenceConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ReferenceConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)
    /**
    Initializes a new instance of the  class.

    - Parameter type: A  that represents the type to associate with this reference converter.
    */
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ReferenceConverter_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you wish to convert from.
    - Returns: 
         if this object can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReferenceConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to the reference type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  that specifies the culture used to represent the font.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted .

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReferenceConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the reference type using the specified context and arguments.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  that specifies the culture used to represent the font.
    - Parameter value: The  to convert.
    - Parameter destinationType: The type to convert the object to.
    - Returns: The converted object.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReferenceConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a collection of standard values for the reference data type.

    - Parameter context: An  that provides a format context.
    - Returns: A  that holds a standard set of valid values, or  if the data type does not support a standard set of values.

    */
    open override func GetStandardValues(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReferenceConverter_TypeConverter_StandardValuesCollection__GetStandardValues_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection(hndl : __return);
        }
    }
    // bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether the list of standard values returned from  is an exclusive list.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because the  returned from  is an exhaustive list of possible values. This method never returns .

    */
    open override func GetStandardValuesExclusive(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReferenceConverter_bool__GetStandardValuesExclusive_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether this object supports a standard set of values that can be picked from a list.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because  can be called to find a common set of values the object supports. This method never returns .

    */
    open override func GetStandardValuesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ReferenceConverter_bool__GetStandardValuesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ReferenceConverter


// type: System.ComponentModel.RefreshEventArgs
    /**
    Provides data for the  event.

    */
open class RefreshEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_RefreshEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object)
// docid: M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)
    /**
    Initializes a new instance of the  class with the component that has changed.

    - Parameter componentChanged: The component that changed.
    */
    public init(componentChanged : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_RefreshEventArgs_ctor_0__1__Object(&__thrown, componentChanged?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)
    /**
    Initializes a new instance of the  class with the type of component that has changed.

    - Parameter typeChanged: The  that changed.
    */
    public init(typeChanged : Optional<dotnet.System.Type_>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_RefreshEventArgs_ctor_0__1__Type(&__thrown, typeChanged?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_ComponentChanged()
// docid: M:System.ComponentModel.RefreshEventArgs.get_ComponentChanged
    open func get_ComponentChanged() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RefreshEventArgs_Object__get_ComponentChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_TypeChanged()
// docid: M:System.ComponentModel.RefreshEventArgs.get_TypeChanged
    open func get_TypeChanged() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RefreshEventArgs_Type__get_TypeChanged_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the component that changed its properties, events, or extenders.

    */
    open var ComponentChanged : Optional<dotnet.System.Object> {
        get {
            return try! get_ComponentChanged();
        }
    }
    /**
    Gets the  that changed its properties or events.

    */
    open var TypeChanged : Optional<dotnet.System.Type_> {
        get {
            return try! get_TypeChanged();
        }
    }
} // RefreshEventArgs


// type: System.ComponentModel.RefreshEventHandler
    /**
    Represents the method that handles the  event raised when a  or component is changed during design time.

    */
public final class RefreshEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_RefreshEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.ComponentModel.RefreshEventArgs)
// docid: M:System.ComponentModel.RefreshEventHandler.Invoke(System.ComponentModel.RefreshEventArgs)
    public func Invoke(e : dotnet.System.ComponentModel.RefreshEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_RefreshEventHandler_void__Invoke_0__1__RefreshEventArgs(&__thrown, self.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.ComponentModel.RefreshEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.RefreshEventHandler.BeginInvoke(System.ComponentModel.RefreshEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(e : dotnet.System.ComponentModel.RefreshEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RefreshEventHandler_IAsyncResult__BeginInvoke_0__3__RefreshEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.RefreshEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_RefreshEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.ComponentModel.RefreshEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.ComponentModel.RefreshEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle) -> Void;
            f(thrown, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_RefreshEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.ComponentModel.RefreshEventArgs)
// docid: M:System.ComponentModel.RefreshEventHandler.Invoke(System.ComponentModel.RefreshEventArgs)
    public func callAsFunction(e : dotnet.System.ComponentModel.RefreshEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_RefreshEventHandler_void__Invoke_0__1__RefreshEventArgs(&__thrown, self.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RefreshEventHandler


// type: System.ComponentModel.RunInstallerAttribute
    /**
    Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.

    */
open class RunInstallerAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_RunInstallerAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.RunInstallerAttribute Default
    /**
    Specifies the default visibility, which is . This  field is read-only.

    */
    open class var Default : dotnet.System.ComponentModel.RunInstallerAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RunInstallerAttribute(hndl: System_ComponentModel_RunInstallerAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.RunInstallerAttribute No
    /**
    Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This  field is read-only.

    */
    open class var No : dotnet.System.ComponentModel.RunInstallerAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RunInstallerAttribute(hndl: System_ComponentModel_RunInstallerAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.RunInstallerAttribute Yes
    /**
    Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This  field is read-only.

    */
    open class var Yes : dotnet.System.ComponentModel.RunInstallerAttribute {
        get {
        let __return = dotnet.System.ComponentModel.RunInstallerAttribute(hndl: System_ComponentModel_RunInstallerAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter runInstaller: 
         if an installer should be invoked during installation of an assembly; otherwise, .
    */
    public init(runInstaller : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_RunInstallerAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(runInstaller ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)
    /**
    Determines whether the value of the specified  is equivalent to the current .

    - Parameter obj: The object to compare.
    - Returns: 
         if the specified  is equal to the current ; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RunInstallerAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.RunInstallerAttribute.GetHashCode
    /**
    Generates a hash code for the current .

    - Returns: A hash code for the current .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RunInstallerAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute
    /**
    Determines if this attribute is the default.

    - Returns: 
         if the attribute is the default value for this attribute class; otherwise, .

    */
    open override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RunInstallerAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_RunInstaller()
// docid: M:System.ComponentModel.RunInstallerAttribute.get_RunInstaller
    open func get_RunInstaller() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_RunInstallerAttribute_bool__get_RunInstaller_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether an installer should be invoked during installation of an assembly.

    */
    open var RunInstaller : Bool {
        get {
            return try! get_RunInstaller();
        }
    }
} // RunInstallerAttribute


// type: System.ComponentModel.SByteConverter
    /**
    Provides a type converter to convert 8-bit unsigned integer objects to and from a string.

    */
open class SByteConverter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_SByteConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.SByteConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_SByteConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SByteConverter


// type: System.ComponentModel.SettingsBindableAttribute
    /**
    Specifies when a component property can be bound to an application setting.

    */
public final class SettingsBindableAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_SettingsBindableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.SettingsBindableAttribute No
    /**
    Specifies that a property is not appropriate to bind settings to.

    */
    public class var No : dotnet.System.ComponentModel.SettingsBindableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.SettingsBindableAttribute(hndl: System_ComponentModel_SettingsBindableAttribute_get_No());
            return __return;
        }
    }
    // static field: System.ComponentModel.SettingsBindableAttribute Yes
    /**
    Specifies that a property is appropriate to bind settings to.

    */
    public class var Yes : dotnet.System.ComponentModel.SettingsBindableAttribute {
        get {
        let __return = dotnet.System.ComponentModel.SettingsBindableAttribute(hndl: System_ComponentModel_SettingsBindableAttribute_get_Yes());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter bindable: 
         to specify that a property is appropriate to bind settings to; otherwise, .
    */
    public init(bindable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_SettingsBindableAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(bindable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)
    /**
    Returns a value that indicates whether this instance is equal to a specified object.

    - Parameter obj: An  to compare with this instance or a null reference ( in Visual Basic).
    - Returns: 
         if  equals the type and value of this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_SettingsBindableAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.SettingsBindableAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_SettingsBindableAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool get_Bindable()
// docid: M:System.ComponentModel.SettingsBindableAttribute.get_Bindable
    public func get_Bindable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_SettingsBindableAttribute_bool__get_Bindable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether a property is appropriate to bind settings to.

    */
    public var Bindable : Bool {
        get {
            return try! get_Bindable();
        }
    }
} // SettingsBindableAttribute


// type: System.ComponentModel.SingleConverter
    /**
    Provides a type converter to convert single-precision, floating point number objects to and from various other representations.

    */
open class SingleConverter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_SingleConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.SingleConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_SingleConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SingleConverter


// type: System.ComponentModel.StringConverter
    /**
    Provides a type converter to convert string objects to and from other representations.

    */
open class StringConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_StringConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.StringConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_StringConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you wish to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_StringConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the specified value object to a  object.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The  to use.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_StringConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // StringConverter


// type: System.ComponentModel.SyntaxCheck
public struct SyntaxCheck {
    // bool CheckMachineName(System.String)
// docid: M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)
    /**
    Checks the syntax of the machine name to confirm that it does not contain "\".

    - Parameter value: A string containing the machine name to check.
    - Returns: 
         if  matches the proper machine name format; otherwise, .

    */
    public static func CheckMachineName(value : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_SyntaxCheck_bool__CheckMachineName_0__1__String(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckPath(System.String)
// docid: M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)
    /**
    Checks the syntax of the path to see whether it starts with "\\".

    - Parameter value: A string containing the path to check.
    - Returns: 
         if  matches the proper path format; otherwise, .

    */
    public static func CheckPath(value : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_SyntaxCheck_bool__CheckPath_0__1__String(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CheckRootedPath(System.String)
// docid: M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)
    /**
    Checks the syntax of the path to see if it starts with "\" or drive letter "C:".

    - Parameter value: A string containing the path to check.
    - Returns: 
         if  matches the proper path format; otherwise, .

    */
    public static func CheckRootedPath(value : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_SyntaxCheck_bool__CheckRootedPath_0__1__String(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // SyntaxCheck


// type: System.ComponentModel.TimeSpanConverter
    /**
    Provides a type converter to convert  objects to and from other representations.

    */
open class TimeSpanConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_TimeSpanConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.TimeSpanConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_TimeSpanConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a  using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you wish to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TimeSpanConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you wish to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TimeSpanConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to a .

    - Parameter context: An  that provides a format context.
    - Parameter culture: An optional . If not supplied, the current culture is assumed.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TimeSpanConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given object to another type.

    - Parameter context: A formatter context.
    - Parameter culture: The culture into which  will be converted.
    - Parameter value: The object to convert.
    - Parameter destinationType: The type to convert the object to.
    - Returns: The converted object.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TimeSpanConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // TimeSpanConverter


// type: System.ComponentModel.ToolboxItemAttribute
    /**
    Represents an attribute of a toolbox item.

    */
open class ToolboxItemAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ToolboxItemAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.ToolboxItemAttribute Default
    /**
    Initializes a new instance of the  class and sets the type to the default, . This field is read-only.

    */
    open class var Default : dotnet.System.ComponentModel.ToolboxItemAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ToolboxItemAttribute(hndl: System_ComponentModel_ToolboxItemAttribute_get_Default());
            return __return;
        }
    }
    // static field: System.ComponentModel.ToolboxItemAttribute None
    /**
    Initializes a new instance of the  class and sets the type to . This field is read-only.

    */
    open class var None : dotnet.System.ComponentModel.ToolboxItemAttribute {
        get {
        let __return = dotnet.System.ComponentModel.ToolboxItemAttribute(hndl: System_ComponentModel_ToolboxItemAttribute_get_None());
            return __return;
        }
    }
    // .ctor(bool)
// docid: M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class and specifies whether to use default initialization values.

    - Parameter defaultType: 
         to create a toolbox item attribute for a default type;  to associate no default toolbox item support for this attribute.
    */
    public init(defaultType : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ToolboxItemAttribute_ctor_0__1__bool(&__thrown, Swift.Int32(defaultType ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified name of the type.

    - Parameter toolboxItemTypeName: The names of the type of the toolbox item and of the assembly that contains the type.
    */
    public init(toolboxItemTypeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ToolboxItemAttribute_ctor_0__1__String(&__thrown, toolboxItemTypeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class using the specified type of the toolbox item.

    - Parameter toolboxItemType: The type of the toolbox item.
    */
    public init(toolboxItemType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ToolboxItemAttribute_ctor_0__1__Type(&__thrown, toolboxItemType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)
    /**
    Returns a value that indicates whether this instance is equal to a specified object.

    - Parameter obj: An  to compare with this instance or a null reference ( in Visual Basic).
    - Returns: 
         if  equals the type and value of this instance; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ToolboxItemAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute
    /**
    Gets a value indicating whether the current value of the attribute is the default value for the attribute.

    - Returns: 
         if the current value of the attribute is the default; otherwise, .

    */
    open override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Type get_ToolboxItemType()
// docid: M:System.ComponentModel.ToolboxItemAttribute.get_ToolboxItemType
    open func get_ToolboxItemType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemAttribute_Type__get_ToolboxItemType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_ToolboxItemTypeName()
// docid: M:System.ComponentModel.ToolboxItemAttribute.get_ToolboxItemTypeName
    open func get_ToolboxItemTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemAttribute_String__get_ToolboxItemTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the type of the toolbox item.

    */
    open var ToolboxItemType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ToolboxItemType();
        }
    }
    /**
    Gets or sets the name of the type of the current .

    */
    open var ToolboxItemTypeName : dotnet.System.String {
        get {
            return try! get_ToolboxItemTypeName();
        }
    }
} // ToolboxItemAttribute


// type: System.ComponentModel.ToolboxItemFilterAttribute
    /**
    Specifies the filter string and filter type to use for a toolbox item.

    */
public final class ToolboxItemFilterAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ToolboxItemFilterAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class using the specified filter string.

    - Parameter filterString: The filter string for the toolbox item.
    */
    public init(filterString : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ToolboxItemFilterAttribute_ctor_0__1__String(&__thrown, filterString.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.ComponentModel.ToolboxItemFilterType)
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)
    /**
    Initializes a new instance of the  class using the specified filter string and type.

    - Parameter filterString: The filter string for the toolbox item.
    - Parameter filterType: A  indicating the type of the filter.
    */
    public init(filterString : dotnet.System.String, filterType : dotnet.System.ComponentModel.ToolboxItemFilterType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_ToolboxItemFilterAttribute_ctor_0__2__String_ToolboxItemFilterType(&__thrown, filterString.get_handle(), filterType.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)
    /**
    Returns a value that indicates whether this instance is equal to a specified object.

    - Parameter obj: An  to compare with this instance or a null reference ( in Visual Basic).
    - Returns: 
         if  equals the type and value of this instance; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemFilterAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A 32-bit signed integer hash code.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemFilterAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Match(System.Object)
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)
    /**
    Indicates whether the specified object has a matching filter string.

    - Parameter obj: The object to test for a matching filter string.
    - Returns: 
         if the specified object has a matching filter string; otherwise, .

    */
    public override func Match(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemFilterAttribute_bool__Match_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.ToString
    /**
    Returns a string that represents the current object.

    - Returns: A string that represents the current object.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemFilterAttribute_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_FilterString()
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.get_FilterString
    public func get_FilterString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemFilterAttribute_String__get_FilterString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.ToolboxItemFilterType get_FilterType()
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.get_FilterType
    public func get_FilterType() throws -> dotnet.System.ComponentModel.ToolboxItemFilterType {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemFilterAttribute_ToolboxItemFilterType__get_FilterType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ToolboxItemFilterType(val: __return);
        }
    }
    // [IsSpecialName] System.Object get_TypeId()
// docid: M:System.ComponentModel.ToolboxItemFilterAttribute.get_TypeId
    public override func get_TypeId() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_ToolboxItemFilterAttribute_Object__get_TypeId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets the filter string for the toolbox item.

    */
    public var FilterString : dotnet.System.String {
        get {
            return try! get_FilterString();
        }
    }
    /**
    Gets the type of the filter.

    */
    public var FilterType : dotnet.System.ComponentModel.ToolboxItemFilterType {
        get {
            return try! get_FilterType();
        }
    }
    /**
    Gets the type ID for the attribute.

    */
    public override var TypeId : dotnet.System.Object {
        get {
            return try! get_TypeId();
        }
    }
} // ToolboxItemFilterAttribute


// type: System.ComponentModel.ToolboxItemFilterType
    /**
    Defines identifiers used to indicate the type of filter that a  uses.

    */
public struct ToolboxItemFilterType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_ToolboxItemFilterType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.ToolboxItemFilterType Allow
    /**
    Indicates that a toolbox item filter string is allowed, but not required.

    */
    public static var Allow : dotnet.System.ComponentModel.ToolboxItemFilterType {
        get {
        let __return = dotnet.System.ComponentModel.ToolboxItemFilterType(val: System_ComponentModel_ToolboxItemFilterType_get_Allow());
            return __return;
        }
    }
    // static field: System.ComponentModel.ToolboxItemFilterType Custom
    /**
    Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the  method of the  interface.

    */
    public static var Custom : dotnet.System.ComponentModel.ToolboxItemFilterType {
        get {
        let __return = dotnet.System.ComponentModel.ToolboxItemFilterType(val: System_ComponentModel_ToolboxItemFilterType_get_Custom());
            return __return;
        }
    }
    // static field: System.ComponentModel.ToolboxItemFilterType Prevent
    /**
    Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is ToolboxItemFilterType.Prevent, the toolbox item will not be available.

    */
    public static var Prevent : dotnet.System.ComponentModel.ToolboxItemFilterType {
        get {
        let __return = dotnet.System.ComponentModel.ToolboxItemFilterType(val: System_ComponentModel_ToolboxItemFilterType_get_Prevent());
            return __return;
        }
    }
    // static field: System.ComponentModel.ToolboxItemFilterType Require
    /**
    Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of Require to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of Prevent for the toolbox item to be enabled.

    */
    public static var Require : dotnet.System.ComponentModel.ToolboxItemFilterType {
        get {
        let __return = dotnet.System.ComponentModel.ToolboxItemFilterType(val: System_ComponentModel_ToolboxItemFilterType_get_Require());
            return __return;
        }
    }
} // ToolboxItemFilterType


// type: System.ComponentModel.TypeConverter
    /**
    Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.

    */
open class TypeConverter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_TypeConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.TypeConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_TypeConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: A  that represents the type you want to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertFrom(System.Type)
// docid: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
    /**
    Returns whether this converter can convert an object of the given type to the type of this converter.

    - Parameter sourceType: A  that represents the type you want to convert from.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open func CanConvertFrom(sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__CanConvertFrom_0__1__Type(&__thrown, self.get_handle(), sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns whether this converter can convert the object to the specified type, using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you want to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.Type)
// docid: M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
    /**
    Returns whether this converter can convert the object to the specified type.

    - Parameter destinationType: A  that represents the type you want to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open func CanConvertTo(destinationType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__CanConvertTo_0__1__Type(&__thrown, self.get_handle(), destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to the type of this converter, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The  to use as the current culture.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertFrom(System.Object)
// docid: M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
    /**
    Converts the given value to the type of this converter.

    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open func ConvertFrom(value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertFrom_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String)
// docid: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
    /**
    Converts the given string to the type of this converter, using the invariant culture and the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter text: The  to convert.
    - Returns: An  that represents the converted text.

    */
    open func ConvertFromInvariantString(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, text : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertFromInvariantString_0__2__ITypeDescriptorContext_String(&__thrown, self.get_handle(), context?.get_handle() ?? nil, text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertFromInvariantString(System.String)
// docid: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
    /**
    Converts the given string to the type of this converter, using the invariant culture.

    - Parameter text: The  to convert.
    - Returns: An  that represents the converted text.

    */
    open func ConvertFromInvariantString(text : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertFromInvariantString_0__1__String(&__thrown, self.get_handle(), text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String)
// docid: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
    /**
    Converts the given text to an object, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A . If  is passed, the current culture is assumed.
    - Parameter text: The  to convert.
    - Returns: An  that represents the converted text.

    */
    open func ConvertFromString(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, text : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertFromString_0__3__ITypeDescriptorContext_CultureInfo_String(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String)
// docid: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
    /**
    Converts the given text to an object, using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter text: The  to convert.
    - Returns: An  that represents the converted text.

    */
    open func ConvertFromString(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, text : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertFromString_0__2__ITypeDescriptorContext_String(&__thrown, self.get_handle(), context?.get_handle() ?? nil, text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertFromString(System.String)
// docid: M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)
    /**
    Converts the specified text to an object.

    - Parameter text: The text representation of the object to convert.
    - Returns: An  that represents the converted text.

    */
    open func ConvertFromString(text : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertFromString_0__1__String(&__thrown, self.get_handle(), text.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified type, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A . If  is passed, the current culture is assumed.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the  parameter to.
    - Returns: An  that represents the converted value.

    */
    open func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.Object, System.Type)
// docid: M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
    /**
    Converts the given value object to the specified type, using the arguments.

    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the  parameter to.
    - Returns: An  that represents the converted value.

    */
    open func ConvertTo(value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__ConvertTo_0__2__Object_Type(&__thrown, self.get_handle(), value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Converts the specified value to a culture-invariant string representation, using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter value: The  to convert.
    - Returns: A  that represents the converted value.

    */
    open func ConvertToInvariantString(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_String__ConvertToInvariantString_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ConvertToInvariantString(System.Object)
// docid: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
    /**
    Converts the specified value to a culture-invariant string representation.

    - Parameter value: The  to convert.
    - Returns: A  that represents the converted value.

    */
    open func ConvertToInvariantString(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_String__ConvertToInvariantString_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given value to a string representation, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A . If  is passed, the current culture is assumed.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open func ConvertToString(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_String__ConvertToString_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Converts the given value to a string representation, using the given context.

    - Parameter context: An  that provides a format context.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open func ConvertToString(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_String__ConvertToString_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ConvertToString(System.Object)
// docid: M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)
    /**
    Converts the specified value to a string representation.

    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open func ConvertToString(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_String__ConvertToString_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object CreateInstance(System.Collections.IDictionary)
// docid: M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
    /**
    Re-creates an  given a set of property values for the object.

    - Parameter propertyValues: An  that represents a dictionary of new property values.
    - Returns: An  representing the given , or  if the object cannot be created. This method always returns .

    */
    open func CreateInstance(propertyValues : dotnet.System.Collections.IDictionary) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__CreateInstance_0__1__IDictionary(&__thrown, self.get_handle(), propertyValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
// docid: M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
    /**
    Creates an instance of the type that this  is associated with, using the specified context, given a set of property values for the object.

    - Parameter context: An  that provides a format context.
    - Parameter propertyValues: An  of new property values.
    - Returns: An  representing the given , or  if the object cannot be created. This method always returns .

    */
    open func CreateInstance(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, propertyValues : dotnet.System.Collections.IDictionary) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_Object__CreateInstance_0__2__ITypeDescriptorContext_IDictionary(&__thrown, self.get_handle(), context?.get_handle() ?? nil, propertyValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GetCreateInstanceSupported()
// docid: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported
    /**
    Returns whether changing a value on this object requires a call to the  method to create a new value.

    - Returns: 
         if changing a property on this object requires a call to  to create a new value; otherwise, .

    */
    open func GetCreateInstanceSupported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__GetCreateInstanceSupported_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether changing a value on this object requires a call to  to create a new value, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if changing a property on this object requires a call to  to create a new value; otherwise, .

    */
    open func GetCreateInstanceSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__GetCreateInstanceSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Returns a collection of properties for the type of array specified by the value parameter, using the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter value: An  that specifies the type of array for which to get properties.
    - Returns: A  with the properties that are exposed for this data type, or  if there are no properties.

    */
    open func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptorCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_PropertyDescriptorCollection__GetProperties_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.

    - Parameter context: An  that provides a format context.
    - Parameter value: An  that specifies the type of array for which to get properties.
    - Parameter attributes: An array of type  that is used as a filter.
    - Returns: A  with the properties that are exposed for this data type, or  if there are no properties.

    */
    open func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptorCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Object)
// docid: M:System.ComponentModel.TypeConverter.GetProperties(System.Object)
    /**
    Returns a collection of properties for the type of array specified by the value parameter.

    - Parameter value: An  that specifies the type of array for which to get properties.
    - Returns: A  with the properties that are exposed for this data type, or  if there are no properties.

    */
    open func GetProperties(value : dotnet.System.Object) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptorCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_PropertyDescriptorCollection__GetProperties_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GetPropertiesSupported()
// docid: M:System.ComponentModel.TypeConverter.GetPropertiesSupported
    /**
    Returns whether this object supports properties.

    - Returns: 
         if  should be called to find the properties of this object; otherwise, .

    */
    open func GetPropertiesSupported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__GetPropertiesSupported_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether this object supports properties, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if  should be called to find the properties of this object; otherwise, .

    */
    open func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.ICollection GetStandardValues()
// docid: M:System.ComponentModel.TypeConverter.GetStandardValues
    /**
    Returns a collection of standard values from the default context for the data type this type converter is designed for.

    - Returns: A  containing a standard set of valid values, or  if the data type does not support a standard set of values.

    */
    open func GetStandardValues() throws -> Optional<dotnet.System.Collections.ICollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_ICollection__GetStandardValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.ICollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.

    - Parameter context: An  that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be .
    - Returns: A  that holds a standard set of valid values, or  if the data type does not support a standard set of values.

    */
    open func GetStandardValues(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Optional<dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_TypeConverter_StandardValuesCollection__GetStandardValues_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GetStandardValuesExclusive()
// docid: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive
    /**
    Returns whether the collection of standard values returned from  is an exclusive list.

    - Returns: 
         if the  returned from  is an exhaustive list of possible values;  if other values are possible.

    */
    open func GetStandardValuesExclusive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__GetStandardValuesExclusive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether the collection of standard values returned from  is an exclusive list of possible values, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if the  returned from  is an exhaustive list of possible values;  if other values are possible.

    */
    open func GetStandardValuesExclusive(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__GetStandardValuesExclusive_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesSupported()
// docid: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported
    /**
    Returns whether this object supports a standard set of values that can be picked from a list.

    - Returns: 
         if  should be called to find a common set of values the object supports; otherwise, .

    */
    open func GetStandardValuesSupported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__GetStandardValuesSupported_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         if  should be called to find a common set of values the object supports; otherwise, .

    */
    open func GetStandardValuesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__GetStandardValuesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Returns whether the given value object is valid for this type and for the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter value: The  to test for validity.
    - Returns: 
         if the specified value is valid for this object; otherwise, .

    */
    open func IsValid(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__IsValid_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool IsValid(System.Object)
// docid: M:System.ComponentModel.TypeConverter.IsValid(System.Object)
    /**
    Returns whether the given value object is valid for this type.

    - Parameter value: The object to test for validity.
    - Returns: 
         if the specified value is valid for this object; otherwise, .

    */
    open func IsValid(value : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_bool__IsValid_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // TypeConverter


// type: System.ComponentModel.TypeConverter+StandardValuesCollection
    /**
    Represents a collection of values.

    */
open class TypeConverter_StandardValuesCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_TypeConverter_StandardValuesCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.ICollection)
// docid: M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)
    /**
    Initializes a new instance of the  class.

    - Parameter values: An  that represents the objects to put into the collection.
    */
    public init(values : Optional<dotnet.System.Collections.ICollection>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_TypeConverter_StandardValuesCollection_ctor_0__1__ICollection(&__thrown, values?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the contents of this collection to an array.

    - Parameter array: An  that represents the array to copy to.
    - Parameter index: The index to start from.
    */
    open /* method final */ func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeConverter_StandardValuesCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator
    /**
    Returns an enumerator for this collection.

    - Returns: An enumerator of type .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_StandardValuesCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.ComponentModel.TypeConverter.StandardValuesCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_StandardValuesCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.ComponentModel.TypeConverter.StandardValuesCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeConverter_StandardValuesCollection_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of objects in the collection.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // TypeConverter_StandardValuesCollection


// type: System.ComponentModel.TypeDescriptionProvider
    /**
    Provides supplemental metadata to the .

    */
open class TypeDescriptionProvider
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_TypeDescriptionProvider_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object CreateInstance(System.IServiceProvider, System.Type, System.Type[], System.Object[])
// docid: M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    /**
    Creates an object that can substitute for another data type.

    - Parameter provider: An optional service provider.
    - Parameter objectType: The type of object to create. This parameter is never .
    - Parameter argTypes: An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be  or of zero length.
    - Parameter args: An optional array of parameter values to pass to the object's constructor.
    - Returns: The substitute .

    */
    open func CreateInstance(provider : Optional<dotnet.System.IServiceProvider>, objectType : dotnet.System.Type_, argTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_Object__CreateInstance_0__4__IServiceProvider_Type_TypeArray_ObjectArray(&__thrown, self.get_handle(), provider?.get_handle() ?? nil, objectType.get_handle(), (argTypes?.get_handle()), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.IDictionary GetCache(System.Object)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
    /**
    Gets a per-object cache, accessed as an  of key/value pairs.

    - Parameter instance: The object for which to get the cache.
    - Returns: An  if the provided object supports caching; otherwise, .

    */
    open func GetCache(instance : dotnet.System.Object) throws -> Optional<dotnet.System.Collections.IDictionary> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_IDictionary__GetCache_0__1__Object(&__thrown, self.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Collections.IDictionary(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor(System.Object)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
    /**
    Gets an extended custom type descriptor for the given object.

    - Parameter instance: The object for which to get the extended type descriptor.
    - Returns: An  that can provide extended metadata for the object.

    */
    open func GetExtendedTypeDescriptor(instance : dotnet.System.Object) throws -> dotnet.System.ComponentModel.ICustomTypeDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_ICustomTypeDescriptor__GetExtendedTypeDescriptor_0__1__Object(&__thrown, self.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.ICustomTypeDescriptor(hndl : __return);
        }
    }
    // System.String GetFullComponentName(System.Object)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
    /**
    Gets the name of the specified component, or  if the component has no name.

    - Parameter component: The specified component.
    - Returns: The name of the specified component.

    */
    open func GetFullComponentName(component : dotnet.System.Object) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_String__GetFullComponentName_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type GetReflectionType(System.Object)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
    /**
    Performs normal reflection against the given object.

    - Parameter instance: An instance of the type (should not be ).
    - Returns: The type of reflection for this .

    */
    open func GetReflectionType(instance : dotnet.System.Object) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_Type__GetReflectionType_0__1__Object(&__thrown, self.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type GetReflectionType(System.Type)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
    /**
    Performs normal reflection against a type.

    - Parameter objectType: The type of object for which to retrieve the .
    - Returns: The type of reflection for this .

    */
    open func GetReflectionType(objectType : dotnet.System.Type_) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_Type__GetReflectionType_0__1__Type(&__thrown, self.get_handle(), objectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type GetReflectionType(System.Type, System.Object)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
    /**
    Performs normal reflection against the given object with the given type.

    - Parameter objectType: The type of object for which to retrieve the .
    - Parameter instance: An instance of the type. Can be .
    - Returns: The type of reflection for this .

    */
    open func GetReflectionType(objectType : dotnet.System.Type_, instance : Optional<dotnet.System.Object>) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_Type__GetReflectionType_0__2__Type_Object(&__thrown, self.get_handle(), objectType.get_handle(), instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type GetRuntimeType(System.Type)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
    /**
    Converts a reflection type into a runtime type.

    - Parameter reflectionType: The type to convert to its runtime equivalent.
    - Returns: A  that represents the runtime equivalent of .

    */
    open func GetRuntimeType(reflectionType : dotnet.System.Type_) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_Type__GetRuntimeType_0__1__Type(&__thrown, self.get_handle(), reflectionType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(System.Object)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
    /**
    Gets a custom type descriptor for the given object.

    - Parameter instance: An instance of the type. Can be  if no instance was passed to the .
    - Returns: An  that can provide metadata for the type.

    */
    open func GetTypeDescriptor(instance : dotnet.System.Object) throws -> Optional<dotnet.System.ComponentModel.ICustomTypeDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_ICustomTypeDescriptor__GetTypeDescriptor_0__1__Object(&__thrown, self.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ICustomTypeDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(System.Type)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
    /**
    Gets a custom type descriptor for the given type.

    - Parameter objectType: The type of object for which to retrieve the type descriptor.
    - Returns: An  that can provide metadata for the type.

    */
    open func GetTypeDescriptor(objectType : dotnet.System.Type_) throws -> Optional<dotnet.System.ComponentModel.ICustomTypeDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_ICustomTypeDescriptor__GetTypeDescriptor_0__1__Type(&__thrown, self.get_handle(), objectType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ICustomTypeDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(System.Type, System.Object)
// docid: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
    /**
    Gets a custom type descriptor for the given type and object.

    - Parameter objectType: The type of object for which to retrieve the type descriptor.
    - Parameter instance: An instance of the type. Can be  if no instance was passed to the .
    - Returns: An  that can provide metadata for the type.

    */
    open func GetTypeDescriptor(objectType : dotnet.System.Type_, instance : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.ComponentModel.ICustomTypeDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_ICustomTypeDescriptor__GetTypeDescriptor_0__2__Type_Object(&__thrown, self.get_handle(), objectType.get_handle(), instance?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ICustomTypeDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsSupportedType(System.Type)
// docid: M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
    /**
    Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.

    - Parameter type: The type to test for compatibility.
    - Returns: 
         if  is compatible with the type description and its chain of type description providers; otherwise, .

    */
    open func IsSupportedType(type : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptionProvider_bool__IsSupportedType_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // TypeDescriptionProvider


// type: System.ComponentModel.TypeDescriptor
    /**
    Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.

    */
public final class TypeDescriptor
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_TypeDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.ComponentModel.TypeDescriptionProvider AddAttributes(System.Object, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
    /**
    Adds class-level attributes to the target component instance.

    - Parameter instance: An instance of the target component.
    - Parameter attributes: An array of  objects to add to the component's class.
    - Returns: The newly created  that was used to add the specified attributes.

    */
    public class func AddAttributes(instance : dotnet.System.Object, attributes : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.TypeDescriptionProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_TypeDescriptionProvider__AddAttributes_0__2__Object_AttributeArray(&__thrown, instance.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeDescriptionProvider(hndl : __return);
        }
    }
    // System.ComponentModel.TypeDescriptionProvider AddAttributes(System.Type, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
    /**
    Adds class-level attributes to the target component type.

    - Parameter type: The  of the target component.
    - Parameter attributes: An array of  objects to add to the component's class.
    - Returns: The newly created  that was used to add the specified attributes.

    */
    public class func AddAttributes(type : dotnet.System.Type_, attributes : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.TypeDescriptionProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_TypeDescriptionProvider__AddAttributes_0__2__Type_AttributeArray(&__thrown, type.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeDescriptionProvider(hndl : __return);
        }
    }
    // void AddEditorTable(System.Type, System.Collections.Hashtable)
// docid: M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
    /**
    Adds an editor table for the given editor base type.

    - Parameter editorBaseType: The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.
    - Parameter table: The  to add.
    */
    public class func AddEditorTable(editorBaseType : dotnet.System.Type_, table : dotnet.System.Collections.Hashtable) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__AddEditorTable_0__2__Type_Hashtable(&__thrown, editorBaseType.get_handle(), table.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddProvider(System.ComponentModel.TypeDescriptionProvider, System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
    /**
    Adds a type description provider for a single instance of a component.

    - Parameter provider: The  to add.
    - Parameter instance: An instance of the target component.
    */
    public class func AddProvider(provider : dotnet.System.ComponentModel.TypeDescriptionProvider, instance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__AddProvider_0__2__TypeDescriptionProvider_Object(&__thrown, provider.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddProvider(System.ComponentModel.TypeDescriptionProvider, System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
    /**
    Adds a type description provider for a component class.

    - Parameter provider: The  to add.
    - Parameter type: The  of the target component.
    */
    public class func AddProvider(provider : dotnet.System.ComponentModel.TypeDescriptionProvider, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__AddProvider_0__2__TypeDescriptionProvider_Type(&__thrown, provider.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
    /**
    Adds a type description provider for a single instance of a component.

    - Parameter provider: The  to add.
    - Parameter instance: An instance of the target component.
    */
    public class func AddProviderTransparent(provider : dotnet.System.ComponentModel.TypeDescriptionProvider, instance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__AddProviderTransparent_0__2__TypeDescriptionProvider_Object(&__thrown, provider.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
    /**
    Adds a type description provider for a component class.

    - Parameter provider: The  to add.
    - Parameter type: The  of the target component.
    */
    public class func AddProviderTransparent(provider : dotnet.System.ComponentModel.TypeDescriptionProvider, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__AddProviderTransparent_0__2__TypeDescriptionProvider_Type(&__thrown, provider.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CreateAssociation(System.Object, System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
    /**
    Creates a primary-secondary association between two objects.

    - Parameter primary: The primary .
    - Parameter secondary: The secondary .
    */
    public class func CreateAssociation(primary : dotnet.System.Object, secondary : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__CreateAssociation_0__2__Object_Object(&__thrown, primary.get_handle(), secondary.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.Design.IDesigner CreateDesigner(System.ComponentModel.IComponent, System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
    /**
    Creates an instance of the designer associated with the specified component and of the specified type of designer.

    - Parameter component: An  that specifies the component to associate with the designer.
    - Parameter designerBaseType: A  that represents the type of designer to create.
    - Returns: An  that is an instance of the designer for the component, or  if no designer can be found.

    */
    public class func CreateDesigner(component : dotnet.System.ComponentModel.IComponent, designerBaseType : dotnet.System.Type_) throws -> Optional<dotnet.System.ComponentModel.Design.IDesigner> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_IDesigner__CreateDesigner_0__2__IComponent_Type(&__thrown, component.get_handle(), designerBaseType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.IDesigner(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.EventDescriptor CreateEvent(System.Type, System.ComponentModel.EventDescriptor, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
    /**
    Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing .

    - Parameter componentType: The type of the component for which to create the new event.
    - Parameter oldEventDescriptor: The existing event information.
    - Parameter attributes: The new attributes.
    - Returns: A new  that has merged the specified metadata attributes with the existing metadata attributes.

    */
    public class func CreateEvent(componentType : dotnet.System.Type_, oldEventDescriptor : dotnet.System.ComponentModel.EventDescriptor, attributes : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.EventDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptor__CreateEvent_0__3__Type_EventDescriptor_AttributeArray(&__thrown, componentType.get_handle(), oldEventDescriptor.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptor(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptor CreateEvent(System.Type, System.String, System.Type, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
    /**
    Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.

    - Parameter componentType: The type of the component the event lives on.
    - Parameter name: The name of the event.
    - Parameter type: The type of the delegate that handles the event.
    - Parameter attributes: The attributes for this event.
    - Returns: An  that is bound to a type.

    */
    public class func CreateEvent(componentType : dotnet.System.Type_, name : dotnet.System.String, type : dotnet.System.Type_, attributes : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.EventDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptor__CreateEvent_0__4__Type_String_Type_AttributeArray(&__thrown, componentType.get_handle(), name.get_handle(), type.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptor(hndl : __return);
        }
    }
    // System.Object CreateInstance(System.IServiceProvider, System.Type, System.Type[], System.Object[])
// docid: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    /**
    Creates an object that can substitute for another data type.

    - Parameter provider: The service provider that provides a  service. This parameter can be .
    - Parameter objectType: The  of object to create.
    - Parameter argTypes: An optional array of parameter types to be passed to the object's constructor. This parameter can be  or an array of zero length.
    - Parameter args: An optional array of parameter values to pass to the object's constructor. If not , the number of elements must be the same as .
    - Returns: An instance of the substitute data type if an associated  is found; otherwise, .

    */
    public class func CreateInstance(provider : Optional<dotnet.System.IServiceProvider>, objectType : dotnet.System.Type_, argTypes : Optional<dotnet.System_Arr<dotnet.System.Type_>>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Object__CreateInstance_0__4__IServiceProvider_Type_TypeArray_ObjectArray(&__thrown, provider?.get_handle() ?? nil, objectType.get_handle(), (argTypes?.get_handle()), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptor CreateProperty(System.Type, System.ComponentModel.PropertyDescriptor, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
    /**
    Creates a new property descriptor from an existing property descriptor, using the specified existing  and attribute array.

    - Parameter componentType: The  of the component that the property is a member of.
    - Parameter oldPropertyDescriptor: The existing property descriptor.
    - Parameter attributes: The new attributes for this property.
    - Returns: A new  that has the specified metadata attributes merged with the existing metadata attributes.

    */
    public class func CreateProperty(componentType : dotnet.System.Type_, oldPropertyDescriptor : dotnet.System.ComponentModel.PropertyDescriptor, attributes : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.PropertyDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptor__CreateProperty_0__3__Type_PropertyDescriptor_AttributeArray(&__thrown, componentType.get_handle(), oldPropertyDescriptor.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptor CreateProperty(System.Type, System.String, System.Type, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
    /**
    Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.

    - Parameter componentType: The  of the component that the property is a member of.
    - Parameter name: The name of the property.
    - Parameter type: The  of the property.
    - Parameter attributes: The new attributes for this property.
    - Returns: A  that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.

    */
    public class func CreateProperty(componentType : dotnet.System.Type_, name : dotnet.System.String, type : dotnet.System.Type_, attributes : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.PropertyDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptor__CreateProperty_0__4__Type_String_Type_AttributeArray(&__thrown, componentType.get_handle(), name.get_handle(), type.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __return);
        }
    }
    // System.Object GetAssociation(System.Type, System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
    /**
    Returns an instance of the type associated with the specified primary object.

    - Parameter type: The  of the target component.
    - Parameter primary: The primary object of the association.
    - Returns: An instance of the secondary type that has been associated with the primary object if an association exists; otherwise,  if no specified association exists.

    */
    public class func GetAssociation(type : dotnet.System.Type_, primary : dotnet.System.Object) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Object__GetAssociation_0__2__Type_Object(&__thrown, type.get_handle(), primary.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.ComponentModel.AttributeCollection GetAttributes(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
    /**
    Returns the collection of attributes for the specified component.

    - Parameter component: The component for which you want to get attributes.
    - Returns: An  containing the attributes for the component. If  is , this method returns an empty collection.

    */
    public class func GetAttributes(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.AttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_AttributeCollection__GetAttributes_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AttributeCollection(hndl : __return);
        }
    }
    // System.ComponentModel.AttributeCollection GetAttributes(System.Object, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
    /**
    Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.

    - Parameter component: The component for which you want to get attributes.
    - Parameter noCustomTypeDesc: 
         to use a baseline set of attributes from the custom type descriptor if  is of type ; otherwise, .
    - Returns: An  with the attributes for the component. If the component is , this method returns an empty collection.

    */
    public class func GetAttributes(component : dotnet.System.Object, noCustomTypeDesc : Bool) throws -> dotnet.System.ComponentModel.AttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_AttributeCollection__GetAttributes_0__2__Object_bool(&__thrown, component.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AttributeCollection(hndl : __return);
        }
    }
    // System.ComponentModel.AttributeCollection GetAttributes(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
    /**
    Returns a collection of attributes for the specified type of component.

    - Parameter componentType: The  of the target component.
    - Returns: An  with the attributes for the type of the component. If the component is , this method returns an empty collection.

    */
    public class func GetAttributes(componentType : dotnet.System.Type_) throws -> dotnet.System.ComponentModel.AttributeCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_AttributeCollection__GetAttributes_0__1__Type(&__thrown, componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.AttributeCollection(hndl : __return);
        }
    }
    // System.String GetClassName(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
    /**
    Returns the name of the class for the specified component using the default type descriptor.

    - Parameter component: The  for which you want the class name.
    - Returns: A  containing the name of the class for the specified component.

    */
    public class func GetClassName(component : dotnet.System.Object) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_String__GetClassName_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetClassName(System.Object, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
    /**
    Returns the name of the class for the specified component using a custom type descriptor.

    - Parameter component: The  for which you want the class name.
    - Parameter noCustomTypeDesc: 
         to consider custom type description information; otherwise, .
    - Returns: A  containing the name of the class for the specified component.

    */
    public class func GetClassName(component : dotnet.System.Object, noCustomTypeDesc : Bool) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_String__GetClassName_0__2__Object_bool(&__thrown, component.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetClassName(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
    /**
    Returns the name of the class for the specified type.

    - Parameter componentType: The  of the target component.
    - Returns: A  containing the name of the class for the specified component type.

    */
    public class func GetClassName(componentType : dotnet.System.Type_) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_String__GetClassName_0__1__Type(&__thrown, componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetComponentName(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
    /**
    Returns the name of the specified component using the default type descriptor.

    - Parameter component: The  for which you want the class name.
    - Returns: A  containing the name of the specified component, or  if there is no component name.

    */
    public class func GetComponentName(component : dotnet.System.Object) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_String__GetComponentName_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetComponentName(System.Object, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
    /**
    Returns the name of the specified component using a custom type descriptor.

    - Parameter component: The  for which you want the class name.
    - Parameter noCustomTypeDesc: 
         to consider custom type description information; otherwise, .
    - Returns: The name of the class for the specified component, or  if there is no component name.

    */
    public class func GetComponentName(component : dotnet.System.Object, noCustomTypeDesc : Bool) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_String__GetComponentName_0__2__Object_bool(&__thrown, component.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter GetConverter(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
    /**
    Returns a type converter for the type of the specified component.

    - Parameter component: A component to get the converter for.
    - Returns: A  for the specified component.

    */
    public class func GetConverter(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.TypeConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_TypeConverter__GetConverter_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter(hndl : __return);
        }
    }
    // System.ComponentModel.TypeConverter GetConverter(System.Object, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
    /**
    Returns a type converter for the type of the specified component with a custom type descriptor.

    - Parameter component: A component to get the converter for.
    - Parameter noCustomTypeDesc: 
         to consider custom type description information; otherwise, .
    - Returns: A  for the specified component.

    */
    public class func GetConverter(component : dotnet.System.Object, noCustomTypeDesc : Bool) throws -> dotnet.System.ComponentModel.TypeConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_TypeConverter__GetConverter_0__2__Object_bool(&__thrown, component.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter(hndl : __return);
        }
    }
    // System.ComponentModel.TypeConverter GetConverter(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
    /**
    Returns a type converter for the specified type.

    - Parameter type: The  of the target component.
    - Returns: A  for the specified type.

    */
    public class func GetConverter(type : dotnet.System.Type_) throws -> dotnet.System.ComponentModel.TypeConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_TypeConverter__GetConverter_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptor GetDefaultEvent(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
    /**
    Returns the default event for the specified component.

    - Parameter component: The component to get the event for.
    - Returns: An  with the default event, or  if there are no events.

    */
    public class func GetDefaultEvent(component : dotnet.System.Object) throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptor__GetDefaultEvent_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.EventDescriptor GetDefaultEvent(System.Object, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
    /**
    Returns the default event for a component with a custom type descriptor.

    - Parameter component: The component to get the event for.
    - Parameter noCustomTypeDesc: 
         to consider custom type description information; otherwise, .
    - Returns: An  with the default event, or  if there are no events.

    */
    public class func GetDefaultEvent(component : dotnet.System.Object, noCustomTypeDesc : Bool) throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptor__GetDefaultEvent_0__2__Object_bool(&__thrown, component.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.EventDescriptor GetDefaultEvent(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
    /**
    Returns the default event for the specified type of component.

    - Parameter componentType: The  of the target component.
    - Returns: An  with the default event, or  if there are no events.

    */
    public class func GetDefaultEvent(componentType : dotnet.System.Type_) throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptor__GetDefaultEvent_0__1__Type(&__thrown, componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptor GetDefaultProperty(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
    /**
    Returns the default property for the specified component.

    - Parameter component: The component to get the default property for.
    - Returns: A  with the default property, or  if there are no properties.

    */
    public class func GetDefaultProperty(component : dotnet.System.Object) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptor__GetDefaultProperty_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptor GetDefaultProperty(System.Object, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
    /**
    Returns the default property for the specified component with a custom type descriptor.

    - Parameter component: The component to get the default property for.
    - Parameter noCustomTypeDesc: 
         to consider custom type description information; otherwise, .
    - Returns: A  with the default property, or  if there are no properties.

    */
    public class func GetDefaultProperty(component : dotnet.System.Object, noCustomTypeDesc : Bool) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptor__GetDefaultProperty_0__2__Object_bool(&__thrown, component.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptor GetDefaultProperty(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
    /**
    Returns the default property for the specified type of component.

    - Parameter componentType: A  that represents the class to get the property for.
    - Returns: A  with the default property, or  if there are no properties.

    */
    public class func GetDefaultProperty(componentType : dotnet.System.Type_) throws -> Optional<dotnet.System.ComponentModel.PropertyDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptor__GetDefaultProperty_0__1__Type(&__thrown, componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetEditor(System.Object, System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
    /**
    Gets an editor with the specified base type for the specified component.

    - Parameter component: The component to get the editor for.
    - Parameter editorBaseType: A  that represents the base type of the editor you want to find.
    - Returns: An instance of the editor that can be cast to the specified editor type, or  if no editor of the requested type can be found.

    */
    public class func GetEditor(component : dotnet.System.Object, editorBaseType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Object__GetEditor_0__2__Object_Type(&__thrown, component.get_handle(), editorBaseType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetEditor(System.Object, System.Type, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
    /**
    Returns an editor with the specified base type and with a custom type descriptor for the specified component.

    - Parameter component: The component to get the editor for.
    - Parameter editorBaseType: A  that represents the base type of the editor you want to find.
    - Parameter noCustomTypeDesc: A flag indicating whether custom type description information should be considered.
    - Returns: An instance of the editor that can be cast to the specified editor type, or  if no editor of the requested type can be found.

    */
    public class func GetEditor(component : dotnet.System.Object, editorBaseType : dotnet.System.Type_, noCustomTypeDesc : Bool) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Object__GetEditor_0__3__Object_Type_bool(&__thrown, component.get_handle(), editorBaseType.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetEditor(System.Type, System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
    /**
    Returns an editor with the specified base type for the specified type.

    - Parameter type: The  of the target component.
    - Parameter editorBaseType: A  that represents the base type of the editor you are trying to find.
    - Returns: An instance of the editor object that can be cast to the given base type, or  if no editor of the requested type can be found.

    */
    public class func GetEditor(type : dotnet.System.Type_, editorBaseType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Object__GetEditor_0__2__Type_Type(&__thrown, type.get_handle(), editorBaseType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
    /**
    Returns the collection of events for the specified component.

    - Parameter component: A component to get the events for.
    - Returns: An  with the events for this component.

    */
    public class func GetEvents(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptorCollection__GetEvents_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Object, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
    /**
    Returns the collection of events for a specified component using a specified array of attributes as a filter.

    - Parameter component: A component to get the events for.
    - Parameter attributes: An array of type  that you can use as a filter.
    - Returns: An  with the events that match the specified attributes for this component.

    */
    public class func GetEvents(component : dotnet.System.Object, attributes : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptorCollection__GetEvents_0__2__Object_AttributeArray(&__thrown, component.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Object, System.Attribute[], bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
    /**
    Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.

    - Parameter component: A component to get the events for.
    - Parameter attributes: An array of type  to use as a filter.
    - Parameter noCustomTypeDesc: 
         to consider custom type description information; otherwise, .
    - Returns: An  with the events that match the specified attributes for this component.

    */
    public class func GetEvents(component : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>, noCustomTypeDesc : Bool) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptorCollection__GetEvents_0__3__Object_AttributeArray_bool(&__thrown, component.get_handle(), (attributes?.get_handle()), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Object, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
    /**
    Returns the collection of events for a specified component with a custom type descriptor.

    - Parameter component: A component to get the events for.
    - Parameter noCustomTypeDesc: 
         to consider custom type description information; otherwise, .
    - Returns: An  with the events for this component.

    */
    public class func GetEvents(component : dotnet.System.Object, noCustomTypeDesc : Bool) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptorCollection__GetEvents_0__2__Object_bool(&__thrown, component.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
    /**
    Returns the collection of events for a specified type of component.

    - Parameter componentType: The  of the target component.
    - Returns: An  with the events for this component.

    */
    public class func GetEvents(componentType : dotnet.System.Type_) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptorCollection__GetEvents_0__1__Type(&__thrown, componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptorCollection GetEvents(System.Type, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
    /**
    Returns the collection of events for a specified type of component using a specified array of attributes as a filter.

    - Parameter componentType: The  of the target component.
    - Parameter attributes: An array of type  that you can use as a filter.
    - Returns: An  with the events that match the specified attributes for this component.

    */
    public class func GetEvents(componentType : dotnet.System.Type_, attributes : dotnet.System_Arr<dotnet.System.Attribute>) throws -> dotnet.System.ComponentModel.EventDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_EventDescriptorCollection__GetEvents_0__2__Type_AttributeArray(&__thrown, componentType.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.EventDescriptorCollection(hndl : __return);
        }
    }
    // System.String GetFullComponentName(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
    /**
    Returns the fully qualified name of the component.

    - Parameter component: The  to find the name for.
    - Returns: The fully qualified name of the specified component, or  if the component has no name.

    */
    public class func GetFullComponentName(component : dotnet.System.Object) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_String__GetFullComponentName_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
    /**
    Returns the collection of properties for a specified component.

    - Parameter component: A component to get the properties for.
    - Returns: A  with the properties for the specified component.

    */
    public class func GetProperties(component : dotnet.System.Object) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptorCollection__GetProperties_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Object, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
    /**
    Returns the collection of properties for a specified component using a specified array of attributes as a filter.

    - Parameter component: A component to get the properties for.
    - Parameter attributes: An array of type  to use as a filter.
    - Returns: A  with the properties that match the specified attributes for the specified component.

    */
    public class func GetProperties(component : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptorCollection__GetProperties_0__2__Object_AttributeArray(&__thrown, component.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Object, System.Attribute[], bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
    /**
    Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.

    - Parameter component: A component to get the properties for.
    - Parameter attributes: An array of type  to use as a filter.
    - Parameter noCustomTypeDesc: 
         to consider custom type description information; otherwise, .
    - Returns: A  with the events that match the specified attributes for the specified component.

    */
    public class func GetProperties(component : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>, noCustomTypeDesc : Bool) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptorCollection__GetProperties_0__3__Object_AttributeArray_bool(&__thrown, component.get_handle(), (attributes?.get_handle()), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Object, bool)
// docid: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
    /**
    Returns the collection of properties for a specified component using the default type descriptor.

    - Parameter component: A component to get the properties for.
    - Parameter noCustomTypeDesc: 
         to not consider custom type description information; otherwise, .
    - Returns: A  with the properties for a specified component.

    */
    public class func GetProperties(component : dotnet.System.Object, noCustomTypeDesc : Bool) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptorCollection__GetProperties_0__2__Object_bool(&__thrown, component.get_handle(), Swift.Int32(noCustomTypeDesc ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
    /**
    Returns the collection of properties for a specified type of component.

    - Parameter componentType: A  that represents the component to get properties for.
    - Returns: A  with the properties for a specified type of component.

    */
    public class func GetProperties(componentType : dotnet.System.Type_) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptorCollection__GetProperties_0__1__Type(&__thrown, componentType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Type, System.Attribute[])
// docid: M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
    /**
    Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.

    - Parameter componentType: The  of the target component.
    - Parameter attributes: An array of type  to use as a filter.
    - Returns: A  with the properties that match the specified attributes for this type of component.

    */
    public class func GetProperties(componentType : dotnet.System.Type_, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_PropertyDescriptorCollection__GetProperties_0__2__Type_AttributeArray(&__thrown, componentType.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.TypeDescriptionProvider GetProvider(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
    /**
    Returns the type description provider for the specified component.

    - Parameter instance: An instance of the target component.
    - Returns: A  associated with the specified component.

    */
    public class func GetProvider(instance : dotnet.System.Object) throws -> dotnet.System.ComponentModel.TypeDescriptionProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_TypeDescriptionProvider__GetProvider_0__1__Object(&__thrown, instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeDescriptionProvider(hndl : __return);
        }
    }
    // System.ComponentModel.TypeDescriptionProvider GetProvider(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
    /**
    Returns the type description provider for the specified type.

    - Parameter type: The  of the target component.
    - Returns: A  associated with the specified type.

    */
    public class func GetProvider(type : dotnet.System.Type_) throws -> dotnet.System.ComponentModel.TypeDescriptionProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_TypeDescriptionProvider__GetProvider_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeDescriptionProvider(hndl : __return);
        }
    }
    // System.Type GetReflectionType(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
    /**
    Returns a  that can be used to perform reflection, given an object.

    - Parameter instance: An instance of the target component.
    - Returns: A  for the specified object.

    */
    public class func GetReflectionType(instance : dotnet.System.Object) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Type__GetReflectionType_0__1__Object(&__thrown, instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // System.Type GetReflectionType(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
    /**
    Returns a  that can be used to perform reflection, given a class type.

    - Parameter type: The  of the target component.
    - Returns: A  of the specified class.

    */
    public class func GetReflectionType(type : dotnet.System.Type_) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Type__GetReflectionType_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // void Refresh(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)
    /**
    Clears the properties and events for the specified component from the cache.

    - Parameter component: A component for which the properties or events have changed.
    */
    public class func Refresh(component : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__Refresh_0__1__Object(&__thrown, component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Refresh(System.Reflection.Assembly)
// docid: M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
    /**
    Clears the properties and events for the specified assembly from the cache.

    - Parameter assembly: The  that represents the assembly to refresh. Each  in this assembly will be refreshed.
    */
    public class func Refresh(assembly : dotnet.System.Reflection.Assembly) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__Refresh_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Refresh(System.Reflection.Module)
// docid: M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
    /**
    Clears the properties and events for the specified module from the cache.

    - Parameter module: The  that represents the module to refresh. Each  in this module will be refreshed.
    */
    public class func Refresh(module : dotnet.System.Reflection.Module) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__Refresh_0__1__Module(&__thrown, module.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Refresh(System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)
    /**
    Clears the properties and events for the specified type of component from the cache.

    - Parameter type: The  of the target component.
    */
    public class func Refresh(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__Refresh_0__1__Type(&__thrown, type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAssociation(System.Object, System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
    /**
    Removes an association between two objects.

    - Parameter primary: The primary .
    - Parameter secondary: The secondary .
    */
    public class func RemoveAssociation(primary : dotnet.System.Object, secondary : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__RemoveAssociation_0__2__Object_Object(&__thrown, primary.get_handle(), secondary.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAssociations(System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
    /**
    Removes all associations for a primary object.

    - Parameter primary: The primary  in an association.
    */
    public class func RemoveAssociations(primary : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__RemoveAssociations_0__1__Object(&__thrown, primary.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveProvider(System.ComponentModel.TypeDescriptionProvider, System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
    /**
    Removes a previously added type description provider that is associated with the specified object.

    - Parameter provider: The  to remove.
    - Parameter instance: An instance of the target component.
    */
    public class func RemoveProvider(provider : dotnet.System.ComponentModel.TypeDescriptionProvider, instance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__RemoveProvider_0__2__TypeDescriptionProvider_Object(&__thrown, provider.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveProvider(System.ComponentModel.TypeDescriptionProvider, System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
    /**
    Removes a previously added type description provider that is associated with the specified type.

    - Parameter provider: The  to remove.
    - Parameter type: The  of the target component.
    */
    public class func RemoveProvider(provider : dotnet.System.ComponentModel.TypeDescriptionProvider, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__RemoveProvider_0__2__TypeDescriptionProvider_Type(&__thrown, provider.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Object)
// docid: M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
    /**
    Removes a previously added type description provider that is associated with the specified object.

    - Parameter provider: The  to remove.
    - Parameter instance: An instance of the target component.
    */
    public class func RemoveProviderTransparent(provider : dotnet.System.ComponentModel.TypeDescriptionProvider, instance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__RemoveProviderTransparent_0__2__TypeDescriptionProvider_Object(&__thrown, provider.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider, System.Type)
// docid: M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
    /**
    Removes a previously added type description provider that is associated with the specified type.

    - Parameter provider: The  to remove.
    - Parameter type: The  of the target component.
    */
    public class func RemoveProviderTransparent(provider : dotnet.System.ComponentModel.TypeDescriptionProvider, type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__RemoveProviderTransparent_0__2__TypeDescriptionProvider_Type(&__thrown, provider.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SortDescriptorArray(System.Collections.IList)
// docid: M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
    /**
    Sorts descriptors using the name of the descriptor.

    - Parameter infos: An  that contains the descriptors to sort.
    */
    public class func SortDescriptorArray(infos : dotnet.System.Collections.IList) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__SortDescriptorArray_0__1__IList(&__thrown, infos.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.IComNativeDescriptorHandler get_ComNativeDescriptorHandler()
// docid: M:System.ComponentModel.TypeDescriptor.get_ComNativeDescriptorHandler
    public class func get_ComNativeDescriptorHandler() throws -> Optional<dotnet.System.ComponentModel.IComNativeDescriptorHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_IComNativeDescriptorHandler__get_ComNativeDescriptorHandler_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IComNativeDescriptorHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ComNativeDescriptorHandler(System.ComponentModel.IComNativeDescriptorHandler)
// docid: M:System.ComponentModel.TypeDescriptor.set_ComNativeDescriptorHandler(System.ComponentModel.IComNativeDescriptorHandler)
    public class func set_ComNativeDescriptorHandler(value : Optional<dotnet.System.ComponentModel.IComNativeDescriptorHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__set_ComNativeDescriptorHandler_0__1__IComNativeDescriptorHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ComObjectType()
// docid: M:System.ComponentModel.TypeDescriptor.get_ComObjectType
    public class func get_ComObjectType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Type__get_ComObjectType_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_InterfaceType()
// docid: M:System.ComponentModel.TypeDescriptor.get_InterfaceType
    public class func get_InterfaceType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeDescriptor_Type__get_InterfaceType_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void add_Refreshed(System.ComponentModel.RefreshEventHandler)
// docid: M:System.ComponentModel.TypeDescriptor.add_Refreshed(System.ComponentModel.RefreshEventHandler)
    public class func add_Refreshed(value : Optional<dotnet.System.ComponentModel.RefreshEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__add_Refreshed_0__1__RefreshEventHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public class func add_Refreshed(value : @escaping (dotnet.System.ComponentModel.RefreshEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.RefreshEventHandler(value);
        return try add_Refreshed(value: del_value);
    }
    // [IsSpecialName] void remove_Refreshed(System.ComponentModel.RefreshEventHandler)
// docid: M:System.ComponentModel.TypeDescriptor.remove_Refreshed(System.ComponentModel.RefreshEventHandler)
    public class func remove_Refreshed(value : Optional<dotnet.System.ComponentModel.RefreshEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_TypeDescriptor_void__remove_Refreshed_0__1__RefreshEventHandler(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public class func remove_Refreshed(value : @escaping (dotnet.System.ComponentModel.RefreshEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.RefreshEventHandler(value);
        return try remove_Refreshed(value: del_value);
    }
    /**
    Gets or sets the provider for the Component Object Model (COM) type information for the target component.

    */
    public static var ComNativeDescriptorHandler : Optional<dotnet.System.ComponentModel.IComNativeDescriptorHandler> {
        get {
            return try! get_ComNativeDescriptorHandler();
        }
        set(v) {
            return try! set_ComNativeDescriptorHandler(value: v!);
        }
    }
    /**
    Gets the type of the Component Object Model (COM) object represented by the target component.

    */
    public static var ComObjectType : dotnet.System.Type_ {
        get {
            return try! get_ComObjectType();
        }
    }
    /**
    Gets a type that represents a type description provider for all interface types.

    */
    public static var InterfaceType : dotnet.System.Type_ {
        get {
            return try! get_InterfaceType();
        }
    }
} // TypeDescriptor


// type: System.ComponentModel.TypeListConverter
    /**
    Provides a type converter that can be used to populate a list box with available types.

    */
open class TypeListConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_TypeListConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert the specified  of the source object using the given context.

    - Parameter context: An  that provides a format context.
    - Parameter sourceType: The  of the source object.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeListConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type you wish to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeListConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the specified object to the native type of the converter.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  that specifies the culture used to represent the font.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeListConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified destination type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: An optional . If not supplied, the current culture is assumed.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value to.
    - Returns: An  that represents the converted .

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeListConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a collection of standard values for the data type this validator is designed for.

    - Parameter context: An  that provides a format context.
    - Returns: A  that holds a standard set of valid values, or  if the data type does not support a standard set of values.

    */
    open override func GetStandardValues(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeListConverter_TypeConverter_StandardValuesCollection__GetStandardValues_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection(hndl : __return);
        }
    }
    // bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether the list of standard values returned from the  method is an exclusive list.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because the  returned from  is an exhaustive list of possible values. This method never returns .

    */
    open override func GetStandardValuesExclusive(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeListConverter_bool__GetStandardValuesExclusive_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.

    - Parameter context: An  that provides a format context.
    - Returns: 
         because  should be called to find a common set of values the object supports. This method never returns .

    */
    open override func GetStandardValuesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_TypeListConverter_bool__GetStandardValuesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // TypeListConverter


// type: System.ComponentModel.UInt16Converter
    /**
    Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.

    */
open class UInt16Converter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_UInt16Converter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.UInt16Converter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_UInt16Converter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UInt16Converter


// type: System.ComponentModel.UInt32Converter
    /**
    Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.

    */
open class UInt32Converter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_UInt32Converter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.UInt32Converter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_UInt32Converter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UInt32Converter


// type: System.ComponentModel.UInt64Converter
    /**
    Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.

    */
open class UInt64Converter
    :
    dotnet.System.ComponentModel.BaseNumberConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_UInt64Converter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.UInt64Converter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_UInt64Converter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // UInt64Converter


// type: System.ComponentModel.VersionConverter
    /**
    Provides a type converter to convert  objects to and from various other representations.

    */
open class VersionConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_VersionConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.VersionConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_VersionConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object in the given source type to a .

    - Parameter context: An object that provides contextual information.
    - Parameter sourceType: The type of the object to be converted.
    - Returns: 
         if this converter can convert sourceType to a ; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_VersionConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An object that provides contextual information.
    - Parameter destinationType: The target type for the conversion.
    - Returns: 
         if the converter can convert an object to the given destination type; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_VersionConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the specified object to a .

    - Parameter context: An object that provides contextual information.
    - Parameter culture: The culture to use for the conversion.
    - Parameter value: The value to convert to a .
    - Returns: 
         converted to a  value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_VersionConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the specified value to the specified destination type using the specified context and arguments.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The culture that supplies formatting information for the conversion.
    - Parameter value: The value to be converted.
    - Parameter destinationType: The type to convert the value parameter to.
    - Returns: An object that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_VersionConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)
// docid: M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
    /**
    Returns a value that indicates whether the given value object is valid for this type and for the specified context.

    - Parameter context: An  that provides a format context.
    - Parameter value: The object to test for validity.
    - Returns: 
         if the specified value is valid for this object; otherwise, .

    */
    open override func IsValid(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_VersionConverter_bool__IsValid_0__2__ITypeDescriptorContext_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // VersionConverter


// type: System.ComponentModel.WarningException
    /**
    Specifies an exception that is handled as a warning instead of an error.

    */
open class WarningException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_WarningException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.WarningException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_WarningException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.WarningException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified message and no Help file.

    - Parameter message: The message to display to the end user.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_WarningException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified detailed description and the specified exception.

    - Parameter message: A detailed description of the error.
    - Parameter innerException: A reference to the inner exception that is the cause of this exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_WarningException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.ComponentModel.WarningException.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified message, and with access to the specified Help file.

    - Parameter message: The message to display to the end user.
    - Parameter helpUrl: The Help file to display if the user requests help.
    */
    public init(message : Optional<dotnet.System.String>, helpUrl : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_WarningException_ctor_0__2__String_String(&__thrown, message?.get_handle() ?? nil, helpUrl?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified message, and with access to the specified Help file and topic.

    - Parameter message: The message to display to the end user.
    - Parameter helpUrl: The Help file to display if the user requests help.
    - Parameter helpTopic: The Help topic to display if the user requests help.
    */
    public init(message : Optional<dotnet.System.String>, helpUrl : Optional<dotnet.System.String>, helpTopic : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_WarningException_ctor_0__3__String_String_String(&__thrown, message?.get_handle() ?? nil, helpUrl?.get_handle() ?? nil, helpTopic?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Sets the  with the parameter name and additional exception information.

    - Parameter info: Stores the data that was being used to serialize or deserialize the object that the  was serializing or deserializing.
    - Parameter context: Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_WarningException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_HelpTopic()
// docid: M:System.ComponentModel.WarningException.get_HelpTopic
    open func get_HelpTopic() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_WarningException_String__get_HelpTopic_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_HelpUrl()
// docid: M:System.ComponentModel.WarningException.get_HelpUrl
    open func get_HelpUrl() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_WarningException_String__get_HelpUrl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the Help topic associated with the warning.

    */
    open var HelpTopic : Optional<dotnet.System.String> {
        get {
            return try! get_HelpTopic();
        }
    }
    /**
    Gets the Help file associated with the warning.

    */
    open var HelpUrl : Optional<dotnet.System.String> {
        get {
            return try! get_HelpUrl();
        }
    }
} // WarningException


}
// System.ComponentModel.Design
extension System.ComponentModel.Design {
// type: System.ComponentModel.Design.ActiveDesignerEventArgs
    /**
    Provides data for the  event.

    */
open class ActiveDesignerEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ActiveDesignerEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.Design.IDesignerHost, System.ComponentModel.Design.IDesignerHost)
// docid: M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)
    /**
    Initializes a new instance of the  class.

    - Parameter oldDesigner: The document that is losing activation.
    - Parameter newDesigner: The document that is gaining activation.
    */
    public init(oldDesigner : Optional<dotnet.System.ComponentModel.Design.IDesignerHost>, newDesigner : Optional<dotnet.System.ComponentModel.Design.IDesignerHost>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ActiveDesignerEventArgs_ctor_0__2__IDesignerHost_IDesignerHost(&__thrown, oldDesigner?.get_handle() ?? nil, newDesigner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.IDesignerHost get_NewDesigner()
// docid: M:System.ComponentModel.Design.ActiveDesignerEventArgs.get_NewDesigner
    open func get_NewDesigner() throws -> Optional<dotnet.System.ComponentModel.Design.IDesignerHost> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ActiveDesignerEventArgs_IDesignerHost__get_NewDesigner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.IDesignerHost(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.IDesignerHost get_OldDesigner()
// docid: M:System.ComponentModel.Design.ActiveDesignerEventArgs.get_OldDesigner
    open func get_OldDesigner() throws -> Optional<dotnet.System.ComponentModel.Design.IDesignerHost> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ActiveDesignerEventArgs_IDesignerHost__get_OldDesigner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.IDesignerHost(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the document that is gaining activation.

    */
    open var NewDesigner : Optional<dotnet.System.ComponentModel.Design.IDesignerHost> {
        get {
            return try! get_NewDesigner();
        }
    }
    /**
    Gets the document that is losing activation.

    */
    open var OldDesigner : Optional<dotnet.System.ComponentModel.Design.IDesignerHost> {
        get {
            return try! get_OldDesigner();
        }
    }
} // ActiveDesignerEventArgs


// type: System.ComponentModel.Design.ActiveDesignerEventHandler
    /**
    Represents the method that will handle the  event.

    */
public final class ActiveDesignerEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ActiveDesignerEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.Design.ActiveDesignerEventArgs)
// docid: M:System.ComponentModel.Design.ActiveDesignerEventHandler.Invoke(System.Object,System.ComponentModel.Design.ActiveDesignerEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ActiveDesignerEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ActiveDesignerEventHandler_void__Invoke_0__2__Object_ActiveDesignerEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.Design.ActiveDesignerEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.ActiveDesignerEventHandler.BeginInvoke(System.Object,System.ComponentModel.Design.ActiveDesignerEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ActiveDesignerEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ActiveDesignerEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ActiveDesignerEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.ActiveDesignerEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ActiveDesignerEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ActiveDesignerEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.Design.ActiveDesignerEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ActiveDesignerEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.Design.ActiveDesignerEventArgs)
// docid: M:System.ComponentModel.Design.ActiveDesignerEventHandler.Invoke(System.Object,System.ComponentModel.Design.ActiveDesignerEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ActiveDesignerEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ActiveDesignerEventHandler_void__Invoke_0__2__Object_ActiveDesignerEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ActiveDesignerEventHandler


// type: System.ComponentModel.Design.CheckoutException
    /**
    The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.

    */
open class CheckoutException
    :
    dotnet.System.Runtime.InteropServices.ExternalException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_CheckoutException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.Design.CheckoutException Canceled
    /**
    Initializes a new instance of the  class that specifies that the check out was canceled. This field is read-only.

    */
    open class var Canceled : dotnet.System.ComponentModel.Design.CheckoutException {
        get {
        let __return = dotnet.System.ComponentModel.Design.CheckoutException(hndl: System_ComponentModel_Design_CheckoutException_get_Canceled());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.Design.CheckoutException.#ctor
    /**
    Initializes a new instance of the  class with no associated message or error code.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_CheckoutException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the specified message.

    - Parameter message: A message describing the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_CheckoutException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the specified detailed description and the specified exception.

    - Parameter message: A detailed description of the error.
    - Parameter innerException: A reference to the inner exception that is the cause of this exception.
    */
    public init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_CheckoutException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Int32)
// docid: M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)
    /**
    Initializes a new instance of the  class with the specified message and error code.

    - Parameter message: A message describing the exception.
    - Parameter errorCode: The error code to pass.
    */
    public override init(message : Optional<dotnet.System.String>, errorCode : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_CheckoutException_ctor_0__2__String_i32(&__thrown, message?.get_handle() ?? nil, errorCode);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // CheckoutException


// type: System.ComponentModel.Design.CommandID
    /**
    Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.

    */
open class CommandID
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_CommandID_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Guid, System.Int32)
// docid: M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)
    /**
    Initializes a new instance of the  class using the specified menu group GUID and command ID number.

    - Parameter menuGroup: The GUID of the group that this menu command belongs to.
    - Parameter commandID: The numeric identifier of this menu command.
    */
    public init(menuGroup : dotnet.System.Guid, commandID : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_CommandID_ctor_0__2__Guid_i32(&__thrown, menuGroup.get_handle(), commandID);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.Design.CommandID.Equals(System.Object)
    /**
    Determines whether two  instances are equal.

    - Parameter obj: The object to compare.
    - Returns: 
         if the specified object is equivalent to this one; otherwise, .

    */
    open override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_CommandID_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.Design.CommandID.GetHashCode
    /**
    Serves as a hash function for a particular type.

    - Returns: A hash code for the current .

    */
    open override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_CommandID_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.Design.CommandID.ToString
    /**
    Returns a  that represents the current object.

    - Returns: A string that contains the command ID information, both the GUID and integer identifier.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_CommandID_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Guid get_Guid()
// docid: M:System.ComponentModel.Design.CommandID.get_Guid
    open func get_Guid() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_CommandID_Guid__get_Guid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_ID()
// docid: M:System.ComponentModel.Design.CommandID.get_ID
    open func get_ID() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_CommandID_i32__get_ID_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the GUID of the menu group that the menu command identified by this  belongs to.

    */
    open var Guid : dotnet.System.Guid {
        get {
            return try! get_Guid();
        }
    }
    /**
    Gets the numeric command ID.

    */
    open var ID : Swift.Int32 {
        get {
            return try! get_ID();
        }
    }
} // CommandID


// type: System.ComponentModel.Design.ComponentChangedEventArgs
    /**
    Provides data for the  event. This class cannot be inherited.

    */
public final class ComponentChangedEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ComponentChangedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.ComponentModel.MemberDescriptor, System.Object, System.Object)
// docid: M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)
    /**
    Initializes a new instance of the  class.

    - Parameter component: The component that was changed.
    - Parameter member: A  that represents the member that was changed.
    - Parameter oldValue: The old value of the changed member.
    - Parameter newValue: The new value of the changed member.
    */
    public init(component : Optional<dotnet.System.Object>, member : Optional<dotnet.System.ComponentModel.MemberDescriptor>, oldValue : Optional<dotnet.System.Object>, newValue : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ComponentChangedEventArgs_ctor_0__4__Object_MemberDescriptor_Object_Object(&__thrown, component?.get_handle() ?? nil, member?.get_handle() ?? nil, oldValue?.get_handle() ?? nil, newValue?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Component()
// docid: M:System.ComponentModel.Design.ComponentChangedEventArgs.get_Component
    public func get_Component() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentChangedEventArgs_Object__get_Component_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.MemberDescriptor get_Member()
// docid: M:System.ComponentModel.Design.ComponentChangedEventArgs.get_Member
    public func get_Member() throws -> Optional<dotnet.System.ComponentModel.MemberDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentChangedEventArgs_MemberDescriptor__get_Member_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.MemberDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_NewValue()
// docid: M:System.ComponentModel.Design.ComponentChangedEventArgs.get_NewValue
    public func get_NewValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentChangedEventArgs_Object__get_NewValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_OldValue()
// docid: M:System.ComponentModel.Design.ComponentChangedEventArgs.get_OldValue
    public func get_OldValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentChangedEventArgs_Object__get_OldValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the component that was modified.

    */
    public var Component : Optional<dotnet.System.Object> {
        get {
            return try! get_Component();
        }
    }
    /**
    Gets the member that has been changed.

    */
    public var Member : Optional<dotnet.System.ComponentModel.MemberDescriptor> {
        get {
            return try! get_Member();
        }
    }
    /**
    Gets the new value of the changed member.

    */
    public var NewValue : Optional<dotnet.System.Object> {
        get {
            return try! get_NewValue();
        }
    }
    /**
    Gets the old value of the changed member.

    */
    public var OldValue : Optional<dotnet.System.Object> {
        get {
            return try! get_OldValue();
        }
    }
} // ComponentChangedEventArgs


// type: System.ComponentModel.Design.ComponentChangedEventHandler
    /**
    Represents the method that will handle a  event.

    */
public final class ComponentChangedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ComponentChangedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.Design.ComponentChangedEventArgs)
// docid: M:System.ComponentModel.Design.ComponentChangedEventHandler.Invoke(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentChangedEventHandler_void__Invoke_0__2__Object_ComponentChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.Design.ComponentChangedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.ComponentChangedEventHandler.BeginInvoke(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentChangedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentChangedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ComponentChangedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.ComponentChangedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentChangedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentChangedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.Design.ComponentChangedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ComponentChangedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.Design.ComponentChangedEventArgs)
// docid: M:System.ComponentModel.Design.ComponentChangedEventHandler.Invoke(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentChangedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentChangedEventHandler_void__Invoke_0__2__Object_ComponentChangedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ComponentChangedEventHandler


// type: System.ComponentModel.Design.ComponentChangingEventArgs
    /**
    Provides data for the  event. This class cannot be inherited.

    */
public final class ComponentChangingEventArgs
    :
    dotnet.System.EventArgs
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ComponentChangingEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.ComponentModel.MemberDescriptor)
// docid: M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)
    /**
    Initializes a new instance of the  class.

    - Parameter component: The component that is about to be changed.
    - Parameter member: A  indicating the member of the component that is about to be changed.
    */
    public init(component : Optional<dotnet.System.Object>, member : Optional<dotnet.System.ComponentModel.MemberDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ComponentChangingEventArgs_ctor_0__2__Object_MemberDescriptor(&__thrown, component?.get_handle() ?? nil, member?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Component()
// docid: M:System.ComponentModel.Design.ComponentChangingEventArgs.get_Component
    public func get_Component() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentChangingEventArgs_Object__get_Component_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.MemberDescriptor get_Member()
// docid: M:System.ComponentModel.Design.ComponentChangingEventArgs.get_Member
    public func get_Member() throws -> Optional<dotnet.System.ComponentModel.MemberDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentChangingEventArgs_MemberDescriptor__get_Member_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.MemberDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.

    */
    public var Component : Optional<dotnet.System.Object> {
        get {
            return try! get_Component();
        }
    }
    /**
    Gets the member that is about to be changed.

    */
    public var Member : Optional<dotnet.System.ComponentModel.MemberDescriptor> {
        get {
            return try! get_Member();
        }
    }
} // ComponentChangingEventArgs


// type: System.ComponentModel.Design.ComponentChangingEventHandler
    /**
    Represents the method that will handle a  event.

    */
public final class ComponentChangingEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ComponentChangingEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.Design.ComponentChangingEventArgs)
// docid: M:System.ComponentModel.Design.ComponentChangingEventHandler.Invoke(System.Object,System.ComponentModel.Design.ComponentChangingEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentChangingEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentChangingEventHandler_void__Invoke_0__2__Object_ComponentChangingEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.Design.ComponentChangingEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.ComponentChangingEventHandler.BeginInvoke(System.Object,System.ComponentModel.Design.ComponentChangingEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentChangingEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentChangingEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ComponentChangingEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.ComponentChangingEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentChangingEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentChangingEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.Design.ComponentChangingEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ComponentChangingEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.Design.ComponentChangingEventArgs)
// docid: M:System.ComponentModel.Design.ComponentChangingEventHandler.Invoke(System.Object,System.ComponentModel.Design.ComponentChangingEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentChangingEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentChangingEventHandler_void__Invoke_0__2__Object_ComponentChangingEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ComponentChangingEventHandler


// type: System.ComponentModel.Design.ComponentEventArgs
    /**
    Provides data for the , , , and  events.

    */
open class ComponentEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ComponentEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)
    /**
    Initializes a new instance of the  class.

    - Parameter component: The component that is the source of the event.
    */
    public init(component : Optional<dotnet.System.ComponentModel.IComponent>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ComponentEventArgs_ctor_0__1__IComponent(&__thrown, component?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.IComponent get_Component()
// docid: M:System.ComponentModel.Design.ComponentEventArgs.get_Component
    open func get_Component() throws -> Optional<dotnet.System.ComponentModel.IComponent> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentEventArgs_IComponent__get_Component_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IComponent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the component associated with the event.

    */
    open var Component : Optional<dotnet.System.ComponentModel.IComponent> {
        get {
            return try! get_Component();
        }
    }
} // ComponentEventArgs


// type: System.ComponentModel.Design.ComponentEventHandler
    /**
    Represents the method that will handle the , , , and  events raised for component-level events.

    */
public final class ComponentEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ComponentEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.Design.ComponentEventArgs)
// docid: M:System.ComponentModel.Design.ComponentEventHandler.Invoke(System.Object,System.ComponentModel.Design.ComponentEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentEventHandler_void__Invoke_0__2__Object_ComponentEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.Design.ComponentEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.ComponentEventHandler.BeginInvoke(System.Object,System.ComponentModel.Design.ComponentEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ComponentEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.ComponentEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.Design.ComponentEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ComponentEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.Design.ComponentEventArgs)
// docid: M:System.ComponentModel.Design.ComponentEventHandler.Invoke(System.Object,System.ComponentModel.Design.ComponentEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentEventHandler_void__Invoke_0__2__Object_ComponentEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ComponentEventHandler


// type: System.ComponentModel.Design.ComponentRenameEventArgs
    /**
    Provides data for the  event.

    */
open class ComponentRenameEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ComponentRenameEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Object, System.String, System.String)
// docid: M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter component: The component to be renamed.
    - Parameter oldName: The old name of the component.
    - Parameter newName: The new name of the component.
    */
    public init(component : Optional<dotnet.System.Object>, oldName : Optional<dotnet.System.String>, newName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ComponentRenameEventArgs_ctor_0__3__Object_String_String(&__thrown, component?.get_handle() ?? nil, oldName?.get_handle() ?? nil, newName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_Component()
// docid: M:System.ComponentModel.Design.ComponentRenameEventArgs.get_Component
    open func get_Component() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentRenameEventArgs_Object__get_Component_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_NewName()
// docid: M:System.ComponentModel.Design.ComponentRenameEventArgs.get_NewName
    open func get_NewName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentRenameEventArgs_String__get_NewName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_OldName()
// docid: M:System.ComponentModel.Design.ComponentRenameEventArgs.get_OldName
    open func get_OldName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentRenameEventArgs_String__get_OldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the component that is being renamed.

    */
    open var Component : Optional<dotnet.System.Object> {
        get {
            return try! get_Component();
        }
    }
    /**
    Gets the name of the component after the rename event.

    */
    open var NewName : Optional<dotnet.System.String> {
        get {
            return try! get_NewName();
        }
    }
    /**
    Gets the name of the component before the rename event.

    */
    open var OldName : Optional<dotnet.System.String> {
        get {
            return try! get_OldName();
        }
    }
} // ComponentRenameEventArgs


// type: System.ComponentModel.Design.ComponentRenameEventHandler
    /**
    Represents the method that will handle a  event.

    */
public final class ComponentRenameEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ComponentRenameEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.Design.ComponentRenameEventArgs)
// docid: M:System.ComponentModel.Design.ComponentRenameEventHandler.Invoke(System.Object,System.ComponentModel.Design.ComponentRenameEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentRenameEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentRenameEventHandler_void__Invoke_0__2__Object_ComponentRenameEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.Design.ComponentRenameEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.ComponentRenameEventHandler.BeginInvoke(System.Object,System.ComponentModel.Design.ComponentRenameEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentRenameEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ComponentRenameEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ComponentRenameEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.ComponentRenameEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentRenameEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentRenameEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.Design.ComponentRenameEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ComponentRenameEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.Design.ComponentRenameEventArgs)
// docid: M:System.ComponentModel.Design.ComponentRenameEventHandler.Invoke(System.Object,System.ComponentModel.Design.ComponentRenameEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.ComponentRenameEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ComponentRenameEventHandler_void__Invoke_0__2__Object_ComponentRenameEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ComponentRenameEventHandler


// type: System.ComponentModel.Design.DesignerCollection
    /**
    Represents a collection of designers.

    */
open class DesignerCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.IList)
// docid: M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)
    /**
    Initializes a new instance of the  class that contains the specified set of designers.

    - Parameter designers: A list that contains the collection of designers to add.
    */
    public init(designers : Optional<dotnet.System.Collections.IList>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerCollection_ctor_0__1__IList(&__thrown, designers?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.Design.IDesignerHost[])
// docid: M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])
    /**
    Initializes a new instance of the  class that contains the specified designers.

    - Parameter designers: An array of  objects to store.
    */
    public init(designers : Optional<dotnet.System_Arr<dotnet.System.ComponentModel.Design.IDesignerHost>>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerCollection_ctor_0__1__IDesignerHostArray(&__thrown, (designers?.get_handle()));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.ComponentModel.Design.DesignerCollection.GetEnumerator
    /**
    Gets a new enumerator for this collection.

    - Returns: An  that enumerates the collection.

    */
    open func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.ComponentModel.Design.DesignerCollection.get_Count
    open func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.IDesignerHost get_Item(System.Int32)
// docid: M:System.ComponentModel.Design.DesignerCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.ComponentModel.Design.IDesignerHost> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerCollection_IDesignerHost__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.IDesignerHost(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of designers in the collection.

    */
    open var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // DesignerCollection


// type: System.ComponentModel.Design.DesignerEventArgs
    /**
    Provides data for the  and  events.

    */
open class DesignerEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.ComponentModel.Design.IDesignerHost)
// docid: M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)
    /**
    Initializes a new instance of the  class.

    - Parameter host: The  of the document.
    */
    public init(host : Optional<dotnet.System.ComponentModel.Design.IDesignerHost>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerEventArgs_ctor_0__1__IDesignerHost(&__thrown, host?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.IDesignerHost get_Designer()
// docid: M:System.ComponentModel.Design.DesignerEventArgs.get_Designer
    open func get_Designer() throws -> Optional<dotnet.System.ComponentModel.Design.IDesignerHost> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerEventArgs_IDesignerHost__get_Designer_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.IDesignerHost(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the host of the document.

    */
    open var Designer : Optional<dotnet.System.ComponentModel.Design.IDesignerHost> {
        get {
            return try! get_Designer();
        }
    }
} // DesignerEventArgs


// type: System.ComponentModel.Design.DesignerEventHandler
    /**
    Represents the method that will handle the  and  events that are raised when a document is created or disposed of.

    */
public final class DesignerEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.Design.DesignerEventArgs)
// docid: M:System.ComponentModel.Design.DesignerEventHandler.Invoke(System.Object,System.ComponentModel.Design.DesignerEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.DesignerEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerEventHandler_void__Invoke_0__2__Object_DesignerEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.Design.DesignerEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.DesignerEventHandler.BeginInvoke(System.Object,System.ComponentModel.Design.DesignerEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.DesignerEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DesignerEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.DesignerEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.Design.DesignerEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.Design.DesignerEventArgs)
// docid: M:System.ComponentModel.Design.DesignerEventHandler.Invoke(System.Object,System.ComponentModel.Design.DesignerEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.DesignerEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerEventHandler_void__Invoke_0__2__Object_DesignerEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DesignerEventHandler


// type: System.ComponentModel.Design.DesignerOptionService
    /**
    Provides a base class for getting and setting option values for a designer.

    */
open class DesignerOptionService
    :
    dotnet.System.Object,
    System_ComponentModel_Design_IDesignerOptionService
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerOptionService_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection get_Options()
// docid: M:System.ComponentModel.Design.DesignerOptionService.get_Options
    open func get_Options() throws -> dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionService_DesignerOptionCollection__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection(hndl : __return);
        }
    }
    /**
    Gets the options collection for this service.

    */
    open var Options : dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection {
        get {
            return try! get_Options();
        }
    }
} // DesignerOptionService


// type: System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection
    /**
    Contains a collection of designer options. This class cannot be inherited.

    */
public final class DesignerOptionService_DesignerOptionCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void CopyTo(System.Array, System.Int32)
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)
    /**
    Copies the entire collection to a compatible one-dimensional , starting at the specified index of the target array.

    - Parameter array: The one-dimensional  that is the destination of the elements copied from the collection. The  must have zero-based indexing.
    - Parameter index: The zero-based index in  at which copying begins.
    */
    public func CopyTo(array : dotnet.System.Array, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_void__CopyTo_0__2__Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator
    /**
    Returns an  that can be used to iterate this collection.

    - Returns: An  that can be used to iterate this collection.

    */
    public func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)
    /**
    Returns the index of the first occurrence of a given value in a range of this collection.

    - Parameter value: The object to locate in the collection.
    - Returns: The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.

    */
    public func IndexOf(value : dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_i32__IndexOf_0__1__DesignerOptionService_DesignerOptionCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool ShowDialog()
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog
    /**
    Displays a dialog box user interface (UI) with which the user can configure the options in this .

    - Returns: 
         if the dialog box can be displayed; otherwise, .

    */
    public func ShowDialog() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_bool__ShowDialog_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection get_Parent()
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.get_Parent
    public func get_Parent() throws -> Optional<dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_DesignerOptionService_DesignerOptionCollection__get_Parent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptorCollection get_Properties()
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.get_Properties
    public func get_Properties() throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_PropertyDescriptorCollection__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection get_Item(System.Int32)
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_DesignerOptionService_DesignerOptionCollection__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection get_Item(System.String)
// docid: M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(name : dotnet.System.String) throws -> Optional<dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerOptionService_DesignerOptionCollection_DesignerOptionService_DesignerOptionCollection__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of child option collections this  contains.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    /**
    Gets the name of this .

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the parent collection object.

    */
    public var Parent : Optional<dotnet.System.ComponentModel.Design.DesignerOptionService_DesignerOptionCollection> {
        get {
            return try! get_Parent();
        }
    }
    /**
    Gets the collection of properties offered by this , along with all of its children.

    */
    public var Properties : dotnet.System.ComponentModel.PropertyDescriptorCollection {
        get {
            return try! get_Properties();
        }
    }
} // DesignerOptionService_DesignerOptionCollection


// type: System.ComponentModel.Design.DesignerTransaction
    /**
    Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.

    */
open class DesignerTransaction
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerTransaction_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Cancel()
// docid: M:System.ComponentModel.Design.DesignerTransaction.Cancel
    /**
    Cancels the transaction and attempts to roll back the changes made by the events of the transaction.

    */
    open func Cancel() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerTransaction_void__Cancel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Commit()
// docid: M:System.ComponentModel.Design.DesignerTransaction.Commit
    /**
    Commits this transaction.

    */
    open func Commit() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerTransaction_void__Commit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Canceled()
// docid: M:System.ComponentModel.Design.DesignerTransaction.get_Canceled
    open func get_Canceled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerTransaction_bool__get_Canceled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Committed()
// docid: M:System.ComponentModel.Design.DesignerTransaction.get_Committed
    open func get_Committed() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerTransaction_bool__get_Committed_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.ComponentModel.Design.DesignerTransaction.get_Description
    open func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerTransaction_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets a value indicating whether the transaction was canceled.

    */
    open var Canceled : Bool {
        get {
            return try! get_Canceled();
        }
    }
    /**
    Gets a value indicating whether the transaction was committed.

    */
    open var Committed : Bool {
        get {
            return try! get_Committed();
        }
    }
    /**
    Gets a description for the transaction.

    */
    open var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
    }
} // DesignerTransaction


// type: System.ComponentModel.Design.DesignerTransactionCloseEventArgs
    /**
    Provides data for the  and  events.

    */
open class DesignerTransactionCloseEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerTransactionCloseEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(bool)
// docid: M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)
    /**
    Initializes a new instance of the  class, using the specified value that indicates whether the designer called  on the transaction.

    - Parameter commit: A value indicating whether the transaction was committed.
    */
    public init(commit : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerTransactionCloseEventArgs_ctor_0__1__bool(&__thrown, Swift.Int32(commit ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(bool, bool)
// docid: M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter commit: A value indicating whether the transaction was committed.
    - Parameter lastTransaction: 
         if this is the last transaction to close; otherwise, .
    */
    public init(commit : Bool, lastTransaction : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerTransactionCloseEventArgs_ctor_0__2__bool_bool(&__thrown, Swift.Int32(commit ? 1 : 0), Swift.Int32(lastTransaction ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_LastTransaction()
// docid: M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.get_LastTransaction
    open func get_LastTransaction() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerTransactionCloseEventArgs_bool__get_LastTransaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_TransactionCommitted()
// docid: M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.get_TransactionCommitted
    open func get_TransactionCommitted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerTransactionCloseEventArgs_bool__get_TransactionCommitted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether this is the last transaction to close.

    */
    open var LastTransaction : Bool {
        get {
            return try! get_LastTransaction();
        }
    }
    /**
    Indicates whether the designer called  on the transaction.

    */
    open var TransactionCommitted : Bool {
        get {
            return try! get_TransactionCommitted();
        }
    }
} // DesignerTransactionCloseEventArgs


// type: System.ComponentModel.Design.DesignerTransactionCloseEventHandler
    /**
    Represents the method that handles the  and  events of a designer.

    */
public final class DesignerTransactionCloseEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerTransactionCloseEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.Design.DesignerTransactionCloseEventArgs)
// docid: M:System.ComponentModel.Design.DesignerTransactionCloseEventHandler.Invoke(System.Object,System.ComponentModel.Design.DesignerTransactionCloseEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerTransactionCloseEventHandler_void__Invoke_0__2__Object_DesignerTransactionCloseEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.Design.DesignerTransactionCloseEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.DesignerTransactionCloseEventHandler.BeginInvoke(System.Object,System.ComponentModel.Design.DesignerTransactionCloseEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerTransactionCloseEventHandler_IAsyncResult__BeginInvoke_0__4__Object_DesignerTransactionCloseEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.DesignerTransactionCloseEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerTransactionCloseEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerTransactionCloseEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.Design.DesignerTransactionCloseEventArgs)
// docid: M:System.ComponentModel.Design.DesignerTransactionCloseEventHandler.Invoke(System.Object,System.ComponentModel.Design.DesignerTransactionCloseEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerTransactionCloseEventHandler_void__Invoke_0__2__Object_DesignerTransactionCloseEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DesignerTransactionCloseEventHandler


// type: System.ComponentModel.Design.DesignerVerb
    /**
    Represents a verb that can be invoked from a designer.

    */
open class DesignerVerb
    :
    dotnet.System.ComponentModel.Design.MenuCommand
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerVerb_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.EventHandler)
// docid: M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)
    /**
    Initializes a new instance of the  class.

    - Parameter text: The text of the menu command that is shown to the user.
    - Parameter handler: The event handler that performs the actions of the verb.
    */
    public init(text : dotnet.System.String, handler : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerVerb_ctor_0__2__String_EventHandler(&__thrown, text.get_handle(), handler.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.EventHandler, System.ComponentModel.Design.CommandID)
// docid: M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)
    /**
    Initializes a new instance of the  class.

    - Parameter text: The text of the menu command that is shown to the user.
    - Parameter handler: The event handler that performs the actions of the verb.
    - Parameter startCommandID: The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.
    */
    public init(text : dotnet.System.String, handler : dotnet.System.EventHandler, startCommandID : dotnet.System.ComponentModel.Design.CommandID) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerVerb_ctor_0__3__String_EventHandler_CommandID(&__thrown, text.get_handle(), handler.get_handle(), startCommandID.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.Design.DesignerVerb.ToString
    /**
    Overrides .

    - Returns: The verb's text, or an empty string ("") if the text field is empty.

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerVerb_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.ComponentModel.Design.DesignerVerb.get_Description
    open func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerVerb_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Description(System.String)
// docid: M:System.ComponentModel.Design.DesignerVerb.set_Description(System.String)
    open func set_Description(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerVerb_void__set_Description_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Text()
// docid: M:System.ComponentModel.Design.DesignerVerb.get_Text
    open func get_Text() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerVerb_String__get_Text_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets or sets the description of the menu item for the verb.

    */
    open var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
        set(v) {
            return try! set_Description(value: v);
        }
    }
    /**
    Gets the text description for the verb command on the menu.

    */
    open var Text : dotnet.System.String {
        get {
            return try! get_Text();
        }
    }
} // DesignerVerb


// type: System.ComponentModel.Design.DesignerVerbCollection
    /**
    Represents a collection of  objects.

    */
open class DesignerVerbCollection
    :
    dotnet.System.Collections.CollectionBase
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesignerVerbCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerVerbCollection_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.ComponentModel.Design.DesignerVerb[])
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])
    /**
    Initializes a new instance of the  class using the specified array of  objects.

    - Parameter value: A  array that indicates the verbs to contain within the collection.
    */
    public init(value : dotnet.System_Arr<dotnet.System.ComponentModel.Design.DesignerVerb>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesignerVerbCollection_ctor_0__1__DesignerVerbArray(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Int32 Add(System.ComponentModel.Design.DesignerVerb)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)
    /**
    Adds the specified  to the collection.

    - Parameter value: The  to add to the collection.
    - Returns: The index in the collection at which the verb was added.

    */
    open func Add(value : Optional<dotnet.System.ComponentModel.Design.DesignerVerb>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerVerbCollection_i32__Add_0__1__DesignerVerb(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void AddRange(System.ComponentModel.Design.DesignerVerbCollection)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)
    /**
    Adds the specified collection of designer verbs to the collection.

    - Parameter value: A  to add to the collection.
    */
    open func AddRange(value : dotnet.System.ComponentModel.Design.DesignerVerbCollection) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerVerbCollection_void__AddRange_0__1__DesignerVerbCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.ComponentModel.Design.DesignerVerb[])
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])
    /**
    Adds the specified set of designer verbs to the collection.

    - Parameter value: An array of  objects to add to the collection.
    */
    open func AddRange(value : dotnet.System_Arr<dotnet.System.ComponentModel.Design.DesignerVerb>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerVerbCollection_void__AddRange_0__1__DesignerVerbArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.ComponentModel.Design.DesignerVerb)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)
    /**
    Gets a value indicating whether the specified  exists in the collection.

    - Parameter value: The  to search for in the collection.
    - Returns: 
         if the specified object exists in the collection; otherwise, .

    */
    open func Contains(value : Optional<dotnet.System.ComponentModel.Design.DesignerVerb>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerVerbCollection_bool__Contains_0__1__DesignerVerb(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.ComponentModel.Design.DesignerVerb[], System.Int32)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)
    /**
    Copies the collection members to the specified  array beginning at the specified destination index.

    - Parameter array: The array to copy collection members to.
    - Parameter index: The destination index to begin copying to.
    */
    open func CopyTo(array : dotnet.System_Arr<dotnet.System.ComponentModel.Design.DesignerVerb>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerVerbCollection_void__CopyTo_0__2__DesignerVerbArray_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Int32 IndexOf(System.ComponentModel.Design.DesignerVerb)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)
    /**
    Gets the index of the specified .

    - Parameter value: The  whose index to get in the collection.
    - Returns: The index of the specified object if it is found in the list; otherwise, -1.

    */
    open func IndexOf(value : Optional<dotnet.System.ComponentModel.Design.DesignerVerb>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerVerbCollection_i32__IndexOf_0__1__DesignerVerb(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.ComponentModel.Design.DesignerVerb)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)
    /**
    Inserts the specified  at the specified index.

    - Parameter index: The index in the collection at which to insert the verb.
    - Parameter value: The  to insert in the collection.
    */
    open func Insert(index : Swift.Int32, value : Optional<dotnet.System.ComponentModel.Design.DesignerVerb>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerVerbCollection_void__Insert_0__2__i32_DesignerVerb(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.ComponentModel.Design.DesignerVerb)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)
    /**
    Removes the specified  from the collection.

    - Parameter value: The  to remove from the collection.
    */
    open func Remove(value : Optional<dotnet.System.ComponentModel.Design.DesignerVerb>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerVerbCollection_void__Remove_0__1__DesignerVerb(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.DesignerVerb get_Item(System.Int32)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.ComponentModel.Design.DesignerVerb> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesignerVerbCollection_DesignerVerb__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.DesignerVerb(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.ComponentModel.Design.DesignerVerb)
// docid: M:System.ComponentModel.Design.DesignerVerbCollection.set_Item(System.Int32,System.ComponentModel.Design.DesignerVerb)
    open func set_Item(index : Swift.Int32, value : Optional<dotnet.System.ComponentModel.Design.DesignerVerb>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesignerVerbCollection_void__set_Item_0__2__i32_DesignerVerb(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DesignerVerbCollection


// type: System.ComponentModel.Design.DesigntimeLicenseContext
    /**
    Represents a design-time license context that can support a license provider at design time.

    */
open class DesigntimeLicenseContext
    :
    dotnet.System.ComponentModel.LicenseContext
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesigntimeLicenseContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_DesigntimeLicenseContext_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.String GetSavedLicenseKey(System.Type, System.Reflection.Assembly)
// docid: M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)
    /**
    Gets a saved license key.

    - Parameter type: The type of the license key.
    - Parameter resourceAssembly: The assembly to get the key from.
    - Returns: The saved license key that matches the specified type.

    */
    open override func GetSavedLicenseKey(type : dotnet.System.Type_, resourceAssembly : Optional<dotnet.System.Reflection.Assembly>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesigntimeLicenseContext_String__GetSavedLicenseKey_0__2__Type_Assembly(&__thrown, self.get_handle(), type.get_handle(), resourceAssembly?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetSavedLicenseKey(System.Type, System.String)
// docid: M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)
    /**
    Sets a saved license key.

    - Parameter type: The type of the license key.
    - Parameter key: The license key.
    */
    open override func SetSavedLicenseKey(type : dotnet.System.Type_, key : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesigntimeLicenseContext_void__SetSavedLicenseKey_0__2__Type_String(&__thrown, self.get_handle(), type.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.LicenseUsageMode get_UsageMode()
// docid: M:System.ComponentModel.Design.DesigntimeLicenseContext.get_UsageMode
    open override func get_UsageMode() throws -> dotnet.System.ComponentModel.LicenseUsageMode {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_DesigntimeLicenseContext_LicenseUsageMode__get_UsageMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.LicenseUsageMode(val: __return);
        }
    }
    /**
    Gets the license usage mode.

    */
    open override var UsageMode : dotnet.System.ComponentModel.LicenseUsageMode {
        get {
            return try! get_UsageMode();
        }
    }
} // DesigntimeLicenseContext


// type: System.ComponentModel.Design.DesigntimeLicenseContextSerializer
    /**
    Provides support for design-time license context serialization.

    */
open class DesigntimeLicenseContextSerializer
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_DesigntimeLicenseContextSerializer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Serialize(System.IO.Stream, System.String, System.ComponentModel.Design.DesigntimeLicenseContext)
// docid: M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)
    /**
    Serializes the licenses within the specified design-time license context using the specified key and output stream.

    - Parameter o: The stream to output to.
    - Parameter cryptoKey: The key to use for encryption.
    - Parameter context: A  indicating the license context.
    */
    open class func Serialize(o : dotnet.System.IO.Stream, cryptoKey : dotnet.System.String, context : dotnet.System.ComponentModel.Design.DesigntimeLicenseContext) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_DesigntimeLicenseContextSerializer_void__Serialize_0__3__Stream_String_DesigntimeLicenseContext(&__thrown, o.get_handle(), cryptoKey.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // DesigntimeLicenseContextSerializer


// type: System.ComponentModel.Design.HelpContextType
    /**
    Defines identifiers that indicate information about the context in which a request for Help information originated.

    */
public struct HelpContextType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_HelpContextType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.Design.HelpContextType Ambient
    /**
    A general context.

    */
    public static var Ambient : dotnet.System.ComponentModel.Design.HelpContextType {
        get {
        let __return = dotnet.System.ComponentModel.Design.HelpContextType(val: System_ComponentModel_Design_HelpContextType_get_Ambient());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.HelpContextType Window
    /**
    A window.

    */
    public static var Window : dotnet.System.ComponentModel.Design.HelpContextType {
        get {
        let __return = dotnet.System.ComponentModel.Design.HelpContextType(val: System_ComponentModel_Design_HelpContextType_get_Window());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.HelpContextType Selection
    /**
    A selection.

    */
    public static var Selection : dotnet.System.ComponentModel.Design.HelpContextType {
        get {
        let __return = dotnet.System.ComponentModel.Design.HelpContextType(val: System_ComponentModel_Design_HelpContextType_get_Selection());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.HelpContextType ToolWindowSelection
    /**
    A tool window selection.

    */
    public static var ToolWindowSelection : dotnet.System.ComponentModel.Design.HelpContextType {
        get {
        let __return = dotnet.System.ComponentModel.Design.HelpContextType(val: System_ComponentModel_Design_HelpContextType_get_ToolWindowSelection());
            return __return;
        }
    }
} // HelpContextType


// type: System.ComponentModel.Design.HelpKeywordAttribute
    /**
    Specifies the context keyword for a class or member. This class cannot be inherited.

    */
public final class HelpKeywordAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_HelpKeywordAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.Design.HelpKeywordAttribute Default
    /**
    Represents the default value for . This field is read-only.

    */
    public class var Default : dotnet.System.ComponentModel.Design.HelpKeywordAttribute {
        get {
        let __return = dotnet.System.ComponentModel.Design.HelpKeywordAttribute(hndl: System_ComponentModel_Design_HelpKeywordAttribute_get_Default());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_HelpKeywordAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter keyword: The Help keyword value.
    */
    public init(keyword : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_HelpKeywordAttribute_ctor_0__1__String(&__thrown, keyword.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class from the given type.

    - Parameter t: The type from which the Help keyword will be taken.
    */
    public init(t : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_HelpKeywordAttribute_ctor_0__1__Type(&__thrown, t.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)
    /**
    Determines whether two  instances are equal.

    - Parameter obj: The  to compare with the current .
    - Returns: 
         if the specified  is equal to the current ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_HelpKeywordAttribute_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_HelpKeywordAttribute_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool IsDefaultAttribute()
// docid: M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute
    /**
    Determines whether the Help keyword is .

    - Returns: 
         if the Help keyword is ; otherwise, .

    */
    public override func IsDefaultAttribute() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_HelpKeywordAttribute_bool__IsDefaultAttribute_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_HelpKeyword()
// docid: M:System.ComponentModel.Design.HelpKeywordAttribute.get_HelpKeyword
    public func get_HelpKeyword() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_HelpKeywordAttribute_String__get_HelpKeyword_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the Help keyword supplied by this attribute.

    */
    public var HelpKeyword : Optional<dotnet.System.String> {
        get {
            return try! get_HelpKeyword();
        }
    }
} // HelpKeywordAttribute


// type: System.ComponentModel.Design.HelpKeywordType
    /**
    Defines identifiers that indicate the type of a Help keyword.

    */
public struct HelpKeywordType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_HelpKeywordType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.Design.HelpKeywordType F1Keyword
    /**
    A keyword that F1 was pressed to request help about.

    */
    public static var F1Keyword : dotnet.System.ComponentModel.Design.HelpKeywordType {
        get {
        let __return = dotnet.System.ComponentModel.Design.HelpKeywordType(val: System_ComponentModel_Design_HelpKeywordType_get_F1Keyword());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.HelpKeywordType GeneralKeyword
    /**
    A general keyword.

    */
    public static var GeneralKeyword : dotnet.System.ComponentModel.Design.HelpKeywordType {
        get {
        let __return = dotnet.System.ComponentModel.Design.HelpKeywordType(val: System_ComponentModel_Design_HelpKeywordType_get_GeneralKeyword());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.HelpKeywordType FilterKeyword
    /**
    A filter keyword.

    */
    public static var FilterKeyword : dotnet.System.ComponentModel.Design.HelpKeywordType {
        get {
        let __return = dotnet.System.ComponentModel.Design.HelpKeywordType(val: System_ComponentModel_Design_HelpKeywordType_get_FilterKeyword());
            return __return;
        }
    }
} // HelpKeywordType


// type: System.ComponentModel.Design.IComponentChangeService
    /**
    Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a  or  event.

    */
open class IComponentChangeService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IComponentChangeService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IComponentChangeService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnComponentChanged(System.Object, System.ComponentModel.MemberDescriptor, System.Object, System.Object)
// docid: M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)
    /**
    Announces to the component change service that a particular component has changed.

    - Parameter component: The component that has changed.
    - Parameter member: The member that has changed. This is  if this change is not related to a single member.
    - Parameter oldValue: The old value of the member. This is valid only if the member is not .
    - Parameter newValue: The new value of the member. This is valid only if the member is not .
    */
    open func OnComponentChanged(component : dotnet.System.Object, member : Optional<dotnet.System.ComponentModel.MemberDescriptor>, oldValue : Optional<dotnet.System.Object>, newValue : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__OnComponentChanged_0__4__Object_MemberDescriptor_Object_Object(&__thrown, self.get_handle(), component.get_handle(), member?.get_handle() ?? nil, oldValue?.get_handle() ?? nil, newValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void OnComponentChanging(System.Object, System.ComponentModel.MemberDescriptor)
// docid: M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)
    /**
    Announces to the component change service that a particular component is changing.

    - Parameter component: The component that is about to change.
    - Parameter member: The member that is changing. This is  if this change is not related to a single member.
    */
    open func OnComponentChanging(component : dotnet.System.Object, member : Optional<dotnet.System.ComponentModel.MemberDescriptor>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__OnComponentChanging_0__2__Object_MemberDescriptor(&__thrown, self.get_handle(), component.get_handle(), member?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_ComponentAdded(System.ComponentModel.Design.ComponentEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.add_ComponentAdded(System.ComponentModel.Design.ComponentEventHandler)
    open func add_ComponentAdded(value : dotnet.System.ComponentModel.Design.ComponentEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__add_ComponentAdded_0__1__ComponentEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ComponentAdded(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentEventHandler(value);
        return try add_ComponentAdded(value: del_value);
    }
    // [IsSpecialName] void remove_ComponentAdded(System.ComponentModel.Design.ComponentEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdded(System.ComponentModel.Design.ComponentEventHandler)
    open func remove_ComponentAdded(value : dotnet.System.ComponentModel.Design.ComponentEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__remove_ComponentAdded_0__1__ComponentEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ComponentAdded(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentEventHandler(value);
        return try remove_ComponentAdded(value: del_value);
    }
    // [IsSpecialName] void add_ComponentAdding(System.ComponentModel.Design.ComponentEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.add_ComponentAdding(System.ComponentModel.Design.ComponentEventHandler)
    open func add_ComponentAdding(value : dotnet.System.ComponentModel.Design.ComponentEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__add_ComponentAdding_0__1__ComponentEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ComponentAdding(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentEventHandler(value);
        return try add_ComponentAdding(value: del_value);
    }
    // [IsSpecialName] void remove_ComponentAdding(System.ComponentModel.Design.ComponentEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdding(System.ComponentModel.Design.ComponentEventHandler)
    open func remove_ComponentAdding(value : dotnet.System.ComponentModel.Design.ComponentEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__remove_ComponentAdding_0__1__ComponentEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ComponentAdding(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentEventHandler(value);
        return try remove_ComponentAdding(value: del_value);
    }
    // [IsSpecialName] void add_ComponentChanged(System.ComponentModel.Design.ComponentChangedEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.add_ComponentChanged(System.ComponentModel.Design.ComponentChangedEventHandler)
    open func add_ComponentChanged(value : dotnet.System.ComponentModel.Design.ComponentChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__add_ComponentChanged_0__1__ComponentChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ComponentChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentChangedEventHandler(value);
        return try add_ComponentChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ComponentChanged(System.ComponentModel.Design.ComponentChangedEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanged(System.ComponentModel.Design.ComponentChangedEventHandler)
    open func remove_ComponentChanged(value : dotnet.System.ComponentModel.Design.ComponentChangedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__remove_ComponentChanged_0__1__ComponentChangedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ComponentChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentChangedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentChangedEventHandler(value);
        return try remove_ComponentChanged(value: del_value);
    }
    // [IsSpecialName] void add_ComponentChanging(System.ComponentModel.Design.ComponentChangingEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.add_ComponentChanging(System.ComponentModel.Design.ComponentChangingEventHandler)
    open func add_ComponentChanging(value : dotnet.System.ComponentModel.Design.ComponentChangingEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__add_ComponentChanging_0__1__ComponentChangingEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ComponentChanging(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentChangingEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentChangingEventHandler(value);
        return try add_ComponentChanging(value: del_value);
    }
    // [IsSpecialName] void remove_ComponentChanging(System.ComponentModel.Design.ComponentChangingEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanging(System.ComponentModel.Design.ComponentChangingEventHandler)
    open func remove_ComponentChanging(value : dotnet.System.ComponentModel.Design.ComponentChangingEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__remove_ComponentChanging_0__1__ComponentChangingEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ComponentChanging(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentChangingEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentChangingEventHandler(value);
        return try remove_ComponentChanging(value: del_value);
    }
    // [IsSpecialName] void add_ComponentRemoved(System.ComponentModel.Design.ComponentEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoved(System.ComponentModel.Design.ComponentEventHandler)
    open func add_ComponentRemoved(value : dotnet.System.ComponentModel.Design.ComponentEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__add_ComponentRemoved_0__1__ComponentEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ComponentRemoved(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentEventHandler(value);
        return try add_ComponentRemoved(value: del_value);
    }
    // [IsSpecialName] void remove_ComponentRemoved(System.ComponentModel.Design.ComponentEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoved(System.ComponentModel.Design.ComponentEventHandler)
    open func remove_ComponentRemoved(value : dotnet.System.ComponentModel.Design.ComponentEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__remove_ComponentRemoved_0__1__ComponentEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ComponentRemoved(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentEventHandler(value);
        return try remove_ComponentRemoved(value: del_value);
    }
    // [IsSpecialName] void add_ComponentRemoving(System.ComponentModel.Design.ComponentEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoving(System.ComponentModel.Design.ComponentEventHandler)
    open func add_ComponentRemoving(value : dotnet.System.ComponentModel.Design.ComponentEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__add_ComponentRemoving_0__1__ComponentEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ComponentRemoving(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentEventHandler(value);
        return try add_ComponentRemoving(value: del_value);
    }
    // [IsSpecialName] void remove_ComponentRemoving(System.ComponentModel.Design.ComponentEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoving(System.ComponentModel.Design.ComponentEventHandler)
    open func remove_ComponentRemoving(value : dotnet.System.ComponentModel.Design.ComponentEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__remove_ComponentRemoving_0__1__ComponentEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ComponentRemoving(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentEventHandler(value);
        return try remove_ComponentRemoving(value: del_value);
    }
    // [IsSpecialName] void add_ComponentRename(System.ComponentModel.Design.ComponentRenameEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.add_ComponentRename(System.ComponentModel.Design.ComponentRenameEventHandler)
    open func add_ComponentRename(value : dotnet.System.ComponentModel.Design.ComponentRenameEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__add_ComponentRename_0__1__ComponentRenameEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ComponentRename(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentRenameEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentRenameEventHandler(value);
        return try add_ComponentRename(value: del_value);
    }
    // [IsSpecialName] void remove_ComponentRename(System.ComponentModel.Design.ComponentRenameEventHandler)
// docid: M:System.ComponentModel.Design.IComponentChangeService.remove_ComponentRename(System.ComponentModel.Design.ComponentRenameEventHandler)
    open func remove_ComponentRename(value : dotnet.System.ComponentModel.Design.ComponentRenameEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentChangeService_void__remove_ComponentRename_0__1__ComponentRenameEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ComponentRename(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ComponentRenameEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ComponentRenameEventHandler(value);
        return try remove_ComponentRename(value: del_value);
    }
} // IComponentChangeService


// type: System.ComponentModel.Design.IComponentDiscoveryService
    /**
    Enables enumeration of components at design time.

    */
open class IComponentDiscoveryService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IComponentDiscoveryService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IComponentDiscoveryService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.ICollection GetComponentTypes(System.ComponentModel.Design.IDesignerHost, System.Type)
// docid: M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)
    /**
    Gets the list of available component types.

    - Parameter designerHost: The designer host providing design-time services. Can be .
    - Parameter baseType: The base type specifying the components to retrieve. Can be .
    - Returns: The list of available component types.

    */
    open func GetComponentTypes(designerHost : Optional<dotnet.System.ComponentModel.Design.IDesignerHost>, baseType : Optional<dotnet.System.Type_>) throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IComponentDiscoveryService_ICollection__GetComponentTypes_0__2__IDesignerHost_Type(&__thrown, self.get_handle(), designerHost?.get_handle() ?? nil, baseType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
} // IComponentDiscoveryService


// type: System.ComponentModel.Design.IComponentInitializer
    /**
    Provides a set of recommended default values during component creation.

    */
open class IComponentInitializer
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IComponentInitializer
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IComponentInitializer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void InitializeExistingComponent(System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)
    /**
    Restores an instance of a component to its default state.

    - Parameter defaultValues: A dictionary of default property values, which are name/value pairs, with which to reset the component's state.
    */
    open func InitializeExistingComponent(defaultValues : Optional<dotnet.System.Collections.IDictionary>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentInitializer_void__InitializeExistingComponent_0__1__IDictionary(&__thrown, self.get_handle(), defaultValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void InitializeNewComponent(System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)
    /**
    Initializes a new component using a set of recommended values.

    - Parameter defaultValues: A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.
    */
    open func InitializeNewComponent(defaultValues : Optional<dotnet.System.Collections.IDictionary>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IComponentInitializer_void__InitializeNewComponent_0__1__IDictionary(&__thrown, self.get_handle(), defaultValues?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IComponentInitializer


// type: System.ComponentModel.Design.IDesigner
    /**
    Provides the basic framework for building a custom designer.

    */
open class IDesigner
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IDesigner,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IDesigner_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void DoDefaultAction()
// docid: M:System.ComponentModel.Design.IDesigner.DoDefaultAction
    /**
    Performs the default action for this designer.

    */
    open func DoDefaultAction() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesigner_void__DoDefaultAction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Initialize(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)
    /**
    Initializes the designer with the specified component.

    - Parameter component: The component to associate with this designer.
    */
    open func Initialize(component : dotnet.System.ComponentModel.IComponent) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesigner_void__Initialize_0__1__IComponent(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.IComponent get_Component()
// docid: M:System.ComponentModel.Design.IDesigner.get_Component
    open func get_Component() throws -> dotnet.System.ComponentModel.IComponent {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesigner_IComponent__get_Component_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IComponent(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.DesignerVerbCollection get_Verbs()
// docid: M:System.ComponentModel.Design.IDesigner.get_Verbs
    open func get_Verbs() throws -> Optional<dotnet.System.ComponentModel.Design.DesignerVerbCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesigner_DesignerVerbCollection__get_Verbs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.DesignerVerbCollection(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IDesigner


// type: System.ComponentModel.Design.IDesignerEventService
    /**
    Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.

    */
open class IDesignerEventService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IDesignerEventService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IDesignerEventService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.ComponentModel.Design.IDesignerHost get_ActiveDesigner()
// docid: M:System.ComponentModel.Design.IDesignerEventService.get_ActiveDesigner
    open func get_ActiveDesigner() throws -> Optional<dotnet.System.ComponentModel.Design.IDesignerHost> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerEventService_IDesignerHost__get_ActiveDesigner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.IDesignerHost(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.DesignerCollection get_Designers()
// docid: M:System.ComponentModel.Design.IDesignerEventService.get_Designers
    open func get_Designers() throws -> dotnet.System.ComponentModel.Design.DesignerCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerEventService_DesignerCollection__get_Designers_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.DesignerCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void add_ActiveDesignerChanged(System.ComponentModel.Design.ActiveDesignerEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerEventService.add_ActiveDesignerChanged(System.ComponentModel.Design.ActiveDesignerEventHandler)
    open func add_ActiveDesignerChanged(value : dotnet.System.ComponentModel.Design.ActiveDesignerEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerEventService_void__add_ActiveDesignerChanged_0__1__ActiveDesignerEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ActiveDesignerChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ActiveDesignerEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ActiveDesignerEventHandler(value);
        return try add_ActiveDesignerChanged(value: del_value);
    }
    // [IsSpecialName] void remove_ActiveDesignerChanged(System.ComponentModel.Design.ActiveDesignerEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerEventService.remove_ActiveDesignerChanged(System.ComponentModel.Design.ActiveDesignerEventHandler)
    open func remove_ActiveDesignerChanged(value : dotnet.System.ComponentModel.Design.ActiveDesignerEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerEventService_void__remove_ActiveDesignerChanged_0__1__ActiveDesignerEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ActiveDesignerChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.ActiveDesignerEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.ActiveDesignerEventHandler(value);
        return try remove_ActiveDesignerChanged(value: del_value);
    }
    // [IsSpecialName] void add_DesignerCreated(System.ComponentModel.Design.DesignerEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerEventService.add_DesignerCreated(System.ComponentModel.Design.DesignerEventHandler)
    open func add_DesignerCreated(value : dotnet.System.ComponentModel.Design.DesignerEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerEventService_void__add_DesignerCreated_0__1__DesignerEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_DesignerCreated(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.DesignerEventHandler(value);
        return try add_DesignerCreated(value: del_value);
    }
    // [IsSpecialName] void remove_DesignerCreated(System.ComponentModel.Design.DesignerEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerEventService.remove_DesignerCreated(System.ComponentModel.Design.DesignerEventHandler)
    open func remove_DesignerCreated(value : dotnet.System.ComponentModel.Design.DesignerEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerEventService_void__remove_DesignerCreated_0__1__DesignerEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_DesignerCreated(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.DesignerEventHandler(value);
        return try remove_DesignerCreated(value: del_value);
    }
    // [IsSpecialName] void add_DesignerDisposed(System.ComponentModel.Design.DesignerEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerEventService.add_DesignerDisposed(System.ComponentModel.Design.DesignerEventHandler)
    open func add_DesignerDisposed(value : dotnet.System.ComponentModel.Design.DesignerEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerEventService_void__add_DesignerDisposed_0__1__DesignerEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_DesignerDisposed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.DesignerEventHandler(value);
        return try add_DesignerDisposed(value: del_value);
    }
    // [IsSpecialName] void remove_DesignerDisposed(System.ComponentModel.Design.DesignerEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerEventService.remove_DesignerDisposed(System.ComponentModel.Design.DesignerEventHandler)
    open func remove_DesignerDisposed(value : dotnet.System.ComponentModel.Design.DesignerEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerEventService_void__remove_DesignerDisposed_0__1__DesignerEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_DesignerDisposed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.DesignerEventHandler(value);
        return try remove_DesignerDisposed(value: del_value);
    }
    // [IsSpecialName] void add_SelectionChanged(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerEventService.add_SelectionChanged(System.EventHandler)
    open func add_SelectionChanged(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerEventService_void__add_SelectionChanged_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_SelectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_SelectionChanged(value: del_value);
    }
    // [IsSpecialName] void remove_SelectionChanged(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerEventService.remove_SelectionChanged(System.EventHandler)
    open func remove_SelectionChanged(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerEventService_void__remove_SelectionChanged_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_SelectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_SelectionChanged(value: del_value);
    }
} // IDesignerEventService


// type: System.ComponentModel.Design.IDesignerFilter
    /**
    Provides an interface that enables a designer to access and filter the dictionaries of a  that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.

    */
open class IDesignerFilter
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IDesignerFilter
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IDesignerFilter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void PostFilterAttributes(System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)
    /**
    When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a .

    - Parameter attributes: The  objects for the class of the component. The keys in the dictionary of attributes are the  values of the attributes.
    */
    open func PostFilterAttributes(attributes : dotnet.System.Collections.IDictionary) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerFilter_void__PostFilterAttributes_0__1__IDictionary(&__thrown, self.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PostFilterEvents(System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)
    /**
    When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a .

    - Parameter events: The  objects that represent the events of the class of the component. The keys in the dictionary of events are event names.
    */
    open func PostFilterEvents(events : dotnet.System.Collections.IDictionary) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerFilter_void__PostFilterEvents_0__1__IDictionary(&__thrown, self.get_handle(), events.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PostFilterProperties(System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)
    /**
    When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a .

    - Parameter properties: The  objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.
    */
    open func PostFilterProperties(properties : dotnet.System.Collections.IDictionary) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerFilter_void__PostFilterProperties_0__1__IDictionary(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PreFilterAttributes(System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)
    /**
    When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a .

    - Parameter attributes: The  objects for the class of the component. The keys in the dictionary of attributes are the  values of the attributes.
    */
    open func PreFilterAttributes(attributes : dotnet.System.Collections.IDictionary) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerFilter_void__PreFilterAttributes_0__1__IDictionary(&__thrown, self.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PreFilterEvents(System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)
    /**
    When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a .

    - Parameter events: The  objects that represent the events of the class of the component. The keys in the dictionary of events are event names.
    */
    open func PreFilterEvents(events : dotnet.System.Collections.IDictionary) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerFilter_void__PreFilterEvents_0__1__IDictionary(&__thrown, self.get_handle(), events.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void PreFilterProperties(System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)
    /**
    When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a .

    - Parameter properties: The  objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.
    */
    open func PreFilterProperties(properties : dotnet.System.Collections.IDictionary) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerFilter_void__PreFilterProperties_0__1__IDictionary(&__thrown, self.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDesignerFilter


// type: System.ComponentModel.Design.IDesignerHost
    /**
    Provides an interface for managing designer transactions and components.

    */
open class IDesignerHost
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IDesignerHost,
    System_ComponentModel_Design_IServiceContainer
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IDesignerHost_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void Activate()
// docid: M:System.ComponentModel.Design.IDesignerHost.Activate
    /**
    Activates the designer that this host is hosting.

    */
    open func Activate() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__Activate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.IComponent CreateComponent(System.Type)
// docid: M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)
    /**
    Creates a component of the specified type and adds it to the design document.

    - Parameter componentClass: The type of the component to create.
    - Returns: The newly created component.

    */
    open func CreateComponent(componentClass : dotnet.System.Type_) throws -> dotnet.System.ComponentModel.IComponent {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_IComponent__CreateComponent_0__1__Type(&__thrown, self.get_handle(), componentClass.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IComponent(hndl : __return);
        }
    }
    // System.ComponentModel.IComponent CreateComponent(System.Type, System.String)
// docid: M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)
    /**
    Creates a component of the specified type and name, and adds it to the design document.

    - Parameter componentClass: The type of the component to create.
    - Parameter name: The name for the component.
    - Returns: The newly created component.

    */
    open func CreateComponent(componentClass : dotnet.System.Type_, name : dotnet.System.String) throws -> dotnet.System.ComponentModel.IComponent {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_IComponent__CreateComponent_0__2__Type_String(&__thrown, self.get_handle(), componentClass.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IComponent(hndl : __return);
        }
    }
    // System.ComponentModel.Design.DesignerTransaction CreateTransaction()
// docid: M:System.ComponentModel.Design.IDesignerHost.CreateTransaction
    /**
    Creates a  that can encapsulate event sequences to improve performance and enable undo and redo support functionality.

    - Returns: A new instance of . When you complete the steps in your transaction, you should call  on this object.

    */
    open func CreateTransaction() throws -> dotnet.System.ComponentModel.Design.DesignerTransaction {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_DesignerTransaction__CreateTransaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.DesignerTransaction(hndl : __return);
        }
    }
    // System.ComponentModel.Design.DesignerTransaction CreateTransaction(System.String)
// docid: M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)
    /**
    Creates a  that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.

    - Parameter description: A title or description for the newly created transaction.
    - Returns: A new . When you have completed the steps in your transaction, you should call  on this object.

    */
    open func CreateTransaction(description : dotnet.System.String) throws -> dotnet.System.ComponentModel.Design.DesignerTransaction {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_DesignerTransaction__CreateTransaction_0__1__String(&__thrown, self.get_handle(), description.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.DesignerTransaction(hndl : __return);
        }
    }
    // void DestroyComponent(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)
    /**
    Destroys the specified component and removes it from the designer container.

    - Parameter component: The component to destroy.
    */
    open func DestroyComponent(component : dotnet.System.ComponentModel.IComponent) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__DestroyComponent_0__1__IComponent(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.Design.IDesigner GetDesigner(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)
    /**
    Gets the designer instance that contains the specified component.

    - Parameter component: The  to retrieve the designer for.
    - Returns: An , or  if there is no designer for the specified component.

    */
    open func GetDesigner(component : dotnet.System.ComponentModel.IComponent) throws -> Optional<dotnet.System.ComponentModel.Design.IDesigner> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_IDesigner__GetDesigner_0__1__IComponent(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.IDesigner(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type GetType(System.String)
// docid: M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)
    /**
    Gets an instance of the specified, fully qualified type name.

    - Parameter typeName: The name of the type to load.
    - Returns: The type object for the specified type name, or  if the type cannot be found.

    */
    open func GetType(typeName : dotnet.System.String) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_Type__GetType_0__1__String(&__thrown, self.get_handle(), typeName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.ComponentModel.IContainer get_Container()
// docid: M:System.ComponentModel.Design.IDesignerHost.get_Container
    open func get_Container() throws -> dotnet.System.ComponentModel.IContainer {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_IContainer__get_Container_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IContainer(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_InTransaction()
// docid: M:System.ComponentModel.Design.IDesignerHost.get_InTransaction
    open func get_InTransaction() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_bool__get_InTransaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_Loading()
// docid: M:System.ComponentModel.Design.IDesignerHost.get_Loading
    open func get_Loading() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_bool__get_Loading_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.IComponent get_RootComponent()
// docid: M:System.ComponentModel.Design.IDesignerHost.get_RootComponent
    open func get_RootComponent() throws -> dotnet.System.ComponentModel.IComponent {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_IComponent__get_RootComponent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.IComponent(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_RootComponentClassName()
// docid: M:System.ComponentModel.Design.IDesignerHost.get_RootComponentClassName
    open func get_RootComponentClassName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_String__get_RootComponentClassName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_TransactionDescription()
// docid: M:System.ComponentModel.Design.IDesignerHost.get_TransactionDescription
    open func get_TransactionDescription() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHost_String__get_TransactionDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void add_Activated(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.add_Activated(System.EventHandler)
    open func add_Activated(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__add_Activated_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Activated(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Activated(value: del_value);
    }
    // [IsSpecialName] void remove_Activated(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.remove_Activated(System.EventHandler)
    open func remove_Activated(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__remove_Activated_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Activated(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Activated(value: del_value);
    }
    // [IsSpecialName] void add_Deactivated(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.add_Deactivated(System.EventHandler)
    open func add_Deactivated(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__add_Deactivated_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Deactivated(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_Deactivated(value: del_value);
    }
    // [IsSpecialName] void remove_Deactivated(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.remove_Deactivated(System.EventHandler)
    open func remove_Deactivated(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__remove_Deactivated_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Deactivated(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_Deactivated(value: del_value);
    }
    // [IsSpecialName] void add_LoadComplete(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.add_LoadComplete(System.EventHandler)
    open func add_LoadComplete(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__add_LoadComplete_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_LoadComplete(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_LoadComplete(value: del_value);
    }
    // [IsSpecialName] void remove_LoadComplete(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.remove_LoadComplete(System.EventHandler)
    open func remove_LoadComplete(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__remove_LoadComplete_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_LoadComplete(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_LoadComplete(value: del_value);
    }
    // [IsSpecialName] void add_TransactionClosed(System.ComponentModel.Design.DesignerTransactionCloseEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.add_TransactionClosed(System.ComponentModel.Design.DesignerTransactionCloseEventHandler)
    open func add_TransactionClosed(value : dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__add_TransactionClosed_0__1__DesignerTransactionCloseEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_TransactionClosed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventHandler(value);
        return try add_TransactionClosed(value: del_value);
    }
    // [IsSpecialName] void remove_TransactionClosed(System.ComponentModel.Design.DesignerTransactionCloseEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.remove_TransactionClosed(System.ComponentModel.Design.DesignerTransactionCloseEventHandler)
    open func remove_TransactionClosed(value : dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__remove_TransactionClosed_0__1__DesignerTransactionCloseEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_TransactionClosed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventHandler(value);
        return try remove_TransactionClosed(value: del_value);
    }
    // [IsSpecialName] void add_TransactionClosing(System.ComponentModel.Design.DesignerTransactionCloseEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.add_TransactionClosing(System.ComponentModel.Design.DesignerTransactionCloseEventHandler)
    open func add_TransactionClosing(value : dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__add_TransactionClosing_0__1__DesignerTransactionCloseEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_TransactionClosing(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventHandler(value);
        return try add_TransactionClosing(value: del_value);
    }
    // [IsSpecialName] void remove_TransactionClosing(System.ComponentModel.Design.DesignerTransactionCloseEventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.remove_TransactionClosing(System.ComponentModel.Design.DesignerTransactionCloseEventHandler)
    open func remove_TransactionClosing(value : dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__remove_TransactionClosing_0__1__DesignerTransactionCloseEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_TransactionClosing(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.DesignerTransactionCloseEventHandler(value);
        return try remove_TransactionClosing(value: del_value);
    }
    // [IsSpecialName] void add_TransactionOpened(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.add_TransactionOpened(System.EventHandler)
    open func add_TransactionOpened(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__add_TransactionOpened_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_TransactionOpened(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_TransactionOpened(value: del_value);
    }
    // [IsSpecialName] void remove_TransactionOpened(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.remove_TransactionOpened(System.EventHandler)
    open func remove_TransactionOpened(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__remove_TransactionOpened_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_TransactionOpened(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_TransactionOpened(value: del_value);
    }
    // [IsSpecialName] void add_TransactionOpening(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.add_TransactionOpening(System.EventHandler)
    open func add_TransactionOpening(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__add_TransactionOpening_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_TransactionOpening(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_TransactionOpening(value: del_value);
    }
    // [IsSpecialName] void remove_TransactionOpening(System.EventHandler)
// docid: M:System.ComponentModel.Design.IDesignerHost.remove_TransactionOpening(System.EventHandler)
    open func remove_TransactionOpening(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerHost_void__remove_TransactionOpening_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_TransactionOpening(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_TransactionOpening(value: del_value);
    }
} // IDesignerHost


// type: System.ComponentModel.Design.IDesignerHostTransactionState
    /**
    Specifies methods for the designer host to report on the state of transactions.

    */
open class IDesignerHostTransactionState
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IDesignerHostTransactionState
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IDesignerHostTransactionState_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_IsClosingTransaction()
// docid: M:System.ComponentModel.Design.IDesignerHostTransactionState.get_IsClosingTransaction
    open func get_IsClosingTransaction() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerHostTransactionState_bool__get_IsClosingTransaction_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IDesignerHostTransactionState


// type: System.ComponentModel.Design.IDesignerOptionService
    /**
    Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.

    */
open class IDesignerOptionService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IDesignerOptionService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IDesignerOptionService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object GetOptionValue(System.String, System.String)
// docid: M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)
    /**
    Gets the value of the specified Windows Forms Designer option.

    - Parameter pageName: The name of the page that defines the option.
    - Parameter valueName: The name of the option property.
    - Returns: The value of the specified option.

    */
    open func GetOptionValue(pageName : dotnet.System.String, valueName : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDesignerOptionService_Object__GetOptionValue_0__2__String_String(&__thrown, self.get_handle(), pageName.get_handle(), valueName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetOptionValue(System.String, System.String, System.Object)
// docid: M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)
    /**
    Sets the value of the specified Windows Forms Designer option.

    - Parameter pageName: The name of the page that defines the option.
    - Parameter valueName: The name of the option property.
    - Parameter value: The new value.
    */
    open func SetOptionValue(pageName : dotnet.System.String, valueName : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDesignerOptionService_void__SetOptionValue_0__3__String_String_Object(&__thrown, self.get_handle(), pageName.get_handle(), valueName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDesignerOptionService


// type: System.ComponentModel.Design.IDictionaryService
    /**
    Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.

    */
open class IDictionaryService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IDictionaryService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IDictionaryService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object GetKey(System.Object)
// docid: M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)
    /**
    Gets the key corresponding to the specified value.

    - Parameter value: The value to look up in the dictionary.
    - Returns: The associated key, or  if no key exists.

    */
    open func GetKey(value : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDictionaryService_Object__GetKey_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetValue(System.Object)
// docid: M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)
    /**
    Gets the value corresponding to the specified key.

    - Parameter key: The key to look up the value for.
    - Returns: The associated value, or  if no value exists.

    */
    open func GetValue(key : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IDictionaryService_Object__GetValue_0__1__Object(&__thrown, self.get_handle(), key.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetValue(System.Object, System.Object)
// docid: M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)
    /**
    Sets the specified key-value pair.

    - Parameter key: An object to use as the key to associate the value with.
    - Parameter value: The value to store.
    */
    open func SetValue(key : dotnet.System.Object, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IDictionaryService_void__SetValue_0__2__Object_Object(&__thrown, self.get_handle(), key.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDictionaryService


// type: System.ComponentModel.Design.IEventBindingService
    /**
    Provides a service for registering event handlers for component events.

    */
open class IEventBindingService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IEventBindingService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IEventBindingService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String CreateUniqueMethodName(System.ComponentModel.IComponent, System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)
    /**
    Creates a unique name for an event-handler method for the specified component and event.

    - Parameter component: The component instance the event is connected to.
    - Parameter e: The event to create a name for.
    - Returns: The recommended name for the event-handler method for this event.

    */
    open func CreateUniqueMethodName(component : dotnet.System.ComponentModel.IComponent, e : dotnet.System.ComponentModel.EventDescriptor) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IEventBindingService_String__CreateUniqueMethodName_0__2__IComponent_EventDescriptor(&__thrown, self.get_handle(), component.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Collections.ICollection GetCompatibleMethods(System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)
    /**
    Gets a collection of event-handler methods that have a method signature compatible with the specified event.

    - Parameter e: The event to get the compatible event-handler methods for.
    - Returns: A collection of strings.

    */
    open func GetCompatibleMethods(e : dotnet.System.ComponentModel.EventDescriptor) throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IEventBindingService_ICollection__GetCompatibleMethods_0__1__EventDescriptor(&__thrown, self.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // System.ComponentModel.EventDescriptor GetEvent(System.ComponentModel.PropertyDescriptor)
// docid: M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)
    /**
    Gets an  for the event that the specified property descriptor represents, if it represents an event.

    - Parameter property: The property that represents an event.
    - Returns: An  for the event that the property represents, or  if the property does not represent an event.

    */
    open func GetEvent(property : dotnet.System.ComponentModel.PropertyDescriptor) throws -> Optional<dotnet.System.ComponentModel.EventDescriptor> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IEventBindingService_EventDescriptor__GetEvent_0__1__PropertyDescriptor(&__thrown, self.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.EventDescriptor(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetEventProperties(System.ComponentModel.EventDescriptorCollection)
// docid: M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)
    /**
    Converts a set of event descriptors to a set of property descriptors.

    - Parameter events: The events to convert to properties.
    - Returns: An array of  objects that describe the event set.

    */
    open func GetEventProperties(events : dotnet.System.ComponentModel.EventDescriptorCollection) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IEventBindingService_PropertyDescriptorCollection__GetEventProperties_0__1__EventDescriptorCollection(&__thrown, self.get_handle(), events.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // System.ComponentModel.PropertyDescriptor GetEventProperty(System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)
    /**
    Converts a single event descriptor to a property descriptor.

    - Parameter e: The event to convert.
    - Returns: A  that describes the event.

    */
    open func GetEventProperty(e : dotnet.System.ComponentModel.EventDescriptor) throws -> dotnet.System.ComponentModel.PropertyDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IEventBindingService_PropertyDescriptor__GetEventProperty_0__1__EventDescriptor(&__thrown, self.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptor(hndl : __return);
        }
    }
    // bool ShowCode()
// docid: M:System.ComponentModel.Design.IEventBindingService.ShowCode
    /**
    Displays the user code for the designer.

    - Returns: 
         if the code is displayed; otherwise, .

    */
    open func ShowCode() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IEventBindingService_bool__ShowCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ShowCode(System.ComponentModel.IComponent, System.ComponentModel.EventDescriptor)
// docid: M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)
    /**
    Displays the user code for the specified event.

    - Parameter component: The component that the event is connected to.
    - Parameter e: The event to display.
    - Returns: 
         if the code is displayed; otherwise, .

    */
    open func ShowCode(component : dotnet.System.ComponentModel.IComponent, e : dotnet.System.ComponentModel.EventDescriptor) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IEventBindingService_bool__ShowCode_0__2__IComponent_EventDescriptor(&__thrown, self.get_handle(), component.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool ShowCode(System.Int32)
// docid: M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)
    /**
    Displays the user code for the designer at the specified line.

    - Parameter lineNumber: The line number to place the caret on.
    - Returns: 
         if the code is displayed; otherwise, .

    */
    open func ShowCode(lineNumber : Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IEventBindingService_bool__ShowCode_0__1__i32(&__thrown, self.get_handle(), lineNumber);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IEventBindingService


// type: System.ComponentModel.Design.IExtenderListService
    /**
    Provides an interface that can list extender providers.

    */
open class IExtenderListService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IExtenderListService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IExtenderListService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.ComponentModel.IExtenderProvider[] GetExtenderProviders()
// docid: M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders
    /**
    Gets the set of extender providers for the component.

    - Returns: An array of type  that lists the active extender providers. If there are no providers, an empty array is returned.

    */
    open func GetExtenderProviders() throws -> dotnet.System_Arr<dotnet.System.ComponentModel.IExtenderProvider> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IExtenderListService_IExtenderProviderArray__GetExtenderProviders_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.ComponentModel.IExtenderProvider>(hndl : __return);
        }
    }
} // IExtenderListService


// type: System.ComponentModel.Design.IExtenderProviderService
    /**
    Provides an interface for adding and removing extender providers at design time.

    */
open class IExtenderProviderService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IExtenderProviderService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IExtenderProviderService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddExtenderProvider(System.ComponentModel.IExtenderProvider)
// docid: M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)
    /**
    Adds the specified extender provider.

    - Parameter provider: The extender provider to add.
    */
    open func AddExtenderProvider(provider : dotnet.System.ComponentModel.IExtenderProvider) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IExtenderProviderService_void__AddExtenderProvider_0__1__IExtenderProvider(&__thrown, self.get_handle(), provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)
// docid: M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)
    /**
    Removes the specified extender provider.

    - Parameter provider: The extender provider to remove.
    */
    open func RemoveExtenderProvider(provider : dotnet.System.ComponentModel.IExtenderProvider) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IExtenderProviderService_void__RemoveExtenderProvider_0__1__IExtenderProvider(&__thrown, self.get_handle(), provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IExtenderProviderService


// type: System.ComponentModel.Design.IHelpService
    /**
    Provides methods for showing Help topics and adding and removing Help keywords at design time.

    */
open class IHelpService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IHelpService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IHelpService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddContextAttribute(System.String, System.String, System.ComponentModel.Design.HelpKeywordType)
// docid: M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)
    /**
    Adds a context attribute to the document.

    - Parameter name: The name of the attribute to add.
    - Parameter value: The value of the attribute.
    - Parameter keywordType: The type of the keyword, from the enumeration .
    */
    open func AddContextAttribute(name : dotnet.System.String, value : dotnet.System.String, keywordType : dotnet.System.ComponentModel.Design.HelpKeywordType) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IHelpService_void__AddContextAttribute_0__3__String_String_HelpKeywordType(&__thrown, self.get_handle(), name.get_handle(), value.get_handle(), keywordType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ClearContextAttributes()
// docid: M:System.ComponentModel.Design.IHelpService.ClearContextAttributes
    /**
    Removes all existing context attributes from the document.

    */
    open func ClearContextAttributes() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IHelpService_void__ClearContextAttributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.Design.IHelpService CreateLocalContext(System.ComponentModel.Design.HelpContextType)
// docid: M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)
    /**
    Creates a local  to manage subcontexts.

    - Parameter contextType: The priority type of the subcontext to add.
    - Returns: The newly created .

    */
    open func CreateLocalContext(contextType : dotnet.System.ComponentModel.Design.HelpContextType) throws -> dotnet.System.ComponentModel.Design.IHelpService {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IHelpService_IHelpService__CreateLocalContext_0__1__HelpContextType(&__thrown, self.get_handle(), contextType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.IHelpService(hndl : __return);
        }
    }
    // void RemoveContextAttribute(System.String, System.String)
// docid: M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)
    /**
    Removes a previously added context attribute.

    - Parameter name: The name of the attribute to remove.
    - Parameter value: The value of the attribute to remove.
    */
    open func RemoveContextAttribute(name : dotnet.System.String, value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IHelpService_void__RemoveContextAttribute_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveLocalContext(System.ComponentModel.Design.IHelpService)
// docid: M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)
    /**
    Removes a context created with .

    - Parameter localContext: The local context  to remove.
    */
    open func RemoveLocalContext(localContext : dotnet.System.ComponentModel.Design.IHelpService) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IHelpService_void__RemoveLocalContext_0__1__IHelpService(&__thrown, self.get_handle(), localContext.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ShowHelpFromKeyword(System.String)
// docid: M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)
    /**
    Shows the Help topic that corresponds to the specified keyword.

    - Parameter helpKeyword: The keyword of the Help topic to display.
    */
    open func ShowHelpFromKeyword(helpKeyword : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IHelpService_void__ShowHelpFromKeyword_0__1__String(&__thrown, self.get_handle(), helpKeyword.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ShowHelpFromUrl(System.String)
// docid: M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)
    /**
    Shows the Help topic that corresponds to the specified URL.

    - Parameter helpUrl: The URL of the Help topic to display.
    */
    open func ShowHelpFromUrl(helpUrl : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IHelpService_void__ShowHelpFromUrl_0__1__String(&__thrown, self.get_handle(), helpUrl.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IHelpService


// type: System.ComponentModel.Design.IInheritanceService
    /**
    Provides methods for identifying the components of a component.

    */
open class IInheritanceService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IInheritanceService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IInheritanceService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddInheritedComponents(System.ComponentModel.IComponent, System.ComponentModel.IContainer)
// docid: M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)
    /**
    Searches the specified component for fields that implement the  interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the  method.

    - Parameter component: The  to search. Searching begins with this component.
    - Parameter container: The  to add components to.
    */
    open func AddInheritedComponents(component : dotnet.System.ComponentModel.IComponent, container : dotnet.System.ComponentModel.IContainer) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IInheritanceService_void__AddInheritedComponents_0__2__IComponent_IContainer(&__thrown, self.get_handle(), component.get_handle(), container.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.InheritanceAttribute GetInheritanceAttribute(System.ComponentModel.IComponent)
// docid: M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)
    /**
    Gets the inheritance attribute for the specified component.

    - Parameter component: The  for which to retrieve the inheritance attribute.
    - Returns: An instance of  that describes the level of inheritance of the specified component.

    */
    open func GetInheritanceAttribute(component : dotnet.System.ComponentModel.IComponent) throws -> dotnet.System.ComponentModel.InheritanceAttribute {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IInheritanceService_InheritanceAttribute__GetInheritanceAttribute_0__1__IComponent(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.InheritanceAttribute(hndl : __return);
        }
    }
} // IInheritanceService


// type: System.ComponentModel.Design.IMenuCommandService
    /**
    Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.

    */
open class IMenuCommandService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IMenuCommandService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IMenuCommandService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddCommand(System.ComponentModel.Design.MenuCommand)
// docid: M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)
    /**
    Adds the specified standard menu command to the menu.

    - Parameter command: The  to add.
    */
    open func AddCommand(command : dotnet.System.ComponentModel.Design.MenuCommand) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IMenuCommandService_void__AddCommand_0__1__MenuCommand(&__thrown, self.get_handle(), command.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddVerb(System.ComponentModel.Design.DesignerVerb)
// docid: M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)
    /**
    Adds the specified designer verb to the set of global designer verbs.

    - Parameter verb: The  to add.
    */
    open func AddVerb(verb : dotnet.System.ComponentModel.Design.DesignerVerb) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IMenuCommandService_void__AddVerb_0__1__DesignerVerb(&__thrown, self.get_handle(), verb.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.Design.MenuCommand FindCommand(System.ComponentModel.Design.CommandID)
// docid: M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)
    /**
    Searches for the specified command ID and returns the menu command associated with it.

    - Parameter commandID: The  to search for.
    - Returns: The  associated with the command ID, or  if no command is found.

    */
    open func FindCommand(commandID : dotnet.System.ComponentModel.Design.CommandID) throws -> Optional<dotnet.System.ComponentModel.Design.MenuCommand> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IMenuCommandService_MenuCommand__FindCommand_0__1__CommandID(&__thrown, self.get_handle(), commandID.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.MenuCommand(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // bool GlobalInvoke(System.ComponentModel.Design.CommandID)
// docid: M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)
    /**
    Invokes a menu or designer verb command matching the specified command ID.

    - Parameter commandID: The  of the command to search for and execute.
    - Returns: 
         if the command was found and invoked successfully; otherwise, .

    */
    open func GlobalInvoke(commandID : dotnet.System.ComponentModel.Design.CommandID) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IMenuCommandService_bool__GlobalInvoke_0__1__CommandID(&__thrown, self.get_handle(), commandID.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveCommand(System.ComponentModel.Design.MenuCommand)
// docid: M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)
    /**
    Removes the specified standard menu command from the menu.

    - Parameter command: The  to remove.
    */
    open func RemoveCommand(command : dotnet.System.ComponentModel.Design.MenuCommand) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IMenuCommandService_void__RemoveCommand_0__1__MenuCommand(&__thrown, self.get_handle(), command.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveVerb(System.ComponentModel.Design.DesignerVerb)
// docid: M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)
    /**
    Removes the specified designer verb from the collection of global designer verbs.

    - Parameter verb: The  to remove.
    */
    open func RemoveVerb(verb : dotnet.System.ComponentModel.Design.DesignerVerb) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IMenuCommandService_void__RemoveVerb_0__1__DesignerVerb(&__thrown, self.get_handle(), verb.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ShowContextMenu(System.ComponentModel.Design.CommandID, System.Int32, System.Int32)
// docid: M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)
    /**
    Shows the specified shortcut menu at the specified location.

    - Parameter menuID: The  for the shortcut menu to show.
    - Parameter x: The x-coordinate at which to display the menu, in screen coordinates.
    - Parameter y: The y-coordinate at which to display the menu, in screen coordinates.
    */
    open func ShowContextMenu(menuID : dotnet.System.ComponentModel.Design.CommandID, x : Swift.Int32, y : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IMenuCommandService_void__ShowContextMenu_0__3__CommandID_i32_i32(&__thrown, self.get_handle(), menuID.get_handle(), x, y);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.DesignerVerbCollection get_Verbs()
// docid: M:System.ComponentModel.Design.IMenuCommandService.get_Verbs
    open func get_Verbs() throws -> dotnet.System.ComponentModel.Design.DesignerVerbCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IMenuCommandService_DesignerVerbCollection__get_Verbs_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.DesignerVerbCollection(hndl : __return);
        }
    }
} // IMenuCommandService


// type: System.ComponentModel.Design.IReferenceService
    /**
    Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.

    */
open class IReferenceService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IReferenceService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IReferenceService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.ComponentModel.IComponent GetComponent(System.Object)
// docid: M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)
    /**
    Gets the component that contains the specified component.

    - Parameter reference: The object to retrieve the parent component for.
    - Returns: The base  that contains the specified object, or  if no parent component exists.

    */
    open func GetComponent(reference : dotnet.System.Object) throws -> Optional<dotnet.System.ComponentModel.IComponent> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IReferenceService_IComponent__GetComponent_0__1__Object(&__thrown, self.get_handle(), reference.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.IComponent(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetName(System.Object)
// docid: M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)
    /**
    Gets the name of the specified component.

    - Parameter reference: The object to return the name of.
    - Returns: The name of the object referenced, or  if the object reference is not valid.

    */
    open func GetName(reference : dotnet.System.Object) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IReferenceService_String__GetName_0__1__Object(&__thrown, self.get_handle(), reference.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetReference(System.String)
// docid: M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)
    /**
    Gets a reference to the component whose name matches the specified name.

    - Parameter name: The name of the component to return a reference to.
    - Returns: An object the specified name refers to, or  if no reference is found.

    */
    open func GetReference(name : dotnet.System.String) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IReferenceService_Object__GetReference_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object[] GetReferences()
// docid: M:System.ComponentModel.Design.IReferenceService.GetReferences
    /**
    Gets all available references to project components.

    - Returns: An array of all objects with references available to the .

    */
    open func GetReferences() throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IReferenceService_ObjectArray__GetReferences_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
    // System.Object[] GetReferences(System.Type)
// docid: M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)
    /**
    Gets all available references to components of the specified type.

    - Parameter baseType: The type of object to return references to instances of.
    - Returns: An array of all available objects of the specified type.

    */
    open func GetReferences(baseType : dotnet.System.Type_) throws -> dotnet.System_Arr<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IReferenceService_ObjectArray__GetReferences_0__1__Type(&__thrown, self.get_handle(), baseType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Object>(hndl : __return);
        }
    }
} // IReferenceService


// type: System.ComponentModel.Design.IResourceService
    /**
    Provides an interface for designers to access resource readers and writers for specific  resource types.

    */
open class IResourceService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IResourceService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IResourceService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Resources.IResourceReader GetResourceReader(System.Globalization.CultureInfo)
// docid: M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)
    /**
    Locates the resource reader for the specified culture and returns it.

    - Parameter info: The  of the resource for which to retrieve a resource reader.
    - Returns: An  interface that contains the resources for the culture, or  if no resources for the culture exist.

    */
    open func GetResourceReader(info : dotnet.System.Globalization.CultureInfo) throws -> Optional<dotnet.System.Resources.IResourceReader> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IResourceService_IResourceReader__GetResourceReader_0__1__CultureInfo(&__thrown, self.get_handle(), info.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Resources.IResourceReader(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Resources.IResourceWriter GetResourceWriter(System.Globalization.CultureInfo)
// docid: M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)
    /**
    Locates the resource writer for the specified culture and returns it.

    - Parameter info: The  of the resource for which to create a resource writer.
    - Returns: An  interface for the specified culture.

    */
    open func GetResourceWriter(info : dotnet.System.Globalization.CultureInfo) throws -> dotnet.System.Resources.IResourceWriter {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IResourceService_IResourceWriter__GetResourceWriter_0__1__CultureInfo(&__thrown, self.get_handle(), info.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Resources.IResourceWriter(hndl : __return);
        }
    }
} // IResourceService


// type: System.ComponentModel.Design.IRootDesigner
    /**
    Provides support for root-level designer view technologies.

    */
open class IRootDesigner
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IRootDesigner,
    System_ComponentModel_Design_IDesigner
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IRootDesigner_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object GetView(System.ComponentModel.Design.ViewTechnology)
// docid: M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)
    /**
    Gets a view object for the specified view technology.

    - Parameter technology: A  that indicates a particular view technology.
    - Returns: An object that represents the view for this designer.

    */
    open func GetView(technology : dotnet.System.ComponentModel.Design.ViewTechnology) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IRootDesigner_Object__GetView_0__1__ViewTechnology(&__thrown, self.get_handle(), technology.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.ViewTechnology[] get_SupportedTechnologies()
// docid: M:System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies
    open func get_SupportedTechnologies() throws -> dotnet.System_Arr<dotnet.System.ComponentModel.Design.ViewTechnology> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_IRootDesigner_ViewTechnologyArray__get_SupportedTechnologies_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.ComponentModel.Design.ViewTechnology>(hndl : __return);
        }
    }
} // IRootDesigner


// type: System.ComponentModel.Design.ISelectionService
    /**
    Provides an interface for a designer to select components.

    */
open class ISelectionService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_ISelectionService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ISelectionService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool GetComponentSelected(System.Object)
// docid: M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)
    /**
    Gets a value indicating whether the specified component is currently selected.

    - Parameter component: The component to test.
    - Returns: 
         if the component is part of the user's current selection; otherwise, .

    */
    open func GetComponentSelected(component : dotnet.System.Object) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ISelectionService_bool__GetComponentSelected_0__1__Object(&__thrown, self.get_handle(), component.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Collections.ICollection GetSelectedComponents()
// docid: M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents
    /**
    Gets a collection of components that are currently selected.

    - Returns: A collection that represents the current set of components that are selected.

    */
    open func GetSelectedComponents() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ISelectionService_ICollection__GetSelectedComponents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // void SetSelectedComponents(System.Collections.ICollection)
// docid: M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)
    /**
    Selects the specified collection of components.

    - Parameter components: The collection of components to select.
    */
    open func SetSelectedComponents(components : Optional<dotnet.System.Collections.ICollection>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ISelectionService_void__SetSelectedComponents_0__1__ICollection(&__thrown, self.get_handle(), components?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetSelectedComponents(System.Collections.ICollection, System.ComponentModel.Design.SelectionTypes)
// docid: M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)
    /**
    Selects the components from within the specified collection of components that match the specified selection type.

    - Parameter components: The collection of components to select.
    - Parameter selectionType: A value from the  enumeration. The default is .
    */
    open func SetSelectedComponents(components : Optional<dotnet.System.Collections.ICollection>, selectionType : dotnet.System.ComponentModel.Design.SelectionTypes) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ISelectionService_void__SetSelectedComponents_0__2__ICollection_SelectionTypes(&__thrown, self.get_handle(), components?.get_handle() ?? nil, selectionType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_PrimarySelection()
// docid: M:System.ComponentModel.Design.ISelectionService.get_PrimarySelection
    open func get_PrimarySelection() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ISelectionService_Object__get_PrimarySelection_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_SelectionCount()
// docid: M:System.ComponentModel.Design.ISelectionService.get_SelectionCount
    open func get_SelectionCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ISelectionService_i32__get_SelectionCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void add_SelectionChanged(System.EventHandler)
// docid: M:System.ComponentModel.Design.ISelectionService.add_SelectionChanged(System.EventHandler)
    open func add_SelectionChanged(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ISelectionService_void__add_SelectionChanged_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_SelectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_SelectionChanged(value: del_value);
    }
    // [IsSpecialName] void remove_SelectionChanged(System.EventHandler)
// docid: M:System.ComponentModel.Design.ISelectionService.remove_SelectionChanged(System.EventHandler)
    open func remove_SelectionChanged(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ISelectionService_void__remove_SelectionChanged_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_SelectionChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_SelectionChanged(value: del_value);
    }
    // [IsSpecialName] void add_SelectionChanging(System.EventHandler)
// docid: M:System.ComponentModel.Design.ISelectionService.add_SelectionChanging(System.EventHandler)
    open func add_SelectionChanging(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ISelectionService_void__add_SelectionChanging_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_SelectionChanging(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_SelectionChanging(value: del_value);
    }
    // [IsSpecialName] void remove_SelectionChanging(System.EventHandler)
// docid: M:System.ComponentModel.Design.ISelectionService.remove_SelectionChanging(System.EventHandler)
    open func remove_SelectionChanging(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ISelectionService_void__remove_SelectionChanging_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_SelectionChanging(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_SelectionChanging(value: del_value);
    }
} // ISelectionService


// type: System.ComponentModel.Design.IServiceContainer
    /**
    Provides a container for services.

    */
open class IServiceContainer
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_IServiceContainer,
    System_IServiceProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_IServiceContainer_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback)
// docid: M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)
    /**
    Adds the specified service to the service container.

    - Parameter serviceType: The type of service to add.
    - Parameter callback: A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.
    */
    open func AddService(serviceType : dotnet.System.Type_, callback : dotnet.System.ComponentModel.Design.ServiceCreatorCallback) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IServiceContainer_void__AddService_0__2__Type_ServiceCreatorCallback(&__thrown, self.get_handle(), serviceType.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func AddService(serviceType : dotnet.System.Type_, callback : @escaping (dotnet.System.ComponentModel.Design.IServiceContainer, dotnet.System.Type_) throws -> dotnet.System.Object) throws {
        let del_callback = try dotnet.System.ComponentModel.Design.ServiceCreatorCallback(callback);
        return try AddService(serviceType: serviceType, callback: del_callback);
    }
    // void AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback, bool)
// docid: M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)
    /**
    Adds the specified service to the service container, and optionally promotes the service to parent service containers.

    - Parameter serviceType: The type of service to add.
    - Parameter callback: A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.
    - Parameter promote: 
         to promote this request to any parent service containers; otherwise, .
    */
    open func AddService(serviceType : dotnet.System.Type_, callback : dotnet.System.ComponentModel.Design.ServiceCreatorCallback, promote : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IServiceContainer_void__AddService_0__3__Type_ServiceCreatorCallback_bool(&__thrown, self.get_handle(), serviceType.get_handle(), callback.get_handle(), Swift.Int32(promote ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func AddService(serviceType : dotnet.System.Type_, callback : @escaping (dotnet.System.ComponentModel.Design.IServiceContainer, dotnet.System.Type_) throws -> dotnet.System.Object, promote : Bool) throws {
        let del_callback = try dotnet.System.ComponentModel.Design.ServiceCreatorCallback(callback);
        return try AddService(serviceType: serviceType, callback: del_callback, promote: promote);
    }
    // void AddService(System.Type, System.Object)
// docid: M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)
    /**
    Adds the specified service to the service container.

    - Parameter serviceType: The type of service to add.
    - Parameter serviceInstance: An instance of the service type to add. This object must implement or inherit from the type indicated by the  parameter.
    */
    open func AddService(serviceType : dotnet.System.Type_, serviceInstance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IServiceContainer_void__AddService_0__2__Type_Object(&__thrown, self.get_handle(), serviceType.get_handle(), serviceInstance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddService(System.Type, System.Object, bool)
// docid: M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)
    /**
    Adds the specified service to the service container, and optionally promotes the service to any parent service containers.

    - Parameter serviceType: The type of service to add.
    - Parameter serviceInstance: An instance of the service type to add. This object must implement or inherit from the type indicated by the  parameter.
    - Parameter promote: 
         to promote this request to any parent service containers; otherwise, .
    */
    open func AddService(serviceType : dotnet.System.Type_, serviceInstance : dotnet.System.Object, promote : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IServiceContainer_void__AddService_0__3__Type_Object_bool(&__thrown, self.get_handle(), serviceType.get_handle(), serviceInstance.get_handle(), Swift.Int32(promote ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveService(System.Type)
// docid: M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)
    /**
    Removes the specified service type from the service container.

    - Parameter serviceType: The type of service to remove.
    */
    open func RemoveService(serviceType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IServiceContainer_void__RemoveService_0__1__Type(&__thrown, self.get_handle(), serviceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveService(System.Type, bool)
// docid: M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)
    /**
    Removes the specified service type from the service container, and optionally promotes the service to parent service containers.

    - Parameter serviceType: The type of service to remove.
    - Parameter promote: 
         to promote this request to any parent service containers; otherwise, .
    */
    open func RemoveService(serviceType : dotnet.System.Type_, promote : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_IServiceContainer_void__RemoveService_0__2__Type_bool(&__thrown, self.get_handle(), serviceType.get_handle(), Swift.Int32(promote ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IServiceContainer


// type: System.ComponentModel.Design.ITreeDesigner
    /**
    Provides support for building a set of related custom designers.

    */
open class ITreeDesigner
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_ITreeDesigner,
    System_ComponentModel_Design_IDesigner
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ITreeDesigner_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] System.Collections.ICollection get_Children()
// docid: M:System.ComponentModel.Design.ITreeDesigner.get_Children
    open func get_Children() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITreeDesigner_ICollection__get_Children_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.IDesigner get_Parent()
// docid: M:System.ComponentModel.Design.ITreeDesigner.get_Parent
    open func get_Parent() throws -> Optional<dotnet.System.ComponentModel.Design.IDesigner> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITreeDesigner_IDesigner__get_Parent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.IDesigner(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ITreeDesigner


// type: System.ComponentModel.Design.ITypeDescriptorFilterService
    /**
    Provides an interface to modify the set of member descriptors for a component in design mode.

    */
open class ITypeDescriptorFilterService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_ITypeDescriptorFilterService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ITypeDescriptorFilterService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // bool FilterAttributes(System.ComponentModel.IComponent, System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)
    /**
    Filters the attributes that a component exposes through a .

    - Parameter component: The component to filter the attributes of.
    - Parameter attributes: A dictionary of attributes that can be modified.
    - Returns: 
         if the set of filtered attributes is to be cached;  if the filter service must query again.

    */
    open func FilterAttributes(component : dotnet.System.ComponentModel.IComponent, attributes : dotnet.System.Collections.IDictionary) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeDescriptorFilterService_bool__FilterAttributes_0__2__IComponent_IDictionary(&__thrown, self.get_handle(), component.get_handle(), attributes.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool FilterEvents(System.ComponentModel.IComponent, System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)
    /**
    Filters the events that a component exposes through a .

    - Parameter component: The component to filter events for.
    - Parameter events: A dictionary of events that can be modified.
    - Returns: 
         if the set of filtered events is to be cached;  if the filter service must query again.

    */
    open func FilterEvents(component : dotnet.System.ComponentModel.IComponent, events : dotnet.System.Collections.IDictionary) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeDescriptorFilterService_bool__FilterEvents_0__2__IComponent_IDictionary(&__thrown, self.get_handle(), component.get_handle(), events.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool FilterProperties(System.ComponentModel.IComponent, System.Collections.IDictionary)
// docid: M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)
    /**
    Filters the properties that a component exposes through a .

    - Parameter component: The component to filter properties for.
    - Parameter properties: A dictionary of properties that can be modified.
    - Returns: 
         if the set of filtered properties is to be cached;  if the filter service must query again.

    */
    open func FilterProperties(component : dotnet.System.ComponentModel.IComponent, properties : dotnet.System.Collections.IDictionary) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeDescriptorFilterService_bool__FilterProperties_0__2__IComponent_IDictionary(&__thrown, self.get_handle(), component.get_handle(), properties.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ITypeDescriptorFilterService


// type: System.ComponentModel.Design.ITypeDiscoveryService
    /**
    Discovers available types at design time.

    */
open class ITypeDiscoveryService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_ITypeDiscoveryService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ITypeDiscoveryService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.ICollection GetTypes(System.Type, bool)
// docid: M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)
    /**
    Retrieves the list of available types.

    - Parameter baseType: The base type to match. Can be .
    - Parameter excludeGlobalTypes: Indicates whether types from all referenced assemblies should be checked.
    - Returns: A collection of types that match the criteria specified by  and .

    */
    open func GetTypes(baseType : Optional<dotnet.System.Type_>, excludeGlobalTypes : Bool) throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeDiscoveryService_ICollection__GetTypes_0__2__Type_bool(&__thrown, self.get_handle(), baseType?.get_handle() ?? nil, Swift.Int32(excludeGlobalTypes ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
} // ITypeDiscoveryService


// type: System.ComponentModel.Design.ITypeResolutionService
    /**
    Provides an interface to retrieve an assembly or type by name.

    */
open class ITypeResolutionService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_ITypeResolutionService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ITypeResolutionService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Reflection.Assembly GetAssembly(System.Reflection.AssemblyName)
// docid: M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)
    /**
    Gets the requested assembly.

    - Parameter name: The name of the assembly to retrieve.
    - Returns: An instance of the requested assembly, or  if no assembly can be located.

    */
    open func GetAssembly(name : dotnet.System.Reflection.AssemblyName) throws -> Optional<dotnet.System.Reflection.Assembly> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeResolutionService_Assembly__GetAssembly_0__1__AssemblyName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.Assembly(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Reflection.Assembly GetAssembly(System.Reflection.AssemblyName, bool)
// docid: M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)
    /**
    Gets the requested assembly.

    - Parameter name: The name of the assembly to retrieve.
    - Parameter throwOnError: 
         if this method should throw an exception if the assembly cannot be located; otherwise, , and this method returns  if the assembly cannot be located.
    - Returns: An instance of the requested assembly, or  if no assembly can be located.

    */
    open func GetAssembly(name : dotnet.System.Reflection.AssemblyName, throwOnError : Bool) throws -> Optional<dotnet.System.Reflection.Assembly> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeResolutionService_Assembly__GetAssembly_0__2__AssemblyName_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(throwOnError ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.Assembly(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String GetPathOfAssembly(System.Reflection.AssemblyName)
// docid: M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)
    /**
    Gets the path to the file from which the assembly was loaded.

    - Parameter name: The name of the assembly.
    - Returns: The path to the file from which the assembly was loaded.

    */
    open func GetPathOfAssembly(name : dotnet.System.Reflection.AssemblyName) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeResolutionService_String__GetPathOfAssembly_0__1__AssemblyName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type GetType(System.String)
// docid: M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)
    /**
    Loads a type with the specified name.

    - Parameter name: The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.
    - Returns: An instance of  that corresponds to the specified name, or  if no type can be found.

    */
    open func GetType(name : dotnet.System.String) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeResolutionService_Type__GetType_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type GetType(System.String, bool)
// docid: M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)
    /**
    Loads a type with the specified name.

    - Parameter name: The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.
    - Parameter throwOnError: 
         if this method should throw an exception if the assembly cannot be located; otherwise, , and this method returns  if the assembly cannot be located.
    - Returns: An instance of  that corresponds to the specified name, or  if no type can be found.

    */
    open func GetType(name : dotnet.System.String, throwOnError : Bool) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeResolutionService_Type__GetType_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(throwOnError ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Type GetType(System.String, bool, bool)
// docid: M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)
    /**
    Loads a type with the specified name.

    - Parameter name: The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.
    - Parameter throwOnError: 
         if this method should throw an exception if the assembly cannot be located; otherwise, , and this method returns  if the assembly cannot be located.
    - Parameter ignoreCase: 
         to ignore case when searching for types; otherwise, .
    - Returns: An instance of  that corresponds to the specified name, or  if no type can be found.

    */
    open func GetType(name : dotnet.System.String, throwOnError : Bool, ignoreCase : Bool) throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ITypeResolutionService_Type__GetType_0__3__String_bool_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(throwOnError ? 1 : 0), Swift.Int32(ignoreCase ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void ReferenceAssembly(System.Reflection.AssemblyName)
// docid: M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)
    /**
    Adds a reference to the specified assembly.

    - Parameter name: An  that indicates the assembly to reference.
    */
    open func ReferenceAssembly(name : dotnet.System.Reflection.AssemblyName) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ITypeResolutionService_void__ReferenceAssembly_0__1__AssemblyName(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ITypeResolutionService


// type: System.ComponentModel.Design.MenuCommand
    /**
    Represents a Windows menu or toolbar command item.

    */
open class MenuCommand
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_MenuCommand_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.EventHandler, System.ComponentModel.Design.CommandID)
// docid: M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)
    /**
    Initializes a new instance of the  class.

    - Parameter handler: The event to raise when the user selects the menu item or toolbar button.
    - Parameter command: The unique command ID that links this menu command to the environment's menu.
    */
    public init(handler : Optional<dotnet.System.EventHandler>, command : Optional<dotnet.System.ComponentModel.Design.CommandID>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_MenuCommand_ctor_0__2__EventHandler_CommandID(&__thrown, handler?.get_handle() ?? nil, command?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke()
// docid: M:System.ComponentModel.Design.MenuCommand.Invoke
    /**
    Invokes the command.

    */
    open func Invoke() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_MenuCommand_void__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Invoke(System.Object)
// docid: M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)
    /**
    Invokes the command with the given parameter.

    - Parameter arg: An optional argument for use by the command.
    */
    open func Invoke(arg : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_MenuCommand_void__Invoke_0__1__Object(&__thrown, self.get_handle(), arg.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:System.ComponentModel.Design.MenuCommand.ToString
    /**
    Returns a string representation of this menu command.

    - Returns: A string containing the value of the  property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include , , , and .

    */
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_MenuCommand_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Checked()
// docid: M:System.ComponentModel.Design.MenuCommand.get_Checked
    open func get_Checked() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_MenuCommand_bool__get_Checked_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Checked(bool)
// docid: M:System.ComponentModel.Design.MenuCommand.set_Checked(System.Boolean)
    open func set_Checked(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_MenuCommand_void__set_Checked_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.CommandID get_CommandID()
// docid: M:System.ComponentModel.Design.MenuCommand.get_CommandID
    open func get_CommandID() throws -> Optional<dotnet.System.ComponentModel.Design.CommandID> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_MenuCommand_CommandID__get_CommandID_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.Design.CommandID(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] bool get_Enabled()
// docid: M:System.ComponentModel.Design.MenuCommand.get_Enabled
    open func get_Enabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_MenuCommand_bool__get_Enabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Enabled(bool)
// docid: M:System.ComponentModel.Design.MenuCommand.set_Enabled(System.Boolean)
    open func set_Enabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_MenuCommand_void__set_Enabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_OleStatus()
// docid: M:System.ComponentModel.Design.MenuCommand.get_OleStatus
    open func get_OleStatus() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_MenuCommand_i32__get_OleStatus_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Collections.IDictionary get_Properties()
// docid: M:System.ComponentModel.Design.MenuCommand.get_Properties
    open func get_Properties() throws -> dotnet.System.Collections.IDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_MenuCommand_IDictionary__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_Supported()
// docid: M:System.ComponentModel.Design.MenuCommand.get_Supported
    open func get_Supported() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_MenuCommand_bool__get_Supported_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Supported(bool)
// docid: M:System.ComponentModel.Design.MenuCommand.set_Supported(System.Boolean)
    open func set_Supported(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_MenuCommand_void__set_Supported_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Visible()
// docid: M:System.ComponentModel.Design.MenuCommand.get_Visible
    open func get_Visible() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_MenuCommand_bool__get_Visible_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Visible(bool)
// docid: M:System.ComponentModel.Design.MenuCommand.set_Visible(System.Boolean)
    open func set_Visible(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_MenuCommand_void__set_Visible_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_CommandChanged(System.EventHandler)
// docid: M:System.ComponentModel.Design.MenuCommand.add_CommandChanged(System.EventHandler)
    open func add_CommandChanged(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_MenuCommand_void__add_CommandChanged_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_CommandChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_CommandChanged(value: del_value);
    }
    // [IsSpecialName] void remove_CommandChanged(System.EventHandler)
// docid: M:System.ComponentModel.Design.MenuCommand.remove_CommandChanged(System.EventHandler)
    open func remove_CommandChanged(value : Optional<dotnet.System.EventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_MenuCommand_void__remove_CommandChanged_0__1__EventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_CommandChanged(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_CommandChanged(value: del_value);
    }
    /**
    Gets or sets a value indicating whether this menu item is checked.

    */
    open var Checked : Bool {
        get {
            return try! get_Checked();
        }
        set(v) {
            return try! set_Checked(value: v);
        }
    }
    /**
    Gets the  associated with this menu command.

    */
    open var CommandID : Optional<dotnet.System.ComponentModel.Design.CommandID> {
        get {
            return try! get_CommandID();
        }
    }
    /**
    Gets a value indicating whether this menu item is available.

    */
    open var Enabled : Bool {
        get {
            return try! get_Enabled();
        }
        set(v) {
            return try! set_Enabled(value: v);
        }
    }
    /**
    Gets the OLE command status code for this menu item.

    */
    open var OleStatus : Swift.Int32 {
        get {
            return try! get_OleStatus();
        }
    }
    /**
    Gets the public properties associated with the .

    */
    open var Properties : dotnet.System.Collections.IDictionary {
        get {
            return try! get_Properties();
        }
    }
    /**
    Gets or sets a value indicating whether this menu item is supported.

    */
    open var Supported : Bool {
        get {
            return try! get_Supported();
        }
        set(v) {
            return try! set_Supported(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether this menu item is visible.

    */
    open var Visible : Bool {
        get {
            return try! get_Visible();
        }
        set(v) {
            return try! set_Visible(value: v);
        }
    }
} // MenuCommand


// type: System.ComponentModel.Design.SelectionTypes
    /**
    Defines identifiers that indicate the type of a selection.

    */
public struct SelectionTypes : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_SelectionTypes_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.Design.SelectionTypes Auto
    /**
    Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.

    */
    public static var Auto : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Auto());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes Normal
    /**
    Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.

    */
    public static var Normal : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Normal());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes Replace
    /**
    Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.

    */
    public static var Replace : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Replace());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes MouseDown
    /**
    Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.

    */
    public static var MouseDown : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_MouseDown());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes MouseUp
    /**
    Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.

    */
    public static var MouseUp : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_MouseUp());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes Click
    /**
    Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.

    */
    public static var Click : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Click());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes Primary
    /**
    Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.

    */
    public static var Primary : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Primary());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes Valid
    /**
    Identifies the valid selection types as , , , , or .

    */
    public static var Valid : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Valid());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes Toggle
    /**
    Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into  with a selection type of , the component selection will be canceled.

    */
    public static var Toggle : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Toggle());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes Add
    /**
    Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.

    */
    public static var Add : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Add());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.SelectionTypes Remove
    /**
    Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.

    */
    public static var Remove : dotnet.System.ComponentModel.Design.SelectionTypes {
        get {
        let __return = dotnet.System.ComponentModel.Design.SelectionTypes(val: System_ComponentModel_Design_SelectionTypes_get_Remove());
            return __return;
        }
    }
} // SelectionTypes


// type: System.ComponentModel.Design.ServiceContainer
    /**
    Provides a simple implementation of the  interface. This class cannot be inherited.

    */
open class ServiceContainer
    :
    dotnet.System.Object,
    System_ComponentModel_Design_IServiceContainer,
    System_IServiceProvider,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ServiceContainer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Design.ServiceContainer.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ServiceContainer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IServiceProvider)
// docid: M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)
    /**
    Initializes a new instance of the  class using the specified parent service provider.

    - Parameter parentProvider: A parent service provider.
    */
    public init(parentProvider : Optional<dotnet.System.IServiceProvider>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ServiceContainer_ctor_0__1__IServiceProvider(&__thrown, parentProvider?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback)
// docid: M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)
    /**
    Adds the specified service to the service container.

    - Parameter serviceType: The type of service to add.
    - Parameter callback: A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.
    */
    open /* method final */ func AddService(serviceType : dotnet.System.Type_, callback : dotnet.System.ComponentModel.Design.ServiceCreatorCallback) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ServiceContainer_void__AddService_0__2__Type_ServiceCreatorCallback(&__thrown, self.get_handle(), serviceType.get_handle(), callback.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open /* method final */ func AddService(serviceType : dotnet.System.Type_, callback : @escaping (dotnet.System.ComponentModel.Design.IServiceContainer, dotnet.System.Type_) throws -> dotnet.System.Object) throws {
        let del_callback = try dotnet.System.ComponentModel.Design.ServiceCreatorCallback(callback);
        return try AddService(serviceType: serviceType, callback: del_callback);
    }
    // void AddService(System.Type, System.ComponentModel.Design.ServiceCreatorCallback, bool)
// docid: M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)
    /**
    Adds the specified service to the service container.

    - Parameter serviceType: The type of service to add.
    - Parameter callback: A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.
    - Parameter promote: 
         if this service should be added to any parent service containers; otherwise, .
    */
    open func AddService(serviceType : dotnet.System.Type_, callback : dotnet.System.ComponentModel.Design.ServiceCreatorCallback, promote : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ServiceContainer_void__AddService_0__3__Type_ServiceCreatorCallback_bool(&__thrown, self.get_handle(), serviceType.get_handle(), callback.get_handle(), Swift.Int32(promote ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func AddService(serviceType : dotnet.System.Type_, callback : @escaping (dotnet.System.ComponentModel.Design.IServiceContainer, dotnet.System.Type_) throws -> dotnet.System.Object, promote : Bool) throws {
        let del_callback = try dotnet.System.ComponentModel.Design.ServiceCreatorCallback(callback);
        return try AddService(serviceType: serviceType, callback: del_callback, promote: promote);
    }
    // void AddService(System.Type, System.Object)
// docid: M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)
    /**
    Adds the specified service to the service container.

    - Parameter serviceType: The type of service to add.
    - Parameter serviceInstance: An instance of the service to add. This object must implement or inherit from the type indicated by the  parameter.
    */
    open /* method final */ func AddService(serviceType : dotnet.System.Type_, serviceInstance : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ServiceContainer_void__AddService_0__2__Type_Object(&__thrown, self.get_handle(), serviceType.get_handle(), serviceInstance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddService(System.Type, System.Object, bool)
// docid: M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)
    /**
    Adds the specified service to the service container.

    - Parameter serviceType: The type of service to add.
    - Parameter serviceInstance: An instance of the service type to add. This object must implement or inherit from the type indicated by the  parameter.
    - Parameter promote: 
         if this service should be added to any parent service containers; otherwise, .
    */
    open func AddService(serviceType : dotnet.System.Type_, serviceInstance : dotnet.System.Object, promote : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ServiceContainer_void__AddService_0__3__Type_Object_bool(&__thrown, self.get_handle(), serviceType.get_handle(), serviceInstance.get_handle(), Swift.Int32(promote ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.ComponentModel.Design.ServiceContainer.Dispose
    /**
    Disposes this service container.

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ServiceContainer_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object GetService(System.Type)
// docid: M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)
    /**
    Gets the requested service.

    - Parameter serviceType: The type of service to retrieve.
    - Returns: An instance of the service if it could be found, or  if it could not be found.

    */
    open func GetService(serviceType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ServiceContainer_Object__GetService_0__1__Type(&__thrown, self.get_handle(), serviceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void RemoveService(System.Type)
// docid: M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)
    /**
    Removes the specified service type from the service container.

    - Parameter serviceType: The type of service to remove.
    */
    open /* method final */ func RemoveService(serviceType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ServiceContainer_void__RemoveService_0__1__Type(&__thrown, self.get_handle(), serviceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveService(System.Type, bool)
// docid: M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)
    /**
    Removes the specified service type from the service container.

    - Parameter serviceType: The type of service to remove.
    - Parameter promote: 
         if this service should be removed from any parent service containers; otherwise, .
    */
    open func RemoveService(serviceType : dotnet.System.Type_, promote : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_ServiceContainer_void__RemoveService_0__2__Type_bool(&__thrown, self.get_handle(), serviceType.get_handle(), Swift.Int32(promote ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ServiceContainer


// type: System.ComponentModel.Design.ServiceCreatorCallback
    /**
    Provides a callback mechanism that can create an instance of a service on demand.

    */
public final class ServiceCreatorCallback
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ServiceCreatorCallback_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Object Invoke(System.ComponentModel.Design.IServiceContainer, System.Type)
// docid: M:System.ComponentModel.Design.ServiceCreatorCallback.Invoke(System.ComponentModel.Design.IServiceContainer,System.Type)
    public func Invoke(container : dotnet.System.ComponentModel.Design.IServiceContainer, serviceType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ServiceCreatorCallback_Object__Invoke_0__2__IServiceContainer_Type(&__thrown, self.get_handle(), container.get_handle(), serviceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.IAsyncResult BeginInvoke(System.ComponentModel.Design.IServiceContainer, System.Type, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.ServiceCreatorCallback.BeginInvoke(System.ComponentModel.Design.IServiceContainer,System.Type,System.AsyncCallback,System.Object)
    public func BeginInvoke(container : dotnet.System.ComponentModel.Design.IServiceContainer, serviceType : dotnet.System.Type_, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ServiceCreatorCallback_IAsyncResult__BeginInvoke_0__4__IServiceContainer_Type_AsyncCallback_Object(&__thrown, self.get_handle(), container.get_handle(), serviceType.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.ServiceCreatorCallback.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ServiceCreatorCallback_Object__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    public init(_ callback : @escaping (dotnet.System.ComponentModel.Design.IServiceContainer, dotnet.System.Type_) throws -> dotnet.System.Object) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> NullableHandle =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, container : NonnullHandle, serviceType : NonnullHandle) -> NullableHandle in
            do
            {
                thrown.pointee = nil;
                let ret = try callback(dotnet.System.ComponentModel.Design.IServiceContainer(hndl: container), dotnet.System.Type_(hndl: serviceType));
                return __copy_handle(ret.get_handle());
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
                return NonnullHandle(bitPattern: 8675309)!;
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, container : NonnullHandle, serviceType : NonnullHandle) -> NullableHandle
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> NullableHandle;
            return f(thrown, container, serviceType);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_ServiceCreatorCallback_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Invoke(System.ComponentModel.Design.IServiceContainer, System.Type)
// docid: M:System.ComponentModel.Design.ServiceCreatorCallback.Invoke(System.ComponentModel.Design.IServiceContainer,System.Type)
    public func callAsFunction(container : dotnet.System.ComponentModel.Design.IServiceContainer, serviceType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_ServiceCreatorCallback_Object__Invoke_0__2__IServiceContainer_Type(&__thrown, self.get_handle(), container.get_handle(), serviceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ServiceCreatorCallback


// type: System.ComponentModel.Design.StandardCommands
    /**
    Defines identifiers for the standard set of commands that are available to most applications.

    */
open class StandardCommands
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_StandardCommands_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.Design.CommandID AlignBottom
    /**
    Gets the  for the AlignBottom command. This field is read-only.

    */
    open class var AlignBottom : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_AlignBottom());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID AlignHorizontalCenters
    /**
    Gets the  for the AlignHorizontalCenters command. This field is read-only.

    */
    open class var AlignHorizontalCenters : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_AlignHorizontalCenters());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID AlignLeft
    /**
    Gets the  for the AlignLeft command. This field is read-only.

    */
    open class var AlignLeft : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_AlignLeft());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID AlignRight
    /**
    Gets the  for the AlignRight command. This field is read-only.

    */
    open class var AlignRight : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_AlignRight());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID AlignToGrid
    /**
    Gets the  for the AlignToGrid command. This field is read-only.

    */
    open class var AlignToGrid : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_AlignToGrid());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID AlignTop
    /**
    Gets the  for the AlignTop command. This field is read-only.

    */
    open class var AlignTop : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_AlignTop());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID AlignVerticalCenters
    /**
    Gets the  for the AlignVerticalCenters command. This field is read-only.

    */
    open class var AlignVerticalCenters : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_AlignVerticalCenters());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID ArrangeBottom
    /**
    Gets the  for the ArrangeBottom command. This field is read-only.

    */
    open class var ArrangeBottom : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_ArrangeBottom());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID ArrangeIcons
    /**
    Gets the  for the ArrangeIcons command. This field is read-only.

    */
    open class var ArrangeIcons : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_ArrangeIcons());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID ArrangeRight
    /**
    Gets the  for the ArrangeRight command. This field is read-only.

    */
    open class var ArrangeRight : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_ArrangeRight());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID BringForward
    /**
    Gets the  for the BringForward command. This field is read-only.

    */
    open class var BringForward : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_BringForward());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID BringToFront
    /**
    Gets the  for the BringToFront command. This field is read-only.

    */
    open class var BringToFront : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_BringToFront());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID CenterHorizontally
    /**
    Gets the  for the CenterHorizontally command. This field is read-only.

    */
    open class var CenterHorizontally : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_CenterHorizontally());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID CenterVertically
    /**
    Gets the  for the CenterVertically command. This field is read-only.

    */
    open class var CenterVertically : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_CenterVertically());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Copy
    /**
    Gets the  for the Copy command. This field is read-only.

    */
    open class var Copy : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Copy());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Cut
    /**
    Gets the  for the Cut command. This field is read-only.

    */
    open class var Cut : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Cut());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Delete
    /**
    Gets the  for the Delete command. This field is read-only.

    */
    open class var Delete : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Delete());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID DocumentOutline
    /**
    Gets the  for the Document Outline command. This field is read-only.

    */
    open class var DocumentOutline : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_DocumentOutline());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID F1Help
    /**
    Gets the  for the F1Help command. This field is read-only.

    */
    open class var F1Help : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_F1Help());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Group
    /**
    Gets the  for the Group command. This field is read-only.

    */
    open class var Group : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Group());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID HorizSpaceConcatenate
    /**
    Gets the  for the HorizSpaceConcatenate command. This field is read-only.

    */
    open class var HorizSpaceConcatenate : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_HorizSpaceConcatenate());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID HorizSpaceDecrease
    /**
    Gets the  for the HorizSpaceDecrease command. This field is read-only.

    */
    open class var HorizSpaceDecrease : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_HorizSpaceDecrease());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID HorizSpaceIncrease
    /**
    Gets the  for the HorizSpaceIncrease command. This field is read-only.

    */
    open class var HorizSpaceIncrease : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_HorizSpaceIncrease());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID HorizSpaceMakeEqual
    /**
    Gets the  for the HorizSpaceMakeEqual command. This field is read-only.

    */
    open class var HorizSpaceMakeEqual : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_HorizSpaceMakeEqual());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID LineupIcons
    /**
    Gets the  for the LineupIcons command. This field is read-only.

    */
    open class var LineupIcons : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_LineupIcons());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID LockControls
    /**
    Gets the  for the LockControls command. This field is read-only.

    */
    open class var LockControls : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_LockControls());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID MultiLevelRedo
    /**
    Gets the  for the MultiLevelRedo command. This field is read-only.

    */
    open class var MultiLevelRedo : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_MultiLevelRedo());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID MultiLevelUndo
    /**
    Gets the  for the MultiLevelUndo command. This field is read-only.

    */
    open class var MultiLevelUndo : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_MultiLevelUndo());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Paste
    /**
    Gets the  for the Paste command. This field is read-only.

    */
    open class var Paste : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Paste());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Properties
    /**
    Gets the  for the Properties command. This field is read-only.

    */
    open class var Properties : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Properties());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID PropertiesWindow
    /**
    Gets the  for the PropertiesWindow command. This field is read-only.

    */
    open class var PropertiesWindow : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_PropertiesWindow());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Redo
    /**
    Gets the  for the Redo command. This field is read-only.

    */
    open class var Redo : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Redo());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Replace
    /**
    Gets the  for the Replace command. This field is read-only.

    */
    open class var Replace : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Replace());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SelectAll
    /**
    Gets the  for the SelectAll command. This field is read-only.

    */
    open class var SelectAll : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SelectAll());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SendBackward
    /**
    Gets the  for the SendBackward command. This field is read-only.

    */
    open class var SendBackward : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SendBackward());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SendToBack
    /**
    Gets the  for the SendToBack command. This field is read-only.

    */
    open class var SendToBack : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SendToBack());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID ShowGrid
    /**
    Gets the  for the ShowGrid command. This field is read-only.

    */
    open class var ShowGrid : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_ShowGrid());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID ShowLargeIcons
    /**
    Gets the  for the ShowLargeIcons command. This field is read-only.

    */
    open class var ShowLargeIcons : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_ShowLargeIcons());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SizeToControl
    /**
    Gets the  for the SizeToControl command. This field is read-only.

    */
    open class var SizeToControl : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SizeToControl());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SizeToControlHeight
    /**
    Gets the  for the SizeToControlHeight command. This field is read-only.

    */
    open class var SizeToControlHeight : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SizeToControlHeight());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SizeToControlWidth
    /**
    Gets the  for the SizeToControlWidth command. This field is read-only.

    */
    open class var SizeToControlWidth : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SizeToControlWidth());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SizeToFit
    /**
    Gets the  for the SizeToFit command. This field is read-only.

    */
    open class var SizeToFit : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SizeToFit());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SizeToGrid
    /**
    Gets the  for the SizeToGrid command. This field is read-only.

    */
    open class var SizeToGrid : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SizeToGrid());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID SnapToGrid
    /**
    Gets the  for the SnapToGrid command. This field is read-only.

    */
    open class var SnapToGrid : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_SnapToGrid());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID TabOrder
    /**
    Gets the  for the TabOrder command. This field is read-only.

    */
    open class var TabOrder : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_TabOrder());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Undo
    /**
    Gets the  for the Undo command. This field is read-only.

    */
    open class var Undo : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Undo());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID Ungroup
    /**
    Gets the  for the Ungroup command. This field is read-only.

    */
    open class var Ungroup : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_Ungroup());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID VerbFirst
    /**
    Gets the first of a set of verbs. This field is read-only.

    */
    open class var VerbFirst : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_VerbFirst());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID VerbLast
    /**
    Gets the last of a set of verbs. This field is read-only.

    */
    open class var VerbLast : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_VerbLast());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID VertSpaceConcatenate
    /**
    Gets the  for the VertSpaceConcatenate command. This field is read-only.

    */
    open class var VertSpaceConcatenate : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_VertSpaceConcatenate());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID VertSpaceDecrease
    /**
    Gets the  for the VertSpaceDecrease command. This field is read-only.

    */
    open class var VertSpaceDecrease : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_VertSpaceDecrease());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID VertSpaceIncrease
    /**
    Gets the  for the VertSpaceIncrease command. This field is read-only.

    */
    open class var VertSpaceIncrease : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_VertSpaceIncrease());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID VertSpaceMakeEqual
    /**
    Gets the  for the VertSpaceMakeEqual command. This field is read-only.

    */
    open class var VertSpaceMakeEqual : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_VertSpaceMakeEqual());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID ViewCode
    /**
    Gets the  for the ViewCode command. This field is read-only.

    */
    open class var ViewCode : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_ViewCode());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.CommandID ViewGrid
    /**
    Gets the  for the ViewGrid command. This field is read-only.

    */
    open class var ViewGrid : dotnet.System.ComponentModel.Design.CommandID {
        get {
        let __return = dotnet.System.ComponentModel.Design.CommandID(hndl: System_ComponentModel_Design_StandardCommands_get_ViewGrid());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.Design.StandardCommands.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_StandardCommands_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // StandardCommands


// type: System.ComponentModel.Design.StandardToolWindows
    /**
    Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.

    */
open class StandardToolWindows
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_StandardToolWindows_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.Guid ObjectBrowser
    /**
    Gets the GUID for the object browser. This field is read-only.

    */
    open class var ObjectBrowser : dotnet.System.Guid {
        get {
        let __return = dotnet.System.Guid(hndl: System_ComponentModel_Design_StandardToolWindows_get_ObjectBrowser());
            return __return;
        }
    }
    // static field: System.Guid OutputWindow
    /**
    Gets the GUID for the output window. This field is read-only.

    */
    open class var OutputWindow : dotnet.System.Guid {
        get {
        let __return = dotnet.System.Guid(hndl: System_ComponentModel_Design_StandardToolWindows_get_OutputWindow());
            return __return;
        }
    }
    // static field: System.Guid ProjectExplorer
    /**
    Gets the GUID for the solution explorer. This field is read-only.

    */
    open class var ProjectExplorer : dotnet.System.Guid {
        get {
        let __return = dotnet.System.Guid(hndl: System_ComponentModel_Design_StandardToolWindows_get_ProjectExplorer());
            return __return;
        }
    }
    // static field: System.Guid PropertyBrowser
    /**
    Gets the GUID for the Properties window. This field is read-only.

    */
    open class var PropertyBrowser : dotnet.System.Guid {
        get {
        let __return = dotnet.System.Guid(hndl: System_ComponentModel_Design_StandardToolWindows_get_PropertyBrowser());
            return __return;
        }
    }
    // static field: System.Guid RelatedLinks
    /**
    Gets the GUID for the related links frame. This field is read-only.

    */
    open class var RelatedLinks : dotnet.System.Guid {
        get {
        let __return = dotnet.System.Guid(hndl: System_ComponentModel_Design_StandardToolWindows_get_RelatedLinks());
            return __return;
        }
    }
    // static field: System.Guid ServerExplorer
    /**
    Gets the GUID for the server explorer. This field is read-only.

    */
    open class var ServerExplorer : dotnet.System.Guid {
        get {
        let __return = dotnet.System.Guid(hndl: System_ComponentModel_Design_StandardToolWindows_get_ServerExplorer());
            return __return;
        }
    }
    // static field: System.Guid TaskList
    /**
    Gets the GUID for the task list. This field is read-only.

    */
    open class var TaskList : dotnet.System.Guid {
        get {
        let __return = dotnet.System.Guid(hndl: System_ComponentModel_Design_StandardToolWindows_get_TaskList());
            return __return;
        }
    }
    // static field: System.Guid Toolbox
    /**
    Gets the GUID for the Toolbox. This field is read-only.

    */
    open class var Toolbox : dotnet.System.Guid {
        get {
        let __return = dotnet.System.Guid(hndl: System_ComponentModel_Design_StandardToolWindows_get_Toolbox());
            return __return;
        }
    }
    // .ctor()
// docid: M:System.ComponentModel.Design.StandardToolWindows.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_StandardToolWindows_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // StandardToolWindows


// type: System.ComponentModel.Design.TypeDescriptionProviderService
    /**
    Provides a type description provider for a specified type.

    */
open class TypeDescriptionProviderService
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_TypeDescriptionProviderService_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.ComponentModel.TypeDescriptionProvider GetProvider(System.Object)
// docid: M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)
    /**
    Gets a type description provider for the specified object.

    - Parameter instance: The object to get a type description provider for.
    - Returns: A  that corresponds with .

    */
    open func GetProvider(instance : dotnet.System.Object) throws -> dotnet.System.ComponentModel.TypeDescriptionProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_TypeDescriptionProviderService_TypeDescriptionProvider__GetProvider_0__1__Object(&__thrown, self.get_handle(), instance.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeDescriptionProvider(hndl : __return);
        }
    }
    // System.ComponentModel.TypeDescriptionProvider GetProvider(System.Type)
// docid: M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)
    /**
    Gets a type description provider for the specified type.

    - Parameter type: The type to get a type description provider for.
    - Returns: A  that corresponds with .

    */
    open func GetProvider(type : dotnet.System.Type_) throws -> dotnet.System.ComponentModel.TypeDescriptionProvider {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_TypeDescriptionProviderService_TypeDescriptionProvider__GetProvider_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeDescriptionProvider(hndl : __return);
        }
    }
} // TypeDescriptionProviderService


// type: System.ComponentModel.Design.ViewTechnology
    /**
    Defines identifiers for a set of technologies that designer hosts support.

    */
public struct ViewTechnology : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_ViewTechnology_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.ComponentModel.Design.ViewTechnology Passthrough
    /**
    Represents a mode in which the view object is passed directly to the development environment.
        
The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.

    */
    public static var Passthrough : dotnet.System.ComponentModel.Design.ViewTechnology {
        get {
        let __return = dotnet.System.ComponentModel.Design.ViewTechnology(val: System_ComponentModel_Design_ViewTechnology_get_Passthrough());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.ViewTechnology WindowsForms
    /**
    Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.

    */
    public static var WindowsForms : dotnet.System.ComponentModel.Design.ViewTechnology {
        get {
        let __return = dotnet.System.ComponentModel.Design.ViewTechnology(val: System_ComponentModel_Design_ViewTechnology_get_WindowsForms());
            return __return;
        }
    }
    // static field: System.ComponentModel.Design.ViewTechnology Default
    /**
    Specifies the default view technology support.
        
The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a  instance.

    */
    public static var Default : dotnet.System.ComponentModel.Design.ViewTechnology {
        get {
        let __return = dotnet.System.ComponentModel.Design.ViewTechnology(val: System_ComponentModel_Design_ViewTechnology_get_Default());
            return __return;
        }
    }
} // ViewTechnology


}
// System.ComponentModel.Design.Serialization
extension System.ComponentModel.Design.Serialization {
// type: System.ComponentModel.Design.Serialization.ComponentSerializationService
    /**
    Provides the base class for serializing a set of components or serializable objects into a serialization store.

    */
open class ComponentSerializationService
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_ComponentSerializationService_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.ComponentModel.Design.Serialization.SerializationStore CreateStore()
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore
    /**
    Creates a new .

    - Returns: A new created serialization store.

    */
    open func CreateStore() throws -> dotnet.System.ComponentModel.Design.Serialization.SerializationStore {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ComponentSerializationService_SerializationStore__CreateStore_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.Serialization.SerializationStore(hndl : __return);
        }
    }
    // System.Collections.ICollection Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)
    /**
    Deserializes the given store to produce a collection of objects.

    - Parameter store: The  to deserialize.
    - Returns: A collection of objects created according to the stored state.

    */
    open func Deserialize(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore) throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ComponentSerializationService_ICollection__Deserialize_0__1__SerializationStore(&__thrown, self.get_handle(), store.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // System.Collections.ICollection Deserialize(System.ComponentModel.Design.Serialization.SerializationStore, System.ComponentModel.IContainer)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)
    /**
    Deserializes the given store and populates the given  with deserialized  objects.

    - Parameter store: The  to deserialize.
    - Parameter container: The  to which  objects will be added.
    - Returns: A collection of objects created according to the stored state.

    */
    open func Deserialize(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore, container : dotnet.System.ComponentModel.IContainer) throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ComponentSerializationService_ICollection__Deserialize_0__2__SerializationStore_IContainer(&__thrown, self.get_handle(), store.get_handle(), container.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // void DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore, System.ComponentModel.IContainer)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)
    /**
    Deserializes the given  to the given container.

    - Parameter store: The  to deserialize.
    - Parameter container: The container to which  objects will be added.
    */
    open func DeserializeTo(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore, container : dotnet.System.ComponentModel.IContainer) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ComponentSerializationService_void__DeserializeTo_0__2__SerializationStore_IContainer(&__thrown, self.get_handle(), store.get_handle(), container.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore, System.ComponentModel.IContainer, bool)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)
    /**
    Deserializes the given  to the given container, optionally validating recycled types.

    - Parameter store: The  to deserialize.
    - Parameter container: The container to which  objects will be added.
    - Parameter validateRecycledTypes: 
         to guarantee that the deserialization will only work if applied to an object of the same type.
    */
    open func DeserializeTo(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore, container : dotnet.System.ComponentModel.IContainer, validateRecycledTypes : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ComponentSerializationService_void__DeserializeTo_0__3__SerializationStore_IContainer_bool(&__thrown, self.get_handle(), store.get_handle(), container.get_handle(), Swift.Int32(validateRecycledTypes ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore, System.ComponentModel.IContainer, bool, bool)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)
    /**
    Deserializes the given  to the given container, optionally applying default property values.

    - Parameter store: The  to deserialize.
    - Parameter container: The container to which  objects will be added.
    - Parameter validateRecycledTypes: 
         to guarantee that the deserialization will only work if applied to an object of the same type.
    - Parameter applyDefaults: 
         to indicate that the default property values should be applied.
    */
    open func DeserializeTo(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore, container : dotnet.System.ComponentModel.IContainer, validateRecycledTypes : Bool, applyDefaults : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ComponentSerializationService_void__DeserializeTo_0__4__SerializationStore_IContainer_bool_bool(&__thrown, self.get_handle(), store.get_handle(), container.get_handle(), Swift.Int32(validateRecycledTypes ? 1 : 0), Swift.Int32(applyDefaults ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.ComponentModel.Design.Serialization.SerializationStore LoadStore(System.IO.Stream)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)
    /**
    Loads a  from a stream.

    - Parameter stream: The  from which the store will be loaded.
    - Returns: A new  instance.

    */
    open func LoadStore(stream : dotnet.System.IO.Stream) throws -> dotnet.System.ComponentModel.Design.Serialization.SerializationStore {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ComponentSerializationService_SerializationStore__LoadStore_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.Serialization.SerializationStore(hndl : __return);
        }
    }
    // void Serialize(System.ComponentModel.Design.Serialization.SerializationStore, System.Object)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)
    /**
    Serializes the given object to the given .

    - Parameter store: The  to which the state of  will be written.
    - Parameter value: The object to serialize.
    */
    open func Serialize(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ComponentSerializationService_void__Serialize_0__2__SerializationStore_Object(&__thrown, self.get_handle(), store.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore, System.Object)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)
    /**
    Serializes the given object, accounting for default property values.

    - Parameter store: The  to which the state of  will be serialized.
    - Parameter value: The object to serialize.
    */
    open func SerializeAbsolute(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ComponentSerializationService_void__SerializeAbsolute_0__2__SerializationStore_Object(&__thrown, self.get_handle(), store.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore, System.Object, System.ComponentModel.MemberDescriptor)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)
    /**
    Serializes the given member on the given object.

    - Parameter store: The  to which the state of  will be serialized.
    - Parameter owningObject: The object to which  is attached.
    - Parameter member: A  specifying the member to serialize.
    */
    open func SerializeMember(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore, owningObject : dotnet.System.Object, member : dotnet.System.ComponentModel.MemberDescriptor) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ComponentSerializationService_void__SerializeMember_0__3__SerializationStore_Object_MemberDescriptor(&__thrown, self.get_handle(), store.get_handle(), owningObject.get_handle(), member.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore, System.Object, System.ComponentModel.MemberDescriptor)
// docid: M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)
    /**
    Serializes the given member on the given object, accounting for the default property value.

    - Parameter store: The  to which the state of  will be serialized.
    - Parameter owningObject: The object to which  is attached.
    - Parameter member: The member to serialize.
    */
    open func SerializeMemberAbsolute(store : dotnet.System.ComponentModel.Design.Serialization.SerializationStore, owningObject : dotnet.System.Object, member : dotnet.System.ComponentModel.MemberDescriptor) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ComponentSerializationService_void__SerializeMemberAbsolute_0__3__SerializationStore_Object_MemberDescriptor(&__thrown, self.get_handle(), store.get_handle(), owningObject.get_handle(), member.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ComponentSerializationService


// type: System.ComponentModel.Design.Serialization.ContextStack
    /**
    Provides a stack object that can be used by a serializer to make information available to nested serializers.

    */
public final class ContextStack
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_ContextStack_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.ComponentModel.Design.Serialization.ContextStack.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_ContextStack_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Append(System.Object)
// docid: M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)
    /**
    Appends an object to the end of the stack, rather than pushing it onto the top of the stack.

    - Parameter context: A context object to append to the stack.
    */
    public func Append(context : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ContextStack_void__Append_0__1__Object(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object Pop()
// docid: M:System.ComponentModel.Design.Serialization.ContextStack.Pop
    /**
    Removes the current object off of the stack, returning its value.

    - Returns: The object removed from the stack;  if no objects are on the stack.

    */
    public func Pop() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ContextStack_Object__Pop_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void Push(System.Object)
// docid: M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)
    /**
    Pushes, or places, the specified object onto the stack.

    - Parameter context: The context object to push onto the stack.
    */
    public func Push(context : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ContextStack_void__Push_0__1__Object(&__thrown, self.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Object get_Current()
// docid: M:System.ComponentModel.Design.Serialization.ContextStack.get_Current
    public func get_Current() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ContextStack_Object__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Int32)
// docid: M:System.ComponentModel.Design.Serialization.ContextStack.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(level : Swift.Int32) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ContextStack_Object__get_Item_0__1__i32(&__thrown, self.get_handle(), level);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Item(System.Type)
// docid: M:System.ComponentModel.Design.Serialization.ContextStack.get_Item(System.Type)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(type : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ContextStack_Object__get_Item_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the current object on the stack.

    */
    public var Current : Optional<dotnet.System.Object> {
        get {
            return try! get_Current();
        }
    }
} // ContextStack


// type: System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute
    /**
    The  attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.

    */
public final class DefaultSerializationProviderAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_DefaultSerializationProviderAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the named provider type.

    - Parameter providerTypeName: The name of the serialization provider type.
    */
    public init(providerTypeName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_DefaultSerializationProviderAttribute_ctor_0__1__String(&__thrown, providerTypeName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type)
// docid: M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class with the given provider type.

    - Parameter providerType: The  of the serialization provider.
    */
    public init(providerType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_DefaultSerializationProviderAttribute_ctor_0__1__Type(&__thrown, providerType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_ProviderTypeName()
// docid: M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.get_ProviderTypeName
    public func get_ProviderTypeName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_DefaultSerializationProviderAttribute_String__get_ProviderTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the type name of the serialization provider.

    */
    public var ProviderTypeName : dotnet.System.String {
        get {
            return try! get_ProviderTypeName();
        }
    }
} // DefaultSerializationProviderAttribute


// type: System.ComponentModel.Design.Serialization.DesignerLoader
    /**
    Provides a basic designer loader interface that can be used to implement a custom designer loader.

    */
open class DesignerLoader
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_DesignerLoader_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)
// docid: M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)
    /**
    Begins loading a designer.

    - Parameter host: The loader host through which this loader loads components.
    */
    open func BeginLoad(host : dotnet.System.ComponentModel.Design.Serialization.IDesignerLoaderHost) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_DesignerLoader_void__BeginLoad_0__1__IDesignerLoaderHost(&__thrown, self.get_handle(), host.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose
    /**
    Releases all resources used by the .

    */
    open func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_DesignerLoader_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush
    /**
    Writes cached changes to the location that the designer was loaded from.

    */
    open func Flush() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_DesignerLoader_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Loading()
// docid: M:System.ComponentModel.Design.Serialization.DesignerLoader.get_Loading
    open func get_Loading() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_DesignerLoader_bool__get_Loading_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets a value indicating whether the loader is currently loading a document.

    */
    open var Loading : Bool {
        get {
            return try! get_Loading();
        }
    }
} // DesignerLoader


// type: System.ComponentModel.Design.Serialization.IDesignerLoaderHost
    /**
    Provides an interface that can extend a designer host to support loading from a serialized state.

    */
open class IDesignerLoaderHost
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_Serialization_IDesignerLoaderHost,
    System_ComponentModel_Design_IDesignerHost
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_IDesignerLoaderHost_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void EndLoad(System.String, bool, System.Collections.ICollection)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)
    /**
    Ends the designer loading operation.

    - Parameter baseClassName: The fully qualified name of the base class of the document that this designer is designing.
    - Parameter successful: 
         if the designer is successfully loaded; otherwise, .
    - Parameter errorCollection: A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or .
    */
    open func EndLoad(baseClassName : dotnet.System.String, successful : Bool, errorCollection : Optional<dotnet.System.Collections.ICollection>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerLoaderHost_void__EndLoad_0__3__String_bool_ICollection(&__thrown, self.get_handle(), baseClassName.get_handle(), Swift.Int32(successful ? 1 : 0), errorCollection?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reload()
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload
    /**
    Reloads the design document.

    */
    open func Reload() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerLoaderHost_void__Reload_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDesignerLoaderHost


// type: System.ComponentModel.Design.Serialization.IDesignerLoaderHost2
    /**
    Provides an interface that extends  to specify whether errors are tolerated while loading a design document.

    */
open class IDesignerLoaderHost2
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_Serialization_IDesignerLoaderHost2,
    System_ComponentModel_Design_Serialization_IDesignerLoaderHost
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_IDesignerLoaderHost2_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // [IsSpecialName] bool get_CanReloadWithErrors()
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.get_CanReloadWithErrors
    open func get_CanReloadWithErrors() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerLoaderHost2_bool__get_CanReloadWithErrors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_CanReloadWithErrors(bool)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.set_CanReloadWithErrors(System.Boolean)
    open func set_CanReloadWithErrors(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerLoaderHost2_void__set_CanReloadWithErrors_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreErrorsDuringReload()
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.get_IgnoreErrorsDuringReload
    open func get_IgnoreErrorsDuringReload() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerLoaderHost2_bool__get_IgnoreErrorsDuringReload_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreErrorsDuringReload(bool)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.set_IgnoreErrorsDuringReload(System.Boolean)
    open func set_IgnoreErrorsDuringReload(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerLoaderHost2_void__set_IgnoreErrorsDuringReload_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IDesignerLoaderHost2


// type: System.ComponentModel.Design.Serialization.IDesignerLoaderService
    /**
    Provides an interface that can extend a designer loader to support asynchronous loading of external components.

    */
open class IDesignerLoaderService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_Serialization_IDesignerLoaderService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_IDesignerLoaderService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddLoadDependency()
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency
    /**
    Registers an external component as part of the load process managed by this interface.

    */
    open func AddLoadDependency() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerLoaderService_void__AddLoadDependency_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DependentLoadComplete(bool, System.Collections.ICollection)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)
    /**
    Signals that a dependent load has finished.

    - Parameter successful: 
         if the load of the designer is successful;  if errors prevented the load from finishing.
    - Parameter errorCollection: A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or .
    */
    open func DependentLoadComplete(successful : Bool, errorCollection : Optional<dotnet.System.Collections.ICollection>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerLoaderService_void__DependentLoadComplete_0__2__bool_ICollection(&__thrown, self.get_handle(), Swift.Int32(successful ? 1 : 0), errorCollection?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Reload()
// docid: M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload
    /**
    Reloads the design document.

    - Returns: 
         if the reload request is accepted, or  if the loader does not allow the reload.

    */
    open func Reload() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerLoaderService_bool__Reload_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // IDesignerLoaderService


// type: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
    /**
    Provides an interface that can manage design-time serialization.

    */
open class IDesignerSerializationManager
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_Serialization_IDesignerSerializationManager,
    System_IServiceProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_IDesignerSerializationManager_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
    /**
    Adds the specified serialization provider to the serialization manager.

    - Parameter provider: The serialization provider to add.
    */
    open func AddSerializationProvider(provider : dotnet.System.ComponentModel.Design.Serialization.IDesignerSerializationProvider) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerSerializationManager_void__AddSerializationProvider_0__1__IDesignerSerializationProvider(&__thrown, self.get_handle(), provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Object CreateInstance(System.Type, System.Collections.ICollection, System.String, bool)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
    /**
    Creates an instance of the specified type and adds it to a collection of named instances.

    - Parameter type: The data type to create.
    - Parameter arguments: The arguments to pass to the constructor for this type.
    - Parameter name: The name of the object. This name can be used to access the object later through . If  is passed, the object is still created but cannot be accessed by name.
    - Parameter addToContainer: If , this object is added to the design container. The object must implement  for this to have any effect.
    - Returns: The newly created object instance.

    */
    open func CreateInstance(type : dotnet.System.Type_, arguments : dotnet.System.Collections.ICollection, name : dotnet.System.String, addToContainer : Bool) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationManager_Object__CreateInstance_0__4__Type_ICollection_String_bool(&__thrown, self.get_handle(), type.get_handle(), arguments.get_handle(), name.get_handle(), Swift.Int32(addToContainer ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object GetInstance(System.String)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)
    /**
    Gets an instance of a created object of the specified name, or  if that object does not exist.

    - Parameter name: The name of the object to retrieve.
    - Returns: An instance of the object with the given name, or  if no object by that name can be found.

    */
    open func GetInstance(name : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationManager_Object__GetInstance_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.String GetName(System.Object)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)
    /**
    Gets the name of the specified object, or  if the object has no name.

    - Parameter value: The object to retrieve the name for.
    - Returns: The name of the object, or  if the object is unnamed.

    */
    open func GetName(value : dotnet.System.Object) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationManager_String__GetName_0__1__Object(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object GetSerializer(System.Type, System.Type)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)
    /**
    Gets a serializer of the requested type for the specified object type.

    - Parameter objectType: The type of the object to get the serializer for.
    - Parameter serializerType: The type of the serializer to retrieve.
    - Returns: An instance of the requested serializer, or  if no appropriate serializer can be located.

    */
    open func GetSerializer(objectType : dotnet.System.Type_, serializerType : dotnet.System.Type_) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationManager_Object__GetSerializer_0__2__Type_Type(&__thrown, self.get_handle(), objectType.get_handle(), serializerType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Type GetType(System.String)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)
    /**
    Gets a type of the specified name.

    - Parameter typeName: The fully qualified name of the type to load.
    - Returns: An instance of the type, or  if the type cannot be loaded.

    */
    open func GetType(typeName : dotnet.System.String) throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationManager_Type__GetType_0__1__String(&__thrown, self.get_handle(), typeName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // void RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
    /**
    Removes a custom serialization provider from the serialization manager.

    - Parameter provider: The provider to remove. This object must have been added using .
    */
    open func RemoveSerializationProvider(provider : dotnet.System.ComponentModel.Design.Serialization.IDesignerSerializationProvider) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerSerializationManager_void__RemoveSerializationProvider_0__1__IDesignerSerializationProvider(&__thrown, self.get_handle(), provider.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ReportError(System.Object)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)
    /**
    Reports an error in serialization.

    - Parameter errorInformation: The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type,  is called to display the information to the user.
    */
    open func ReportError(errorInformation : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerSerializationManager_void__ReportError_0__1__Object(&__thrown, self.get_handle(), errorInformation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetName(System.Object, System.String)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)
    /**
    Sets the name of the specified existing object.

    - Parameter instance: The object instance to name.
    - Parameter name: The name to give the instance.
    */
    open func SetName(instance : dotnet.System.Object, name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerSerializationManager_void__SetName_0__2__Object_String(&__thrown, self.get_handle(), instance.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.Serialization.ContextStack get_Context()
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Context
    open func get_Context() throws -> dotnet.System.ComponentModel.Design.Serialization.ContextStack {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationManager_ContextStack__get_Context_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.Serialization.ContextStack(hndl : __return);
        }
    }
    // [IsSpecialName] System.ComponentModel.PropertyDescriptorCollection get_Properties()
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Properties
    open func get_Properties() throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationManager_PropertyDescriptorCollection__get_Properties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // [IsSpecialName] void add_ResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventHandler)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_ResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventHandler)
    open func add_ResolveName(value : dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerSerializationManager_void__add_ResolveName_0__1__ResolveNameEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_ResolveName(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventHandler(value);
        return try add_ResolveName(value: del_value);
    }
    // [IsSpecialName] void remove_ResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventHandler)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_ResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventHandler)
    open func remove_ResolveName(value : dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerSerializationManager_void__remove_ResolveName_0__1__ResolveNameEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_ResolveName(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventHandler(value);
        return try remove_ResolveName(value: del_value);
    }
    // [IsSpecialName] void add_SerializationComplete(System.EventHandler)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_SerializationComplete(System.EventHandler)
    open func add_SerializationComplete(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerSerializationManager_void__add_SerializationComplete_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_SerializationComplete(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try add_SerializationComplete(value: del_value);
    }
    // [IsSpecialName] void remove_SerializationComplete(System.EventHandler)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_SerializationComplete(System.EventHandler)
    open func remove_SerializationComplete(value : dotnet.System.EventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_IDesignerSerializationManager_void__remove_SerializationComplete_0__1__EventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_SerializationComplete(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.EventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.EventHandler(value);
        return try remove_SerializationComplete(value: del_value);
    }
} // IDesignerSerializationManager


// type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
    /**
    Provides an interface that enables access to a serializer.

    */
open class IDesignerSerializationProvider
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_Serialization_IDesignerSerializationProvider
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_IDesignerSerializationProvider_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Object GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager, System.Object, System.Type, System.Type)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)
    /**
    Gets a serializer using the specified attributes.

    - Parameter manager: The serialization manager requesting the serializer.
    - Parameter currentSerializer: An instance of the current serializer of the specified type. This can be  if no serializer of the specified type exists.
    - Parameter objectType: The data type of the object to serialize.
    - Parameter serializerType: The data type of the serializer to create.
    - Returns: An instance of a serializer of the type requested, or  if the request cannot be satisfied.

    */
    open func GetSerializer(manager : dotnet.System.ComponentModel.Design.Serialization.IDesignerSerializationManager, currentSerializer : dotnet.System.Object, objectType : dotnet.System.Type_, serializerType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationProvider_Object__GetSerializer_0__4__IDesignerSerializationManager_Object_Type_Type(&__thrown, self.get_handle(), manager.get_handle(), currentSerializer.get_handle(), objectType.get_handle(), serializerType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // IDesignerSerializationProvider


// type: System.ComponentModel.Design.Serialization.IDesignerSerializationService
    /**
    Provides an interface that can invoke serialization and deserialization.

    */
open class IDesignerSerializationService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_Serialization_IDesignerSerializationService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_IDesignerSerializationService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.Collections.ICollection Deserialize(System.Object)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)
    /**
    Deserializes the specified serialization data object and returns a collection of objects represented by that data.

    - Parameter serializationData: An object consisting of serialized data.
    - Returns: An  of objects rebuilt from the specified serialization data object.

    */
    open func Deserialize(serializationData : dotnet.System.Object) throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationService_ICollection__Deserialize_0__1__Object(&__thrown, self.get_handle(), serializationData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // System.Object Serialize(System.Collections.ICollection)
// docid: M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)
    /**
    Serializes the specified collection of objects and stores them in a serialization data object.

    - Parameter objects: A collection of objects to serialize.
    - Returns: An object that contains the serialized state of the specified collection of objects.

    */
    open func Serialize(objects : dotnet.System.Collections.ICollection) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_IDesignerSerializationService_Object__Serialize_0__1__ICollection(&__thrown, self.get_handle(), objects.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // IDesignerSerializationService


// type: System.ComponentModel.Design.Serialization.INameCreationService
    /**
    Provides a service that can generate unique names for objects.

    */
open class INameCreationService
    :
    SGBridgeGenericValue,
    System_ComponentModel_Design_Serialization_INameCreationService
{
    open class func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_INameCreationService_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // System.String CreateName(System.ComponentModel.IContainer, System.Type)
// docid: M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)
    /**
    Creates a new name that is unique to all components in the specified container.

    - Parameter container: The container where the new object is added.
    - Parameter dataType: The data type of the object that receives the name.
    - Returns: A unique name for the data type.

    */
    open func CreateName(container : Optional<dotnet.System.ComponentModel.IContainer>, dataType : dotnet.System.Type_) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_INameCreationService_String__CreateName_0__2__IContainer_Type(&__thrown, self.get_handle(), container?.get_handle() ?? nil, dataType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool IsValidName(System.String)
// docid: M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)
    /**
    Gets a value indicating whether the specified name is valid.

    - Parameter name: The name to validate.
    - Returns: 
         if the name is valid; otherwise, .

    */
    open func IsValidName(name : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_INameCreationService_bool__IsValidName_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void ValidateName(System.String)
// docid: M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)
    /**
    Gets a value indicating whether the specified name is valid.

    - Parameter name: The name to validate.
    */
    open func ValidateName(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_INameCreationService_void__ValidateName_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // INameCreationService


// type: System.ComponentModel.Design.Serialization.InstanceDescriptor
    /**
    Provides the information necessary to create an instance of an object. This class cannot be inherited.

    */
public final class InstanceDescriptor
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_InstanceDescriptor_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Reflection.MemberInfo, System.Collections.ICollection)
// docid: M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)
    /**
    Initializes a new instance of the  class using the specified member information and arguments.

    - Parameter member: The member information for the descriptor. This can be a , , , or . If this is a , , or , it must represent a  member.
    - Parameter arguments: The collection of arguments to pass to the member. This parameter can be  or an empty collection if there are no arguments. The collection can also consist of other instances of .
    */
    public init(member : Optional<dotnet.System.Reflection.MemberInfo>, arguments : Optional<dotnet.System.Collections.ICollection>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_InstanceDescriptor_ctor_0__2__MemberInfo_ICollection(&__thrown, member?.get_handle() ?? nil, arguments?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Reflection.MemberInfo, System.Collections.ICollection, bool)
// docid: M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.

    - Parameter member: The member information for the descriptor. This can be a , , , or . If this is a , , or , it must represent a  member.
    - Parameter arguments: The collection of arguments to pass to the member. This parameter can be  or an empty collection if there are no arguments. The collection can also consist of other instances of .
    - Parameter isComplete: 
         if the specified information completely describes the instance; otherwise, .
    */
    public init(member : Optional<dotnet.System.Reflection.MemberInfo>, arguments : Optional<dotnet.System.Collections.ICollection>, isComplete : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_InstanceDescriptor_ctor_0__3__MemberInfo_ICollection_bool(&__thrown, member?.get_handle() ?? nil, arguments?.get_handle() ?? nil, Swift.Int32(isComplete ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Object Invoke()
// docid: M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke
    /**
    Invokes this instance descriptor and returns the object the descriptor describes.

    - Returns: The object this instance descriptor describes.

    */
    public func Invoke() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_InstanceDescriptor_Object__Invoke_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Arguments()
// docid: M:System.ComponentModel.Design.Serialization.InstanceDescriptor.get_Arguments
    public func get_Arguments() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_InstanceDescriptor_ICollection__get_Arguments_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsComplete()
// docid: M:System.ComponentModel.Design.Serialization.InstanceDescriptor.get_IsComplete
    public func get_IsComplete() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_InstanceDescriptor_bool__get_IsComplete_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Reflection.MemberInfo get_MemberInfo()
// docid: M:System.ComponentModel.Design.Serialization.InstanceDescriptor.get_MemberInfo
    public func get_MemberInfo() throws -> Optional<dotnet.System.Reflection.MemberInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_InstanceDescriptor_MemberInfo__get_MemberInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Reflection.MemberInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.

    */
    public var Arguments : dotnet.System.Collections.ICollection {
        get {
            return try! get_Arguments();
        }
    }
    /**
    Gets a value indicating whether the contents of this  completely identify the instance.

    */
    public var IsComplete : Bool {
        get {
            return try! get_IsComplete();
        }
    }
    /**
    Gets the member information that describes the instance this descriptor is associated with.

    */
    public var MemberInfo : Optional<dotnet.System.Reflection.MemberInfo> {
        get {
            return try! get_MemberInfo();
        }
    }
} // InstanceDescriptor


// type: System.ComponentModel.Design.Serialization.MemberRelationship
// boxed value type
    /**
    Represents a single relationship between an object and a member.

    */
public final class MemberRelationship
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_MemberRelationship_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // static field: System.ComponentModel.Design.Serialization.MemberRelationship Empty
    /**
    Represents the empty member relationship. This field is read-only.

    */
    public class var Empty : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship {
        get {
        let __return = dotnet.System.ComponentModel.Design.Serialization.MemberRelationship(hndl: System_ComponentModel_Design_Serialization_MemberRelationship_get_Empty());
            return __return;
        }
    }
    /**
    Gets a value indicating whether this relationship is equal to the  relationship.

    */
    public var IsEmpty : Bool {
        get {
            return try! get_IsEmpty();
        }
    }
    /**
    Gets the related member.

    */
    public var Member : dotnet.System.ComponentModel.MemberDescriptor {
        get {
            return try! get_Member();
        }
    }
    /**
    Gets the owning object.

    */
    public var Owner : Optional<dotnet.System.Object> {
        get {
            return try! get_Owner();
        }
    }
    // .ctor(System.Object, System.ComponentModel.MemberDescriptor)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)
    /**
    Initializes a new instance of the  class.

    - Parameter owner: The object that owns .
    - Parameter member: The member which is to be related to .
    */
    public init(owner : dotnet.System.Object, member : dotnet.System.ComponentModel.MemberDescriptor) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_MemberRelationship_ctor_0__2__Object_MemberDescriptor(&__thrown, owner.get_handle(), member.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_ComponentModel_Design_Serialization_MemberRelationship_implicit_ctor();
            super.init(hndl: h);
    }
    // bool Equals(System.Object)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)
    /**
    Determines whether two  instances are equal.

    - Parameter obj: The  to compare with the current .
    - Returns: 
         if the specified  is equal to the current ; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationship_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode
    /**
    Returns the hash code for this instance.

    - Returns: A hash code for the current .

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationship_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] bool op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)
    /**
    Tests whether two specified  structures are equivalent.

    - Parameter left: The  structure that is to the left of the equality operator.
    - Parameter right: The  structure that is to the right of the equality operator.
    - Returns: This operator returns  if the two  structures are equal; otherwise, .

    */
    public class func op_Equality(left : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship, right : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationship_bool__op_Equality_0__2__MemberRelationship_MemberRelationship(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)
    /**
    Tests whether two specified  structures are different.

    - Parameter left: The  structure that is to the left of the inequality operator.
    - Parameter right: The  structure that is to the right of the inequality operator.
    - Returns: This operator returns  if the two  structures are different; otherwise, .

    */
    public class func op_Inequality(left : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship, right : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationship_bool__op_Inequality_0__2__MemberRelationship_MemberRelationship(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsEmpty()
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationship.get_IsEmpty
    public func get_IsEmpty() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationship_bool__get_IsEmpty_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.MemberDescriptor get_Member()
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationship.get_Member
    public func get_Member() throws -> dotnet.System.ComponentModel.MemberDescriptor {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationship_MemberDescriptor__get_Member_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.MemberDescriptor(hndl : __return);
        }
    }
    // [IsSpecialName] System.Object get_Owner()
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationship.get_Owner
    public func get_Owner() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationship_Object__get_Owner_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // MemberRelationship


// type: System.ComponentModel.Design.Serialization.MemberRelationshipService
    /**
    Provides the base class for relating one member to another.

    */
open class MemberRelationshipService
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_MemberRelationshipService_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)
    /**
    Gets a value indicating whether the given relationship is supported.

    - Parameter source: The source relationship.
    - Parameter relationship: The relationship to set into the source.
    - Returns: 
         if a relationship between the given two objects is supported; otherwise, .

    */
    open func SupportsRelationship(source : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship, relationship : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationshipService_bool__SupportsRelationship_0__2__MemberRelationship_MemberRelationship(&__thrown, self.get_handle(), source.get_handle(), relationship.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.Serialization.MemberRelationship get_Item(System.ComponentModel.Design.Serialization.MemberRelationship)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationshipService.get_Item(System.ComponentModel.Design.Serialization.MemberRelationship)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(source : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship) throws -> dotnet.System.ComponentModel.Design.Serialization.MemberRelationship {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationshipService_MemberRelationship__get_Item_0__1__MemberRelationship(&__thrown, self.get_handle(), source.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.Serialization.MemberRelationship(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.ComponentModel.Design.Serialization.MemberRelationship, System.ComponentModel.Design.Serialization.MemberRelationship)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationshipService.set_Item(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)
    open func set_Item(source : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship, value : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_MemberRelationshipService_void__set_Item_0__2__MemberRelationship_MemberRelationship(&__thrown, self.get_handle(), source.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.Design.Serialization.MemberRelationship get_Item(System.Object, System.ComponentModel.MemberDescriptor)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationshipService.get_Item(System.Object,System.ComponentModel.MemberDescriptor)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(sourceOwner : dotnet.System.Object, sourceMember : dotnet.System.ComponentModel.MemberDescriptor) throws -> dotnet.System.ComponentModel.Design.Serialization.MemberRelationship {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_MemberRelationshipService_MemberRelationship__get_Item_0__2__Object_MemberDescriptor(&__thrown, self.get_handle(), sourceOwner.get_handle(), sourceMember.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.Design.Serialization.MemberRelationship(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Object, System.ComponentModel.MemberDescriptor, System.ComponentModel.Design.Serialization.MemberRelationship)
// docid: M:System.ComponentModel.Design.Serialization.MemberRelationshipService.set_Item(System.Object,System.ComponentModel.MemberDescriptor,System.ComponentModel.Design.Serialization.MemberRelationship)
    open func set_Item(sourceOwner : dotnet.System.Object, sourceMember : dotnet.System.ComponentModel.MemberDescriptor, value : dotnet.System.ComponentModel.Design.Serialization.MemberRelationship) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_MemberRelationshipService_void__set_Item_0__3__Object_MemberDescriptor_MemberRelationship(&__thrown, self.get_handle(), sourceOwner.get_handle(), sourceMember.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // MemberRelationshipService


// type: System.ComponentModel.Design.Serialization.ResolveNameEventArgs
    /**
    Provides data for the  event.

    */
open class ResolveNameEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_ResolveNameEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter name: The name to resolve.
    */
    public init(name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_ResolveNameEventArgs_ctor_0__1__String(&__thrown, name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ResolveNameEventArgs_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_Value()
// docid: M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.get_Value
    open func get_Value() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ResolveNameEventArgs_Object__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Value(System.Object)
// docid: M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.set_Value(System.Object)
    open func set_Value(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ResolveNameEventArgs_void__set_Value_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the name of the object to resolve.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets or sets the object that matches the name.

    */
    open var Value : Optional<dotnet.System.Object> {
        get {
            return try! get_Value();
        }
        set(v) {
            return try! set_Value(value: v!);
        }
    }
} // ResolveNameEventArgs


// type: System.ComponentModel.Design.Serialization.ResolveNameEventHandler
    /**
    Represents the method that handles the  event of a serialization manager.

    */
public final class ResolveNameEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_ResolveNameEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.ComponentModel.Design.Serialization.ResolveNameEventArgs)
// docid: M:System.ComponentModel.Design.Serialization.ResolveNameEventHandler.Invoke(System.Object,System.ComponentModel.Design.Serialization.ResolveNameEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ResolveNameEventHandler_void__Invoke_0__2__Object_ResolveNameEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.ComponentModel.Design.Serialization.ResolveNameEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.ComponentModel.Design.Serialization.ResolveNameEventHandler.BeginInvoke(System.Object,System.ComponentModel.Design.Serialization.ResolveNameEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_ResolveNameEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ResolveNameEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.ComponentModel.Design.Serialization.ResolveNameEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ResolveNameEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_ResolveNameEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.ComponentModel.Design.Serialization.ResolveNameEventArgs)
// docid: M:System.ComponentModel.Design.Serialization.ResolveNameEventHandler.Invoke(System.Object,System.ComponentModel.Design.Serialization.ResolveNameEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.ComponentModel.Design.Serialization.ResolveNameEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_ResolveNameEventHandler_void__Invoke_0__2__Object_ResolveNameEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ResolveNameEventHandler


// type: System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute
    /**
    Indicates the base serializer to use for a root designer object. This class cannot be inherited.

    */
public final class RootDesignerSerializerAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_RootDesignerSerializerAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String, bool)
// docid: M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified attributes.

    - Parameter serializerTypeName: The fully qualified name of the data type of the serializer.
    - Parameter baseSerializerTypeName: The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.
    - Parameter reloadable: 
         if this serializer supports dynamic reloading of the document; otherwise, .
    */
    public init(serializerTypeName : Optional<dotnet.System.String>, baseSerializerTypeName : Optional<dotnet.System.String>, reloadable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_RootDesignerSerializerAttribute_ctor_0__3__String_String_bool(&__thrown, serializerTypeName?.get_handle() ?? nil, baseSerializerTypeName?.get_handle() ?? nil, Swift.Int32(reloadable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Type, bool)
// docid: M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified attributes.

    - Parameter serializerTypeName: The fully qualified name of the data type of the serializer.
    - Parameter baseSerializerType: The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.
    - Parameter reloadable: 
         if this serializer supports dynamic reloading of the document; otherwise, .
    */
    public init(serializerTypeName : dotnet.System.String, baseSerializerType : dotnet.System.Type_, reloadable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_RootDesignerSerializerAttribute_ctor_0__3__String_Type_bool(&__thrown, serializerTypeName.get_handle(), baseSerializerType.get_handle(), Swift.Int32(reloadable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Type, System.Type, bool)
// docid: M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)
    /**
    Initializes a new instance of the  class using the specified attributes.

    - Parameter serializerType: The data type of the serializer.
    - Parameter baseSerializerType: The base type of the serializer. A class can include multiple serializers as they all have different base types.
    - Parameter reloadable: 
         if this serializer supports dynamic reloading of the document; otherwise, .
    */
    public init(serializerType : dotnet.System.Type_, baseSerializerType : dotnet.System.Type_, reloadable : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_ComponentModel_Design_Serialization_RootDesignerSerializerAttribute_ctor_0__3__Type_Type_bool(&__thrown, serializerType.get_handle(), baseSerializerType.get_handle(), Swift.Int32(reloadable ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Reloadable()
// docid: M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_Reloadable
    public func get_Reloadable() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_RootDesignerSerializerAttribute_bool__get_Reloadable_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_SerializerBaseTypeName()
// docid: M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_SerializerBaseTypeName
    public func get_SerializerBaseTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_RootDesignerSerializerAttribute_String__get_SerializerBaseTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.String get_SerializerTypeName()
// docid: M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_SerializerTypeName
    public func get_SerializerTypeName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_RootDesignerSerializerAttribute_String__get_SerializerTypeName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Object get_TypeId()
// docid: M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_TypeId
    public override func get_TypeId() throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_RootDesignerSerializerAttribute_Object__get_TypeId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    /**
    Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.

    */
    public var Reloadable : Bool {
        get {
            return try! get_Reloadable();
        }
    }
    /**
    Gets the fully qualified type name of the base type of the serializer.

    */
    public var SerializerBaseTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_SerializerBaseTypeName();
        }
    }
    /**
    Gets the fully qualified type name of the serializer.

    */
    public var SerializerTypeName : Optional<dotnet.System.String> {
        get {
            return try! get_SerializerTypeName();
        }
    }
    /**
    Gets a unique ID for this attribute type.

    */
    public override var TypeId : dotnet.System.Object {
        get {
            return try! get_TypeId();
        }
    }
} // RootDesignerSerializerAttribute


// type: System.ComponentModel.Design.Serialization.SerializationStore
    /**
    Provides the base class for storing serialization data for the .

    */
open class SerializationStore
    :
    dotnet.System.Object,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_ComponentModel_Design_Serialization_SerializationStore_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:System.ComponentModel.Design.Serialization.SerializationStore.Close
    /**
    Closes the serialization store.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_SerializationStore_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Save(System.IO.Stream)
// docid: M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)
    /**
    Saves the store to the given stream.

    - Parameter stream: The stream to which the store will be serialized.
    */
    open func Save(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_ComponentModel_Design_Serialization_SerializationStore_void__Save_0__1__Stream(&__thrown, self.get_handle(), stream.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.ICollection get_Errors()
// docid: M:System.ComponentModel.Design.Serialization.SerializationStore.get_Errors
    open func get_Errors() throws -> dotnet.System.Collections.ICollection {
        var __thrown : NullableHandle = nil;
        let __return = System_ComponentModel_Design_Serialization_SerializationStore_ICollection__get_Errors_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ICollection(hndl : __return);
        }
    }
    /**
    Gets a collection of errors that occurred during serialization or deserialization.

    */
    open var Errors : dotnet.System.Collections.ICollection {
        get {
            return try! get_Errors();
        }
    }
} // SerializationStore


}



// System.Drawing
extension System.Drawing {
// type: System.Drawing.ColorConverter
    /**
    Converts colors from one data type to another. Access this class through the .

    */
open class ColorConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Drawing_ColorConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Drawing.ColorConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_ColorConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Determines if this converter can convert an object in the given source type to the native type of the converter.

    - Parameter context: An  that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.
    - Parameter sourceType: The type from which you want to convert.
    - Returns: 
         if this object can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  that provides a format context.
    - Parameter destinationType: A  that represents the type to which you want to convert.
    - Returns: 
         if this converter can perform the operation; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to the converter's native type.

    - Parameter context: A  that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.
    - Parameter culture: A  that specifies the culture to represent the color.
    - Parameter value: The object to convert.
    - Returns: An  representing the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the specified object to another type.

    - Parameter context: A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is . Also, properties on the context object may return .
    - Parameter culture: A  that specifies the culture to represent the color.
    - Parameter value: The object to convert.
    - Parameter destinationType: The type to convert the object to.
    - Returns: An  representing the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
    /**
    Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return  if the data type does not support a standard set of values.

    - Parameter context: A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is . Also, properties on the context object may return .
    - Returns: A collection containing  or a standard set of valid values. The default implementation always returns .

    */
    open override func GetStandardValues(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorConverter_TypeConverter_StandardValuesCollection__GetStandardValues_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.TypeConverter_StandardValuesCollection(hndl : __return);
        }
    }
    // bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Determines if this object supports a standard set of values that can be chosen from a list.

    - Parameter context: A  through which additional context can be provided.
    - Returns: 
         if  must be called to find a common set of values the object supports; otherwise, .

    */
    open override func GetStandardValuesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_ColorConverter_bool__GetStandardValuesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // ColorConverter


// type: System.Drawing.PointConverter
    /**
    Converts a  object from one data type to another.

    */
open class PointConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Drawing_PointConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Drawing.PointConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_PointConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Determines if this converter can convert an object in the given source type to the native type of the converter.

    - Parameter context: A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter sourceType: The type you want to convert from.
    - Returns: 
         if this object can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  object that provides a format context.
    - Parameter destinationType: A  object that represents the type you want to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the specified object to a  object.

    - Parameter context: A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter culture: An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
    - Parameter value: The object to convert.
    - Returns: The converted object.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the specified object to the specified type.

    - Parameter context: A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter culture: An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
    - Parameter value: The object to convert.
    - Parameter destinationType: The type to convert the object to.
    - Returns: The converted object.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
// docid: M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
    /**
    Creates an instance of this type given a set of property values for the object.

    - Parameter context: A type descriptor through which additional context can be provided.
    - Parameter propertyValues: A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from .
    - Returns: The newly created object, or  if the object could not be created. The default implementation returns .

    */
    open override func CreateInstance(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, propertyValues : dotnet.System.Collections.IDictionary) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointConverter_Object__CreateInstance_0__2__ITypeDescriptorContext_IDictionary(&__thrown, self.get_handle(), context?.get_handle() ?? nil, propertyValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Determines if changing a value on this object should require a call to  to create a new value.

    - Parameter context: A  through which additional context can be provided.
    - Returns: 
         if the  method should be called when a change is made to one or more properties of this object; otherwise, .

    */
    open override func GetCreateInstanceSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointConverter_bool__GetCreateInstanceSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Retrieves the set of properties for this type. By default, a type does not return any properties.

    - Parameter context: A type descriptor through which additional context can be provided.
    - Parameter value: The value of the object to get the properties for.
    - Parameter attributes: An array of  objects that describe the properties.
    - Returns: The set of properties that are exposed for this data type. If no properties are exposed, this method might return . The default implementation always returns .

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil, (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Determines if this object supports properties. By default, this is .

    - Parameter context: A  through which additional context can be provided.
    - Returns: 
         if  should be called to find the properties of this object; otherwise, .

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_PointConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // PointConverter


// type: System.Drawing.RectangleConverter
    /**
    Converts rectangles from one data type to another. Access this class through the .

    */
open class RectangleConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Drawing_RectangleConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Drawing.RectangleConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_RectangleConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Determines if this converter can convert an object in the given source type to the native type of the converter.

    - Parameter context: A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter sourceType: The type you want to convert from.
    - Returns: This method returns  if this object can perform the conversion; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: An  object that provides a format context. This can be , so you should always check. Also, properties on the context object can also return .
    - Parameter destinationType: A  object that represents the type you want to convert to.
    - Returns: This method returns  if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to a  object.

    - Parameter context: A  that can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter culture: An  that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
    - Parameter value: The object to convert.
    - Returns: The converted object.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the specified object to the specified type.

    - Parameter context: A  that can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter culture: An  that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
    - Parameter value: The object to convert.
    - Parameter destinationType: The type to convert the object to.
    - Returns: The converted object.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
// docid: M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
    /**
    Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.

    - Parameter context: A  through which additional context can be provided.
    - Parameter propertyValues: A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the  method.
    - Returns: The newly created object, or  if the object could not be created. The default implementation returns .

    */
    open override func CreateInstance(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, propertyValues : dotnet.System.Collections.IDictionary) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleConverter_Object__CreateInstance_0__2__ITypeDescriptorContext_IDictionary(&__thrown, self.get_handle(), context?.get_handle() ?? nil, propertyValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Determines if changing a value on this object should require a call to  to create a new value.

    - Parameter context: A type descriptor through which additional context can be provided.
    - Returns: This method returns  if  should be called when a change is made to one or more properties of this object; otherwise, .

    */
    open override func GetCreateInstanceSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleConverter_bool__GetCreateInstanceSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Retrieves the set of properties for this type. By default, a type does not return any properties.

    - Parameter context: A  through which additional context can be provided.
    - Parameter value: The value of the object to get the properties for.
    - Parameter attributes: An array of  objects that describe the properties.
    - Returns: The set of properties that should be exposed for this data type. If no properties should be exposed, this may return . The default implementation always returns .

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : Optional<dotnet.System.Object>, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value?.get_handle() ?? nil, (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Determines if this object supports properties. By default, this is .

    - Parameter context: A  through which additional context can be provided.
    - Returns: This method returns  if  should be called to find the properties of this object; otherwise, .

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_RectangleConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // RectangleConverter


// type: System.Drawing.SizeConverter
    /**
    The  class is used to convert from one data type to another. Access this class through the  object.

    */
open class SizeConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Drawing_SizeConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Drawing.SizeConverter.#ctor
    /**
    Initializes a new  object.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_SizeConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Determines whether this converter can convert an object in the specified source type to the native type of the converter.

    - Parameter context: A  that can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter sourceType: The type you want to convert from.
    - Returns: This method returns  if this object can perform the conversion.

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Gets a value indicating whether this converter can convert an object to the given destination type using the context.

    - Parameter context: A  that can be used to get additional information about the environment this converter is being called from. This can be , so always check. Also, properties on the context object can return .
    - Parameter destinationType: A  that represents the type you want to convert to.
    - Returns: This method returns  if this converter can perform the conversion; otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the specified object to the converter's native type.

    - Parameter context: A  that can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter culture: An  object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
    - Parameter value: The object to convert.
    - Returns: The converted object.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the specified object to the specified type.

    - Parameter context: A  that can be used to get additional information about the environment this converter is being called from. This may be , so you should always check. Also, properties on the context object may also return .
    - Parameter culture: An  object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.
    - Parameter value: The object to convert.
    - Parameter destinationType: The type to convert the object to.
    - Returns: The converted object.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
// docid: M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
    /**
    Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.

    - Parameter context: A  through which additional context can be provided.
    - Parameter propertyValues: A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the  method.
    - Returns: The newly created object, or  if the object could not be created. The default implementation returns .

    */
    open override func CreateInstance(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, propertyValues : dotnet.System.Collections.IDictionary) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeConverter_Object__CreateInstance_0__2__ITypeDescriptorContext_IDictionary(&__thrown, self.get_handle(), context?.get_handle() ?? nil, propertyValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Determines whether changing a value on this object should require a call to the  method to create a new value.

    - Parameter context: A  through which additional context can be provided.
    - Returns: 
         if the  object should be called when a change is made to one or more properties of this object.

    */
    open override func GetCreateInstanceSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeConverter_bool__GetCreateInstanceSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Retrieves the set of properties for this type. By default, a type does not have any properties to return.

    - Parameter context: A  through which additional context can be provided.
    - Parameter value: The value of the object to get the properties for.
    - Parameter attributes: An array of  objects that describe the properties.
    - Returns: The set of properties that should be exposed for this data type. If no properties should be exposed, this may return . The default implementation always returns .

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Determines whether this object supports properties. By default, this is .

    - Parameter context: A  through which additional context can be provided.
    - Returns: 
         if the  method should be called to find the properties of this object.

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // SizeConverter


// type: System.Drawing.SizeFConverter
    /**
    Converts  objects from one type to another.

    */
open class SizeFConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Drawing_SizeFConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Drawing.SizeFConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Drawing_SizeFConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns a value indicating whether the converter can convert from the type specified to the  type, using the specified context.

    - Parameter context: An  through which additional context can be supplied.
    - Parameter sourceType: A  the represents the type you wish to convert from.
    - Returns: 
         to indicate the conversion can be performed; otherwise, .

    */
    open override func CanConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, sourceType : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeFConverter_bool__CanConvertFrom_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, sourceType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns a value indicating whether the  can convert a  to the specified type.

    - Parameter context: An  through which additional context can be supplied.
    - Parameter destinationType: A  that represents the type you want to convert from.
    - Returns: 
         if this converter can perform the conversion otherwise, .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeFConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
// docid: M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
    /**
    Converts the given object to the type of this converter, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: The  to use as the current culture.
    - Parameter value: The  to convert.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertFrom(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : dotnet.System.Object) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeFConverter_Object__ConvertFrom_0__3__ITypeDescriptorContext_CultureInfo_Object(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Converts the given value object to the specified type, using the specified context and culture information.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A . If null is passed, the current culture is assumed.
    - Parameter value: The  to convert.
    - Parameter destinationType: The  to convert the value parameter to.
    - Returns: An  that represents the converted value.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeFConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
// docid: M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
    /**
    Creates an instance of a  with the specified property values using the specified context.

    - Parameter context: An  through which additional context can be supplied.
    - Parameter propertyValues: An  containing property names and values.
    - Returns: An  representing the new , or  if the object cannot be created.

    */
    open override func CreateInstance(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, propertyValues : dotnet.System.Collections.IDictionary) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeFConverter_Object__CreateInstance_0__2__ITypeDescriptorContext_IDictionary(&__thrown, self.get_handle(), context?.get_handle() ?? nil, propertyValues.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns a value indicating whether changing a value on this object requires a call to the  method to create a new value.

    - Parameter context: An  that provides a format context. This may be .
    - Returns: Always returns .

    */
    open override func GetCreateInstanceSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeFConverter_bool__GetCreateInstanceSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
// docid: M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
    /**
    Retrieves a set of properties for the  type using the specified context and attributes.

    - Parameter context: An  through which additional context can be supplied.
    - Parameter value: The  to return properties for.
    - Parameter attributes: An array of  objects that describe the properties.
    - Returns: A  containing the properties.

    */
    open override func GetProperties(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, value : dotnet.System.Object, attributes : Optional<dotnet.System_Arr<dotnet.System.Attribute>>) throws -> dotnet.System.ComponentModel.PropertyDescriptorCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeFConverter_PropertyDescriptorCollection__GetProperties_0__3__ITypeDescriptorContext_Object_AttributeArray(&__thrown, self.get_handle(), context?.get_handle() ?? nil, value.get_handle(), (attributes?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.ComponentModel.PropertyDescriptorCollection(hndl : __return);
        }
    }
    // bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
// docid: M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
    /**
    Returns whether the  type supports properties.

    - Parameter context: An  through which additional context can be supplied.
    - Returns: Always returns .

    */
    open override func GetPropertiesSupported(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Drawing_SizeFConverter_bool__GetPropertiesSupported_0__1__ITypeDescriptorContext(&__thrown, self.get_handle(), context?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // SizeFConverter


}

// System.Security
// System.Security.Authentication
// System.Security.Authentication.ExtendedProtection
extension System.Security.Authentication.ExtendedProtection {
// type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter
    /**
    The  class represents the type converter for extended protection policy used by the server to validate incoming client connections.

    */
open class ExtendedProtectionPolicyTypeConverter
    :
    dotnet.System.ComponentModel.TypeConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicyTypeConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicyTypeConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
// docid: M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
    /**
    Returns whether this converter can convert the object to the specified type.

    - Parameter context: The object to convert.
    - Parameter destinationType: A  that represents the type you want to convert to.
    - Returns: 
         if this converter can perform the conversion; otherwise .

    */
    open override func CanConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, destinationType : Optional<dotnet.System.Type_>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicyTypeConverter_bool__CanConvertTo_0__2__ITypeDescriptorContext_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, destinationType?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Object ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
// docid: M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
    /**
    Convert the object to the specified type.

    - Parameter context: An  that provides a format context.
    - Parameter culture: A  object. If  is passed, the current culture is assumed.
    - Parameter value: The  to convert. This should be a  object.
    - Parameter destinationType: The  to convert the value parameter to.
    - Returns: An  that represents the converted  parameter.

    */
    open override func ConvertTo(context : Optional<dotnet.System.ComponentModel.ITypeDescriptorContext>, culture : Optional<dotnet.System.Globalization.CultureInfo>, value : Optional<dotnet.System.Object>, destinationType : dotnet.System.Type_) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicyTypeConverter_Object__ConvertTo_0__4__ITypeDescriptorContext_CultureInfo_Object_Type(&__thrown, self.get_handle(), context?.get_handle() ?? nil, culture?.get_handle() ?? nil, value?.get_handle() ?? nil, destinationType.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // ExtendedProtectionPolicyTypeConverter


}



// System.Timers
extension System.Timers {
// type: System.Timers.ElapsedEventArgs
    /**
    Provides data for the  event.

    */
open class ElapsedEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Timers_ElapsedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.DateTime get_SignalTime()
// docid: M:System.Timers.ElapsedEventArgs.get_SignalTime
    open func get_SignalTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Timers_ElapsedEventArgs_DateTime__get_SignalTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    /**
    Gets the date/time when the  event was raised.

    */
    open var SignalTime : dotnet.System.DateTime {
        get {
            return try! get_SignalTime();
        }
    }
} // ElapsedEventArgs


// type: System.Timers.ElapsedEventHandler
    /**
    Represents the method that will handle the  event of a .

    */
public final class ElapsedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Timers_ElapsedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.Timers.ElapsedEventArgs)
// docid: M:System.Timers.ElapsedEventHandler.Invoke(System.Object,System.Timers.ElapsedEventArgs)
    public func Invoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Timers.ElapsedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_ElapsedEventHandler_void__Invoke_0__2__Object_ElapsedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.Timers.ElapsedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.Timers.ElapsedEventHandler.BeginInvoke(System.Object,System.Timers.ElapsedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : Optional<dotnet.System.Object>, e : dotnet.System.Timers.ElapsedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_Timers_ElapsedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ElapsedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.Timers.ElapsedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_ElapsedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (Optional<dotnet.System.Object>, dotnet.System.Timers.ElapsedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback((sender != nil) ? (dotnet.System.Object(hndl: sender!)) : nil, dotnet.System.Timers.ElapsedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NullableHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NullableHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_Timers_ElapsedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.Timers.ElapsedEventArgs)
// docid: M:System.Timers.ElapsedEventHandler.Invoke(System.Object,System.Timers.ElapsedEventArgs)
    public func callAsFunction(sender : Optional<dotnet.System.Object>, e : dotnet.System.Timers.ElapsedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_ElapsedEventHandler_void__Invoke_0__2__Object_ElapsedEventArgs(&__thrown, self.get_handle(), sender?.get_handle() ?? nil, e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ElapsedEventHandler


// type: System.Timers.Timer
    /**
    Generates an event after a set interval, with an option to generate recurring events.

    */
open class Timer
    :
    dotnet.System.ComponentModel.Component,
    System_ComponentModel_ISupportInitialize
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Timers_Timer_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Timers.Timer.#ctor
    /**
    Initializes a new instance of the  class, and sets all the properties to their initial values.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Timers_Timer_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Double)
// docid: M:System.Timers.Timer.#ctor(System.Double)
    /**
    Initializes a new instance of the  class, and sets the  property to the specified number of milliseconds.

    - Parameter interval: The time, in milliseconds, between events. The value must be greater than zero and less than or equal to .
    */
    public init(interval : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Timers_Timer_ctor_0__1__f64(&__thrown, interval);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void BeginInit()
// docid: M:System.Timers.Timer.BeginInit
    /**
    Begins the run-time initialization of a  that is used on a form or by another component.

    */
    open /* method final */ func BeginInit() throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__BeginInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close()
// docid: M:System.Timers.Timer.Close
    /**
    Releases the resources used by the .

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndInit()
// docid: M:System.Timers.Timer.EndInit
    /**
    Ends the run-time initialization of a  that is used on a form or by another component.

    */
    open /* method final */ func EndInit() throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__EndInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Start()
// docid: M:System.Timers.Timer.Start
    /**
    Starts raising the  event by setting  to .

    */
    open func Start() throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__Start_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Stop()
// docid: M:System.Timers.Timer.Stop
    /**
    Stops raising the  event by setting  to .

    */
    open func Stop() throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__Stop_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AutoReset()
// docid: M:System.Timers.Timer.get_AutoReset
    open func get_AutoReset() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Timers_Timer_bool__get_AutoReset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AutoReset(bool)
// docid: M:System.Timers.Timer.set_AutoReset(System.Boolean)
    open func set_AutoReset(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__set_AutoReset_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Enabled()
// docid: M:System.Timers.Timer.get_Enabled
    open func get_Enabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Timers_Timer_bool__get_Enabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Enabled(bool)
// docid: M:System.Timers.Timer.set_Enabled(System.Boolean)
    open func set_Enabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__set_Enabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Double get_Interval()
// docid: M:System.Timers.Timer.get_Interval
    open func get_Interval() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Timers_Timer_f64__get_Interval_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Interval(System.Double)
// docid: M:System.Timers.Timer.set_Interval(System.Double)
    open func set_Interval(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__set_Interval_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ISite get_Site()
// docid: M:System.Timers.Timer.get_Site
    open override func get_Site() throws -> Optional<dotnet.System.ComponentModel.ISite> {
        var __thrown : NullableHandle = nil;
        let __return = System_Timers_Timer_ISite__get_Site_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISite(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Site(System.ComponentModel.ISite)
// docid: M:System.Timers.Timer.set_Site(System.ComponentModel.ISite)
    open override func set_Site(value : Optional<dotnet.System.ComponentModel.ISite>) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__set_Site_0__1__ISite(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject()
// docid: M:System.Timers.Timer.get_SynchronizingObject
    open func get_SynchronizingObject() throws -> Optional<dotnet.System.ComponentModel.ISynchronizeInvoke> {
        var __thrown : NullableHandle = nil;
        let __return = System_Timers_Timer_ISynchronizeInvoke__get_SynchronizingObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISynchronizeInvoke(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)
// docid: M:System.Timers.Timer.set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)
    open func set_SynchronizingObject(value : Optional<dotnet.System.ComponentModel.ISynchronizeInvoke>) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__set_SynchronizingObject_0__1__ISynchronizeInvoke(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_Elapsed(System.Timers.ElapsedEventHandler)
// docid: M:System.Timers.Timer.add_Elapsed(System.Timers.ElapsedEventHandler)
    open func add_Elapsed(value : dotnet.System.Timers.ElapsedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__add_Elapsed_0__1__ElapsedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Elapsed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Timers.ElapsedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Timers.ElapsedEventHandler(value);
        return try add_Elapsed(value: del_value);
    }
    // [IsSpecialName] void remove_Elapsed(System.Timers.ElapsedEventHandler)
// docid: M:System.Timers.Timer.remove_Elapsed(System.Timers.ElapsedEventHandler)
    open func remove_Elapsed(value : dotnet.System.Timers.ElapsedEventHandler) throws {
        var __thrown : NullableHandle = nil;
        System_Timers_Timer_void__remove_Elapsed_0__1__ElapsedEventHandler(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Elapsed(value : @escaping (Optional<dotnet.System.Object>, dotnet.System.Timers.ElapsedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.Timers.ElapsedEventHandler(value);
        return try remove_Elapsed(value: del_value);
    }
    /**
    Gets or sets a Boolean indicating whether the  should raise the  event only once () or repeatedly ().

    */
    open var AutoReset : Bool {
        get {
            return try! get_AutoReset();
        }
        set(v) {
            return try! set_AutoReset(value: v);
        }
    }
    /**
    Gets or sets a value indicating whether the  should raise the  event.

    */
    open var Enabled : Bool {
        get {
            return try! get_Enabled();
        }
        set(v) {
            return try! set_Enabled(value: v);
        }
    }
    /**
    Gets or sets the interval, expressed in milliseconds, at which to raise the  event.

    */
    open var Interval : Swift.Double {
        get {
            return try! get_Interval();
        }
        set(v) {
            return try! set_Interval(value: v);
        }
    }
    /**
    Gets or sets the site that binds the  to its container in design mode.

    */
    open override var Site : Optional<dotnet.System.ComponentModel.ISite> {
        get {
            return try! get_Site();
        }
        set(v) {
            return try! set_Site(value: v!);
        }
    }
    /**
    Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.

    */
    open var SynchronizingObject : Optional<dotnet.System.ComponentModel.ISynchronizeInvoke> {
        get {
            return try! get_SynchronizingObject();
        }
        set(v) {
            return try! set_SynchronizingObject(value: v!);
        }
    }
} // Timer


// type: System.Timers.TimersDescriptionAttribute
    /**
    Sets the description that visual designers can display when referencing an event, extender, or property.

    */
open class TimersDescriptionAttribute
    :
    dotnet.System.ComponentModel.DescriptionAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Timers_TimersDescriptionAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter description: The description to use.
    */
    public override init(description : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Timers_TimersDescriptionAttribute_ctor_0__1__String(&__thrown, description.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.Timers.TimersDescriptionAttribute.get_Description
    open override func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Timers_TimersDescriptionAttribute_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the description that visual designers can display when referencing an event, extender, or property.

    */
    open override var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
    }
} // TimersDescriptionAttribute


}


public protocol System_ComponentModel_Design_IComponentChangeService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IComponentDiscoveryService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IComponentInitializer
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IDesigner
    :
    System_IDisposable
{
}

public protocol System_ComponentModel_Design_IDesignerEventService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IDesignerFilter
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IDesignerHost
    :
    System_ComponentModel_Design_IServiceContainer
{
}

public protocol System_ComponentModel_Design_IDesignerHostTransactionState
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IDesignerOptionService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IDictionaryService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IEventBindingService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IExtenderListService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IExtenderProviderService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IHelpService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IInheritanceService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IMenuCommandService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IReferenceService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IResourceService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IRootDesigner
    :
    System_ComponentModel_Design_IDesigner
{
}

public protocol System_ComponentModel_Design_ISelectionService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_IServiceContainer
    :
    System_IServiceProvider
{
}

public protocol System_ComponentModel_Design_ITreeDesigner
    :
    System_ComponentModel_Design_IDesigner
{
}

public protocol System_ComponentModel_Design_ITypeDescriptorFilterService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_ITypeDiscoveryService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_ITypeResolutionService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_Serialization_IDesignerLoaderHost
    :
    System_ComponentModel_Design_IDesignerHost
{
}

public protocol System_ComponentModel_Design_Serialization_IDesignerLoaderHost2
    :
    System_ComponentModel_Design_Serialization_IDesignerLoaderHost
{
}

public protocol System_ComponentModel_Design_Serialization_IDesignerLoaderService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_Serialization_IDesignerSerializationManager
    :
    System_IServiceProvider
{
}

public protocol System_ComponentModel_Design_Serialization_IDesignerSerializationProvider
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_Serialization_IDesignerSerializationService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_Design_Serialization_INameCreationService
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_IBindingList
    :
    System_Collections_IList
{
}

public protocol System_ComponentModel_IBindingListView
    :
    System_ComponentModel_IBindingList
{
}

public protocol System_ComponentModel_ICancelAddNew
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_IComNativeDescriptorHandler
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_ICustomTypeDescriptor
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_IDataErrorInfo
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_IExtenderProvider
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_IIntellisenseBuilder
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_IListSource
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_INestedContainer
    :
    System_ComponentModel_IContainer
{
}

public protocol System_ComponentModel_INestedSite
    :
    System_ComponentModel_ISite
{
}

public protocol System_ComponentModel_IRaiseItemChangedEvents
    :
    SGBridgeGetHandle
{
}

public protocol System_ComponentModel_ISupportInitializeNotification
    :
    System_ComponentModel_ISupportInitialize
{
}

public protocol System_ComponentModel_ITypeDescriptorContext
    :
    System_IServiceProvider
{
}

public protocol System_ComponentModel_ITypedList
    :
    SGBridgeGetHandle
{
}

