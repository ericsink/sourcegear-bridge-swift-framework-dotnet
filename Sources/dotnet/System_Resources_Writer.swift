// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Resources
extension System.Resources {
// type: System.Resources.IResourceWriter
    /**
    Provides the base functionality for writing resources to an output file or stream.

    */
open class IResourceWriter
    :
    SGBridgeGenericValue,
    System_Resources_IResourceWriter,
    System_IDisposable
{
    open class func get_type_handle() -> TypeHandle {
        return System_Resources_IResourceWriter_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void AddResource(System.String, System.Byte[])
// docid: M:System.Resources.IResourceWriter.AddResource(System.String,System.Byte[])
    /**
    Adds an 8-bit unsigned integer array as a named resource to the list of resources to be written.

    - Parameter name: Name of a resource.
    - Parameter value: Value of a resource as an 8-bit unsigned integer array.
    */
    open func AddResource(name : dotnet.System.String, value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_IResourceWriter_void__AddResource_0__2__String_u8Array(&__thrown, self.get_handle(), name.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddResource(System.String, System.Object)
// docid: M:System.Resources.IResourceWriter.AddResource(System.String,System.Object)
    /**
    Adds a named resource of type  to the list of resources to be written.

    - Parameter name: The name of the resource.
    - Parameter value: The value of the resource.
    */
    open func AddResource(name : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_IResourceWriter_void__AddResource_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddResource(System.String, System.String)
// docid: M:System.Resources.IResourceWriter.AddResource(System.String,System.String)
    /**
    Adds a named resource of type  to the list of resources to be written.

    - Parameter name: The name of the resource.
    - Parameter value: The value of the resource.
    */
    open func AddResource(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_IResourceWriter_void__AddResource_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close()
// docid: M:System.Resources.IResourceWriter.Close
    /**
    Closes the underlying resource file or stream, ensuring all the data has been written to the file.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Resources_IResourceWriter_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Generate()
// docid: M:System.Resources.IResourceWriter.Generate
    /**
    Writes all the resources added by the  method to the output file or stream.

    */
    open func Generate() throws {
        var __thrown : NullableHandle = nil;
        System_Resources_IResourceWriter_void__Generate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IResourceWriter


// type: System.Resources.ResourceWriter
    /**
    Writes resources in the system-default format to an output file or an output stream. This class cannot be inherited.

    */
public final class ResourceWriter
    :
    dotnet.System.Object,
    System_IDisposable,
    System_Resources_IResourceWriter
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Resources_ResourceWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.Stream)
// docid: M:System.Resources.ResourceWriter.#ctor(System.IO.Stream)
    /**
    Initializes a new instance of the  class that writes the resources to the provided stream.

    - Parameter stream: The output stream.
    */
    public init(stream : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Resources_ResourceWriter_ctor_0__1__Stream(&__thrown, stream.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Resources.ResourceWriter.#ctor(System.String)
    /**
    Initializes a new instance of the  class that writes the resources to the specified file.

    - Parameter fileName: The output file name.
    */
    public init(fileName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Resources_ResourceWriter_ctor_0__1__String(&__thrown, fileName.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void AddResource(System.String, System.Byte[])
// docid: M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])
    /**
    Adds a named resource specified as a byte array to the list of resources to be written.

    - Parameter name: The name of the resource.
    - Parameter value: Value of the resource as an 8-bit unsigned integer array.
    */
    public func AddResource(name : dotnet.System.String, value : Optional<dotnet.System_Arr<Swift.UInt8>>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__AddResource_0__2__String_u8Array(&__thrown, self.get_handle(), name.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddResource(System.String, System.IO.Stream)
// docid: M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream)
    /**
    Adds a named resource specified as a stream to the list of resources to be written.

    - Parameter name: The name of the resource to add.
    - Parameter value: The value of the resource to add. The resource must support the  property.
    */
    public func AddResource(name : dotnet.System.String, value : Optional<dotnet.System.IO.Stream>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__AddResource_0__2__String_Stream(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddResource(System.String, System.IO.Stream, bool)
// docid: M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream,System.Boolean)
    /**
    Adds a named resource specified as a stream to the list of resources to be written, and specifies whether the stream should be closed after the  method is called.

    - Parameter name: The name of the resource to add.
    - Parameter value: The value of the resource to add. The resource must support the  property.
    - Parameter closeAfterWrite: 
         to close the stream after the  method is called; otherwise, .
    */
    public func AddResource(name : dotnet.System.String, value : Optional<dotnet.System.IO.Stream>, closeAfterWrite : Bool = false) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__AddResource_0__3__String_Stream_bool(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil, Swift.Int32(closeAfterWrite ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddResource(System.String, System.Object)
// docid: M:System.Resources.ResourceWriter.AddResource(System.String,System.Object)
    /**
    Adds a named resource specified as an object to the list of resources to be written.

    - Parameter name: The name of the resource.
    - Parameter value: The value of the resource.
    */
    public func AddResource(name : dotnet.System.String, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__AddResource_0__2__String_Object(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddResource(System.String, System.String)
// docid: M:System.Resources.ResourceWriter.AddResource(System.String,System.String)
    /**
    Adds a string resource to the list of resources to be written.

    - Parameter name: The name of the resource.
    - Parameter value: The value of the resource.
    */
    public func AddResource(name : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__AddResource_0__2__String_String(&__thrown, self.get_handle(), name.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddResourceData(System.String, System.String, System.Byte[])
// docid: M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])
    /**
    Adds a unit of data as a resource to the list of resources to be written.

    - Parameter name: A name that identifies the resource that contains the added data.
    - Parameter typeName: The type name of the added data.
    - Parameter serializedData: A byte array that contains the binary representation of the added data.
    */
    public func AddResourceData(name : dotnet.System.String, typeName : dotnet.System.String, serializedData : dotnet.System_Arr<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__AddResourceData_0__3__String_String_u8Array(&__thrown, self.get_handle(), name.get_handle(), typeName.get_handle(), serializedData.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close()
// docid: M:System.Resources.ResourceWriter.Close
    /**
    Saves the resources to the output stream and then closes it.

    */
    public func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Resources.ResourceWriter.Dispose
    /**
    Allows users to close the resource file or stream, explicitly releasing resources.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Generate()
// docid: M:System.Resources.ResourceWriter.Generate
    /**
    Saves all resources to the output stream in the system default format.

    */
    public func Generate() throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__Generate_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<System.Type,System.String> get_TypeNameConverter()
// docid: M:System.Resources.ResourceWriter.get_TypeNameConverter
    public func get_TypeNameConverter() throws -> Optional<dotnet.System.Func_2<dotnet.System.Type_,dotnet.System.String>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Resources_ResourceWriter_System_Func_System_Type_string___get_TypeNameConverter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TypeNameConverter(System.Func<System.Type,System.String>)
// docid: M:System.Resources.ResourceWriter.set_TypeNameConverter(System.Func{System.Type,System.String})
    public func set_TypeNameConverter(value : Optional<dotnet.System.Func_2<dotnet.System.Type_,dotnet.System.String>>) throws {
        var __thrown : NullableHandle = nil;
        System_Resources_ResourceWriter_void__set_TypeNameConverter_0__1__System_Func_System_Type_string_(&__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_TypeNameConverter(value : @escaping (Optional<dotnet.System.Type_>) throws -> dotnet.System.String) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System.Type_,dotnet.System.String>(value);
        return try set_TypeNameConverter(value: del_value);
    }
    /**
    Gets or sets a delegate that enables resource assemblies to be written that target versions of the .NET Framework prior to the .NET Framework 4 by using qualified assembly names.

    */
    public var TypeNameConverter : Optional<dotnet.System.Func_2<dotnet.System.Type_,dotnet.System.String>> {
        get {
            return try! get_TypeNameConverter();
        }
        set(v) {
            return try! set_TypeNameConverter(value: v!);
        }
    }
} // ResourceWriter


}


public protocol System_Resources_IResourceWriter
    :
    System_IDisposable
{
}

