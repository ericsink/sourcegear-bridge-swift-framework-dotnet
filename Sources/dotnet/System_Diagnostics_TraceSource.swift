// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Diagnostics
extension System.Diagnostics {
// type: System.Diagnostics.BooleanSwitch
    /**
    Provides a simple on/off switch that controls debugging and tracing output.

    */
open class BooleanSwitch
    :
    dotnet.System.Diagnostics.Switch
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_BooleanSwitch_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified display name and description.

    - Parameter displayName: The name to display on a user interface.
    - Parameter description: The description of the switch.
    */
    public init(displayName : dotnet.System.String, description : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_BooleanSwitch_ctor_0__2__String_String(&__thrown, displayName.get_handle(), description?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class with the specified display name, description, and default switch value.

    - Parameter displayName: The name to display on the user interface.
    - Parameter description: The description of the switch.
    - Parameter defaultSwitchValue: The default value of the switch.
    */
    public init(displayName : dotnet.System.String, description : Optional<dotnet.System.String>, defaultSwitchValue : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_BooleanSwitch_ctor_0__3__String_String_String(&__thrown, displayName.get_handle(), description?.get_handle() ?? nil, defaultSwitchValue.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] bool get_Enabled()
// docid: M:System.Diagnostics.BooleanSwitch.get_Enabled
    open func get_Enabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_BooleanSwitch_bool__get_Enabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Enabled(bool)
// docid: M:System.Diagnostics.BooleanSwitch.set_Enabled(System.Boolean)
    open func set_Enabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_BooleanSwitch_void__set_Enabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value indicating whether the switch is enabled or disabled.

    */
    open var Enabled : Bool {
        get {
            return try! get_Enabled();
        }
        set(v) {
            return try! set_Enabled(value: v);
        }
    }
} // BooleanSwitch


// type: System.Diagnostics.CorrelationManager
    /**
    Correlates traces that are part of a logical transaction.

    */
open class CorrelationManager
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_CorrelationManager_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void StartLogicalOperation()
// docid: M:System.Diagnostics.CorrelationManager.StartLogicalOperation
    /**
    Starts a logical operation on a thread.

    */
    open func StartLogicalOperation() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_CorrelationManager_void__StartLogicalOperation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void StartLogicalOperation(System.Object)
// docid: M:System.Diagnostics.CorrelationManager.StartLogicalOperation(System.Object)
    /**
    Starts a logical operation with the specified identity on a thread.

    - Parameter operationId: An object identifying the operation.
    */
    open func StartLogicalOperation(operationId : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_CorrelationManager_void__StartLogicalOperation_0__1__Object(&__thrown, self.get_handle(), operationId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void StopLogicalOperation()
// docid: M:System.Diagnostics.CorrelationManager.StopLogicalOperation
    /**
    Stops the current logical operation.

    */
    open func StopLogicalOperation() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_CorrelationManager_void__StopLogicalOperation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Guid get_ActivityId()
// docid: M:System.Diagnostics.CorrelationManager.get_ActivityId
    open func get_ActivityId() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_CorrelationManager_Guid__get_ActivityId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ActivityId(System.Guid)
// docid: M:System.Diagnostics.CorrelationManager.set_ActivityId(System.Guid)
    open func set_ActivityId(value : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_CorrelationManager_void__set_ActivityId_0__1__Guid(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Stack get_LogicalOperationStack()
// docid: M:System.Diagnostics.CorrelationManager.get_LogicalOperationStack
    open func get_LogicalOperationStack() throws -> dotnet.System.Collections.Stack {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_CorrelationManager_Stack__get_LogicalOperationStack_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Stack(hndl : __return);
        }
    }
    /**
    Gets or sets the identity for a global activity.

    */
    open var ActivityId : dotnet.System.Guid {
        get {
            return try! get_ActivityId();
        }
        set(v) {
            return try! set_ActivityId(value: v);
        }
    }
    /**
    Gets the logical operation stack from the call context.

    */
    open var LogicalOperationStack : dotnet.System.Collections.Stack {
        get {
            return try! get_LogicalOperationStack();
        }
    }
} // CorrelationManager


// type: System.Diagnostics.DefaultTraceListener
    /**
    Provides the default output methods and behavior for tracing.

    */
open class DefaultTraceListener
    :
    dotnet.System.Diagnostics.TraceListener
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_DefaultTraceListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.DefaultTraceListener.#ctor
    /**
    Initializes a new instance of the  class with "Default" as its  property value.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_DefaultTraceListener_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Fail(System.String)
// docid: M:System.Diagnostics.DefaultTraceListener.Fail(System.String)
    /**
    Emits or displays a message and a stack trace for an assertion that always fails.

    - Parameter message: The message to emit or display.
    */
    open override func Fail(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DefaultTraceListener_void__Fail_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.String, System.String)
// docid: M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)
    /**
    Emits or displays detailed messages and a stack trace for an assertion that always fails.

    - Parameter message: The message to emit or display.
    - Parameter detailMessage: The detailed message to emit or display.
    */
    open override func Fail(message : Optional<dotnet.System.String>, detailMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DefaultTraceListener_void__Fail_0__2__String_String(&__thrown, self.get_handle(), message?.get_handle() ?? nil, detailMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String)
// docid: M:System.Diagnostics.DefaultTraceListener.Write(System.String)
    /**
    Writes the output to the  function and to the  method.

    - Parameter message: The message to write to  and .
    */
    open override func Write(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DefaultTraceListener_void__Write_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String)
// docid: M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)
    /**
    Writes the output to the  function and to the  method, followed by a carriage return and line feed (\r\n).

    - Parameter message: The message to write to  and .
    */
    open override func WriteLine(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DefaultTraceListener_void__WriteLine_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AssertUiEnabled()
// docid: M:System.Diagnostics.DefaultTraceListener.get_AssertUiEnabled
    open func get_AssertUiEnabled() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DefaultTraceListener_bool__get_AssertUiEnabled_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AssertUiEnabled(bool)
// docid: M:System.Diagnostics.DefaultTraceListener.set_AssertUiEnabled(System.Boolean)
    open func set_AssertUiEnabled(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DefaultTraceListener_void__set_AssertUiEnabled_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_LogFileName()
// docid: M:System.Diagnostics.DefaultTraceListener.get_LogFileName
    open func get_LogFileName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_DefaultTraceListener_String__get_LogFileName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_LogFileName(System.String)
// docid: M:System.Diagnostics.DefaultTraceListener.set_LogFileName(System.String)
    open func set_LogFileName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_DefaultTraceListener_void__set_LogFileName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets a value indicating whether the application is running in user-interface mode.

    */
    open var AssertUiEnabled : Bool {
        get {
            return try! get_AssertUiEnabled();
        }
        set(v) {
            return try! set_AssertUiEnabled(value: v);
        }
    }
    /**
    Gets or sets the name of a log file to write trace or debug messages to.

    */
    open var LogFileName : Optional<dotnet.System.String> {
        get {
            return try! get_LogFileName();
        }
        set(v) {
            return try! set_LogFileName(value: v!);
        }
    }
} // DefaultTraceListener


// type: System.Diagnostics.EventTypeFilter
    /**
    Indicates whether a listener should trace based on the event type.

    */
open class EventTypeFilter
    :
    dotnet.System.Diagnostics.TraceFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_EventTypeFilter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Diagnostics.SourceLevels)
// docid: M:System.Diagnostics.EventTypeFilter.#ctor(System.Diagnostics.SourceLevels)
    /**
    Initializes a new instance of the  class.

    - Parameter level: A bitwise combination of the  values that specifies the event type of the messages to trace.
    */
    public init(level : dotnet.System.Diagnostics.SourceLevels) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_EventTypeFilter_ctor_0__1__SourceLevels(&__thrown, level.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])
// docid: M:System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])
    /**
    Determines whether the trace listener should trace the event.

    - Parameter cache: A  that represents the information cache for the trace event.
    - Parameter source: The name of the source.
    - Parameter eventType: One of the  values.
    - Parameter id: A trace identifier number.
    - Parameter formatOrMessage: The format to use for writing an array of arguments, or a message to write.
    - Parameter args: An array of argument objects.
    - Parameter data1: A trace data object.
    - Parameter data: An array of trace data objects.
    - Returns: 
         if the trace should be produced; otherwise, .

    */
    open override func ShouldTrace(cache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, formatOrMessage : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, data1 : Optional<dotnet.System.Object>, data : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventTypeFilter_bool__ShouldTrace_0__8__TraceEventCache_String_TraceEventType_i32_String_ObjectArray_Object_ObjectArray(&__thrown, self.get_handle(), cache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, formatOrMessage?.get_handle() ?? nil, (args?.get_handle()), data1?.get_handle() ?? nil, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Diagnostics.SourceLevels get_EventType()
// docid: M:System.Diagnostics.EventTypeFilter.get_EventType
    open func get_EventType() throws -> dotnet.System.Diagnostics.SourceLevels {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_EventTypeFilter_SourceLevels__get_EventType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.SourceLevels(val: __return);
        }
    }
    // [IsSpecialName] void set_EventType(System.Diagnostics.SourceLevels)
// docid: M:System.Diagnostics.EventTypeFilter.set_EventType(System.Diagnostics.SourceLevels)
    open func set_EventType(value : dotnet.System.Diagnostics.SourceLevels) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_EventTypeFilter_void__set_EventType_0__1__SourceLevels(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the event type of the messages to trace.

    */
    open var EventType : dotnet.System.Diagnostics.SourceLevels {
        get {
            return try! get_EventType();
        }
        set(v) {
            return try! set_EventType(value: v);
        }
    }
} // EventTypeFilter


// type: System.Diagnostics.SourceFilter
    /**
    Indicates whether a listener should trace a message based on the source of a trace.

    */
open class SourceFilter
    :
    dotnet.System.Diagnostics.TraceFilter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_SourceFilter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.SourceFilter.#ctor(System.String)
    /**
    Initializes a new instance of the  class, specifying the name of the trace source.

    - Parameter source: The name of the trace source.
    */
    public init(source : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_SourceFilter_ctor_0__1__String(&__thrown, source.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])
// docid: M:System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])
    /**
    Determines whether the trace listener should trace the event.

    - Parameter cache: An object that represents the information cache for the trace event.
    - Parameter source: The name of the source.
    - Parameter eventType: One of the enumeration values that identifies the event type.
    - Parameter id: A trace identifier number.
    - Parameter formatOrMessage: The format to use for writing an array of arguments or a message to write.
    - Parameter args: An array of argument objects.
    - Parameter data1: A trace data object.
    - Parameter data: An array of trace data objects.
    - Returns: 
         if the trace should be produced; otherwise, .

    */
    open override func ShouldTrace(cache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, formatOrMessage : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, data1 : Optional<dotnet.System.Object>, data : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SourceFilter_bool__ShouldTrace_0__8__TraceEventCache_String_TraceEventType_i32_String_ObjectArray_Object_ObjectArray(&__thrown, self.get_handle(), cache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, formatOrMessage?.get_handle() ?? nil, (args?.get_handle()), data1?.get_handle() ?? nil, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Source()
// docid: M:System.Diagnostics.SourceFilter.get_Source
    open func get_Source() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SourceFilter_String__get_Source_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Source(System.String)
// docid: M:System.Diagnostics.SourceFilter.set_Source(System.String)
    open func set_Source(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_SourceFilter_void__set_Source_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the name of the trace source.

    */
    open var Source : dotnet.System.String {
        get {
            return try! get_Source();
        }
        set(v) {
            return try! set_Source(value: v);
        }
    }
} // SourceFilter


// type: System.Diagnostics.SourceLevels
    /**
    Specifies the levels of trace messages filtered by the source switch and event type filter.

    */
public struct SourceLevels : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_SourceLevels_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.SourceLevels All
    /**
    Allows all events through.

    */
    public static var All : dotnet.System.Diagnostics.SourceLevels {
        get {
        let __return = dotnet.System.Diagnostics.SourceLevels(val: System_Diagnostics_SourceLevels_get_All());
            return __return;
        }
    }
    // static field: System.Diagnostics.SourceLevels Off
    /**
    Does not allow any events through.

    */
    public static var Off : dotnet.System.Diagnostics.SourceLevels {
        get {
        let __return = dotnet.System.Diagnostics.SourceLevels(val: System_Diagnostics_SourceLevels_get_Off());
            return __return;
        }
    }
    // static field: System.Diagnostics.SourceLevels Critical
    /**
    Allows only  events through.

    */
    public static var Critical : dotnet.System.Diagnostics.SourceLevels {
        get {
        let __return = dotnet.System.Diagnostics.SourceLevels(val: System_Diagnostics_SourceLevels_get_Critical());
            return __return;
        }
    }
    // static field: System.Diagnostics.SourceLevels Error
    /**
    Allows  and  events through.

    */
    public static var Error : dotnet.System.Diagnostics.SourceLevels {
        get {
        let __return = dotnet.System.Diagnostics.SourceLevels(val: System_Diagnostics_SourceLevels_get_Error());
            return __return;
        }
    }
    // static field: System.Diagnostics.SourceLevels Warning
    /**
    Allows , , and  events through.

    */
    public static var Warning : dotnet.System.Diagnostics.SourceLevels {
        get {
        let __return = dotnet.System.Diagnostics.SourceLevels(val: System_Diagnostics_SourceLevels_get_Warning());
            return __return;
        }
    }
    // static field: System.Diagnostics.SourceLevels Information
    /**
    Allows , , , and  events through.

    */
    public static var Information : dotnet.System.Diagnostics.SourceLevels {
        get {
        let __return = dotnet.System.Diagnostics.SourceLevels(val: System_Diagnostics_SourceLevels_get_Information());
            return __return;
        }
    }
    // static field: System.Diagnostics.SourceLevels Verbose
    /**
    Allows , , , , and  events through.

    */
    public static var Verbose : dotnet.System.Diagnostics.SourceLevels {
        get {
        let __return = dotnet.System.Diagnostics.SourceLevels(val: System_Diagnostics_SourceLevels_get_Verbose());
            return __return;
        }
    }
    // static field: System.Diagnostics.SourceLevels ActivityTracing
    /**
    Allows the , , , , and  events through.

    */
    public static var ActivityTracing : dotnet.System.Diagnostics.SourceLevels {
        get {
        let __return = dotnet.System.Diagnostics.SourceLevels(val: System_Diagnostics_SourceLevels_get_ActivityTracing());
            return __return;
        }
    }
} // SourceLevels


// type: System.Diagnostics.SourceSwitch
    /**
    Provides a multilevel switch to control tracing and debug output without recompiling your code.

    */
open class SourceSwitch
    :
    dotnet.System.Diagnostics.Switch
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_SourceSwitch_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.SourceSwitch.#ctor(System.String)
    /**
    Initializes a new instance of the  class, specifying the name of the source.

    - Parameter name: The name of the source.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_SourceSwitch_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.SourceSwitch.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class, specifying the display name and the default value for the source switch.

    - Parameter displayName: The name of the source switch.
    - Parameter defaultSwitchValue: The default value for the switch.
    */
    public init(displayName : dotnet.System.String, defaultSwitchValue : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_SourceSwitch_ctor_0__2__String_String(&__thrown, displayName.get_handle(), defaultSwitchValue.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool ShouldTrace(System.Diagnostics.TraceEventType)
// docid: M:System.Diagnostics.SourceSwitch.ShouldTrace(System.Diagnostics.TraceEventType)
    /**
    Determines if trace listeners should be called, based on the trace event type.

    - Parameter eventType: One of the  values.
    - Returns: 
         if the trace listeners should be called; otherwise, .

    */
    open func ShouldTrace(eventType : dotnet.System.Diagnostics.TraceEventType) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SourceSwitch_bool__ShouldTrace_0__1__TraceEventType(&__thrown, self.get_handle(), eventType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Diagnostics.SourceLevels get_Level()
// docid: M:System.Diagnostics.SourceSwitch.get_Level
    open func get_Level() throws -> dotnet.System.Diagnostics.SourceLevels {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SourceSwitch_SourceLevels__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.SourceLevels(val: __return);
        }
    }
    // [IsSpecialName] void set_Level(System.Diagnostics.SourceLevels)
// docid: M:System.Diagnostics.SourceSwitch.set_Level(System.Diagnostics.SourceLevels)
    open func set_Level(value : dotnet.System.Diagnostics.SourceLevels) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_SourceSwitch_void__set_Level_0__1__SourceLevels(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the level of the switch.

    */
    open var Level : dotnet.System.Diagnostics.SourceLevels {
        get {
            return try! get_Level();
        }
        set(v) {
            return try! set_Level(value: v);
        }
    }
} // SourceSwitch


// type: System.Diagnostics.Switch
    /**
    Provides an abstract base class to create new debugging and tracing switches.

    */
open class Switch
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Switch_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Collections.Specialized.StringDictionary get_Attributes()
// docid: M:System.Diagnostics.Switch.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Specialized.StringDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Switch_StringDictionary__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Description()
// docid: M:System.Diagnostics.Switch.get_Description
    open func get_Description() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Switch_String__get_Description_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
// docid: M:System.Diagnostics.Switch.get_DisplayName
    open func get_DisplayName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Switch_String__get_DisplayName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the custom switch attributes defined in the application configuration file.

    */
    open var Attributes : dotnet.System.Collections.Specialized.StringDictionary {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets a description of the switch.

    */
    open var Description : dotnet.System.String {
        get {
            return try! get_Description();
        }
    }
    /**
    Gets a name used to identify the switch.

    */
    open var DisplayName : dotnet.System.String {
        get {
            return try! get_DisplayName();
        }
    }
} // Switch


// type: System.Diagnostics.SwitchAttribute
    /**
    Identifies a switch used in an assembly, class, or member.

    */
public final class SwitchAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_SwitchAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.Type)
// docid: M:System.Diagnostics.SwitchAttribute.#ctor(System.String,System.Type)
    /**
    Initializes a new instance of the  class, specifying the name and the type of the switch.

    - Parameter switchName: The display name of the switch.
    - Parameter switchType: The type of the switch.
    */
    public init(switchName : dotnet.System.String, switchType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_SwitchAttribute_ctor_0__2__String_Type(&__thrown, switchName.get_handle(), switchType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Diagnostics.SwitchAttribute[] GetAll(System.Reflection.Assembly)
// docid: M:System.Diagnostics.SwitchAttribute.GetAll(System.Reflection.Assembly)
    /**
    Returns all switch attributes for the specified assembly.

    - Parameter assembly: The assembly to check for switch attributes.
    - Returns: An array that contains all the switch attributes for the assembly.

    */
    public class func GetAll(assembly : dotnet.System.Reflection.Assembly) throws -> dotnet.System_Arr<dotnet.System.Diagnostics.SwitchAttribute> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SwitchAttribute_SwitchAttributeArray__GetAll_0__1__Assembly(&__thrown, assembly.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.Diagnostics.SwitchAttribute>(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_SwitchDescription()
// docid: M:System.Diagnostics.SwitchAttribute.get_SwitchDescription
    public func get_SwitchDescription() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SwitchAttribute_String__get_SwitchDescription_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SwitchDescription(System.String)
// docid: M:System.Diagnostics.SwitchAttribute.set_SwitchDescription(System.String)
    public func set_SwitchDescription(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_SwitchAttribute_void__set_SwitchDescription_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_SwitchName()
// docid: M:System.Diagnostics.SwitchAttribute.get_SwitchName
    public func get_SwitchName() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SwitchAttribute_String__get_SwitchName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SwitchName(System.String)
// docid: M:System.Diagnostics.SwitchAttribute.set_SwitchName(System.String)
    public func set_SwitchName(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_SwitchAttribute_void__set_SwitchName_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_SwitchType()
// docid: M:System.Diagnostics.SwitchAttribute.get_SwitchType
    public func get_SwitchType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SwitchAttribute_Type__get_SwitchType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SwitchType(System.Type)
// docid: M:System.Diagnostics.SwitchAttribute.set_SwitchType(System.Type)
    public func set_SwitchType(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_SwitchAttribute_void__set_SwitchType_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the description of the switch.

    */
    public var SwitchDescription : Optional<dotnet.System.String> {
        get {
            return try! get_SwitchDescription();
        }
        set(v) {
            return try! set_SwitchDescription(value: v!);
        }
    }
    /**
    Gets or sets the display name of the switch.

    */
    public var SwitchName : dotnet.System.String {
        get {
            return try! get_SwitchName();
        }
        set(v) {
            return try! set_SwitchName(value: v);
        }
    }
    /**
    Gets or sets the type of the switch.

    */
    public var SwitchType : dotnet.System.Type_ {
        get {
            return try! get_SwitchType();
        }
        set(v) {
            return try! set_SwitchType(value: v);
        }
    }
} // SwitchAttribute


// type: System.Diagnostics.SwitchLevelAttribute
    /**
    Identifies the level type for a switch.

    */
public final class SwitchLevelAttribute
    :
    dotnet.System.Attribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_SwitchLevelAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Diagnostics.SwitchLevelAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of the  class, specifying the type that determines whether a trace should be written.

    - Parameter switchLevelType: The  that determines whether a trace should be written.
    */
    public init(switchLevelType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_SwitchLevelAttribute_ctor_0__1__Type(&__thrown, switchLevelType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Type get_SwitchLevelType()
// docid: M:System.Diagnostics.SwitchLevelAttribute.get_SwitchLevelType
    public func get_SwitchLevelType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_SwitchLevelAttribute_Type__get_SwitchLevelType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_SwitchLevelType(System.Type)
// docid: M:System.Diagnostics.SwitchLevelAttribute.set_SwitchLevelType(System.Type)
    public func set_SwitchLevelType(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_SwitchLevelAttribute_void__set_SwitchLevelType_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the type that determines whether a trace should be written.

    */
    public var SwitchLevelType : dotnet.System.Type_ {
        get {
            return try! get_SwitchLevelType();
        }
        set(v) {
            return try! set_SwitchLevelType(value: v);
        }
    }
} // SwitchLevelAttribute


// type: System.Diagnostics.Trace
    /**
    Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.

    */
public final class Trace
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_Trace_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Assert(bool)
// docid: M:System.Diagnostics.Trace.Assert(System.Boolean)
    /**
    Checks for a condition; if the condition is , displays a message box that shows the call stack.

    - Parameter condition: The conditional expression to evaluate. If the condition is , a failure message is not sent and the message box is not displayed.
    */
    public class func Assert(condition : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Assert_0__1__bool(&__thrown, Swift.Int32(condition ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Assert(bool, System.String)
// docid: M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)
    /**
    Checks for a condition; if the condition is , outputs a specified message and displays a message box that shows the call stack.

    - Parameter condition: The conditional expression to evaluate. If the condition is , the specified message is not sent and the message box is not displayed.
    - Parameter message: The message to send to the  collection.
    */
    public class func Assert(condition : Bool, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Assert_0__2__bool_String(&__thrown, Swift.Int32(condition ? 1 : 0), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Assert(bool, System.String, System.String)
// docid: M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
    /**
    Checks for a condition; if the condition is , outputs two specified messages and displays a message box that shows the call stack.

    - Parameter condition: The conditional expression to evaluate. If the condition is , the specified messages are not sent and the message box is not displayed.
    - Parameter message: The message to send to the  collection.
    - Parameter detailMessage: The detailed message to send to the  collection.
    */
    public class func Assert(condition : Bool, message : Optional<dotnet.System.String>, detailMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Assert_0__3__bool_String_String(&__thrown, Swift.Int32(condition ? 1 : 0), message?.get_handle() ?? nil, detailMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Close()
// docid: M:System.Diagnostics.Trace.Close
    /**
    Flushes the output buffer, and then closes the .

    */
    public class func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Close_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.String)
// docid: M:System.Diagnostics.Trace.Fail(System.String)
    /**
    Emits the specified error message.

    - Parameter message: A message to emit.
    */
    public class func Fail(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Fail_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.String, System.String)
// docid: M:System.Diagnostics.Trace.Fail(System.String,System.String)
    /**
    Emits an error message, and a detailed error message.

    - Parameter message: A message to emit.
    - Parameter detailMessage: A detailed message to emit.
    */
    public class func Fail(message : Optional<dotnet.System.String>, detailMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Fail_0__2__String_String(&__thrown, message?.get_handle() ?? nil, detailMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:System.Diagnostics.Trace.Flush
    /**
    Flushes the output buffer, and causes buffered data to be written to the .

    */
    public class func Flush() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Flush_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Indent()
// docid: M:System.Diagnostics.Trace.Indent
    /**
    Increases the current  by one.

    */
    public class func Indent() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Indent_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Refresh()
// docid: M:System.Diagnostics.Trace.Refresh
    /**
    Refreshes the trace configuration data.

    */
    public class func Refresh() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Refresh_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceError(System.String)
// docid: M:System.Diagnostics.Trace.TraceError(System.String)
    /**
    Writes an error message to the trace listeners in the  collection using the specified message.

    - Parameter message: The informative message to write.
    */
    public class func TraceError(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__TraceError_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceError(System.String, System.Object[])
// docid: M:System.Diagnostics.Trace.TraceError(System.String,System.Object[])
    /**
    Writes an error message to the trace listeners in the  collection using the specified array of objects and formatting information.

    - Parameter format: A format string that contains zero or more format items, which correspond to objects in the  array.
    - Parameter args: An  array containing zero or more objects to format.
    */
    public class func TraceError(format : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__TraceError_0__2__String_ObjectArray(&__thrown, format.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceInformation(System.String)
// docid: M:System.Diagnostics.Trace.TraceInformation(System.String)
    /**
    Writes an informational message to the trace listeners in the  collection using the specified message.

    - Parameter message: The informative message to write.
    */
    public class func TraceInformation(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__TraceInformation_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceInformation(System.String, System.Object[])
// docid: M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
    /**
    Writes an informational message to the trace listeners in the  collection using the specified array of objects and formatting information.

    - Parameter format: A format string that contains zero or more format items, which correspond to objects in the  array.
    - Parameter args: An  array containing zero or more objects to format.
    */
    public class func TraceInformation(format : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__TraceInformation_0__2__String_ObjectArray(&__thrown, format.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceWarning(System.String)
// docid: M:System.Diagnostics.Trace.TraceWarning(System.String)
    /**
    Writes a warning message to the trace listeners in the  collection using the specified message.

    - Parameter message: The informative message to write.
    */
    public class func TraceWarning(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__TraceWarning_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceWarning(System.String, System.Object[])
// docid: M:System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
    /**
    Writes a warning message to the trace listeners in the  collection using the specified array of objects and formatting information.

    - Parameter format: A format string that contains zero or more format items, which correspond to objects in the  array.
    - Parameter args: An  array containing zero or more objects to format.
    */
    public class func TraceWarning(format : dotnet.System.String, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__TraceWarning_0__2__String_ObjectArray(&__thrown, format.get_handle(), (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Unindent()
// docid: M:System.Diagnostics.Trace.Unindent
    /**
    Decreases the current  by one.

    */
    public class func Unindent() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Unindent_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Object)
// docid: M:System.Diagnostics.Trace.Write(System.Object)
    /**
    Writes the value of the object's  method to the trace listeners in the  collection.

    - Parameter value: An  whose name is sent to the .
    */
    public class func Write(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Write_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Object, System.String)
// docid: M:System.Diagnostics.Trace.Write(System.Object,System.String)
    /**
    Writes a category name and the value of the object's  method to the trace listeners in the  collection.

    - Parameter value: An  name is sent to the .
    - Parameter category: A category name used to organize the output.
    */
    public class func Write(value : Optional<dotnet.System.Object>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Write_0__2__Object_String(&__thrown, value?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String)
// docid: M:System.Diagnostics.Trace.Write(System.String)
    /**
    Writes a message to the trace listeners in the  collection.

    - Parameter message: A message to write.
    */
    public class func Write(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Write_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String, System.String)
// docid: M:System.Diagnostics.Trace.Write(System.String,System.String)
    /**
    Writes a category name and a message to the trace listeners in the  collection.

    - Parameter message: A message to write.
    - Parameter category: A category name used to organize the output.
    */
    public class func Write(message : Optional<dotnet.System.String>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__Write_0__2__String_String(&__thrown, message?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteIf(bool, System.Object)
// docid: M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
    /**
    Writes the value of the object's  method to the trace listeners in the  collection if a condition is .

    - Parameter condition: 
         to cause a message to be written; otherwise, .
    - Parameter value: An  whose name is sent to the .
    */
    public class func WriteIf(condition : Bool, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteIf_0__2__bool_Object(&__thrown, Swift.Int32(condition ? 1 : 0), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteIf(bool, System.Object, System.String)
// docid: M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
    /**
    Writes a category name and the value of the object's  method to the trace listeners in the  collection if a condition is .

    - Parameter condition: 
         to cause a message to be written; otherwise, .
    - Parameter value: An  whose name is sent to the .
    - Parameter category: A category name used to organize the output.
    */
    public class func WriteIf(condition : Bool, value : Optional<dotnet.System.Object>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteIf_0__3__bool_Object_String(&__thrown, Swift.Int32(condition ? 1 : 0), value?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteIf(bool, System.String)
// docid: M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
    /**
    Writes a message to the trace listeners in the  collection if a condition is .

    - Parameter condition: 
         to cause a message to be written; otherwise, .
    - Parameter message: A message to write.
    */
    public class func WriteIf(condition : Bool, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteIf_0__2__bool_String(&__thrown, Swift.Int32(condition ? 1 : 0), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteIf(bool, System.String, System.String)
// docid: M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
    /**
    Writes a category name and message to the trace listeners in the  collection if a condition is .

    - Parameter condition: 
         to cause a message to be written; otherwise, .
    - Parameter message: A message to write.
    - Parameter category: A category name used to organize the output.
    */
    public class func WriteIf(condition : Bool, message : Optional<dotnet.System.String>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteIf_0__3__bool_String_String(&__thrown, Swift.Int32(condition ? 1 : 0), message?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Object)
// docid: M:System.Diagnostics.Trace.WriteLine(System.Object)
    /**
    Writes the value of the object's  method to the trace listeners in the  collection.

    - Parameter value: An  whose name is sent to the .
    */
    public class func WriteLine(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteLine_0__1__Object(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Object, System.String)
// docid: M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)
    /**
    Writes a category name and the value of the object's  method to the trace listeners in the  collection.

    - Parameter value: An  whose name is sent to the .
    - Parameter category: A category name used to organize the output.
    */
    public class func WriteLine(value : Optional<dotnet.System.Object>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteLine_0__2__Object_String(&__thrown, value?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String)
// docid: M:System.Diagnostics.Trace.WriteLine(System.String)
    /**
    Writes a message to the trace listeners in the  collection.

    - Parameter message: A message to write.
    */
    public class func WriteLine(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteLine_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String, System.String)
// docid: M:System.Diagnostics.Trace.WriteLine(System.String,System.String)
    /**
    Writes a category name and message to the trace listeners in the  collection.

    - Parameter message: A message to write.
    - Parameter category: A category name used to organize the output.
    */
    public class func WriteLine(message : Optional<dotnet.System.String>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteLine_0__2__String_String(&__thrown, message?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLineIf(bool, System.Object)
// docid: M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
    /**
    Writes the value of the object's  method to the trace listeners in the  collection if a condition is .

    - Parameter condition: 
         to cause a message to be written; otherwise, .
    - Parameter value: An  whose name is sent to the .
    */
    public class func WriteLineIf(condition : Bool, value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteLineIf_0__2__bool_Object(&__thrown, Swift.Int32(condition ? 1 : 0), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLineIf(bool, System.Object, System.String)
// docid: M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
    /**
    Writes a category name and the value of the object's  method to the trace listeners in the  collection if a condition is .

    - Parameter condition: 
         to cause a message to be written; otherwise, .
    - Parameter value: An  whose name is sent to the .
    - Parameter category: A category name used to organize the output.
    */
    public class func WriteLineIf(condition : Bool, value : Optional<dotnet.System.Object>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteLineIf_0__3__bool_Object_String(&__thrown, Swift.Int32(condition ? 1 : 0), value?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLineIf(bool, System.String)
// docid: M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
    /**
    Writes a message to the trace listeners in the  collection if a condition is .

    - Parameter condition: 
         to cause a message to be written; otherwise, .
    - Parameter message: A message to write.
    */
    public class func WriteLineIf(condition : Bool, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteLineIf_0__2__bool_String(&__thrown, Swift.Int32(condition ? 1 : 0), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLineIf(bool, System.String, System.String)
// docid: M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
    /**
    Writes a category name and message to the trace listeners in the  collection if a condition is .

    - Parameter condition: 
         to cause a message to be written; otherwise, .
    - Parameter message: A message to write.
    - Parameter category: A category name used to organize the output.
    */
    public class func WriteLineIf(condition : Bool, message : Optional<dotnet.System.String>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__WriteLineIf_0__3__bool_String_String(&__thrown, Swift.Int32(condition ? 1 : 0), message?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_AutoFlush()
// docid: M:System.Diagnostics.Trace.get_AutoFlush
    public class func get_AutoFlush() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Trace_bool__get_AutoFlush_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AutoFlush(bool)
// docid: M:System.Diagnostics.Trace.set_AutoFlush(System.Boolean)
    public class func set_AutoFlush(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__set_AutoFlush_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.CorrelationManager get_CorrelationManager()
// docid: M:System.Diagnostics.Trace.get_CorrelationManager
    public class func get_CorrelationManager() throws -> dotnet.System.Diagnostics.CorrelationManager {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Trace_CorrelationManager__get_CorrelationManager_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.CorrelationManager(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_IndentLevel()
// docid: M:System.Diagnostics.Trace.get_IndentLevel
    public class func get_IndentLevel() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Trace_i32__get_IndentLevel_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_IndentLevel(System.Int32)
// docid: M:System.Diagnostics.Trace.set_IndentLevel(System.Int32)
    public class func set_IndentLevel(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__set_IndentLevel_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_IndentSize()
// docid: M:System.Diagnostics.Trace.get_IndentSize
    public class func get_IndentSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Trace_i32__get_IndentSize_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_IndentSize(System.Int32)
// docid: M:System.Diagnostics.Trace.set_IndentSize(System.Int32)
    public class func set_IndentSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__set_IndentSize_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.TraceListenerCollection get_Listeners()
// docid: M:System.Diagnostics.Trace.get_Listeners
    public class func get_Listeners() throws -> dotnet.System.Diagnostics.TraceListenerCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Trace_TraceListenerCollection__get_Listeners_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.TraceListenerCollection(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_UseGlobalLock()
// docid: M:System.Diagnostics.Trace.get_UseGlobalLock
    public class func get_UseGlobalLock() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_Trace_bool__get_UseGlobalLock_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_UseGlobalLock(bool)
// docid: M:System.Diagnostics.Trace.set_UseGlobalLock(System.Boolean)
    public class func set_UseGlobalLock(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_Trace_void__set_UseGlobalLock_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets whether  should be called on the  after every write.

    */
    public static var AutoFlush : Bool {
        get {
            return try! get_AutoFlush();
        }
        set(v) {
            return try! set_AutoFlush(value: v);
        }
    }
    /**
    Gets the correlation manager for the thread for this trace.

    */
    public static var CorrelationManager : dotnet.System.Diagnostics.CorrelationManager {
        get {
            return try! get_CorrelationManager();
        }
    }
    /**
    Gets or sets the indent level.

    */
    public static var IndentLevel : Swift.Int32 {
        get {
            return try! get_IndentLevel();
        }
        set(v) {
            return try! set_IndentLevel(value: v);
        }
    }
    /**
    Gets or sets the number of spaces in an indent.

    */
    public static var IndentSize : Swift.Int32 {
        get {
            return try! get_IndentSize();
        }
        set(v) {
            return try! set_IndentSize(value: v);
        }
    }
    /**
    Gets the collection of listeners that is monitoring the trace output.

    */
    public static var Listeners : dotnet.System.Diagnostics.TraceListenerCollection {
        get {
            return try! get_Listeners();
        }
    }
    /**
    Gets or sets a value indicating whether the global lock should be used.

    */
    public static var UseGlobalLock : Bool {
        get {
            return try! get_UseGlobalLock();
        }
        set(v) {
            return try! set_UseGlobalLock(value: v);
        }
    }
} // Trace


// type: System.Diagnostics.TraceEventCache
    /**
    Provides trace event data specific to a thread and a process.

    */
open class TraceEventCache
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceEventCache_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Diagnostics.TraceEventCache.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TraceEventCache_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Callstack()
// docid: M:System.Diagnostics.TraceEventCache.get_Callstack
    open func get_Callstack() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceEventCache_String__get_Callstack_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTime get_DateTime()
// docid: M:System.Diagnostics.TraceEventCache.get_DateTime
    open func get_DateTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceEventCache_DateTime__get_DateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.Collections.Stack get_LogicalOperationStack()
// docid: M:System.Diagnostics.TraceEventCache.get_LogicalOperationStack
    open func get_LogicalOperationStack() throws -> dotnet.System.Collections.Stack {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceEventCache_Stack__get_LogicalOperationStack_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Stack(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_ProcessId()
// docid: M:System.Diagnostics.TraceEventCache.get_ProcessId
    open func get_ProcessId() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceEventCache_i32__get_ProcessId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String get_ThreadId()
// docid: M:System.Diagnostics.TraceEventCache.get_ThreadId
    open func get_ThreadId() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceEventCache_String__get_ThreadId_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int64 get_Timestamp()
// docid: M:System.Diagnostics.TraceEventCache.get_Timestamp
    open func get_Timestamp() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceEventCache_i64__get_Timestamp_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    /**
    Gets the call stack for the current thread.

    */
    open var Callstack : dotnet.System.String {
        get {
            return try! get_Callstack();
        }
    }
    /**
    Gets the date and time at which the event trace occurred.

    */
    open var DateTime : dotnet.System.DateTime {
        get {
            return try! get_DateTime();
        }
    }
    /**
    Gets the correlation data, contained in a stack.

    */
    open var LogicalOperationStack : dotnet.System.Collections.Stack {
        get {
            return try! get_LogicalOperationStack();
        }
    }
    /**
    Gets the unique identifier of the current process.

    */
    open var ProcessId : Swift.Int32 {
        get {
            return try! get_ProcessId();
        }
    }
    /**
    Gets a unique identifier for the current managed thread.

    */
    open var ThreadId : dotnet.System.String {
        get {
            return try! get_ThreadId();
        }
    }
    /**
    Gets the current number of ticks in the timer mechanism.

    */
    open var Timestamp : Swift.Int64 {
        get {
            return try! get_Timestamp();
        }
    }
} // TraceEventCache


// type: System.Diagnostics.TraceEventType
    /**
    Identifies the type of event that has caused the trace.

    */
public struct TraceEventType : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceEventType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.TraceEventType Critical
    /**
    Fatal error or application crash.

    */
    public static var Critical : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Critical());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Error
    /**
    Recoverable error.

    */
    public static var Error : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Error());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Warning
    /**
    Noncritical problem.

    */
    public static var Warning : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Warning());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Information
    /**
    Informational message.

    */
    public static var Information : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Information());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Verbose
    /**
    Debugging trace.

    */
    public static var Verbose : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Verbose());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Start
    /**
    Starting of a logical operation.

    */
    public static var Start : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Start());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Stop
    /**
    Stopping of a logical operation.

    */
    public static var Stop : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Stop());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Suspend
    /**
    Suspension of a logical operation.

    */
    public static var Suspend : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Suspend());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Resume
    /**
    Resumption of a logical operation.

    */
    public static var Resume : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Resume());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceEventType Transfer
    /**
    Changing of correlation identity.

    */
    public static var Transfer : dotnet.System.Diagnostics.TraceEventType {
        get {
        let __return = dotnet.System.Diagnostics.TraceEventType(val: System_Diagnostics_TraceEventType_get_Transfer());
            return __return;
        }
    }
} // TraceEventType


// type: System.Diagnostics.TraceFilter
    /**
    Provides the base class for trace filter implementations.

    */
open class TraceFilter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceFilter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])
// docid: M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])
    /**
    When overridden in a derived class, determines whether the trace listener should trace the event.

    - Parameter cache: The  that contains information for the trace event.
    - Parameter source: The name of the source.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A trace identifier number.
    - Parameter formatOrMessage: Either the format to use for writing an array of arguments specified by the  parameter, or a message to write.
    - Parameter args: An array of argument objects.
    - Parameter data1: A trace data object.
    - Parameter data: An array of trace data objects.
    - Returns: 
         to trace the specified event; otherwise, .

    */
    open func ShouldTrace(cache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, formatOrMessage : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>, data1 : Optional<dotnet.System.Object>, data : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceFilter_bool__ShouldTrace_0__8__TraceEventCache_String_TraceEventType_i32_String_ObjectArray_Object_ObjectArray(&__thrown, self.get_handle(), cache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, formatOrMessage?.get_handle() ?? nil, (args?.get_handle()), data1?.get_handle() ?? nil, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // TraceFilter


// type: System.Diagnostics.TraceLevel
    /**
    Specifies what messages to output for the ,  and  classes.

    */
public struct TraceLevel : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceLevel_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.TraceLevel Off
    /**
    Output no tracing and debugging messages.

    */
    public static var Off : dotnet.System.Diagnostics.TraceLevel {
        get {
        let __return = dotnet.System.Diagnostics.TraceLevel(val: System_Diagnostics_TraceLevel_get_Off());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceLevel Error
    /**
    Output error-handling messages.

    */
    public static var Error : dotnet.System.Diagnostics.TraceLevel {
        get {
        let __return = dotnet.System.Diagnostics.TraceLevel(val: System_Diagnostics_TraceLevel_get_Error());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceLevel Warning
    /**
    Output warnings and error-handling messages.

    */
    public static var Warning : dotnet.System.Diagnostics.TraceLevel {
        get {
        let __return = dotnet.System.Diagnostics.TraceLevel(val: System_Diagnostics_TraceLevel_get_Warning());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceLevel Info
    /**
    Output informational messages, warnings, and error-handling messages.

    */
    public static var Info : dotnet.System.Diagnostics.TraceLevel {
        get {
        let __return = dotnet.System.Diagnostics.TraceLevel(val: System_Diagnostics_TraceLevel_get_Info());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceLevel Verbose
    /**
    Output all debugging and tracing messages.

    */
    public static var Verbose : dotnet.System.Diagnostics.TraceLevel {
        get {
        let __return = dotnet.System.Diagnostics.TraceLevel(val: System_Diagnostics_TraceLevel_get_Verbose());
            return __return;
        }
    }
} // TraceLevel


// type: System.Diagnostics.TraceListener
    /**
    Provides the  base class for the listeners who monitor trace and debug output.

    */
open class TraceListener
    :
    dotnet.System.MarshalByRefObject,
    System_IDisposable
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceListener_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:System.Diagnostics.TraceListener.Close
    /**
    When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:System.Diagnostics.TraceListener.Dispose
    /**
    Releases all resources used by the .

    */
    open /* method final */ func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.String)
// docid: M:System.Diagnostics.TraceListener.Fail(System.String)
    /**
    Emits an error message to the listener you create when you implement the  class.

    - Parameter message: A message to emit.
    */
    open func Fail(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Fail_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Fail(System.String, System.String)
// docid: M:System.Diagnostics.TraceListener.Fail(System.String,System.String)
    /**
    Emits an error message and a detailed error message to the listener you create when you implement the  class.

    - Parameter message: A message to emit.
    - Parameter detailMessage: A detailed message to emit.
    */
    open func Fail(message : Optional<dotnet.System.String>, detailMessage : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Fail_0__2__String_String(&__thrown, self.get_handle(), message?.get_handle() ?? nil, detailMessage?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:System.Diagnostics.TraceListener.Flush
    /**
    When overridden in a derived class, flushes the output buffer.

    */
    open func Flush() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)
// docid: M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
    /**
    Writes trace information, a data object and event information to the listener specific output.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    - Parameter data: The trace data to emit.
    */
    open func TraceData(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__TraceData_0__5__TraceEventCache_String_TraceEventType_i32_Object(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])
// docid: M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
    /**
    Writes trace information, an array of data objects and event information to the listener specific output.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    - Parameter data: An array of objects to emit as data.
    */
    open func TraceData(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__TraceData_0__5__TraceEventCache_String_TraceEventType_i32_ObjectArray(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32)
// docid: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
    /**
    Writes trace and event information to the listener specific output.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    */
    open func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__TraceEvent_0__4__TraceEventCache_String_TraceEventType_i32(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)
// docid: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
    /**
    Writes trace information, a message, and event information to the listener specific output.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    - Parameter message: A message to write.
    */
    open func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__TraceEvent_0__5__TraceEventCache_String_TraceEventType_i32_String(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])
// docid: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
    /**
    Writes trace information, a formatted array of objects and event information to the listener specific output.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter eventType: One of the  values specifying the type of event that has caused the trace.
    - Parameter id: A numeric identifier for the event.
    - Parameter format: A format string that contains zero or more format items, which correspond to objects in the  array.
    - Parameter args: An  array containing zero or more objects to format.
    */
    open func TraceEvent(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, format : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__TraceEvent_0__6__TraceEventCache_String_TraceEventType_i32_String_ObjectArray(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), eventType.get_value(), id, format?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceTransfer(System.Diagnostics.TraceEventCache, System.String, System.Int32, System.String, System.Guid)
// docid: M:System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
    /**
    Writes trace information, a message, a related activity identity and event information to the listener specific output.

    - Parameter eventCache: A  object that contains the current process ID, thread ID, and stack trace information.
    - Parameter source: A name used to identify the output, typically the name of the application that generated the trace event.
    - Parameter id: A numeric identifier for the event.
    - Parameter message: A message to write.
    - Parameter relatedActivityId: A  object identifying a related activity.
    */
    open func TraceTransfer(eventCache : Optional<dotnet.System.Diagnostics.TraceEventCache>, source : dotnet.System.String, id : Swift.Int32, message : Optional<dotnet.System.String>, relatedActivityId : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__TraceTransfer_0__5__TraceEventCache_String_i32_String_Guid(&__thrown, self.get_handle(), eventCache?.get_handle() ?? nil, source.get_handle(), id, message?.get_handle() ?? nil, relatedActivityId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Object)
// docid: M:System.Diagnostics.TraceListener.Write(System.Object)
    /**
    Writes the value of the object's  method to the listener you create when you implement the  class.

    - Parameter o: An  whose fully qualified class name you want to write.
    */
    open func Write(o : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Write_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.Object, System.String)
// docid: M:System.Diagnostics.TraceListener.Write(System.Object,System.String)
    /**
    Writes a category name and the value of the object's  method to the listener you create when you implement the  class.

    - Parameter o: An  whose fully qualified class name you want to write.
    - Parameter category: A category name used to organize the output.
    */
    open func Write(o : Optional<dotnet.System.Object>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Write_0__2__Object_String(&__thrown, self.get_handle(), o?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String)
// docid: M:System.Diagnostics.TraceListener.Write(System.String)
    /**
    When overridden in a derived class, writes the specified message to the listener you create in the derived class.

    - Parameter message: A message to write.
    */
    open func Write(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Write_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Write(System.String, System.String)
// docid: M:System.Diagnostics.TraceListener.Write(System.String,System.String)
    /**
    Writes a category name and a message to the listener you create when you implement the  class.

    - Parameter message: A message to write.
    - Parameter category: A category name used to organize the output.
    */
    open func Write(message : Optional<dotnet.System.String>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__Write_0__2__String_String(&__thrown, self.get_handle(), message?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Object)
// docid: M:System.Diagnostics.TraceListener.WriteLine(System.Object)
    /**
    Writes the value of the object's  method to the listener you create when you implement the  class, followed by a line terminator.

    - Parameter o: An  whose fully qualified class name you want to write.
    */
    open func WriteLine(o : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__WriteLine_0__1__Object(&__thrown, self.get_handle(), o?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.Object, System.String)
// docid: M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
    /**
    Writes a category name and the value of the object's  method to the listener you create when you implement the  class, followed by a line terminator.

    - Parameter o: An  whose fully qualified class name you want to write.
    - Parameter category: A category name used to organize the output.
    */
    open func WriteLine(o : Optional<dotnet.System.Object>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__WriteLine_0__2__Object_String(&__thrown, self.get_handle(), o?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String)
// docid: M:System.Diagnostics.TraceListener.WriteLine(System.String)
    /**
    When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.

    - Parameter message: A message to write.
    */
    open func WriteLine(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__WriteLine_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteLine(System.String, System.String)
// docid: M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
    /**
    Writes a category name and a message to the listener you create when you implement the  class, followed by a line terminator.

    - Parameter message: A message to write.
    - Parameter category: A category name used to organize the output.
    */
    open func WriteLine(message : Optional<dotnet.System.String>, category : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__WriteLine_0__2__String_String(&__thrown, self.get_handle(), message?.get_handle() ?? nil, category?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.StringDictionary get_Attributes()
// docid: M:System.Diagnostics.TraceListener.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Specialized.StringDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListener_StringDictionary__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.TraceFilter get_Filter()
// docid: M:System.Diagnostics.TraceListener.get_Filter
    open func get_Filter() throws -> Optional<dotnet.System.Diagnostics.TraceFilter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListener_TraceFilter__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.TraceFilter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Filter(System.Diagnostics.TraceFilter)
// docid: M:System.Diagnostics.TraceListener.set_Filter(System.Diagnostics.TraceFilter)
    open func set_Filter(value : Optional<dotnet.System.Diagnostics.TraceFilter>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__set_Filter_0__1__TraceFilter(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_IndentLevel()
// docid: M:System.Diagnostics.TraceListener.get_IndentLevel
    open func get_IndentLevel() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListener_i32__get_IndentLevel_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_IndentLevel(System.Int32)
// docid: M:System.Diagnostics.TraceListener.set_IndentLevel(System.Int32)
    open func set_IndentLevel(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__set_IndentLevel_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_IndentSize()
// docid: M:System.Diagnostics.TraceListener.get_IndentSize
    open func get_IndentSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListener_i32__get_IndentSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_IndentSize(System.Int32)
// docid: M:System.Diagnostics.TraceListener.set_IndentSize(System.Int32)
    open func set_IndentSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__set_IndentSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsThreadSafe()
// docid: M:System.Diagnostics.TraceListener.get_IsThreadSafe
    open func get_IsThreadSafe() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListener_bool__get_IsThreadSafe_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.TraceListener.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListener_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Diagnostics.TraceListener.set_Name(System.String)
    open func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.TraceOptions get_TraceOutputOptions()
// docid: M:System.Diagnostics.TraceListener.get_TraceOutputOptions
    open func get_TraceOutputOptions() throws -> dotnet.System.Diagnostics.TraceOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListener_TraceOptions__get_TraceOutputOptions_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.TraceOptions(val: __return);
        }
    }
    // [IsSpecialName] void set_TraceOutputOptions(System.Diagnostics.TraceOptions)
// docid: M:System.Diagnostics.TraceListener.set_TraceOutputOptions(System.Diagnostics.TraceOptions)
    open func set_TraceOutputOptions(value : dotnet.System.Diagnostics.TraceOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListener_void__set_TraceOutputOptions_0__1__TraceOptions(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the custom trace listener attributes defined in the application configuration file.

    */
    open var Attributes : dotnet.System.Collections.Specialized.StringDictionary {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets or sets the trace filter for the trace listener.

    */
    open var Filter : Optional<dotnet.System.Diagnostics.TraceFilter> {
        get {
            return try! get_Filter();
        }
        set(v) {
            return try! set_Filter(value: v!);
        }
    }
    /**
    Gets or sets the indent level.

    */
    open var IndentLevel : Swift.Int32 {
        get {
            return try! get_IndentLevel();
        }
        set(v) {
            return try! set_IndentLevel(value: v);
        }
    }
    /**
    Gets or sets the number of spaces in an indent.

    */
    open var IndentSize : Swift.Int32 {
        get {
            return try! get_IndentSize();
        }
        set(v) {
            return try! set_IndentSize(value: v);
        }
    }
    /**
    Gets a value indicating whether the trace listener is thread safe.

    */
    open var IsThreadSafe : Bool {
        get {
            return try! get_IsThreadSafe();
        }
    }
    /**
    Gets or sets a name for this .

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    /**
    Gets or sets the trace output options.

    */
    open var TraceOutputOptions : dotnet.System.Diagnostics.TraceOptions {
        get {
            return try! get_TraceOutputOptions();
        }
        set(v) {
            return try! set_TraceOutputOptions(value: v);
        }
    }
} // TraceListener


// type: System.Diagnostics.TraceListenerCollection
    /**
    Provides a thread-safe list of  objects.

    */
open class TraceListenerCollection
    :
    dotnet.System.Object,
    System_Collections_ICollection,
    System_Collections_IEnumerable,
    System_Collections_IList
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceListenerCollection_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Int32 Add(System.Diagnostics.TraceListener)
// docid: M:System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)
    /**
    Adds a  to the list.

    - Parameter listener: A  to add to the list.
    - Returns: The position at which the new listener was inserted.

    */
    open func Add(listener : dotnet.System.Diagnostics.TraceListener) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListenerCollection_i32__Add_0__1__TraceListener(&__thrown, self.get_handle(), listener.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void AddRange(System.Diagnostics.TraceListenerCollection)
// docid: M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)
    /**
    Adds the contents of another  to the list.

    - Parameter value: Another  whose contents are added to the list.
    */
    open func AddRange(value : dotnet.System.Diagnostics.TraceListenerCollection) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__AddRange_0__1__TraceListenerCollection(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddRange(System.Diagnostics.TraceListener[])
// docid: M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])
    /**
    Adds an array of  objects to the list.

    - Parameter value: An array of  objects to add to the list.
    */
    open func AddRange(value : dotnet.System_Arr<dotnet.System.Diagnostics.TraceListener>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__AddRange_0__1__TraceListenerArray(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Diagnostics.TraceListenerCollection.Clear
    /**
    Clears all the listeners from the list.

    */
    open /* method final */ func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Diagnostics.TraceListener)
// docid: M:System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)
    /**
    Checks whether the list contains the specified listener.

    - Parameter listener: A  to find in the list.
    - Returns: 
         if the listener is in the list; otherwise, .

    */
    open func Contains(listener : Optional<dotnet.System.Diagnostics.TraceListener>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListenerCollection_bool__Contains_0__1__TraceListener(&__thrown, self.get_handle(), listener?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void CopyTo(System.Diagnostics.TraceListener[], System.Int32)
// docid: M:System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)
    /**
    Copies a section of the current  list to the specified array at the specified index.

    - Parameter listeners: An array of type  to copy the elements into.
    - Parameter index: The starting index number in the current list to copy from.
    */
    open func CopyTo(listeners : dotnet.System_Arr<dotnet.System.Diagnostics.TraceListener>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__CopyTo_0__2__TraceListenerArray_i32(&__thrown, self.get_handle(), listeners.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Collections.IEnumerator GetEnumerator()
// docid: M:System.Diagnostics.TraceListenerCollection.GetEnumerator
    /**
    Gets an enumerator for this list.

    - Returns: An enumerator of type .

    */
    open /* method final */ func GetEnumerator() throws -> dotnet.System.Collections.IEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListenerCollection_IEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.IEnumerator(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.Diagnostics.TraceListener)
// docid: M:System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)
    /**
    Gets the index of the specified listener.

    - Parameter listener: A  to find in the list.
    - Returns: The index of the listener, if it can be found in the list; otherwise, -1.

    */
    open func IndexOf(listener : Optional<dotnet.System.Diagnostics.TraceListener>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListenerCollection_i32__IndexOf_0__1__TraceListener(&__thrown, self.get_handle(), listener?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Diagnostics.TraceListener)
// docid: M:System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)
    /**
    Inserts the listener at the specified index.

    - Parameter index: The position in the list to insert the new .
    - Parameter listener: A  to insert in the list.
    */
    open func Insert(index : Swift.Int32, listener : dotnet.System.Diagnostics.TraceListener) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__Insert_0__2__i32_TraceListener(&__thrown, self.get_handle(), index, listener.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.Diagnostics.TraceListener)
// docid: M:System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)
    /**
    Removes from the collection the specified .

    - Parameter listener: A  to remove from the list.
    */
    open func Remove(listener : Optional<dotnet.System.Diagnostics.TraceListener>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__Remove_0__1__TraceListener(&__thrown, self.get_handle(), listener?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Remove(System.String)
// docid: M:System.Diagnostics.TraceListenerCollection.Remove(System.String)
    /**
    Removes from the collection the first  with the specified name.

    - Parameter name: The name of the  to remove from the list.
    */
    open func Remove(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__Remove_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)
    /**
    Removes from the collection the  at the specified index.

    - Parameter index: The zero-based index of the  to remove from the list.
    */
    open /* method final */ func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Diagnostics.TraceListenerCollection.get_Count
    open /* method final */ func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListenerCollection_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Diagnostics.TraceListener get_Item(System.Int32)
// docid: M:System.Diagnostics.TraceListenerCollection.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(i : Swift.Int32) throws -> dotnet.System.Diagnostics.TraceListener {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListenerCollection_TraceListener__get_Item_0__1__i32(&__thrown, self.get_handle(), i);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.TraceListener(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Diagnostics.TraceListener)
// docid: M:System.Diagnostics.TraceListenerCollection.set_Item(System.Int32,System.Diagnostics.TraceListener)
    open func set_Item(i : Swift.Int32, value : dotnet.System.Diagnostics.TraceListener) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceListenerCollection_void__set_Item_0__2__i32_TraceListener(&__thrown, self.get_handle(), i, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Diagnostics.TraceListener get_Item(System.String)
// docid: M:System.Diagnostics.TraceListenerCollection.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open func get_Item(name : dotnet.System.String) throws -> Optional<dotnet.System.Diagnostics.TraceListener> {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceListenerCollection_TraceListener__get_Item_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Diagnostics.TraceListener(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the number of listeners in the list.

    */
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // TraceListenerCollection


// type: System.Diagnostics.TraceOptions
    /**
    Specifies trace data options to be written to the trace output.

    */
public struct TraceOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Diagnostics.TraceOptions None
    /**
    Do not write any elements.

    */
    public static var None : dotnet.System.Diagnostics.TraceOptions {
        get {
        let __return = dotnet.System.Diagnostics.TraceOptions(val: System_Diagnostics_TraceOptions_get_None());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceOptions LogicalOperationStack
    /**
    Write the logical operation stack, which is represented by the return value of the  property.

    */
    public static var LogicalOperationStack : dotnet.System.Diagnostics.TraceOptions {
        get {
        let __return = dotnet.System.Diagnostics.TraceOptions(val: System_Diagnostics_TraceOptions_get_LogicalOperationStack());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceOptions DateTime
    /**
    Write the date and time.

    */
    public static var DateTime : dotnet.System.Diagnostics.TraceOptions {
        get {
        let __return = dotnet.System.Diagnostics.TraceOptions(val: System_Diagnostics_TraceOptions_get_DateTime());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceOptions Timestamp
    /**
    Write the timestamp, which is represented by the return value of the  method.

    */
    public static var Timestamp : dotnet.System.Diagnostics.TraceOptions {
        get {
        let __return = dotnet.System.Diagnostics.TraceOptions(val: System_Diagnostics_TraceOptions_get_Timestamp());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceOptions ProcessId
    /**
    Write the process identity, which is represented by the return value of the  property.

    */
    public static var ProcessId : dotnet.System.Diagnostics.TraceOptions {
        get {
        let __return = dotnet.System.Diagnostics.TraceOptions(val: System_Diagnostics_TraceOptions_get_ProcessId());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceOptions ThreadId
    /**
    Write the thread identity, which is represented by the return value of the  property for the current thread.

    */
    public static var ThreadId : dotnet.System.Diagnostics.TraceOptions {
        get {
        let __return = dotnet.System.Diagnostics.TraceOptions(val: System_Diagnostics_TraceOptions_get_ThreadId());
            return __return;
        }
    }
    // static field: System.Diagnostics.TraceOptions Callstack
    /**
    Write the call stack, which is represented by the return value of the  property.

    */
    public static var Callstack : dotnet.System.Diagnostics.TraceOptions {
        get {
        let __return = dotnet.System.Diagnostics.TraceOptions(val: System_Diagnostics_TraceOptions_get_Callstack());
            return __return;
        }
    }
} // TraceOptions


// type: System.Diagnostics.TraceSource
    /**
    Provides a set of methods and properties that enable applications to trace the execution of code and associate trace messages with their source.

    */
open class TraceSource
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceSource_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Diagnostics.TraceSource.#ctor(System.String)
    /**
    Initializes a new instance of the  class, using the specified name for the source.

    - Parameter name: The name of the source (typically, the name of the application).
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TraceSource_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Diagnostics.SourceLevels)
// docid: M:System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)
    /**
    Initializes a new instance of the  class, using the specified name for the source and the default source level at which tracing is to occur.

    - Parameter name: The name of the source, typically the name of the application.
    - Parameter defaultLevel: A bitwise combination of the enumeration values that specifies the default source level at which to trace.
    */
    public init(name : dotnet.System.String, defaultLevel : dotnet.System.Diagnostics.SourceLevels) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TraceSource_ctor_0__2__String_SourceLevels(&__thrown, name.get_handle(), defaultLevel.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Close()
// docid: M:System.Diagnostics.TraceSource.Close
    /**
    Closes all the trace listeners in the trace listener collection.

    */
    open func Close() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:System.Diagnostics.TraceSource.Flush
    /**
    Flushes all the trace listeners in the trace listener collection.

    */
    open func Flush() throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventType, System.Int32, System.Object)
// docid: M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)
    /**
    Writes trace data to the trace listeners in the  collection using the specified event type, event identifier, and trace data.

    - Parameter eventType: One of the enumeration values that specifies the event type of the trace data.
    - Parameter id: A numeric identifier for the event.
    - Parameter data: The trace data.
    */
    open func TraceData(eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__TraceData_0__3__TraceEventType_i32_Object(&__thrown, self.get_handle(), eventType.get_value(), id, data?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceData(System.Diagnostics.TraceEventType, System.Int32, System.Object[])
// docid: M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])
    /**
    Writes trace data to the trace listeners in the  collection using the specified event type, event identifier, and trace data array.

    - Parameter eventType: One of the enumeration values that specifies the event type of the trace data.
    - Parameter id: A numeric identifier for the event.
    - Parameter data: An object array containing the trace data.
    */
    open func TraceData(eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, data : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__TraceData_0__3__TraceEventType_i32_ObjectArray(&__thrown, self.get_handle(), eventType.get_value(), id, (data?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventType, System.Int32)
// docid: M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)
    /**
    Writes a trace event message to the trace listeners in the  collection using the specified event type and event identifier.

    - Parameter eventType: One of the enumeration values that specifies the event type of the trace data.
    - Parameter id: A numeric identifier for the event.
    */
    open func TraceEvent(eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__TraceEvent_0__2__TraceEventType_i32(&__thrown, self.get_handle(), eventType.get_value(), id);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventType, System.Int32, System.String)
// docid: M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)
    /**
    Writes a trace event message to the trace listeners in the  collection using the specified event type, event identifier, and message.

    - Parameter eventType: One of the enumeration values that specifies the event type of the trace data.
    - Parameter id: A numeric identifier for the event.
    - Parameter message: The trace message to write.
    */
    open func TraceEvent(eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__TraceEvent_0__3__TraceEventType_i32_String(&__thrown, self.get_handle(), eventType.get_value(), id, message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceEvent(System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])
// docid: M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
    /**
    Writes a trace event to the trace listeners in the  collection using the specified event type, event identifier, and argument array and format.

    - Parameter eventType: One of the enumeration values that specifies the event type of the trace data.
    - Parameter id: A numeric identifier for the event.
    - Parameter format: A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the  array.
    - Parameter args: An  array containing zero or more objects to format.
    */
    open func TraceEvent(eventType : dotnet.System.Diagnostics.TraceEventType, id : Swift.Int32, format : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__TraceEvent_0__4__TraceEventType_i32_String_ObjectArray(&__thrown, self.get_handle(), eventType.get_value(), id, format?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceInformation(System.String)
// docid: M:System.Diagnostics.TraceSource.TraceInformation(System.String)
    /**
    Writes an informational message to the trace listeners in the  collection using the specified message.

    - Parameter message: The informative message to write.
    */
    open func TraceInformation(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__TraceInformation_0__1__String(&__thrown, self.get_handle(), message?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceInformation(System.String, System.Object[])
// docid: M:System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])
    /**
    Writes an informational message to the trace listeners in the  collection using the specified object array and formatting information.

    - Parameter format: A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the  array.
    - Parameter args: An array containing zero or more objects to format.
    */
    open func TraceInformation(format : Optional<dotnet.System.String>, args : Optional<dotnet.System_Arr<dotnet.System.Object>>) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__TraceInformation_0__2__String_ObjectArray(&__thrown, self.get_handle(), format?.get_handle() ?? nil, (args?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void TraceTransfer(System.Int32, System.String, System.Guid)
// docid: M:System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)
    /**
    Writes a trace transfer message to the trace listeners in the  collection using the specified numeric identifier, message, and related activity identifier.

    - Parameter id: A numeric identifier for the event.
    - Parameter message: The trace message to write.
    - Parameter relatedActivityId: A structure that identifies the related activity.
    */
    open func TraceTransfer(id : Swift.Int32, message : Optional<dotnet.System.String>, relatedActivityId : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__TraceTransfer_0__3__i32_String_Guid(&__thrown, self.get_handle(), id, message?.get_handle() ?? nil, relatedActivityId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Specialized.StringDictionary get_Attributes()
// docid: M:System.Diagnostics.TraceSource.get_Attributes
    open func get_Attributes() throws -> dotnet.System.Collections.Specialized.StringDictionary {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSource_StringDictionary__get_Attributes_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Specialized.StringDictionary(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.TraceListenerCollection get_Listeners()
// docid: M:System.Diagnostics.TraceSource.get_Listeners
    open func get_Listeners() throws -> dotnet.System.Diagnostics.TraceListenerCollection {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSource_TraceListenerCollection__get_Listeners_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.TraceListenerCollection(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Diagnostics.TraceSource.get_Name
    open func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSource_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Diagnostics.SourceSwitch get_Switch()
// docid: M:System.Diagnostics.TraceSource.get_Switch
    open func get_Switch() throws -> dotnet.System.Diagnostics.SourceSwitch {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSource_SourceSwitch__get_Switch_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.SourceSwitch(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Switch(System.Diagnostics.SourceSwitch)
// docid: M:System.Diagnostics.TraceSource.set_Switch(System.Diagnostics.SourceSwitch)
    open func set_Switch(value : dotnet.System.Diagnostics.SourceSwitch) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSource_void__set_Switch_0__1__SourceSwitch(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets the custom switch attributes defined in the application configuration file.

    */
    open var Attributes : dotnet.System.Collections.Specialized.StringDictionary {
        get {
            return try! get_Attributes();
        }
    }
    /**
    Gets the collection of trace listeners for the trace source.

    */
    open var Listeners : dotnet.System.Diagnostics.TraceListenerCollection {
        get {
            return try! get_Listeners();
        }
    }
    /**
    Gets the name of the trace source.

    */
    open var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets or sets the source switch value.

    */
    open var Switch : dotnet.System.Diagnostics.SourceSwitch {
        get {
            return try! get_Switch();
        }
        set(v) {
            return try! set_Switch(value: v);
        }
    }
} // TraceSource


// type: System.Diagnostics.TraceSwitch
    /**
    Provides a multilevel switch to control tracing and debug output without recompiling your code.

    */
open class TraceSwitch
    :
    dotnet.System.Diagnostics.Switch
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Diagnostics_TraceSwitch_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String, System.String)
// docid: M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class, using the specified display name and description.

    - Parameter displayName: The name to display on a user interface.
    - Parameter description: The description of the switch.
    */
    public init(displayName : dotnet.System.String, description : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TraceSwitch_ctor_0__2__String_String(&__thrown, displayName.get_handle(), description?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.String)
// docid: M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class, using the specified display name, description, and default value for the switch.

    - Parameter displayName: The name to display on a user interface.
    - Parameter description: The description of the switch.
    - Parameter defaultSwitchValue: The default value of the switch.
    */
    public init(displayName : dotnet.System.String, description : Optional<dotnet.System.String>, defaultSwitchValue : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Diagnostics_TraceSwitch_ctor_0__3__String_String_String(&__thrown, displayName.get_handle(), description?.get_handle() ?? nil, defaultSwitchValue.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Diagnostics.TraceLevel get_Level()
// docid: M:System.Diagnostics.TraceSwitch.get_Level
    open func get_Level() throws -> dotnet.System.Diagnostics.TraceLevel {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSwitch_TraceLevel__get_Level_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Diagnostics.TraceLevel(val: __return);
        }
    }
    // [IsSpecialName] void set_Level(System.Diagnostics.TraceLevel)
// docid: M:System.Diagnostics.TraceSwitch.set_Level(System.Diagnostics.TraceLevel)
    open func set_Level(value : dotnet.System.Diagnostics.TraceLevel) throws {
        var __thrown : NullableHandle = nil;
        System_Diagnostics_TraceSwitch_void__set_Level_0__1__TraceLevel(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_TraceError()
// docid: M:System.Diagnostics.TraceSwitch.get_TraceError
    open func get_TraceError() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSwitch_bool__get_TraceError_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_TraceInfo()
// docid: M:System.Diagnostics.TraceSwitch.get_TraceInfo
    open func get_TraceInfo() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSwitch_bool__get_TraceInfo_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_TraceVerbose()
// docid: M:System.Diagnostics.TraceSwitch.get_TraceVerbose
    open func get_TraceVerbose() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSwitch_bool__get_TraceVerbose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_TraceWarning()
// docid: M:System.Diagnostics.TraceSwitch.get_TraceWarning
    open func get_TraceWarning() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Diagnostics_TraceSwitch_bool__get_TraceWarning_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets or sets the trace level that determines the messages the switch allows.

    */
    open var Level : dotnet.System.Diagnostics.TraceLevel {
        get {
            return try! get_Level();
        }
        set(v) {
            return try! set_Level(value: v);
        }
    }
    /**
    Gets a value indicating whether the switch allows error-handling messages.

    */
    open var TraceError : Bool {
        get {
            return try! get_TraceError();
        }
    }
    /**
    Gets a value indicating whether the switch allows informational messages.

    */
    open var TraceInfo : Bool {
        get {
            return try! get_TraceInfo();
        }
    }
    /**
    Gets a value indicating whether the switch allows all messages.

    */
    open var TraceVerbose : Bool {
        get {
            return try! get_TraceVerbose();
        }
    }
    /**
    Gets a value indicating whether the switch allows warning messages.

    */
    open var TraceWarning : Bool {
        get {
            return try! get_TraceWarning();
        }
    }
} // TraceSwitch


}


