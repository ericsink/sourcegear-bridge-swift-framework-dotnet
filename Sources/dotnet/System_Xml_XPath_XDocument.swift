// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Xml
// System.Xml.XPath
extension System.Xml.XPath {
// type: System.Xml.XPath.Extensions
public struct Extensions {
    // System.Xml.XPath.XPathNavigator CreateNavigator(System.Xml.Linq.XNode)
// docid: M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)
    /**
    Creates an  for an .

    - Parameter node: An  that can process XPath queries.
    - Returns: An  that can process XPath queries.

    */
    public static func CreateNavigator(node : dotnet.System.Xml.Linq.XNode) throws -> dotnet.System.Xml.XPath.XPathNavigator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_Extensions_XPathNavigator__CreateNavigator_0__1__XNode(&__thrown, node.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNavigator(hndl : __return);
        }
    }
    // System.Xml.XPath.XPathNavigator CreateNavigator(System.Xml.Linq.XNode, System.Xml.XmlNameTable)
// docid: M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)
    /**
    Creates an  for an . The  enables more efficient XPath expression processing.

    - Parameter node: An  that can process an XPath query.
    - Parameter nameTable: A  to be used by .
    - Returns: An  that can process XPath queries.

    */
    public static func CreateNavigator(node : dotnet.System.Xml.Linq.XNode, nameTable : Optional<dotnet.System.Xml.XmlNameTable>) throws -> dotnet.System.Xml.XPath.XPathNavigator {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_Extensions_XPathNavigator__CreateNavigator_0__2__XNode_XmlNameTable(&__thrown, node.get_handle(), nameTable?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.XPathNavigator(hndl : __return);
        }
    }
    // System.Object XPathEvaluate(System.Xml.Linq.XNode, System.String)
// docid: M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)
    /**
    Evaluates an XPath expression.

    - Parameter node: The  on which to evaluate the XPath expression.
    - Parameter expression: A  that contains an XPath expression.
    - Returns: An object that can contain a , a , a , or an .

    */
    public static func XPathEvaluate(node : dotnet.System.Xml.Linq.XNode, expression : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_Extensions_Object__XPathEvaluate_0__2__XNode_String(&__thrown, node.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Object XPathEvaluate(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
    /**
    Evaluates an XPath expression, resolving namespace prefixes using the specified .

    - Parameter node: The  on which to evaluate the XPath expression.
    - Parameter expression: A  that contains an XPath expression.
    - Parameter resolver: A  for the namespace prefixes in the XPath expression.
    - Returns: An object that contains the result of evaluating the expression. The object can be a , a , a , or an .

    */
    public static func XPathEvaluate(node : dotnet.System.Xml.Linq.XNode, expression : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_Extensions_Object__XPathEvaluate_0__3__XNode_String_IXmlNamespaceResolver(&__thrown, node.get_handle(), expression.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
    // System.Xml.Linq.XElement XPathSelectElement(System.Xml.Linq.XNode, System.String)
// docid: M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)
    /**
    Selects an  using a XPath expression.

    - Parameter node: The  on which to evaluate the XPath expression.
    - Parameter expression: A  that contains an XPath expression.
    - Returns: An , or null.

    */
    public static func XPathSelectElement(node : dotnet.System.Xml.Linq.XNode, expression : dotnet.System.String) throws -> Optional<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_Extensions_XElement__XPathSelectElement_0__2__XNode_String(&__thrown, node.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Xml.Linq.XElement XPathSelectElement(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
    /**
    Selects an  using a XPath expression, resolving namespace prefixes using the specified .

    - Parameter node: The  on which to evaluate the XPath expression.
    - Parameter expression: A  that contains an XPath expression.
    - Parameter resolver: An  for the namespace prefixes in the XPath expression.
    - Returns: An , or null.

    */
    public static func XPathSelectElement(node : dotnet.System.Xml.Linq.XNode, expression : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> Optional<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_Extensions_XElement__XPathSelectElement_0__3__XNode_String_IXmlNamespaceResolver(&__thrown, node.get_handle(), expression.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Xml.Linq.XElement(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> XPathSelectElements(System.Xml.Linq.XNode, System.String)
// docid: M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)
    /**
    Selects a collection of elements using an XPath expression.

    - Parameter node: The  on which to evaluate the XPath expression.
    - Parameter expression: A  that contains an XPath expression.
    - Returns: An  of  that contains the selected elements.

    */
    public static func XPathSelectElements(node : dotnet.System.Xml.Linq.XNode, expression : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___XPathSelectElements_0__2__XNode_String(&__thrown, node.get_handle(), expression.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
    // System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> XPathSelectElements(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)
// docid: M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)
    /**
    Selects a collection of elements using an XPath expression, resolving namespace prefixes using the specified .

    - Parameter node: The  on which to evaluate the XPath expression.
    - Parameter expression: A  that contains an XPath expression.
    - Parameter resolver: A  for the namespace prefixes in the XPath expression.
    - Returns: An  of  that contains the selected elements.

    */
    public static func XPathSelectElements(node : dotnet.System.Xml.Linq.XNode, expression : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_Extensions_System_Collections_Generic_IEnumerable_System_Xml_Linq_XElement___XPathSelectElements_0__3__XNode_String_IXmlNamespaceResolver(&__thrown, node.get_handle(), expression.get_handle(), resolver?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerable_1(hndl : __return);
        }
    }
} // Extensions


// type: System.Xml.XPath.XDocumentExtensions
public struct XDocumentExtensions {
    // System.Xml.XPath.IXPathNavigable ToXPathNavigable(System.Xml.Linq.XNode)
// docid: M:System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)
    /**
    Returns an accessor that allows you to navigate and edit the specified .

    - Parameter node: The XML node to navigate.
    - Returns: An interface that provides an accessor to the  class.

    */
    public static func ToXPathNavigable(node : dotnet.System.Xml.Linq.XNode) throws -> dotnet.System.Xml.XPath.IXPathNavigable {
        var __thrown : NullableHandle = nil;
        let __return = System_Xml_XPath_XDocumentExtensions_IXPathNavigable__ToXPathNavigable_0__1__XNode(&__thrown, node.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Xml.XPath.IXPathNavigable(hndl : __return);
        }
    }
} // XDocumentExtensions


}



// EXTENSION METHOD System.Xml.XPath.XPathNavigator CreateNavigator(System.Xml.Linq.XNode)
extension dotnet.System.Xml.Linq.XNode {
    public func CreateNavigator() throws -> dotnet.System.Xml.XPath.XPathNavigator {
        return try dotnet.System.Xml.XPath.Extensions.CreateNavigator(node: self);
    }
}

// EXTENSION METHOD System.Xml.XPath.XPathNavigator CreateNavigator(System.Xml.Linq.XNode, System.Xml.XmlNameTable)
extension dotnet.System.Xml.Linq.XNode {
    public func CreateNavigator(nameTable : Optional<dotnet.System.Xml.XmlNameTable>) throws -> dotnet.System.Xml.XPath.XPathNavigator {
        return try dotnet.System.Xml.XPath.Extensions.CreateNavigator(node: self, nameTable: nameTable);
    }
}

// EXTENSION METHOD System.Object XPathEvaluate(System.Xml.Linq.XNode, System.String)
extension dotnet.System.Xml.Linq.XNode {
    public func XPathEvaluate(expression : dotnet.System.String) throws -> dotnet.System.Object {
        return try dotnet.System.Xml.XPath.Extensions.XPathEvaluate(node: self, expression: expression);
    }
}

// EXTENSION METHOD System.Object XPathEvaluate(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)
extension dotnet.System.Xml.Linq.XNode {
    public func XPathEvaluate(expression : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Object {
        return try dotnet.System.Xml.XPath.Extensions.XPathEvaluate(node: self, expression: expression, resolver: resolver);
    }
}

// EXTENSION METHOD System.Xml.Linq.XElement XPathSelectElement(System.Xml.Linq.XNode, System.String)
extension dotnet.System.Xml.Linq.XNode {
    public func XPathSelectElement(expression : dotnet.System.String) throws -> Optional<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.XPath.Extensions.XPathSelectElement(node: self, expression: expression);
    }
}

// EXTENSION METHOD System.Xml.Linq.XElement XPathSelectElement(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)
extension dotnet.System.Xml.Linq.XNode {
    public func XPathSelectElement(expression : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> Optional<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.XPath.Extensions.XPathSelectElement(node: self, expression: expression, resolver: resolver);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> XPathSelectElements(System.Xml.Linq.XNode, System.String)
extension dotnet.System.Xml.Linq.XNode {
    public func XPathSelectElements(expression : dotnet.System.String) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.XPath.Extensions.XPathSelectElements(node: self, expression: expression);
    }
}

// EXTENSION METHOD System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> XPathSelectElements(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)
extension dotnet.System.Xml.Linq.XNode {
    public func XPathSelectElements(expression : dotnet.System.String, resolver : Optional<dotnet.System.Xml.IXmlNamespaceResolver>) throws -> dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Xml.Linq.XElement> {
        return try dotnet.System.Xml.XPath.Extensions.XPathSelectElements(node: self, expression: expression, resolver: resolver);
    }
}

// EXTENSION METHOD System.Xml.XPath.IXPathNavigable ToXPathNavigable(System.Xml.Linq.XNode)
extension dotnet.System.Xml.Linq.XNode {
    public func ToXPathNavigable() throws -> dotnet.System.Xml.XPath.IXPathNavigable {
        return try dotnet.System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(node: self);
    }
}

