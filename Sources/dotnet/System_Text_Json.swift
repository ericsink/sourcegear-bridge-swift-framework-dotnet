// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Text
// System.Text.Json
extension System.Text.Json {
// type: System.Text.Json.JsonCommentHandling
    /**
    Defines how the  struct handles comments.

    */
public struct JsonCommentHandling : SGBridgeGenericValue {
    let v : Swift.UInt8;
    public init(val: Swift.UInt8) { self.v = val; }
    public func get_value() -> Swift.UInt8 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonCommentHandling_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.UInt8(gval); }
    // static field: System.Text.Json.JsonCommentHandling Disallow
    /**
    Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a  is thrown. This is the default value.

    */
    public static var Disallow : dotnet.System.Text.Json.JsonCommentHandling {
        get {
        let __return = dotnet.System.Text.Json.JsonCommentHandling(val: System_Text_Json_JsonCommentHandling_get_Disallow());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonCommentHandling Skip
    /**
    Allows comments within the JSON input and ignores them. The  behaves as if no comments are present.

    */
    public static var Skip : dotnet.System.Text.Json.JsonCommentHandling {
        get {
        let __return = dotnet.System.Text.Json.JsonCommentHandling(val: System_Text_Json_JsonCommentHandling_get_Skip());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonCommentHandling Allow
    /**
    Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.

    */
    public static var Allow : dotnet.System.Text.Json.JsonCommentHandling {
        get {
        let __return = dotnet.System.Text.Json.JsonCommentHandling(val: System_Text_Json_JsonCommentHandling_get_Allow());
            return __return;
        }
    }
} // JsonCommentHandling


// type: System.Text.Json.JsonDocument
    /**
    Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.

    */
public final class JsonDocument
    :
    dotnet.System.Object,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonDocument_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Dispose()
// docid: M:System.Text.Json.JsonDocument.Dispose
    /**
    Releases the resources used by this  instance.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonDocument_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Text.Json.JsonDocument Parse(System.Buffers.ReadOnlySequence<System.Byte>, System.Text.Json.JsonDocumentOptions)
// docid: M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)
    /**
    Parses a sequence as UTF-8-encoded text representing a single JSON byte value into a JsonDocument.

    - Parameter utf8Json: The JSON text to parse.
    - Parameter options: Options to control the reader behavior during parsing.
    - Returns: A JsonDocument representation of the JSON value.

    */
    public class func Parse(utf8Json : dotnet.System.Buffers.ReadOnlySequence_1<Swift.UInt8>, options : dotnet.System.Text.Json.JsonDocumentOptions/* TODO default valuetype */) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocument_JsonDocument__Parse_0__2__System_Buffers_ReadOnlySequence_u8__JsonDocumentOptions(&__thrown, utf8Json.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Text.Json.JsonDocument Parse(System.IO.Stream, System.Text.Json.JsonDocumentOptions)
// docid: M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)
    /**
    Parses a  as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.

    - Parameter utf8Json: The JSON data to parse.
    - Parameter options: Options to control the reader behavior during parsing.
    - Returns: A JsonDocument representation of the JSON value.

    */
    public class func Parse(utf8Json : dotnet.System.IO.Stream, options : dotnet.System.Text.Json.JsonDocumentOptions/* TODO default valuetype */) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocument_JsonDocument__Parse_0__2__Stream_JsonDocumentOptions(&__thrown, utf8Json.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Text.Json.JsonDocument Parse(System.ReadOnlyMemory<System.Byte>, System.Text.Json.JsonDocumentOptions)
// docid: M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)
    /**
    Parses memory as UTF-8-encoded text representing a single JSON byte value into a JsonDocument.

    - Parameter utf8Json: The JSON text to parse.
    - Parameter options: Options to control the reader behavior during parsing.
    - Returns: A JsonDocument representation of the JSON value.

    */
    public class func Parse(utf8Json : dotnet.System.ReadOnlyMemory_1<Swift.UInt8>, options : dotnet.System.Text.Json.JsonDocumentOptions/* TODO default valuetype */) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocument_JsonDocument__Parse_0__2__System_ReadOnlyMemory_u8__JsonDocumentOptions(&__thrown, utf8Json.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Text.Json.JsonDocument Parse(System.ReadOnlyMemory<System.Char>, System.Text.Json.JsonDocumentOptions)
// docid: M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)
    /**
    Parses text representing a single JSON character value into a JsonDocument.

    - Parameter json: The JSON text to parse.
    - Parameter options: Options to control the reader behavior during parsing.
    - Returns: A JsonDocument representation of the JSON value.

    */
    public class func Parse(json : dotnet.System.ReadOnlyMemory_1<dotnet.System.Char>, options : dotnet.System.Text.Json.JsonDocumentOptions/* TODO default valuetype */) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocument_JsonDocument__Parse_0__2__System_ReadOnlyMemory_System_Char__JsonDocumentOptions(&__thrown, json.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Text.Json.JsonDocument Parse(System.String, System.Text.Json.JsonDocumentOptions)
// docid: M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)
    /**
    Parses text representing a single JSON string value into a JsonDocument.

    - Parameter json: The JSON text to parse.
    - Parameter options: Options to control the reader behavior during parsing.
    - Returns: A JsonDocument representation of the JSON value.

    */
    public class func Parse(json : dotnet.System.String, options : dotnet.System.Text.Json.JsonDocumentOptions/* TODO default valuetype */) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocument_JsonDocument__Parse_0__2__String_JsonDocumentOptions(&__thrown, json.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task<System.Text.Json.JsonDocument> ParseAsync(System.IO.Stream, System.Text.Json.JsonDocumentOptions, System.Threading.CancellationToken)
// docid: M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)
    /**
    Parses a  as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.

    - Parameter utf8Json: The JSON data to parse.
    - Parameter options: Options to control the reader behavior during parsing.
    - Parameter cancellationToken: The token to monitor for cancellation requests.
    - Returns: A task to produce a JsonDocument representation of the JSON value.

    */
    public class func ParseAsync(utf8Json : dotnet.System.IO.Stream, options : dotnet.System.Text.Json.JsonDocumentOptions/* TODO default valuetype */, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task_1<dotnet.System.Text.Json.JsonDocument> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocument_System_Threading_Tasks_Task_System_Text_Json_JsonDocument___ParseAsync_0__3__Stream_JsonDocumentOptions_CancellationToken(&__thrown, utf8Json.get_handle(), options.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task_1(hndl : __return);
        }
    }
    // void WriteTo(System.Text.Json.Utf8JsonWriter)
// docid: M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)
    /**
    Writes the document to the provided writer as a JSON value.

    - Parameter writer: The writer to which to write the document.
    */
    public func WriteTo(writer : dotnet.System.Text.Json.Utf8JsonWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonDocument_void__WriteTo_0__1__Utf8JsonWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonElement get_RootElement()
// docid: M:System.Text.Json.JsonDocument.get_RootElement
    public func get_RootElement() throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocument_JsonElement__get_RootElement_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
    /**
    Gets the root element of this JSON document.

    */
    public var RootElement : dotnet.System.Text.Json.JsonElement {
        get {
            return try! get_RootElement();
        }
    }
} // JsonDocument


// type: System.Text.Json.JsonDocumentOptions
// boxed value type
    /**
    Provides the ability for the user to define custom behavior when parsing JSON to create a .

    */
public final class JsonDocumentOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonDocumentOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.

    */
    public var AllowTrailingCommas : Bool {
        get {
            return try! get_AllowTrailingCommas();
        }
        set(v) {
            return try! set_AllowTrailingCommas(value: v);
        }
    }
    /**
    Gets or sets a value that determines how the  handles comments when reading through the JSON data.

    */
    public var CommentHandling : dotnet.System.Text.Json.JsonCommentHandling {
        get {
            return try! get_CommentHandling();
        }
        set(v) {
            return try! set_CommentHandling(value: v);
        }
    }
    /**
    Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.

    */
    public var MaxDepth : Swift.Int32 {
        get {
            return try! get_MaxDepth();
        }
        set(v) {
            return try! set_MaxDepth(value: v);
        }
    }
    public override init() {
        let h = System_Text_Json_JsonDocumentOptions_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] bool get_AllowTrailingCommas()
// docid: M:System.Text.Json.JsonDocumentOptions.get_AllowTrailingCommas
    public func get_AllowTrailingCommas() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocumentOptions_bool__get_AllowTrailingCommas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowTrailingCommas(bool)
// docid: M:System.Text.Json.JsonDocumentOptions.set_AllowTrailingCommas(System.Boolean)
    public func set_AllowTrailingCommas(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonDocumentOptions_void__set_AllowTrailingCommas_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonCommentHandling get_CommentHandling()
// docid: M:System.Text.Json.JsonDocumentOptions.get_CommentHandling
    public func get_CommentHandling() throws -> dotnet.System.Text.Json.JsonCommentHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocumentOptions_JsonCommentHandling__get_CommentHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonCommentHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_CommentHandling(System.Text.Json.JsonCommentHandling)
// docid: M:System.Text.Json.JsonDocumentOptions.set_CommentHandling(System.Text.Json.JsonCommentHandling)
    public func set_CommentHandling(value : dotnet.System.Text.Json.JsonCommentHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonDocumentOptions_void__set_CommentHandling_0__1__JsonCommentHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxDepth()
// docid: M:System.Text.Json.JsonDocumentOptions.get_MaxDepth
    public func get_MaxDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonDocumentOptions_i32__get_MaxDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxDepth(System.Int32)
// docid: M:System.Text.Json.JsonDocumentOptions.set_MaxDepth(System.Int32)
    public func set_MaxDepth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonDocumentOptions_void__set_MaxDepth_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JsonDocumentOptions


// type: System.Text.Json.JsonElement
// boxed value type
    /**
    Represents a specific JSON value within a .

    */
public final class JsonElement
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonElement_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the type of the current JSON value.

    */
    public var ValueKind : dotnet.System.Text.Json.JsonValueKind {
        get {
            return try! get_ValueKind();
        }
    }
    public override init() {
        let h = System_Text_Json_JsonElement_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Text.Json.JsonElement Clone()
// docid: M:System.Text.Json.JsonElement.Clone
    /**
    Gets a JsonElement that can be safely stored beyond the lifetime of the original .

    - Returns: A JsonElement that can be safely stored beyond the lifetime of the original .

    */
    public func Clone() throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_JsonElement__Clone_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
    // System.Text.Json.JsonElement.ArrayEnumerator EnumerateArray()
// docid: M:System.Text.Json.JsonElement.EnumerateArray
    /**
    Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.

    - Returns: An enumerator to enumerate the values in the JSON array represented by this JsonElement.

    */
    public func EnumerateArray() throws -> dotnet.System.Text.Json.JsonElement_ArrayEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_JsonElement_ArrayEnumerator__EnumerateArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement_ArrayEnumerator(hndl : __return);
        }
    }
    // System.Text.Json.JsonElement.ObjectEnumerator EnumerateObject()
// docid: M:System.Text.Json.JsonElement.EnumerateObject
    /**
    Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.

    - Returns: An enumerator to enumerate the properties in the JSON object represented by this JsonElement.

    */
    public func EnumerateObject() throws -> dotnet.System.Text.Json.JsonElement_ObjectEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_JsonElement_ObjectEnumerator__EnumerateObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement_ObjectEnumerator(hndl : __return);
        }
    }
    // System.Int32 GetArrayLength()
// docid: M:System.Text.Json.JsonElement.GetArrayLength
    /**
    Gets the number of values contained within the current array value.

    - Returns: The number of values contained within the current array value.

    */
    public func GetArrayLength() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_i32__GetArrayLength_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool GetBoolean()
// docid: M:System.Text.Json.JsonElement.GetBoolean
    /**
    Gets the value of the element as a .

    - Returns: The value of the element as a .

    */
    public func GetBoolean() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_bool__GetBoolean_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Byte GetByte()
// docid: M:System.Text.Json.JsonElement.GetByte
    /**
    Gets the current JSON number as a .

    - Returns: The current JSON number as a .

    */
    public func GetByte() throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_u8__GetByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Byte[] GetBytesFromBase64()
// docid: M:System.Text.Json.JsonElement.GetBytesFromBase64
    /**
    Gets the value of the element as a byte array.

    - Returns: The value decoded as a byte array.

    */
    public func GetBytesFromBase64() throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_u8Array__GetBytesFromBase64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.DateTime GetDateTime()
// docid: M:System.Text.Json.JsonElement.GetDateTime
    /**
    Gets the value of the element as a .

    - Returns: The value of the element as a .

    */
    public func GetDateTime() throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_DateTime__GetDateTime_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // System.DateTimeOffset GetDateTimeOffset()
// docid: M:System.Text.Json.JsonElement.GetDateTimeOffset
    /**
    Gets the value of the element as a .

    - Returns: The value of the element as a .

    */
    public func GetDateTimeOffset() throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_DateTimeOffset__GetDateTimeOffset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // System.Decimal GetDecimal()
// docid: M:System.Text.Json.JsonElement.GetDecimal
    /**
    Gets the current JSON number as a .

    - Returns: The current JSON number as a .

    */
    public func GetDecimal() throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_Decimal__GetDecimal_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // System.Double GetDouble()
// docid: M:System.Text.Json.JsonElement.GetDouble
    /**
    Gets the current JSON number as a .

    - Returns: The current JSON number as a .

    */
    public func GetDouble() throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_f64__GetDouble_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Guid GetGuid()
// docid: M:System.Text.Json.JsonElement.GetGuid
    /**
    Gets the value of the element as a .

    - Returns: The value of the element as a .

    */
    public func GetGuid() throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_Guid__GetGuid_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // System.Int16 GetInt16()
// docid: M:System.Text.Json.JsonElement.GetInt16
    /**
    Gets the current JSON number as an .

    - Returns: The current JSON number as an .

    */
    public func GetInt16() throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_i16__GetInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetInt32()
// docid: M:System.Text.Json.JsonElement.GetInt32
    /**
    Gets the current JSON number as an .

    - Returns: The current JSON number as an .

    */
    public func GetInt32() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_i32__GetInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int64 GetInt64()
// docid: M:System.Text.Json.JsonElement.GetInt64
    /**
    Gets the current JSON number as an .

    - Returns: The current JSON number as an .

    */
    public func GetInt64() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_i64__GetInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
// TODO COPE (write_all_methods) (span) System.Text.Json.JsonElement GetProperty(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) System.Text.Json.JsonElement GetProperty(System.ReadOnlySpan<System.Char>)
    // System.Text.Json.JsonElement GetProperty(System.String)
// docid: M:System.Text.Json.JsonElement.GetProperty(System.String)
    /**
    Gets a  representing the value of a required property identified by .

    - Parameter propertyName: The name of the property whose value is to be returned.
    - Returns: A  representing the value of the requested property.

    */
    public func GetProperty(propertyName : dotnet.System.String) throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_JsonElement__GetProperty_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
    // System.String GetRawText()
// docid: M:System.Text.Json.JsonElement.GetRawText
    /**
    Gets a string that represents the original input data backing this value.

    - Returns: The original input data backing this value.

    */
    public func GetRawText() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_String__GetRawText_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.SByte GetSByte()
// docid: M:System.Text.Json.JsonElement.GetSByte
    /**
    Gets the current JSON number as an .

    - Returns: The current JSON number as an .

    */
    public func GetSByte() throws -> Swift.Int8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_i8__GetSByte_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single GetSingle()
// docid: M:System.Text.Json.JsonElement.GetSingle
    /**
    Gets the current JSON number as a .

    - Returns: The current JSON number as a .

    */
    public func GetSingle() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_f32__GetSingle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String GetString()
// docid: M:System.Text.Json.JsonElement.GetString
    /**
    Gets the value of the element as a .

    - Returns: The value of the element as a .

    */
    public func GetString() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_String__GetString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.UInt16 GetUInt16()
// docid: M:System.Text.Json.JsonElement.GetUInt16
    /**
    Gets the current JSON number as a .

    - Returns: The current JSON number as a .

    */
    public func GetUInt16() throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_u16__GetUInt16_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt32 GetUInt32()
// docid: M:System.Text.Json.JsonElement.GetUInt32
    /**
    Gets the current JSON number as a .

    - Returns: The current JSON number as a .

    */
    public func GetUInt32() throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_u32__GetUInt32_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.UInt64 GetUInt64()
// docid: M:System.Text.Json.JsonElement.GetUInt64
    /**
    Gets the current JSON number as a .

    - Returns: The current JSON number as a .

    */
    public func GetUInt64() throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_u64__GetUInt64_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Text.Json.JsonElement.ToString
    /**
    Gets a string representation for the current value appropriate to the value type.

    - Returns: A string representation for the current value appropriate to the value type.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // bool TryGetByte(ref System.Byte)
// docid: M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)
    /**
    Attempts to represent the current JSON number as a .

    - Parameter value: When the method returns, contains the byte equivalent of the current JSON number if the conversion succeeded.
    - Returns: 
         if the number can be represented as a ; otherwise, .

    */
    public func TryGetByte(value : inout Swift.UInt8) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetByte_0__1__outu8(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetBytesFromBase64(ref System.Byte[])
// docid: M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)
    /**
    Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.

    - Parameter value: If the method succeeds, contains the decoded binary representation of the Base64 text.
    - Returns: 
         if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, .

    */
    public func TryGetBytesFromBase64(value : inout dotnet.System_Arr<Swift.UInt8>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Text_Json_JsonElement_bool__TryGetBytesFromBase64_0__1__outu8Array(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System_Arr<Swift.UInt8>(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetDateTime(ref System.DateTime)
// docid: M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)
    /**
    Attempts to represent the current JSON string as a .

    - Parameter value: When this method returns, contains the date and time value equivalent to the current JSON string.
    - Returns: 
         if the string can be represented as a ; otherwise, .

    */
    public func TryGetDateTime(value : inout dotnet.System.DateTime) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Text_Json_JsonElement_bool__TryGetDateTime_0__1__outDateTime(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.DateTime(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetDateTimeOffset(ref System.DateTimeOffset)
// docid: M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)
    /**
    Attempts to represent the current JSON string as a .

    - Parameter value: When this method returns, contains the date and time equivalent to the current JSON string.
    - Returns: 
         if the string can be represented as a ; otherwise, .

    */
    public func TryGetDateTimeOffset(value : inout dotnet.System.DateTimeOffset) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Text_Json_JsonElement_bool__TryGetDateTimeOffset_0__1__outDateTimeOffset(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.DateTimeOffset(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetDecimal(ref System.Decimal)
// docid: M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)
    /**
    Attempts to represent the current JSON number as a .

    - Parameter value: When this method returns, contains the decimal equivalent of the current JSON number.
    - Returns: 
         if the number can be represented as a ; otherwise, .

    */
    public func TryGetDecimal(value : inout dotnet.System.Decimal) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Text_Json_JsonElement_bool__TryGetDecimal_0__1__outDecimal(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Decimal(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetDouble(ref System.Double)
// docid: M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)
    /**
    Attempts to represent the current JSON number as a .

    - Parameter value: When this method returns, contains a double-precision floating point value equivalent to the current JSON number.
    - Returns: 
         if the number can be represented as a ; otherwise, .

    */
    public func TryGetDouble(value : inout Swift.Double) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetDouble_0__1__outf64(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetGuid(ref System.Guid)
// docid: M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)
    /**
    Attempts to represent the current JSON string as a .

    - Parameter value: When this method returns, contains the GUID equivalent to the current JSON string.
    - Returns: 
         if the string can be represented as a ; otherwise, .

    */
    public func TryGetGuid(value : inout dotnet.System.Guid) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Text_Json_JsonElement_bool__TryGetGuid_0__1__outGuid(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Guid(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetInt16(ref System.Int16)
// docid: M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)
    /**
    Attempts to represent the current JSON number as an .

    - Parameter value: When the method returns, contains the 16-bit integer equivalent of the current JSON number if the conversion succeeded.
    - Returns: 
         if the number can be represented as an ; otherwise, .

    */
    public func TryGetInt16(value : inout Swift.Int16) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetInt16_0__1__outi16(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetInt32(ref System.Int32)
// docid: M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)
    /**
    Attempts to represent the current JSON number as an .

    - Parameter value: When this method returns, contains the 32-biut integer value equivalent to the current JSON number.
    - Returns: 
         if the number can be represented as an ; otherwise, .

    */
    public func TryGetInt32(value : inout Swift.Int32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetInt32_0__1__outi32(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetInt64(ref System.Int64)
// docid: M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)
    /**
    Attempts to represent the current JSON number as a .

    - Parameter value: When this method returns, contains the 64-bit integer value equivalent to the current JSON number.
    - Returns: 
         if the number can be represented as a ; otherwise, .

    */
    public func TryGetInt64(value : inout Swift.Int64) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetInt64_0__1__outi64(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool TryGetProperty(System.ReadOnlySpan<System.Byte>, ref System.Text.Json.JsonElement)
// TODO COPE (write_all_methods) (span) bool TryGetProperty(System.ReadOnlySpan<System.Char>, ref System.Text.Json.JsonElement)
    // bool TryGetProperty(System.String, ref System.Text.Json.JsonElement)
// docid: M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)
    /**
    Looks for a property named  in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the  argument.

    - Parameter propertyName: The name of the property to find.
    - Parameter value: When this method returns, contains the value of the specified property.
    - Returns: 
         if the property was found; otherwise, .

    */
    public func TryGetProperty(propertyName : dotnet.System.String, value : inout dotnet.System.Text.Json.JsonElement) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value.get_handle();
        let __return = System_Text_Json_JsonElement_bool__TryGetProperty_0__2__String_outJsonElement(&__thrown, self.get_handle(), propertyName.get_handle(), &_tmp_out_value);
        let _tmp2_value = dotnet.System.Text.Json.JsonElement(hndl: _tmp_out_value);
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetSByte(ref System.SByte)
// docid: M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)
    /**
    Attempts to represent the current JSON number as an .

    - Parameter value: When the method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded.
    - Returns: 
         if the number can be represented as an ; otherwise, .

    */
    public func TryGetSByte(value : inout Swift.Int8) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetSByte_0__1__outi8(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetSingle(ref System.Single)
// docid: M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)
    /**
    Attempts to represent the current JSON number as a .

    - Parameter value: When this method returns, contains the single-precision floating point value equivalent to the current JSON number.
    - Returns: 
         if the number can be represented as a ; otherwise, .

    */
    public func TryGetSingle(value : inout Swift.Float) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetSingle_0__1__outf32(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetUInt16(ref System.UInt16)
// docid: M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)
    /**
    Attempts to represent the current JSON number as a .

    - Parameter value: When the method returns, contains the unsigned 16-bit integer equivalent of the current JSON number if the conversion succeeded.
    - Returns: 
         if the number can be represented as a ; otherwise, .

    */
    public func TryGetUInt16(value : inout Swift.UInt16) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetUInt16_0__1__outu16(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetUInt32(ref System.UInt32)
// docid: M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)
    /**
    Attempts to represent the current JSON number as a .

    - Parameter value: When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number.
    - Returns: 
         if the number can be represented as a ; otherwise, .

    */
    public func TryGetUInt32(value : inout Swift.UInt32) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetUInt32_0__1__outu32(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetUInt64(ref System.UInt64)
// docid: M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)
    /**
    Attempts to represent the current JSON number as a .

    - Parameter value: When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number.
    - Returns: 
         if the number can be represented as a ; otherwise, .

    */
    public func TryGetUInt64(value : inout Swift.UInt64) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_value = value;
        let __return = System_Text_Json_JsonElement_bool__TryGetUInt64_0__1__outu64(&__thrown, self.get_handle(), &_tmp_out_value);
        let _tmp2_value = _tmp_out_value;
            value = _tmp2_value;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO COPE (write_all_methods) (span) bool ValueEquals(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) bool ValueEquals(System.ReadOnlySpan<System.Char>)
    // bool ValueEquals(System.String)
// docid: M:System.Text.Json.JsonElement.ValueEquals(System.String)
    /**
    Compares a specified string to the string value of this element.

    - Parameter text: The text to compare against.
    - Returns: 
         if the string value of this element matches ; otherwise, .

    */
    public func ValueEquals(text : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_bool__ValueEquals_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void WriteTo(System.Text.Json.Utf8JsonWriter)
// docid: M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)
    /**
    Writes the element to the specified writer as a JSON value.

    - Parameter writer: The writer to which to write the element.
    */
    public func WriteTo(writer : dotnet.System.Text.Json.Utf8JsonWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonElement_void__WriteTo_0__1__Utf8JsonWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonValueKind get_ValueKind()
// docid: M:System.Text.Json.JsonElement.get_ValueKind
    public func get_ValueKind() throws -> dotnet.System.Text.Json.JsonValueKind {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_JsonValueKind__get_ValueKind_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonValueKind(val: __return);
        }
    }
    // [IsSpecialName] System.Text.Json.JsonElement get_Item(System.Int32)
// docid: M:System.Text.Json.JsonElement.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    public func get_Item(index : Swift.Int32) throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_JsonElement__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
} // JsonElement


// type: System.Text.Json.JsonElement+ArrayEnumerator
// boxed value type
    /**
    Represents an enumerator for the contents of a JSON array.

    */
public final class JsonElement_ArrayEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonElement_ArrayEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element in the collection at the current position of the enumerator.

    */
    public var Current : dotnet.System.Text.Json.JsonElement {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Text_Json_JsonElement_ArrayEnumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose
    /**
    Releases the resources used by this  instance.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonElement_ArrayEnumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Text.Json.JsonElement.ArrayEnumerator GetEnumerator()
// docid: M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator
    /**
    Returns an enumerator that iterates through a collection.

    - Returns: An enumerator that can be used to iterate through the array.

    */
    public func GetEnumerator() throws -> dotnet.System.Text.Json.JsonElement_ArrayEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_ArrayEnumerator_JsonElement_ArrayEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement_ArrayEnumerator(hndl : __return);
        }
    }
    // bool MoveNext()
// docid: M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext
    /**
    Advances the enumerator to the next element of the collection.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_ArrayEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Text.Json.JsonElement.ArrayEnumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the collection.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonElement_ArrayEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonElement get_Current()
// docid: M:System.Text.Json.JsonElement.ArrayEnumerator.get_Current
    public func get_Current() throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_ArrayEnumerator_JsonElement__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
} // JsonElement_ArrayEnumerator


// type: System.Text.Json.JsonElement+ObjectEnumerator
// boxed value type
    /**
    Represents an enumerator for the properties of a JSON object.

    */
public final class JsonElement_ObjectEnumerator
    :
    dotnet.System.Object,
    System_Collections_IEnumerable,
    System_Collections_IEnumerator,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonElement_ObjectEnumerator_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the element in the collection at the current position of the enumerator.

    */
    public var Current : dotnet.System.Text.Json.JsonProperty {
        get {
            return try! get_Current();
        }
    }
    public override init() {
        let h = System_Text_Json_JsonElement_ObjectEnumerator_implicit_ctor();
            super.init(hndl: h);
    }
    // void Dispose()
// docid: M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose
    /**
    Releases the resources used by this  instance.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonElement_ObjectEnumerator_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Text.Json.JsonElement.ObjectEnumerator GetEnumerator()
// docid: M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator
    /**
    Returns an enumerator that iterates the properties of an object.

    - Returns: An enumerator that can be used to iterate through the object.

    */
    public func GetEnumerator() throws -> dotnet.System.Text.Json.JsonElement_ObjectEnumerator {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_ObjectEnumerator_JsonElement_ObjectEnumerator__GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement_ObjectEnumerator(hndl : __return);
        }
    }
    // bool MoveNext()
// docid: M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext
    /**
    Advances the enumerator to the next element of the collection.

    - Returns: 
         if the enumerator was successfully advanced to the next element;  if the enumerator has passed the end of the collection.

    */
    public func MoveNext() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_ObjectEnumerator_bool__MoveNext_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Reset()
// docid: M:System.Text.Json.JsonElement.ObjectEnumerator.Reset
    /**
    Sets the enumerator to its initial position, which is before the first element in the collection.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonElement_ObjectEnumerator_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonProperty get_Current()
// docid: M:System.Text.Json.JsonElement.ObjectEnumerator.get_Current
    public func get_Current() throws -> dotnet.System.Text.Json.JsonProperty {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonElement_ObjectEnumerator_JsonProperty__get_Current_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonProperty(hndl : __return);
        }
    }
} // JsonElement_ObjectEnumerator


// type: System.Text.Json.JsonEncodedText
// boxed value type
    /**
    Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.

    */
public final class JsonEncodedText
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonEncodedText_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public override init() {
        let h = System_Text_Json_JsonEncodedText_implicit_ctor();
            super.init(hndl: h);
    }
// TODO COPE (write_all_methods) (span) System.Text.Json.JsonEncodedText Encode(System.ReadOnlySpan<System.Byte>, System.Text.Encodings.Web.JavaScriptEncoder)
// TODO COPE (write_all_methods) (span) System.Text.Json.JsonEncodedText Encode(System.ReadOnlySpan<System.Char>, System.Text.Encodings.Web.JavaScriptEncoder)
    // System.Text.Json.JsonEncodedText Encode(System.String, System.Text.Encodings.Web.JavaScriptEncoder)
// docid: M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)
    /**
    Encodes the string text value as a JSON string.

    - Parameter value: The value to convert to JSON encoded text.
    - Parameter encoder: The encoder to use when escaping the string, or  to use the default encoder.
    - Returns: The encoded JSON text.

    */
    public class func Encode(value : dotnet.System.String, encoder : Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder> = nil) throws -> dotnet.System.Text.Json.JsonEncodedText {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonEncodedText_JsonEncodedText__Encode_0__2__String_JavaScriptEncoder(&__thrown, value.get_handle(), encoder?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonEncodedText(hndl : __return);
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Text.Json.JsonEncodedText.Equals(System.Object)
    /**
    Determines whether this instance and a specified object, which must also be a  instance, have the same value.

    - Parameter obj: The object to compare to this instance.
    - Returns: 
         if the current instance and  are equal; otherwise, .

    */
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonEncodedText_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Text.Json.JsonEncodedText)
// docid: M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)
    /**
    Determines whether this instance and another specified  instance have the same value.

    - Parameter other: The object to compare to this instance.
    - Returns: 
         if this instance and  have the same value; otherwise, .

    */
    public func Equals(other : dotnet.System.Text.Json.JsonEncodedText) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonEncodedText_bool__Equals_0__1__JsonEncodedText(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Text.Json.JsonEncodedText.GetHashCode
    /**
    Returns the hash code for this .

    - Returns: The hash code for this instance.

    */
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonEncodedText_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.String ToString()
// docid: M:System.Text.Json.JsonEncodedText.ToString
    /**
    Converts the value of this instance to a .

    - Returns: The underlying UTF-16 encoded string.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonEncodedText_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // JsonEncodedText


// type: System.Text.Json.JsonException
    /**
    Defines a custom exception object that is thrown when invalid JSON text is encountered, when the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.

    */
open class JsonException
    :
    dotnet.System.Exception
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.JsonException.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.Text.Json.JsonException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with a specified error message.

    - Parameter message: The context-specific error message.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class, with a specified error message and a reference to the inner exception that is the cause of this exception.

    - Parameter message: The context-specific error message.
    - Parameter innerException: The exception that caused the current exception.
    */
    public override init(message : Optional<dotnet.System.String>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Nullable<System.Int64>, System.Nullable<System.Int64>)
// docid: M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})
    /**
    Creates a new exception object to relay error information to the user.

    - Parameter message: The context-specific error message.
    - Parameter path: The path where the invalid JSON was encountered.
    - Parameter lineNumber: The line number (starting at 0) at which the invalid JSON was encountered when deserializing.
    - Parameter bytePositionInLine: The byte count within the current line (starting at 0) where the invalid JSON was encountered.
    */
    public init(message : Optional<dotnet.System.String>, path : Optional<dotnet.System.String>, lineNumber : Optional<Swift.Int64>, bytePositionInLine : Optional<Swift.Int64>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonException_ctor_0__4__String_String_System_Nullable_i64__System_Nullable_i64_(&__thrown, message?.get_handle() ?? nil, path?.get_handle() ?? nil, (lineNumber != nil) ? System_Int64_box(lineNumber!) : nil, (bytePositionInLine != nil) ? System_Int64_box(bytePositionInLine!) : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String, System.Nullable<System.Int64>, System.Nullable<System.Int64>, System.Exception)
// docid: M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)
    /**
    Creates a new exception object to relay error information to the user that includes a specified inner exception.

    - Parameter message: The context-specific error message.
    - Parameter path: The path where the invalid JSON was encountered.
    - Parameter lineNumber: The line number (starting at 0) at which the invalid JSON was encountered when deserializing.
    - Parameter bytePositionInLine: The byte count (starting at 0) within the current line where the invalid JSON was encountered.
    - Parameter innerException: The exception that caused the current exception.
    */
    public init(message : Optional<dotnet.System.String>, path : Optional<dotnet.System.String>, lineNumber : Optional<Swift.Int64>, bytePositionInLine : Optional<Swift.Int64>, innerException : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonException_ctor_0__5__String_String_System_Nullable_i64__System_Nullable_i64__Exception(&__thrown, message?.get_handle() ?? nil, path?.get_handle() ?? nil, (lineNumber != nil) ? System_Int64_box(lineNumber!) : nil, (bytePositionInLine != nil) ? System_Int64_box(bytePositionInLine!) : nil, innerException?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
// docid: M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    /**
    Sets the  with information about the exception.

    - Parameter info: The serialized object data about the exception being thrown.
    - Parameter context: An object that contains contextual information about the source or destination.
    */
    open override func GetObjectData(info : dotnet.System.Runtime.Serialization.SerializationInfo, context : dotnet.System.Runtime.Serialization.StreamingContext) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonException_void__GetObjectData_0__2__SerializationInfo_StreamingContext(&__thrown, self.get_handle(), info.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_BytePositionInLine()
// docid: M:System.Text.Json.JsonException.get_BytePositionInLine
    open func get_BytePositionInLine() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonException_System_Nullable_i64___get_BytePositionInLine_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_LineNumber()
// docid: M:System.Text.Json.JsonException.get_LineNumber
    open func get_LineNumber() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonException_System_Nullable_i64___get_LineNumber_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.String get_Message()
// docid: M:System.Text.Json.JsonException.get_Message
    open override func get_Message() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonException_String__get_Message_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:System.Text.Json.JsonException.get_Path
    open func get_Path() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonException_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the zero-based number of bytes read within the current line before the exception.

    */
    open var BytePositionInLine : Optional<Swift.Int64> {
        get {
            return try! get_BytePositionInLine();
        }
    }
    /**
    Gets the zero-based number of lines read before the exception.

    */
    open var LineNumber : Optional<Swift.Int64> {
        get {
            return try! get_LineNumber();
        }
    }
    /**
    Gets a message that describes the current exception.

    */
    open override var Message : dotnet.System.String {
        get {
            return try! get_Message();
        }
    }
    /**
    Gets The path within the JSON where the exception was encountered.

    */
    open var Path : Optional<dotnet.System.String> {
        get {
            return try! get_Path();
        }
    }
} // JsonException


// type: System.Text.Json.JsonNamingPolicy
    /**
    Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.

    */
open class JsonNamingPolicy
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonNamingPolicy_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.String ConvertName(System.String)
// docid: M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)
    /**
    When overridden in a derived class, converts the specified name according to the policy.

    - Parameter name: The name to convert.
    - Returns: The converted name.

    */
    open func ConvertName(name : dotnet.System.String) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonNamingPolicy_String__ConvertName_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.JsonNamingPolicy get_CamelCase()
// docid: M:System.Text.Json.JsonNamingPolicy.get_CamelCase
    open class func get_CamelCase() throws -> dotnet.System.Text.Json.JsonNamingPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonNamingPolicy_JsonNamingPolicy__get_CamelCase_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonNamingPolicy(hndl : __return);
        }
    }
    /**
    Gets the naming policy for camel-casing.

    */
    public static var CamelCase : dotnet.System.Text.Json.JsonNamingPolicy {
        get {
            return try! get_CamelCase();
        }
    }
} // JsonNamingPolicy


// type: System.Text.Json.JsonProperty
// boxed value type
    /**
    Represents a single property for a JSON object.

    */
public final class JsonProperty
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonProperty_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the name of this property.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Gets the value of this property.

    */
    public var Value : dotnet.System.Text.Json.JsonElement {
        get {
            return try! get_Value();
        }
    }
    public override init() {
        let h = System_Text_Json_JsonProperty_implicit_ctor();
            super.init(hndl: h);
    }
// TODO COPE (write_all_methods) (span) bool NameEquals(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) bool NameEquals(System.ReadOnlySpan<System.Char>)
    // bool NameEquals(System.String)
// docid: M:System.Text.Json.JsonProperty.NameEquals(System.String)
    /**
    Compares the specified string to the name of this property.

    - Parameter text: The text to compare against.
    - Returns: 
         if the name of this property matches ; otherwise .

    */
    public func NameEquals(text : Optional<dotnet.System.String>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonProperty_bool__NameEquals_0__1__String(&__thrown, self.get_handle(), text?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.String ToString()
// docid: M:System.Text.Json.JsonProperty.ToString
    /**
    Provides a string representation of the property for debugging purposes.

    - Returns: A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonProperty_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void WriteTo(System.Text.Json.Utf8JsonWriter)
// docid: M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)
    /**
    Writes the property to the provided writer as a named JSON object property.

    - Parameter writer: The writer to which to write the property.
    */
    public func WriteTo(writer : dotnet.System.Text.Json.Utf8JsonWriter) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonProperty_void__WriteTo_0__1__Utf8JsonWriter(&__thrown, self.get_handle(), writer.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Text.Json.JsonProperty.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonProperty_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.JsonElement get_Value()
// docid: M:System.Text.Json.JsonProperty.get_Value
    public func get_Value() throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonProperty_JsonElement__get_Value_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
} // JsonProperty


// type: System.Text.Json.JsonReaderOptions
// boxed value type
    /**
    Provides the ability for the user to define custom behavior when reading JSON.

    */
public final class JsonReaderOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonReaderOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.

    */
    public var AllowTrailingCommas : Bool {
        get {
            return try! get_AllowTrailingCommas();
        }
        set(v) {
            return try! set_AllowTrailingCommas(value: v);
        }
    }
    /**
    Gets or sets a value that determines how the  handles comments when reading through the JSON data.

    */
    public var CommentHandling : dotnet.System.Text.Json.JsonCommentHandling {
        get {
            return try! get_CommentHandling();
        }
        set(v) {
            return try! set_CommentHandling(value: v);
        }
    }
    /**
    Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.

    */
    public var MaxDepth : Swift.Int32 {
        get {
            return try! get_MaxDepth();
        }
        set(v) {
            return try! set_MaxDepth(value: v);
        }
    }
    public override init() {
        let h = System_Text_Json_JsonReaderOptions_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] bool get_AllowTrailingCommas()
// docid: M:System.Text.Json.JsonReaderOptions.get_AllowTrailingCommas
    public func get_AllowTrailingCommas() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonReaderOptions_bool__get_AllowTrailingCommas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowTrailingCommas(bool)
// docid: M:System.Text.Json.JsonReaderOptions.set_AllowTrailingCommas(System.Boolean)
    public func set_AllowTrailingCommas(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonReaderOptions_void__set_AllowTrailingCommas_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonCommentHandling get_CommentHandling()
// docid: M:System.Text.Json.JsonReaderOptions.get_CommentHandling
    public func get_CommentHandling() throws -> dotnet.System.Text.Json.JsonCommentHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonReaderOptions_JsonCommentHandling__get_CommentHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonCommentHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_CommentHandling(System.Text.Json.JsonCommentHandling)
// docid: M:System.Text.Json.JsonReaderOptions.set_CommentHandling(System.Text.Json.JsonCommentHandling)
    public func set_CommentHandling(value : dotnet.System.Text.Json.JsonCommentHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonReaderOptions_void__set_CommentHandling_0__1__JsonCommentHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxDepth()
// docid: M:System.Text.Json.JsonReaderOptions.get_MaxDepth
    public func get_MaxDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonReaderOptions_i32__get_MaxDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxDepth(System.Int32)
// docid: M:System.Text.Json.JsonReaderOptions.set_MaxDepth(System.Int32)
    public func set_MaxDepth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonReaderOptions_void__set_MaxDepth_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JsonReaderOptions


// type: System.Text.Json.JsonReaderState
// boxed value type
    /**
    Defines an opaque type that holds and saves all the relevant state information, which must be provided to the  to continue reading after processing incomplete data.

    */
public final class JsonReaderState
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonReaderState_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets the custom behavior to use when reading JSON data using the  struct that may deviate from strict adherence to the JSON specification, which is the default behavior.

    */
    public var Options : dotnet.System.Text.Json.JsonReaderOptions {
        get {
            return try! get_Options();
        }
    }
    // .ctor(System.Text.Json.JsonReaderOptions)
// docid: M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)
    /**
    Constructs a new  instance.

    - Parameter options: Defines the customized behavior of the  that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the  follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.
    */
    public init(options : dotnet.System.Text.Json.JsonReaderOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonReaderState_ctor_0__1__JsonReaderOptions(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Text_Json_JsonReaderState_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Text.Json.JsonReaderOptions get_Options()
// docid: M:System.Text.Json.JsonReaderState.get_Options
    public func get_Options() throws -> dotnet.System.Text.Json.JsonReaderOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonReaderState_JsonReaderOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonReaderOptions(hndl : __return);
        }
    }
} // JsonReaderState


// type: System.Text.Json.JsonSerializer
public struct JsonSerializer {
    // System.Object Deserialize(System.IO.Stream, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions)
    public static func Deserialize(utf8Json : dotnet.System.IO.Stream, returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__Stream_Type_JsonSerializerOptions(&__thrown, utf8Json.get_handle(), returnType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.IO.Stream, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.IO.Stream,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func Deserialize(utf8Json : dotnet.System.IO.Stream, returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__Stream_Type_JsonSerializerContext(&__thrown, utf8Json.get_handle(), returnType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (span) System.Object Deserialize(System.ReadOnlySpan<System.Byte>, System.Type, System.Text.Json.JsonSerializerOptions)
// TODO COPE (write_all_methods) (span) System.Object Deserialize(System.ReadOnlySpan<System.Byte>, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// TODO COPE (write_all_methods) (span) System.Object Deserialize(System.ReadOnlySpan<System.Char>, System.Type, System.Text.Json.JsonSerializerOptions)
// TODO COPE (write_all_methods) (span) System.Object Deserialize(System.ReadOnlySpan<System.Char>, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
    // System.Object Deserialize(System.String, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)
    /**
    Parses the text representing a single JSON value into an instance of a specified type.

    - Parameter json: The JSON text to parse.
    - Parameter returnType: The type of the object to convert to and return.
    - Parameter options: Options to control the behavior during parsing.
    - Returns: A  representation of the JSON value.

    */
    public static func Deserialize(json : dotnet.System.String, returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__String_Type_JsonSerializerOptions(&__thrown, json.get_handle(), returnType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.String, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func Deserialize(json : dotnet.System.String, returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__String_Type_JsonSerializerContext(&__thrown, json.get_handle(), returnType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Text.Json.JsonDocument, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonDocument,System.Type,System.Text.Json.JsonSerializerOptions)
    public static func Deserialize(document : dotnet.System.Text.Json.JsonDocument, returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__JsonDocument_Type_JsonSerializerOptions(&__thrown, document.get_handle(), returnType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Text.Json.JsonDocument, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonDocument,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func Deserialize(document : dotnet.System.Text.Json.JsonDocument, returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__JsonDocument_Type_JsonSerializerContext(&__thrown, document.get_handle(), returnType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Text.Json.JsonElement, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonElement,System.Type,System.Text.Json.JsonSerializerOptions)
    public static func Deserialize(element : dotnet.System.Text.Json.JsonElement, returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__JsonElement_Type_JsonSerializerOptions(&__thrown, element.get_handle(), returnType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Text.Json.JsonElement, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonElement,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func Deserialize(element : dotnet.System.Text.Json.JsonElement, returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__JsonElement_Type_JsonSerializerContext(&__thrown, element.get_handle(), returnType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Text.Json.Nodes.JsonNode, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.JsonSerializerOptions)
    public static func Deserialize(node : Optional<dotnet.System.Text.Json.Nodes.JsonNode>, returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__JsonNode_Type_JsonSerializerOptions(&__thrown, node?.get_handle() ?? nil, returnType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object Deserialize(System.Text.Json.Nodes.JsonNode, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func Deserialize(node : Optional<dotnet.System.Text.Json.Nodes.JsonNode>, returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Object__Deserialize_0__3__JsonNode_Type_JsonSerializerContext(&__thrown, node?.get_handle() ?? nil, returnType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Threading.Tasks.ValueTask<System.Object> DeserializeAsync(System.IO.Stream, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.

    - Parameter utf8Json: The JSON data to parse.
    - Parameter returnType: The type of the object to convert to and return.
    - Parameter options: Options to control the behavior during reading.
    - Parameter cancellationToken: A cancellation token that may be used to cancel the read operation.
    - Returns: A  representation of the JSON value.

    */
    public static func DeserializeAsync(utf8Json : dotnet.System.IO.Stream, returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_System_Threading_Tasks_ValueTask_object___DeserializeAsync_0__4__Stream_Type_JsonSerializerOptions_CancellationToken(&__thrown, utf8Json.get_handle(), returnType.get_handle(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
    // System.Threading.Tasks.ValueTask<System.Object> DeserializeAsync(System.IO.Stream, System.Type, System.Text.Json.Serialization.JsonSerializerContext, System.Threading.CancellationToken)
// docid: M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)
    public static func DeserializeAsync(utf8Json : dotnet.System.IO.Stream, returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_System_Threading_Tasks_ValueTask_object___DeserializeAsync_0__4__Stream_Type_JsonSerializerContext_CancellationToken(&__thrown, utf8Json.get_handle(), returnType.get_handle(), context.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Collections.Generic.IAsyncEnumerable<TValue> DeserializeAsyncEnumerable<TValue>(System.IO.Stream, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// TODO COPE (write_all_methods) (unused generic param) System.Threading.Tasks.ValueTask<TValue> DeserializeAsync<TValue>(System.IO.Stream, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
    // System.Threading.Tasks.ValueTask<TValue> DeserializeAsync<TValue>(System.IO.Stream, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
// docid: M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func DeserializeAsync<UTValue : SGBridgeGenericValue>(utf8Json : dotnet.System.IO.Stream, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.ValueTask_1<UTValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_System_Threading_Tasks_ValueTask_UTValue___DeserializeAsync_1__3__Stream_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue__CancellationToken(UTValue.get_type_handle(), &__thrown, utf8Json.get_handle(), jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TValue Deserialize<TValue>(System.IO.Stream, System.Text.Json.JsonSerializerOptions)
    // TValue Deserialize<TValue>(System.IO.Stream, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.Deserialize``1(System.IO.Stream,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func Deserialize<UTValue : SGBridgeGenericValue>(utf8Json : dotnet.System.IO.Stream, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_UTValue__Deserialize_1__2__Stream_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, utf8Json.get_handle(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TValue Deserialize<TValue>(System.String, System.Text.Json.JsonSerializerOptions)
    // TValue Deserialize<TValue>(System.String, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func Deserialize<UTValue : SGBridgeGenericValue>(json : dotnet.System.String, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_UTValue__Deserialize_1__2__String_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, json.get_handle(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TValue Deserialize<TValue>(System.Text.Json.JsonDocument, System.Text.Json.JsonSerializerOptions)
    // TValue Deserialize<TValue>(System.Text.Json.JsonDocument, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonDocument,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func Deserialize<UTValue : SGBridgeGenericValue>(document : dotnet.System.Text.Json.JsonDocument, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_UTValue__Deserialize_1__2__JsonDocument_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, document.get_handle(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TValue Deserialize<TValue>(System.Text.Json.JsonElement, System.Text.Json.JsonSerializerOptions)
    // TValue Deserialize<TValue>(System.Text.Json.JsonElement, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonElement,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func Deserialize<UTValue : SGBridgeGenericValue>(element : dotnet.System.Text.Json.JsonElement, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_UTValue__Deserialize_1__2__JsonElement_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, element.get_handle(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) TValue Deserialize<TValue>(System.Text.Json.Nodes.JsonNode, System.Text.Json.JsonSerializerOptions)
    // TValue Deserialize<TValue>(System.Text.Json.Nodes.JsonNode, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Nodes.JsonNode,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func Deserialize<UTValue : SGBridgeGenericValue>(node : Optional<dotnet.System.Text.Json.Nodes.JsonNode>, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> UTValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_UTValue__Deserialize_1__2__JsonNode_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, node?.get_handle() ?? nil, jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UTValue(gval: __return);
        }
    }
    // void Serialize(System.IO.Stream, System.Object, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Serialize(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)
    public static func Serialize(utf8Json : dotnet.System.IO.Stream, value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializer_void__Serialize_0__4__Stream_Object_Type_JsonSerializerOptions(&__thrown, utf8Json.get_handle(), value?.get_handle() ?? nil, inputType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.IO.Stream, System.Object, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.Serialize(System.IO.Stream,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func Serialize(utf8Json : dotnet.System.IO.Stream, value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializer_void__Serialize_0__4__Stream_Object_Type_JsonSerializerContext(&__thrown, utf8Json.get_handle(), value?.get_handle() ?? nil, inputType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String Serialize(System.Object, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)
    /**
    Converts the value of a specified type into a JSON string.

    - Parameter value: The value to convert.
    - Parameter inputType: The type of the  to convert.
    - Parameter options: Options to control the conversion behavior.
    - Returns: The JSON string representation of the value.

    */
    public static func Serialize(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_String__Serialize_0__3__Object_Type_JsonSerializerOptions(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Serialize(System.Object, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func Serialize(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_String__Serialize_0__3__Object_Type_JsonSerializerContext(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void Serialize(System.Text.Json.Utf8JsonWriter, System.Object, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)
    /**
    Writes the JSON representation of the specified type to the provided writer.

    - Parameter writer: The JSON writer to write to.
    - Parameter value: The value to convert and write.
    - Parameter inputType: The type of the  to convert.
    - Parameter options: Options to control serialization behavior.
    */
    public static func Serialize(writer : dotnet.System.Text.Json.Utf8JsonWriter, value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializer_void__Serialize_0__4__Utf8JsonWriter_Object_Type_JsonSerializerOptions(&__thrown, writer.get_handle(), value?.get_handle() ?? nil, inputType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize(System.Text.Json.Utf8JsonWriter, System.Object, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func Serialize(writer : dotnet.System.Text.Json.Utf8JsonWriter, value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializer_void__Serialize_0__4__Utf8JsonWriter_Object_Type_JsonSerializerContext(&__thrown, writer.get_handle(), value?.get_handle() ?? nil, inputType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task SerializeAsync(System.IO.Stream, System.Object, System.Type, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.

    - Parameter utf8Json: The UTF-8 stream to write to.
    - Parameter value: The value to convert.
    - Parameter inputType: The type of the  to convert.
    - Parameter options: Options to control serialization behavior.
    - Parameter cancellationToken: A token that may be used to cancel the write operation.
    - Returns: A task that represents the asynchronous write operation.

    */
    public static func SerializeAsync(utf8Json : dotnet.System.IO.Stream, value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Task__SerializeAsync_0__5__Stream_Object_Type_JsonSerializerOptions_CancellationToken(&__thrown, utf8Json.get_handle(), value?.get_handle() ?? nil, inputType.get_handle(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SerializeAsync(System.IO.Stream, System.Object, System.Type, System.Text.Json.Serialization.JsonSerializerContext, System.Threading.CancellationToken)
// docid: M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)
    public static func SerializeAsync(utf8Json : dotnet.System.IO.Stream, value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Task__SerializeAsync_0__5__Stream_Object_Type_JsonSerializerContext_CancellationToken(&__thrown, utf8Json.get_handle(), value?.get_handle() ?? nil, inputType.get_handle(), context.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SerializeAsync<TValue>(System.IO.Stream, TValue, System.Text.Json.JsonSerializerOptions, System.Threading.CancellationToken)
// docid: M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)
    /**
    Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.

    - Parameter utf8Json: The UTF-8 stream to write to.
    - Parameter value: The value to convert.
    - Parameter options: Options to control serialization behavior.
    - Parameter cancellationToken: A token that may be used to cancel the write operation.
    - Returns: A task that represents the asynchronous write operation.

    */
    public static func SerializeAsync<UTValue : SGBridgeGenericValue>(utf8Json : dotnet.System.IO.Stream, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Task__SerializeAsync_1__4__Stream_UTValue_JsonSerializerOptions_CancellationToken(UTValue.get_type_handle(), &__thrown, utf8Json.get_handle(), value.to_gval(), options?.get_handle() ?? nil, cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Threading.Tasks.Task SerializeAsync<TValue>(System.IO.Stream, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>, System.Threading.CancellationToken)
// docid: M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)
    public static func SerializeAsync<UTValue : SGBridgeGenericValue>(utf8Json : dotnet.System.IO.Stream, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>, cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_Task__SerializeAsync_1__4__Stream_UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue__CancellationToken(UTValue.get_type_handle(), &__thrown, utf8Json.get_handle(), value.to_gval(), jsonTypeInfo.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // System.Text.Json.JsonDocument SerializeToDocument(System.Object, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.SerializeToDocument(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)
    public static func SerializeToDocument(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonDocument__SerializeToDocument_0__3__Object_Type_JsonSerializerOptions(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Text.Json.JsonDocument SerializeToDocument(System.Object, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.SerializeToDocument(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func SerializeToDocument(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonDocument__SerializeToDocument_0__3__Object_Type_JsonSerializerContext(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Text.Json.JsonDocument SerializeToDocument<TValue>(TValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.SerializeToDocument``1(``0,System.Text.Json.JsonSerializerOptions)
    public static func SerializeToDocument<UTValue : SGBridgeGenericValue>(value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonDocument__SerializeToDocument_1__2__UTValue_JsonSerializerOptions(UTValue.get_type_handle(), &__thrown, value.to_gval(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Text.Json.JsonDocument SerializeToDocument<TValue>(TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.SerializeToDocument``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func SerializeToDocument<UTValue : SGBridgeGenericValue>(value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> dotnet.System.Text.Json.JsonDocument {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonDocument__SerializeToDocument_1__2__UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, value.to_gval(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonDocument(hndl : __return);
        }
    }
    // System.Text.Json.JsonElement SerializeToElement(System.Object, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.SerializeToElement(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)
    public static func SerializeToElement(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonElement__SerializeToElement_0__3__Object_Type_JsonSerializerOptions(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
    // System.Text.Json.JsonElement SerializeToElement(System.Object, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.SerializeToElement(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func SerializeToElement(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonElement__SerializeToElement_0__3__Object_Type_JsonSerializerContext(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
    // System.Text.Json.JsonElement SerializeToElement<TValue>(TValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.SerializeToElement``1(``0,System.Text.Json.JsonSerializerOptions)
    public static func SerializeToElement<UTValue : SGBridgeGenericValue>(value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonElement__SerializeToElement_1__2__UTValue_JsonSerializerOptions(UTValue.get_type_handle(), &__thrown, value.to_gval(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
    // System.Text.Json.JsonElement SerializeToElement<TValue>(TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.SerializeToElement``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func SerializeToElement<UTValue : SGBridgeGenericValue>(value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> dotnet.System.Text.Json.JsonElement {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonElement__SerializeToElement_1__2__UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, value.to_gval(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonElement(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonNode SerializeToNode(System.Object, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.SerializeToNode(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)
    public static func SerializeToNode(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonNode__SerializeToNode_0__3__Object_Type_JsonSerializerOptions(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonNode SerializeToNode(System.Object, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.SerializeToNode(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func SerializeToNode(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonNode__SerializeToNode_0__3__Object_Type_JsonSerializerContext(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonNode SerializeToNode<TValue>(TValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.SerializeToNode``1(``0,System.Text.Json.JsonSerializerOptions)
    public static func SerializeToNode<UTValue : SGBridgeGenericValue>(value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonNode__SerializeToNode_1__2__UTValue_JsonSerializerOptions(UTValue.get_type_handle(), &__thrown, value.to_gval(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonNode SerializeToNode<TValue>(TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.SerializeToNode``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func SerializeToNode<UTValue : SGBridgeGenericValue>(value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_JsonNode__SerializeToNode_1__2__UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, value.to_gval(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Byte[] SerializeToUtf8Bytes(System.Object, System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)
    /**
    Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.

    - Parameter value: The value to convert.
    - Parameter inputType: The type of the  to convert.
    - Parameter options: Options to control the conversion behavior.
    - Returns: A JSON string representation of the value, encoded as UTF-8 bytes.

    */
    public static func SerializeToUtf8Bytes(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_u8Array__SerializeToUtf8Bytes_0__3__Object_Type_JsonSerializerOptions(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] SerializeToUtf8Bytes(System.Object, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
// docid: M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)
    public static func SerializeToUtf8Bytes(value : Optional<dotnet.System.Object>, inputType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_u8Array__SerializeToUtf8Bytes_0__3__Object_Type_JsonSerializerContext(&__thrown, value?.get_handle() ?? nil, inputType.get_handle(), context.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] SerializeToUtf8Bytes<TValue>(TValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)
    /**
    Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.

    - Parameter value: The value to convert.
    - Parameter options: Options to control the conversion behavior.
    - Returns: A JSON string representation of the value, encoded as UTF-8 bytes.

    */
    public static func SerializeToUtf8Bytes<UTValue : SGBridgeGenericValue>(value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_u8Array__SerializeToUtf8Bytes_1__2__UTValue_JsonSerializerOptions(UTValue.get_type_handle(), &__thrown, value.to_gval(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // System.Byte[] SerializeToUtf8Bytes<TValue>(TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func SerializeToUtf8Bytes<UTValue : SGBridgeGenericValue>(value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> dotnet.System_Arr<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_u8Array__SerializeToUtf8Bytes_1__2__UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, value.to_gval(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<Swift.UInt8>(hndl : __return);
        }
    }
    // void Serialize<TValue>(System.IO.Stream, TValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Serialize``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions)
    public static func Serialize<UTValue : SGBridgeGenericValue>(utf8Json : dotnet.System.IO.Stream, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializer_void__Serialize_1__3__Stream_UTValue_JsonSerializerOptions(UTValue.get_type_handle(), &__thrown, utf8Json.get_handle(), value.to_gval(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize<TValue>(System.IO.Stream, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.Serialize``1(System.IO.Stream,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func Serialize<UTValue : SGBridgeGenericValue>(utf8Json : dotnet.System.IO.Stream, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializer_void__Serialize_1__3__Stream_UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, utf8Json.get_handle(), value.to_gval(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize<TValue>(System.Text.Json.Utf8JsonWriter, TValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)
    /**
    Writes the JSON representation of a type specified by a generic type parameter to the provided writer.

    - Parameter writer: A JSON writer to write to.
    - Parameter value: The value to convert and write.
    - Parameter options: Options to control serialization behavior.
    */
    public static func Serialize<UTValue : SGBridgeGenericValue>(writer : dotnet.System.Text.Json.Utf8JsonWriter, value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializer_void__Serialize_1__3__Utf8JsonWriter_UTValue_JsonSerializerOptions(UTValue.get_type_handle(), &__thrown, writer.get_handle(), value.to_gval(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Serialize<TValue>(System.Text.Json.Utf8JsonWriter, TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func Serialize<UTValue : SGBridgeGenericValue>(writer : dotnet.System.Text.Json.Utf8JsonWriter, value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializer_void__Serialize_1__3__Utf8JsonWriter_UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, writer.get_handle(), value.to_gval(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String Serialize<TValue>(TValue, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)
    /**
    Converts the value of a type specified by a generic type parameter into a JSON string.

    - Parameter value: The value to convert.
    - Parameter options: Options to control serialization behavior.
    - Returns: A JSON string representation of the value.

    */
    public static func Serialize<UTValue : SGBridgeGenericValue>(value : UTValue, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_String__Serialize_1__2__UTValue_JsonSerializerOptions(UTValue.get_type_handle(), &__thrown, value.to_gval(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String Serialize<TValue>(TValue, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
// docid: M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})
    public static func Serialize<UTValue : SGBridgeGenericValue>(value : UTValue, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializer_String__Serialize_1__2__UTValue_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTValue_(UTValue.get_type_handle(), &__thrown, value.to_gval(), jsonTypeInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
} // JsonSerializer


// type: System.Text.Json.JsonSerializerDefaults
    /**
    Specifies what default options are used by .

    */
public struct JsonSerializerDefaults : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonSerializerDefaults_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Text.Json.JsonSerializerDefaults General
    /**
    Specifies that general-purpose values should be used. These are the same settings applied if a  isn't specified.

    */
    public static var General : dotnet.System.Text.Json.JsonSerializerDefaults {
        get {
        let __return = dotnet.System.Text.Json.JsonSerializerDefaults(val: System_Text_Json_JsonSerializerDefaults_get_General());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonSerializerDefaults Web
    /**
    Specifies that values should be used more appropriate to web-based scenarios.

    */
    public static var Web : dotnet.System.Text.Json.JsonSerializerDefaults {
        get {
        let __return = dotnet.System.Text.Json.JsonSerializerDefaults(val: System_Text_Json_JsonSerializerDefaults_get_Web());
            return __return;
        }
    }
} // JsonSerializerDefaults


// type: System.Text.Json.JsonSerializerOptions
    /**
    Provides options to be used with .

    */
public final class JsonSerializerOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonSerializerOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.JsonSerializerOptions.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonSerializerOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Text.Json.JsonSerializerDefaults)
// docid: M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)
    /**
    Constructs a new  instance with a predefined set of options determined by the specified .

    - Parameter defaults: The  to reason about.
    */
    public init(defaults : dotnet.System.Text.Json.JsonSerializerDefaults) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonSerializerOptions_ctor_0__1__JsonSerializerDefaults(&__thrown, defaults.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)
    /**
    Copies the options from a  instance to a new instance.

    - Parameter options: The options instance to copy options from.
    */
    public init(options : dotnet.System.Text.Json.JsonSerializerOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_JsonSerializerOptions_ctor_0__1__JsonSerializerOptions(&__thrown, options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) void AddContext<TContext>()
    // System.Text.Json.Serialization.JsonConverter GetConverter(System.Type)
// docid: M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)
    /**
    Returns the converter for the specified type.

    - Parameter typeToConvert: The type to return a converter for.
    - Returns: The first converter that supports the given type, or  if there is no converter.

    */
    public func GetConverter(typeToConvert : dotnet.System.Type_) throws -> dotnet.System.Text.Json.Serialization.JsonConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_JsonConverter__GetConverter_0__1__Type(&__thrown, self.get_handle(), typeToConvert.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_AllowTrailingCommas()
// docid: M:System.Text.Json.JsonSerializerOptions.get_AllowTrailingCommas
    public func get_AllowTrailingCommas() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_bool__get_AllowTrailingCommas_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_AllowTrailingCommas(bool)
// docid: M:System.Text.Json.JsonSerializerOptions.set_AllowTrailingCommas(System.Boolean)
    public func set_AllowTrailingCommas(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_AllowTrailingCommas_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.Generic.IList<System.Text.Json.Serialization.JsonConverter> get_Converters()
// docid: M:System.Text.Json.JsonSerializerOptions.get_Converters
    public func get_Converters() throws -> dotnet.System.Collections.Generic.IList_1<dotnet.System.Text.Json.Serialization.JsonConverter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_System_Collections_Generic_IList_System_Text_Json_Serialization_JsonConverter___get_Converters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IList_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_DefaultBufferSize()
// docid: M:System.Text.Json.JsonSerializerOptions.get_DefaultBufferSize
    public func get_DefaultBufferSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_i32__get_DefaultBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_DefaultBufferSize(System.Int32)
// docid: M:System.Text.Json.JsonSerializerOptions.set_DefaultBufferSize(System.Int32)
    public func set_DefaultBufferSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_DefaultBufferSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonIgnoreCondition get_DefaultIgnoreCondition()
// docid: M:System.Text.Json.JsonSerializerOptions.get_DefaultIgnoreCondition
    public func get_DefaultIgnoreCondition() throws -> dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_JsonIgnoreCondition__get_DefaultIgnoreCondition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonIgnoreCondition(val: __return);
        }
    }
    // [IsSpecialName] void set_DefaultIgnoreCondition(System.Text.Json.Serialization.JsonIgnoreCondition)
// docid: M:System.Text.Json.JsonSerializerOptions.set_DefaultIgnoreCondition(System.Text.Json.Serialization.JsonIgnoreCondition)
    public func set_DefaultIgnoreCondition(value : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_DefaultIgnoreCondition_0__1__JsonIgnoreCondition(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonNamingPolicy get_DictionaryKeyPolicy()
// docid: M:System.Text.Json.JsonSerializerOptions.get_DictionaryKeyPolicy
    public func get_DictionaryKeyPolicy() throws -> Optional<dotnet.System.Text.Json.JsonNamingPolicy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_JsonNamingPolicy__get_DictionaryKeyPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.JsonNamingPolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DictionaryKeyPolicy(System.Text.Json.JsonNamingPolicy)
// docid: M:System.Text.Json.JsonSerializerOptions.set_DictionaryKeyPolicy(System.Text.Json.JsonNamingPolicy)
    public func set_DictionaryKeyPolicy(value : Optional<dotnet.System.Text.Json.JsonNamingPolicy>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_DictionaryKeyPolicy_0__1__JsonNamingPolicy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Encodings.Web.JavaScriptEncoder get_Encoder()
// docid: M:System.Text.Json.JsonSerializerOptions.get_Encoder
    public func get_Encoder() throws -> Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_JavaScriptEncoder__get_Encoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encodings.Web.JavaScriptEncoder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Encoder(System.Text.Encodings.Web.JavaScriptEncoder)
// docid: M:System.Text.Json.JsonSerializerOptions.set_Encoder(System.Text.Encodings.Web.JavaScriptEncoder)
    public func set_Encoder(value : Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_Encoder_0__1__JavaScriptEncoder(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreNullValues()
// docid: M:System.Text.Json.JsonSerializerOptions.get_IgnoreNullValues
    public func get_IgnoreNullValues() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_bool__get_IgnoreNullValues_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreNullValues(bool)
// docid: M:System.Text.Json.JsonSerializerOptions.set_IgnoreNullValues(System.Boolean)
    public func set_IgnoreNullValues(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_IgnoreNullValues_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreReadOnlyFields()
// docid: M:System.Text.Json.JsonSerializerOptions.get_IgnoreReadOnlyFields
    public func get_IgnoreReadOnlyFields() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_bool__get_IgnoreReadOnlyFields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreReadOnlyFields(bool)
// docid: M:System.Text.Json.JsonSerializerOptions.set_IgnoreReadOnlyFields(System.Boolean)
    public func set_IgnoreReadOnlyFields(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_IgnoreReadOnlyFields_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreReadOnlyProperties()
// docid: M:System.Text.Json.JsonSerializerOptions.get_IgnoreReadOnlyProperties
    public func get_IgnoreReadOnlyProperties() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_bool__get_IgnoreReadOnlyProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreReadOnlyProperties(bool)
// docid: M:System.Text.Json.JsonSerializerOptions.set_IgnoreReadOnlyProperties(System.Boolean)
    public func set_IgnoreReadOnlyProperties(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_IgnoreReadOnlyProperties_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IncludeFields()
// docid: M:System.Text.Json.JsonSerializerOptions.get_IncludeFields
    public func get_IncludeFields() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_bool__get_IncludeFields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeFields(bool)
// docid: M:System.Text.Json.JsonSerializerOptions.set_IncludeFields(System.Boolean)
    public func set_IncludeFields(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_IncludeFields_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxDepth()
// docid: M:System.Text.Json.JsonSerializerOptions.get_MaxDepth
    public func get_MaxDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_i32__get_MaxDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxDepth(System.Int32)
// docid: M:System.Text.Json.JsonSerializerOptions.set_MaxDepth(System.Int32)
    public func set_MaxDepth(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_MaxDepth_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonNumberHandling get_NumberHandling()
// docid: M:System.Text.Json.JsonSerializerOptions.get_NumberHandling
    public func get_NumberHandling() throws -> dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_JsonNumberHandling__get_NumberHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonNumberHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_NumberHandling(System.Text.Json.Serialization.JsonNumberHandling)
// docid: M:System.Text.Json.JsonSerializerOptions.set_NumberHandling(System.Text.Json.Serialization.JsonNumberHandling)
    public func set_NumberHandling(value : dotnet.System.Text.Json.Serialization.JsonNumberHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_NumberHandling_0__1__JsonNumberHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_PropertyNameCaseInsensitive()
// docid: M:System.Text.Json.JsonSerializerOptions.get_PropertyNameCaseInsensitive
    public func get_PropertyNameCaseInsensitive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_bool__get_PropertyNameCaseInsensitive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PropertyNameCaseInsensitive(bool)
// docid: M:System.Text.Json.JsonSerializerOptions.set_PropertyNameCaseInsensitive(System.Boolean)
    public func set_PropertyNameCaseInsensitive(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_PropertyNameCaseInsensitive_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonNamingPolicy get_PropertyNamingPolicy()
// docid: M:System.Text.Json.JsonSerializerOptions.get_PropertyNamingPolicy
    public func get_PropertyNamingPolicy() throws -> Optional<dotnet.System.Text.Json.JsonNamingPolicy> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_JsonNamingPolicy__get_PropertyNamingPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.JsonNamingPolicy(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyNamingPolicy(System.Text.Json.JsonNamingPolicy)
// docid: M:System.Text.Json.JsonSerializerOptions.set_PropertyNamingPolicy(System.Text.Json.JsonNamingPolicy)
    public func set_PropertyNamingPolicy(value : Optional<dotnet.System.Text.Json.JsonNamingPolicy>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_PropertyNamingPolicy_0__1__JsonNamingPolicy(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonCommentHandling get_ReadCommentHandling()
// docid: M:System.Text.Json.JsonSerializerOptions.get_ReadCommentHandling
    public func get_ReadCommentHandling() throws -> dotnet.System.Text.Json.JsonCommentHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_JsonCommentHandling__get_ReadCommentHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonCommentHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_ReadCommentHandling(System.Text.Json.JsonCommentHandling)
// docid: M:System.Text.Json.JsonSerializerOptions.set_ReadCommentHandling(System.Text.Json.JsonCommentHandling)
    public func set_ReadCommentHandling(value : dotnet.System.Text.Json.JsonCommentHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_ReadCommentHandling_0__1__JsonCommentHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.ReferenceHandler get_ReferenceHandler()
// docid: M:System.Text.Json.JsonSerializerOptions.get_ReferenceHandler
    public func get_ReferenceHandler() throws -> Optional<dotnet.System.Text.Json.Serialization.ReferenceHandler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_ReferenceHandler__get_ReferenceHandler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Serialization.ReferenceHandler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ReferenceHandler(System.Text.Json.Serialization.ReferenceHandler)
// docid: M:System.Text.Json.JsonSerializerOptions.set_ReferenceHandler(System.Text.Json.Serialization.ReferenceHandler)
    public func set_ReferenceHandler(value : Optional<dotnet.System.Text.Json.Serialization.ReferenceHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_ReferenceHandler_0__1__ReferenceHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonUnknownTypeHandling get_UnknownTypeHandling()
// docid: M:System.Text.Json.JsonSerializerOptions.get_UnknownTypeHandling
    public func get_UnknownTypeHandling() throws -> dotnet.System.Text.Json.Serialization.JsonUnknownTypeHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_JsonUnknownTypeHandling__get_UnknownTypeHandling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonUnknownTypeHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_UnknownTypeHandling(System.Text.Json.Serialization.JsonUnknownTypeHandling)
// docid: M:System.Text.Json.JsonSerializerOptions.set_UnknownTypeHandling(System.Text.Json.Serialization.JsonUnknownTypeHandling)
    public func set_UnknownTypeHandling(value : dotnet.System.Text.Json.Serialization.JsonUnknownTypeHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_UnknownTypeHandling_0__1__JsonUnknownTypeHandling(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_WriteIndented()
// docid: M:System.Text.Json.JsonSerializerOptions.get_WriteIndented
    public func get_WriteIndented() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonSerializerOptions_bool__get_WriteIndented_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_WriteIndented(bool)
// docid: M:System.Text.Json.JsonSerializerOptions.set_WriteIndented(System.Boolean)
    public func set_WriteIndented(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonSerializerOptions_void__set_WriteIndented_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.

    */
    public var AllowTrailingCommas : Bool {
        get {
            return try! get_AllowTrailingCommas();
        }
        set(v) {
            return try! set_AllowTrailingCommas(value: v);
        }
    }
    /**
    Gets the list of user-defined converters that were registered.

    */
    public var Converters : dotnet.System.Collections.Generic.IList_1<dotnet.System.Text.Json.Serialization.JsonConverter> {
        get {
            return try! get_Converters();
        }
    }
    /**
    Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.

    */
    public var DefaultBufferSize : Swift.Int32 {
        get {
            return try! get_DefaultBufferSize();
        }
        set(v) {
            return try! set_DefaultBufferSize(value: v);
        }
    }
    /**
    Specifies a condition to determine when properties with default values are ignored during serialization or deserialization.
 The default value is .

    */
    public var DefaultIgnoreCondition : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        get {
            return try! get_DefaultIgnoreCondition();
        }
        set(v) {
            return try! set_DefaultIgnoreCondition(value: v);
        }
    }
    /**
    Gets or sets the policy used to convert a  key's name to another format, such as camel-casing.

    */
    public var DictionaryKeyPolicy : Optional<dotnet.System.Text.Json.JsonNamingPolicy> {
        get {
            return try! get_DictionaryKeyPolicy();
        }
        set(v) {
            return try! set_DictionaryKeyPolicy(value: v!);
        }
    }
    /**
    Gets or sets the encoder to use when escaping strings, or  to use the default encoder.

    */
    public var Encoder : Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder> {
        get {
            return try! get_Encoder();
        }
        set(v) {
            return try! set_Encoder(value: v!);
        }
    }
    /**
    Gets or sets a value that determines whether  values are ignored during serialization and deserialization. The default value is .

    */
    public var IgnoreNullValues : Bool {
        get {
            return try! get_IgnoreNullValues();
        }
        set(v) {
            return try! set_IgnoreNullValues(value: v);
        }
    }
    /**
    Determines whether read-only fields are ignored during serialization. A property is read-only if it isn't marked with the  keyword. The default value is .

    */
    public var IgnoreReadOnlyFields : Bool {
        get {
            return try! get_IgnoreReadOnlyFields();
        }
        set(v) {
            return try! set_IgnoreReadOnlyFields(value: v);
        }
    }
    /**
    Gets a value that determines whether read-only properties are ignored during serialization. The default value is .

    */
    public var IgnoreReadOnlyProperties : Bool {
        get {
            return try! get_IgnoreReadOnlyProperties();
        }
        set(v) {
            return try! set_IgnoreReadOnlyProperties(value: v);
        }
    }
    /**
    Determines whether fields are handled serialization and deserialization.
            The default value is .

    */
    public var IncludeFields : Bool {
        get {
            return try! get_IncludeFields();
        }
        set(v) {
            return try! set_IncludeFields(value: v);
        }
    }
    /**
    Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.

    */
    public var MaxDepth : Swift.Int32 {
        get {
            return try! get_MaxDepth();
        }
        set(v) {
            return try! set_MaxDepth(value: v);
        }
    }
    /**
    Specifies how number types should be handled when serializing or deserializing.

    */
    public var NumberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        get {
            return try! get_NumberHandling();
        }
        set(v) {
            return try! set_NumberHandling(value: v);
        }
    }
    /**
    Gets or sets a value that determines whether a property's name uses a case-insensitive comparison during deserialization. The default value is .

    */
    public var PropertyNameCaseInsensitive : Bool {
        get {
            return try! get_PropertyNameCaseInsensitive();
        }
        set(v) {
            return try! set_PropertyNameCaseInsensitive(value: v);
        }
    }
    /**
    Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or  to leave property names unchanged.

    */
    public var PropertyNamingPolicy : Optional<dotnet.System.Text.Json.JsonNamingPolicy> {
        get {
            return try! get_PropertyNamingPolicy();
        }
        set(v) {
            return try! set_PropertyNamingPolicy(value: v!);
        }
    }
    /**
    Gets or sets a value that defines how comments are handled during deserialization.

    */
    public var ReadCommentHandling : dotnet.System.Text.Json.JsonCommentHandling {
        get {
            return try! get_ReadCommentHandling();
        }
        set(v) {
            return try! set_ReadCommentHandling(value: v);
        }
    }
    /**
    Configures how object references are handled when reading and writing JSON.

    */
    public var ReferenceHandler : Optional<dotnet.System.Text.Json.Serialization.ReferenceHandler> {
        get {
            return try! get_ReferenceHandler();
        }
        set(v) {
            return try! set_ReferenceHandler(value: v!);
        }
    }
    public var UnknownTypeHandling : dotnet.System.Text.Json.Serialization.JsonUnknownTypeHandling {
        get {
            return try! get_UnknownTypeHandling();
        }
        set(v) {
            return try! set_UnknownTypeHandling(value: v);
        }
    }
    /**
    Gets or sets a value that defines whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.

    */
    public var WriteIndented : Bool {
        get {
            return try! get_WriteIndented();
        }
        set(v) {
            return try! set_WriteIndented(value: v);
        }
    }
} // JsonSerializerOptions


// type: System.Text.Json.JsonTokenType
    /**
    Defines the various JSON tokens that make up a JSON text.

    */
public struct JsonTokenType : SGBridgeGenericValue {
    let v : Swift.UInt8;
    public init(val: Swift.UInt8) { self.v = val; }
    public func get_value() -> Swift.UInt8 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonTokenType_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.UInt8(gval); }
    // static field: System.Text.Json.JsonTokenType None
    /**
    There is no value (as distinct from ).

    */
    public static var None : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_None());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType StartObject
    /**
    The token type is the start of a JSON object.

    */
    public static var StartObject : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_StartObject());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType EndObject
    /**
    The token type is the end of a JSON object.

    */
    public static var EndObject : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_EndObject());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType StartArray
    /**
    The token type is the start of a JSON array.

    */
    public static var StartArray : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_StartArray());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType EndArray
    /**
    The token type is the end of a JSON array.

    */
    public static var EndArray : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_EndArray());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType PropertyName
    /**
    The token type is a JSON property name.

    */
    public static var PropertyName : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_PropertyName());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType Comment
    /**
    The token type is a comment string.

    */
    public static var Comment : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_Comment());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType String
    /**
    The token type is a JSON string.

    */
    public static var String : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_String());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType Number
    /**
    The token type is a JSON number.

    */
    public static var Number : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_Number());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType True
    /**
    The token type is the JSON literal true.

    */
    public static var True : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_True());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType False
    /**
    The token type is the JSON literal false.

    */
    public static var False : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_False());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonTokenType Null
    /**
    The token type is the JSON literal null.

    */
    public static var Null : dotnet.System.Text.Json.JsonTokenType {
        get {
        let __return = dotnet.System.Text.Json.JsonTokenType(val: System_Text_Json_JsonTokenType_get_Null());
            return __return;
        }
    }
} // JsonTokenType


// type: System.Text.Json.JsonValueKind
    /**
    Specifies the data type of a JSON value.

    */
public struct JsonValueKind : SGBridgeGenericValue {
    let v : Swift.UInt8;
    public init(val: Swift.UInt8) { self.v = val; }
    public func get_value() -> Swift.UInt8 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonValueKind_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.UInt8(gval); }
    // static field: System.Text.Json.JsonValueKind Undefined
    /**
    There is no value (as distinct from ).

    */
    public static var Undefined : dotnet.System.Text.Json.JsonValueKind {
        get {
        let __return = dotnet.System.Text.Json.JsonValueKind(val: System_Text_Json_JsonValueKind_get_Undefined());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonValueKind Object
    /**
    A JSON object.

    */
    public static var Object : dotnet.System.Text.Json.JsonValueKind {
        get {
        let __return = dotnet.System.Text.Json.JsonValueKind(val: System_Text_Json_JsonValueKind_get_Object());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonValueKind Array
    /**
    A JSON array.

    */
    public static var Array : dotnet.System.Text.Json.JsonValueKind {
        get {
        let __return = dotnet.System.Text.Json.JsonValueKind(val: System_Text_Json_JsonValueKind_get_Array());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonValueKind String
    /**
    A JSON string.

    */
    public static var String : dotnet.System.Text.Json.JsonValueKind {
        get {
        let __return = dotnet.System.Text.Json.JsonValueKind(val: System_Text_Json_JsonValueKind_get_String());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonValueKind Number
    /**
    A JSON number.

    */
    public static var Number : dotnet.System.Text.Json.JsonValueKind {
        get {
        let __return = dotnet.System.Text.Json.JsonValueKind(val: System_Text_Json_JsonValueKind_get_Number());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonValueKind True
    /**
    The JSON value true.

    */
    public static var True : dotnet.System.Text.Json.JsonValueKind {
        get {
        let __return = dotnet.System.Text.Json.JsonValueKind(val: System_Text_Json_JsonValueKind_get_True());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonValueKind False
    /**
    The JSON value false.

    */
    public static var False : dotnet.System.Text.Json.JsonValueKind {
        get {
        let __return = dotnet.System.Text.Json.JsonValueKind(val: System_Text_Json_JsonValueKind_get_False());
            return __return;
        }
    }
    // static field: System.Text.Json.JsonValueKind Null
    /**
    The JSON value null.

    */
    public static var Null : dotnet.System.Text.Json.JsonValueKind {
        get {
        let __return = dotnet.System.Text.Json.JsonValueKind(val: System_Text_Json_JsonValueKind_get_Null());
            return __return;
        }
    }
} // JsonValueKind


// type: System.Text.Json.JsonWriterOptions
// boxed value type
    /**
    Allows the user to define custom behavior when writing JSON using the .

    */
public final class JsonWriterOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_JsonWriterOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets or sets the encoder to use when escaping strings, or  to use the default encoder.

    */
    public var Encoder : Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder> {
        get {
            return try! get_Encoder();
        }
        set(v) {
            return try! set_Encoder(value: v!);
        }
    }
    /**
    Gets or sets a value that indicates whether the  should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.

    */
    public var Indented : Bool {
        get {
            return try! get_Indented();
        }
        set(v) {
            return try! set_Indented(value: v);
        }
    }
    /**
    Gets or sets a value that indicates whether the  should skip structural validation and allow the user to write invalid JSON.

    */
    public var SkipValidation : Bool {
        get {
            return try! get_SkipValidation();
        }
        set(v) {
            return try! set_SkipValidation(value: v);
        }
    }
    public override init() {
        let h = System_Text_Json_JsonWriterOptions_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.Text.Encodings.Web.JavaScriptEncoder get_Encoder()
// docid: M:System.Text.Json.JsonWriterOptions.get_Encoder
    public func get_Encoder() throws -> Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonWriterOptions_JavaScriptEncoder__get_Encoder_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Encodings.Web.JavaScriptEncoder(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Encoder(System.Text.Encodings.Web.JavaScriptEncoder)
// docid: M:System.Text.Json.JsonWriterOptions.set_Encoder(System.Text.Encodings.Web.JavaScriptEncoder)
    public func set_Encoder(value : Optional<dotnet.System.Text.Encodings.Web.JavaScriptEncoder>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonWriterOptions_void__set_Encoder_0__1__JavaScriptEncoder(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_Indented()
// docid: M:System.Text.Json.JsonWriterOptions.get_Indented
    public func get_Indented() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonWriterOptions_bool__get_Indented_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_Indented(bool)
// docid: M:System.Text.Json.JsonWriterOptions.set_Indented(System.Boolean)
    public func set_Indented(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonWriterOptions_void__set_Indented_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_SkipValidation()
// docid: M:System.Text.Json.JsonWriterOptions.get_SkipValidation
    public func get_SkipValidation() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_JsonWriterOptions_bool__get_SkipValidation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_SkipValidation(bool)
// docid: M:System.Text.Json.JsonWriterOptions.set_SkipValidation(System.Boolean)
    public func set_SkipValidation(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_JsonWriterOptions_void__set_SkipValidation_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JsonWriterOptions


// type: System.Text.Json.Utf8JsonWriter
    /**
    Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.

    */
public final class Utf8JsonWriter
    :
    dotnet.System.Object,
    System_IAsyncDisposable,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Utf8JsonWriter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Buffers.IBufferWriter<System.Byte>, System.Text.Json.JsonWriterOptions)
// docid: M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)
    /**
    Initializes a new instance of the  class using the specified  to write the output to and customization options.

    - Parameter bufferWriter: The destination for writing JSON text.
    - Parameter options: Defines the customized behavior of the . By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.
    */
    public init(bufferWriter : dotnet.System.Buffers.IBufferWriter_1<Swift.UInt8>, options : dotnet.System.Text.Json.JsonWriterOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Utf8JsonWriter_ctor_0__2__System_Buffers_IBufferWriter_u8__JsonWriterOptions(&__thrown, bufferWriter.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IO.Stream, System.Text.Json.JsonWriterOptions)
// docid: M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)
    /**
    Initializes a new instance of the  class using the specified stream to write the output to and customization options.

    - Parameter utf8Json: The destination for writing JSON text.
    - Parameter options: Defines the customized behavior of the . By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.
    */
    public init(utf8Json : dotnet.System.IO.Stream, options : dotnet.System.Text.Json.JsonWriterOptions) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Utf8JsonWriter_ctor_0__2__Stream_JsonWriterOptions(&__thrown, utf8Json.get_handle(), options.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Dispose()
// docid: M:System.Text.Json.Utf8JsonWriter.Dispose
    /**
    Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.ValueTask DisposeAsync()
// docid: M:System.Text.Json.Utf8JsonWriter.DisposeAsync
    /**
    Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.

    - Returns: A task representing the asynchronous dispose operation.

    */
    public func DisposeAsync() throws -> dotnet.System.Threading.Tasks.ValueTask {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Utf8JsonWriter_ValueTask__DisposeAsync_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ValueTask(hndl : __return);
        }
    }
    // void Flush()
// docid: M:System.Text.Json.Utf8JsonWriter.Flush
    /**
    Commits the JSON text written so far, which makes it visible to the output destination.

    */
    public func Flush() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken)
// docid: M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)
    /**
    Asynchronously commits the JSON text written so far, which makes it visible to the output destination.

    - Parameter cancellationToken: The token to monitor for cancellation requests. The default value is .
    - Returns: A task representing the asynchronous flush operation.

    */
    public func FlushAsync(cancellationToken : dotnet.System.Threading.CancellationToken = System.Threading.CancellationToken.None) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Utf8JsonWriter_Task__FlushAsync_0__1__CancellationToken(&__thrown, self.get_handle(), cancellationToken.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // void Reset()
// docid: M:System.Text.Json.Utf8JsonWriter.Reset
    /**
    Resets the internal state of this instance so that it can be reused.

    */
    public func Reset() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__Reset_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reset(System.Buffers.IBufferWriter<System.Byte>)
// docid: M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})
    /**
    Resets the internal state of this instance so that it can be reused with a new instance of .

    - Parameter bufferWriter: The destination for writing JSON text.
    */
    public func Reset(bufferWriter : dotnet.System.Buffers.IBufferWriter_1<Swift.UInt8>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__Reset_0__1__System_Buffers_IBufferWriter_u8_(&__thrown, self.get_handle(), bufferWriter.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Reset(System.IO.Stream)
// docid: M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)
    /**
    Resets the internal state of this instance so that it can be reused with a new instance of .

    - Parameter utf8Json: The destination for writing JSON text.
    */
    public func Reset(utf8Json : dotnet.System.IO.Stream) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__Reset_0__1__Stream(&__thrown, self.get_handle(), utf8Json.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteBase64String(System.ReadOnlySpan<System.Byte>, System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteBase64String(System.ReadOnlySpan<System.Char>, System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteBase64String(System.String, System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteBase64String(System.Text.Json.JsonEncodedText, System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteBase64StringValue(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteBoolean(System.ReadOnlySpan<System.Byte>, bool)
// TODO COPE (write_all_methods) (span) void WriteBoolean(System.ReadOnlySpan<System.Char>, bool)
    // void WriteBoolean(System.String, bool)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)
    /**
    Writes a property name specified as a string and a  value (as a JSON literal true or false) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON literal true or false as part of the name/value pair.
    */
    public func WriteBoolean(propertyName : dotnet.System.String, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteBoolean_0__2__String_bool(&__thrown, self.get_handle(), propertyName.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteBoolean(System.Text.Json.JsonEncodedText, bool)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)
    /**
    Writes the pre-encoded property name and  value (as a JSON literal true or false) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON literal true or false as part of the name/value pair.
    */
    public func WriteBoolean(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteBoolean_0__2__JsonEncodedText_bool(&__thrown, self.get_handle(), propertyName.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteBooleanValue(bool)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)
    /**
    Writes a  value (as a JSON literal true or false) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON literal true or false as an element of a JSON array.
    */
    public func WriteBooleanValue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteBooleanValue_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteCommentValue(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteCommentValue(System.ReadOnlySpan<System.Char>)
    // void WriteCommentValue(System.String)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)
    /**
    Writes a string text value as a JSON comment.

    - Parameter value: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /(ASTERISK)..(ASTERISK)/.
    */
    public func WriteCommentValue(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteCommentValue_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndArray()
// docid: M:System.Text.Json.Utf8JsonWriter.WriteEndArray
    /**
    Writes the end of a JSON array.

    */
    public func WriteEndArray() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteEndArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteEndObject()
// docid: M:System.Text.Json.Utf8JsonWriter.WriteEndObject
    /**
    Writes the end of a JSON object.

    */
    public func WriteEndObject() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteEndObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteNull(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteNull(System.ReadOnlySpan<System.Char>)
    // void WriteNull(System.String)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)
    /**
    Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    */
    public func WriteNull(propertyName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNull_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNull(System.Text.Json.JsonEncodedText)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)
    /**
    Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    */
    public func WriteNull(propertyName : dotnet.System.Text.Json.JsonEncodedText) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNull_0__1__JsonEncodedText(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNullValue()
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNullValue
    /**
    Writes the JSON literal null as an element of a JSON array.

    */
    public func WriteNullValue() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNullValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Byte>, System.Decimal)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Byte>, System.Double)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Byte>, System.Int32)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Byte>, System.Int64)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Byte>, System.Single)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Byte>, System.UInt32)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Byte>, System.UInt64)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Char>, System.Decimal)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Char>, System.Double)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Char>, System.Int32)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Char>, System.Int64)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Char>, System.Single)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Char>, System.UInt32)
// TODO COPE (write_all_methods) (span) void WriteNumber(System.ReadOnlySpan<System.Char>, System.UInt64)
    // void WriteNumber(System.String, System.Decimal)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)
    /**
    Writes a property name specified as a string and a  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.String, value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__String_Decimal(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.String, System.Double)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)
    /**
    Writes a property name specified as a string and a  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.String, value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__String_f64(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.String, System.Int32)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)
    /**
    Writes a property name specified as a string and an  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.String, value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__String_i32(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.String, System.Int64)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)
    /**
    Writes a property name specified as a string and an  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.String, value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__String_i64(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.String, System.Single)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)
    /**
    Writes a property name specified as a string and a  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.String, value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__String_f32(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.String, System.UInt32)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)
    /**
    Writes a property name specified as a string and a  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.String, value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__String_u32(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.String, System.UInt64)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)
    /**
    Writes a property name specified as a string and a  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.String, value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__String_u64(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.Text.Json.JsonEncodedText, System.Decimal)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)
    /**
    Writes the pre-encoded property name and  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__JsonEncodedText_Decimal(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.Text.Json.JsonEncodedText, System.Double)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)
    /**
    Writes the pre-encoded property name and  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__JsonEncodedText_f64(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.Text.Json.JsonEncodedText, System.Int32)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)
    /**
    Writes the pre-encoded property name and  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__JsonEncodedText_i32(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.Text.Json.JsonEncodedText, System.Int64)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)
    /**
    Writes the pre-encoded property name and  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__JsonEncodedText_i64(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.Text.Json.JsonEncodedText, System.Single)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)
    /**
    Writes the pre-encoded property name and  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__JsonEncodedText_f32(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.Text.Json.JsonEncodedText, System.UInt32)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)
    /**
    Writes the pre-encoded property name and  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__JsonEncodedText_u32(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumber(System.Text.Json.JsonEncodedText, System.UInt64)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)
    /**
    Writes the pre-encoded property name and  value (as a JSON number) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON number as part of the name/value pair.
    */
    public func WriteNumber(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumber_0__2__JsonEncodedText_u64(&__thrown, self.get_handle(), propertyName.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumberValue(System.Decimal)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)
    /**
    Writes a  value (as a JSON number) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON number as an element of a JSON array.
    */
    public func WriteNumberValue(value : dotnet.System.Decimal) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumberValue_0__1__Decimal(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumberValue(System.Double)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)
    /**
    Writes a  value (as a JSON number) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON number as an element of a JSON array.
    */
    public func WriteNumberValue(value : Swift.Double) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumberValue_0__1__f64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumberValue(System.Int32)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)
    /**
    Writes an  value (as a JSON number) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON number as an element of a JSON array.
    */
    public func WriteNumberValue(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumberValue_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumberValue(System.Int64)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)
    /**
    Writes an  value (as a JSON number) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON number as an element of a JSON array.
    */
    public func WriteNumberValue(value : Swift.Int64) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumberValue_0__1__i64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumberValue(System.Single)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)
    /**
    Writes a  value (as a JSON number) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON number as an element of a JSON array.
    */
    public func WriteNumberValue(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumberValue_0__1__f32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumberValue(System.UInt32)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)
    /**
    Writes a  value (as a JSON number) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON number as an element of a JSON array.
    */
    public func WriteNumberValue(value : Swift.UInt32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumberValue_0__1__u32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteNumberValue(System.UInt64)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)
    /**
    Writes a  value (as a JSON number) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON number as an element of a JSON array.
    */
    public func WriteNumberValue(value : Swift.UInt64) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteNumberValue_0__1__u64(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WritePropertyName(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WritePropertyName(System.ReadOnlySpan<System.Char>)
    // void WritePropertyName(System.String)
// docid: M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)
    /**
    Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.

    - Parameter propertyName: The property name of the JSON object to be transcoded and written as UTF-8.
    */
    public func WritePropertyName(propertyName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WritePropertyName_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WritePropertyName(System.Text.Json.JsonEncodedText)
// docid: M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)
    /**
    Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    */
    public func WritePropertyName(propertyName : dotnet.System.Text.Json.JsonEncodedText) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WritePropertyName_0__1__JsonEncodedText(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteRawValue(System.String, bool)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.String,System.Boolean)
    public func WriteRawValue(json : dotnet.System.String, skipInputValidation : Bool = false) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteRawValue_0__2__String_bool(&__thrown, self.get_handle(), json.get_handle(), Swift.Int32(skipInputValidation ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteRawValue(System.ReadOnlySpan<System.Byte>, bool)
// TODO COPE (write_all_methods) (span) void WriteRawValue(System.ReadOnlySpan<System.Char>, bool)
    // void WriteStartArray()
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStartArray
    /**
    Writes the beginning of a JSON array.

    */
    public func WriteStartArray() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStartArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteStartArray(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteStartArray(System.ReadOnlySpan<System.Char>)
    // void WriteStartArray(System.String)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)
    /**
    Writes the beginning of a JSON array with a property name specified as a string as the key.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.
    */
    public func WriteStartArray(propertyName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStartArray_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartArray(System.Text.Json.JsonEncodedText)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)
    /**
    Writes the beginning of a JSON array with a pre-encoded property name as the key.

    - Parameter propertyName: The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.
    */
    public func WriteStartArray(propertyName : dotnet.System.Text.Json.JsonEncodedText) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStartArray_0__1__JsonEncodedText(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartObject()
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStartObject
    /**
    Writes the beginning of a JSON object.

    */
    public func WriteStartObject() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStartObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteStartObject(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteStartObject(System.ReadOnlySpan<System.Char>)
    // void WriteStartObject(System.String)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)
    /**
    Writes the beginning of a JSON object with a property name specified as a string as the key.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    */
    public func WriteStartObject(propertyName : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStartObject_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStartObject(System.Text.Json.JsonEncodedText)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)
    /**
    Writes the beginning of a JSON object with a pre-encoded property name as the key.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    */
    public func WriteStartObject(propertyName : dotnet.System.Text.Json.JsonEncodedText) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStartObject_0__1__JsonEncodedText(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Byte>, System.DateTime)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Byte>, System.DateTimeOffset)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Byte>, System.Guid)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Byte>, System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Byte>, System.ReadOnlySpan<System.Char>)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Byte>, System.String)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Byte>, System.Text.Json.JsonEncodedText)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Char>, System.DateTime)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Char>, System.DateTimeOffset)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Char>, System.Guid)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Char>, System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Char>, System.ReadOnlySpan<System.Char>)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Char>, System.String)
// TODO COPE (write_all_methods) (span) void WriteString(System.ReadOnlySpan<System.Char>, System.Text.Json.JsonEncodedText)
    // void WriteString(System.String, System.DateTime)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)
    /**
    Writes a property name specified as a string and a  value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.String, value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__String_DateTime(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.String, System.DateTimeOffset)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)
    /**
    Writes a property name specified as a string and a  value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.String, value : dotnet.System.DateTimeOffset) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__String_DateTimeOffset(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.String, System.Guid)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)
    /**
    Writes a property name specified as a string and a  value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.String, value : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__String_Guid(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteString(System.String, System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteString(System.String, System.ReadOnlySpan<System.Char>)
    // void WriteString(System.String, System.String)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)
    /**
    Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.String, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__String_String(&__thrown, self.get_handle(), propertyName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.String, System.Text.Json.JsonEncodedText)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)
    /**
    Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.String, value : dotnet.System.Text.Json.JsonEncodedText) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__String_JsonEncodedText(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.Text.Json.JsonEncodedText, System.DateTime)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)
    /**
    Writes the pre-encoded property name and  value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__JsonEncodedText_DateTime(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.Text.Json.JsonEncodedText, System.DateTimeOffset)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)
    /**
    Writes the pre-encoded property name and  value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : dotnet.System.DateTimeOffset) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__JsonEncodedText_DateTimeOffset(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.Text.Json.JsonEncodedText, System.Guid)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)
    /**
    Writes the pre-encoded property name and  value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__JsonEncodedText_Guid(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteString(System.Text.Json.JsonEncodedText, System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteString(System.Text.Json.JsonEncodedText, System.ReadOnlySpan<System.Char>)
    // void WriteString(System.Text.Json.JsonEncodedText, System.String)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)
    /**
    Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__JsonEncodedText_String(&__thrown, self.get_handle(), propertyName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteString(System.Text.Json.JsonEncodedText, System.Text.Json.JsonEncodedText)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)
    /**
    Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.

    - Parameter propertyName: The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.
    - Parameter value: The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.
    */
    public func WriteString(propertyName : dotnet.System.Text.Json.JsonEncodedText, value : dotnet.System.Text.Json.JsonEncodedText) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteString_0__2__JsonEncodedText_JsonEncodedText(&__thrown, self.get_handle(), propertyName.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStringValue(System.DateTime)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)
    /**
    Writes a  value (as a JSON string) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON string as an element of a JSON array.
    */
    public func WriteStringValue(value : dotnet.System.DateTime) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStringValue_0__1__DateTime(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStringValue(System.DateTimeOffset)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)
    /**
    Writes a  value (as a JSON string) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON string as an element of a JSON array.
    */
    public func WriteStringValue(value : dotnet.System.DateTimeOffset) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStringValue_0__1__DateTimeOffset(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStringValue(System.Guid)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)
    /**
    Writes a  value (as a JSON string) as an element of a JSON array.

    - Parameter value: The value to be written as a JSON string as an element of a JSON array.
    */
    public func WriteStringValue(value : dotnet.System.Guid) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStringValue_0__1__Guid(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void WriteStringValue(System.ReadOnlySpan<System.Byte>)
// TODO COPE (write_all_methods) (span) void WriteStringValue(System.ReadOnlySpan<System.Char>)
    // void WriteStringValue(System.String)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)
    /**
    Writes a string text value (as a JSON string) as an element of a JSON array.

    - Parameter value: The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.
    */
    public func WriteStringValue(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStringValue_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteStringValue(System.Text.Json.JsonEncodedText)
// docid: M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)
    /**
    Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.

    - Parameter value: The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.
    */
    public func WriteStringValue(value : dotnet.System.Text.Json.JsonEncodedText) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Utf8JsonWriter_void__WriteStringValue_0__1__JsonEncodedText(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int64 get_BytesCommitted()
// docid: M:System.Text.Json.Utf8JsonWriter.get_BytesCommitted
    public func get_BytesCommitted() throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Utf8JsonWriter_i64__get_BytesCommitted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_BytesPending()
// docid: M:System.Text.Json.Utf8JsonWriter.get_BytesPending
    public func get_BytesPending() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Utf8JsonWriter_i32__get_BytesPending_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_CurrentDepth()
// docid: M:System.Text.Json.Utf8JsonWriter.get_CurrentDepth
    public func get_CurrentDepth() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Utf8JsonWriter_i32__get_CurrentDepth_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Text.Json.JsonWriterOptions get_Options()
// docid: M:System.Text.Json.Utf8JsonWriter.get_Options
    public func get_Options() throws -> dotnet.System.Text.Json.JsonWriterOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Utf8JsonWriter_JsonWriterOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonWriterOptions(hndl : __return);
        }
    }
    /**
    Gets the total number of bytes committed to the output by the current instance so far.

    */
    public var BytesCommitted : Swift.Int64 {
        get {
            return try! get_BytesCommitted();
        }
    }
    /**
    Gets the number of bytes written by the  so far that have not yet been flushed to the output and committed.

    */
    public var BytesPending : Swift.Int32 {
        get {
            return try! get_BytesPending();
        }
    }
    /**
    Gets the depth of the current token.

    */
    public var CurrentDepth : Swift.Int32 {
        get {
            return try! get_CurrentDepth();
        }
    }
    /**
    Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.

    */
    public var Options : dotnet.System.Text.Json.JsonWriterOptions {
        get {
            return try! get_Options();
        }
    }
} // Utf8JsonWriter


}
// System.Text.Json.Nodes
extension System.Text.Json.Nodes {
// type: System.Text.Json.Nodes.JsonArray
public final class JsonArray
    :
    dotnet.System.Text.Json.Nodes.JsonNode,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Nodes_JsonArray_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonArray.#ctor(System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    public init(options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Nodes_JsonArray_ctor_0__1__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (options != nil) ? options!.get_handle() : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Text.Json.Nodes.JsonNodeOptions, System.Text.Json.Nodes.JsonNode[])
// docid: M:System.Text.Json.Nodes.JsonArray.#ctor(System.Text.Json.Nodes.JsonNodeOptions,System.Text.Json.Nodes.JsonNode[])
    public init(options : dotnet.System.Text.Json.Nodes.JsonNodeOptions, items : dotnet.System_Arr<dotnet.System.Text.Json.Nodes.JsonNode>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Nodes_JsonArray_ctor_0__2__JsonNodeOptions_JsonNodeArray(&__thrown, options.get_handle(), items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Text.Json.Nodes.JsonNode[])
// docid: M:System.Text.Json.Nodes.JsonArray.#ctor(System.Text.Json.Nodes.JsonNode[])
    public init(items : dotnet.System_Arr<dotnet.System.Text.Json.Nodes.JsonNode>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Nodes_JsonArray_ctor_0__1__JsonNodeArray(&__thrown, items.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonArray.Add(System.Text.Json.Nodes.JsonNode)
    public func Add(item : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonArray_void__Add_0__1__JsonNode(&__thrown, self.get_handle(), item?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add<T>(T)
// docid: M:System.Text.Json.Nodes.JsonArray.Add``1(``0)
    public func Add<UT : SGBridgeGenericValue>(value : UT) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonArray_void__Add_1__1__UT(UT.get_type_handle(), &__thrown, self.get_handle(), value.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Text.Json.Nodes.JsonArray.Clear
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonArray_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Contains(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonArray.Contains(System.Text.Json.Nodes.JsonNode)
    public func Contains(item : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonArray_bool__Contains_0__1__JsonNode(&__thrown, self.get_handle(), item?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Text.Json.Nodes.JsonArray Create(System.Text.Json.JsonElement, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonArray.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    public class func Create(element : dotnet.System.Text.Json.JsonElement, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonArray> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonArray_JsonArray__Create_0__2__JsonElement_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, element.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonArray(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerator<System.Text.Json.Nodes.JsonNode> GetEnumerator()
// docid: M:System.Text.Json.Nodes.JsonArray.GetEnumerator
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonArray_System_Collections_Generic_IEnumerator_System_Text_Json_Nodes_JsonNode___GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // System.Int32 IndexOf(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonArray.IndexOf(System.Text.Json.Nodes.JsonNode)
    public func IndexOf(item : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonArray_i32__IndexOf_0__1__JsonNode(&__thrown, self.get_handle(), item?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // void Insert(System.Int32, System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonArray.Insert(System.Int32,System.Text.Json.Nodes.JsonNode)
    public func Insert(index : Swift.Int32, item : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonArray_void__Insert_0__2__i32_JsonNode(&__thrown, self.get_handle(), index, item?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Remove(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonArray.Remove(System.Text.Json.Nodes.JsonNode)
    public func Remove(item : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonArray_bool__Remove_0__1__JsonNode(&__thrown, self.get_handle(), item?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAt(System.Int32)
// docid: M:System.Text.Json.Nodes.JsonArray.RemoveAt(System.Int32)
    public func RemoveAt(index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonArray_void__RemoveAt_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteTo(System.Text.Json.Utf8JsonWriter, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.Nodes.JsonArray.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)
    public override func WriteTo(writer : dotnet.System.Text.Json.Utf8JsonWriter, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonArray_void__WriteTo_0__2__Utf8JsonWriter_JsonSerializerOptions(&__thrown, self.get_handle(), writer.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Text.Json.Nodes.JsonArray.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonArray_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // JsonArray


// type: System.Text.Json.Nodes.JsonNode
open class JsonNode
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Nodes_JsonNode_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Text.Json.Nodes.JsonArray AsArray()
// docid: M:System.Text.Json.Nodes.JsonNode.AsArray
    open func AsArray() throws -> dotnet.System.Text.Json.Nodes.JsonArray {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonArray__AsArray_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonArray(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonObject AsObject()
// docid: M:System.Text.Json.Nodes.JsonNode.AsObject
    open func AsObject() throws -> dotnet.System.Text.Json.Nodes.JsonObject {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonObject__AsObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonObject(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue AsValue()
// docid: M:System.Text.Json.Nodes.JsonNode.AsValue
    open func AsValue() throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonValue__AsValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.String GetPath()
// docid: M:System.Text.Json.Nodes.JsonNode.GetPath
    open func GetPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_String__GetPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) T GetValue<T>()
    // [IsSpecialName] bool op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_bool__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Byte op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.UInt8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_u8__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Char op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> dotnet.System.Char {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_Char__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Char(val: __return);
        }
    }
    // [IsSpecialName] System.DateTime op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> dotnet.System.DateTime {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_DateTime__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTime(hndl : __return);
        }
    }
    // [IsSpecialName] System.DateTimeOffset op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> dotnet.System.DateTimeOffset {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_DateTimeOffset__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.DateTimeOffset(hndl : __return);
        }
    }
    // [IsSpecialName] System.Decimal op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> dotnet.System.Decimal {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_Decimal__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Decimal(hndl : __return);
        }
    }
    // [IsSpecialName] System.Double op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.Double {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_f64__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Guid op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> dotnet.System.Guid {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_Guid__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Guid(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int16 op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.Int16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_i16__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_i32__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int64 op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.Int64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_i64__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Nullable<bool> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_bool___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) != 0 : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Byte> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_u8___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Byte_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Char> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_System_Char___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? dotnet.System.Char(val: System_Int16_unbox(__return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTimeOffset> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_System_DateTimeOffset___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTimeOffset(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.DateTime> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_System_DateTime___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.DateTime(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Decimal> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<dotnet.System.Decimal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_System_Decimal___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Decimal(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Double> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_f64___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Double_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Guid> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_System_Guid___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Guid(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int16> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_i16___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int16_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int32> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_i32___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_i64___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.SByte> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.Int8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_i8___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_SByte_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.Single> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_f32___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Single_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.UInt16> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.UInt16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_u16___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_UInt16_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.UInt32> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.UInt32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_u32___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_UInt32_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.Nullable<System.UInt64> op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<Swift.UInt64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_u64___op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_UInt64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] System.SByte op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.Int8 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_i8__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Single op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_f32__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.String op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_String__op_Explicit_0__1__JsonNode(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.UInt16 op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.UInt16 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_u16__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.UInt32 op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.UInt32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_u32__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.UInt64 op_Explicit(System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)
    open class func op_Explicit(value : dotnet.System.Text.Json.Nodes.JsonNode) throws -> Swift.UInt64 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_u64__op_Explicit_0__1__JsonNode(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(bool)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Boolean)
    open class func op_Implicit(value : Bool) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__bool(&__thrown, Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Byte)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Byte)
    open class func op_Implicit(value : Swift.UInt8) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__u8(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Char)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Char)
    open class func op_Implicit(value : dotnet.System.Char) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__Char(&__thrown, value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.DateTime)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.DateTime)
    open class func op_Implicit(value : dotnet.System.DateTime) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__DateTime(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.DateTimeOffset)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.DateTimeOffset)
    open class func op_Implicit(value : dotnet.System.DateTimeOffset) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__DateTimeOffset(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Decimal)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Decimal)
    open class func op_Implicit(value : dotnet.System.Decimal) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__Decimal(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Double)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Double)
    open class func op_Implicit(value : Swift.Double) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__f64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Guid)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Guid)
    open class func op_Implicit(value : dotnet.System.Guid) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__Guid(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Int16)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int16)
    open class func op_Implicit(value : Swift.Int16) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__i16(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Int32)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int32)
    open class func op_Implicit(value : Swift.Int32) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__i32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Int64)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int64)
    open class func op_Implicit(value : Swift.Int64) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__i64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<bool>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Boolean})
    open class func op_Implicit(value : Optional<Bool>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_bool_(&__thrown, (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Byte>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Byte})
    open class func op_Implicit(value : Optional<Swift.UInt8>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_u8_(&__thrown, (value != nil) ? System_Byte_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Char>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Char})
    open class func op_Implicit(value : Optional<dotnet.System.Char>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_System_Char_(&__thrown, (value != nil) ? System_Int16_box(value!.get_value()) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.DateTimeOffset>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.DateTimeOffset})
    open class func op_Implicit(value : Optional<dotnet.System.DateTimeOffset>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_System_DateTimeOffset_(&__thrown, (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.DateTime>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.DateTime})
    open class func op_Implicit(value : Optional<dotnet.System.DateTime>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_System_DateTime_(&__thrown, (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Decimal>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Decimal})
    open class func op_Implicit(value : Optional<dotnet.System.Decimal>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_System_Decimal_(&__thrown, (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Double>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Double})
    open class func op_Implicit(value : Optional<Swift.Double>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_f64_(&__thrown, (value != nil) ? System_Double_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Guid>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Guid})
    open class func op_Implicit(value : Optional<dotnet.System.Guid>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_System_Guid_(&__thrown, (value != nil) ? value!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Int16>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int16})
    open class func op_Implicit(value : Optional<Swift.Int16>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_i16_(&__thrown, (value != nil) ? System_Int16_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Int32>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int32})
    open class func op_Implicit(value : Optional<Swift.Int32>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_i32_(&__thrown, (value != nil) ? System_Int32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Int64>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int64})
    open class func op_Implicit(value : Optional<Swift.Int64>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_i64_(&__thrown, (value != nil) ? System_Int64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.SByte>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.SByte})
    open class func op_Implicit(value : Optional<Swift.Int8>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_i8_(&__thrown, (value != nil) ? System_SByte_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.Single>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Single})
    open class func op_Implicit(value : Optional<Swift.Float>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_f32_(&__thrown, (value != nil) ? System_Single_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.UInt16>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt16})
    open class func op_Implicit(value : Optional<Swift.UInt16>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_u16_(&__thrown, (value != nil) ? System_UInt16_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.UInt32>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt32})
    open class func op_Implicit(value : Optional<Swift.UInt32>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_u32_(&__thrown, (value != nil) ? System_UInt32_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Nullable<System.UInt64>)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt64})
    open class func op_Implicit(value : Optional<Swift.UInt64>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__System_Nullable_u64_(&__thrown, (value != nil) ? System_UInt64_box(value!) : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.SByte)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.SByte)
    open class func op_Implicit(value : Swift.Int8) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__i8(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.Single)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Single)
    open class func op_Implicit(value : Swift.Float) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__f32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.String)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.String)
    open class func op_Implicit(value : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__String(&__thrown, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.UInt16)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt16)
    open class func op_Implicit(value : Swift.UInt16) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__u16(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.UInt32)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt32)
    open class func op_Implicit(value : Swift.UInt32) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__u32(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode op_Implicit(System.UInt64)
// docid: M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt64)
    open class func op_Implicit(value : Swift.UInt64) throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__op_Implicit_0__1__u64(&__thrown, value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonNode Parse(System.IO.Stream, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>, System.Text.Json.JsonDocumentOptions)
// docid: M:System.Text.Json.Nodes.JsonNode.Parse(System.IO.Stream,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)
    open class func Parse(utf8Json : dotnet.System.IO.Stream, nodeOptions : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil, documentOptions : dotnet.System.Text.Json.JsonDocumentOptions/* TODO default valuetype */) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__Parse_0__3__Stream_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions__JsonDocumentOptions(&__thrown, utf8Json.get_handle(), (nodeOptions != nil) ? nodeOptions!.get_handle() : nil, documentOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (span) System.Text.Json.Nodes.JsonNode Parse(System.ReadOnlySpan<System.Byte>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>, System.Text.Json.JsonDocumentOptions)
    // System.Text.Json.Nodes.JsonNode Parse(System.String, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>, System.Text.Json.JsonDocumentOptions)
// docid: M:System.Text.Json.Nodes.JsonNode.Parse(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)
    open class func Parse(json : dotnet.System.String, nodeOptions : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil, documentOptions : dotnet.System.Text.Json.JsonDocumentOptions/* TODO default valuetype */) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__Parse_0__3__String_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions__JsonDocumentOptions(&__thrown, json.get_handle(), (nodeOptions != nil) ? nodeOptions!.get_handle() : nil, documentOptions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.String ToJsonString(System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.Nodes.JsonNode.ToJsonString(System.Text.Json.JsonSerializerOptions)
    open func ToJsonString(options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_String__ToJsonString_0__1__JsonSerializerOptions(&__thrown, self.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Text.Json.Nodes.JsonNode.ToString
    open override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // void WriteTo(System.Text.Json.Utf8JsonWriter, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.Nodes.JsonNode.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)
    open func WriteTo(writer : dotnet.System.Text.Json.Utf8JsonWriter, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonNode_void__WriteTo_0__2__Utf8JsonWriter_JsonSerializerOptions(&__thrown, self.get_handle(), writer.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Nullable<System.Text.Json.Nodes.JsonNodeOptions> get_Options()
// docid: M:System.Text.Json.Nodes.JsonNode.get_Options
    open func get_Options() throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions___get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return != nil) ? (dotnet.System.Text.Json.Nodes.JsonNodeOptions(hndl: __return!)) : nil;
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode get_Parent()
// docid: M:System.Text.Json.Nodes.JsonNode.get_Parent
    open func get_Parent() throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__get_Parent_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode get_Root()
// docid: M:System.Text.Json.Nodes.JsonNode.get_Root
    open func get_Root() throws -> dotnet.System.Text.Json.Nodes.JsonNode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__get_Root_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode get_Item(System.Int32)
// docid: M:System.Text.Json.Nodes.JsonNode.get_Item(System.Int32)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(index : Swift.Int32) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__get_Item_0__1__i32(&__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.Int32, System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.set_Item(System.Int32,System.Text.Json.Nodes.JsonNode)
    open /* method final */ func set_Item(index : Swift.Int32, value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonNode_void__set_Item_0__2__i32_JsonNode(&__thrown, self.get_handle(), index, value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.Nodes.JsonNode get_Item(System.String)
// docid: M:System.Text.Json.Nodes.JsonNode.get_Item(System.String)
//BEGIN method_is_override
//matches_1
//matches :
    open /* method final */ func get_Item(propertyName : dotnet.System.String) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNode_JsonNode__get_Item_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonNode(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Item(System.String, System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonNode.set_Item(System.String,System.Text.Json.Nodes.JsonNode)
    open /* method final */ func set_Item(propertyName : dotnet.System.String, value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonNode_void__set_Item_0__2__String_JsonNode(&__thrown, self.get_handle(), propertyName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    open var Options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> {
        get {
            return try! get_Options();
        }
    }
    open var Parent : Optional<dotnet.System.Text.Json.Nodes.JsonNode> {
        get {
            return try! get_Parent();
        }
    }
    open var Root : dotnet.System.Text.Json.Nodes.JsonNode {
        get {
            return try! get_Root();
        }
    }
} // JsonNode


// type: System.Text.Json.Nodes.JsonNodeOptions
// boxed value type
public final class JsonNodeOptions
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Nodes_JsonNodeOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public var PropertyNameCaseInsensitive : Bool {
        get {
            return try! get_PropertyNameCaseInsensitive();
        }
        set(v) {
            return try! set_PropertyNameCaseInsensitive(value: v);
        }
    }
    public override init() {
        let h = System_Text_Json_Nodes_JsonNodeOptions_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] bool get_PropertyNameCaseInsensitive()
// docid: M:System.Text.Json.Nodes.JsonNodeOptions.get_PropertyNameCaseInsensitive
    public func get_PropertyNameCaseInsensitive() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonNodeOptions_bool__get_PropertyNameCaseInsensitive_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_PropertyNameCaseInsensitive(bool)
// docid: M:System.Text.Json.Nodes.JsonNodeOptions.set_PropertyNameCaseInsensitive(System.Boolean)
    public func set_PropertyNameCaseInsensitive(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonNodeOptions_void__set_PropertyNameCaseInsensitive_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // JsonNodeOptions


// type: System.Text.Json.Nodes.JsonObject
public final class JsonObject
    :
    dotnet.System.Text.Json.Nodes.JsonNode,
    System_Collections_IEnumerable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Nodes_JsonObject_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Text.Json.Nodes.JsonNode>>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode}},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    public init(properties : dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Text.Json.Nodes.JsonNode>>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Nodes_JsonObject_ctor_0__2__System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_System_Text_Json_Nodes_JsonNode___System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, properties.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonObject.#ctor(System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    public init(options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Nodes_JsonObject_ctor_0__1__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (options != nil) ? options!.get_handle() : nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Add(System.Collections.Generic.KeyValuePair<System.String,System.Text.Json.Nodes.JsonNode>)
// docid: M:System.Text.Json.Nodes.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})
    public func Add(property : dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Text.Json.Nodes.JsonNode>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonObject_void__Add_0__1__System_Collections_Generic_KeyValuePair_string_System_Text_Json_Nodes_JsonNode_(&__thrown, self.get_handle(), property.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Add(System.String, System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonObject.Add(System.String,System.Text.Json.Nodes.JsonNode)
    public func Add(propertyName : dotnet.System.String, value : Optional<dotnet.System.Text.Json.Nodes.JsonNode>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonObject_void__Add_0__2__String_JsonNode(&__thrown, self.get_handle(), propertyName.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Clear()
// docid: M:System.Text.Json.Nodes.JsonObject.Clear
    public func Clear() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonObject_void__Clear_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool ContainsKey(System.String)
// docid: M:System.Text.Json.Nodes.JsonObject.ContainsKey(System.String)
    public func ContainsKey(propertyName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonObject_bool__ContainsKey_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Text.Json.Nodes.JsonObject Create(System.Text.Json.JsonElement, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonObject.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    public class func Create(element : dotnet.System.Text.Json.JsonElement, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonObject> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonObject_JsonObject__Create_0__2__JsonElement_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, element.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonObject(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Text.Json.Nodes.JsonNode>> GetEnumerator()
// docid: M:System.Text.Json.Nodes.JsonObject.GetEnumerator
    public func GetEnumerator() throws -> dotnet.System.Collections.Generic.IEnumerator_1<dotnet.System.Collections.Generic.KeyValuePair_2<dotnet.System.String,dotnet.System.Text.Json.Nodes.JsonNode>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonObject_System_Collections_Generic_IEnumerator_System_Collections_Generic_System_Collections_Generic_KeyValuePair_string_System_Text_Json_Nodes_JsonNode____GetEnumerator_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.Generic.IEnumerator_1(hndl : __return);
        }
    }
    // bool Remove(System.String)
// docid: M:System.Text.Json.Nodes.JsonObject.Remove(System.String)
    public func Remove(propertyName : dotnet.System.String) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonObject_bool__Remove_0__1__String(&__thrown, self.get_handle(), propertyName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool TryGetPropertyValue(System.String, ref System.Text.Json.Nodes.JsonNode)
// docid: M:System.Text.Json.Nodes.JsonObject.TryGetPropertyValue(System.String,System.Text.Json.Nodes.JsonNode@)
    public func TryGetPropertyValue(propertyName : dotnet.System.String, jsonNode : inout dotnet.System.Text.Json.Nodes.JsonNode) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_jsonNode = jsonNode.get_handle();
        let __return = System_Text_Json_Nodes_JsonObject_bool__TryGetPropertyValue_0__2__String_outJsonNode(&__thrown, self.get_handle(), propertyName.get_handle(), &_tmp_out_jsonNode);
        let _tmp2_jsonNode = dotnet.System.Text.Json.Nodes.JsonNode(hndl: _tmp_out_jsonNode);
            jsonNode = _tmp2_jsonNode;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void WriteTo(System.Text.Json.Utf8JsonWriter, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.Nodes.JsonObject.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)
    public override func WriteTo(writer : dotnet.System.Text.Json.Utf8JsonWriter, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Nodes_JsonObject_void__WriteTo_0__2__Utf8JsonWriter_JsonSerializerOptions(&__thrown, self.get_handle(), writer.get_handle(), options?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Text.Json.Nodes.JsonObject.get_Count
    public func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonObject_i32__get_Count_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
} // JsonObject


// type: System.Text.Json.Nodes.JsonValue
open class JsonValue
    :
    dotnet.System.Text.Json.Nodes.JsonNode
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Nodes_JsonValue_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Text.Json.Nodes.JsonValue Create(bool, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Boolean,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Bool, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__bool_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, Swift.Int32(value ? 1 : 0), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Byte, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Byte,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.UInt8, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__u8_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Char, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Char,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : dotnet.System.Char, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__Char_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value.get_value(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.DateTime, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.DateTime,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : dotnet.System.DateTime, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__DateTime_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.DateTimeOffset, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.DateTimeOffset,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : dotnet.System.DateTimeOffset, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__DateTimeOffset_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Decimal, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Decimal,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : dotnet.System.Decimal, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__Decimal_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Double, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Double,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.Double, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__f64_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Guid, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Guid,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : dotnet.System.Guid, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__Guid_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Int16, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Int16,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.Int16, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__i16_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Int32, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Int32,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.Int32, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__i32_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Int64, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Int64,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.Int64, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__i64_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<bool>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Boolean},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Bool>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_bool__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_Int32_box(Swift.Int32(value! ? 1 : 0)) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Byte>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Byte},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.UInt8>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_u8__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_Byte_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Char>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Char},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<dotnet.System.Char>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_System_Char__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_Int16_box(value!.get_value()) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.DateTimeOffset>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.DateTimeOffset},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<dotnet.System.DateTimeOffset>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_System_DateTimeOffset__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? value!.get_handle() : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.DateTime>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.DateTime},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<dotnet.System.DateTime>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_System_DateTime__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? value!.get_handle() : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Decimal>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Decimal},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<dotnet.System.Decimal>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_System_Decimal__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? value!.get_handle() : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Double>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Double},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.Double>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_f64__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_Double_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Guid>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Guid},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<dotnet.System.Guid>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_System_Guid__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? value!.get_handle() : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Int16>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int16},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.Int16>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_i16__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_Int16_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Int32>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int32},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.Int32>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_i32__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_Int32_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Int64>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int64},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.Int64>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_i64__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_Int64_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.SByte>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.SByte},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.Int8>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_i8__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_SByte_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Single>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Single},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.Float>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_f32__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_Single_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.Text.Json.JsonElement>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Text.Json.JsonElement},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<dotnet.System.Text.Json.JsonElement>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_System_Text_Json_JsonElement__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? value!.get_handle() : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.UInt16>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt16},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.UInt16>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_u16__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_UInt16_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.UInt32>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt32},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.UInt32>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_u32__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_UInt32_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Nullable<System.UInt64>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt64},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<Swift.UInt64>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__System_Nullable_u64__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, (value != nil) ? System_UInt64_box(value!) : nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.SByte, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.SByte,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.Int8, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__i8_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Single, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Single,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.Float, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__f32_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.String, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Optional<dotnet.System.String>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__String_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value?.get_handle() ?? nil, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.Text.Json.JsonElement, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : dotnet.System.Text.Json.JsonElement, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__JsonElement_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.UInt16, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.UInt16,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.UInt16, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__u16_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.UInt32, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.UInt32,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.UInt32, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__u32_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create(System.UInt64, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create(System.UInt64,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create(value : Swift.UInt64, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> dotnet.System.Text.Json.Nodes.JsonValue {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_0__2__u64_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(&__thrown, value, (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __return);
        }
    }
    // System.Text.Json.Nodes.JsonValue Create<T>(T, System.Text.Json.Serialization.Metadata.JsonTypeInfo<T>, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create<UT : SGBridgeGenericValue>(value : UT, jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UT>, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_1__3__UT_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UT__System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(UT.get_type_handle(), &__thrown, value.to_gval(), jsonTypeInfo.get_handle(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Text.Json.Nodes.JsonValue Create<T>(T, System.Nullable<System.Text.Json.Nodes.JsonNodeOptions>)
// docid: M:System.Text.Json.Nodes.JsonValue.Create``1(``0,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})
    open class func Create<UT : SGBridgeGenericValue>(value : UT, options : Optional<dotnet.System.Text.Json.Nodes.JsonNodeOptions> = nil) throws -> Optional<dotnet.System.Text.Json.Nodes.JsonValue> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Nodes_JsonValue_JsonValue__Create_1__2__UT_System_Nullable_System_Text_Json_Nodes_JsonNodeOptions_(UT.get_type_handle(), &__thrown, value.to_gval(), (options != nil) ? options!.get_handle() : nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Nodes.JsonValue(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
// TODO COPE (write_all_methods) (unused generic param) bool TryGetValue<T>(ref T)
} // JsonValue


}

// System.Text.Json.Serialization
extension System.Text.Json.Serialization {
// type: System.Text.Json.Serialization.IJsonOnDeserialized
open class IJsonOnDeserialized
    :
    SGBridgeGenericValue,
    System_Text_Json_Serialization_IJsonOnDeserialized
{
    open class func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_IJsonOnDeserialized_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnDeserialized()
// docid: M:System.Text.Json.Serialization.IJsonOnDeserialized.OnDeserialized
    open func OnDeserialized() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_IJsonOnDeserialized_void__OnDeserialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IJsonOnDeserialized


// type: System.Text.Json.Serialization.IJsonOnDeserializing
open class IJsonOnDeserializing
    :
    SGBridgeGenericValue,
    System_Text_Json_Serialization_IJsonOnDeserializing
{
    open class func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_IJsonOnDeserializing_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnDeserializing()
// docid: M:System.Text.Json.Serialization.IJsonOnDeserializing.OnDeserializing
    open func OnDeserializing() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_IJsonOnDeserializing_void__OnDeserializing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IJsonOnDeserializing


// type: System.Text.Json.Serialization.IJsonOnSerialized
open class IJsonOnSerialized
    :
    SGBridgeGenericValue,
    System_Text_Json_Serialization_IJsonOnSerialized
{
    open class func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_IJsonOnSerialized_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnSerialized()
// docid: M:System.Text.Json.Serialization.IJsonOnSerialized.OnSerialized
    open func OnSerialized() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_IJsonOnSerialized_void__OnSerialized_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IJsonOnSerialized


// type: System.Text.Json.Serialization.IJsonOnSerializing
open class IJsonOnSerializing
    :
    SGBridgeGenericValue,
    System_Text_Json_Serialization_IJsonOnSerializing
{
    open class func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_IJsonOnSerializing_get_type_handle();
    }
    let h : NonnullHandle;
    public func to_gval() -> GVal { return GVal(Swift.Int(bitPattern: self.h)); }
    public func dup_gval() -> GVal { return GVal(Swift.Int(bitPattern: __copy_handle(self.h))); }
    public required init(gval: GVal) { self.h = NonnullHandle(bitPattern: Swift.Int(truncatingIfNeeded: gval))!; }
    public required init(hndl: NonnullHandle) { self.h = hndl; }
    public func get_handle() -> NonnullHandle { return self.h; }

    deinit { __drop_handle(self.h); }

    // void OnSerializing()
// docid: M:System.Text.Json.Serialization.IJsonOnSerializing.OnSerializing
    open func OnSerializing() throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_IJsonOnSerializing_void__OnSerializing_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // IJsonOnSerializing


// type: System.Text.Json.Serialization.JsonAttribute
    /**
    Provides the base class for serialization attributes.

    */
open class JsonAttribute
    :
    dotnet.System.Attribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // JsonAttribute


// type: System.Text.Json.Serialization.JsonConstructorAttribute
    /**
    When placed on a constructor, indicates that the constructor should be used to create instances of the type on deserialization.

    */
public final class JsonConstructorAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonConstructorAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor
    /**
    Initializes a new instance of .

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonConstructorAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JsonConstructorAttribute


// type: System.Text.Json.Serialization.JsonConverter
    /**
    Converts an object or value to or from JSON.

    */
open class JsonConverter
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool CanConvert(System.Type)
// docid: M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)
    /**
    When overridden in a derived class, determines whether the converter instance can convert the specified object type.

    - Parameter typeToConvert: The type of the object to check whether it can be converted by this converter instance.
    - Returns: 
         if the instance can convert the specified object type; otherwise, .

    */
    open func CanConvert(typeToConvert : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonConverter_bool__CanConvert_0__1__Type(&__thrown, self.get_handle(), typeToConvert.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // JsonConverter


// type: System.Text.Json.Serialization.JsonConverterAttribute
    /**
    When placed on a property or type, specifies the converter type to use.

    */
open class JsonConverterAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonConverterAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)
    /**
    Initializes a new instance of  with the specified converter type.

    - Parameter converterType: The type of the converter.
    */
    public init(converterType : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonConverterAttribute_ctor_0__1__Type(&__thrown, converterType.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Text.Json.Serialization.JsonConverter CreateConverter(System.Type)
// docid: M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)
    /**
    When overridden in a derived class and  is , allows the derived class to create a  in order to pass additional state.

    - Parameter typeToConvert: The type of the converter.
    - Returns: The custom converter.

    */
    open func CreateConverter(typeToConvert : dotnet.System.Type_) throws -> Optional<dotnet.System.Text.Json.Serialization.JsonConverter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonConverterAttribute_JsonConverter__CreateConverter_0__1__Type(&__thrown, self.get_handle(), typeToConvert.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Serialization.JsonConverter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Type get_ConverterType()
// docid: M:System.Text.Json.Serialization.JsonConverterAttribute.get_ConverterType
    open func get_ConverterType() throws -> Optional<dotnet.System.Type_> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonConverterAttribute_Type__get_ConverterType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Type_(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the type of the , or  if it was created without a type.

    */
    open var ConverterType : Optional<dotnet.System.Type_> {
        get {
            return try! get_ConverterType();
        }
    }
} // JsonConverterAttribute


// type: System.Text.Json.Serialization.JsonConverterFactory
    /**
    Supports converting several types by using a factory pattern.

    */
open class JsonConverterFactory
    :
    dotnet.System.Text.Json.Serialization.JsonConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonConverterFactory_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Text.Json.Serialization.JsonConverter CreateConverter(System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)
    /**
    Creates a converter for a specified type.

    - Parameter typeToConvert: The type handled by the converter.
    - Parameter options: The serialization options to use.
    - Returns: A converter for which  is compatible with .

    */
    open func CreateConverter(typeToConvert : dotnet.System.Type_, options : dotnet.System.Text.Json.JsonSerializerOptions) throws -> Optional<dotnet.System.Text.Json.Serialization.JsonConverter> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonConverterFactory_JsonConverter__CreateConverter_0__2__Type_JsonSerializerOptions(&__thrown, self.get_handle(), typeToConvert.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Serialization.JsonConverter(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
} // JsonConverterFactory


// type: System.Text.Json.Serialization.JsonConverter`1
    /**
    Converts an object or value to or from JSON.

    */
open class JsonConverter_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Text.Json.Serialization.JsonConverter
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonConverter_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // bool CanConvert(System.Type)
// docid: M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)
    /**
    Determines whether the specified type can be converted.

    - Parameter typeToConvert: The type to compare against.
    - Returns: 
         if the type can be converted; otherwise, .

    */
    open override func CanConvert(typeToConvert : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonConverter_1_bool__CanConvert_0__1__Type(T.get_type_handle(), &__thrown, self.get_handle(), typeToConvert.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void Write(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    /**
    Writes a specified value as JSON.

    - Parameter writer: The writer to write to.
    - Parameter value: The value to convert to JSON.
    - Parameter options: An object that specifies serialization options to use.
    */
    open func Write(writer : dotnet.System.Text.Json.Utf8JsonWriter, value : T, options : dotnet.System.Text.Json.JsonSerializerOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonConverter_1_void__Write_0__3__Utf8JsonWriter_T_JsonSerializerOptions(T.get_type_handle(), &__thrown, self.get_handle(), writer.get_handle(), value.to_gval(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter, T, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.Serialization.JsonConverter`1.WriteAsPropertyName(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)
    open func WriteAsPropertyName(writer : dotnet.System.Text.Json.Utf8JsonWriter, value : T, options : dotnet.System.Text.Json.JsonSerializerOptions) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonConverter_1_void__WriteAsPropertyName_0__3__Utf8JsonWriter_T_JsonSerializerOptions(T.get_type_handle(), &__thrown, self.get_handle(), writer.get_handle(), value.to_gval(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HandleNull()
// docid: M:System.Text.Json.Serialization.JsonConverter`1.get_HandleNull
    open func get_HandleNull() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonConverter_1_bool__get_HandleNull_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Indicates whether  should be passed to the converter on serialization, and whether  should be passed on deserialization.

    */
    open var HandleNull : Bool {
        get {
            return try! get_HandleNull();
        }
    }
} // JsonConverter_1


// type: System.Text.Json.Serialization.JsonExtensionDataAttribute
    /**
    When placed on a property of type , any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.

    */
public final class JsonExtensionDataAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonExtensionDataAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor
    /**
    Instantiates a new instance of the  class.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonExtensionDataAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JsonExtensionDataAttribute


// type: System.Text.Json.Serialization.JsonIgnoreAttribute
    /**
    Prevents a property from being serialized or deserialized.

    */
public final class JsonIgnoreAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonIgnoreAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    /**
    Initializes a new instance of .

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonIgnoreAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonIgnoreCondition get_Condition()
// docid: M:System.Text.Json.Serialization.JsonIgnoreAttribute.get_Condition
    public func get_Condition() throws -> dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonIgnoreAttribute_JsonIgnoreCondition__get_Condition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonIgnoreCondition(val: __return);
        }
    }
    // [IsSpecialName] void set_Condition(System.Text.Json.Serialization.JsonIgnoreCondition)
// docid: M:System.Text.Json.Serialization.JsonIgnoreAttribute.set_Condition(System.Text.Json.Serialization.JsonIgnoreCondition)
    public func set_Condition(value : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonIgnoreAttribute_void__set_Condition_0__1__JsonIgnoreCondition(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Specifies the condition that must be met before a property will be ignored.

    */
    public var Condition : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        get {
            return try! get_Condition();
        }
        set(v) {
            return try! set_Condition(value: v);
        }
    }
} // JsonIgnoreAttribute


// type: System.Text.Json.Serialization.JsonIgnoreCondition
    /**
    Controls how the  ignores properties on serialization and deserialization.

    */
public struct JsonIgnoreCondition : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonIgnoreCondition_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Text.Json.Serialization.JsonIgnoreCondition Never
    /**
    Property will always be serialized and deserialized, regardless of  configuration.

    */
    public static var Never : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonIgnoreCondition(val: System_Text_Json_Serialization_JsonIgnoreCondition_get_Never());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonIgnoreCondition Always
    /**
    Property will always be ignored.

    */
    public static var Always : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonIgnoreCondition(val: System_Text_Json_Serialization_JsonIgnoreCondition_get_Always());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonIgnoreCondition WhenWritingDefault
    /**
    Property will only be ignored if it is .

    */
    public static var WhenWritingDefault : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonIgnoreCondition(val: System_Text_Json_Serialization_JsonIgnoreCondition_get_WhenWritingDefault());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonIgnoreCondition WhenWritingNull
    /**
    If the value is , the property is ignored during serialization. This is applied only to reference-type properties and fields.

    */
    public static var WhenWritingNull : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonIgnoreCondition(val: System_Text_Json_Serialization_JsonIgnoreCondition_get_WhenWritingNull());
            return __return;
        }
    }
} // JsonIgnoreCondition


// type: System.Text.Json.Serialization.JsonIncludeAttribute
    /**
    Indicates that the member should be included for serialization and deserialization.

    */
public final class JsonIncludeAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonIncludeAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    /**
    Initializes a new instance of .

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonIncludeAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // JsonIncludeAttribute


// type: System.Text.Json.Serialization.JsonKnownNamingPolicy
public struct JsonKnownNamingPolicy : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonKnownNamingPolicy_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Text.Json.Serialization.JsonKnownNamingPolicy Unspecified
    public static var Unspecified : dotnet.System.Text.Json.Serialization.JsonKnownNamingPolicy {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonKnownNamingPolicy(val: System_Text_Json_Serialization_JsonKnownNamingPolicy_get_Unspecified());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonKnownNamingPolicy CamelCase
    public static var CamelCase : dotnet.System.Text.Json.Serialization.JsonKnownNamingPolicy {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonKnownNamingPolicy(val: System_Text_Json_Serialization_JsonKnownNamingPolicy_get_CamelCase());
            return __return;
        }
    }
} // JsonKnownNamingPolicy


// type: System.Text.Json.Serialization.JsonNumberHandling
    /**
    Determines how  handles numbers when serializing and deserializing.

    */
public struct JsonNumberHandling : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonNumberHandling_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Text.Json.Serialization.JsonNumberHandling Strict
    /**
    Numbers will only be read from  tokens and will only be written as JSON numbers (without quotes).

    */
    public static var Strict : dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonNumberHandling(val: System_Text_Json_Serialization_JsonNumberHandling_get_Strict());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonNumberHandling AllowReadingFromString
    /**
    Numbers can be read from  tokens. Does not prevent numbers from being read from  token.

    */
    public static var AllowReadingFromString : dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonNumberHandling(val: System_Text_Json_Serialization_JsonNumberHandling_get_AllowReadingFromString());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonNumberHandling WriteAsString
    /**
    Numbers will be written as JSON strings (with quotes), not as JSON numbers.

    */
    public static var WriteAsString : dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonNumberHandling(val: System_Text_Json_Serialization_JsonNumberHandling_get_WriteAsString());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonNumberHandling AllowNamedFloatingPointLiterals
    /**
    The "NaN", "Infinity", and "-Infinity"  tokens can be read as floating-point constants, and the  and  values for these constants will be written as their corresponding JSON string representations.

    */
    public static var AllowNamedFloatingPointLiterals : dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonNumberHandling(val: System_Text_Json_Serialization_JsonNumberHandling_get_AllowNamedFloatingPointLiterals());
            return __return;
        }
    }
} // JsonNumberHandling


// type: System.Text.Json.Serialization.JsonNumberHandlingAttribute
    /**
    When placed on a type, property, or field, indicates what  settings should be used when serializing or deserializing numbers.

    */
public final class JsonNumberHandlingAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonNumberHandlingAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Text.Json.Serialization.JsonNumberHandling)
// docid: M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)
    /**
    Initializes a new instance of .

    - Parameter handling: A bitwise combination of the enumeration values that specify how number types should be handled when serializing or deserializing.
    */
    public init(handling : dotnet.System.Text.Json.Serialization.JsonNumberHandling) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonNumberHandlingAttribute_ctor_0__1__JsonNumberHandling(&__thrown, handling.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonNumberHandling get_Handling()
// docid: M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.get_Handling
    public func get_Handling() throws -> dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonNumberHandlingAttribute_JsonNumberHandling__get_Handling_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonNumberHandling(val: __return);
        }
    }
    /**
    Indicates what settings should be used when serializing or deserializing numbers.

    */
    public var Handling : dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        get {
            return try! get_Handling();
        }
    }
} // JsonNumberHandlingAttribute


// type: System.Text.Json.Serialization.JsonPropertyNameAttribute
    /**
    Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by .

    */
public final class JsonPropertyNameAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonPropertyNameAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.String)
// docid: M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)
    /**
    Initializes a new instance of  with the specified property name.

    - Parameter name: The name of the property.
    */
    public init(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonPropertyNameAttribute_ctor_0__1__String(&__thrown, name.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Text.Json.Serialization.JsonPropertyNameAttribute.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonPropertyNameAttribute_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    /**
    Gets the name of the property.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
} // JsonPropertyNameAttribute


// type: System.Text.Json.Serialization.JsonPropertyOrderAttribute
public final class JsonPropertyOrderAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonPropertyOrderAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Int32)
// docid: M:System.Text.Json.Serialization.JsonPropertyOrderAttribute.#ctor(System.Int32)
    public init(order : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonPropertyOrderAttribute_ctor_0__1__i32(&__thrown, order);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Int32 get_Order()
// docid: M:System.Text.Json.Serialization.JsonPropertyOrderAttribute.get_Order
    public func get_Order() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonPropertyOrderAttribute_i32__get_Order_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    public var Order : Swift.Int32 {
        get {
            return try! get_Order();
        }
    }
} // JsonPropertyOrderAttribute


// type: System.Text.Json.Serialization.JsonSerializableAttribute
public final class JsonSerializableAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonSerializableAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Type)
// docid: M:System.Text.Json.Serialization.JsonSerializableAttribute.#ctor(System.Type)
    public init(type : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonSerializableAttribute_ctor_0__1__Type(&__thrown, type.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_TypeInfoPropertyName()
// docid: M:System.Text.Json.Serialization.JsonSerializableAttribute.get_TypeInfoPropertyName
    public func get_TypeInfoPropertyName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSerializableAttribute_String__get_TypeInfoPropertyName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TypeInfoPropertyName(System.String)
// docid: M:System.Text.Json.Serialization.JsonSerializableAttribute.set_TypeInfoPropertyName(System.String)
    public func set_TypeInfoPropertyName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSerializableAttribute_void__set_TypeInfoPropertyName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonSourceGenerationMode get_GenerationMode()
// docid: M:System.Text.Json.Serialization.JsonSerializableAttribute.get_GenerationMode
    public func get_GenerationMode() throws -> dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSerializableAttribute_JsonSourceGenerationMode__get_GenerationMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode(val: __return);
        }
    }
    // [IsSpecialName] void set_GenerationMode(System.Text.Json.Serialization.JsonSourceGenerationMode)
// docid: M:System.Text.Json.Serialization.JsonSerializableAttribute.set_GenerationMode(System.Text.Json.Serialization.JsonSourceGenerationMode)
    public func set_GenerationMode(value : dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSerializableAttribute_void__set_GenerationMode_0__1__JsonSourceGenerationMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public var GenerationMode : dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode {
        get {
            return try! get_GenerationMode();
        }
        set(v) {
            return try! set_GenerationMode(value: v);
        }
    }
    public var TypeInfoPropertyName : Optional<dotnet.System.String> {
        get {
            return try! get_TypeInfoPropertyName();
        }
        set(v) {
            return try! set_TypeInfoPropertyName(value: v!);
        }
    }
} // JsonSerializableAttribute


// type: System.Text.Json.Serialization.JsonSerializerContext
open class JsonSerializerContext
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonSerializerContext_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Text.Json.Serialization.Metadata.JsonTypeInfo GetTypeInfo(System.Type)
// docid: M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)
    open func GetTypeInfo(type : dotnet.System.Type_) throws -> Optional<dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSerializerContext_JsonTypeInfo__GetTypeInfo_0__1__Type(&__thrown, self.get_handle(), type.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] System.Text.Json.JsonSerializerOptions get_Options()
// docid: M:System.Text.Json.Serialization.JsonSerializerContext.get_Options
    open func get_Options() throws -> dotnet.System.Text.Json.JsonSerializerOptions {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSerializerContext_JsonSerializerOptions__get_Options_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.JsonSerializerOptions(hndl : __return);
        }
    }
    open var Options : dotnet.System.Text.Json.JsonSerializerOptions {
        get {
            return try! get_Options();
        }
    }
} // JsonSerializerContext


// type: System.Text.Json.Serialization.JsonSourceGenerationMode
public struct JsonSourceGenerationMode : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonSourceGenerationMode_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Text.Json.Serialization.JsonSourceGenerationMode Default
    public static var Default : dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode(val: System_Text_Json_Serialization_JsonSourceGenerationMode_get_Default());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonSourceGenerationMode Metadata
    public static var Metadata : dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode(val: System_Text_Json_Serialization_JsonSourceGenerationMode_get_Metadata());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonSourceGenerationMode Serialization
    public static var Serialization : dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode(val: System_Text_Json_Serialization_JsonSourceGenerationMode_get_Serialization());
            return __return;
        }
    }
} // JsonSourceGenerationMode


// type: System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute
public final class JsonSourceGenerationOptionsAttribute
    :
    dotnet.System.Text.Json.Serialization.JsonAttribute
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonIgnoreCondition get_DefaultIgnoreCondition()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.get_DefaultIgnoreCondition
    public func get_DefaultIgnoreCondition() throws -> dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_JsonIgnoreCondition__get_DefaultIgnoreCondition_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonIgnoreCondition(val: __return);
        }
    }
    // [IsSpecialName] void set_DefaultIgnoreCondition(System.Text.Json.Serialization.JsonIgnoreCondition)
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.set_DefaultIgnoreCondition(System.Text.Json.Serialization.JsonIgnoreCondition)
    public func set_DefaultIgnoreCondition(value : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_void__set_DefaultIgnoreCondition_0__1__JsonIgnoreCondition(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreReadOnlyFields()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.get_IgnoreReadOnlyFields
    public func get_IgnoreReadOnlyFields() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_bool__get_IgnoreReadOnlyFields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreReadOnlyFields(bool)
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.set_IgnoreReadOnlyFields(System.Boolean)
    public func set_IgnoreReadOnlyFields(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_void__set_IgnoreReadOnlyFields_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreReadOnlyProperties()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.get_IgnoreReadOnlyProperties
    public func get_IgnoreReadOnlyProperties() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_bool__get_IgnoreReadOnlyProperties_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreReadOnlyProperties(bool)
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.set_IgnoreReadOnlyProperties(System.Boolean)
    public func set_IgnoreReadOnlyProperties(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_void__set_IgnoreReadOnlyProperties_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IgnoreRuntimeCustomConverters()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.get_IgnoreRuntimeCustomConverters
    public func get_IgnoreRuntimeCustomConverters() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_bool__get_IgnoreRuntimeCustomConverters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IgnoreRuntimeCustomConverters(bool)
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.set_IgnoreRuntimeCustomConverters(System.Boolean)
    public func set_IgnoreRuntimeCustomConverters(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_void__set_IgnoreRuntimeCustomConverters_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IncludeFields()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.get_IncludeFields
    public func get_IncludeFields() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_bool__get_IncludeFields_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeFields(bool)
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.set_IncludeFields(System.Boolean)
    public func set_IncludeFields(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_void__set_IncludeFields_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonKnownNamingPolicy get_PropertyNamingPolicy()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.get_PropertyNamingPolicy
    public func get_PropertyNamingPolicy() throws -> dotnet.System.Text.Json.Serialization.JsonKnownNamingPolicy {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_JsonKnownNamingPolicy__get_PropertyNamingPolicy_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonKnownNamingPolicy(val: __return);
        }
    }
    // [IsSpecialName] void set_PropertyNamingPolicy(System.Text.Json.Serialization.JsonKnownNamingPolicy)
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.set_PropertyNamingPolicy(System.Text.Json.Serialization.JsonKnownNamingPolicy)
    public func set_PropertyNamingPolicy(value : dotnet.System.Text.Json.Serialization.JsonKnownNamingPolicy) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_void__set_PropertyNamingPolicy_0__1__JsonKnownNamingPolicy(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_WriteIndented()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.get_WriteIndented
    public func get_WriteIndented() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_bool__get_WriteIndented_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_WriteIndented(bool)
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.set_WriteIndented(System.Boolean)
    public func set_WriteIndented(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_void__set_WriteIndented_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonSourceGenerationMode get_GenerationMode()
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.get_GenerationMode
    public func get_GenerationMode() throws -> dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_JsonSourceGenerationMode__get_GenerationMode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode(val: __return);
        }
    }
    // [IsSpecialName] void set_GenerationMode(System.Text.Json.Serialization.JsonSourceGenerationMode)
// docid: M:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.set_GenerationMode(System.Text.Json.Serialization.JsonSourceGenerationMode)
    public func set_GenerationMode(value : dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_JsonSourceGenerationOptionsAttribute_void__set_GenerationMode_0__1__JsonSourceGenerationMode(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public var DefaultIgnoreCondition : dotnet.System.Text.Json.Serialization.JsonIgnoreCondition {
        get {
            return try! get_DefaultIgnoreCondition();
        }
        set(v) {
            return try! set_DefaultIgnoreCondition(value: v);
        }
    }
    public var GenerationMode : dotnet.System.Text.Json.Serialization.JsonSourceGenerationMode {
        get {
            return try! get_GenerationMode();
        }
        set(v) {
            return try! set_GenerationMode(value: v);
        }
    }
    public var IgnoreReadOnlyFields : Bool {
        get {
            return try! get_IgnoreReadOnlyFields();
        }
        set(v) {
            return try! set_IgnoreReadOnlyFields(value: v);
        }
    }
    public var IgnoreReadOnlyProperties : Bool {
        get {
            return try! get_IgnoreReadOnlyProperties();
        }
        set(v) {
            return try! set_IgnoreReadOnlyProperties(value: v);
        }
    }
    public var IgnoreRuntimeCustomConverters : Bool {
        get {
            return try! get_IgnoreRuntimeCustomConverters();
        }
        set(v) {
            return try! set_IgnoreRuntimeCustomConverters(value: v);
        }
    }
    public var IncludeFields : Bool {
        get {
            return try! get_IncludeFields();
        }
        set(v) {
            return try! set_IncludeFields(value: v);
        }
    }
    public var PropertyNamingPolicy : dotnet.System.Text.Json.Serialization.JsonKnownNamingPolicy {
        get {
            return try! get_PropertyNamingPolicy();
        }
        set(v) {
            return try! set_PropertyNamingPolicy(value: v);
        }
    }
    public var WriteIndented : Bool {
        get {
            return try! get_WriteIndented();
        }
        set(v) {
            return try! set_WriteIndented(value: v);
        }
    }
} // JsonSourceGenerationOptionsAttribute


// type: System.Text.Json.Serialization.JsonStringEnumConverter
    /**
    Converts enumeration values to and from strings.

    */
open class JsonStringEnumConverter
    :
    dotnet.System.Text.Json.Serialization.JsonConverterFactory
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonStringEnumConverter_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor
    /**
    Initializes an instance of the  class with the default naming policy that allows integer values.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonStringEnumConverter_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Text.Json.JsonNamingPolicy, bool)
// docid: M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)
    /**
    Initializes an instance of the  class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.

    - Parameter namingPolicy: The optional naming policy for writing enum values.
    - Parameter allowIntegerValues: 
         to allow undefined enum values; otherwise, . When , if an enum value isn't defined, it will output as a number rather than a string.
    */
    public init(namingPolicy : Optional<dotnet.System.Text.Json.JsonNamingPolicy>, allowIntegerValues : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_JsonStringEnumConverter_ctor_0__2__JsonNamingPolicy_bool(&__thrown, namingPolicy?.get_handle() ?? nil, Swift.Int32(allowIntegerValues ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // bool CanConvert(System.Type)
// docid: M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)
    /**
    Determines whether the specified type can be converted to an enum.

    - Parameter typeToConvert: The type to be checked.
    - Returns: 
         if the type can be converted; otherwise, .

    */
    open /* method final */ override func CanConvert(typeToConvert : dotnet.System.Type_) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonStringEnumConverter_bool__CanConvert_0__1__Type(&__thrown, self.get_handle(), typeToConvert.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Text.Json.Serialization.JsonConverter CreateConverter(System.Type, System.Text.Json.JsonSerializerOptions)
// docid: M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)
    /**
    Creates a converter for the specified type.

    - Parameter typeToConvert: The type handled by the converter.
    - Parameter options: The serialization options to use.
    - Returns: A converter for which  is compatible with .

    */
    open /* method final */ override func CreateConverter(typeToConvert : dotnet.System.Type_, options : dotnet.System.Text.Json.JsonSerializerOptions) throws -> dotnet.System.Text.Json.Serialization.JsonConverter {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_JsonStringEnumConverter_JsonConverter__CreateConverter_0__2__Type_JsonSerializerOptions(&__thrown, self.get_handle(), typeToConvert.get_handle(), options.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter(hndl : __return);
        }
    }
} // JsonStringEnumConverter


// type: System.Text.Json.Serialization.JsonUnknownTypeHandling
public struct JsonUnknownTypeHandling : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_JsonUnknownTypeHandling_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Text.Json.Serialization.JsonUnknownTypeHandling JsonElement
    public static var JsonElement : dotnet.System.Text.Json.Serialization.JsonUnknownTypeHandling {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonUnknownTypeHandling(val: System_Text_Json_Serialization_JsonUnknownTypeHandling_get_JsonElement());
            return __return;
        }
    }
    // static field: System.Text.Json.Serialization.JsonUnknownTypeHandling JsonNode
    public static var JsonNode : dotnet.System.Text.Json.Serialization.JsonUnknownTypeHandling {
        get {
        let __return = dotnet.System.Text.Json.Serialization.JsonUnknownTypeHandling(val: System_Text_Json_Serialization_JsonUnknownTypeHandling_get_JsonNode());
            return __return;
        }
    }
} // JsonUnknownTypeHandling


// type: System.Text.Json.Serialization.ReferenceHandler
    /**
    This class defines how the  deals with references on serialization and deserialization.

    */
open class ReferenceHandler
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_ReferenceHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // System.Text.Json.Serialization.ReferenceResolver CreateResolver()
// docid: M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver
    /**
    Returns the  used for each serialization call.

    - Returns: The resolver to use for serialization and deserialization.

    */
    open func CreateResolver() throws -> dotnet.System.Text.Json.Serialization.ReferenceResolver {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_ReferenceHandler_ReferenceResolver__CreateResolver_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.ReferenceResolver(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.ReferenceHandler get_IgnoreCycles()
// docid: M:System.Text.Json.Serialization.ReferenceHandler.get_IgnoreCycles
    open class func get_IgnoreCycles() throws -> dotnet.System.Text.Json.Serialization.ReferenceHandler {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_ReferenceHandler_ReferenceHandler__get_IgnoreCycles_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.ReferenceHandler(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.ReferenceHandler get_Preserve()
// docid: M:System.Text.Json.Serialization.ReferenceHandler.get_Preserve
    open class func get_Preserve() throws -> dotnet.System.Text.Json.Serialization.ReferenceHandler {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_ReferenceHandler_ReferenceHandler__get_Preserve_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.ReferenceHandler(hndl : __return);
        }
    }
    public static var IgnoreCycles : dotnet.System.Text.Json.Serialization.ReferenceHandler {
        get {
            return try! get_IgnoreCycles();
        }
    }
    /**
    Metadata properties will be honored when deserializing JSON objects and arrays into reference types and written when serializing reference types. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.

    */
    public static var Preserve : dotnet.System.Text.Json.Serialization.ReferenceHandler {
        get {
            return try! get_Preserve();
        }
    }
} // ReferenceHandler


// type: System.Text.Json.Serialization.ReferenceHandler`1
    /**
    This class defines how the  deals with references on serialization and deserialization.

    */
public final class ReferenceHandler_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Text.Json.Serialization.ReferenceHandler
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_ReferenceHandler_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor
    /**
    Initializes a new instance of the  generic class that can create a  instance of the specified .

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_ReferenceHandler_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Text.Json.Serialization.ReferenceResolver CreateResolver()
// docid: M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver
    /**
    Creates a new  of type  used for each serialization call.

    - Returns: The new resolver to use for serialization and deserialization.

    */
    public override func CreateResolver() throws -> dotnet.System.Text.Json.Serialization.ReferenceResolver {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_ReferenceHandler_1_ReferenceResolver__CreateResolver_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.ReferenceResolver(hndl : __return);
        }
    }
} // ReferenceHandler_1


// type: System.Text.Json.Serialization.ReferenceResolver
    /**
    This class defines how the  deals with references on serialization and deserialization.
 Defines the core behavior of preserving references on serialization and deserialization.

    */
open class ReferenceResolver
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_ReferenceResolver_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void AddReference(System.String, System.Object)
// docid: M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)
    /**
    Adds an entry to the bag of references using the specified id and value.
 This method gets called when an $id metadata property from a JSON object is read.

    - Parameter referenceId: The identifier of the JSON object or array.
    - Parameter value: The value of the CLR reference type object that results from parsing the JSON object.
    */
    open func AddReference(referenceId : dotnet.System.String, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_ReferenceResolver_void__AddReference_0__2__String_Object(&__thrown, self.get_handle(), referenceId.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String GetReference(System.Object, ref bool)
// docid: M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)
    /**
    Gets the reference identifier of the specified value if exists; otherwise a new id is assigned.
 This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object.

    - Parameter value: The value of the CLR reference type object to get an id for.
    - Parameter alreadyExists: When this method returns,  if a reference to value already exists; otherwise, .
    - Returns: The reference id for the specified object.

    */
    open func GetReference(value : dotnet.System.Object, alreadyExists : inout Bool) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
            var _tmp_out_alreadyExists = Swift.Int32(alreadyExists ? 1 : 0);
        let __return = System_Text_Json_Serialization_ReferenceResolver_String__GetReference_0__2__Object_outbool(&__thrown, self.get_handle(), value.get_handle(), &_tmp_out_alreadyExists);
        let _tmp2_alreadyExists = (_tmp_out_alreadyExists) != 0;
            alreadyExists = _tmp2_alreadyExists;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Object ResolveReference(System.String)
// docid: M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)
    /**
    Returns the CLR reference type object related to the specified reference id.
 This method gets called when $ref metadata property is read.

    - Parameter referenceId: The reference id related to the returned object.
    - Returns: The reference type object related to the specified reference id.

    */
    open func ResolveReference(referenceId : dotnet.System.String) throws -> dotnet.System.Object {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_ReferenceResolver_Object__ResolveReference_0__1__String(&__thrown, self.get_handle(), referenceId.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Object(hndl : __return);
        }
    }
} // ReferenceResolver


}
// System.Text.Json.Serialization.Metadata
extension System.Text.Json.Serialization.Metadata {
// type: System.Text.Json.Serialization.Metadata.JsonMetadataServices
public struct JsonMetadataServices {
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TElement[]> CreateArrayInfo<TElement>(System.Text.Json.JsonSerializerOptions, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TElement[]>)
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateConcurrentQueueInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateConcurrentStackInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateDictionaryInfo<TCollection, TKey, TValue>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateICollectionInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
    // System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateIDictionaryInfo<TCollection>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIDictionaryInfo``1(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})
    public static func CreateIDictionaryInfo<UTCollection : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : dotnet.System.Func_1<UTCollection>, stringInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, objectInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTCollection___CreateIDictionaryInfo_1__6__JsonSerializerOptions_System_Func_UTCollection__JsonTypeInfo_JsonTypeInfo_JsonNumberHandling_System_Action_System_Text_Json_Utf8JsonWriter_UTCollection_(UTCollection.get_type_handle(), &__thrown, options.get_handle(), nil, stringInfo.get_handle(), objectInfo.get_handle(), numberHandling.get_value(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateIDictionaryInfo<UTCollection : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : @escaping () throws -> UTCollection, stringInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, objectInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : @escaping (Optional<dotnet.System.Text.Json.Utf8JsonWriter>, UTCollection) throws -> Void) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        let del_createObjectFunc = try dotnet.System.Func_1<UTCollection>(createObjectFunc);
        let del_serializeFunc = try dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>(serializeFunc);
        return try CreateIDictionaryInfo(options: options, createObjectFunc: del_createObjectFunc, stringInfo: stringInfo, objectInfo: objectInfo, numberHandling: numberHandling, serializeFunc: del_serializeFunc);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateIDictionaryInfo<TCollection, TKey, TValue>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
    // System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateIEnumerableInfo<TCollection>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIEnumerableInfo``1(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})
    public static func CreateIEnumerableInfo<UTCollection : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : dotnet.System.Func_1<UTCollection>, elementInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTCollection___CreateIEnumerableInfo_1__5__JsonSerializerOptions_System_Func_UTCollection__JsonTypeInfo_JsonNumberHandling_System_Action_System_Text_Json_Utf8JsonWriter_UTCollection_(UTCollection.get_type_handle(), &__thrown, options.get_handle(), nil, elementInfo.get_handle(), numberHandling.get_value(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateIEnumerableInfo<UTCollection : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : @escaping () throws -> UTCollection, elementInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : @escaping (Optional<dotnet.System.Text.Json.Utf8JsonWriter>, UTCollection) throws -> Void) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        let del_createObjectFunc = try dotnet.System.Func_1<UTCollection>(createObjectFunc);
        let del_serializeFunc = try dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>(serializeFunc);
        return try CreateIEnumerableInfo(options: options, createObjectFunc: del_createObjectFunc, elementInfo: elementInfo, numberHandling: numberHandling, serializeFunc: del_serializeFunc);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateIEnumerableInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
    // System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateIListInfo<TCollection>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIListInfo``1(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0})
    public static func CreateIListInfo<UTCollection : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : dotnet.System.Func_1<UTCollection>, objectInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTCollection___CreateIListInfo_1__5__JsonSerializerOptions_System_Func_UTCollection__JsonTypeInfo_JsonNumberHandling_System_Action_System_Text_Json_Utf8JsonWriter_UTCollection_(UTCollection.get_type_handle(), &__thrown, options.get_handle(), nil, objectInfo.get_handle(), numberHandling.get_value(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateIListInfo<UTCollection : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : @escaping () throws -> UTCollection, objectInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : @escaping (Optional<dotnet.System.Text.Json.Utf8JsonWriter>, UTCollection) throws -> Void) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        let del_createObjectFunc = try dotnet.System.Func_1<UTCollection>(createObjectFunc);
        let del_serializeFunc = try dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>(serializeFunc);
        return try CreateIListInfo(options: options, createObjectFunc: del_createObjectFunc, objectInfo: objectInfo, numberHandling: numberHandling, serializeFunc: del_serializeFunc);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateIListInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
    // System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateImmutableDictionaryInfo<TCollection, TKey, TValue>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>, System.Func<System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>,TCollection>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateImmutableDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0},System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``1,``2}},``0})
    public static func CreateImmutableDictionaryInfo<UTCollection : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : dotnet.System.Func_1<UTCollection>, keyInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, valueInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>, createRangeFunc : dotnet.System.Func_2<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>,UTCollection>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTCollection___CreateImmutableDictionaryInfo_3__7__JsonSerializerOptions_System_Func_UTCollection__JsonTypeInfo_JsonTypeInfo_JsonNumberHandling_System_Action_System_Text_Json_Utf8JsonWriter_UTCollection__System_Func_System_Collections_Generic_System_Collections_Generic_IEnumerable_System_Collections_Generic_System_Collections_Generic_KeyValuePair_UTKey_UTValue___UTCollection_(UTCollection.get_type_handle(), UTKey.get_type_handle(), UTValue.get_type_handle(), &__thrown, options.get_handle(), nil, keyInfo.get_handle(), valueInfo.get_handle(), numberHandling.get_value(), nil, createRangeFunc.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateImmutableDictionaryInfo<UTCollection : SGBridgeGenericValue,UTKey : SGBridgeGenericValue,UTValue : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : @escaping () throws -> UTCollection, keyInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, valueInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : @escaping (Optional<dotnet.System.Text.Json.Utf8JsonWriter>, UTCollection) throws -> Void, createRangeFunc : @escaping (Optional<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>>) throws -> UTCollection) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        let del_createObjectFunc = try dotnet.System.Func_1<UTCollection>(createObjectFunc);
        let del_serializeFunc = try dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>(serializeFunc);
        let del_createRangeFunc = try dotnet.System.Func_2<dotnet.System.Collections.Generic.IEnumerable_1<dotnet.System.Collections.Generic.KeyValuePair_2<UTKey,UTValue>>,UTCollection>(createRangeFunc);
        return try CreateImmutableDictionaryInfo(options: options, createObjectFunc: del_createObjectFunc, keyInfo: keyInfo, valueInfo: valueInfo, numberHandling: numberHandling, serializeFunc: del_serializeFunc, createRangeFunc: del_createRangeFunc);
    }
    // System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateImmutableEnumerableInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>, System.Func<System.Collections.Generic.IEnumerable<TElement>,TCollection>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateImmutableEnumerableInfo``2(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0},System.Func{System.Collections.Generic.IEnumerable{``1},``0})
    public static func CreateImmutableEnumerableInfo<UTCollection : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : dotnet.System.Func_1<UTCollection>, elementInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>, createRangeFunc : dotnet.System.Func_2<dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTCollection>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTCollection___CreateImmutableEnumerableInfo_2__6__JsonSerializerOptions_System_Func_UTCollection__JsonTypeInfo_JsonNumberHandling_System_Action_System_Text_Json_Utf8JsonWriter_UTCollection__System_Func_System_Collections_Generic_System_Collections_Generic_IEnumerable_UTElement__UTCollection_(UTCollection.get_type_handle(), UTElement.get_type_handle(), &__thrown, options.get_handle(), nil, elementInfo.get_handle(), numberHandling.get_value(), nil, createRangeFunc.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateImmutableEnumerableInfo<UTCollection : SGBridgeGenericValue,UTElement : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : @escaping () throws -> UTCollection, elementInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : @escaping (Optional<dotnet.System.Text.Json.Utf8JsonWriter>, UTCollection) throws -> Void, createRangeFunc : @escaping (dotnet.System.Collections.Generic.IEnumerable_1<UTElement>) throws -> UTCollection) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        let del_createObjectFunc = try dotnet.System.Func_1<UTCollection>(createObjectFunc);
        let del_serializeFunc = try dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>(serializeFunc);
        let del_createRangeFunc = try dotnet.System.Func_2<dotnet.System.Collections.Generic.IEnumerable_1<UTElement>,UTCollection>(createRangeFunc);
        return try CreateImmutableEnumerableInfo(options: options, createObjectFunc: del_createObjectFunc, elementInfo: elementInfo, numberHandling: numberHandling, serializeFunc: del_serializeFunc, createRangeFunc: del_createRangeFunc);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateIReadOnlyDictionaryInfo<TCollection, TKey, TValue>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateISetInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateListInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
    // System.Text.Json.Serialization.Metadata.JsonTypeInfo<T> CreateObjectInfo<T>(System.Text.Json.JsonSerializerOptions, System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<T>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonObjectInfoValues{``0})
    public static func CreateObjectInfo<UT : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, objectInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonObjectInfoValues_1<UT>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UT___CreateObjectInfo_1__2__JsonSerializerOptions_System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_UT_(UT.get_type_handle(), &__thrown, options.get_handle(), objectInfo.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1(hndl : __return);
        }
    }
    // System.Text.Json.Serialization.Metadata.JsonPropertyInfo CreatePropertyInfo<T>(System.Text.Json.JsonSerializerOptions, bool, bool, bool, System.Type, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonConverter<T>, System.Func<System.Object,T>, System.Action<System.Object,T>, System.Nullable<System.Text.Json.Serialization.JsonIgnoreCondition>, bool, System.Nullable<System.Text.Json.Serialization.JsonNumberHandling>, System.String, System.String)
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo``1(System.Text.Json.JsonSerializerOptions,System.Boolean,System.Boolean,System.Boolean,System.Type,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonConverter{``0},System.Func{System.Object,``0},System.Action{System.Object,``0},System.Nullable{System.Text.Json.Serialization.JsonIgnoreCondition},System.Boolean,System.Nullable{System.Text.Json.Serialization.JsonNumberHandling},System.String,System.String)
    public static func CreatePropertyInfo<UT : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, isProperty : Bool, isPublic : Bool, isVirtual : Bool, declaringType : dotnet.System.Type_, propertyTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, converter : dotnet.System.Text.Json.Serialization.JsonConverter_1<UT>, getter : dotnet.System.Func_2<dotnet.System.Object,UT>, setter : dotnet.System.Action_2<dotnet.System.Object,UT>, ignoreCondition : Optional<dotnet.System.Text.Json.Serialization.JsonIgnoreCondition>, hasJsonInclude : Bool, numberHandling : Optional<dotnet.System.Text.Json.Serialization.JsonNumberHandling>, propertyName : dotnet.System.String, jsonPropertyName : Optional<dotnet.System.String>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonPropertyInfo {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_JsonPropertyInfo__CreatePropertyInfo_1__14__JsonSerializerOptions_bool_bool_bool_Type_JsonTypeInfo_System_Text_Json_Serialization_JsonConverter_UT__System_Func_object_UT__System_Action_object_UT__System_Nullable_System_Text_Json_Serialization_JsonIgnoreCondition__bool_System_Nullable_System_Text_Json_Serialization_JsonNumberHandling__String_String(UT.get_type_handle(), &__thrown, options.get_handle(), Swift.Int32(isProperty ? 1 : 0), Swift.Int32(isPublic ? 1 : 0), Swift.Int32(isVirtual ? 1 : 0), declaringType.get_handle(), propertyTypeInfo.get_handle(), nil, nil, nil, (ignoreCondition != nil) ? System_Int32_box(ignoreCondition!.get_value()) : nil, Swift.Int32(hasJsonInclude ? 1 : 0), (numberHandling != nil) ? System_Int32_box(numberHandling!.get_value()) : nil, propertyName.get_handle(), jsonPropertyName?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.Metadata.JsonPropertyInfo(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreatePropertyInfo<UT : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, isProperty : Bool, isPublic : Bool, isVirtual : Bool, declaringType : dotnet.System.Type_, propertyTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, converter : dotnet.System.Text.Json.Serialization.JsonConverter_1<UT>, getter : @escaping (Optional<dotnet.System.Object>) throws -> UT, setter : @escaping (Optional<dotnet.System.Object>, UT) throws -> Void, ignoreCondition : Optional<dotnet.System.Text.Json.Serialization.JsonIgnoreCondition>, hasJsonInclude : Bool, numberHandling : Optional<dotnet.System.Text.Json.Serialization.JsonNumberHandling>, propertyName : dotnet.System.String, jsonPropertyName : Optional<dotnet.System.String>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonPropertyInfo {
        let del_getter = try dotnet.System.Func_2<dotnet.System.Object,UT>(getter);
        let del_setter = try dotnet.System.Action_2<dotnet.System.Object,UT>(setter);
        return try CreatePropertyInfo(options: options, isProperty: isProperty, isPublic: isPublic, isVirtual: isVirtual, declaringType: declaringType, propertyTypeInfo: propertyTypeInfo, converter: converter, getter: del_getter, setter: del_setter, ignoreCondition: ignoreCondition, hasJsonInclude: hasJsonInclude, numberHandling: numberHandling, propertyName: propertyName, jsonPropertyName: jsonPropertyName);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateQueueInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateStackInfo<TCollection, TElement>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>)
    // System.Text.Json.Serialization.Metadata.JsonTypeInfo<TCollection> CreateStackOrQueueInfo<TCollection>(System.Text.Json.JsonSerializerOptions, System.Func<TCollection>, System.Text.Json.Serialization.Metadata.JsonTypeInfo, System.Text.Json.Serialization.JsonNumberHandling, System.Action<System.Text.Json.Utf8JsonWriter,TCollection>, System.Action<TCollection,System.Object>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateStackOrQueueInfo``1(System.Text.Json.JsonSerializerOptions,System.Func{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.Serialization.JsonNumberHandling,System.Action{System.Text.Json.Utf8JsonWriter,``0},System.Action{``0,System.Object})
    public static func CreateStackOrQueueInfo<UTCollection : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : dotnet.System.Func_1<UTCollection>, elementInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>, addFunc : dotnet.System.Action_2<UTCollection,dotnet.System.Object>) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_Metadata_JsonTypeInfo_UTCollection___CreateStackOrQueueInfo_1__6__JsonSerializerOptions_System_Func_UTCollection__JsonTypeInfo_JsonNumberHandling_System_Action_System_Text_Json_Utf8JsonWriter_UTCollection__System_Action_UTCollection_object_(UTCollection.get_type_handle(), &__thrown, options.get_handle(), nil, elementInfo.get_handle(), numberHandling.get_value(), nil, addFunc.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1(hndl : __return);
        }
    }
    // delegate closure overload
    public static func CreateStackOrQueueInfo<UTCollection : SGBridgeGenericValue>(options : dotnet.System.Text.Json.JsonSerializerOptions, createObjectFunc : @escaping () throws -> UTCollection, elementInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo, numberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling, serializeFunc : @escaping (Optional<dotnet.System.Text.Json.Utf8JsonWriter>, UTCollection) throws -> Void, addFunc : @escaping (UTCollection, Optional<dotnet.System.Object>) throws -> Void) throws -> dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTCollection> {
        let del_createObjectFunc = try dotnet.System.Func_1<UTCollection>(createObjectFunc);
        let del_serializeFunc = try dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,UTCollection>(serializeFunc);
        let del_addFunc = try dotnet.System.Action_2<UTCollection,dotnet.System.Object>(addFunc);
        return try CreateStackOrQueueInfo(options: options, createObjectFunc: del_createObjectFunc, elementInfo: elementInfo, numberHandling: numberHandling, serializeFunc: del_serializeFunc, addFunc: del_addFunc);
    }
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.Metadata.JsonTypeInfo<T> CreateValueInfo<T>(System.Text.Json.JsonSerializerOptions, System.Text.Json.Serialization.JsonConverter)
// TODO COPE (write_all_methods) (unused generic param) System.Text.Json.Serialization.JsonConverter<T> GetEnumConverter<T>(System.Text.Json.JsonSerializerOptions)
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<bool> get_BooleanConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_BooleanConverter
    public static func get_BooleanConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Bool> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_bool___get_BooleanConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Byte[]> get_ByteArrayConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_ByteArrayConverter
    public static func get_ByteArrayConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System_Arr<Swift.UInt8>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_u8Array___get_ByteArrayConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Byte> get_ByteConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_ByteConverter
    public static func get_ByteConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_u8___get_ByteConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Char> get_CharConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_CharConverter
    public static func get_CharConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Char> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_Char___get_CharConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.DateTime> get_DateTimeConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_DateTimeConverter
    public static func get_DateTimeConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.DateTime> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_DateTime___get_DateTimeConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset> get_DateTimeOffsetConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_DateTimeOffsetConverter
    public static func get_DateTimeOffsetConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.DateTimeOffset> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_DateTimeOffset___get_DateTimeOffsetConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Decimal> get_DecimalConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_DecimalConverter
    public static func get_DecimalConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Decimal> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_Decimal___get_DecimalConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Double> get_DoubleConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_DoubleConverter
    public static func get_DoubleConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_f64___get_DoubleConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Guid> get_GuidConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_GuidConverter
    public static func get_GuidConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Guid> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_Guid___get_GuidConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Int16> get_Int16Converter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_Int16Converter
    public static func get_Int16Converter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_i16___get_Int16Converter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Int32> get_Int32Converter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_Int32Converter
    public static func get_Int32Converter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_i32___get_Int32Converter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Int64> get_Int64Converter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_Int64Converter
    public static func get_Int64Converter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_i64___get_Int64Converter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Text.Json.JsonElement> get_JsonElementConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_JsonElementConverter
    public static func get_JsonElementConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Text.Json.JsonElement> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_Text_Json_JsonElement___get_JsonElementConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Object> get_ObjectConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_ObjectConverter
    public static func get_ObjectConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_object___get_ObjectConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.SByte> get_SByteConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_SByteConverter
    public static func get_SByteConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Int8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_i8___get_SByteConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Single> get_SingleConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_SingleConverter
    public static func get_SingleConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_f32___get_SingleConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.String> get_StringConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_StringConverter
    public static func get_StringConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_string___get_StringConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.TimeSpan> get_TimeSpanConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_TimeSpanConverter
    public static func get_TimeSpanConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.TimeSpan> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_TimeSpan___get_TimeSpanConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.UInt16> get_UInt16Converter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_UInt16Converter
    public static func get_UInt16Converter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.UInt16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_u16___get_UInt16Converter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.UInt32> get_UInt32Converter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_UInt32Converter
    public static func get_UInt32Converter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.UInt32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_u32___get_UInt32Converter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.UInt64> get_UInt64Converter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_UInt64Converter
    public static func get_UInt64Converter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.UInt64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_u64___get_UInt64Converter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Uri> get_UriConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_UriConverter
    public static func get_UriConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Uri> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_Uri___get_UriConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonConverter<System.Version> get_VersionConverter()
// docid: M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.get_VersionConverter
    public static func get_VersionConverter() throws -> dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Version> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonMetadataServices_System_Text_Json_Serialization_JsonConverter_System_Version___get_VersionConverter_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonConverter_1(hndl : __return);
        }
    }
    public static var BooleanConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Bool> {
        get {
            return try! get_BooleanConverter();
        }
    }
    public static var ByteArrayConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System_Arr<Swift.UInt8>> {
        get {
            return try! get_ByteArrayConverter();
        }
    }
    public static var ByteConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.UInt8> {
        get {
            return try! get_ByteConverter();
        }
    }
    public static var CharConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Char> {
        get {
            return try! get_CharConverter();
        }
    }
    public static var DateTimeConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.DateTime> {
        get {
            return try! get_DateTimeConverter();
        }
    }
    public static var DateTimeOffsetConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.DateTimeOffset> {
        get {
            return try! get_DateTimeOffsetConverter();
        }
    }
    public static var DecimalConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Decimal> {
        get {
            return try! get_DecimalConverter();
        }
    }
    public static var DoubleConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Double> {
        get {
            return try! get_DoubleConverter();
        }
    }
    public static var GuidConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Guid> {
        get {
            return try! get_GuidConverter();
        }
    }
    public static var Int16Converter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Int16> {
        get {
            return try! get_Int16Converter();
        }
    }
    public static var Int32Converter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Int32> {
        get {
            return try! get_Int32Converter();
        }
    }
    public static var Int64Converter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Int64> {
        get {
            return try! get_Int64Converter();
        }
    }
    public static var JsonElementConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Text.Json.JsonElement> {
        get {
            return try! get_JsonElementConverter();
        }
    }
    public static var ObjectConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Object> {
        get {
            return try! get_ObjectConverter();
        }
    }
    public static var SByteConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Int8> {
        get {
            return try! get_SByteConverter();
        }
    }
    public static var SingleConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.Float> {
        get {
            return try! get_SingleConverter();
        }
    }
    public static var StringConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.String> {
        get {
            return try! get_StringConverter();
        }
    }
    public static var TimeSpanConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.TimeSpan> {
        get {
            return try! get_TimeSpanConverter();
        }
    }
    public static var UInt16Converter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.UInt16> {
        get {
            return try! get_UInt16Converter();
        }
    }
    public static var UInt32Converter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.UInt32> {
        get {
            return try! get_UInt32Converter();
        }
    }
    public static var UInt64Converter : dotnet.System.Text.Json.Serialization.JsonConverter_1<Swift.UInt64> {
        get {
            return try! get_UInt64Converter();
        }
    }
    public static var UriConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Uri> {
        get {
            return try! get_UriConverter();
        }
    }
    public static var VersionConverter : dotnet.System.Text.Json.Serialization.JsonConverter_1<dotnet.System.Version> {
        get {
            return try! get_VersionConverter();
        }
    }
} // JsonMetadataServices


// type: System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1
public final class JsonObjectInfoValues_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_ctor_0__0(T.get_type_handle(), &__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Func<System.Text.Json.Serialization.Metadata.JsonParameterInfoValues[]> get_ConstructorParameterMetadataInitializer()
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.get_ConstructorParameterMetadataInitializer
    public func get_ConstructorParameterMetadataInitializer() throws -> Optional<dotnet.System.Func_1<dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonParameterInfoValues>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_System_Func_System_Text_Json_Serialization_Metadata_JsonParameterInfoValuesArray___get_ConstructorParameterMetadataInitializer_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ConstructorParameterMetadataInitializer(System.Func<System.Text.Json.Serialization.Metadata.JsonParameterInfoValues[]>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.set_ConstructorParameterMetadataInitializer(System.Func{System.Text.Json.Serialization.Metadata.JsonParameterInfoValues[]})
    public func set_ConstructorParameterMetadataInitializer(value : Optional<dotnet.System.Func_1<dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonParameterInfoValues>>>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_void__set_ConstructorParameterMetadataInitializer_0__1__System_Func_System_Text_Json_Serialization_Metadata_JsonParameterInfoValuesArray_(T.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ConstructorParameterMetadataInitializer(value : @escaping () throws -> dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonParameterInfoValues>) throws {
        let del_value = try dotnet.System.Func_1<dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonParameterInfoValues>>(value);
        return try set_ConstructorParameterMetadataInitializer(value: del_value);
    }
    // [IsSpecialName] System.Text.Json.Serialization.JsonNumberHandling get_NumberHandling()
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.get_NumberHandling
    public func get_NumberHandling() throws -> dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_JsonNumberHandling__get_NumberHandling_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Text.Json.Serialization.JsonNumberHandling(val: __return);
        }
    }
    // [IsSpecialName] void set_NumberHandling(System.Text.Json.Serialization.JsonNumberHandling)
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.set_NumberHandling(System.Text.Json.Serialization.JsonNumberHandling)
    public func set_NumberHandling(value : dotnet.System.Text.Json.Serialization.JsonNumberHandling) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_void__set_NumberHandling_0__1__JsonNumberHandling(T.get_type_handle(), &__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Func<T> get_ObjectCreator()
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.get_ObjectCreator
    public func get_ObjectCreator() throws -> Optional<dotnet.System.Func_1<T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_System_Func_T___get_ObjectCreator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_1(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ObjectCreator(System.Func<T>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.set_ObjectCreator(System.Func{`0})
    public func set_ObjectCreator(value : dotnet.System.Func_1<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_void__set_ObjectCreator_0__1__System_Func_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ObjectCreator(value : @escaping () throws -> T) throws {
        let del_value = try dotnet.System.Func_1<T>(value);
        return try set_ObjectCreator(value: del_value);
    }
    // [IsSpecialName] System.Func<System.Object[],T> get_ObjectWithParameterizedConstructorCreator()
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.get_ObjectWithParameterizedConstructorCreator
    public func get_ObjectWithParameterizedConstructorCreator() throws -> Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_System_Func_objectArray_T___get_ObjectWithParameterizedConstructorCreator_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_ObjectWithParameterizedConstructorCreator(System.Func<System.Object[],T>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.set_ObjectWithParameterizedConstructorCreator(System.Func{System.Object[],`0})
    public func set_ObjectWithParameterizedConstructorCreator(value : dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,T>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_void__set_ObjectWithParameterizedConstructorCreator_0__1__System_Func_objectArray_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_ObjectWithParameterizedConstructorCreator(value : @escaping (Optional<dotnet.System_Arr<dotnet.System.Object>>) throws -> T) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,T>(value);
        return try set_ObjectWithParameterizedConstructorCreator(value: del_value);
    }
    // [IsSpecialName] System.Func<System.Text.Json.Serialization.JsonSerializerContext,System.Text.Json.Serialization.Metadata.JsonPropertyInfo[]> get_PropertyMetadataInitializer()
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.get_PropertyMetadataInitializer
    public func get_PropertyMetadataInitializer() throws -> Optional<dotnet.System.Func_2<dotnet.System.Text.Json.Serialization.JsonSerializerContext,dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonPropertyInfo>>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_System_Func_System_Text_Json_Serialization_JsonSerializerContext_System_Text_Json_Serialization_Metadata_JsonPropertyInfoArray___get_PropertyMetadataInitializer_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Func_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_PropertyMetadataInitializer(System.Func<System.Text.Json.Serialization.JsonSerializerContext,System.Text.Json.Serialization.Metadata.JsonPropertyInfo[]>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.set_PropertyMetadataInitializer(System.Func{System.Text.Json.Serialization.JsonSerializerContext,System.Text.Json.Serialization.Metadata.JsonPropertyInfo[]})
    public func set_PropertyMetadataInitializer(value : Optional<dotnet.System.Func_2<dotnet.System.Text.Json.Serialization.JsonSerializerContext,dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonPropertyInfo>>>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_void__set_PropertyMetadataInitializer_0__1__System_Func_System_Text_Json_Serialization_JsonSerializerContext_System_Text_Json_Serialization_Metadata_JsonPropertyInfoArray_(T.get_type_handle(), &__thrown, self.get_handle(), (value?.get_handle()));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_PropertyMetadataInitializer(value : @escaping (Optional<dotnet.System.Text.Json.Serialization.JsonSerializerContext>) throws -> dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonPropertyInfo>) throws {
        let del_value = try dotnet.System.Func_2<dotnet.System.Text.Json.Serialization.JsonSerializerContext,dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonPropertyInfo>>(value);
        return try set_PropertyMetadataInitializer(value: del_value);
    }
    // [IsSpecialName] System.Action<System.Text.Json.Utf8JsonWriter,T> get_SerializeHandler()
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.get_SerializeHandler
    public func get_SerializeHandler() throws -> Optional<dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_System_Action_System_Text_Json_Utf8JsonWriter_T___get_SerializeHandler_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SerializeHandler(System.Action<System.Text.Json.Utf8JsonWriter,T>)
// docid: M:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.set_SerializeHandler(System.Action{System.Text.Json.Utf8JsonWriter,`0})
    public func set_SerializeHandler(value : dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,T>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonObjectInfoValues_1_void__set_SerializeHandler_0__1__System_Action_System_Text_Json_Utf8JsonWriter_T_(T.get_type_handle(), &__thrown, self.get_handle(), nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    public func set_SerializeHandler(value : @escaping (Optional<dotnet.System.Text.Json.Utf8JsonWriter>, T) throws -> Void) throws {
        let del_value = try dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,T>(value);
        return try set_SerializeHandler(value: del_value);
    }
    public var ConstructorParameterMetadataInitializer : Optional<dotnet.System.Func_1<dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonParameterInfoValues>>> {
        get {
            return try! get_ConstructorParameterMetadataInitializer();
        }
        set(v) {
            return try! set_ConstructorParameterMetadataInitializer(value: v!);
        }
    }
    public var NumberHandling : dotnet.System.Text.Json.Serialization.JsonNumberHandling {
        get {
            return try! get_NumberHandling();
        }
        set(v) {
            return try! set_NumberHandling(value: v);
        }
    }
    public var ObjectCreator : Optional<dotnet.System.Func_1<T>> {
        get {
            return try! get_ObjectCreator();
        }
        set(v) {
            return try! set_ObjectCreator(value: v!);
        }
    }
    public var ObjectWithParameterizedConstructorCreator : Optional<dotnet.System.Func_2<dotnet.System_Arr<dotnet.System.Object>,T>> {
        get {
            return try! get_ObjectWithParameterizedConstructorCreator();
        }
        set(v) {
            return try! set_ObjectWithParameterizedConstructorCreator(value: v!);
        }
    }
    public var PropertyMetadataInitializer : Optional<dotnet.System.Func_2<dotnet.System.Text.Json.Serialization.JsonSerializerContext,dotnet.System_Arr<dotnet.System.Text.Json.Serialization.Metadata.JsonPropertyInfo>>> {
        get {
            return try! get_PropertyMetadataInitializer();
        }
        set(v) {
            return try! set_PropertyMetadataInitializer(value: v!);
        }
    }
    public var SerializeHandler : Optional<dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,T>> {
        get {
            return try! get_SerializeHandler();
        }
        set(v) {
            return try! set_SerializeHandler(value: v!);
        }
    }
} // JsonObjectInfoValues_1


// type: System.Text.Json.Serialization.Metadata.JsonParameterInfoValues
public final class JsonParameterInfoValues
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.#ctor
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Object get_DefaultValue()
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.get_DefaultValue
    public func get_DefaultValue() throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_Object__get_DefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_DefaultValue(System.Object)
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.set_DefaultValue(System.Object)
    public func set_DefaultValue(value : Optional<dotnet.System.Object>) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_void__set_DefaultValue_0__1__Object(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_HasDefaultValue()
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.get_HasDefaultValue
    public func get_HasDefaultValue() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_bool__get_HasDefaultValue_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_HasDefaultValue(bool)
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.set_HasDefaultValue(System.Boolean)
    public func set_HasDefaultValue(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_void__set_HasDefaultValue_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.set_Name(System.String)
    public func set_Name(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_void__set_Name_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_ParameterType()
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.get_ParameterType
    public func get_ParameterType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_Type__get_ParameterType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] void set_ParameterType(System.Type)
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.set_ParameterType(System.Type)
    public func set_ParameterType(value : dotnet.System.Type_) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_void__set_ParameterType_0__1__Type(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_Position()
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.get_Position
    public func get_Position() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_i32__get_Position_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_Position(System.Int32)
// docid: M:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.set_Position(System.Int32)
    public func set_Position(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Text_Json_Serialization_Metadata_JsonParameterInfoValues_void__set_Position_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public var DefaultValue : Optional<dotnet.System.Object> {
        get {
            return try! get_DefaultValue();
        }
        set(v) {
            return try! set_DefaultValue(value: v!);
        }
    }
    public var HasDefaultValue : Bool {
        get {
            return try! get_HasDefaultValue();
        }
        set(v) {
            return try! set_HasDefaultValue(value: v);
        }
    }
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v);
        }
    }
    public var ParameterType : dotnet.System.Type_ {
        get {
            return try! get_ParameterType();
        }
        set(v) {
            return try! set_ParameterType(value: v);
        }
    }
    public var Position : Swift.Int32 {
        get {
            return try! get_Position();
        }
        set(v) {
            return try! set_Position(value: v);
        }
    }
} // JsonParameterInfoValues


// type: System.Text.Json.Serialization.Metadata.JsonPropertyInfo
open class JsonPropertyInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_Metadata_JsonPropertyInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // JsonPropertyInfo


// type: System.Text.Json.Serialization.Metadata.JsonTypeInfo
open class JsonTypeInfo
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_Metadata_JsonTypeInfo_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
} // JsonTypeInfo


// type: System.Text.Json.Serialization.Metadata.JsonTypeInfo`1
open class JsonTypeInfo_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Text_Json_Serialization_Metadata_JsonTypeInfo_1_get_type_handle(T.get_type_handle());
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // [IsSpecialName] System.Action<System.Text.Json.Utf8JsonWriter,T> get_Serialize()
// docid: M:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.get_Serialize
    open func get_Serialize() throws -> Optional<dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,T>> {
        var __thrown : NullableHandle = nil;
        let __return = System_Text_Json_Serialization_Metadata_JsonTypeInfo_1_System_Action_System_Text_Json_Utf8JsonWriter_T___get_Serialize_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Action_2(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    open var Serialize : Optional<dotnet.System.Action_2<dotnet.System.Text.Json.Utf8JsonWriter,T>> {
        get {
            return try! get_Serialize();
        }
    }
} // JsonTypeInfo_1


}





public protocol System_Text_Json_Serialization_IJsonOnDeserialized
    :
    SGBridgeGetHandle
{
}

public protocol System_Text_Json_Serialization_IJsonOnDeserializing
    :
    SGBridgeGetHandle
{
}

public protocol System_Text_Json_Serialization_IJsonOnSerialized
    :
    SGBridgeGetHandle
{
}

public protocol System_Text_Json_Serialization_IJsonOnSerializing
    :
    SGBridgeGetHandle
{
}

// EXTENSION METHOD System.Object Deserialize(System.Text.Json.JsonDocument, System.Type, System.Text.Json.JsonSerializerOptions)
extension dotnet.System.Text.Json.JsonDocument {
    public func Deserialize(returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Object> {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(document: self, returnType: returnType, options: options);
    }
}

// EXTENSION METHOD System.Object Deserialize(System.Text.Json.JsonDocument, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
extension dotnet.System.Text.Json.JsonDocument {
    public func Deserialize(returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Object> {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(document: self, returnType: returnType, context: context);
    }
}

// EXTENSION METHOD System.Object Deserialize(System.Text.Json.JsonElement, System.Type, System.Text.Json.JsonSerializerOptions)
extension dotnet.System.Text.Json.JsonElement {
    public func Deserialize(returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Object> {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(element: self, returnType: returnType, options: options);
    }
}

// EXTENSION METHOD System.Object Deserialize(System.Text.Json.JsonElement, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
extension dotnet.System.Text.Json.JsonElement {
    public func Deserialize(returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Object> {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(element: self, returnType: returnType, context: context);
    }
}

// EXTENSION METHOD System.Object Deserialize(System.Text.Json.Nodes.JsonNode, System.Type, System.Text.Json.JsonSerializerOptions)
extension dotnet.System.Text.Json.Nodes.JsonNode {
    public func Deserialize(returnType : dotnet.System.Type_, options : Optional<dotnet.System.Text.Json.JsonSerializerOptions> = nil) throws -> Optional<dotnet.System.Object> {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(node: self, returnType: returnType, options: options);
    }
}

// EXTENSION METHOD System.Object Deserialize(System.Text.Json.Nodes.JsonNode, System.Type, System.Text.Json.Serialization.JsonSerializerContext)
extension dotnet.System.Text.Json.Nodes.JsonNode {
    public func Deserialize(returnType : dotnet.System.Type_, context : dotnet.System.Text.Json.Serialization.JsonSerializerContext) throws -> Optional<dotnet.System.Object> {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(node: self, returnType: returnType, context: context);
    }
}

// EXTENSION METHOD TValue Deserialize<TValue>(System.Text.Json.JsonDocument, System.Text.Json.JsonSerializerOptions)
// TODO COPE extension method (unused generic param) TValue Deserialize<TValue>(System.Text.Json.JsonDocument, System.Text.Json.JsonSerializerOptions)

// EXTENSION METHOD TValue Deserialize<TValue>(System.Text.Json.JsonDocument, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
extension dotnet.System.Text.Json.JsonDocument {
    public func Deserialize<UTValue : SGBridgeGenericValue>(jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> UTValue {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(document: self, jsonTypeInfo: jsonTypeInfo);
    }
}

// EXTENSION METHOD TValue Deserialize<TValue>(System.Text.Json.JsonElement, System.Text.Json.JsonSerializerOptions)
// TODO COPE extension method (unused generic param) TValue Deserialize<TValue>(System.Text.Json.JsonElement, System.Text.Json.JsonSerializerOptions)

// EXTENSION METHOD TValue Deserialize<TValue>(System.Text.Json.JsonElement, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
extension dotnet.System.Text.Json.JsonElement {
    public func Deserialize<UTValue : SGBridgeGenericValue>(jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> UTValue {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(element: self, jsonTypeInfo: jsonTypeInfo);
    }
}

// EXTENSION METHOD TValue Deserialize<TValue>(System.Text.Json.Nodes.JsonNode, System.Text.Json.JsonSerializerOptions)
// TODO COPE extension method (unused generic param) TValue Deserialize<TValue>(System.Text.Json.Nodes.JsonNode, System.Text.Json.JsonSerializerOptions)

// EXTENSION METHOD TValue Deserialize<TValue>(System.Text.Json.Nodes.JsonNode, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TValue>)
extension dotnet.System.Text.Json.Nodes.JsonNode {
    public func Deserialize<UTValue : SGBridgeGenericValue>(jsonTypeInfo : dotnet.System.Text.Json.Serialization.Metadata.JsonTypeInfo_1<UTValue>) throws -> UTValue {
        return try dotnet.System.Text.Json.JsonSerializer.Deserialize(node: self, jsonTypeInfo: jsonTypeInfo);
    }
}

