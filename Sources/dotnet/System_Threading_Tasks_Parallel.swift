// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.Threading
// System.Threading.Tasks
extension System.Threading.Tasks {
// type: System.Threading.Tasks.Parallel
public struct Parallel {
    // System.Threading.Tasks.ParallelLoopResult For(System.Int32, System.Int32, System.Action<System.Int32,System.Threading.Tasks.ParallelLoopState>)
// docid: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
    /**
    Executes a  loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A  structure that contains information about which portion of the loop completed.

    */
    public static func For(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, body : dotnet.System.Action_2<Swift.Int32,dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_0__3__i32_i32_System_Action_i32_System_Threading_Tasks_ParallelLoopState_(&__thrown, fromInclusive, toExclusive, body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, body : @escaping (Swift.Int32, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_2<Swift.Int32,dotnet.System.Threading.Tasks.ParallelLoopState>(body);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult For(System.Int32, System.Int32, System.Action<System.Int32>)
// docid: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
    /**
    Executes a  loop in which iterations may run in parallel.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func For(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, body : dotnet.System.Action_1<Swift.Int32>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_0__3__i32_i32_System_Action_i32_(&__thrown, fromInclusive, toExclusive, body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, body : @escaping (Swift.Int32) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_1<Swift.Int32>(body);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32,System.Threading.Tasks.ParallelLoopState>)
// docid: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
    /**
    Executes a  loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func For(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_2<Swift.Int32,dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_0__4__i32_i32_ParallelOptions_System_Action_i32_System_Threading_Tasks_ParallelLoopState_(&__thrown, fromInclusive, toExclusive, parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (Swift.Int32, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_2<Swift.Int32,dotnet.System.Threading.Tasks.ParallelLoopState>(body);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32>)
// docid: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
    /**
    Executes a  loop in which iterations may run in parallel and loop options can be configured.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A  structure that contains information about which portion of the loop completed.

    */
    public static func For(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_1<Swift.Int32>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_0__4__i32_i32_ParallelOptions_System_Action_i32_(&__thrown, fromInclusive, toExclusive, parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (Swift.Int32) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_1<Swift.Int32>(body);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult For(System.Int64, System.Int64, System.Action<System.Int64,System.Threading.Tasks.ParallelLoopState>)
// docid: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
    /**
    Executes a  loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A  structure that contains information on what portion of the loop completed.

    */
    public static func For(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, body : dotnet.System.Action_2<Swift.Int64,dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_0__3__i64_i64_System_Action_i64_System_Threading_Tasks_ParallelLoopState_(&__thrown, fromInclusive, toExclusive, body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, body : @escaping (Swift.Int64, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_2<Swift.Int64,dotnet.System.Threading.Tasks.ParallelLoopState>(body);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult For(System.Int64, System.Int64, System.Action<System.Int64>)
// docid: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
    /**
    Executes a  loop with 64-bit indexes in which iterations may run in parallel.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func For(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, body : dotnet.System.Action_1<Swift.Int64>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_0__3__i64_i64_System_Action_i64_(&__thrown, fromInclusive, toExclusive, body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, body : @escaping (Swift.Int64) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_1<Swift.Int64>(body);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64,System.Threading.Tasks.ParallelLoopState>)
// docid: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
    /**
    Executes a  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func For(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_2<Swift.Int64,dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_0__4__i64_i64_ParallelOptions_System_Action_i64_System_Threading_Tasks_ParallelLoopState_(&__thrown, fromInclusive, toExclusive, parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (Swift.Int64, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_2<Swift.Int64,dotnet.System.Threading.Tasks.ParallelLoopState>(body);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64>)
// docid: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
    /**
    Executes a  loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func For(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_1<Swift.Int64>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_0__4__i64_i64_ParallelOptions_System_Action_i64_(&__thrown, fromInclusive, toExclusive, parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (Swift.Int64) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_1<Swift.Int64>(body);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
    /**
    Executes a  ( in Visual Basic) operation on a  in which iterations may run in parallel and the state of the loop can be monitored and manipulated.

    - Parameter source: The orderable partitioner that contains the original data source.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource>, body : dotnet.System.Action_3<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__2__System_Collections_Concurrent_OrderablePartitioner_UTSource__System_Action_UTSource_System_Threading_Tasks_ParallelLoopState_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource>, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, Swift.Int64) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_3<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64>(body);
        return try ForEach(source: source, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
    /**
    Executes a  ( in Visual Basic) operation on a  in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: The orderable partitioner that contains the original data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_3<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__3__System_Collections_Concurrent_OrderablePartitioner_UTSource__ParallelOptions_System_Action_UTSource_System_Threading_Tasks_ParallelLoopState_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, Swift.Int64) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_3<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64>(body);
        return try ForEach(source: source, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource,System.Threading.Tasks.ParallelLoopState>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
    /**
    Executes a  ( in Visual Basic) operation on a  in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.

    - Parameter source: The partitioner that contains the original data source.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, body : dotnet.System.Action_2<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__2__System_Collections_Concurrent_Partitioner_UTSource__System_Action_UTSource_System_Threading_Tasks_ParallelLoopState_(UTSource.get_type_handle(), &__thrown, source.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_2<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState>(body);
        return try ForEach(source: source, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
    /**
    Executes a  ( in Visual Basic) operation on a  in which iterations may run in parallel.

    - Parameter source: The partitioner that contains the original data source.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, body : dotnet.System.Action_1<UTSource>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__2__System_Collections_Concurrent_Partitioner_UTSource__System_Action_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, body : @escaping (UTSource) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_1<UTSource>(body);
        return try ForEach(source: source, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource,System.Threading.Tasks.ParallelLoopState>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
    /**
    Executes a  ( in Visual Basic) operation on a  in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: The partitioner that contains the original data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A  structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_2<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__3__System_Collections_Concurrent_Partitioner_UTSource__ParallelOptions_System_Action_UTSource_System_Threading_Tasks_ParallelLoopState_(UTSource.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_2<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState>(body);
        return try ForEach(source: source, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
    /**
    Executes a  ( in Visual Basic) operation on a  in which iterations may run in parallel and loop options can be configured.

    - Parameter source: The partitioner that contains the original data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_1<UTSource>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__3__System_Collections_Concurrent_Partitioner_UTSource__ParallelOptions_System_Action_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (UTSource) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_1<UTSource>(body);
        return try ForEach(source: source, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
    /**
    Executes a  ( in Visual Basic) operation with 64-bit indexes on an  in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.

    - Parameter source: An enumerable data source.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, body : dotnet.System.Action_3<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Action_UTSource_System_Threading_Tasks_ParallelLoopState_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, Swift.Int64) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_3<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64>(body);
        return try ForEach(source: source, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource,System.Threading.Tasks.ParallelLoopState>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
    /**
    Executes a  ( in Visual Basic) operation on an  in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.

    - Parameter source: An enumerable data source.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, body : dotnet.System.Action_2<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Action_UTSource_System_Threading_Tasks_ParallelLoopState_(UTSource.get_type_handle(), &__thrown, source.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_2<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState>(body);
        return try ForEach(source: source, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    /**
    Executes a  ( in Visual Basic) operation on an  in which iterations may run in parallel.

    - Parameter source: An enumerable data source.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, body : dotnet.System.Action_1<UTSource>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Action_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, body : @escaping (UTSource) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_1<UTSource>(body);
        return try ForEach(source: source, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
    /**
    Executes a  ( in Visual Basic) operation with 64-bit indexes on an  in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: An enumerable data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_3<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__3__System_Collections_Generic_IEnumerable_UTSource__ParallelOptions_System_Action_UTSource_System_Threading_Tasks_ParallelLoopState_i64_(UTSource.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, Swift.Int64) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_3<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64>(body);
        return try ForEach(source: source, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource,System.Threading.Tasks.ParallelLoopState>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
    /**
    Executes a  ( in Visual Basic) operation on an  in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: An enumerable data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_2<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__3__System_Collections_Generic_IEnumerable_UTSource__ParallelOptions_System_Action_UTSource_System_Threading_Tasks_ParallelLoopState_(UTSource.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_2<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState>(body);
        return try ForEach(source: source, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
    /**
    Executes a  ( in Visual Basic) operation on an  in which iterations may run in parallel and loop options can be configured.

    - Parameter source: An enumerable data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter body: The delegate that is invoked once per iteration.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Action_1<UTSource>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_1__3__System_Collections_Generic_IEnumerable_UTSource__ParallelOptions_System_Action_UTSource_(UTSource.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (UTSource) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_body = try dotnet.System.Action_1<UTSource>(body);
        return try ForEach(source: source, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Func<TLocal>, System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
    /**
    Executes a  ( in Visual Basic) operation with thread-local data on a  in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: The orderable partitioner that contains the original data source.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource>, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_5<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_2__4__System_Collections_Concurrent_OrderablePartitioner_UTSource__System_Func_UTLocal__System_Func_UTSource_System_Threading_Tasks_ParallelLoopState_i64_UTLocal_UTLocal__System_Action_UTLocal_(UTSource.get_type_handle(), UTLocal.get_type_handle(), &__thrown, source.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource>, localInit : @escaping () throws -> UTLocal, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, Swift.Int64, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_5<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try ForEach(source: source, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
    /**
    Executes a  ( in Visual Basic) operation with 64-bit indexes and  with thread-local data on a  in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: The orderable partitioner that contains the original data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_5<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_2__5__System_Collections_Concurrent_OrderablePartitioner_UTSource__ParallelOptions_System_Func_UTLocal__System_Func_UTSource_System_Threading_Tasks_ParallelLoopState_i64_UTLocal_UTLocal__System_Action_UTLocal_(UTSource.get_type_handle(), UTLocal.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.OrderablePartitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : @escaping () throws -> UTLocal, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, Swift.Int64, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_5<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try ForEach(source: source, parallelOptions: parallelOptions, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Func<TLocal>, System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
    /**
    Executes a  ( in Visual Basic) operation with thread-local data on a  in which iterations may run in parallel and the state of the loop can be monitored and manipulated.

    - Parameter source: The partitioner that contains the original data source.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_4<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_2__4__System_Collections_Concurrent_Partitioner_UTSource__System_Func_UTLocal__System_Func_UTSource_System_Threading_Tasks_ParallelLoopState_UTLocal_UTLocal__System_Action_UTLocal_(UTSource.get_type_handle(), UTLocal.get_type_handle(), &__thrown, source.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, localInit : @escaping () throws -> UTLocal, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_4<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try ForEach(source: source, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
    /**
    Executes a  ( in Visual Basic) operation  with thread-local data on a  in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: The partitioner that contains the original data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_4<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_2__5__System_Collections_Concurrent_Partitioner_UTSource__ParallelOptions_System_Func_UTLocal__System_Func_UTSource_System_Threading_Tasks_ParallelLoopState_UTLocal_UTLocal__System_Action_UTLocal_(UTSource.get_type_handle(), UTLocal.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Concurrent.Partitioner_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : @escaping () throws -> UTLocal, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_4<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try ForEach(source: source, parallelOptions: parallelOptions, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
    /**
    Executes a  ( in Visual Basic) operation with thread-local data on an  in which iterations may run in parallel and the state of the loop can be monitored and manipulated.

    - Parameter source: An enumerable data source.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_5<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_2__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTLocal__System_Func_UTSource_System_Threading_Tasks_ParallelLoopState_i64_UTLocal_UTLocal__System_Action_UTLocal_(UTSource.get_type_handle(), UTLocal.get_type_handle(), &__thrown, source.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, localInit : @escaping () throws -> UTLocal, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, Swift.Int64, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_5<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try ForEach(source: source, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
    /**
    Executes a  ( in Visual Basic) operation with thread-local data on an  in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.

    - Parameter source: An enumerable data source.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_4<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_2__4__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTLocal__System_Func_UTSource_System_Threading_Tasks_ParallelLoopState_UTLocal_UTLocal__System_Action_UTLocal_(UTSource.get_type_handle(), UTLocal.get_type_handle(), &__thrown, source.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, localInit : @escaping () throws -> UTLocal, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_4<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try ForEach(source: source, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
    /**
    Executes a  ( in Visual Basic) operation with thread-local data and 64-bit indexes on an  in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: An enumerable data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_5<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_2__5__System_Collections_Generic_IEnumerable_UTSource__ParallelOptions_System_Func_UTLocal__System_Func_UTSource_System_Threading_Tasks_ParallelLoopState_i64_UTLocal_UTLocal__System_Action_UTLocal_(UTSource.get_type_handle(), UTLocal.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : @escaping () throws -> UTLocal, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, Swift.Int64, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_5<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,Swift.Int64,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try ForEach(source: source, parallelOptions: parallelOptions, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
    /**
    Executes a  ( in Visual Basic) operation with thread-local data on an  in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter source: An enumerable data source.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_4<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__ForEach_2__5__System_Collections_Generic_IEnumerable_UTSource__ParallelOptions_System_Func_UTLocal__System_Func_UTSource_System_Threading_Tasks_ParallelLoopState_UTLocal_UTLocal__System_Action_UTLocal_(UTSource.get_type_handle(), UTLocal.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEach<UTSource : SGBridgeGenericValue,UTLocal : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : @escaping () throws -> UTLocal, body : @escaping (UTSource, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_4<UTSource,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try ForEach(source: source, parallelOptions: parallelOptions, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.Task ForEachAsync<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask>)
// docid: M:System.Threading.Tasks.Parallel.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, body : dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_Task__ForEachAsync_1__2__System_Collections_Generic_IEnumerable_UTSource__System_Func_UTSource_System_Threading_CancellationToken_System_Threading_Tasks_ValueTask_(UTSource.get_type_handle(), &__thrown, source.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, body : @escaping (UTSource, Optional<dotnet.System.Threading.CancellationToken>) throws -> dotnet.System.Threading.Tasks.ValueTask) throws -> dotnet.System.Threading.Tasks.Task {
        let del_body = try dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>(body);
        return try ForEachAsync(source: source, body: del_body);
    }
    // System.Threading.Tasks.Task ForEachAsync<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.CancellationToken, System.Func<TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask>)
// docid: M:System.Threading.Tasks.Parallel.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, cancellationToken : dotnet.System.Threading.CancellationToken, body : dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_Task__ForEachAsync_1__3__System_Collections_Generic_IEnumerable_UTSource__CancellationToken_System_Func_UTSource_System_Threading_CancellationToken_System_Threading_Tasks_ValueTask_(UTSource.get_type_handle(), &__thrown, source.get_handle(), cancellationToken.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, cancellationToken : dotnet.System.Threading.CancellationToken, body : @escaping (UTSource, Optional<dotnet.System.Threading.CancellationToken>) throws -> dotnet.System.Threading.Tasks.ValueTask) throws -> dotnet.System.Threading.Tasks.Task {
        let del_body = try dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>(body);
        return try ForEachAsync(source: source, cancellationToken: cancellationToken, body: del_body);
    }
    // System.Threading.Tasks.Task ForEachAsync<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask>)
// docid: M:System.Threading.Tasks.Parallel.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_Task__ForEachAsync_1__3__System_Collections_Generic_IEnumerable_UTSource__ParallelOptions_System_Func_UTSource_System_Threading_CancellationToken_System_Threading_Tasks_ValueTask_(UTSource.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (UTSource, Optional<dotnet.System.Threading.CancellationToken>) throws -> dotnet.System.Threading.Tasks.ValueTask) throws -> dotnet.System.Threading.Tasks.Task {
        let del_body = try dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>(body);
        return try ForEachAsync(source: source, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.Task ForEachAsync<TSource>(System.Collections.Generic.IAsyncEnumerable<TSource>, System.Func<TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask>)
// docid: M:System.Threading.Tasks.Parallel.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IAsyncEnumerable_1<UTSource>, body : dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_Task__ForEachAsync_1__2__System_Collections_Generic_IAsyncEnumerable_UTSource__System_Func_UTSource_System_Threading_CancellationToken_System_Threading_Tasks_ValueTask_(UTSource.get_type_handle(), &__thrown, source.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IAsyncEnumerable_1<UTSource>, body : @escaping (UTSource, Optional<dotnet.System.Threading.CancellationToken>) throws -> dotnet.System.Threading.Tasks.ValueTask) throws -> dotnet.System.Threading.Tasks.Task {
        let del_body = try dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>(body);
        return try ForEachAsync(source: source, body: del_body);
    }
    // System.Threading.Tasks.Task ForEachAsync<TSource>(System.Collections.Generic.IAsyncEnumerable<TSource>, System.Threading.CancellationToken, System.Func<TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask>)
// docid: M:System.Threading.Tasks.Parallel.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IAsyncEnumerable_1<UTSource>, cancellationToken : dotnet.System.Threading.CancellationToken, body : dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_Task__ForEachAsync_1__3__System_Collections_Generic_IAsyncEnumerable_UTSource__CancellationToken_System_Func_UTSource_System_Threading_CancellationToken_System_Threading_Tasks_ValueTask_(UTSource.get_type_handle(), &__thrown, source.get_handle(), cancellationToken.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IAsyncEnumerable_1<UTSource>, cancellationToken : dotnet.System.Threading.CancellationToken, body : @escaping (UTSource, Optional<dotnet.System.Threading.CancellationToken>) throws -> dotnet.System.Threading.Tasks.ValueTask) throws -> dotnet.System.Threading.Tasks.Task {
        let del_body = try dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>(body);
        return try ForEachAsync(source: source, cancellationToken: cancellationToken, body: del_body);
    }
    // System.Threading.Tasks.Task ForEachAsync<TSource>(System.Collections.Generic.IAsyncEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TSource,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask>)
// docid: M:System.Threading.Tasks.Parallel.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IAsyncEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>) throws -> dotnet.System.Threading.Tasks.Task {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_Task__ForEachAsync_1__3__System_Collections_Generic_IAsyncEnumerable_UTSource__ParallelOptions_System_Func_UTSource_System_Threading_CancellationToken_System_Threading_Tasks_ValueTask_(UTSource.get_type_handle(), &__thrown, source.get_handle(), parallelOptions.get_handle(), body.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.Task(hndl : __return);
        }
    }
    // delegate closure overload
    public static func ForEachAsync<UTSource : SGBridgeGenericValue>(source : dotnet.System.Collections.Generic.IAsyncEnumerable_1<UTSource>, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, body : @escaping (UTSource, Optional<dotnet.System.Threading.CancellationToken>) throws -> dotnet.System.Threading.Tasks.ValueTask) throws -> dotnet.System.Threading.Tasks.Task {
        let del_body = try dotnet.System.Func_3<UTSource,dotnet.System.Threading.CancellationToken,dotnet.System.Threading.Tasks.ValueTask>(body);
        return try ForEachAsync(source: source, parallelOptions: parallelOptions, body: del_body);
    }
    // System.Threading.Tasks.ParallelLoopResult For<TLocal>(System.Int32, System.Int32, System.Func<TLocal>, System.Func<System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
    /**
    Executes a  loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A  structure that contains information about which portion of the loop completed.

    */
    public static func For<UTLocal : SGBridgeGenericValue>(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_4<Swift.Int32,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_1__5__i32_i32_System_Func_UTLocal__System_Func_i32_System_Threading_Tasks_ParallelLoopState_UTLocal_UTLocal__System_Action_UTLocal_(UTLocal.get_type_handle(), &__thrown, fromInclusive, toExclusive, localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For<UTLocal : SGBridgeGenericValue>(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, localInit : @escaping () throws -> UTLocal, body : @escaping (Swift.Int32, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_4<Swift.Int32,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult For<TLocal>(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
    /**
    Executes a  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func For<UTLocal : SGBridgeGenericValue>(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_4<Swift.Int32,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_1__6__i32_i32_ParallelOptions_System_Func_UTLocal__System_Func_i32_System_Threading_Tasks_ParallelLoopState_UTLocal_UTLocal__System_Action_UTLocal_(UTLocal.get_type_handle(), &__thrown, fromInclusive, toExclusive, parallelOptions.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For<UTLocal : SGBridgeGenericValue>(fromInclusive : Swift.Int32, toExclusive : Swift.Int32, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : @escaping () throws -> UTLocal, body : @escaping (Swift.Int32, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_4<Swift.Int32,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, parallelOptions: parallelOptions, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult For<TLocal>(System.Int64, System.Int64, System.Func<TLocal>, System.Func<System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
    /**
    Executes a  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each task.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each task.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func For<UTLocal : SGBridgeGenericValue>(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_4<Swift.Int64,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_1__5__i64_i64_System_Func_UTLocal__System_Func_i64_System_Threading_Tasks_ParallelLoopState_UTLocal_UTLocal__System_Action_UTLocal_(UTLocal.get_type_handle(), &__thrown, fromInclusive, toExclusive, localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For<UTLocal : SGBridgeGenericValue>(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, localInit : @escaping () throws -> UTLocal, body : @escaping (Swift.Int64, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_4<Swift.Int64,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // System.Threading.Tasks.ParallelLoopResult For<TLocal>(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>, System.Action<TLocal>)
// docid: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
    /**
    Executes a  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.

    - Parameter fromInclusive: The start index, inclusive.
    - Parameter toExclusive: The end index, exclusive.
    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter localInit: The function delegate that returns the initial state of the local data for each thread.
    - Parameter body: The delegate that is invoked once per iteration.
    - Parameter localFinally: The delegate that performs a final action on the local state of each thread.
    - Returns: A structure that contains information about which portion of the loop completed.

    */
    public static func For<UTLocal : SGBridgeGenericValue>(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : dotnet.System.Func_1<UTLocal>, body : dotnet.System.Func_4<Swift.Int64,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>, localFinally : dotnet.System.Action_1<UTLocal>) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_Parallel_ParallelLoopResult__For_1__6__i64_i64_ParallelOptions_System_Func_UTLocal__System_Func_i64_System_Threading_Tasks_ParallelLoopState_UTLocal_UTLocal__System_Action_UTLocal_(UTLocal.get_type_handle(), &__thrown, fromInclusive, toExclusive, parallelOptions.get_handle(), localInit.get_handle(), body.get_handle(), localFinally.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.Tasks.ParallelLoopResult(hndl : __return);
        }
    }
    // delegate closure overload
    public static func For<UTLocal : SGBridgeGenericValue>(fromInclusive : Swift.Int64, toExclusive : Swift.Int64, parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, localInit : @escaping () throws -> UTLocal, body : @escaping (Swift.Int64, Optional<dotnet.System.Threading.Tasks.ParallelLoopState>, UTLocal) throws -> UTLocal, localFinally : @escaping (UTLocal) throws -> Void) throws -> dotnet.System.Threading.Tasks.ParallelLoopResult {
        let del_localInit = try dotnet.System.Func_1<UTLocal>(localInit);
        let del_body = try dotnet.System.Func_4<Swift.Int64,dotnet.System.Threading.Tasks.ParallelLoopState,UTLocal,UTLocal>(body);
        let del_localFinally = try dotnet.System.Action_1<UTLocal>(localFinally);
        return try For(fromInclusive: fromInclusive, toExclusive: toExclusive, parallelOptions: parallelOptions, localInit: del_localInit, body: del_body, localFinally: del_localFinally);
    }
    // void Invoke(System.Action[])
// docid: M:System.Threading.Tasks.Parallel.Invoke(System.Action[])
    /**
    Executes each of the provided actions, possibly in parallel.

    - Parameter actions: An array of  to execute.
    */
    public static func Invoke(actions : dotnet.System_Arr<dotnet.System.Action>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Parallel_void__Invoke_0__1__ActionArray(&__thrown, actions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Invoke(System.Threading.Tasks.ParallelOptions, System.Action[])
// docid: M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
    /**
    Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.

    - Parameter parallelOptions: An object that configures the behavior of this operation.
    - Parameter actions: An array of actions to execute.
    */
    public static func Invoke(parallelOptions : dotnet.System.Threading.Tasks.ParallelOptions, actions : dotnet.System_Arr<dotnet.System.Action>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_Parallel_void__Invoke_0__2__ParallelOptions_ActionArray(&__thrown, parallelOptions.get_handle(), actions.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Parallel


// type: System.Threading.Tasks.ParallelLoopResult
// boxed value type
    /**
    Provides completion status on the execution of a  loop.

    */
public final class ParallelLoopResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_ParallelLoopResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.

    */
    public var IsCompleted : Bool {
        get {
            return try! get_IsCompleted();
        }
    }
    /**
    Gets the index of the lowest iteration from which  was called.

    */
    public var LowestBreakIteration : Optional<Swift.Int64> {
        get {
            return try! get_LowestBreakIteration();
        }
    }
    public override init() {
        let h = System_Threading_Tasks_ParallelLoopResult_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] bool get_IsCompleted()
// docid: M:System.Threading.Tasks.ParallelLoopResult.get_IsCompleted
    public func get_IsCompleted() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelLoopResult_bool__get_IsCompleted_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_LowestBreakIteration()
// docid: M:System.Threading.Tasks.ParallelLoopResult.get_LowestBreakIteration
    public func get_LowestBreakIteration() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelLoopResult_System_Nullable_i64___get_LowestBreakIteration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
} // ParallelLoopResult


// type: System.Threading.Tasks.ParallelLoopState
    /**
    Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the  class to each loop; you can not create instances in your code.

    */
open class ParallelLoopState
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_ParallelLoopState_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Break()
// docid: M:System.Threading.Tasks.ParallelLoopState.Break
    /**
    Communicates that the  loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.

    */
    open func Break() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_ParallelLoopState_void__Break_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Stop()
// docid: M:System.Threading.Tasks.ParallelLoopState.Stop
    /**
    Communicates that the  loop should cease execution at the system's earliest convenience.

    */
    open func Stop() throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_ParallelLoopState_void__Stop_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_IsExceptional()
// docid: M:System.Threading.Tasks.ParallelLoopState.get_IsExceptional
    open func get_IsExceptional() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelLoopState_bool__get_IsExceptional_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] bool get_IsStopped()
// docid: M:System.Threading.Tasks.ParallelLoopState.get_IsStopped
    open func get_IsStopped() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelLoopState_bool__get_IsStopped_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Nullable<System.Int64> get_LowestBreakIteration()
// docid: M:System.Threading.Tasks.ParallelLoopState.get_LowestBreakIteration
    open func get_LowestBreakIteration() throws -> Optional<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelLoopState_System_Nullable_i64___get_LowestBreakIteration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return (__return != nil) ? System_Int64_unbox(__return!) : nil;
        }
    }
    // [IsSpecialName] bool get_ShouldExitCurrentIteration()
// docid: M:System.Threading.Tasks.ParallelLoopState.get_ShouldExitCurrentIteration
    open func get_ShouldExitCurrentIteration() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelLoopState_bool__get_ShouldExitCurrentIteration_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    /**
    Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.

    */
    open var IsExceptional : Bool {
        get {
            return try! get_IsExceptional();
        }
    }
    /**
    Gets whether any iteration of the loop has called the  method.

    */
    open var IsStopped : Bool {
        get {
            return try! get_IsStopped();
        }
    }
    /**
    Gets the lowest iteration of the loop from which  was called.

    */
    open var LowestBreakIteration : Optional<Swift.Int64> {
        get {
            return try! get_LowestBreakIteration();
        }
    }
    /**
    Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.

    */
    open var ShouldExitCurrentIteration : Bool {
        get {
            return try! get_ShouldExitCurrentIteration();
        }
    }
} // ParallelLoopState


// type: System.Threading.Tasks.ParallelOptions
    /**
    Stores options that configure the operation of methods on the  class.

    */
open class ParallelOptions
    :
    dotnet.System.Object
{
    open class override func get_type_handle() -> TypeHandle {
        return System_Threading_Tasks_ParallelOptions_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Threading.Tasks.ParallelOptions.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Threading_Tasks_ParallelOptions_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Threading.CancellationToken get_CancellationToken()
// docid: M:System.Threading.Tasks.ParallelOptions.get_CancellationToken
    open func get_CancellationToken() throws -> dotnet.System.Threading.CancellationToken {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelOptions_CancellationToken__get_CancellationToken_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Threading.CancellationToken(hndl : __return);
        }
    }
    // [IsSpecialName] void set_CancellationToken(System.Threading.CancellationToken)
// docid: M:System.Threading.Tasks.ParallelOptions.set_CancellationToken(System.Threading.CancellationToken)
    open func set_CancellationToken(value : dotnet.System.Threading.CancellationToken) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_ParallelOptions_void__set_CancellationToken_0__1__CancellationToken(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_MaxDegreeOfParallelism()
// docid: M:System.Threading.Tasks.ParallelOptions.get_MaxDegreeOfParallelism
    open func get_MaxDegreeOfParallelism() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelOptions_i32__get_MaxDegreeOfParallelism_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_MaxDegreeOfParallelism(System.Int32)
// docid: M:System.Threading.Tasks.ParallelOptions.set_MaxDegreeOfParallelism(System.Int32)
    open func set_MaxDegreeOfParallelism(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_ParallelOptions_void__set_MaxDegreeOfParallelism_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Threading.Tasks.TaskScheduler get_TaskScheduler()
// docid: M:System.Threading.Tasks.ParallelOptions.get_TaskScheduler
    open func get_TaskScheduler() throws -> Optional<dotnet.System.Threading.Tasks.TaskScheduler> {
        var __thrown : NullableHandle = nil;
        let __return = System_Threading_Tasks_ParallelOptions_TaskScheduler__get_TaskScheduler_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Threading.Tasks.TaskScheduler(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_TaskScheduler(System.Threading.Tasks.TaskScheduler)
// docid: M:System.Threading.Tasks.ParallelOptions.set_TaskScheduler(System.Threading.Tasks.TaskScheduler)
    open func set_TaskScheduler(value : Optional<dotnet.System.Threading.Tasks.TaskScheduler>) throws {
        var __thrown : NullableHandle = nil;
        System_Threading_Tasks_ParallelOptions_void__set_TaskScheduler_0__1__TaskScheduler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    /**
    Gets or sets the  associated with this  instance.

    */
    open var CancellationToken : dotnet.System.Threading.CancellationToken {
        get {
            return try! get_CancellationToken();
        }
        set(v) {
            return try! set_CancellationToken(value: v);
        }
    }
    /**
    Gets or sets the maximum number of concurrent tasks enabled by this  instance.

    */
    open var MaxDegreeOfParallelism : Swift.Int32 {
        get {
            return try! get_MaxDegreeOfParallelism();
        }
        set(v) {
            return try! set_MaxDegreeOfParallelism(value: v);
        }
    }
    /**
    Gets or sets the  associated with this  instance. Setting this property to null indicates that the current scheduler should be used.

    */
    open var TaskScheduler : Optional<dotnet.System.Threading.Tasks.TaskScheduler> {
        get {
            return try! get_TaskScheduler();
        }
        set(v) {
            return try! set_TaskScheduler(value: v!);
        }
    }
} // ParallelOptions


}



