// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// Microsoft
// Microsoft.Win32
extension Microsoft.Win32 {
// type: Microsoft.Win32.Registry
public struct Registry {
    // static field: Microsoft.Win32.RegistryKey ClassesRoot
    /**
    Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.

    */
    public static var ClassesRoot : dotnet.Microsoft.Win32.RegistryKey {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKey(hndl: Microsoft_Win32_Registry_get_ClassesRoot());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryKey CurrentConfig
    /**
    Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.

    */
    public static var CurrentConfig : dotnet.Microsoft.Win32.RegistryKey {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKey(hndl: Microsoft_Win32_Registry_get_CurrentConfig());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryKey CurrentUser
    /**
    Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER.

    */
    public static var CurrentUser : dotnet.Microsoft.Win32.RegistryKey {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKey(hndl: Microsoft_Win32_Registry_get_CurrentUser());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryKey LocalMachine
    /**
    Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.

    */
    public static var LocalMachine : dotnet.Microsoft.Win32.RegistryKey {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKey(hndl: Microsoft_Win32_Registry_get_LocalMachine());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryKey PerformanceData
    /**
    Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.

    */
    public static var PerformanceData : dotnet.Microsoft.Win32.RegistryKey {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKey(hndl: Microsoft_Win32_Registry_get_PerformanceData());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryKey Users
    /**
    Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.

    */
    public static var Users : dotnet.Microsoft.Win32.RegistryKey {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKey(hndl: Microsoft_Win32_Registry_get_Users());
            return __return;
        }
    }
    // System.Object GetValue(System.String, System.String, System.Object)
// docid: M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
    /**
    Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or  if the specified key does not exist.

    - Parameter keyName: The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".
    - Parameter valueName: The name of the name/value pair.
    - Parameter defaultValue: The value to return if  does not exist.
    - Returns: 
         if the subkey specified by  does not exist; otherwise, the value associated with , or  if  is not found.

    */
    public static func GetValue(keyName : dotnet.System.String, valueName : Optional<dotnet.System.String>, defaultValue : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_Registry_Object__GetValue_0__3__String_String_Object(&__thrown, keyName.get_handle(), valueName?.get_handle() ?? nil, defaultValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetValue(System.String, System.String, System.Object)
// docid: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
    /**
    Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.

    - Parameter keyName: The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".
    - Parameter valueName: The name of the name/value pair.
    - Parameter value: The value to be stored.
    */
    public static func SetValue(keyName : dotnet.System.String, valueName : Optional<dotnet.System.String>, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_Registry_void__SetValue_0__3__String_String_Object(&__thrown, keyName.get_handle(), valueName?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.String, System.String, System.Object, Microsoft.Win32.RegistryValueKind)
// docid: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
    /**
    Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.

    - Parameter keyName: The full registry path of the key, beginning with a valid registry root, such as "HKEY_CURRENT_USER".
    - Parameter valueName: The name of the name/value pair.
    - Parameter value: The value to be stored.
    - Parameter valueKind: The registry data type to use when storing the data.
    */
    public static func SetValue(keyName : dotnet.System.String, valueName : Optional<dotnet.System.String>, value : dotnet.System.Object, valueKind : dotnet.Microsoft.Win32.RegistryValueKind) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_Registry_void__SetValue_0__4__String_String_Object_RegistryValueKind(&__thrown, keyName.get_handle(), valueName?.get_handle() ?? nil, value.get_handle(), valueKind.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Registry


// type: Microsoft.Win32.RegistryHive
    /**
    Represents the possible values for a top-level node on a foreign machine.

    */
public struct RegistryHive : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_RegistryHive_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Win32.RegistryHive ClassesRoot
    /**
    Represents the HKEY_CLASSES_ROOT base key on another computer. This value can be passed to the  method, to open this node remotely.

    */
    public static var ClassesRoot : dotnet.Microsoft.Win32.RegistryHive {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryHive(val: Microsoft_Win32_RegistryHive_get_ClassesRoot());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryHive CurrentUser
    /**
    Represents the HKEY_CURRENT_USER base key on another computer. This value can be passed to the  method, to open this node remotely.

    */
    public static var CurrentUser : dotnet.Microsoft.Win32.RegistryHive {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryHive(val: Microsoft_Win32_RegistryHive_get_CurrentUser());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryHive LocalMachine
    /**
    Represents the HKEY_LOCAL_MACHINE base key on another computer. This value can be passed to the  method, to open this node remotely.

    */
    public static var LocalMachine : dotnet.Microsoft.Win32.RegistryHive {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryHive(val: Microsoft_Win32_RegistryHive_get_LocalMachine());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryHive Users
    /**
    Represents the HKEY_USERS base key on another computer. This value can be passed to the  method, to open this node remotely.

    */
    public static var Users : dotnet.Microsoft.Win32.RegistryHive {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryHive(val: Microsoft_Win32_RegistryHive_get_Users());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryHive PerformanceData
    /**
    Represents the HKEY_PERFORMANCE_DATA base key on another computer. This value can be passed to the  method, to open this node remotely.

    */
    public static var PerformanceData : dotnet.Microsoft.Win32.RegistryHive {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryHive(val: Microsoft_Win32_RegistryHive_get_PerformanceData());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryHive CurrentConfig
    /**
    Represents the HKEY_CURRENT_CONFIG base key on another computer. This value can be passed to the  method, to open this node remotely.

    */
    public static var CurrentConfig : dotnet.Microsoft.Win32.RegistryHive {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryHive(val: Microsoft_Win32_RegistryHive_get_CurrentConfig());
            return __return;
        }
    }
} // RegistryHive


// type: Microsoft.Win32.RegistryKey
    /**
    Represents a key-level node in the Windows registry. This class is a registry encapsulation.

    */
public final class RegistryKey
    :
    dotnet.System.MarshalByRefObject,
    System_IDisposable
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_RegistryKey_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Close()
// docid: M:Microsoft.Win32.RegistryKey.Close
    /**
    Closes the key and flushes it to disk if its contents have been modified.

    */
    public func Close() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__Close_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.Win32.RegistryKey CreateSubKey(System.String)
// docid: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    /**
    Creates a new subkey or opens an existing subkey for write access.

    - Parameter subkey: The name or path of the subkey to create or open. This string is not case-sensitive.
    - Returns: The newly created subkey, or  if the operation failed. If a zero-length string is specified for , the current  object is returned.

    */
    public func CreateSubKey(subkey : dotnet.System.String) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__CreateSubKey_0__1__String(&__thrown, self.get_handle(), subkey.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey CreateSubKey(System.String, Microsoft.Win32.RegistryKeyPermissionCheck)
// docid: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck)
    /**
    Creates a new subkey or opens an existing subkey for write access, using the specified permission check option.

    - Parameter subkey: The name or path of the subkey to create or open. This string is not case-sensitive.
    - Parameter permissionCheck: One of the enumeration values that specifies whether the key is opened for read or read/write access.
    - Returns: The newly created subkey, or  if the operation failed. If a zero-length string is specified for , the current  object is returned.

    */
    public func CreateSubKey(subkey : dotnet.System.String, permissionCheck : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__CreateSubKey_0__2__String_RegistryKeyPermissionCheck(&__thrown, self.get_handle(), subkey.get_handle(), permissionCheck.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey CreateSubKey(System.String, Microsoft.Win32.RegistryKeyPermissionCheck, Microsoft.Win32.RegistryOptions)
// docid: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)
    /**
    Creates a subkey or opens a subkey for write access, using the specified permission check and registry options.

    - Parameter subkey: The name or path of the subkey to create or open.
    - Parameter permissionCheck: One of the enumeration values that specifies whether the key is opened for read or read/write access.
    - Parameter registryOptions: The registry option to use; for example, that creates a volatile key.
    - Returns: The newly created subkey, or  if the operation failed.

    */
    public func CreateSubKey(subkey : dotnet.System.String, permissionCheck : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck, registryOptions : dotnet.Microsoft.Win32.RegistryOptions) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__CreateSubKey_0__3__String_RegistryKeyPermissionCheck_RegistryOptions(&__thrown, self.get_handle(), subkey.get_handle(), permissionCheck.get_value(), registryOptions.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey CreateSubKey(System.String, Microsoft.Win32.RegistryKeyPermissionCheck, Microsoft.Win32.RegistryOptions, System.Security.AccessControl.RegistrySecurity)
// docid: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions,System.Security.AccessControl.RegistrySecurity)
    /**
    Creates a subkey or opens a subkey for write access, using the specified permission check option, registry option, and registry security.

    - Parameter subkey: The name or path of the subkey to create or open.
    - Parameter permissionCheck: One of the enumeration values that specifies whether the key is opened for read or read/write access.
    - Parameter registryOptions: The registry option to use.
    - Parameter registrySecurity: The access control security for the new subkey.
    - Returns: The newly created subkey, or  if the operation failed.

    */
    public func CreateSubKey(subkey : dotnet.System.String, permissionCheck : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck, registryOptions : dotnet.Microsoft.Win32.RegistryOptions, registrySecurity : Optional<dotnet.System.Security.AccessControl.RegistrySecurity>) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__CreateSubKey_0__4__String_RegistryKeyPermissionCheck_RegistryOptions_RegistrySecurity(&__thrown, self.get_handle(), subkey.get_handle(), permissionCheck.get_value(), registryOptions.get_value(), registrySecurity?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey CreateSubKey(System.String, Microsoft.Win32.RegistryKeyPermissionCheck, System.Security.AccessControl.RegistrySecurity)
// docid: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistrySecurity)
    /**
    Creates a new subkey or opens an existing subkey for write access, using the specified permission check option and registry security.

    - Parameter subkey: The name or path of the subkey to create or open. This string is not case-sensitive.
    - Parameter permissionCheck: One of the enumeration values that specifies whether the key is opened for read or read/write access.
    - Parameter registrySecurity: The access control security for the new key.
    - Returns: The newly created subkey, or  if the operation failed. If a zero-length string is specified for , the current  object is returned.

    */
    public func CreateSubKey(subkey : dotnet.System.String, permissionCheck : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck, registrySecurity : Optional<dotnet.System.Security.AccessControl.RegistrySecurity>) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__CreateSubKey_0__3__String_RegistryKeyPermissionCheck_RegistrySecurity(&__thrown, self.get_handle(), subkey.get_handle(), permissionCheck.get_value(), registrySecurity?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey CreateSubKey(System.String, bool)
// docid: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)
    /**
    Creates a new subkey or opens an existing subkey with the specified access. Available starting with .NET Framework 4.6.

    - Parameter subkey: The name or path of the subkey to create or open. This string is not case-sensitive.
    - Parameter writable: 
         to indicate the new subkey is writable; otherwise, .
    - Returns: The newly created subkey, or  if the operation failed. If a zero-length string is specified for , the current  object is returned.

    */
    public func CreateSubKey(subkey : dotnet.System.String, writable : Bool) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__CreateSubKey_0__2__String_bool(&__thrown, self.get_handle(), subkey.get_handle(), Swift.Int32(writable ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey CreateSubKey(System.String, bool, Microsoft.Win32.RegistryOptions)
// docid: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
    /**
    Creates a new subkey or opens an existing subkey with the specified access. Available starting with .NET Framework 4.6.

    - Parameter subkey: The name or path of the subkey to create or open. This string is not case-sensitive.
    - Parameter writable: 
         to indicate the new subkey is writable; otherwise, .
    - Parameter options: The registry option to use.
    - Returns: The newly created subkey, or  if the operation failed. If a zero-length string is specified for , the current  object is returned.

    */
    public func CreateSubKey(subkey : dotnet.System.String, writable : Bool, options : dotnet.Microsoft.Win32.RegistryOptions) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__CreateSubKey_0__3__String_bool_RegistryOptions(&__thrown, self.get_handle(), subkey.get_handle(), Swift.Int32(writable ? 1 : 0), options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // void DeleteSubKey(System.String)
// docid: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    /**
    Deletes the specified subkey.

    - Parameter subkey: The name of the subkey to delete. This string is not case-sensitive.
    */
    public func DeleteSubKey(subkey : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__DeleteSubKey_0__1__String(&__thrown, self.get_handle(), subkey.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteSubKey(System.String, bool)
// docid: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)
    /**
    Deletes the specified subkey, and specifies whether an exception is raised if the subkey is not found.

    - Parameter subkey: The name of the subkey to delete. This string is not case-sensitive.
    - Parameter throwOnMissingSubKey: Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is  and the specified subkey does not exist, an exception is raised. If this argument is  and the specified subkey does not exist, no action is taken.
    */
    public func DeleteSubKey(subkey : dotnet.System.String, throwOnMissingSubKey : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__DeleteSubKey_0__2__String_bool(&__thrown, self.get_handle(), subkey.get_handle(), Swift.Int32(throwOnMissingSubKey ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteSubKeyTree(System.String)
// docid: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    /**
    Deletes a subkey and any child subkeys recursively.

    - Parameter subkey: The subkey to delete. This string is not case-sensitive.
    */
    public func DeleteSubKeyTree(subkey : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__DeleteSubKeyTree_0__1__String(&__thrown, self.get_handle(), subkey.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteSubKeyTree(System.String, bool)
// docid: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String,System.Boolean)
    /**
    Deletes the specified subkey and any child subkeys recursively, and specifies whether an exception is raised if the subkey is not found.

    - Parameter subkey: The name of the subkey to delete. This string is not case-sensitive.
    - Parameter throwOnMissingSubKey: Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is  and the specified subkey does not exist, an exception is raised. If this argument is  and the specified subkey does not exist, no action is taken.
    */
    public func DeleteSubKeyTree(subkey : dotnet.System.String, throwOnMissingSubKey : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__DeleteSubKeyTree_0__2__String_bool(&__thrown, self.get_handle(), subkey.get_handle(), Swift.Int32(throwOnMissingSubKey ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteValue(System.String)
// docid: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    /**
    Deletes the specified value from this key.

    - Parameter name: The name of the value to delete.
    */
    public func DeleteValue(name : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__DeleteValue_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void DeleteValue(System.String, bool)
// docid: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)
    /**
    Deletes the specified value from this key, and specifies whether an exception is raised if the value is not found.

    - Parameter name: The name of the value to delete.
    - Parameter throwOnMissingValue: Indicates whether an exception should be raised if the specified value cannot be found. If this argument is  and the specified value does not exist, an exception is raised. If this argument is  and the specified value does not exist, no action is taken.
    */
    public func DeleteValue(name : dotnet.System.String, throwOnMissingValue : Bool) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__DeleteValue_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(throwOnMissingValue ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Dispose()
// docid: M:Microsoft.Win32.RegistryKey.Dispose
    /**
    Releases all resources used by the current instance of the  class.

    */
    public func Dispose() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__Dispose_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Flush()
// docid: M:Microsoft.Win32.RegistryKey.Flush
    /**
    Writes all the attributes of the specified open registry key into the registry.

    */
    public func Flush() throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__Flush_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // Microsoft.Win32.RegistryKey FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
// docid: M:Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
    /**
    Creates a registry key from a specified handle.

    - Parameter handle: The handle to the registry key.
    - Returns: A registry key.

    */
    public class func FromHandle(handle : dotnet.Microsoft.Win32.SafeHandles.SafeRegistryHandle) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__FromHandle_0__1__SafeRegistryHandle(&__thrown, handle.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle, Microsoft.Win32.RegistryView)
// docid: M:Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
    /**
    Creates a registry key from a specified handle and registry view setting.

    - Parameter handle: The handle to the registry key.
    - Parameter view: The registry view to use.
    - Returns: A registry key.

    */
    public class func FromHandle(handle : dotnet.Microsoft.Win32.SafeHandles.SafeRegistryHandle, view : dotnet.Microsoft.Win32.RegistryView) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__FromHandle_0__2__SafeRegistryHandle_RegistryView(&__thrown, handle.get_handle(), view.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // System.Security.AccessControl.RegistrySecurity GetAccessControl()
// docid: M:Microsoft.Win32.RegistryKey.GetAccessControl
    /**
    Returns the access control security for the current registry key.

    - Returns: An object that describes the access control permissions on the registry key represented by the current .

    */
    public func GetAccessControl() throws -> dotnet.System.Security.AccessControl.RegistrySecurity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistrySecurity__GetAccessControl_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.RegistrySecurity(hndl : __return);
        }
    }
    // System.Security.AccessControl.RegistrySecurity GetAccessControl(System.Security.AccessControl.AccessControlSections)
// docid: M:Microsoft.Win32.RegistryKey.GetAccessControl(System.Security.AccessControl.AccessControlSections)
    /**
    Returns the specified sections of the access control security for the current registry key.

    - Parameter includeSections: A bitwise combination of enumeration values that specifies the type of security information to get.
    - Returns: An object that describes the access control permissions on the registry key represented by the current .

    */
    public func GetAccessControl(includeSections : dotnet.System.Security.AccessControl.AccessControlSections) throws -> dotnet.System.Security.AccessControl.RegistrySecurity {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistrySecurity__GetAccessControl_0__1__AccessControlSections(&__thrown, self.get_handle(), includeSections.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.RegistrySecurity(hndl : __return);
        }
    }
    // System.String[] GetSubKeyNames()
// docid: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
    /**
    Retrieves an array of strings that contains all the subkey names.

    - Returns: An array of strings that contains the names of the subkeys for the current key.

    */
    public func GetSubKeyNames() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_StringArray__GetSubKeyNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // System.Object GetValue(System.String)
// docid: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
    /**
    Retrieves the value associated with the specified name. Returns  if the name/value pair does not exist in the registry.

    - Parameter name: The name of the value to retrieve. This string is not case-sensitive.
    - Returns: The value associated with , or  if  is not found.

    */
    public func GetValue(name : Optional<dotnet.System.String>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_Object__GetValue_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetValue(System.String, System.Object)
// docid: M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)
    /**
    Retrieves the value associated with the specified name. If the name is not found, returns the default value that you provide.

    - Parameter name: The name of the value to retrieve. This string is not case-sensitive.
    - Parameter defaultValue: The value to return if  does not exist.
    - Returns: The value associated with , with any embedded environment variables left unexpanded, or  if  is not found.

    */
    public func GetValue(name : Optional<dotnet.System.String>, defaultValue : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_Object__GetValue_0__2__String_Object(&__thrown, self.get_handle(), name?.get_handle() ?? nil, defaultValue?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // System.Object GetValue(System.String, System.Object, Microsoft.Win32.RegistryValueOptions)
// docid: M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
    /**
    Retrieves the value associated with the specified name and retrieval options. If the name is not found, returns the default value that you provide.

    - Parameter name: The name of the value to retrieve. This string is not case-sensitive.
    - Parameter defaultValue: The value to return if  does not exist.
    - Parameter options: One of the enumeration values that specifies optional processing of the retrieved value.
    - Returns: The value associated with , processed according to the specified , or  if  is not found.

    */
    public func GetValue(name : Optional<dotnet.System.String>, defaultValue : Optional<dotnet.System.Object>, options : dotnet.Microsoft.Win32.RegistryValueOptions) throws -> Optional<dotnet.System.Object> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_Object__GetValue_0__3__String_Object_RegistryValueOptions(&__thrown, self.get_handle(), name?.get_handle() ?? nil, defaultValue?.get_handle() ?? nil, options.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.Object(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Win32.RegistryValueKind GetValueKind(System.String)
// docid: M:Microsoft.Win32.RegistryKey.GetValueKind(System.String)
    /**
    Retrieves the registry data type of the value associated with the specified name.

    - Parameter name: The name of the value whose registry data type is to be retrieved. This string is not case-sensitive.
    - Returns: The registry data type of the value associated with .

    */
    public func GetValueKind(name : Optional<dotnet.System.String>) throws -> dotnet.Microsoft.Win32.RegistryValueKind {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryValueKind__GetValueKind_0__1__String(&__thrown, self.get_handle(), name?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryValueKind(val: __return);
        }
    }
    // System.String[] GetValueNames()
// docid: M:Microsoft.Win32.RegistryKey.GetValueNames
    /**
    Retrieves an array of strings that contains all the value names associated with this key.

    - Returns: An array of strings that contains the value names for the current key.

    */
    public func GetValueNames() throws -> dotnet.System_Arr<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_StringArray__GetValueNames_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System_Arr<dotnet.System.String>(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey OpenBaseKey(Microsoft.Win32.RegistryHive, Microsoft.Win32.RegistryView)
// docid: M:Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
    /**
    Opens a new  that represents the requested key on the local machine with the specified view.

    - Parameter hKey: The HKEY to open.
    - Parameter view: The registry view to use.
    - Returns: The requested registry key.

    */
    public class func OpenBaseKey(hKey : dotnet.Microsoft.Win32.RegistryHive, view : dotnet.Microsoft.Win32.RegistryView) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__OpenBaseKey_0__2__RegistryHive_RegistryView(&__thrown, hKey.get_value(), view.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey OpenRemoteBaseKey(Microsoft.Win32.RegistryHive, System.String)
// docid: M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
    /**
    Opens a new  that represents the requested key on a remote machine.

    - Parameter hKey: The HKEY to open, from the  enumeration.
    - Parameter machineName: The remote machine.
    - Returns: The requested registry key.

    */
    public class func OpenRemoteBaseKey(hKey : dotnet.Microsoft.Win32.RegistryHive, machineName : dotnet.System.String) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__OpenRemoteBaseKey_0__2__RegistryHive_String(&__thrown, hKey.get_value(), machineName.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey OpenRemoteBaseKey(Microsoft.Win32.RegistryHive, System.String, Microsoft.Win32.RegistryView)
// docid: M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String,Microsoft.Win32.RegistryView)
    /**
    Opens a new registry key that represents the requested key on a remote machine with the specified view.

    - Parameter hKey: The HKEY to open from the  enumeration.
    - Parameter machineName: The remote machine.
    - Parameter view: The registry view to use.
    - Returns: The requested registry key.

    */
    public class func OpenRemoteBaseKey(hKey : dotnet.Microsoft.Win32.RegistryHive, machineName : dotnet.System.String, view : dotnet.Microsoft.Win32.RegistryView) throws -> dotnet.Microsoft.Win32.RegistryKey {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__OpenRemoteBaseKey_0__3__RegistryHive_String_RegistryView(&__thrown, hKey.get_value(), machineName.get_handle(), view.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryKey(hndl : __return);
        }
    }
    // Microsoft.Win32.RegistryKey OpenSubKey(System.String)
// docid: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
    /**
    Retrieves a subkey as read-only.

    - Parameter name: The name or path of the subkey to open as read-only.
    - Returns: The subkey requested, or  if the operation failed.

    */
    public func OpenSubKey(name : dotnet.System.String) throws -> Optional<dotnet.Microsoft.Win32.RegistryKey> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__OpenSubKey_0__1__String(&__thrown, self.get_handle(), name.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.Microsoft.Win32.RegistryKey(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Win32.RegistryKey OpenSubKey(System.String, Microsoft.Win32.RegistryKeyPermissionCheck)
// docid: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck)
    /**
    Retrieves the specified subkey for read or read/write access.

    - Parameter name: The name or path of the subkey to create or open.
    - Parameter permissionCheck: One of the enumeration values that specifies whether the key is opened for read or read/write access.
    - Returns: The subkey requested, or  if the operation failed.

    */
    public func OpenSubKey(name : dotnet.System.String, permissionCheck : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck) throws -> Optional<dotnet.Microsoft.Win32.RegistryKey> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__OpenSubKey_0__2__String_RegistryKeyPermissionCheck(&__thrown, self.get_handle(), name.get_handle(), permissionCheck.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.Microsoft.Win32.RegistryKey(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Win32.RegistryKey OpenSubKey(System.String, Microsoft.Win32.RegistryKeyPermissionCheck, System.Security.AccessControl.RegistryRights)
// docid: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistryRights)
    /**
    Retrieves the specified subkey for read or read/write access, requesting the specified access rights.

    - Parameter name: The name or path of the subkey to create or open.
    - Parameter permissionCheck: One of the enumeration values that specifies whether the key is opened for read or read/write access.
    - Parameter rights: A bitwise combination of enumeration values that specifies the desired security access.
    - Returns: The subkey requested, or  if the operation failed.

    */
    public func OpenSubKey(name : dotnet.System.String, permissionCheck : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck, rights : dotnet.System.Security.AccessControl.RegistryRights) throws -> Optional<dotnet.Microsoft.Win32.RegistryKey> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__OpenSubKey_0__3__String_RegistryKeyPermissionCheck_RegistryRights(&__thrown, self.get_handle(), name.get_handle(), permissionCheck.get_value(), rights.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.Microsoft.Win32.RegistryKey(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Win32.RegistryKey OpenSubKey(System.String, bool)
// docid: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
    /**
    Retrieves a specified subkey, and specifies whether write access is to be applied to the key.

    - Parameter name: Name or path of the subkey to open.
    - Parameter writable: Set to  if you need write access to the key.
    - Returns: The subkey requested, or  if the operation failed.

    */
    public func OpenSubKey(name : dotnet.System.String, writable : Bool) throws -> Optional<dotnet.Microsoft.Win32.RegistryKey> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__OpenSubKey_0__2__String_bool(&__thrown, self.get_handle(), name.get_handle(), Swift.Int32(writable ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.Microsoft.Win32.RegistryKey(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // Microsoft.Win32.RegistryKey OpenSubKey(System.String, System.Security.AccessControl.RegistryRights)
// docid: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
    /**
    Retrieves a subkey with the specified name and access rights. Available starting with .NET Framework 4.6.

    - Parameter name: The name or path of the subkey to create or open.
    - Parameter rights: The rights for the registry key.
    - Returns: The subkey requested, or  if the operation failed.

    */
    public func OpenSubKey(name : dotnet.System.String, rights : dotnet.System.Security.AccessControl.RegistryRights) throws -> Optional<dotnet.Microsoft.Win32.RegistryKey> {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryKey__OpenSubKey_0__2__String_RegistryRights(&__thrown, self.get_handle(), name.get_handle(), rights.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.Microsoft.Win32.RegistryKey(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void SetAccessControl(System.Security.AccessControl.RegistrySecurity)
// docid: M:Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)
    /**
    Applies Windows access control security to an existing registry key.

    - Parameter registrySecurity: The access control security to apply to the current subkey.
    */
    public func SetAccessControl(registrySecurity : dotnet.System.Security.AccessControl.RegistrySecurity) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__SetAccessControl_0__1__RegistrySecurity(&__thrown, self.get_handle(), registrySecurity.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.String, System.Object)
// docid: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
    /**
    Sets the specified name/value pair.

    - Parameter name: The name of the value to store.
    - Parameter value: The data to be stored.
    */
    public func SetValue(name : Optional<dotnet.System.String>, value : dotnet.System.Object) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__SetValue_0__2__String_Object(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetValue(System.String, System.Object, Microsoft.Win32.RegistryValueKind)
// docid: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
    /**
    Sets the value of a name/value pair in the registry key, using the specified registry data type.

    - Parameter name: The name of the value to be stored.
    - Parameter value: The data to be stored.
    - Parameter valueKind: The registry data type to use when storing the data.
    */
    public func SetValue(name : Optional<dotnet.System.String>, value : dotnet.System.Object, valueKind : dotnet.Microsoft.Win32.RegistryValueKind) throws {
        var __thrown : NullableHandle = nil;
        Microsoft_Win32_RegistryKey_void__SetValue_0__3__String_Object_RegistryValueKind(&__thrown, self.get_handle(), name?.get_handle() ?? nil, value.get_handle(), valueKind.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.String ToString()
// docid: M:Microsoft.Win32.RegistryKey.ToString
    /**
    Retrieves a string representation of this key.

    - Returns: A string representing the key. If the specified key is invalid (cannot be found) then  is returned.

    */
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] Microsoft.Win32.SafeHandles.SafeRegistryHandle get_Handle()
// docid: M:Microsoft.Win32.RegistryKey.get_Handle
    public func get_Handle() throws -> dotnet.Microsoft.Win32.SafeHandles.SafeRegistryHandle {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_SafeRegistryHandle__get_Handle_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.SafeHandles.SafeRegistryHandle(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:Microsoft.Win32.RegistryKey.get_Name
    public func get_Name() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Int32 get_SubKeyCount()
// docid: M:Microsoft.Win32.RegistryKey.get_SubKeyCount
    public func get_SubKeyCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_i32__get_SubKeyCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Int32 get_ValueCount()
// docid: M:Microsoft.Win32.RegistryKey.get_ValueCount
    public func get_ValueCount() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_i32__get_ValueCount_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] Microsoft.Win32.RegistryView get_View()
// docid: M:Microsoft.Win32.RegistryKey.get_View
    public func get_View() throws -> dotnet.Microsoft.Win32.RegistryView {
        var __thrown : NullableHandle = nil;
        let __return = Microsoft_Win32_RegistryKey_RegistryView__get_View_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.Microsoft.Win32.RegistryView(val: __return);
        }
    }
    /**
    Gets a  object that represents the registry key that the current  object encapsulates.

    */
    public var Handle : dotnet.Microsoft.Win32.SafeHandles.SafeRegistryHandle {
        get {
            return try! get_Handle();
        }
    }
    /**
    Retrieves the name of the key.

    */
    public var Name : dotnet.System.String {
        get {
            return try! get_Name();
        }
    }
    /**
    Retrieves the count of subkeys of the current key.

    */
    public var SubKeyCount : Swift.Int32 {
        get {
            return try! get_SubKeyCount();
        }
    }
    /**
    Retrieves the count of values in the key.

    */
    public var ValueCount : Swift.Int32 {
        get {
            return try! get_ValueCount();
        }
    }
    /**
    Gets the view that was used to create the registry key.

    */
    public var View : dotnet.Microsoft.Win32.RegistryView {
        get {
            return try! get_View();
        }
    }
} // RegistryKey


// type: Microsoft.Win32.RegistryKeyPermissionCheck
    /**
    Specifies whether security checks are performed when opening registry keys and accessing their name/value pairs.

    */
public struct RegistryKeyPermissionCheck : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_RegistryKeyPermissionCheck_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Win32.RegistryKeyPermissionCheck Default
    /**
    The registry key inherits the mode of its parent. Security checks are performed when trying to access subkeys or values, unless the parent was opened with  or  mode.

    */
    public static var Default : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKeyPermissionCheck(val: Microsoft_Win32_RegistryKeyPermissionCheck_get_Default());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryKeyPermissionCheck ReadSubTree
    /**
    Security checks are not performed when accessing subkeys or values. A security check is performed when trying to open the current key, unless the parent was opened with  or .

    */
    public static var ReadSubTree : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKeyPermissionCheck(val: Microsoft_Win32_RegistryKeyPermissionCheck_get_ReadSubTree());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryKeyPermissionCheck ReadWriteSubTree
    /**
    Security checks are not performed when accessing subkeys or values. A security check is performed when trying to open the current key, unless the parent was opened with .

    */
    public static var ReadWriteSubTree : dotnet.Microsoft.Win32.RegistryKeyPermissionCheck {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryKeyPermissionCheck(val: Microsoft_Win32_RegistryKeyPermissionCheck_get_ReadWriteSubTree());
            return __return;
        }
    }
} // RegistryKeyPermissionCheck


// type: Microsoft.Win32.RegistryOptions
    /**
    Specifies options to use when creating a registry key.

    */
public struct RegistryOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_RegistryOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Win32.RegistryOptions None
    /**
    A non-volatile key. This is the default.

    */
    public static var None : dotnet.Microsoft.Win32.RegistryOptions {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryOptions(val: Microsoft_Win32_RegistryOptions_get_None());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryOptions Volatile
    /**
    A volatile key. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded.

    */
    public static var Volatile : dotnet.Microsoft.Win32.RegistryOptions {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryOptions(val: Microsoft_Win32_RegistryOptions_get_Volatile());
            return __return;
        }
    }
} // RegistryOptions


// type: Microsoft.Win32.RegistryValueKind
    /**
    Specifies the data types to use when storing values in the registry, or identifies the data type of a value in the registry.

    */
public struct RegistryValueKind : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_RegistryValueKind_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Win32.RegistryValueKind None
    /**
    No data type.

    */
    public static var None : dotnet.Microsoft.Win32.RegistryValueKind {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueKind(val: Microsoft_Win32_RegistryValueKind_get_None());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryValueKind Unknown
    /**
    An unsupported registry data type. For example, the Microsoft Windows API registry data type REG_RESOURCE_LIST is unsupported. Use this value to specify that the  method should determine the appropriate registry data type when storing a name/value pair.

    */
    public static var Unknown : dotnet.Microsoft.Win32.RegistryValueKind {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueKind(val: Microsoft_Win32_RegistryValueKind_get_Unknown());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryValueKind String
    /**
    A null-terminated string. This value is equivalent to the Windows API registry data type REG_SZ.

    */
    public static var String : dotnet.Microsoft.Win32.RegistryValueKind {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueKind(val: Microsoft_Win32_RegistryValueKind_get_String());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryValueKind ExpandString
    /**
    A null-terminated string that contains unexpanded references to environment variables, such as %PATH%, that are expanded when the value is retrieved. This value is equivalent to the Windows API registry data type REG_EXPAND_SZ.

    */
    public static var ExpandString : dotnet.Microsoft.Win32.RegistryValueKind {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueKind(val: Microsoft_Win32_RegistryValueKind_get_ExpandString());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryValueKind Binary
    /**
    Binary data in any form. This value is equivalent to the Windows API registry data type REG_BINARY.

    */
    public static var Binary : dotnet.Microsoft.Win32.RegistryValueKind {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueKind(val: Microsoft_Win32_RegistryValueKind_get_Binary());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryValueKind DWord
    /**
    A 32-bit binary number. This value is equivalent to the Windows API registry data type REG_DWORD.

    */
    public static var DWord : dotnet.Microsoft.Win32.RegistryValueKind {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueKind(val: Microsoft_Win32_RegistryValueKind_get_DWord());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryValueKind MultiString
    /**
    An array of null-terminated strings, terminated by two null characters. This value is equivalent to the Windows API registry data type REG_MULTI_SZ.

    */
    public static var MultiString : dotnet.Microsoft.Win32.RegistryValueKind {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueKind(val: Microsoft_Win32_RegistryValueKind_get_MultiString());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryValueKind QWord
    /**
    A 64-bit binary number. This value is equivalent to the Windows API registry data type REG_QWORD.

    */
    public static var QWord : dotnet.Microsoft.Win32.RegistryValueKind {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueKind(val: Microsoft_Win32_RegistryValueKind_get_QWord());
            return __return;
        }
    }
} // RegistryValueKind


// type: Microsoft.Win32.RegistryValueOptions
    /**
    Specifies optional behavior when retrieving name/value pairs from a registry key.

    */
public struct RegistryValueOptions : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_RegistryValueOptions_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Win32.RegistryValueOptions None
    /**
    No optional behavior is specified.

    */
    public static var None : dotnet.Microsoft.Win32.RegistryValueOptions {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueOptions(val: Microsoft_Win32_RegistryValueOptions_get_None());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryValueOptions DoNotExpandEnvironmentNames
    /**
    A value of type  is retrieved without expanding its embedded environment variables.

    */
    public static var DoNotExpandEnvironmentNames : dotnet.Microsoft.Win32.RegistryValueOptions {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryValueOptions(val: Microsoft_Win32_RegistryValueOptions_get_DoNotExpandEnvironmentNames());
            return __return;
        }
    }
} // RegistryValueOptions


// type: Microsoft.Win32.RegistryView
    /**
    Specifies which registry view to target on a 64-bit operating system.

    */
public struct RegistryView : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_RegistryView_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: Microsoft.Win32.RegistryView Default
    /**
    The default view.

    */
    public static var Default : dotnet.Microsoft.Win32.RegistryView {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryView(val: Microsoft_Win32_RegistryView_get_Default());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryView Registry64
    /**
    The 64-bit view.

    */
    public static var Registry64 : dotnet.Microsoft.Win32.RegistryView {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryView(val: Microsoft_Win32_RegistryView_get_Registry64());
            return __return;
        }
    }
    // static field: Microsoft.Win32.RegistryView Registry32
    /**
    The 32-bit view.

    */
    public static var Registry32 : dotnet.Microsoft.Win32.RegistryView {
        get {
        let __return = dotnet.Microsoft.Win32.RegistryView(val: Microsoft_Win32_RegistryView_get_Registry32());
            return __return;
        }
    }
} // RegistryView


}
// Microsoft.Win32.SafeHandles
extension Microsoft.Win32.SafeHandles {
// type: Microsoft.Win32.SafeHandles.SafeRegistryHandle
    /**
    Represents a safe handle to the Windows registry.

    */
public final class SafeRegistryHandle
    :
    dotnet.Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
{
    public class override func get_type_handle() -> TypeHandle {
        return Microsoft_Win32_SafeHandles_SafeRegistryHandle_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Win32_SafeHandles_SafeRegistryHandle_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.IntPtr, bool)
// docid: M:Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)
    /**
    Initializes a new instance of the  class.

    - Parameter preexistingHandle: An object that represents the pre-existing handle to use.
    - Parameter ownsHandle: 
         to reliably release the handle during the finalization phase;  to prevent reliable release.
    */
    public init(preexistingHandle : dotnet.System.IntPtr, ownsHandle : Bool) throws {
        var __thrown : NullableHandle = nil;
        let h = Microsoft_Win32_SafeHandles_SafeRegistryHandle_ctor_0__2__IntPtr_bool(&__thrown, preexistingHandle.get_value(), Swift.Int32(ownsHandle ? 1 : 0));
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // SafeRegistryHandle


}



// System
// System.Security
// System.Security.AccessControl
extension System.Security.AccessControl {
// type: System.Security.AccessControl.RegistryAccessRule
    /**
    Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.

    */
public final class RegistryAccessRule
    :
    dotnet.System.Security.AccessControl.AccessRule
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_RegistryAccessRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.

    - Parameter identity: The user or group the rule applies to. Must be of type  or a type such as  that can be converted to type .
    - Parameter registryRights: A bitwise combination of  values indicating the rights allowed or denied.
    - Parameter type: One of the  values indicating whether the rights are allowed or denied.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, registryRights : dotnet.System.Security.AccessControl.RegistryRights, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RegistryAccessRule_ctor_0__3__IdentityReference_RegistryRights_AccessControlType(&__thrown, identity.get_handle(), registryRights.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.

    - Parameter identity: The user or group the rule applies to. Must be of type  or a type such as  that can be converted to type .
    - Parameter registryRights: A bitwise combination of  values specifying the rights allowed or denied.
    - Parameter inheritanceFlags: A bitwise combination of  flags specifying how access rights are inherited from other objects.
    - Parameter propagationFlags: A bitwise combination of  flags specifying how access rights are propagated to other objects.
    - Parameter type: One of the  values specifying whether the rights are allowed or denied.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, registryRights : dotnet.System.Security.AccessControl.RegistryRights, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RegistryAccessRule_ctor_0__5__IdentityReference_RegistryRights_InheritanceFlags_PropagationFlags_AccessControlType(&__thrown, identity.get_handle(), registryRights.get_value(), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.

    - Parameter identity: The name of the user or group the rule applies to.
    - Parameter registryRights: A bitwise combination of  values indicating the rights allowed or denied.
    - Parameter type: One of the  values indicating whether the rights are allowed or denied.
    */
    public init(identity : dotnet.System.String, registryRights : dotnet.System.Security.AccessControl.RegistryRights, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RegistryAccessRule_ctor_0__3__String_RegistryRights_AccessControlType(&__thrown, identity.get_handle(), registryRights.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Initializes a new instance of the  class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.

    - Parameter identity: The name of the user or group the rule applies to.
    - Parameter registryRights: A bitwise combination of  values indicating the rights allowed or denied.
    - Parameter inheritanceFlags: A bitwise combination of  flags specifying how access rights are inherited from other objects.
    - Parameter propagationFlags: A bitwise combination of  flags specifying how access rights are propagated to other objects.
    - Parameter type: One of the  values specifying whether the rights are allowed or denied.
    */
    public init(identity : dotnet.System.String, registryRights : dotnet.System.Security.AccessControl.RegistryRights, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RegistryAccessRule_ctor_0__5__String_RegistryRights_InheritanceFlags_PropagationFlags_AccessControlType(&__thrown, identity.get_handle(), registryRights.get_value(), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.RegistryRights get_RegistryRights()
// docid: M:System.Security.AccessControl.RegistryAccessRule.get_RegistryRights
    public func get_RegistryRights() throws -> dotnet.System.Security.AccessControl.RegistryRights {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistryAccessRule_RegistryRights__get_RegistryRights_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.RegistryRights(val: __return);
        }
    }
    /**
    Gets the rights allowed or denied by the access rule.

    */
    public var RegistryRights : dotnet.System.Security.AccessControl.RegistryRights {
        get {
            return try! get_RegistryRights();
        }
    }
} // RegistryAccessRule


// type: System.Security.AccessControl.RegistryAuditRule
    /**
    Represents a set of access rights to be audited for a user or group. This class cannot be inherited.

    */
public final class RegistryAuditRule
    :
    dotnet.System.Security.AccessControl.AuditRule
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_RegistryAuditRule_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Security.Principal.IdentityReference, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class, specifying the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.

    - Parameter identity: The user or group the rule applies to. Must be of type  or a type such as  that can be converted to type .
    - Parameter registryRights: A bitwise combination of  values specifying the kinds of access to audit.
    - Parameter inheritanceFlags: A bitwise combination of  values specifying whether the audit rule applies to subkeys of the current key.
    - Parameter propagationFlags: A bitwise combination of  values that affect the way an inherited audit rule is propagated to subkeys of the current key.
    - Parameter flags: A bitwise combination of  values specifying whether to audit success, failure, or both.
    */
    public init(identity : dotnet.System.Security.Principal.IdentityReference, registryRights : dotnet.System.Security.AccessControl.RegistryRights, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RegistryAuditRule_ctor_0__5__IdentityReference_RegistryRights_InheritanceFlags_PropagationFlags_AuditFlags(&__thrown, identity.get_handle(), registryRights.get_value(), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Initializes a new instance of the  class, specifying the name of the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.

    - Parameter identity: The name of the user or group the rule applies to.
    - Parameter registryRights: A bitwise combination of  values specifying the kinds of access to audit.
    - Parameter inheritanceFlags: A combination of  flags that specifies whether the audit rule applies to subkeys of the current key.
    - Parameter propagationFlags: A combination of  flags that affect the way an inherited audit rule is propagated to subkeys of the current key.
    - Parameter flags: A bitwise combination of  values specifying whether to audit success, failure, or both.
    */
    public init(identity : dotnet.System.String, registryRights : dotnet.System.Security.AccessControl.RegistryRights, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RegistryAuditRule_ctor_0__5__String_RegistryRights_InheritanceFlags_PropagationFlags_AuditFlags(&__thrown, identity.get_handle(), registryRights.get_value(), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.Security.AccessControl.RegistryRights get_RegistryRights()
// docid: M:System.Security.AccessControl.RegistryAuditRule.get_RegistryRights
    public func get_RegistryRights() throws -> dotnet.System.Security.AccessControl.RegistryRights {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistryAuditRule_RegistryRights__get_RegistryRights_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.RegistryRights(val: __return);
        }
    }
    /**
    Gets the access rights affected by the audit rule.

    */
    public var RegistryRights : dotnet.System.Security.AccessControl.RegistryRights {
        get {
            return try! get_RegistryRights();
        }
    }
} // RegistryAuditRule


// type: System.Security.AccessControl.RegistryRights
    /**
    Specifies the access control rights that can be applied to registry objects.

    */
public struct RegistryRights : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_RegistryRights_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.Security.AccessControl.RegistryRights QueryValues
    /**
    The right to query the name/value pairs in a registry key.

    */
    public static var QueryValues : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_QueryValues());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights SetValue
    /**
    The right to create, delete, or set name/value pairs in a registry key.

    */
    public static var SetValue : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_SetValue());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights CreateSubKey
    /**
    The right to create subkeys of a registry key.

    */
    public static var CreateSubKey : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_CreateSubKey());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights EnumerateSubKeys
    /**
    The right to list the subkeys of a registry key.

    */
    public static var EnumerateSubKeys : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_EnumerateSubKeys());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights Notify
    /**
    The right to request notification of changes on a registry key.

    */
    public static var Notify : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_Notify());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights CreateLink
    /**
    Reserved for system use.

    */
    public static var CreateLink : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_CreateLink());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights Delete
    /**
    The right to delete a registry key.

    */
    public static var Delete : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_Delete());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights ReadPermissions
    /**
    The right to open and copy the access rules and audit rules for a registry key.

    */
    public static var ReadPermissions : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_ReadPermissions());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights WriteKey
    /**
    The right to create, delete, and set the name/value pairs in a registry key, to create or delete subkeys, to request notification of changes, to enumerate its subkeys, and to read its access rules and audit rules.

    */
    public static var WriteKey : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_WriteKey());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights ExecuteKey
    /**
    Same as .

    */
    public static var ExecuteKey : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_ExecuteKey());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights ReadKey
    /**
    The right to query the name/value pairs in a registry key, to request notification of changes, to enumerate its subkeys, and to read its access rules and audit rules.

    */
    public static var ReadKey : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_ReadKey());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights ChangePermissions
    /**
    The right to change the access rules and audit rules associated with a registry key.

    */
    public static var ChangePermissions : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_ChangePermissions());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights TakeOwnership
    /**
    The right to change the owner of a registry key.

    */
    public static var TakeOwnership : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_TakeOwnership());
            return __return;
        }
    }
    // static field: System.Security.AccessControl.RegistryRights FullControl
    /**
    The right to exert full control over a registry key, and to modify its access rules and audit rules.

    */
    public static var FullControl : dotnet.System.Security.AccessControl.RegistryRights {
        get {
        let __return = dotnet.System.Security.AccessControl.RegistryRights(val: System_Security_AccessControl_RegistryRights_get_FullControl());
            return __return;
        }
    }
} // RegistryRights


// type: System.Security.AccessControl.RegistrySecurity
    /**
    Represents the Windows access control security for a registry key. This class cannot be inherited.

    */
public final class RegistrySecurity
    :
    dotnet.System.Security.AccessControl.NativeObjectSecurity
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Security_AccessControl_RegistrySecurity_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.Security.AccessControl.RegistrySecurity.#ctor
    /**
    Initializes a new instance of the  class with default values.

    */
    public init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_Security_AccessControl_RegistrySecurity_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
// docid: M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
    /**
    Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.

    - Parameter identityReference: An  that identifies the user or group the rule applies to.
    - Parameter accessMask: A bitwise combination of  values specifying the access rights to allow or deny, cast to an integer.
    - Parameter isInherited: A Boolean value specifying whether the rule is inherited.
    - Parameter inheritanceFlags: A bitwise combination of  values specifying how the rule is inherited by subkeys.
    - Parameter propagationFlags: A bitwise combination of  values that modify the way the rule is inherited by subkeys. Meaningless if the value of  is .
    - Parameter type: One of the  values specifying whether the rights are allowed or denied.
    - Returns: A  object representing the specified rights for the specified user.

    */
    public override func AccessRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, type : dotnet.System.Security.AccessControl.AccessControlType) throws -> dotnet.System.Security.AccessControl.AccessRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistrySecurity_AccessRule__AccessRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AccessControlType(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), type.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AccessRule(hndl : __return);
        }
    }
    // void AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
    /**
    Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.

    - Parameter rule: The access control rule to add.
    */
    public func AddAccessRule(rule : dotnet.System.Security.AccessControl.RegistryAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__AddAccessRule_0__1__RegistryAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
    /**
    Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.

    - Parameter rule: The audit rule to add. The user specified by this rule determines the search.
    */
    public func AddAuditRule(rule : dotnet.System.Security.AccessControl.RegistryAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__AddAuditRule_0__1__RegistryAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, bool, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
// docid: M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
    /**
    Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.

    - Parameter identityReference: An  that identifies the user or group the rule applies to.
    - Parameter accessMask: A bitwise combination of  values specifying the access rights to audit, cast to an integer.
    - Parameter isInherited: A Boolean value specifying whether the rule is inherited.
    - Parameter inheritanceFlags: A bitwise combination of  values specifying how the rule is inherited by subkeys.
    - Parameter propagationFlags: A bitwise combination of  values that modify the way the rule is inherited by subkeys. Meaningless if the value of  is .
    - Parameter flags: A bitwise combination of  values specifying whether to audit successful access, failed access, or both.
    - Returns: A  object representing the specified audit rule for the specified user, with the specified flags. The return type of the method is the base class, , but the return value can be cast safely to the derived class.

    */
    public override func AuditRuleFactory(identityReference : dotnet.System.Security.Principal.IdentityReference, accessMask : Swift.Int32, isInherited : Bool, inheritanceFlags : dotnet.System.Security.AccessControl.InheritanceFlags, propagationFlags : dotnet.System.Security.AccessControl.PropagationFlags, flags : dotnet.System.Security.AccessControl.AuditFlags) throws -> dotnet.System.Security.AccessControl.AuditRule {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistrySecurity_AuditRule__AuditRuleFactory_0__6__IdentityReference_i32_bool_InheritanceFlags_PropagationFlags_AuditFlags(&__thrown, self.get_handle(), identityReference.get_handle(), accessMask, Swift.Int32(isInherited ? 1 : 0), inheritanceFlags.get_value(), propagationFlags.get_value(), flags.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Security.AccessControl.AuditRule(hndl : __return);
        }
    }
    // bool RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
    /**
    Searches for an access control rule with the same user and  (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.

    - Parameter rule: A  that specifies the user and  to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.
    - Returns: 
         if a compatible rule is found; otherwise .

    */
    public func RemoveAccessRule(rule : dotnet.System.Security.AccessControl.RegistryAccessRule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistrySecurity_bool__RemoveAccessRule_0__1__RegistryAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
    /**
    Searches for all access control rules with the same user and  (allow or deny) as the specified rule and, if found, removes them.

    - Parameter rule: A  that specifies the user and  to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.
    */
    public func RemoveAccessRuleAll(rule : dotnet.System.Security.AccessControl.RegistryAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__RemoveAccessRuleAll_0__1__RegistryAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
    /**
    Searches for an access control rule that exactly matches the specified rule and, if found, removes it.

    - Parameter rule: The  to remove.
    */
    public func RemoveAccessRuleSpecific(rule : dotnet.System.Security.AccessControl.RegistryAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__RemoveAccessRuleSpecific_0__1__RegistryAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
    /**
    Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.

    - Parameter rule: A  that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.
    - Returns: 
         if a compatible rule is found; otherwise, .

    */
    public func RemoveAuditRule(rule : dotnet.System.Security.AccessControl.RegistryAuditRule) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistrySecurity_bool__RemoveAuditRule_0__1__RegistryAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // void RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
    /**
    Searches for all audit rules with the same user as the specified rule and, if found, removes them.

    - Parameter rule: A  that specifies the user to search for. Any rights, inheritance flags, or propagation flags specified by this rule are ignored.
    */
    public func RemoveAuditRuleAll(rule : dotnet.System.Security.AccessControl.RegistryAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__RemoveAuditRuleAll_0__1__RegistryAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
    /**
    Searches for an audit rule that exactly matches the specified rule and, if found, removes it.

    - Parameter rule: The  to be removed.
    */
    public func RemoveAuditRuleSpecific(rule : dotnet.System.Security.AccessControl.RegistryAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__RemoveAuditRuleSpecific_0__1__RegistryAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
    /**
    Removes all access control rules with the same user as the specified rule, regardless of , and then adds the specified rule.

    - Parameter rule: The  to add. The user specified by this rule determines the rules to remove before this rule is added.
    */
    public func ResetAccessRule(rule : dotnet.System.Security.AccessControl.RegistryAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__ResetAccessRule_0__1__RegistryAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
    /**
    Removes all access control rules with the same user and  (allow or deny) as the specified rule, and then adds the specified rule.

    - Parameter rule: The  to add. The user and  of this rule determine the rules to remove before this rule is added.
    */
    public func SetAccessRule(rule : dotnet.System.Security.AccessControl.RegistryAccessRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__SetAccessRule_0__1__RegistryAccessRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
// docid: M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
    /**
    Removes all audit rules with the same user as the specified rule, regardless of the  value, and then adds the specified rule.

    - Parameter rule: The  to add. The user specified by this rule determines the rules to remove before this rule is added.
    */
    public func SetAuditRule(rule : dotnet.System.Security.AccessControl.RegistryAuditRule) throws {
        var __thrown : NullableHandle = nil;
        System_Security_AccessControl_RegistrySecurity_void__SetAuditRule_0__1__RegistryAuditRule(&__thrown, self.get_handle(), rule.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Type get_AccessRightType()
// docid: M:System.Security.AccessControl.RegistrySecurity.get_AccessRightType
    public override func get_AccessRightType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistrySecurity_Type__get_AccessRightType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AccessRuleType()
// docid: M:System.Security.AccessControl.RegistrySecurity.get_AccessRuleType
    public override func get_AccessRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistrySecurity_Type__get_AccessRuleType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    // [IsSpecialName] System.Type get_AuditRuleType()
// docid: M:System.Security.AccessControl.RegistrySecurity.get_AuditRuleType
    public override func get_AuditRuleType() throws -> dotnet.System.Type_ {
        var __thrown : NullableHandle = nil;
        let __return = System_Security_AccessControl_RegistrySecurity_Type__get_AuditRuleType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Type_(hndl : __return);
        }
    }
    /**
    Gets the enumeration type that the  class uses to represent access rights.

    */
    public override var AccessRightType : dotnet.System.Type_ {
        get {
            return try! get_AccessRightType();
        }
    }
    /**
    Gets the type that the  class uses to represent access rules.

    */
    public override var AccessRuleType : dotnet.System.Type_ {
        get {
            return try! get_AccessRuleType();
        }
    }
    /**
    Gets the type that the  class uses to represent audit rules.

    */
    public override var AuditRuleType : dotnet.System.Type_ {
        get {
            return try! get_AuditRuleType();
        }
    }
} // RegistrySecurity


}



