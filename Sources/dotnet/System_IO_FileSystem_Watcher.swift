// this file is automatically generated
// Copyright 2021 SourceGear

import jumptable_dotnet;

// System
// System.IO
extension System.IO {
// type: System.IO.ErrorEventArgs
    /**
    Provides data for the  event.

    */
open class ErrorEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_IO_ErrorEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Exception)
// docid: M:System.IO.ErrorEventArgs.#ctor(System.Exception)
    /**
    Initializes a new instance of the  class.

    - Parameter exception: An  that represents the error that occurred.
    */
    public init(exception : dotnet.System.Exception) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_ErrorEventArgs_ctor_0__1__Exception(&__thrown, exception.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // System.Exception GetException()
// docid: M:System.IO.ErrorEventArgs.GetException
    /**
    Gets the  that represents the error that occurred.

    - Returns: An  that represents the error that occurred.

    */
    open func GetException() throws -> dotnet.System.Exception {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_ErrorEventArgs_Exception__GetException_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Exception(hndl : __return);
        }
    }
} // ErrorEventArgs


// type: System.IO.ErrorEventHandler
    /**
    Represents the method that will handle the  event of a  object.

    */
public final class ErrorEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_IO_ErrorEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.IO.ErrorEventArgs)
// docid: M:System.IO.ErrorEventHandler.Invoke(System.Object,System.IO.ErrorEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.IO.ErrorEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_IO_ErrorEventHandler_void__Invoke_0__2__Object_ErrorEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.IO.ErrorEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.IO.ErrorEventHandler.BeginInvoke(System.Object,System.IO.ErrorEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.IO.ErrorEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_ErrorEventHandler_IAsyncResult__BeginInvoke_0__4__Object_ErrorEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.IO.ErrorEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_ErrorEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.IO.ErrorEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.IO.ErrorEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_IO_ErrorEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.IO.ErrorEventArgs)
// docid: M:System.IO.ErrorEventHandler.Invoke(System.Object,System.IO.ErrorEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.IO.ErrorEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_IO_ErrorEventHandler_void__Invoke_0__2__Object_ErrorEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // ErrorEventHandler


// type: System.IO.FileSystemEventArgs
    /**
    Provides data for the directory events: , , .

    */
open class FileSystemEventArgs
    :
    dotnet.System.EventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_IO_FileSystemEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.WatcherChangeTypes, System.String, System.String)
// docid: M:System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter changeType: One of the  values, which represents the kind of change detected in the file system.
    - Parameter directory: The root directory of the affected file or directory.
    - Parameter name: The name of the affected file or directory.
    */
    public init(changeType : dotnet.System.IO.WatcherChangeTypes, directory : dotnet.System.String, name : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_FileSystemEventArgs_ctor_0__3__WatcherChangeTypes_String_String(&__thrown, changeType.get_value(), directory.get_handle(), name?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.IO.WatcherChangeTypes get_ChangeType()
// docid: M:System.IO.FileSystemEventArgs.get_ChangeType
    open func get_ChangeType() throws -> dotnet.System.IO.WatcherChangeTypes {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemEventArgs_WatcherChangeTypes__get_ChangeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.WatcherChangeTypes(val: __return);
        }
    }
    // [IsSpecialName] System.String get_FullPath()
// docid: M:System.IO.FileSystemEventArgs.get_FullPath
    open func get_FullPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemEventArgs_String__get_FullPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.IO.FileSystemEventArgs.get_Name
    open func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemEventArgs_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the type of directory event that occurred.

    */
    open var ChangeType : dotnet.System.IO.WatcherChangeTypes {
        get {
            return try! get_ChangeType();
        }
    }
    /**
    Gets the fully qualified path of the affected file or directory.

    */
    open var FullPath : dotnet.System.String {
        get {
            return try! get_FullPath();
        }
    }
    /**
    Gets the name of the affected file or directory.

    */
    open var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
    }
} // FileSystemEventArgs


// type: System.IO.FileSystemEventHandler
    /**
    Represents the method that will handle the , , or  event of a  class.

    */
public final class FileSystemEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_IO_FileSystemEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.IO.FileSystemEventArgs)
// docid: M:System.IO.FileSystemEventHandler.Invoke(System.Object,System.IO.FileSystemEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.IO.FileSystemEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemEventHandler_void__Invoke_0__2__Object_FileSystemEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.IO.FileSystemEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.IO.FileSystemEventHandler.BeginInvoke(System.Object,System.IO.FileSystemEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.IO.FileSystemEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemEventHandler_IAsyncResult__BeginInvoke_0__4__Object_FileSystemEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.IO.FileSystemEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.IO.FileSystemEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.IO.FileSystemEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_IO_FileSystemEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.IO.FileSystemEventArgs)
// docid: M:System.IO.FileSystemEventHandler.Invoke(System.Object,System.IO.FileSystemEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.IO.FileSystemEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemEventHandler_void__Invoke_0__2__Object_FileSystemEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // FileSystemEventHandler


// type: System.IO.FileSystemWatcher
    /**
    Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.

    */
open class FileSystemWatcher
    :
    dotnet.System.ComponentModel.Component,
    System_ComponentModel_ISupportInitialize
{
    open class override func get_type_handle() -> TypeHandle {
        return System_IO_FileSystemWatcher_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.IO.FileSystemWatcher.#ctor
    /**
    Initializes a new instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_FileSystemWatcher_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.IO.FileSystemWatcher.#ctor(System.String)
    /**
    Initializes a new instance of the  class, given the specified directory to monitor.

    - Parameter path: The directory to monitor, in standard or Universal Naming Convention (UNC) notation.
    */
    public init(path : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_FileSystemWatcher_ctor_0__1__String(&__thrown, path.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.String)
// docid: M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)
    /**
    Initializes a new instance of the  class, given the specified directory and type of files to monitor.

    - Parameter path: The directory to monitor, in standard or Universal Naming Convention (UNC) notation.
    - Parameter filter: The type of files to watch. For example, "(ASTERISK).txt" watches for changes to all text files.
    */
    public init(path : dotnet.System.String, filter : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_FileSystemWatcher_ctor_0__2__String_String(&__thrown, path.get_handle(), filter.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void BeginInit()
// docid: M:System.IO.FileSystemWatcher.BeginInit
    /**
    Begins the initialization of a  used on a form or used by another component. The initialization occurs at run time.

    */
    open /* method final */ func BeginInit() throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__BeginInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void EndInit()
// docid: M:System.IO.FileSystemWatcher.EndInit
    /**
    Ends the initialization of a  used on a form or used by another component. The initialization occurs at run time.

    */
    open /* method final */ func EndInit() throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__EndInit_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IO.WaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes)
// docid: M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
    /**
    A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.

    - Parameter changeType: The  to watch for.
    - Returns: A  that contains specific information on the change that occurred.

    */
    open func WaitForChanged(changeType : dotnet.System.IO.WatcherChangeTypes) throws -> dotnet.System.IO.WaitForChangedResult {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_WaitForChangedResult__WaitForChanged_0__1__WatcherChangeTypes(&__thrown, self.get_handle(), changeType.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.WaitForChangedResult(hndl : __return);
        }
    }
    // System.IO.WaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes, System.Int32)
// docid: M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
    /**
    A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.

    - Parameter changeType: The  to watch for.
    - Parameter timeout: The time (in milliseconds) to wait before timing out.
    - Returns: A  that contains specific information on the change that occurred.

    */
    open func WaitForChanged(changeType : dotnet.System.IO.WatcherChangeTypes, timeout : Swift.Int32) throws -> dotnet.System.IO.WaitForChangedResult {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_WaitForChangedResult__WaitForChanged_0__2__WatcherChangeTypes_i32(&__thrown, self.get_handle(), changeType.get_value(), timeout);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.WaitForChangedResult(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_EnableRaisingEvents()
// docid: M:System.IO.FileSystemWatcher.get_EnableRaisingEvents
    open func get_EnableRaisingEvents() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_bool__get_EnableRaisingEvents_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_EnableRaisingEvents(bool)
// docid: M:System.IO.FileSystemWatcher.set_EnableRaisingEvents(System.Boolean)
    open func set_EnableRaisingEvents(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__set_EnableRaisingEvents_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Filter()
// docid: M:System.IO.FileSystemWatcher.get_Filter
    open func get_Filter() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_String__get_Filter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Filter(System.String)
// docid: M:System.IO.FileSystemWatcher.set_Filter(System.String)
    open func set_Filter(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__set_Filter_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Collections.ObjectModel.Collection<System.String> get_Filters()
// docid: M:System.IO.FileSystemWatcher.get_Filters
    open func get_Filters() throws -> dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_System_Collections_ObjectModel_Collection_string___get_Filters_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Collections.ObjectModel.Collection_1(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IncludeSubdirectories()
// docid: M:System.IO.FileSystemWatcher.get_IncludeSubdirectories
    open func get_IncludeSubdirectories() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_bool__get_IncludeSubdirectories_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_IncludeSubdirectories(bool)
// docid: M:System.IO.FileSystemWatcher.set_IncludeSubdirectories(System.Boolean)
    open func set_IncludeSubdirectories(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__set_IncludeSubdirectories_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.Int32 get_InternalBufferSize()
// docid: M:System.IO.FileSystemWatcher.get_InternalBufferSize
    open func get_InternalBufferSize() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_i32__get_InternalBufferSize_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] void set_InternalBufferSize(System.Int32)
// docid: M:System.IO.FileSystemWatcher.set_InternalBufferSize(System.Int32)
    open func set_InternalBufferSize(value : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__set_InternalBufferSize_0__1__i32(&__thrown, self.get_handle(), value);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.IO.NotifyFilters get_NotifyFilter()
// docid: M:System.IO.FileSystemWatcher.get_NotifyFilter
    open func get_NotifyFilter() throws -> dotnet.System.IO.NotifyFilters {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_NotifyFilters__get_NotifyFilter_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.NotifyFilters(val: __return);
        }
    }
    // [IsSpecialName] void set_NotifyFilter(System.IO.NotifyFilters)
// docid: M:System.IO.FileSystemWatcher.set_NotifyFilter(System.IO.NotifyFilters)
    open func set_NotifyFilter(value : dotnet.System.IO.NotifyFilters) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__set_NotifyFilter_0__1__NotifyFilters(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Path()
// docid: M:System.IO.FileSystemWatcher.get_Path
    open func get_Path() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_String__get_Path_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Path(System.String)
// docid: M:System.IO.FileSystemWatcher.set_Path(System.String)
    open func set_Path(value : dotnet.System.String) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__set_Path_0__1__String(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ISite get_Site()
// docid: M:System.IO.FileSystemWatcher.get_Site
    open override func get_Site() throws -> Optional<dotnet.System.ComponentModel.ISite> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_ISite__get_Site_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISite(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Site(System.ComponentModel.ISite)
// docid: M:System.IO.FileSystemWatcher.set_Site(System.ComponentModel.ISite)
    open override func set_Site(value : Optional<dotnet.System.ComponentModel.ISite>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__set_Site_0__1__ISite(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject()
// docid: M:System.IO.FileSystemWatcher.get_SynchronizingObject
    open func get_SynchronizingObject() throws -> Optional<dotnet.System.ComponentModel.ISynchronizeInvoke> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_FileSystemWatcher_ISynchronizeInvoke__get_SynchronizingObject_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.ComponentModel.ISynchronizeInvoke(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)
// docid: M:System.IO.FileSystemWatcher.set_SynchronizingObject(System.ComponentModel.ISynchronizeInvoke)
    open func set_SynchronizingObject(value : Optional<dotnet.System.ComponentModel.ISynchronizeInvoke>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__set_SynchronizingObject_0__1__ISynchronizeInvoke(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] void add_Changed(System.IO.FileSystemEventHandler)
// docid: M:System.IO.FileSystemWatcher.add_Changed(System.IO.FileSystemEventHandler)
    open func add_Changed(value : Optional<dotnet.System.IO.FileSystemEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__add_Changed_0__1__FileSystemEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Changed(value : @escaping (dotnet.System.Object, dotnet.System.IO.FileSystemEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.FileSystemEventHandler(value);
        return try add_Changed(value: del_value);
    }
    // [IsSpecialName] void remove_Changed(System.IO.FileSystemEventHandler)
// docid: M:System.IO.FileSystemWatcher.remove_Changed(System.IO.FileSystemEventHandler)
    open func remove_Changed(value : Optional<dotnet.System.IO.FileSystemEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__remove_Changed_0__1__FileSystemEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Changed(value : @escaping (dotnet.System.Object, dotnet.System.IO.FileSystemEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.FileSystemEventHandler(value);
        return try remove_Changed(value: del_value);
    }
    // [IsSpecialName] void add_Created(System.IO.FileSystemEventHandler)
// docid: M:System.IO.FileSystemWatcher.add_Created(System.IO.FileSystemEventHandler)
    open func add_Created(value : Optional<dotnet.System.IO.FileSystemEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__add_Created_0__1__FileSystemEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Created(value : @escaping (dotnet.System.Object, dotnet.System.IO.FileSystemEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.FileSystemEventHandler(value);
        return try add_Created(value: del_value);
    }
    // [IsSpecialName] void remove_Created(System.IO.FileSystemEventHandler)
// docid: M:System.IO.FileSystemWatcher.remove_Created(System.IO.FileSystemEventHandler)
    open func remove_Created(value : Optional<dotnet.System.IO.FileSystemEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__remove_Created_0__1__FileSystemEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Created(value : @escaping (dotnet.System.Object, dotnet.System.IO.FileSystemEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.FileSystemEventHandler(value);
        return try remove_Created(value: del_value);
    }
    // [IsSpecialName] void add_Deleted(System.IO.FileSystemEventHandler)
// docid: M:System.IO.FileSystemWatcher.add_Deleted(System.IO.FileSystemEventHandler)
    open func add_Deleted(value : Optional<dotnet.System.IO.FileSystemEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__add_Deleted_0__1__FileSystemEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Deleted(value : @escaping (dotnet.System.Object, dotnet.System.IO.FileSystemEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.FileSystemEventHandler(value);
        return try add_Deleted(value: del_value);
    }
    // [IsSpecialName] void remove_Deleted(System.IO.FileSystemEventHandler)
// docid: M:System.IO.FileSystemWatcher.remove_Deleted(System.IO.FileSystemEventHandler)
    open func remove_Deleted(value : Optional<dotnet.System.IO.FileSystemEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__remove_Deleted_0__1__FileSystemEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Deleted(value : @escaping (dotnet.System.Object, dotnet.System.IO.FileSystemEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.FileSystemEventHandler(value);
        return try remove_Deleted(value: del_value);
    }
    // [IsSpecialName] void add_Error(System.IO.ErrorEventHandler)
// docid: M:System.IO.FileSystemWatcher.add_Error(System.IO.ErrorEventHandler)
    open func add_Error(value : Optional<dotnet.System.IO.ErrorEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__add_Error_0__1__ErrorEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Error(value : @escaping (dotnet.System.Object, dotnet.System.IO.ErrorEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.ErrorEventHandler(value);
        return try add_Error(value: del_value);
    }
    // [IsSpecialName] void remove_Error(System.IO.ErrorEventHandler)
// docid: M:System.IO.FileSystemWatcher.remove_Error(System.IO.ErrorEventHandler)
    open func remove_Error(value : Optional<dotnet.System.IO.ErrorEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__remove_Error_0__1__ErrorEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Error(value : @escaping (dotnet.System.Object, dotnet.System.IO.ErrorEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.ErrorEventHandler(value);
        return try remove_Error(value: del_value);
    }
    // [IsSpecialName] void add_Renamed(System.IO.RenamedEventHandler)
// docid: M:System.IO.FileSystemWatcher.add_Renamed(System.IO.RenamedEventHandler)
    open func add_Renamed(value : Optional<dotnet.System.IO.RenamedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__add_Renamed_0__1__RenamedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func add_Renamed(value : @escaping (dotnet.System.Object, dotnet.System.IO.RenamedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.RenamedEventHandler(value);
        return try add_Renamed(value: del_value);
    }
    // [IsSpecialName] void remove_Renamed(System.IO.RenamedEventHandler)
// docid: M:System.IO.FileSystemWatcher.remove_Renamed(System.IO.RenamedEventHandler)
    open func remove_Renamed(value : Optional<dotnet.System.IO.RenamedEventHandler>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_FileSystemWatcher_void__remove_Renamed_0__1__RenamedEventHandler(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // delegate closure overload
    open func remove_Renamed(value : @escaping (dotnet.System.Object, dotnet.System.IO.RenamedEventArgs) throws -> Void) throws {
        let del_value = try dotnet.System.IO.RenamedEventHandler(value);
        return try remove_Renamed(value: del_value);
    }
    /**
    Gets or sets a value indicating whether the component is enabled.

    */
    open var EnableRaisingEvents : Bool {
        get {
            return try! get_EnableRaisingEvents();
        }
        set(v) {
            return try! set_EnableRaisingEvents(value: v);
        }
    }
    /**
    Gets or sets the filter string used to determine what files are monitored in a directory.

    */
    open var Filter : dotnet.System.String {
        get {
            return try! get_Filter();
        }
        set(v) {
            return try! set_Filter(value: v);
        }
    }
    /**
    Gets the collection of all the filters used to determine what files are monitored in a directory.

    */
    open var Filters : dotnet.System.Collections.ObjectModel.Collection_1<dotnet.System.String> {
        get {
            return try! get_Filters();
        }
    }
    /**
    Gets or sets a value indicating whether subdirectories within the specified path should be monitored.

    */
    open var IncludeSubdirectories : Bool {
        get {
            return try! get_IncludeSubdirectories();
        }
        set(v) {
            return try! set_IncludeSubdirectories(value: v);
        }
    }
    /**
    Gets or sets the size (in bytes) of the internal buffer.

    */
    open var InternalBufferSize : Swift.Int32 {
        get {
            return try! get_InternalBufferSize();
        }
        set(v) {
            return try! set_InternalBufferSize(value: v);
        }
    }
    /**
    Gets or sets the type of changes to watch for.

    */
    open var NotifyFilter : dotnet.System.IO.NotifyFilters {
        get {
            return try! get_NotifyFilter();
        }
        set(v) {
            return try! set_NotifyFilter(value: v);
        }
    }
    /**
    Gets or sets the path of the directory to watch.

    */
    open var Path : dotnet.System.String {
        get {
            return try! get_Path();
        }
        set(v) {
            return try! set_Path(value: v);
        }
    }
    /**
    Gets or sets an  for the .

    */
    open override var Site : Optional<dotnet.System.ComponentModel.ISite> {
        get {
            return try! get_Site();
        }
        set(v) {
            return try! set_Site(value: v!);
        }
    }
    /**
    Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.

    */
    open var SynchronizingObject : Optional<dotnet.System.ComponentModel.ISynchronizeInvoke> {
        get {
            return try! get_SynchronizingObject();
        }
        set(v) {
            return try! set_SynchronizingObject(value: v!);
        }
    }
} // FileSystemWatcher


// type: System.IO.InternalBufferOverflowException
    /**
    The exception thrown when the internal buffer overflows.

    */
open class InternalBufferOverflowException
    :
    dotnet.System.SystemException
{
    open class override func get_type_handle() -> TypeHandle {
        return System_IO_InternalBufferOverflowException_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor()
// docid: M:System.IO.InternalBufferOverflowException.#ctor
    /**
    Initializes a new default instance of the  class.

    */
    public override init() throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_InternalBufferOverflowException_ctor_0__0(&__thrown);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String)
// docid: M:System.IO.InternalBufferOverflowException.#ctor(System.String)
    /**
    Initializes a new instance of the  class with the error message to be displayed specified.

    - Parameter message: The message to be given for the exception.
    */
    public override init(message : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_InternalBufferOverflowException_ctor_0__1__String(&__thrown, message?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.String, System.Exception)
// docid: M:System.IO.InternalBufferOverflowException.#ctor(System.String,System.Exception)
    /**
    Initializes a new instance of the  class with the message to be displayed and the generated inner exception specified.

    - Parameter message: The message to be given for the exception.
    - Parameter inner: The inner exception.
    */
    public init(message : Optional<dotnet.System.String>, inner : Optional<dotnet.System.Exception>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_InternalBufferOverflowException_ctor_0__2__String_Exception(&__thrown, message?.get_handle() ?? nil, inner?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
} // InternalBufferOverflowException


// type: System.IO.NotifyFilters
    /**
    Specifies changes to watch for in a file or folder.

    */
public struct NotifyFilters : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_IO_NotifyFilters_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.IO.NotifyFilters FileName
    /**
    The name of the file.

    */
    public static var FileName : dotnet.System.IO.NotifyFilters {
        get {
        let __return = dotnet.System.IO.NotifyFilters(val: System_IO_NotifyFilters_get_FileName());
            return __return;
        }
    }
    // static field: System.IO.NotifyFilters DirectoryName
    /**
    The name of the directory.

    */
    public static var DirectoryName : dotnet.System.IO.NotifyFilters {
        get {
        let __return = dotnet.System.IO.NotifyFilters(val: System_IO_NotifyFilters_get_DirectoryName());
            return __return;
        }
    }
    // static field: System.IO.NotifyFilters Attributes
    /**
    The attributes of the file or folder.

    */
    public static var Attributes : dotnet.System.IO.NotifyFilters {
        get {
        let __return = dotnet.System.IO.NotifyFilters(val: System_IO_NotifyFilters_get_Attributes());
            return __return;
        }
    }
    // static field: System.IO.NotifyFilters Size
    /**
    The size of the file or folder.

    */
    public static var Size : dotnet.System.IO.NotifyFilters {
        get {
        let __return = dotnet.System.IO.NotifyFilters(val: System_IO_NotifyFilters_get_Size());
            return __return;
        }
    }
    // static field: System.IO.NotifyFilters LastWrite
    /**
    The date the file or folder last had anything written to it.

    */
    public static var LastWrite : dotnet.System.IO.NotifyFilters {
        get {
        let __return = dotnet.System.IO.NotifyFilters(val: System_IO_NotifyFilters_get_LastWrite());
            return __return;
        }
    }
    // static field: System.IO.NotifyFilters LastAccess
    /**
    The date the file or folder was last opened.

    */
    public static var LastAccess : dotnet.System.IO.NotifyFilters {
        get {
        let __return = dotnet.System.IO.NotifyFilters(val: System_IO_NotifyFilters_get_LastAccess());
            return __return;
        }
    }
    // static field: System.IO.NotifyFilters CreationTime
    /**
    The time the file or folder was created.

    */
    public static var CreationTime : dotnet.System.IO.NotifyFilters {
        get {
        let __return = dotnet.System.IO.NotifyFilters(val: System_IO_NotifyFilters_get_CreationTime());
            return __return;
        }
    }
    // static field: System.IO.NotifyFilters Security
    /**
    The security settings of the file or folder.

    */
    public static var Security : dotnet.System.IO.NotifyFilters {
        get {
        let __return = dotnet.System.IO.NotifyFilters(val: System_IO_NotifyFilters_get_Security());
            return __return;
        }
    }
} // NotifyFilters


// type: System.IO.RenamedEventArgs
    /**
    Provides data for the  event.

    */
open class RenamedEventArgs
    :
    dotnet.System.IO.FileSystemEventArgs
{
    open class override func get_type_handle() -> TypeHandle {
        return System_IO_RenamedEventArgs_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.IO.WatcherChangeTypes, System.String, System.String, System.String)
// docid: M:System.IO.RenamedEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String)
    /**
    Initializes a new instance of the  class.

    - Parameter changeType: One of the  values.
    - Parameter directory: The name of the affected file or directory.
    - Parameter name: The name of the affected file or directory.
    - Parameter oldName: The old name of the affected file or directory.
    */
    public init(changeType : dotnet.System.IO.WatcherChangeTypes, directory : dotnet.System.String, name : Optional<dotnet.System.String>, oldName : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_IO_RenamedEventArgs_ctor_0__4__WatcherChangeTypes_String_String_String(&__thrown, changeType.get_value(), directory.get_handle(), name?.get_handle() ?? nil, oldName?.get_handle() ?? nil);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // [IsSpecialName] System.String get_OldFullPath()
// docid: M:System.IO.RenamedEventArgs.get_OldFullPath
    open func get_OldFullPath() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_RenamedEventArgs_String__get_OldFullPath_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.String get_OldName()
// docid: M:System.IO.RenamedEventArgs.get_OldName
    open func get_OldName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_RenamedEventArgs_String__get_OldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    /**
    Gets the previous fully qualified path of the affected file or directory.

    */
    open var OldFullPath : dotnet.System.String {
        get {
            return try! get_OldFullPath();
        }
    }
    /**
    Gets the old name of the affected file or directory.

    */
    open var OldName : Optional<dotnet.System.String> {
        get {
            return try! get_OldName();
        }
    }
} // RenamedEventArgs


// type: System.IO.RenamedEventHandler
    /**
    Represents the method that will handle the  event of a  class.

    */
public final class RenamedEventHandler
    :
    dotnet.System.Delegate
{
    public class override func get_type_handle() -> TypeHandle {
        return System_IO_RenamedEventHandler_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // void Invoke(System.Object, System.IO.RenamedEventArgs)
// docid: M:System.IO.RenamedEventHandler.Invoke(System.Object,System.IO.RenamedEventArgs)
    public func Invoke(sender : dotnet.System.Object, e : dotnet.System.IO.RenamedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_IO_RenamedEventHandler_void__Invoke_0__2__Object_RenamedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.IAsyncResult BeginInvoke(System.Object, System.IO.RenamedEventArgs, System.AsyncCallback, System.Object)
// docid: M:System.IO.RenamedEventHandler.BeginInvoke(System.Object,System.IO.RenamedEventArgs,System.AsyncCallback,System.Object)
    public func BeginInvoke(sender : dotnet.System.Object, e : dotnet.System.IO.RenamedEventArgs, callback : Optional<dotnet.System.AsyncCallback>, object : Optional<dotnet.System.Object>) throws -> Optional<dotnet.System.IAsyncResult> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_RenamedEventHandler_IAsyncResult__BeginInvoke_0__4__Object_RenamedEventArgs_AsyncCallback_Object(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle(), callback?.get_handle() ?? nil, object?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.IAsyncResult(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // void EndInvoke(System.IAsyncResult)
// docid: M:System.IO.RenamedEventHandler.EndInvoke(System.IAsyncResult)
    public func EndInvoke(result : Optional<dotnet.System.IAsyncResult>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_RenamedEventHandler_void__EndInvoke_0__1__IAsyncResult(&__thrown, self.get_handle(), result?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    public init(_ callback : @escaping (dotnet.System.Object, dotnet.System.IO.RenamedEventArgs) throws -> Void) throws
    {
        let __bridge : (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void =
        {
            (thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void in
            do
            {
                thrown.pointee = nil;
                try callback(dotnet.System.Object(hndl: sender), dotnet.System.IO.RenamedEventArgs(hndl: e));
            }
            catch let e as dotnet.System.Exception
            {
                thrown.pointee = __copy_handle(e.get_handle());
            }
            catch
            {
                let e = try! dotnet.System.Exception(message: "TODO fail inside closure");
                thrown.pointee = __copy_handle(e.get_handle());
            }
        };
        let cbarg = UnsafeRawPointer(Unmanaged.passRetained(__bridge as AnyObject).toOpaque());
        func __cb(cb : UnsafeRawPointer?, thrown : UnsafeMutablePointer<NullableHandle>, sender : NonnullHandle, e : NonnullHandle) -> Void
        {
            let f = Unmanaged<AnyObject>.fromOpaque(cb!).takeUnretainedValue() as! (UnsafeMutablePointer<NullableHandle>, NonnullHandle, NonnullHandle) -> Void;
            f(thrown, sender, e);
        }
        var __thrown : NullableHandle = nil;
        let h = System_IO_RenamedEventHandler_create(
            &__thrown,
            cbarg,
            nil, // TODO deinit
            __cb
            );
            // TODO check thrown
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // void Invoke(System.Object, System.IO.RenamedEventArgs)
// docid: M:System.IO.RenamedEventHandler.Invoke(System.Object,System.IO.RenamedEventArgs)
    public func callAsFunction(sender : dotnet.System.Object, e : dotnet.System.IO.RenamedEventArgs) throws {
        var __thrown : NullableHandle = nil;
        System_IO_RenamedEventHandler_void__Invoke_0__2__Object_RenamedEventArgs(&__thrown, self.get_handle(), sender.get_handle(), e.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // RenamedEventHandler


// type: System.IO.WaitForChangedResult
// boxed value type
    /**
    Contains information on the change that occurred.

    */
public final class WaitForChangedResult
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_IO_WaitForChangedResult_get_type_handle();
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    /**
    Gets or sets the type of change that occurred.

    */
    public var ChangeType : dotnet.System.IO.WatcherChangeTypes {
        get {
            return try! get_ChangeType();
        }
        set(v) {
            return try! set_ChangeType(value: v);
        }
    }
    /**
    Gets or sets the name of the file or directory that changed.

    */
    public var Name : Optional<dotnet.System.String> {
        get {
            return try! get_Name();
        }
        set(v) {
            return try! set_Name(value: v!);
        }
    }
    /**
    Gets or sets the original name of the file or directory that was renamed.

    */
    public var OldName : Optional<dotnet.System.String> {
        get {
            return try! get_OldName();
        }
        set(v) {
            return try! set_OldName(value: v!);
        }
    }
    /**
    Gets or sets a value indicating whether the wait operation timed out.

    */
    public var TimedOut : Bool {
        get {
            return try! get_TimedOut();
        }
        set(v) {
            return try! set_TimedOut(value: v);
        }
    }
    public override init() {
        let h = System_IO_WaitForChangedResult_implicit_ctor();
            super.init(hndl: h);
    }
    // [IsSpecialName] System.IO.WatcherChangeTypes get_ChangeType()
// docid: M:System.IO.WaitForChangedResult.get_ChangeType
    public func get_ChangeType() throws -> dotnet.System.IO.WatcherChangeTypes {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_WaitForChangedResult_WatcherChangeTypes__get_ChangeType_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.IO.WatcherChangeTypes(val: __return);
        }
    }
    // [IsSpecialName] void set_ChangeType(System.IO.WatcherChangeTypes)
// docid: M:System.IO.WaitForChangedResult.set_ChangeType(System.IO.WatcherChangeTypes)
    public func set_ChangeType(value : dotnet.System.IO.WatcherChangeTypes) throws {
        var __thrown : NullableHandle = nil;
        System_IO_WaitForChangedResult_void__set_ChangeType_0__1__WatcherChangeTypes(&__thrown, self.get_handle(), value.get_value());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_Name()
// docid: M:System.IO.WaitForChangedResult.get_Name
    public func get_Name() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_WaitForChangedResult_String__get_Name_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_Name(System.String)
// docid: M:System.IO.WaitForChangedResult.set_Name(System.String)
    public func set_Name(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_WaitForChangedResult_void__set_Name_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] System.String get_OldName()
// docid: M:System.IO.WaitForChangedResult.get_OldName
    public func get_OldName() throws -> Optional<dotnet.System.String> {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_WaitForChangedResult_String__get_OldName_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        if let __ret_unwrapped = __return {
            return dotnet.System.String(hndl : __ret_unwrapped);
        } else {
            return nil;
        }
        }
    }
    // [IsSpecialName] void set_OldName(System.String)
// docid: M:System.IO.WaitForChangedResult.set_OldName(System.String)
    public func set_OldName(value : Optional<dotnet.System.String>) throws {
        var __thrown : NullableHandle = nil;
        System_IO_WaitForChangedResult_void__set_OldName_0__1__String(&__thrown, self.get_handle(), value?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // [IsSpecialName] bool get_TimedOut()
// docid: M:System.IO.WaitForChangedResult.get_TimedOut
    public func get_TimedOut() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_IO_WaitForChangedResult_bool__get_TimedOut_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] void set_TimedOut(bool)
// docid: M:System.IO.WaitForChangedResult.set_TimedOut(System.Boolean)
    public func set_TimedOut(value : Bool) throws {
        var __thrown : NullableHandle = nil;
        System_IO_WaitForChangedResult_void__set_TimedOut_0__1__bool(&__thrown, self.get_handle(), Swift.Int32(value ? 1 : 0));
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // WaitForChangedResult


// type: System.IO.WatcherChangeTypes
    /**
    Changes that might occur to a file or directory.

    */
public struct WatcherChangeTypes : SGBridgeGenericValue {
    let v : Swift.Int32;
    public init(val: Swift.Int32) { self.v = val; }
    public func get_value() -> Swift.Int32 { return self.v; }
    public static func get_type_handle() -> TypeHandle {
        return System_IO_WatcherChangeTypes_get_type_handle();
    }
    public func to_gval() -> GVal { return GVal(self.v); }
    public func dup_gval() -> GVal { return to_gval(); }
    public init(gval: GVal) { self.v = Swift.Int32(gval); }
    // static field: System.IO.WatcherChangeTypes Created
    /**
    The creation of a file or folder.

    */
    public static var Created : dotnet.System.IO.WatcherChangeTypes {
        get {
        let __return = dotnet.System.IO.WatcherChangeTypes(val: System_IO_WatcherChangeTypes_get_Created());
            return __return;
        }
    }
    // static field: System.IO.WatcherChangeTypes Deleted
    /**
    The deletion of a file or folder.

    */
    public static var Deleted : dotnet.System.IO.WatcherChangeTypes {
        get {
        let __return = dotnet.System.IO.WatcherChangeTypes(val: System_IO_WatcherChangeTypes_get_Deleted());
            return __return;
        }
    }
    // static field: System.IO.WatcherChangeTypes Changed
    /**
    The change of a file or folder. The types of changes include: changes to size, attributes, security settings, last write, and last access time.

    */
    public static var Changed : dotnet.System.IO.WatcherChangeTypes {
        get {
        let __return = dotnet.System.IO.WatcherChangeTypes(val: System_IO_WatcherChangeTypes_get_Changed());
            return __return;
        }
    }
    // static field: System.IO.WatcherChangeTypes Renamed
    /**
    The renaming of a file or folder.

    */
    public static var Renamed : dotnet.System.IO.WatcherChangeTypes {
        get {
        let __return = dotnet.System.IO.WatcherChangeTypes(val: System_IO_WatcherChangeTypes_get_Renamed());
            return __return;
        }
    }
    // static field: System.IO.WatcherChangeTypes All
    /**
    The creation, deletion, change, or renaming of a file or folder.

    */
    public static var All : dotnet.System.IO.WatcherChangeTypes {
        get {
        let __return = dotnet.System.IO.WatcherChangeTypes(val: System_IO_WatcherChangeTypes_get_All());
            return __return;
        }
    }
} // WatcherChangeTypes


}


